// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

import * as fs from "@ts-common/fs"
import * as process from "process"
import * as path from "path"
import * as cm from "@ts-common/commonmark-to-markdown"
import * as it from "@ts-common/iterator"
import * as yaml from "js-yaml"

type Code = {
  readonly "input-file"?: ReadonlyArray<string>|string
}
const yamlBegin = `yaml $(tag) == 'all-api-versions' /* autogenerated */`;

const main = async (specificationDir: string, profilesDir: string) => {
  try {
    const list = fs.recursiveReaddir(specificationDir)
    for await (const file of list) {
      const f = path.parse(file)
      if (f.base === "readme.md") {
        const original_content = (await fs.readFile(file)).toString()
        let content = original_content;
        const readMe = cm.parse(content)
        const set = new Set<string>()
        for (const c of cm.iterate(readMe.markDown)) {
          if (
            c.type === "code_block" &&
            c.info !== null &&
            (c.info.startsWith("yaml") && !c.info.startsWith(yamlBegin)) &&
            c.literal !== null
          ) {
            const DOC = (yaml.load(c.literal) as Code);
            if (DOC ) {
              const y = DOC['input-file']
              if (typeof y === "string") {
                set.add(y)
              } else if (it.isArray(y)) {
                for (const i of y) {
                  set.add(i)
                }
              }
            }
            
          }
        }
        const block = 
`## AzureResourceSchema

These settings apply only when \`--azureresourceschema\` is specified on the command line.

### AzureResourceSchema multi-api

\`\`\` yaml $(azureresourceschema) && $(multiapi)
# include the azure profile definitions from the standard location
require: ${path.relative(f.dir, profilesDir).replace(/\\/g, '/')}/readme.md

output-folder: $(azureresourceschema-folder)/schemas

# all the input files across all versions
${yaml.dump({ 'input-file': it.toArray(set) },{ lineWidth: 1000 } )}
\`\`\``
        content = content.replace( /``` yaml \$\(tag\) == 'all-api-versions' \/\* autogenerated \*\/[\S\s]*?```/g, '')
        content = content.replace( /``` yaml \$\(tag\) == 'all-api-versions'[\S\s]*?```/g, '')
        content = content.replace( /## Multi-API\/Profile support for AutoRest v3 generators[\S\s]*/g, '')

        if(original_content !== content ){
          console.log(`Updating: ${file}`);
          fs.writeFile(path.join(f.dir, "readme.md"), content)
        }

        if (f.dir.endsWith('/resource-manager')) {
          console.log(`Rewriting: ${f.dir}/readme.azureresourceschema.md`);
          fs.writeFile(path.join(f.dir, "readme.azureresourceschema.md"), block);
        }
        
      }
    }
  } catch (e) {
    console.error(e)
  }
}

main(path.join(process.cwd(), "specification"), path.join(process.cwd(), "profiles"))
