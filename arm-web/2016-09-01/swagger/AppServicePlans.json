{
  "swagger": "2.0",
  "info": {
    "version": "2016-09-01",
    "title": "AppServicePlans API Client"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get all App Service plans for a subcription.",
        "description": "Get all App Service plans for a subcription.",
        "operationId": "AppServicePlans_List",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "detailed",
            "in": "query",
            "description": "Specify <code>true</code> to return all App Service plan properties. The default is <code>false</code>, which returns a subset of the properties.\n Retrieval of all properties may increase the API latency.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppServicePlanCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get all App Service plans in a resource group.",
        "description": "Get all App Service plans in a resource group.",
        "operationId": "AppServicePlans_ListByResourceGroup",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppServicePlanCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get an App Service plan.",
        "description": "Get an App Service plan.",
        "operationId": "AppServicePlans_Get",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppServicePlan"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Creates or updates an App Service Plan.",
        "description": "Creates or updates an App Service Plan.",
        "operationId": "AppServicePlans_CreateOrUpdate",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "appServicePlan",
            "in": "body",
            "description": "Details of the App Service plan.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppServicePlan"
            }
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/AppServicePlan"
            }
          },
          "202": {
            "description": "Operation is in progress.",
            "schema": {
              "$ref": "#/definitions/AppServicePlan"
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Delete an App Service plan.",
        "description": "Delete an App Service plan.",
        "operationId": "AppServicePlans_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/capabilities": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "List all capabilities of an App Service plan.",
        "description": "List all capabilities of an App Service plan.",
        "operationId": "AppServicePlans_ListCapabilities",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Capability"
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Retrieve a Hybrid Connection in use in an App Service plan.",
        "description": "Retrieve a Hybrid Connection in use in an App Service plan.",
        "operationId": "AppServicePlans_GetHybridConnection",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "Name of the Service Bus namespace.",
            "required": true,
            "type": "string"
          },
          {
            "name": "relayName",
            "in": "path",
            "description": "Name of the Service Bus relay.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HybridConnection"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Delete a Hybrid Connection in use in an App Service plan.",
        "description": "Delete a Hybrid Connection in use in an App Service plan.",
        "operationId": "AppServicePlans_DeleteHybridConnection",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "Name of the Service Bus namespace.",
            "required": true,
            "type": "string"
          },
          {
            "name": "relayName",
            "in": "path",
            "description": "Name of the Service Bus relay.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted hybrid connection"
          },
          "204": {
            "description": "Hybrid connection does not exist"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys": {
      "post": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get the send key name and value of a Hybrid Connection.",
        "description": "Get the send key name and value of a Hybrid Connection.",
        "operationId": "AppServicePlans_ListHybridConnectionKeys",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the Service Bus namespace.",
            "required": true,
            "type": "string"
          },
          {
            "name": "relayName",
            "in": "path",
            "description": "The name of the Service Bus relay.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HybridConnectionKey"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/sites": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get all apps that use a Hybrid Connection in an App Service Plan.",
        "description": "Get all apps that use a Hybrid Connection in an App Service Plan.",
        "operationId": "AppServicePlans_ListWebAppsByHybridConnection",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "Name of the Hybrid Connection namespace.",
            "required": true,
            "type": "string"
          },
          {
            "name": "relayName",
            "in": "path",
            "description": "Name of the Hybrid Connection relay.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionPlanLimits/limit": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get the maximum number of Hybrid Connections allowed in an App Service plan.",
        "description": "Get the maximum number of Hybrid Connections allowed in an App Service plan.",
        "operationId": "AppServicePlans_GetHybridConnectionPlanLimit",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HybridConnectionLimits"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionRelays": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Retrieve all Hybrid Connections in use in an App Service plan.",
        "description": "Retrieve all Hybrid Connections in use in an App Service plan.",
        "operationId": "AppServicePlans_ListHybridConnections",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HybridConnectionCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get metrics that can be queried for an App Service plan, and their definitions.",
        "description": "Get metrics that can be queried for an App Service plan, and their definitions.",
        "operationId": "AppServicePlans_ListMetricDefintions",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceMetricDefinitionCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metrics": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get metrics for an App Serice plan.",
        "description": "Get metrics for an App Serice plan.",
        "operationId": "AppServicePlans_ListMetrics",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "details",
            "in": "query",
            "description": "Specify <code>true</code> to include instance details. The default is <code>false</code>.",
            "type": "boolean"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.",
            "x-ms-skip-url-encoding": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceMetricCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites": {
      "post": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Restart all apps in an App Service plan.",
        "description": "Restart all apps in an App Service plan.",
        "operationId": "AppServicePlans_RestartWebApps",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "softRestart",
            "in": "query",
            "description": "Specify <code>true</code> to performa a soft restart, applies the configuration settings and restarts the apps if necessary. The default is <code>false</code>, which always restarts and reprovisions the apps",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get all apps associated with an App Service plan.",
        "description": "Get all apps associated with an App Service plan.",
        "operationId": "AppServicePlans_ListWebApps",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "$skipToken",
            "in": "query",
            "description": "Skip to a web app in the list of webapps associated with app service plan. If specified, the resulting list will contain web apps starting from (including) the skipToken. Otherwise, the resulting list contains web apps from the start of the list",
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Supported filter: $filter=state eq running. Returns only web apps that are currently running",
            "x-ms-skip-url-encoding": true,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "List page size. If specified, results are paged.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebAppCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get all Virtual Networks associated with an App Service plan.",
        "description": "Get all Virtual Networks associated with an App Service plan.",
        "operationId": "AppServicePlans_ListVnets",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VnetInfo"
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get a Virtual Network associated with an App Service plan.",
        "description": "Get a Virtual Network associated with an App Service plan.",
        "operationId": "AppServicePlans_GetVnetFromServerFarm",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "vnetName",
            "in": "path",
            "description": "Name of the Virtual Network.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/VnetInfo"
            }
          },
          "404": {
            "description": "Virtual network could not be found."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get a Virtual Network gateway.",
        "description": "Get a Virtual Network gateway.",
        "operationId": "AppServicePlans_GetVnetGateway",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "vnetName",
            "in": "path",
            "description": "Name of the Virtual Network.",
            "required": true,
            "type": "string"
          },
          {
            "name": "gatewayName",
            "in": "path",
            "description": "Name of the gateway. Only the 'primary' gateway is supported.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VnetGateway"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Update a Virtual Network gateway.",
        "description": "Update a Virtual Network gateway.",
        "operationId": "AppServicePlans_UpdateVnetGateway",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "vnetName",
            "in": "path",
            "description": "Name of the Virtual Network.",
            "required": true,
            "type": "string"
          },
          {
            "name": "gatewayName",
            "in": "path",
            "description": "Name of the gateway. Only the 'primary' gateway is supported.",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectionEnvelope",
            "in": "body",
            "description": "Definition of the gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VnetGateway"
            }
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VnetGateway"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get all routes that are associated with a Virtual Network in an App Service plan.",
        "description": "Get all routes that are associated with a Virtual Network in an App Service plan.",
        "operationId": "AppServicePlans_ListRoutesForVnet",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "vnetName",
            "in": "path",
            "description": "Name of the Virtual Network.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VnetRoute"
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}": {
      "get": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Get a Virtual Network route in an App Service plan.",
        "description": "Get a Virtual Network route in an App Service plan.",
        "operationId": "AppServicePlans_GetRouteForVnet",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "vnetName",
            "in": "path",
            "description": "Name of the Virtual Network.",
            "required": true,
            "type": "string"
          },
          {
            "name": "routeName",
            "in": "path",
            "description": "Name of the Virtual Network route.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VnetRoute"
              }
            }
          },
          "404": {
            "description": "Specified route does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Create or update a Virtual Network route in an App Service plan.",
        "description": "Create or update a Virtual Network route in an App Service plan.",
        "operationId": "AppServicePlans_CreateOrUpdateVnetRoute",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "vnetName",
            "in": "path",
            "description": "Name of the Virtual Network.",
            "required": true,
            "type": "string"
          },
          {
            "name": "routeName",
            "in": "path",
            "description": "Name of the Virtual Network route.",
            "required": true,
            "type": "string"
          },
          {
            "name": "route",
            "in": "body",
            "description": "Definition of the Virtual Network route.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VnetRoute"
            }
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/VnetRoute"
            }
          },
          "400": {
            "description": "Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid."
          },
          "404": {
            "description": "Route not found."
          }
        }
      },
      "delete": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Delete a Virtual Network route in an App Service plan.",
        "description": "Delete a Virtual Network route in an App Service plan.",
        "operationId": "AppServicePlans_DeleteVnetRoute",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "vnetName",
            "in": "path",
            "description": "Name of the Virtual Network.",
            "required": true,
            "type": "string"
          },
          {
            "name": "routeName",
            "in": "path",
            "description": "Name of the Virtual Network route.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted Virtual Network route."
          },
          "404": {
            "description": "Specified Virtual Network route does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Create or update a Virtual Network route in an App Service plan.",
        "description": "Create or update a Virtual Network route in an App Service plan.",
        "operationId": "AppServicePlans_UpdateVnetRoute",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "vnetName",
            "in": "path",
            "description": "Name of the Virtual Network.",
            "required": true,
            "type": "string"
          },
          {
            "name": "routeName",
            "in": "path",
            "description": "Name of the Virtual Network route.",
            "required": true,
            "type": "string"
          },
          {
            "name": "route",
            "in": "body",
            "description": "Definition of the Virtual Network route.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VnetRoute"
            }
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/VnetRoute"
            }
          },
          "400": {
            "description": "Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid."
          },
          "404": {
            "description": "Route not found."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot": {
      "post": {
        "tags": [
          "AppServicePlans"
        ],
        "summary": "Reboot a worker machine in an App Service plan.",
        "description": "Reboot a worker machine in an App Service plan.",
        "operationId": "AppServicePlans_RebootWorker",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the App Service plan.",
            "required": true,
            "type": "string"
          },
          {
            "name": "workerName",
            "in": "path",
            "description": "Name of worker machine, which typically starts with RD.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    }
  },
  "definitions": {
    "ApiDefinitionInfo": {
      "description": "Information about the formal API definition for the app.",
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL of the API definition.",
          "type": "string"
        }
      }
    },
    "AppServicePlan": {
      "description": "App Service plan.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "AppServicePlan resource specific properties",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name for the App Service plan.",
              "type": "string"
            },
            "workerTierName": {
              "description": "Target worker tier assigned to the App Service plan.",
              "type": "string"
            },
            "status": {
              "description": "App Service plan status.",
              "enum": [
                "Ready",
                "Pending"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "StatusOptions",
                "modelAsString": false
              }
            },
            "subscription": {
              "description": "App Service plan subscription.",
              "type": "string",
              "readOnly": true
            },
            "adminSiteName": {
              "description": "App Service plan administration site.",
              "type": "string"
            },
            "hostingEnvironmentProfile": {
              "$ref": "#/definitions/HostingEnvironmentProfile",
              "description": "Specification for the App Service Environment to use for the App Service plan.",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "maximumNumberOfWorkers": {
              "format": "int32",
              "description": "Maximum number of instances that can be assigned to this App Service plan.",
              "type": "integer",
              "readOnly": true
            },
            "geoRegion": {
              "description": "Geographical location for the App Service plan.",
              "type": "string",
              "readOnly": true
            },
            "perSiteScaling": {
              "description": "If <code>true</code>, apps assigned to this App Service plan can be scaled independently.\n If <code>false</code>, apps assigned to this App Service plan will scale to all instances of the plan.",
              "default": false,
              "type": "boolean"
            },
            "numberOfSites": {
              "format": "int32",
              "description": "Number of apps assigned to this App Service plan.",
              "type": "integer",
              "readOnly": true
            },
            "resourceGroup": {
              "description": "Resource group of the App Service plan.",
              "type": "string",
              "readOnly": true
            },
            "reserved": {
              "description": "Reserved.",
              "default": false,
              "type": "boolean",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "targetWorkerCount": {
              "format": "int32",
              "description": "Scaling worker count.",
              "type": "integer"
            },
            "targetWorkerSizeId": {
              "format": "int32",
              "description": "Scaling worker size ID.",
              "type": "integer"
            },
            "provisioningState": {
              "description": "Provisioning state of the App Service Environment.",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "InProgress",
                "Deleting"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": false
              }
            }
          },
          "x-ms-client-flatten": true
        },
        "sku": {
          "$ref": "#/definitions/SkuDescription"
        }
      }
    },
    "AppServicePlanCollection": {
      "description": "Collection of App Service plans.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppServicePlan"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string"
        }
      }
    },
    "AutoHealActions": {
      "description": "Actions which to take by the auto-heal module when a rule is triggered.",
      "type": "object",
      "properties": {
        "actionType": {
          "description": "Predefined action to be taken.",
          "enum": [
            "Recycle",
            "LogEvent",
            "CustomAction"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AutoHealActionType",
            "modelAsString": false
          }
        },
        "customAction": {
          "$ref": "#/definitions/AutoHealCustomAction",
          "description": "Custom action to be taken."
        },
        "minProcessExecutionTime": {
          "description": "Minimum time the process must execute\n before taking the action",
          "type": "string"
        }
      }
    },
    "AutoHealCustomAction": {
      "description": "Custom action to be executed\n when an auto heal rule is triggered.",
      "type": "object",
      "properties": {
        "exe": {
          "description": "Executable to be run.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters for the executable.",
          "type": "string"
        }
      }
    },
    "AutoHealRules": {
      "description": "Rules that can be defined for auto-heal.",
      "type": "object",
      "properties": {
        "triggers": {
          "$ref": "#/definitions/AutoHealTriggers",
          "description": "Conditions that describe when to execute the auto-heal actions."
        },
        "actions": {
          "$ref": "#/definitions/AutoHealActions",
          "description": "Actions to be executed when a rule is triggered."
        }
      }
    },
    "AutoHealTriggers": {
      "description": "Triggers for auto-heal.",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/RequestsBasedTrigger",
          "description": "A rule based on total requests."
        },
        "privateBytesInKB": {
          "format": "int32",
          "description": "A rule based on private bytes.",
          "type": "integer"
        },
        "statusCodes": {
          "description": "A rule based on status codes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusCodesBasedTrigger"
          }
        },
        "slowRequests": {
          "$ref": "#/definitions/SlowRequestsBasedTrigger",
          "description": "A rule based on request execution time."
        }
      }
    },
    "Capability": {
      "description": "Describes the capabilities/features allowed for a specific SKU.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the SKU capability.",
          "type": "string"
        },
        "value": {
          "description": "Value of the SKU capability.",
          "type": "string"
        },
        "reason": {
          "description": "Reason of the SKU capability.",
          "type": "string"
        }
      }
    },
    "CloningInfo": {
      "description": "Information needed for cloning operation.",
      "required": [
        "sourceWebAppId"
      ],
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "Correlation ID of cloning operation. This ID ties multiple cloning operations\n together to use the same snapshot.",
          "type": "string"
        },
        "overwrite": {
          "description": "<code>true</code> to overwrite destination app; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "cloneCustomHostNames": {
          "description": "<code>true</code> to clone custom hostnames from source app; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "cloneSourceControl": {
          "description": "<code>true</code> to clone source control from source app; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "sourceWebAppId": {
          "description": "ARM resource ID of the source app. App resource ID is of the form \n /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and \n /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.",
          "type": "string"
        },
        "hostingEnvironment": {
          "description": "App Service Environment.",
          "type": "string"
        },
        "appSettingsOverrides": {
          "description": "Application setting overrides for cloned app. If specified, these settings override the settings cloned \n from source app. Otherwise, application settings from source app are retained.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "configureLoadBalancing": {
          "description": "<code>true</code> to configure load balancing for source and destination app.",
          "type": "boolean"
        },
        "trafficManagerProfileId": {
          "description": "ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource ID is of the form \n /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.",
          "type": "string"
        },
        "trafficManagerProfileName": {
          "description": "Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does not already exist.",
          "type": "string"
        },
        "ignoreQuotas": {
          "description": "<code>true</code> if quotas should be ignored; otherwise, <code>false</code>.",
          "type": "boolean"
        }
      }
    },
    "ConnStringInfo": {
      "description": "Database connection string information.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of connection string.",
          "type": "string"
        },
        "connectionString": {
          "description": "Connection string value.",
          "type": "string"
        },
        "type": {
          "description": "Type of database.",
          "enum": [
            "MySql",
            "SQLServer",
            "SQLAzure",
            "Custom",
            "NotificationHub",
            "ServiceBus",
            "EventHub",
            "ApiHub",
            "DocDb",
            "RedisCache",
            "PostgreSQL"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ConnectionStringType",
            "modelAsString": false
          }
        }
      }
    },
    "CorsSettings": {
      "description": "Cross-Origin Resource Sharing (CORS) settings for the app.",
      "type": "object",
      "properties": {
        "allowedOrigins": {
          "description": "Gets or sets the list of origins that should be allowed to make cross-origin\n calls (for example: http://example.com:12345). Use \"*\" to allow all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Experiments": {
      "description": "Routing rules in production experiments.",
      "type": "object",
      "properties": {
        "rampUpRules": {
          "description": "List of ramp-up rules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RampUpRule"
          }
        }
      }
    },
    "HandlerMapping": {
      "description": "The IIS handler mappings used to define which handler processes HTTP requests with certain extension. \n For example, it is used to configure php-cgi.exe process to handle all HTTP requests with *.php extension.",
      "type": "object",
      "properties": {
        "extension": {
          "description": "Requests with this extension will be handled using the specified FastCGI application.",
          "type": "string"
        },
        "scriptProcessor": {
          "description": "The absolute path to the FastCGI application.",
          "type": "string"
        },
        "arguments": {
          "description": "Command-line arguments to be passed to the script processor.",
          "type": "string"
        }
      }
    },
    "HostNameSslState": {
      "description": "SSL-enabled hostname.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Hostname.",
          "type": "string"
        },
        "sslState": {
          "description": "SSL type.",
          "enum": [
            "Disabled",
            "SniEnabled",
            "IpBasedEnabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SslState",
            "modelAsString": false
          }
        },
        "virtualIP": {
          "description": "Virtual IP address assigned to the hostname if IP based SSL is enabled.",
          "type": "string"
        },
        "thumbprint": {
          "description": "SSL certificate thumbprint.",
          "type": "string"
        },
        "toUpdate": {
          "description": "Set to <code>true</code> to update existing hostname.",
          "type": "boolean"
        },
        "hostType": {
          "description": "Indicates whether the hostname is a standard or repository hostname.",
          "enum": [
            "Standard",
            "Repository"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "HostType",
            "modelAsString": false
          }
        }
      }
    },
    "HostingEnvironmentProfile": {
      "description": "Specification for an App Service Environment to use for this resource.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Resource ID of the App Service Environment.",
          "type": "string"
        },
        "name": {
          "description": "Name of the App Service Environment.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Resource type of the App Service Environment.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "HybridConnection": {
      "description": "Hybrid Connection contract. This is used to configure a Hybrid Connection.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "HybridConnection resource specific properties",
          "properties": {
            "serviceBusNamespace": {
              "description": "The name of the Service Bus namespace.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "relayName": {
              "description": "The name of the Service Bus relay.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "relayArmUri": {
              "description": "The ARM URI to the Service Bus relay.",
              "type": "string"
            },
            "hostname": {
              "description": "The hostname of the endpoint.",
              "type": "string"
            },
            "port": {
              "format": "int32",
              "description": "The port of the endpoint.",
              "type": "integer"
            },
            "sendKeyName": {
              "description": "The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.",
              "type": "string"
            },
            "sendKeyValue": {
              "description": "The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned\n normally, use the POST /listKeys API instead.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "HybridConnectionCollection": {
      "description": "Collection of hostname bindings.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HybridConnection"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string"
        }
      }
    },
    "HybridConnectionKey": {
      "description": "Hybrid Connection key contract. This has the send key name and value for a Hybrid Connection.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "HybridConnectionKey resource specific properties",
          "properties": {
            "sendKeyName": {
              "description": "The name of the send key.",
              "type": "string",
              "readOnly": true
            },
            "sendKeyValue": {
              "description": "The value of the send key.",
              "type": "string",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "HybridConnectionLimits": {
      "description": "Hybrid Connection limits contract. This is used to return the plan limits of Hybrid Connections.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "HybridConnectionLimits resource specific properties",
          "properties": {
            "current": {
              "format": "int32",
              "description": "The current number of Hybrid Connections.",
              "type": "integer",
              "readOnly": true
            },
            "maximum": {
              "format": "int32",
              "description": "The maximum number of Hybrid Connections allowed.",
              "type": "integer",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "IpSecurityRestriction": {
      "description": "IP security restriction on an app.",
      "required": [
        "ipAddress"
      ],
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "IP address the security restriction is valid for.",
          "type": "string"
        },
        "subnetMask": {
          "description": "Subnet mask for the range of IP addresses the restriction is valid for.",
          "type": "string"
        }
      }
    },
    "NameValuePair": {
      "description": "Name value pair.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Pair name.",
          "type": "string"
        },
        "value": {
          "description": "Pair value.",
          "type": "string"
        }
      }
    },
    "PushSettings": {
      "description": "Push settings for the App.",
      "required": [
        "isPushEnabled"
      ],
      "type": "object",
      "properties": {
        "isPushEnabled": {
          "description": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
          "type": "boolean"
        },
        "tagWhitelistJson": {
          "description": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
          "type": "string"
        },
        "tagsRequiringAuth": {
          "description": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.\n Tags can consist of alphanumeric characters and the following:\n '_', '@', '#', '.', ':', '-'. \n Validation should be performed at the PushRequestHandler.",
          "type": "string"
        },
        "dynamicTagsJson": {
          "description": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.",
          "type": "string"
        }
      }
    },
    "RampUpRule": {
      "description": "Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance.",
      "type": "object",
      "properties": {
        "actionHostName": {
          "description": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.",
          "type": "string"
        },
        "reroutePercentage": {
          "format": "double",
          "description": "Percentage of the traffic which will be redirected to <code>ActionHostName</code>.",
          "type": "number"
        },
        "changeStep": {
          "format": "double",
          "description": "In auto ramp up scenario this is the step to to add/remove from <code>ReroutePercentage</code> until it reaches \n <code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specificed in <code>ChangeIntervalInMinutes</code>.\n Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.",
          "type": "number"
        },
        "changeIntervalInMinutes": {
          "format": "int32",
          "description": "Specifies interval in mimuntes to reevaluate ReroutePercentage.",
          "type": "integer"
        },
        "minReroutePercentage": {
          "format": "double",
          "description": "Specifies lower boundary above which ReroutePercentage will stay.",
          "type": "number"
        },
        "maxReroutePercentage": {
          "format": "double",
          "description": "Specifies upper boundary below which ReroutePercentage will stay.",
          "type": "number"
        },
        "changeDecisionCallbackUrl": {
          "description": "Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.\n https://www.siteextensions.net/packages/TiPCallback/",
          "type": "string"
        },
        "name": {
          "description": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.",
          "type": "string"
        }
      }
    },
    "RequestsBasedTrigger": {
      "description": "Trigger based on total requests.",
      "type": "object",
      "properties": {
        "count": {
          "format": "int32",
          "description": "Count.",
          "type": "integer"
        },
        "timeInterval": {
          "description": "Time interval.",
          "type": "string"
        }
      }
    },
    "Resource": {
      "description": "Azure resource.",
      "required": [
        "location"
      ],
      "properties": {
        "id": {
          "description": "Resource Id.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Resource Name.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource.",
          "type": "string"
        },
        "location": {
          "description": "Resource Location.",
          "type": "string"
        },
        "type": {
          "description": "Resource type.",
          "type": "string"
        },
        "tags": {
          "description": "Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "ResourceCollection": {
      "description": "Collection of resources.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string"
        }
      }
    },
    "ResourceMetric": {
      "description": "Object representing a metric for any resource .",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/ResourceMetricName",
          "description": "Name of metric.",
          "readOnly": true
        },
        "unit": {
          "description": "Metric unit.",
          "type": "string",
          "readOnly": true
        },
        "timeGrain": {
          "description": "Metric granularity. E.g PT1H, PT5M, P1D",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Metric start time.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Metric end time.",
          "type": "string",
          "readOnly": true
        },
        "resourceId": {
          "description": "Metric resource Id.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Resource Id.",
          "type": "string",
          "readOnly": true
        },
        "metricValues": {
          "description": "Metric values.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMetricValue"
          },
          "readOnly": true
        },
        "properties": {
          "description": "Properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMetricProperty"
          },
          "readOnly": true
        }
      }
    },
    "ResourceMetricAvailability": {
      "description": "Metrics availability and retention.",
      "type": "object",
      "properties": {
        "timeGrain": {
          "description": "Time grain .",
          "type": "string",
          "readOnly": true
        },
        "retention": {
          "description": "Retention period for the current time grain.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResourceMetricCollection": {
      "description": "Collection of metric responses.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMetric"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string"
        }
      }
    },
    "ResourceMetricDefinition": {
      "description": "Metadata for the metrics.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ResourceMetricDefinition resource specific properties",
          "properties": {
            "name": {
              "$ref": "#/definitions/ResourceMetricName",
              "description": "Name of the metric.",
              "readOnly": true
            },
            "unit": {
              "description": "Unit of the metric.",
              "type": "string",
              "readOnly": true
            },
            "primaryAggregationType": {
              "description": "Primary aggregation type.",
              "type": "string",
              "readOnly": true
            },
            "metricAvailabilities": {
              "description": "List of time grains supported for the metric together with retention period.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceMetricAvailability"
              },
              "readOnly": true
            },
            "resourceUri": {
              "description": "Resource URI.",
              "type": "string",
              "readOnly": true
            },
            "id": {
              "description": "Resource ID.",
              "type": "string",
              "readOnly": true
            },
            "properties": {
              "description": "Properties.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "ResourceMetricDefinitionCollection": {
      "description": "Collection of metric definitions.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMetricDefinition"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string"
        }
      }
    },
    "ResourceMetricName": {
      "description": "Name of a metric for any resource .",
      "type": "object",
      "properties": {
        "value": {
          "description": "metric name value.",
          "type": "string",
          "readOnly": true
        },
        "localizedValue": {
          "description": "Localized metric name value.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResourceMetricProperty": {
      "description": "Resource metric property.",
      "type": "object",
      "properties": {
        "key": {
          "description": "Key for resource metric property.",
          "type": "string"
        },
        "value": {
          "description": "Value of pair.",
          "type": "string"
        }
      }
    },
    "ResourceMetricValue": {
      "description": "Value of resource metric.",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "Value timestamp.",
          "type": "string",
          "readOnly": true
        },
        "average": {
          "format": "float",
          "description": "Value average.",
          "type": "number",
          "readOnly": true
        },
        "minimum": {
          "format": "float",
          "description": "Value minimum.",
          "type": "number",
          "readOnly": true
        },
        "maximum": {
          "format": "float",
          "description": "Value maximum.",
          "type": "number",
          "readOnly": true
        },
        "total": {
          "format": "float",
          "description": "Value total.",
          "type": "number",
          "readOnly": true
        },
        "count": {
          "format": "float",
          "description": "Value count.",
          "type": "number",
          "readOnly": true
        },
        "properties": {
          "description": "Properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMetricProperty"
          },
          "readOnly": true
        }
      }
    },
    "Site": {
      "description": "A web app, a mobile app backend, or an API app.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "Site resource specific properties",
          "properties": {
            "state": {
              "description": "Current state of the app.",
              "type": "string",
              "readOnly": true
            },
            "hostNames": {
              "description": "Hostnames associated with the app.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "repositorySiteName": {
              "description": "Name of the repository site.",
              "type": "string",
              "readOnly": true
            },
            "usageState": {
              "description": "State indicating whether the app has exceeded its quota usage. Read-only.",
              "enum": [
                "Normal",
                "Exceeded"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "UsageState",
                "modelAsString": false
              }
            },
            "enabled": {
              "description": "<code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).",
              "type": "boolean"
            },
            "enabledHostNames": {
              "description": "Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,\n the app is not served on those hostnames.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "availabilityState": {
              "description": "Management information availability state for the app.",
              "enum": [
                "Normal",
                "Limited",
                "DisasterRecoveryMode"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "SiteAvailabilityState",
                "modelAsString": false
              }
            },
            "hostNameSslStates": {
              "description": "Hostname SSL states are used to manage the SSL bindings for app's hostnames.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HostNameSslState"
              }
            },
            "serverFarmId": {
              "description": "Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\".",
              "type": "string"
            },
            "reserved": {
              "description": "<code>true</code> if reserved; otherwise, <code>false</code>.",
              "default": false,
              "type": "boolean",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "lastModifiedTimeUtc": {
              "format": "date-time",
              "description": "Last time the app was modified, in UTC. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "siteConfig": {
              "$ref": "#/definitions/SiteConfig",
              "description": "Configuration of the app."
            },
            "trafficManagerHostNames": {
              "description": "Azure Traffic Manager hostnames associated with the app. Read-only.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "premiumAppDeployed": {
              "description": "Indicates whether app is deployed as a premium app.",
              "type": "boolean",
              "readOnly": true
            },
            "scmSiteAlsoStopped": {
              "description": "<code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.",
              "default": false,
              "type": "boolean"
            },
            "targetSwapSlot": {
              "description": "Specifies which deployment slot this app will swap into. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "hostingEnvironmentProfile": {
              "$ref": "#/definitions/HostingEnvironmentProfile",
              "description": "App Service Environment to use for the app.",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "microService": {
              "description": "Micro services like apps, logic apps.",
              "default": "WebSites",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "gatewaySiteName": {
              "description": "Name of gateway app associated with the app.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "clientAffinityEnabled": {
              "description": "<code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.",
              "type": "boolean"
            },
            "clientCertEnabled": {
              "description": "<code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.",
              "type": "boolean"
            },
            "hostNamesDisabled": {
              "description": "<code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.\n If <code>true</code>, the app is only accessible via API management process.",
              "type": "boolean"
            },
            "outboundIpAddresses": {
              "description": "List of IP addresses that the app uses for outbound connections (e.g. database access). Read-only.",
              "type": "string",
              "readOnly": true
            },
            "containerSize": {
              "format": "int32",
              "description": "Size of the function container.",
              "type": "integer"
            },
            "dailyMemoryTimeQuota": {
              "format": "int32",
              "description": "Maximum allowed daily memory-time quota (applicable on dynamic apps only).",
              "type": "integer"
            },
            "suspendedTill": {
              "format": "date-time",
              "description": "App suspended till in case memory-time quota is exceeded.",
              "type": "string",
              "readOnly": true
            },
            "maxNumberOfWorkers": {
              "format": "int32",
              "description": "Maximum number of workers.\n This only applies to Functions container.",
              "type": "integer",
              "readOnly": true
            },
            "cloningInfo": {
              "$ref": "#/definitions/CloningInfo",
              "description": "If specified during app creation, the app is cloned from a source app.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "resourceGroup": {
              "description": "Name of the resource group the app belongs to. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "isDefaultContainer": {
              "description": "<code>true</code> if the app is a default container; otherwise, <code>false</code>.",
              "type": "boolean",
              "readOnly": true
            },
            "defaultHostName": {
              "description": "Default hostname of the app. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "slotSwapStatus": {
              "$ref": "#/definitions/SlotSwapStatus",
              "description": "Status of the last deployment slot swap operation.",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "SiteConfig": {
      "description": "Configuration of an App Service app.",
      "type": "object",
      "properties": {
        "numberOfWorkers": {
          "format": "int32",
          "description": "Number of workers.",
          "type": "integer"
        },
        "defaultDocuments": {
          "description": "Default documents.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "netFrameworkVersion": {
          "description": ".NET Framework version.",
          "default": "v4.6",
          "type": "string"
        },
        "phpVersion": {
          "description": "Version of PHP.",
          "type": "string"
        },
        "pythonVersion": {
          "description": "Version of Python.",
          "type": "string"
        },
        "nodeVersion": {
          "description": "Version of Node.js.",
          "type": "string"
        },
        "linuxFxVersion": {
          "description": "Linux App Framework and version",
          "type": "string"
        },
        "requestTracingEnabled": {
          "description": "<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "requestTracingExpirationTime": {
          "format": "date-time",
          "description": "Request tracing expiration time.",
          "type": "string"
        },
        "remoteDebuggingEnabled": {
          "description": "<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "remoteDebuggingVersion": {
          "description": "Remote debugging version.",
          "type": "string"
        },
        "httpLoggingEnabled": {
          "description": "<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "logsDirectorySizeLimit": {
          "format": "int32",
          "description": "HTTP logs directory size limit.",
          "type": "integer"
        },
        "detailedErrorLoggingEnabled": {
          "description": "<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "publishingUsername": {
          "description": "Publishing user name.",
          "type": "string"
        },
        "appSettings": {
          "description": "Application settings.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePair"
          }
        },
        "connectionStrings": {
          "description": "Connection strings.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnStringInfo"
          }
        },
        "machineKey": {
          "$ref": "#/definitions/SiteMachineKey",
          "description": "Site MachineKey.",
          "readOnly": true
        },
        "handlerMappings": {
          "description": "Handler mappings.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HandlerMapping"
          }
        },
        "documentRoot": {
          "description": "Document root.",
          "type": "string"
        },
        "scmType": {
          "description": "SCM type.",
          "enum": [
            "None",
            "Dropbox",
            "Tfs",
            "LocalGit",
            "GitHub",
            "CodePlexGit",
            "CodePlexHg",
            "BitbucketGit",
            "BitbucketHg",
            "ExternalGit",
            "ExternalHg",
            "OneDrive",
            "VSO"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ScmType",
            "modelAsString": true
          }
        },
        "use32BitWorkerProcess": {
          "description": "<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "webSocketsEnabled": {
          "description": "<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "alwaysOn": {
          "description": "<code>true</code> if Always On is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "javaVersion": {
          "description": "Java version.",
          "type": "string"
        },
        "javaContainer": {
          "description": "Java container.",
          "type": "string"
        },
        "javaContainerVersion": {
          "description": "Java container version.",
          "type": "string"
        },
        "appCommandLine": {
          "description": "App command line to launch.",
          "type": "string"
        },
        "managedPipelineMode": {
          "description": "Managed pipeline mode.",
          "enum": [
            "Integrated",
            "Classic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ManagedPipelineMode",
            "modelAsString": false
          }
        },
        "virtualApplications": {
          "description": "Virtual applications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualApplication"
          }
        },
        "loadBalancing": {
          "description": "Site load balancing.",
          "enum": [
            "WeightedRoundRobin",
            "LeastRequests",
            "LeastResponseTime",
            "WeightedTotalTraffic",
            "RequestHash"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SiteLoadBalancing",
            "modelAsString": false
          }
        },
        "experiments": {
          "$ref": "#/definitions/Experiments",
          "description": "This is work around for polymophic types."
        },
        "limits": {
          "$ref": "#/definitions/SiteLimits",
          "description": "Site limits."
        },
        "autoHealEnabled": {
          "description": "<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "autoHealRules": {
          "$ref": "#/definitions/AutoHealRules",
          "description": "Auto Heal rules."
        },
        "tracingOptions": {
          "description": "Tracing options.",
          "type": "string"
        },
        "vnetName": {
          "description": "Virtual Network name.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "cors": {
          "$ref": "#/definitions/CorsSettings",
          "description": "Cross-Origin Resource Sharing (CORS) settings."
        },
        "push": {
          "$ref": "#/definitions/PushSettings",
          "description": "Push endpoint settings."
        },
        "apiDefinition": {
          "$ref": "#/definitions/ApiDefinitionInfo",
          "description": "Information about the formal API definition for the app."
        },
        "autoSwapSlotName": {
          "description": "Auto-swap slot name.",
          "type": "string"
        },
        "localMySqlEnabled": {
          "description": "<code>true</code> to enable local MySQL; otherwise, <code>false</code>.",
          "default": false,
          "type": "boolean"
        },
        "ipSecurityRestrictions": {
          "description": "IP security restrictions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpSecurityRestriction"
          }
        }
      }
    },
    "SiteLimits": {
      "description": "Metric limits set on an app.",
      "type": "object",
      "properties": {
        "maxPercentageCpu": {
          "format": "double",
          "description": "Maximum allowed CPU usage percentage.",
          "type": "number"
        },
        "maxMemoryInMb": {
          "format": "int64",
          "description": "Maximum allowed memory usage in MB.",
          "type": "integer"
        },
        "maxDiskSizeInMb": {
          "format": "int64",
          "description": "Maximum allowed disk size usage in MB.",
          "type": "integer"
        }
      }
    },
    "SiteMachineKey": {
      "description": "MachineKey of an app.",
      "type": "object",
      "properties": {
        "validation": {
          "description": "MachineKey validation.",
          "type": "string"
        },
        "validationKey": {
          "description": "Validation key.",
          "type": "string"
        },
        "decryption": {
          "description": "Decryption.",
          "type": "string"
        },
        "decryptionKey": {
          "description": "Decryption key.",
          "type": "string"
        }
      }
    },
    "SkuCapacity": {
      "description": "Description of the App Service plan scale options.",
      "type": "object",
      "properties": {
        "minimum": {
          "format": "int32",
          "description": "Minimum number of workers for this App Service plan SKU.",
          "type": "integer"
        },
        "maximum": {
          "format": "int32",
          "description": "Maximum number of workers for this App Service plan SKU.",
          "type": "integer"
        },
        "default": {
          "format": "int32",
          "description": "Default number of workers for this App Service plan SKU.",
          "type": "integer"
        },
        "scaleType": {
          "description": "Available scale configurations for an App Service plan.",
          "type": "string"
        }
      }
    },
    "SkuDescription": {
      "description": "Description of a SKU for a scalable resource.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the resource SKU.",
          "type": "string"
        },
        "tier": {
          "description": "Service tier of the resource SKU.",
          "type": "string"
        },
        "size": {
          "description": "Size specifier of the resource SKU.",
          "type": "string"
        },
        "family": {
          "description": "Family code of the resource SKU.",
          "type": "string"
        },
        "capacity": {
          "format": "int32",
          "description": "Current number of instances assigned to the resource.",
          "type": "integer"
        },
        "skuCapacity": {
          "$ref": "#/definitions/SkuCapacity",
          "description": "Min, max, and default scale values of the SKU."
        },
        "locations": {
          "description": "Locations of the SKU.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capabilities": {
          "description": "Capabilities of the SKU, e.g., is traffic manager enabled?",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        }
      }
    },
    "SlotSwapStatus": {
      "description": "The status of the last successfull slot swap operation.",
      "type": "object",
      "properties": {
        "timestampUtc": {
          "format": "date-time",
          "description": "The time the last successful slot swap completed.",
          "type": "string",
          "readOnly": true
        },
        "sourceSlotName": {
          "description": "The source slot of the last swap operation.",
          "type": "string",
          "readOnly": true
        },
        "destinationSlotName": {
          "description": "The destination slot of the last swap operation.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SlowRequestsBasedTrigger": {
      "description": "Trigger based on request execution time.",
      "type": "object",
      "properties": {
        "timeTaken": {
          "description": "Time taken.",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "Count.",
          "type": "integer"
        },
        "timeInterval": {
          "description": "Time interval.",
          "type": "string"
        }
      }
    },
    "StatusCodesBasedTrigger": {
      "description": "Trigger based on status code.",
      "type": "object",
      "properties": {
        "status": {
          "format": "int32",
          "description": "HTTP status code.",
          "type": "integer"
        },
        "subStatus": {
          "format": "int32",
          "description": "SubStatus.",
          "type": "integer"
        },
        "win32Status": {
          "format": "int32",
          "description": "Win32 error code.",
          "type": "integer"
        },
        "count": {
          "format": "int32",
          "description": "Count.",
          "type": "integer"
        },
        "timeInterval": {
          "description": "Time interval.",
          "type": "string"
        }
      }
    },
    "VirtualApplication": {
      "description": "Virtual application in an app.",
      "type": "object",
      "properties": {
        "virtualPath": {
          "description": "Virtual path.",
          "type": "string"
        },
        "physicalPath": {
          "description": "Physical path.",
          "type": "string"
        },
        "preloadEnabled": {
          "description": "<code>true</code> if preloading is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "virtualDirectories": {
          "description": "Virtual directories for virtual application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualDirectory"
          }
        }
      }
    },
    "VirtualDirectory": {
      "description": "Directory for virtual application.",
      "type": "object",
      "properties": {
        "virtualPath": {
          "description": "Path to virtual application.",
          "type": "string"
        },
        "physicalPath": {
          "description": "Physical path.",
          "type": "string"
        }
      }
    },
    "VnetGateway": {
      "description": "The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "VnetGateway resource specific properties",
          "required": [
            "vpnPackageUri"
          ],
          "properties": {
            "vnetName": {
              "description": "The Virtual Network name.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "vpnPackageUri": {
              "description": "The URI where the VPN package can be downloaded.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "update"
              ]
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "VnetInfo": {
      "description": "Virtual Network information contract.",
      "type": "object",
      "properties": {
        "vnetResourceId": {
          "description": "The Virtual Network's resource ID.",
          "type": "string"
        },
        "certThumbprint": {
          "description": "The client certificate thumbprint.",
          "type": "string",
          "readOnly": true
        },
        "certBlob": {
          "description": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \n Point-To-Site VPN connection.",
          "type": "string"
        },
        "routes": {
          "description": "The routes that this Virtual Network connection uses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VnetRoute"
          },
          "readOnly": true
        },
        "resyncRequired": {
          "description": "<code>true</code> if a resync is required; otherwise, <code>false</code>.",
          "type": "boolean",
          "readOnly": true
        },
        "dnsServers": {
          "description": "DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.",
          "type": "string"
        }
      }
    },
    "VnetRoute": {
      "description": "Virtual Network route contract used to pass routing information for a Virtual Network.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "VnetRoute resource specific properties",
          "properties": {
            "name": {
              "description": "The name of this route. This is only returned by the server and does not need to be set by the client.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ],
              "x-ms-client-name": "vnetRouteName"
            },
            "startAddress": {
              "description": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
              "type": "string"
            },
            "endAddress": {
              "description": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
              "type": "string"
            },
            "routeType": {
              "description": "The type of route this is:\n DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918\n INHERITED - Routes inherited from the real Virtual Network routes\n STATIC - Static route set on the app only\n \n These values will be used for syncing an app's routes with those from a Virtual Network.",
              "enum": [
                "DEFAULT",
                "INHERITED",
                "STATIC"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "RouteType",
                "modelAsString": true
              }
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "WebAppCollection": {
      "description": "Collection of App Service apps.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Site"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "subscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).",
      "required": true,
      "type": "string"
    },
    "resourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "description": "Name of the resource group to which the resource belongs.",
      "required": true,
      "x-ms-parameter-location": "method",
      "type": "string",
      "maxLength": 90,
      "minLength": 1,
      "pattern": "^[-\\w\\._\\(\\)]+[^\\.]$"
    },
    "apiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "API Version",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}
