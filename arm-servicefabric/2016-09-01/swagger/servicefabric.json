{
  "swagger": "2.0",
  "info": {
    "title": "ServiceFabricManagementClient",
    "version": "2016-09-01"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}": {
      "patch": {
        "tags": [
          "ClusterPatchOperation"
        ],
        "x-ms-long-running-operation": true,
        "operationId": "Clusters_Update",
        "description": "Update cluster configuration",
        "x-ms-examples": {
          "Patch a cluster": {
            "$ref": "../examples/ClusterPatchOperation_exmaple.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClusterUpdateParameters"
            },
            "description": "The parameters which contains the property value and property name which used to update the cluster configuration"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Cluster updated successfully",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "202": {
            "description": "Accepted - Update request accepted; the operation will complete asynchronously."
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ClusterGetOperation"
        ],
        "operationId": "Clusters_Get",
        "description": "Get cluster resource",
        "x-ms-examples": {
          "Get a cluster": {
            "$ref": "../examples/ClusterGetOperation_example.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Get cluster successfully",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ClusterCreateOperation"
        ],
        "operationId": "Clusters_Create",
        "x-ms-long-running-operation": true,
        "description": "Create cluster resource",
        "x-ms-examples": {
          "Put a cluster with min parameter": {
            "$ref": "../examples/ClusterPutOperation_exmaple_min.json"
          },
          "Put a cluster with max parameter": {
            "$ref": "../examples/ClusterPutOperation_exmaple_max.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster"
            },
            "description": "Put Request"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Put cluster successfully",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "202": {
            "description": "Accepted - Put request accepted; the operation will complete asynchronously."
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ClusterDeleteOperation"
        ],
        "operationId": "Clusters_Delete",
        "description": "Delete cluster resource",
        "x-ms-examples": {
          "Delete a cluster": {
            "$ref": "../examples/ClusterDeleteOperation_example.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - cluster deleted  successfully"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters": {
      "get": {
        "tags": [
          "ClusterListByResourceGroupOperation"
        ],
        "operationId": "Clusters_ListByResourceGroup",
        "description": "List cluster resource by resource group",
        "x-ms-examples": {
          "List cluster by resource group": {
            "$ref": "../examples/ClusterListByResourceGroupOperation_exmaple.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Get cluster  successfully",
            "schema": {
              "$ref": "#/definitions/ClusterListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/clusters": {
      "get": {
        "tags": [
          "ClusterListOperation"
        ],
        "operationId": "Clusters_List",
        "description": "List cluster resource",
        "x-ms-examples": {
          "List clusters": {
            "$ref": "../examples/ClusterListOperation_example.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Get cluster  successfully",
            "schema": {
              "$ref": "#/definitions/ClusterListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/environments/{environment}/clusterVersions": {
      "get": {
        "tags": [
          "ClusterVersionsListOperation"
        ],
        "operationId": "ClusterVersions_List",
        "description": "List cluster code versions by location",
        "x-ms-examples": {
          "List clusters": {
            "$ref": "../examples/ClusterVersionsList_example.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/locationForClusterCodeVersions"
          },
          {
            "$ref": "#/parameters/environment"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - List cluster code versions successfully",
            "schema": {
              "$ref": "#/definitions/ClusterCodeVersionsListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.ServiceFabric/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "operationId": "Operations_List",
        "description": "Lists all of the available ServiceFabric REST API operations.",
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "ClusterVersionDetails": {
      "description": "The detail of the ServiceFabric runtime version result",
      "properties": {
        "codeVersion": {
          "description": "The ServiceFabric runtime version of the cluster",
          "type": "string"
        },
        "supportExpiryUtc": {
          "description": "The date of expiry of support of the version",
          "type": "string"
        },
        "environment": {
          "description": "Cluster operating system",
          "$ref": "#/definitions/ClusterEnvironment"
        }
      }
    },
    "ClusterCodeVersionsResult": {
      "description": "The result of the ServiceFabric runtime versions",
      "properties": {
        "id": {
          "description": "The identification of the result",
          "type": "string"
        },
        "name": {
          "description": "The name of the result",
          "type": "string"
        },
        "type": {
          "description": "The result resource type",
          "type": "string"
        },
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ClusterVersionDetails"
        }
      }
    },
    "ClusterCodeVersionsListResult": {
      "description": "The list results of the ServiceFabric runtime versions",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterCodeVersionsResult"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      }
    },
    "CertificateDescription": {
      "description": "Certificate details",
      "properties": {
        "thumbprint": {
          "description": "Thumbprint of the primary certificate",
          "type": "string"
        },
        "thumbprintSecondary": {
          "description": "Thumbprint of the secondary certificate",
          "type": "string"
        },
        "x509StoreName": {
          "description": "The local certificate store location",
          "type": "string",
          "enum": [
            "AddressBook",
            "AuthRoot",
            "CertificateAuthority",
            "Disallowed",
            "My",
            "Root",
            "TrustedPeople",
            "TrustedPublisher"
          ]
        }
      },
      "required": [
        "thumbprint"
      ]
    },
    "SettingsParameterDescription": {
      "description": "ServiceFabric settings under sections",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of settings property"
        },
        "value": {
          "type": "string",
          "description": "The value of the property"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "SettingsSectionDescription": {
      "description": "ServiceFabric section settings",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of settings section"
        },
        "parameters": {
          "description": "Collection of settings in the section, each setting is a tuple consisting of setting name and value",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingsParameterDescription"
          }
        }
      },
      "required": [
        "name",
        "parameters"
      ]
    },
    "EndpointRangeDescription": {
      "description": "Port range details",
      "properties": {
        "startPort": {
          "description": "Starting port of a range of ports",
          "type": "integer"
        },
        "endPort": {
          "description": "End port of a range of ports",
          "type": "integer"
        }
      },
      "required": [
        "startPort",
        "endPort"
      ]
    },
    "NodeTypeDescription": {
      "description": "Describes a node type in the cluster, each node type represents sub set of nodes in the cluster",
      "properties": {
        "name": {
          "description": "Name of the node type",
          "type": "string"
        },
        "placementProperties": {
          "description": "The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run",
          "type": "object",
          "additionalProperties": {
            "description": "Placement tag value",
            "type": "string"
          }
        },
        "capacities": {
          "description": "The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much of a resource a node has",
          "type": "object",
          "additionalProperties": {
            "description": "Capacity tag value",
            "type": "string"
          }
        },
        "clientConnectionEndpointPort": {
          "description": "The TCP cluster management endpoint port",
          "type": "integer"
        },
        "httpGatewayEndpointPort": {
          "description": "The HTTP cluster management endpoint port",
          "type": "integer"
        },
        "durabilityLevel": {
          "description": "Nodetype durability Level",
          "type": "string",
          "enum": [
            "Bronze",
            "Silver",
            "Gold"
          ]
        },
        "applicationPorts": {
          "description": "Ports used by applications",
          "$ref": "#/definitions/EndpointRangeDescription"
        },
        "ephemeralPorts": {
          "description": "System assgined application ports",
          "$ref": "#/definitions/EndpointRangeDescription"
        },
        "isPrimary": {
          "description": "Mark this as the primary node type",
          "type": "boolean"
        },
        "vmInstanceCount": {
          "description": "The number of node instances in the node type",
          "type": "integer",
          "minimum": 1,
          "maximum": 2147483647
        },
        "reverseProxyEndpointPort": {
          "description": "Endpoint used by reverse proxy",
          "type": "integer"
        }
      },
      "required": [
        "vmInstanceCount",
        "name",
        "clientConnectionEndpointPort",
        "httpGatewayEndpointPort",
        "isPrimary"
      ]
    },
    "ClientCertificateThumbprint": {
      "description": "Client certificate details using thumbprint",
      "properties": {
        "isAdmin": {
          "type": "boolean",
          "description": "Is this certificate used for admin access from the client, if false, it is used or query only access"
        },
        "certificateThumbprint": {
          "description": "Certificate thumbprint",
          "type": "string"
        }
      },
      "required": [
        "isAdmin",
        "certificateThumbprint"
      ]
    },
    "ClientCertificateCommonName": {
      "description": "Client certificate details using common name",
      "properties": {
        "isAdmin": {
          "type": "boolean",
          "description": "Is this certificate used for admin access from the client, if false , it is used or query only access"
        },
        "certificateCommonName": {
          "description": "Certificate common name to be granted access; be carefull using wild card common names",
          "type": "string"
        },
        "certificateIssuerThumbprint": {
          "description": "Certificate issuer thumbprint",
          "type": "string"
        }
      },
      "required": [
        "isAdmin",
        "certificateCommonName",
        "certificateIssuerThumbprint"
      ]
    },
    "ClusterEnvironment": {
      "description": "Cluster operating system, the default will be Windows",
      "type": "string",
      "enum": [
        "Windows",
        "Linux"
      ]
    },
    "ClusterHealthPolicy": {
      "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node.",
      "properties": {
        "maxPercentUnhealthyNodes": {
          "description": "The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10. ",
          "type": "integer",
          "maximum": 100,
          "minimum": 0
        },
        "maxPercentUnhealthyApplications": {
          "description": "The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10. ",
          "type": "integer",
          "maximum": 100,
          "minimum": 0
        }
      }
    },
    "ClusterUpgradeDeltaHealthPolicy": {
      "description": "Delta health policy for the cluster",
      "properties": {
        "maxPercentDeltaUnhealthyNodes": {
          "description": "Additional unhealthy nodes percentage",
          "type": "integer",
          "maximum": 100,
          "minimum": 0
        },
        "maxPercentUpgradeDomainDeltaUnhealthyNodes": {
          "description": "Additional unhealthy nodes percentage per upgrade domain ",
          "type": "integer",
          "maximum": 100,
          "minimum": 0
        },
        "maxPercentDeltaUnhealthyApplications": {
          "description": "Additional unhealthy applications percentage",
          "type": "integer",
          "maximum": 100,
          "minimum": 0
        }
      },
      "required": [
        "maxPercentDeltaUnhealthyNodes",
        "maxPercentUpgradeDomainDeltaUnhealthyNodes",
        "maxPercentDeltaUnhealthyApplications"
      ]
    },
    "ClusterUpgradePolicy": {
      "description": "Cluster upgrade policy",
      "properties": {
        "overrideUserUpgradePolicy": {
          "description": "Use the user defined upgrade policy or not",
          "type": "boolean"
        },
        "forceRestart": {
          "description": "Force node to restart or not",
          "type": "boolean"
        },
        "upgradeReplicaSetCheckTimeout": {
          "description": "Timeout for replica set upgrade to complete,it represents .Net TimeSpan",
          "type": "string"
        },
        "healthCheckWaitDuration": {
          "description": "The length of time to wait after completing an upgrade domain before performing health checks, it represents .Net TimeSpan",
          "type": "string"
        },
        "healthCheckStableDuration": {
          "description": "The length of time that health checks must pass continuously,it represents .Net TimeSpan",
          "type": "string"
        },
        "healthCheckRetryTimeout": {
          "description": "The length of time that health checks can fail continuously,it represents .Net TimeSpan",
          "type": "string"
        },
        "upgradeTimeout": {
          "description": "The upgrade timeout,it represents .Net TimeSpan",
          "type": "string"
        },
        "upgradeDomainTimeout": {
          "description": "The timeout for any upgrade domain,it represents .Net TimeSpan",
          "type": "string"
        },
        "healthPolicy": {
          "description": "Cluster health Policy",
          "$ref": "#/definitions/ClusterHealthPolicy"
        },
        "deltaHealthPolicy": {
          "description": "Delta health policy",
          "$ref": "#/definitions/ClusterUpgradeDeltaHealthPolicy"
        }
      },
      "required": [
        "upgradeReplicaSetCheckTimeout",
        "healthCheckWaitDuration",
        "healthCheckStableDuration",
        "healthCheckRetryTimeout",
        "upgradeTimeout",
        "upgradeDomainTimeout",
        "healthPolicy"
      ]
    },
    "DiagnosticsStorageAccountConfig": {
      "description": "Diagnostics storage account config",
      "properties": {
        "storageAccountName": {
          "description": "Diagnostics storage account name",
          "type": "string"
        },
        "protectedAccountKeyName": {
          "description": "Protected Diagnostics storage key name",
          "type": "string"
        },
        "blobEndpoint": {
          "description": "Diagnostics storage account blob endpoint",
          "type": "string"
        },
        "queueEndpoint": {
          "description": "Diagnostics storage account queue endpoint",
          "type": "string"
        },
        "tableEndpoint": {
          "description": "Diagnostics storage account table endpoint",
          "type": "string"
        }
      },
      "required": [
        "storageAccountName",
        "protectedAccountKeyName",
        "blobEndpoint",
        "queueEndpoint",
        "tableEndpoint"
      ]
    },
    "AzureActiveDirectory": {
      "description": "The settings to enable AAD authentication on the cluster",
      "properties": {
        "tenantId": {
          "description": "Azure active directory tenant id",
          "type": "string"
        },
        "clusterApplication": {
          "description": "Azure active directory cluster application id",
          "type": "string"
        },
        "clientApplication": {
          "description": "Azure active directory client application id",
          "type": "string"
        }
      }
    },
    "ClusterPropertiesUpdateParameters": {
      "description": "The cluster resource properties can be updated",
      "properties": {
        "reliabilityLevel": {
          "description": "This level is used to set the number of replicas of the system services",
          "type": "string",
          "enum": [
            "Bronze",
            "Silver",
            "Gold"
          ]
        },
        "upgradeMode": {
          "description": "Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not",
          "type": "string",
          "enum": [
            "Automatic",
            "Manual"
          ]
        },
        "clusterCodeVersion": {
          "description": "The ServiceFabric code version, if set it, please make sure you have set upgradeMode to Manual, otherwise ,it will fail, if you are using PUT new cluster, you can get the version by using ClusterVersions_List, if you are updating existing cluster, you can get the availableClusterVersions from Clusters_Get",
          "type": "string"
        },
        "certificate": {
          "description": "This primay certificate will be used as cluster node to node security, SSL certificate for cluster management endpoint and default admin client, the certificate should exist in the virtual machine scale sets or Azure key vault, before you add it. It will override original value",
          "$ref": "#/definitions/CertificateDescription"
        },
        "clientCertificateThumbprints": {
          "description": "The client thumbprint details, it is used for client access for cluster operation, it will override existing collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificateThumbprint"
          }
        },
        "clientCertificateCommonNames": {
          "description": "List of client certificates to whitelist based on common names.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificateCommonName"
          }
        },
        "fabricSettings": {
          "description": "List of custom fabric settings to configure the cluster, Note, it will overwrite existing collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingsSectionDescription"
          }
        },
        "reverseProxyCertificate": {
          "description": "Certificate for the reverse proxy",
          "$ref": "#/definitions/CertificateDescription"
        },
        "nodeTypes": {
          "description": "The list of nodetypes that make up the cluster, it will override",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeTypeDescription"
          }
        },
        "upgradeDescription": {
          "description": "The policy to use when upgrading the cluster.",
          "$ref": "#/definitions/ClusterUpgradePolicy"
        }
      }
    },
    "ClusterProperties": {
      "description": "The cluster resource properties",
      "properties": {
        "availableClusterVersions": {
          "description": "The available cluster code version which the cluster can upgrade to, note that you must choose upgradeMode to manual to upgrade to",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ClusterVersionDetails"
          }
        },
        "clusterId": {
          "readOnly": true,
          "description": "The unique identifier for the cluster resource",
          "type": "string"
        },
        "clusterState": {
          "description": "The state for the cluster",
          "readOnly": true,
          "type": "string",
          "enum": [
            "WaitingForNodes",
            "Deploying",
            "BaselineUpgrade",
            "UpdatingUserConfiguration",
            "UpdatingUserCertificate",
            "UpdatingInfrastructure",
            "EnforcingClusterVersion",
            "UpgradeServiceUnreachable",
            "AutoScale",
            "Ready"
          ]
        },
        "clusterEndpoint": {
          "description": "The endpoint for the cluster connecting to servicefabric resource provider",
          "readOnly": true,
          "type": "string"
        },
        "clusterCodeVersion": {
          "description": "The ServiceFabric code version running in your cluster",
          "type": "string"
        },
        "certificate": {
          "description": "This primay certificate will be used as cluster node to node security, SSL certificate for cluster management endpoint and default admin client",
          "$ref": "#/definitions/CertificateDescription"
        },
        "reliabilityLevel": {
          "description": "Cluster reliability level indicates replica set size of system service",
          "type": "string",
          "enum": [
            "Bronze",
            "Silver",
            "Gold",
            "Platinum"
          ]
        },
        "upgradeMode": {
          "description": "Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not",
          "type": "string",
          "enum": [
            "Automatic",
            "Manual"
          ]
        },
        "clientCertificateThumbprints": {
          "description": "The client thumbprint details ,it is used for client access for cluster operation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificateThumbprint"
          }
        },
        "clientCertificateCommonNames": {
          "description": " List of client certificates to whitelist based on common names",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificateCommonName"
          }
        },
        "fabricSettings": {
          "description": "List of custom fabric settings to configure the cluster.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingsSectionDescription"
          }
        },
        "reverseProxyCertificate": {
          "description": "The server certificate used by reverse proxy",
          "$ref": "#/definitions/CertificateDescription"
        },
        "managementEndpoint": {
          "description": "The http management endpoint of the cluster",
          "type": "string"
        },
        "nodeTypes": {
          "description": "The list of nodetypes that make up the cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeTypeDescription"
          }
        },
        "azureActiveDirectory": {
          "description": "The settings to enable AAD authentication on the cluster",
          "$ref": "#/definitions/AzureActiveDirectory"
        },
        "provisioningState": {
          "readOnly": true,
          "description": "The provisioning state of the cluster resource",
          "type": "string",
          "enum": [
            "Updating",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "vmImage": {
          "description": "The name of VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.",
          "type": "string"
        },
        "diagnosticsStorageAccountConfig": {
          "description": "The storage diagnostics account configuration details",
          "$ref": "#/definitions/DiagnosticsStorageAccountConfig"
        },
        "upgradeDescription": {
          "description": "The policy to use when upgrading the cluster.",
          "$ref": "#/definitions/ClusterUpgradePolicy"
        }
      },
      "required": [
        "managementEndpoint",
        "nodeTypes"
      ]
    },
    "ClusterUpdateParameters": {
      "description": "Cluster update request",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ClusterPropertiesUpdateParameters"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cluster update parameters"
        }
      }
    },
    "Cluster": {
      "description": "The cluster resource",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ClusterProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ClusterListResult": {
      "description": "Cluster list results",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cluster"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      }
    },
    "AvailableOperationDisplay": {
      "description": "Operation supported by ServiceFabric resource provider",
      "properties": {
        "provider": {
          "description": "Provider name",
          "type": "string"
        },
        "resource": {
          "description": "Resource name",
          "type": "string"
        },
        "operation": {
          "description": "Operation name",
          "type": "string"
        },
        "description": {
          "description": "Operation description",
          "type": "string"
        }
      }
    },
    "OperationResult": {
      "description": "Available operation list result",
      "properties": {
        "name": {
          "description": "Result name",
          "type": "string"
        },
        "display": {
          "description": "Dispaly of the result",
          "$ref": "#/definitions/AvailableOperationDisplay"
        },
        "origin": {
          "description": "Origin result",
          "type": "string"
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      }
    },
    "OperationListResult": {
      "description": "Result of the request to list ServiceFabric operations. It contains a list of operations and a URL link to get the next set of results.",
      "properties": {
        "value": {
          "description": "List of ServiceFabric operations supported by the Microsoft.ServiceFabric resource provider.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/OperationResult"
          }
        },
        "nextLink": {
          "description": "URL to get the next set of operation list results if there are any.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ErrorModel": {
      "description": "The structure of the error",
      "properties": {
        "error": {
          "description": "The error detail ",
          "properties": {
            "code": {
              "description": "The error code",
              "type": "string"
            },
            "message": {
              "description": "The error message",
              "type": "string"
            }
          }
        }
      }
    },
    "Resource": {
      "description": "The resource model definition.",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Resource ID."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Resource name."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "Resource type."
        },
        "location": {
          "type": "string",
          "description": "Resource location."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags."
        }
      },
      "required": [
        "location"
      ],
      "x-ms-azure-resource": true
    }
  },
  "parameters": {
    "subscriptionId": {
      "type": "string",
      "name": "subscriptionId",
      "description": "The customer subscription identifier",
      "in": "path",
      "required": true
    },
    "api-version": {
      "type": "string",
      "name": "api-version",
      "description": "The version of the ServiceFabric resouce provider api",
      "in": "query",
      "required": true
    },
    "resourceGroupNameParameter": {
      "description": "The name of the resource group to which the resource belongs or get created",
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "clusterNameParameter": {
      "description": "The name of the cluster resource",
      "name": "clusterName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "locationForClusterCodeVersions": {
      "description": "The location for the cluster code versions, this is different from cluster location",
      "name": "location",
      "required": true,
      "in": "path",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "clusterVersion": {
      "description": "The cluster code version",
      "name": "clusterVersion",
      "required": true,
      "in": "path",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "environment": {
      "description": "Cluster operating system, the default means all",
      "name": "environment",
      "required": true,
      "in": "path",
      "type": "string",
      "enum": [
        "Default",
        "Windows",
        "Linux"
      ],
      "x-ms-parameter-location": "method"
    }
  }
}