{
  "swagger": "2.0",
  "info": {
    "title": "ServiceFabricManagementClient",
    "description": "Azure Service Fabric Resource Provider API Client",
    "version": "2016-09-01"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "type": "oauth2"
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}": {
      "put": {
        "operationId": "Clusters_Create",
        "summary": "Create a ServiceFabric cluster",
        "description": "Create cluster resource\n",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/clusterBodyParam"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "x-ms-examples": {
          "Put a cluster with min parameter": {
            "$ref": "../examples/ClusterPutOperation_example_min.json"
          },
          "Put a cluster with max parameter": {
            "$ref": "../examples/ClusterPutOperation_example_max.json"
          }
        },
        "x-ms-long-running-operation": "true",
        "responses": {
          "200": {
            "description": "OK - Put cluster successfully",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "202": {
            "description": "Accepted - Put request accepted; the operation will complete asynchronously."
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete": {
        "operationId": "Clusters_Delete",
        "summary": "Delete cluster resource",
        "description": "Delete cluster resource\n",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "x-ms-examples": {
          "Delete a cluster": {
            "$ref": "../examples/ClusterDeleteOperation_example.json"
          }
        },
        "responses": {
          "200": {
            "description": "OK - cluster deleted successfully"
          },
          "204": {
            "description": "NoContent - cluster does not exist"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "get": {
        "operationId": "Clusters_Get",
        "summary": "Get cluster resource",
        "description": "Get cluster resource\n",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "x-ms-examples": {
          "Get a cluster": {
            "$ref": "../examples/ClusterGetOperation_example.json"
          }
        },
        "responses": {
          "200": {
            "description": "OK - Get cluster successfully",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "patch": {
        "operationId": "Clusters_Update",
        "summary": "Update cluster configuration",
        "description": "Update cluster configuration\n",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/clusterUpdateParameterBody"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "x-ms-long-running-operation": "true",
        "x-ms-examples": {
          "Patch a cluster": {
            "$ref": "../examples/ClusterPatchOperation_example.json"
          }
        },
        "responses": {
          "200": {
            "description": "OK - Cluster updated successfully",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "202": {
            "description": "Accepted - Update request accepted; the operation will complete asynchronously."
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters": {
      "get": {
        "operationId": "Clusters_ListByResourceGroup",
        "summary": "List cluster resource by resource group",
        "description": "List cluster resource by resource group\n",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "x-ms-examples": {
          "List cluster by resource group": {
            "$ref": "../examples/ClusterListByResourceGroupOperation_example.json"
          }
        },
        "responses": {
          "200": {
            "description": "OK - Get cluster  successfully",
            "schema": {
              "$ref": "#/definitions/ClusterListResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/clusters": {
      "get": {
        "operationId": "Clusters_List",
        "summary": "List cluster resource",
        "description": "List cluster resource\n",
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "tags": [
          "Cluster"
        ],
        "x-ms-examples": {
          "List clusters": {
            "$ref": "../examples/ClusterListOperation_example.json"
          }
        },
        "responses": {
          "200": {
            "description": "OK - Get cluster  successfully",
            "schema": {
              "$ref": "#/definitions/ClusterListResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/environments/{environment}/clusterVersions": {
      "get": {
        "operationId": "ClusterVersions_List",
        "summary": "List cluster code versions by location",
        "description": "List cluster code versions by location\n",
        "parameters": [
          {
            "$ref": "#/parameters/locationForClusterCodeVersions"
          },
          {
            "$ref": "#/parameters/environment"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "tags": [
          "ClusterVersion"
        ],
        "responses": {
          "200": {
            "description": "OK - List cluster code versions successfully",
            "schema": {
              "$ref": "#/definitions/ClusterCodeVersionsListResult"
            }
          }
        }
      }
    },
    "/providers/Microsoft.ServiceFabric/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Lists all of the available ServiceFabric Resource Manager REST API operations.",
        "description": "",
        "operationId": "Operations_List",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The version of the ServiceFabric resouce provider api",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "AvailableOperationDisplay": {
      "properties": {
        "provider": {
          "type": "string",
          "description": "The name of the provider."
        },
        "resource": {
          "type": "string",
          "description": "The resource on which the operation is performed"
        },
        "operation": {
          "type": "string",
          "description": "The operation that can be performed."
        },
        "description": {
          "type": "string",
          "description": "Operation description"
        }
      },
      "description": "Operation supported by Service Fabric resource provider"
    },
    "AzureActiveDirectory": {
      "properties": {
        "tenantId": {
          "type": "string",
          "description": "Azure active directory tenant id."
        },
        "clusterApplication": {
          "type": "string",
          "description": "Azure active directory cluster application id."
        },
        "clientApplication": {
          "type": "string",
          "description": "Azure active directory client application id."
        }
      },
      "description": "The settings to enable AAD authentication on the cluster."
    },
    "CertificateDescription": {
      "required": [
        "thumbprint"
      ],
      "properties": {
        "thumbprint": {
          "type": "string",
          "description": "Thumbprint of the primary certificate."
        },
        "thumbprintSecondary": {
          "type": "string",
          "description": "Thumbprint of the secondary certificate."
        },
        "x509StoreName": {
          "type": "string",
          "description": "The local certificate store location.",
          "enum": [
            "AddressBook",
            "AuthRoot",
            "CertificateAuthority",
            "Disallowed",
            "My",
            "Root",
            "TrustedPeople",
            "TrustedPublisher"
          ]
        }
      },
      "description": "Describes the certificate details."
    },
    "ClientCertificateCommonName": {
      "required": [
        "certificateCommonName",
        "isAdmin",
        "certificateIssuerThumbprint"
      ],
      "properties": {
        "isAdmin": {
          "type": "boolean",
          "description": "Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster."
        },
        "certificateCommonName": {
          "type": "string",
          "description": "The common name of the client certificate."
        },
        "certificateIssuerThumbprint": {
          "type": "string",
          "description": "The issuer thumbprint of the client certificate."
        }
      },
      "description": "Describes the client certificate details using common name."
    },
    "ClientCertificateThumbprint": {
      "required": [
        "certificateThumbprint",
        "isAdmin"
      ],
      "properties": {
        "isAdmin": {
          "type": "boolean",
          "description": "Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster."
        },
        "certificateThumbprint": {
          "type": "string",
          "description": "The thumbprint of the client certificate."
        }
      },
      "description": "Describes the client certificate details using thumbprint."
    },
    "Cluster": {
      "type": "object",
      "description": "The cluster resource\n",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "properties": {
              "x-ms-client-flatten": "True",
              "$ref": "#/definitions/ClusterProperties"
            }
          }
        }
      ]
    },
    "ClusterCodeVersionsListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterCodeVersionsResult"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "description": "The list results of the ServiceFabric runtime versions."
    },
    "ClusterCodeVersionsResult": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The identification of the result"
        },
        "name": {
          "type": "string",
          "description": "The name of the result"
        },
        "type": {
          "type": "string",
          "description": "The result resource type"
        },
        "properties": {
          "x-ms-client-flatten": "true",
          "$ref": "#/definitions/ClusterVersionDetails"
        }
      },
      "description": "The result of the ServiceFabric runtime versions"
    },
    "ClusterEnvironment": {
      "type": "string",
      "description": "Cluster operating system, the default will be Windows",
      "enum": [
        "Windows",
        "Linux"
      ]
    },
    "ClusterListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cluster"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "description": "Cluster list results"
    },
    "ClusterProperties": {
      "required": [
        "managementEndpoint",
        "nodeTypes"
      ],
      "properties": {
        "availableClusterVersions": {
          "type": "array",
          "description": "The Service Fabric runtime versions available for this cluster.",
          "items": {
            "$ref": "#/definitions/ClusterVersionDetails"
          }
        },
        "clusterId": {
          "type": "string",
          "description": "A service generated unique identifier for the cluster resource.",
          "readOnly": true
        },
        "clusterState": {
          "$ref": "#/definitions/ClusterState"
        },
        "clusterEndpoint": {
          "type": "string",
          "description": "The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.",
          "readOnly": true
        },
        "clusterCodeVersion": {
          "type": "string",
          "description": "The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**."
        },
        "certificate": {
          "description": "The certificate to use for securing the cluster. The certificate provided will be used for  node to node security within the cluster, SSL certificate for cluster management endpoint and default  admin client.",
          "$ref": "#/definitions/CertificateDescription"
        },
        "reliabilityLevel": {
          "$ref": "#/definitions/ReliabilityLevel"
        },
        "upgradeMode": {
          "$ref": "#/definitions/UpgradeMode"
        },
        "clientCertificateThumbprints": {
          "type": "array",
          "description": "The list of client certificates referenced by thumbprint that are allowed to manage the cluster.",
          "items": {
            "$ref": "#/definitions/ClientCertificateThumbprint"
          }
        },
        "clientCertificateCommonNames": {
          "type": "array",
          "description": "The list of client certificates referenced by common name that are allowed to manage the cluster.",
          "items": {
            "$ref": "#/definitions/ClientCertificateCommonName"
          }
        },
        "fabricSettings": {
          "type": "array",
          "description": "The list of custom fabric settings to configure the cluster.",
          "items": {
            "$ref": "#/definitions/SettingsSectionDescription"
          }
        },
        "reverseProxyCertificate": {
          "description": "The server certificate used by reverse proxy.",
          "$ref": "#/definitions/CertificateDescription"
        },
        "managementEndpoint": {
          "type": "string",
          "description": "The http management endpoint of the cluster."
        },
        "nodeTypes": {
          "type": "array",
          "description": "The list of node types in the cluster.",
          "items": {
            "$ref": "#/definitions/NodeTypeDescription"
          }
        },
        "azureActiveDirectory": {
          "description": "The AAD authentication settings of the cluster.",
          "$ref": "#/definitions/AzureActiveDirectory"
        },
        "provisioningState": {
          "type": "string",
          "description": "The provisioning state of the cluster resource.",
          "readOnly": true,
          "enum": [
            "Updating",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": "true"
          }
        },
        "vmImage": {
          "type": "string",
          "description": "The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used."
        },
        "diagnosticsStorageAccountConfig": {
          "description": "The storage account information for storing Service Fabric diagnostic logs.",
          "$ref": "#/definitions/DiagnosticsStorageAccountConfig"
        },
        "upgradeDescription": {
          "description": "The policy to use when upgrading the cluster.",
          "$ref": "#/definitions/ClusterUpgradePolicy"
        }
      },
      "description": "Describes the cluster resource properties."
    },
    "ClusterPropertiesUpdateParameters": {
      "properties": {
        "reliabilityLevel": {
          "type": "string",
          "description": "The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).",
          "enum": [
            "Bronze",
            "Silver",
            "Gold"
          ]
        },
        "upgradeMode": {
          "type": "string",
          "description": "The upgrade mode of the cluster. This indicates if the cluster should be automatically upgraded when new Service Fabric runtime version is available.",
          "enum": [
            "Automatic",
            "Manual"
          ]
        },
        "clusterCodeVersion": {
          "type": "string",
          "description": "The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**."
        },
        "certificate": {
          "description": "The certificate to use for securing the cluster. The certificate provided will be used for  node to node security within the cluster, SSL certificate for cluster management endpoint and default  admin client.",
          "$ref": "#/definitions/CertificateDescription"
        },
        "clientCertificateThumbprints": {
          "type": "array",
          "description": "The list of client certificates referenced by thumbprint that are allowed to manage the cluster. This will overwrite the existing list.",
          "items": {
            "$ref": "#/definitions/ClientCertificateThumbprint"
          }
        },
        "clientCertificateCommonNames": {
          "type": "array",
          "description": "The list of client certificates referenced by common name that are allowed to manage the cluster. This will overwrite the existing list.",
          "items": {
            "$ref": "#/definitions/ClientCertificateCommonName"
          }
        },
        "fabricSettings": {
          "type": "array",
          "description": "The list of custom fabric settings to configure the cluster. This will overwrite the existing list.",
          "items": {
            "$ref": "#/definitions/SettingsSectionDescription"
          }
        },
        "reverseProxyCertificate": {
          "description": "The server certificate used by reverse proxy.",
          "$ref": "#/definitions/CertificateDescription"
        },
        "nodeTypes": {
          "type": "array",
          "description": "The list of node types in the cluster. This will overwrite the existing list.",
          "items": {
            "$ref": "#/definitions/NodeTypeDescription"
          }
        },
        "upgradeDescription": {
          "description": "The policy to use when upgrading the cluster.",
          "$ref": "#/definitions/ClusterUpgradePolicy"
        }
      },
      "description": "Describes the cluster resource properties that can be updated during PATCH operation."
    },
    "ClusterUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": "True",
          "$ref": "#/definitions/ClusterPropertiesUpdateParameters"
        },
        "tags": {
          "type": "object",
          "description": "Cluster update parameters",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Cluster update request"
    },
    "ClusterUpgradeDeltaHealthPolicy": {
      "required": [
        "maxPercentDeltaUnhealthyApplications",
        "maxPercentDeltaUnhealthyNodes",
        "maxPercentUpgradeDomainDeltaUnhealthyNodes"
      ],
      "properties": {
        "maxPercentDeltaUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.",
          "minimum": 0,
          "maximum": 100
        },
        "maxPercentUpgradeDomainDeltaUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. ",
          "minimum": 0,
          "maximum": 100
        },
        "maxPercentDeltaUnhealthyApplications": {
          "type": "integer",
          "description": "The maximum allowed percentage of applications health degradation allowed during cluster upgrades. The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.",
          "minimum": 0,
          "maximum": 100
        }
      },
      "description": "Describes the delta health policies for the cluster upgrade."
    },
    "ClusterUpgradePolicy": {
      "required": [
        "healthCheckRetryTimeout",
        "healthCheckStableDuration",
        "healthCheckWaitDuration",
        "healthPolicy",
        "upgradeDomainTimeout",
        "upgradeReplicaSetCheckTimeout",
        "upgradeTimeout"
      ],
      "properties": {
        "forceRestart": {
          "type": "boolean",
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "upgradeReplicaSetCheckTimeout": {
          "type": "string",
          "description": "The maximum amount of time to block processing of an upgrade domain and revent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthCheckWaitDuration": {
          "type": "string",
          "description": "The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthCheckStableDuration": {
          "type": "string",
          "description": "The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthCheckRetryTimeout": {
          "type": "string",
          "description": "The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "upgradeTimeout": {
          "type": "string",
          "description": "The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "upgradeDomainTimeout": {
          "type": "string",
          "description": "The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthPolicy": {
          "description": "The cluster health policy used when upgrading the cluster.",
          "$ref": "#/definitions/ClusterHealthPolicy"
        },
        "deltaHealthPolicy": {
          "description": "The delta health policy used when upgrading the cluster.",
          "$ref": "#/definitions/ClusterUpgradeDeltaHealthPolicy"
        }
      },
      "description": "Describes the policy used when upgrading the cluster."
    },
    "ClusterVersionDetails": {
      "properties": {
        "codeVersion": {
          "type": "string",
          "description": "The Service Fabric runtime version of the cluster."
        },
        "supportExpiryUtc": {
          "type": "string",
          "description": "The date of expiry of support of the version."
        },
        "environment": {
          "description": "Indicates if this version is for Windows or Linux operating system.",
          "$ref": "#/definitions/ClusterEnvironment"
        }
      },
      "description": "The detail of the Service Fabric runtime version result"
    },
    "DiagnosticsStorageAccountConfig": {
      "required": [
        "blobEndpoint",
        "protectedAccountKeyName",
        "queueEndpoint",
        "storageAccountName",
        "tableEndpoint"
      ],
      "properties": {
        "storageAccountName": {
          "type": "string",
          "description": "The Azure storage account name."
        },
        "protectedAccountKeyName": {
          "type": "string",
          "description": "The protected diagnostics storage key name."
        },
        "blobEndpoint": {
          "type": "string",
          "description": "The blob endpoint of the azure storage account."
        },
        "queueEndpoint": {
          "type": "string",
          "description": "The queue endpoint of the azure storage account."
        },
        "tableEndpoint": {
          "type": "string",
          "description": "The table endpoint of the azure storage account."
        }
      },
      "description": "The storage account information for storing Service Fabric diagnostic logs."
    },
    "EndpointRangeDescription": {
      "required": [
        "endPort",
        "startPort"
      ],
      "properties": {
        "startPort": {
          "type": "integer",
          "description": "Starting port of a range of ports"
        },
        "endPort": {
          "type": "integer",
          "description": "End port of a range of ports"
        }
      },
      "description": "Port range details"
    },
    "ErrorModel": {
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        }
      },
      "description": "The error details."
    },
    "NodeTypeDescription": {
      "required": [
        "clientConnectionEndpointPort",
        "httpGatewayEndpointPort",
        "isPrimary",
        "name",
        "vmInstanceCount"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the node type."
        },
        "placementProperties": {
          "type": "object",
          "description": "The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.",
          "additionalProperties": {
            "type": "string",
            "description": "Placement tag value"
          }
        },
        "capacities": {
          "type": "object",
          "description": "The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.",
          "additionalProperties": {
            "type": "string",
            "description": "Capacity tag value"
          }
        },
        "clientConnectionEndpointPort": {
          "type": "integer",
          "description": "The TCP cluster management endpoint port."
        },
        "httpGatewayEndpointPort": {
          "type": "integer",
          "description": "The HTTP cluster management endpoint port."
        },
        "durabilityLevel": {
          "$ref": "#/definitions/DurabilityLevel"
        },
        "applicationPorts": {
          "description": "The range of ports from which cluster assigned port to Service Fabric applications.",
          "$ref": "#/definitions/EndpointRangeDescription"
        },
        "ephemeralPorts": {
          "description": "The range of empheral ports that nodes in this node type should be configured with.",
          "$ref": "#/definitions/EndpointRangeDescription"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters."
        },
        "vmInstanceCount": {
          "type": "integer",
          "description": "The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.",
          "minimum": 1,
          "maximum": 2147483647
        },
        "reverseProxyEndpointPort": {
          "type": "integer",
          "description": "The endpoint used by reverse proxy."
        }
      },
      "description": "Describes a node type in the cluster, each node type represents sub set of nodes in the cluster."
    },
    "OperationListResult": {
      "properties": {
        "value": {
          "type": "array",
          "description": "List of Service Fabric operations supported by the Microsoft.ServiceFabric resource provider.",
          "items": {
            "$ref": "#/definitions/OperationResult"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "URL to get the next set of operation list results if there are any.",
          "readOnly": true
        }
      },
      "description": "Describes the result of the request to list Service Fabric operations."
    },
    "OperationResult": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the operation."
        },
        "display": {
          "description": "The object that represents the operation.",
          "$ref": "#/definitions/AvailableOperationDisplay"
        },
        "origin": {
          "type": "string",
          "description": "Origin result"
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "description": "Available operation list result"
    },
    "Resource": {
      "required": [
        "location"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Azure resource ID.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Azure resource name.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Azure resource type.",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "Resource location."
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "The resource model definition.",
      "x-ms-azure-resource": "true"
    },
    "ServiceTypeDeltaHealthPolicy": {
      "type": "object",
      "description": "Service health policy\n",
      "properties": {
        "maxPercentDeltaUnhealthyServices": {
          "description": "Maximum percentage of unhealthy services in cluster",
          "type": "integer",
          "maximum": 100,
          "minimum": 0
        }
      }
    },
    "SettingsParameterDescription": {
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The parameter name of fabric setting."
        },
        "value": {
          "type": "string",
          "description": "The parameter value of fabric setting."
        }
      },
      "description": "Describes a parameter in fabric settings of the cluster."
    },
    "SettingsSectionDescription": {
      "required": [
        "name",
        "parameters"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The section name of the fabric settings."
        },
        "parameters": {
          "type": "array",
          "description": "The collection of parameters in the section.",
          "items": {
            "$ref": "#/definitions/SettingsParameterDescription"
          }
        }
      },
      "description": "Describes a section in the fabric settings of the cluster."
    },
    "ClusterHealthPolicy": {
      "properties": {
        "maxPercentUnhealthyNodes": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10. ",
          "minimum": 0,
          "maximum": 100
        },
        "maxPercentUnhealthyApplications": {
          "type": "integer",
          "description": "The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10. ",
          "minimum": 0,
          "maximum": 100
        }
      },
      "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node."
    },
    "ClusterState": {
      "type": "string",
      "description": "The current state of the cluster.\n\n  - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.\n  - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.\n  - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.\n  - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.\n  - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.\n  - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.\n  - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.\n  - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.\n  - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.\n  - Ready - Indicates that the cluster is in a stable state.\n",
      "enum": [
        "WaitingForNodes",
        "Deploying",
        "BaselineUpgrade",
        "UpdatingUserConfiguration",
        "UpdatingUserCertificate",
        "UpdatingInfrastructure",
        "EnforcingClusterVersion",
        "UpgradeServiceUnreachable",
        "AutoScale",
        "Ready"
      ]
    },
    "DurabilityLevel": {
      "type": "string",
      "description": "The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).\n\n  - Bronze - No privileges. This is the default.\n  - Silver - The infrastructure jobs can be paused for a duration of 30 minutes per UD.\n  - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.\n",
      "enum": [
        "Bronze",
        "Silver",
        "Gold"
      ]
    },
    "ReliabilityLevel": {
      "type": "string",
      "description": "The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-capacity).\n\n  - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.\n  - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.\n  - Silver - Run the System services with a target replica set count of 5.\n  - Gold - Run the System services with a target replica set count of 7.\n  - Platinum - Run the System services with a target replica set count of 9.\n",
      "enum": [
        "None",
        "Bronze",
        "Silver",
        "Gold",
        "Platinum"
      ]
    },
    "UpgradeMode": {
      "type": "string",
      "description": "The upgrade mode of the cluster when new Service Fabric runtime version is available.\n\n  - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.\n  - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.\n",
      "enum": [
        "Automatic",
        "Manual"
      ]
    }
  },
  "parameters": {
    "api-version": {
      "name": "api-version",
      "in": "query",
      "description": "The version of the API. This is a required parameter and it's value must be \"2016-09-01\".",
      "required": true,
      "type": "string",
      "enum": [
        "2016-09-01"
      ],
      "default": "2016-09-01"
    },
    "clusterNameParameter": {
      "name": "clusterName",
      "in": "path",
      "description": "The name of the cluster resource",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "clusterVersion": {
      "name": "clusterVersion",
      "in": "path",
      "description": "The cluster code version",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "environment": {
      "name": "environment",
      "in": "path",
      "description": "Cluster operating system, the default means all",
      "required": true,
      "type": "string",
      "enum": [
        "Default",
        "Windows",
        "Linux"
      ],
      "x-ms-parameter-location": "method"
    },
    "locationForClusterCodeVersions": {
      "name": "location",
      "in": "path",
      "description": "The location for the cluster code versions, this is different from cluster location",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "resourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "description": "The name of the resource group.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "subscriptionId": {
      "name": "subscriptionId",
      "in": "path",
      "description": "The customer subscription identifier",
      "required": true,
      "type": "string"
    },
    "clusterBodyParam": {
      "name": "Cluster",
      "in": "body",
      "description": "The cluster resource.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Cluster"
      }
    },
    "clusterUpdateParameterBody": {
      "name": "ClusterUpdateParameters",
      "in": "body",
      "description": "The parameters which contains the property value and property name which used to update the cluster configuration.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/ClusterUpdateParameters"
      }
    }
  }
}