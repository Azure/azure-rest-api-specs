import path from "path";
import { read, readFileSync, writeFileSync } from "fs";

export function writeMarkdownFiles(basePath: string, filePaths: string[], componentName: string, clientName: string) {
  const apiVersions = filePaths.map((filePath) => getApiVersionFromFilePath(filePath));
  apiVersions.sort((a, b) => b.localeCompare(a));
  const latestApiVersion = apiVersions[0];

  writeFileSync(path.resolve(basePath, 'readme.md'), getMainReadme(clientName, componentName, filePaths, latestApiVersion));
  writeFileSync(path.resolve(basePath, 'readme.csharp.md'), getCsharpReadme(componentName));
  writeFileSync(path.resolve(basePath, 'readme.go.md'), getGoReadme(componentName));
  writeFileSync(path.resolve(basePath, 'readme.java.md'), getJavaReadme(componentName, latestApiVersion));
  writeFileSync(path.resolve(basePath, 'readme.python.md'), getPythonReadme(componentName));
  writeFileSync(path.resolve(basePath, 'readme.ruby.md'), getRubyReadme(componentName, latestApiVersion));
  writeFileSync(path.resolve(basePath, 'readme.typescript.md'), getTypescriptReadme(clientName, componentName));
}

function replaceMarkdownSection(readme: string, matcher: (heading: string) => boolean) {
  return readme.replace(/(##.*?\n)([\s\S]*?)(?=\n##|$)/g, (match, _) => {
    if (matcher(match.split('\n')[0])) {
      return '';
    }

    return match;
  });
}

function replaceCodeblockSection(readme: string, matcher: (heading: string) => boolean) {
  return readme.replace(/(```.*?\n)([\s\S]*?)(\n```\n\n)/g, (match, _) => {
    if (matcher(match.split('\n')[0])) {
      return '';
    }

    return match;
  });
}
function removeLinesMatching(readme: string, matcher: (line: string) => boolean) {
  return readme.split('\n').filter(x => !matcher(x)).join('\n');
}

function replaceFile(filePath: string, updateFunc: (content: string) => string) {
  const content = readFileSync(filePath, 'utf8');
  const updatedContent = updateFunc(content);
  writeFileSync(filePath, updatedContent);
}

export function replaceSourceReadmes(basePath: string) {
  const packagePattern = /(deploymentscripts|templatespecs|deploymentstacks|bicep)/;

  const readmes = [
    'readme.md',
    'readme.go.md',
    'readme.java.md',
    'readme.nodejs.md',
    'readme.python.md',
    'readme.ruby.md',
    'readme.terraform.md',
    'readme.typescript.md',
  ];

  for (const readme of readmes) {
    replaceFile(path.resolve(basePath, `../${readme}`), (content) => {
      content = replaceMarkdownSection(content, (heading) => packagePattern.test(heading));
      content = replaceCodeblockSection(content, heading => packagePattern.test(heading));

      content = removeLinesMatching(content, line => packagePattern.test(line));

      return content;
    });
  }
}

function getPackageName(apiVersion: string) {
  const year = apiVersion.split('-')[0];
  const month = apiVersion.split('-')[1];  

  return `package-deployments-${year}-${month}`;
}

function getApiVersionFromFilePath(filePath: string) {
  return filePath.replace(/^\.\//, '').split('/')[1];
}

function getMainReadme(clientName: string, componentName: string, filePaths: string[], latestApiVersion: string) {
  let readme = `
# ${componentName}

> see https://aka.ms/autorest

This is the AutoRest configuration file for ${componentName}.

## Getting Started

To build the SDKs for ${componentName}, simply install AutoRest via \`npm\` (\`npm install -g autorest\`) and then run:

> \`autorest readme.md\`

To see additional help and options, run:

> \`autorest --help\`

For other options on installation see [Installing AutoRest](https://aka.ms/autorest/install) on the AutoRest github page.

---

## Configuration

### Basic Information

These are the global settings for the ${componentName} client.

\`\`\` yaml
title: ${clientName}
description: ${componentName} Client
openapi-type: arm
tag: ${getPackageName(latestApiVersion)}
\`\`\`

---
`;

  for (const filePath of filePaths) {
    const apiVersion = getApiVersionFromFilePath(filePath);
    const packageName = getPackageName(apiVersion);
    readme += `
### Tag: ${packageName}

These settings apply only when \`--tag=${packageName}\` is specified on the command line.

\`\`\` yaml $(tag) == '${packageName}'
input-file:
  - ${filePath}
\`\`\`
`;
  }

  readme += `
# Code Generation

## Swagger to SDK

This section describes what SDK should be generated by the automatic system.
This is not used by Autorest itself.

\`\`\` yaml $(swagger-to-sdk)
swagger-to-sdk:
  - repo: azure-sdk-for-python
  - repo: azure-sdk-for-java
  - repo: azure-sdk-for-go
  - repo: azure-sdk-for-js
  - repo: azure-sdk-for-ruby
    after_scripts:
      - bundle install && rake arm:regen_all_profiles['azure_mgmt_deployments']
  - repo: azure-resource-manager-schemas
  - repo: azure-powershell
\`\`\`

## Go

See configuration in [readme.go.md](./readme.go.md)

## Python

See configuration in [readme.python.md](./readme.python.md)

## Ruby

See configuration in [readme.ruby.md](./readme.ruby.md)

## TypeScript

See configuration in [readme.typescript.md](./readme.typescript.md)

## CSharp

See configuration in [readme.csharp.md](./readme.csharp.md)
`;
  return readme;
}

function getCsharpReadme(componentName: string) {
  return `
## C#

These settings apply only when \`--csharp\` is specified on the command line.
Please also specify \`--csharp-sdks-folder=<path to "SDKs" directory of your azure-sdk-for-net clone>\`.

\`\`\`yaml $(csharp)
csharp:
  azure-arm: true
  license-header: MICROSOFT_MIT_NO_VERSION
  payload-flattening-threshold: 1
  clear-output-folder: true
  client-side-validation: false
  namespace: Microsoft.Azure.Management.Deployments.${componentName}
  output-folder: $(csharp-sdks-folder)/deployments/Microsoft.Azure.Management.Deployments/src/Generated
\`\`\`
`;
}

function getGoReadme(componentName: string) {
  return `
## Go

These settings apply only when \`--go\` is specified on the command line.


\`\`\` yaml $(go) && $(track2)
license-header: MICROSOFT_MIT_NO_VERSION
module-name: sdk/resourcemanager/deployments/${componentName.toLowerCase()}
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
azure-arm: true
\`\`\`
`;
}

function getJavaReadme(componentName: string, latestApiVersion: string) {
  return `
## Java

These settings apply only when \`--java\` is specified on the command line.
Please also specify \`--azure-libraries-for-java-folder=<path to the root directory of your azure-libraries-for-java clone>\`.

### Tag: ${getPackageName(latestApiVersion)} and java

These settings apply only when \`--tag=${getPackageName(latestApiVersion)} --java\` is specified on the command line.
Please also specify \`--azure-libraries-for-java-folder=<path to the root directory of your azure-sdk-for-java clone>\`.

\`\`\` yaml $(tag) == '${getPackageName(latestApiVersion)}' && $(java)
java:
  namespace: com.microsoft.azure.management.deployments.${componentName.toLowerCase()}.v${latestApiVersion.replace(/-/g, '_')}
  output-folder: $(azure-libraries-for-java-folder)/sdk/deployments/mgmt-v${latestApiVersion.replace(/-/g, '_')}
  regenerate-manager: true
  generate-interface: true
\`\`\`
`;
}

function getPythonReadme(componentName: string) {
  return `
## Python

These settings apply only when \`--python\` is specified on the command line.
Please also specify \`--python-sdks-folder=<path to the root directory of your azure-sdk-for-python clone>\`.

\`\`\` yaml $(python)
azure-arm: true
license-header: MICROSOFT_MIT_NO_VERSION
package-name: azure-mgmt-deployments-${componentName.toLowerCase()}
namespace: azure.mgmt.deployments.${componentName.toLowerCase()}
package-version: 1.0.0b1
clear-output-folder: true
\`\`\`

\`\`\` yaml $(python)
no-namespace-folders: true
output-folder: $(python-sdks-folder)/deployments/azure-mgmt-deployments-${componentName.toLowerCase()}/azure/mgmt/deployments/${componentName.toLowerCase()}
\`\`\`
`;
}

function getRubyReadme(componentName: string, latestApiVersion: string) {
  return `
## Ruby

These settings apply only when \`--ruby\` is specified on the command line.

\`\`\`yaml
package-name: azure_mgmt_deployments_${componentName.toLowerCase()}
package-version: "0.1.1"
azure-arm: true
\`\`\`

### Tag: ${getPackageName(latestApiVersion)} and ruby

These settings apply only when \`--tag=${getPackageName(latestApiVersion)} --ruby\` is specified on the command line.
Please also specify \`--ruby-sdks-folder=<path to the root directory of your azure-sdk-for-ruby clone>\`.

\`\`\`yaml $(tag) == '${getPackageName(latestApiVersion)}' && $(ruby)
namespace: "Azure::Deployments::${componentName}::Mgmt::V${latestApiVersion.replace(/-/g, '_')}"
output-folder: $(ruby-sdks-folder)/management/azure_mgmt_deployments/lib
\`\`\`
`;
}

function getTypescriptReadme(clientName: string, componentName: string) {
  return `
## TypeScript

These settings apply only when \`--typescript\` is specified on the command line.
Please also specify \`--typescript-sdks-folder=<path to root folder of your azure-sdk-for-js clone>\`.

\`\`\`yaml $(typescript)
typescript:
  azure-arm: true
  package-name: "@azure/arm-deployments-${componentName.toLowerCase()}"
  output-folder: "$(typescript-sdks-folder)/sdk/deployments/arm-deployments-${componentName.toLowerCase()}"
  override-client-name: ${clientName}
  generate-metadata: true
\`\`\`
`;
}