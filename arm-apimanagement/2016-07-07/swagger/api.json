{
  "swagger": "2.0",
  "info": {
    "title": "ApiManagementClient",
    "description": ".Net client wrapper for the REST API for Azure ApiManagement Service",
    "version": "2016-07-07"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json",
    "text/json"
  ],
  "produces": [
    "application/json",
    "text/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/managedeployments": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_ManageDeployments",
        "description": "Begin to manage (CUD) deployments of an Api Management service.To determine whether the operation has finished processing the request, call GetLongRunningOperationStatus.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceManageDeploymentsParameters"
            },
            "description": "Parameters supplied to the ManageDeployments operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Asynchronous operation in progress."
          },
          "400": {
            "description": "Bad Request."
          },
          "409": {
            "description": "Conflict."
          },
          "404": {
            "description": "Service Not Found."
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/restore": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_Restore",
        "description": "Begin restore from backup operation of an Api Management service.To determine whether the operation has finished processing the request, call GetLongRunningOperationStatus.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceBackupRestoreParameters"
            },
            "description": "Parameters supplied to the Restore Api Management service from backup operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Asynchronous operation in progress."
          },
          "400": {
            "description": "Bad Request."
          },
          "409": {
            "description": "Conflict."
          },
          "404": {
            "description": "Service Not Found."
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backup": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_Backup",
        "description": "Begin backup operation of an Api Management service.To determine whether the operation has finished processing the request, call GetLongRunningOperationStatus.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceBackupRestoreParameters"
            },
            "description": "Parameters supplied to the BeginBackup operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Request Accepted.Asynchronous operation in progress."
          },
          "400": {
            "description": "Bad Request."
          },
          "409": {
            "description": "Conflict."
          },
          "404": {
            "description": "Service Not Found."
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{operationStatusLink}": {
      "get": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_GetLongRunningOperationStatus",
        "description": "The Get Operation Status operation returns the status of the specified operation. After calling an asynchronous operation, you can call Get Operation Status to determine whether the operation has succeeded, failed, or is still in progress.",
        "parameters": [
          {
            "name": "operationStatusLink",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Location value returned by the Begin operation.",
            "x-ms-skip-url-encoding": true
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "202": {
            "description": "Asynchronous operation in progress."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}": {
      "patch": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_BeginCreatingOrUpdating",
        "description": "Begins creating new or updating existing Api Management service.To determine whether the operation has finished processing the request, call GetApiServiceLongRunningOperationStatus.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceCreateOrUpdateParameters"
            },
            "description": "Parameters supplied to the CreateOrUpdate Api Management service operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      },
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_Update",
        "description": "Begins updating existing Api Management service.To determine whether the operation has finished processing the request, call GetApiServiceLongRunningOperationStatus.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceCreateOrUpdateParameters"
            },
            "description": "Parameters supplied to the CreateOrUpdate Api Management service operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "202": {
            "description": "Accepted. Asynchronous Operation in progress."
          },
          "400": {
            "description": "Bad Request."
          },
          "409": {
            "description": "Conflict. Service is Transitioning."
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_Get",
        "description": "Get an Api Management service resource description.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "404": {
            "description": "ApiManagement Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_Delete",
        "description": "Deletes existing Api Management service",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content."
          },
          "200": {
            "description": "OK."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/": {
      "get": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_ListByResourceGroup",
        "description": "List all Api Management services within a resource group.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group. If resourceGroupName value is null the method lists all Api Management services within subscription"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiServiceListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/getssotoken": {
      "get": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_GetSsoToken",
        "description": "Gets SsoToken for an Api Management service.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/ApiServiceGetSsoTokenResult"
            }
          },
          "404": {
            "description": "Service not found."
          },
          "403": {
            "description": "Service is suspended."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/checkNameAvailability": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_CheckNameAvailability",
        "description": "Checks availability and correctness of a name for an Api Management service.",
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceCheckNameAvailabilityParameters"
            },
            "description": "Parameters supplied to the CheckNameAvailability operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiServiceNameAvailabilityResult"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/updatecertificate": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_UploadCertificate",
        "description": "Upload Custom Domain SSL certificate for an Api Management service.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceUploadCertificateParameters"
            },
            "description": "Parameters supplied to the Upload SSL certificate for an Api Management service operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/CertificateInformation"
            }
          },
          "400": {
            "description": "Bad Request."
          }          
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/updatehostname": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ResourceProvider_UpdateHostname",
        "description": "Begin updating hostname of an Api Management service.To determine whether the operation has finished processing the request, call GetLongRunningOperationStatus.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceUpdateHostnameParameters"
            },
            "description": "Parameters supplied to the UpdateHostname operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. Asynchronous Operation in progress."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis": {
      "get": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_ListByResourceGroup",
        "description": "List all APIs of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiPaged"
            }
          },
          "404": {
            "description": "Service not found."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{aid}": {
      "get": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_Get",
        "description": "Gets specific API of the Api Management service instance.",
        "produces": [
          "application/json",
          "application/vnd.sun.wadl+xml",
          "application/vnd.swagger.doc+json",
          "application/wsdl+xml"
        ],
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API.",
            "maxLength": 256
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiContract"
            }
          },
          "404": {
            "description": "Not Found."
          }
        }
      },
      "put": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_CreateOrUpdate",
        "description": "Creates new or updates existing specific API of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API.",
            "maxLength": 256
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiCreateOrUpdateParameters"
            },
            "description": "Create or update parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "ETag."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content in case of Update."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "patch": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_Patch",
        "description": "Patches specific API of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchParameters"
            },
            "description": "Patch parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_Delete",
        "description": "Deletes specific API of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Delete Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{aid}/operations": {
      "get": {
        "tags": [
          "ApiOperations"
        ],
        "operationId": "ApiOperations_ListByResourceGroup",
        "description": "List all API operations.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OperationPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/OperationContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{aid}/operations/{oid}": {
      "get": {
        "tags": [
          "ApiOperations"
        ],
        "operationId": "ApiOperations_Get",
        "description": "Gets specific API operation.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the operation within the API."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OperationContract"
            }
          },
          "404": {
            "description": "Not Found."
          }
        }
      },
      "put": {
        "tags": [
          "ApiOperations"
        ],
        "operationId": "ApiOperations_Create",
        "description": "Creates new API operation.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Operation."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationCreateOrUpdateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content in case of Update."
          },
          "400": {
            "description": "Service not found."
          },
          "404": {
            "description": "Bad Request."
          }

        }
      },
      "patch": {
        "tags": [
          "ApiOperations"
        ],
        "operationId": "ApiOperations_Update",
        "description": "Updates existing API operation.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Operation."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationCreateOrUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "ApiOperations"
        ],
        "operationId": "ApiOperations_Delete",
        "description": "Deletes specific API Operation of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Operation."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Delete Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{aid}/products": {
      "get": {
        "tags": [
          "ApiProducts"
        ],
        "operationId": "ApiProducts_ListByResourceGroup",
        "description": "List all API associated products.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ProductContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_ListByResourceGroup",
        "description": "List all subscriptions of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriptionPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/SubscriptionContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_Get",
        "description": "Gets specific API of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriptionContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_Create",
        "description": "Creates new product subscription.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription.",
            "maxLength": 256
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCreateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_Update",
        "description": "Updates specific product subscription.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_Delete",
        "description": "Deletes specific subscription of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Delete Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regeneratePrimaryKey": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_RegeneratePrimaryKey",
        "description": "Regenerates primary key of existing subscription of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regenerateSecondaryKey": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_RegenerateSecondaryKey",
        "description": "Regenerates secindary key of existing subscription of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_ListByResourceGroup",
        "description": "List all products.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ProductContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{pid}": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_Get",
        "description": "Get specific product.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_Create",
        "description": "Create new product.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product.",
            "maxLength": 256
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCreateParameters"
            },
            "description": "Create or update parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_Update",
        "description": "Update product.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_Delete",
        "description": "Delete product.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product."
          },
          {
            "name": "deleteSubscriptions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Delete existing subscriptions to the product ot not."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Delete Successfull."
          },
          "404": {
            "description": "Service not found."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{pid}/apis": {
      "get": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApis_ListByResourceGroup",
        "description": "List all Product APIs.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{pid}/apis/{aid}": {
      "put": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApis_Add",
        "description": "Adds existing API to the Product.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product.",
            "maxLength": 256
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API.",
            "maxLength": 256
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApis_Remove",
        "description": "Removes specific API from the Product.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product."
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{pid}/groups": {
      "get": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroups_ListByResourceGroup",
        "description": "List all Product Groups.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/GroupContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{pid}/groups/{gid}": {
      "put": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroups_Add",
        "description": "Assigns group to product.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product.",
            "maxLength": 256
          },
          {
            "name": "gid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Group.",
            "maxLength": 256
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroups_Remove",
        "description": "Removes group assignement from product.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product."
          },
          {
            "name": "gid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Group."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "operationId": "Groups_List",
        "description": "List all groups.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/GroupContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{gid}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "operationId": "Groups_Get",
        "description": "Gets specific group.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "gid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the group."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "operationId": "Groups_Create",
        "description": "Creates new group.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "gid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the group.",
            "maxLength": 256
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupCreateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "operationId": "Groups_Update",
        "description": "Patches specific group.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "gid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the group."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "operationId": "Groups_Delete",
        "description": "Deletes specific group of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "gid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the group."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{gid}/users": {
      "get": {
        "tags": [
          "GroupUsers"
        ],
        "operationId": "GroupUsers_ListByResourceGroup",
        "description": "List all group users.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "gid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the group."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/UserContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{gid}/users/{uid}": {
      "put": {
        "tags": [
          "GroupUsers"
        ],
        "operationId": "GroupUsers_Add",
        "description": "Include existing user to existing group.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "gid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the group.",
            "maxLength": 256
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the user.",
            "maxLength": 256
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "GroupUsers"
        ],
        "operationId": "GroupUsers_Remove",
        "description": "Remove existing user from existing group.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "gid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the group."
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the user."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/policy": {
      "get": {
        "tags": [
          "TenantPolicy"
        ],
        "operationId": "TenantPolicy_Get",
        "description": "Gets tenant-level policy.",
        "produces": [
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"
        ],
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TenantPolicy"
        ],
        "operationId": "TenantPolicy_Set",
        "description": "Sets tenant-level policy.",
        "consumes": [          
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"        
        ],
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "policyStream",
            "in": "body",
            "required": true,
            "description": "Policy stream.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "etag",
            "in": "header",
            "required": false,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "TenantPolicy"
        ],
        "operationId": "TenantPolicy_Delete",
        "description": "Deletes tenant-level policy.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{pid}/policy": {
      "get": {
        "tags": [
          "ProductPolicy"
        ],
        "operationId": "ProductPolicy_Get",
        "description": "Gets specific product policy.",
        "produces": [
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"
        ],
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProductPolicy"
        ],
        "operationId": "ProductPolicy_Set",
        "description": "Sets policy for product.",
        "consumes": [          
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"        
        ],
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product.",
            "maxLength": 256
          },
          {
            "name": "policyStream",
            "in": "body",
            "required": true,
            "description": "Policy stream.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "etag",
            "in": "header",
            "required": false,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "ProductPolicy"
        ],
        "operationId": "ProductPolicy_Delete",
        "description": "Deletes specific product policy of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{aid}/policy": {
      "get": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_Get",
        "description": "Gets specific API policy.",
        "produces": [
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"     
        ],
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_Set",
        "description": "Sets policy for API.",
        "consumes": [
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"
        ],
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API.",
            "maxLength": 256
          },
          {
            "name": "policyStream",
            "in": "body",
            "required": true,
            "description": "Policy stream.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "etag",
            "in": "header",
            "required": false,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_Delete",
        "description": "Deletes specific API policy of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{aid}/operations/{oid}/policy": {
      "get": {
        "tags": [
          "ApiOperationPolicy"
        ],
        "operationId": "ApiOperationPolicy_Get",
        "description": "Gets specific API operation policy.",
        "produces": [
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"
        ],
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiOperationPolicy"
        ],
        "operationId": "ApiOperationPolicy_Set",
        "description": "Sets policy for API operation.",
        "consumes": [
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"
        ],
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API.",
            "maxLength": 256
          },
          {
            "name": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API operation.",
            "maxLength": 256
          },
          {
            "name": "policyStream",
            "in": "body",
            "required": true,
            "description": "Policy stream.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          {
            "name": "etag",
            "in": "header",
            "required": false,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "ApiOperationPolicy"
        ],
        "operationId": "ApiOperationPolicy_Delete",
        "description": "Deletes specific API operation policy of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API."
          },
          {
            "name": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API operation."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "Certificates_ListByResourceGroup",
        "description": "This operation returns a collection of all certificates in the specified service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CertificatePaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/CertificateContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates/{certificateId}": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "Certificates_Get",
        "description": "Gets specific certificate.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "certificateId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the certificate."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CertificateContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Certificates"
        ],
        "operationId": "Certificates_CreateOrUpdate",
        "description": "Creates new or update existing certificate.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "certificateId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription.",
            "maxLength": 256
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateCreateOrUpdateParameters"
            },
            "description": "Create parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": false,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Certificates"
        ],
        "operationId": "Certificates_Delete",
        "description": "Deletes specific certificate.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "certificateId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the certificate."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policySnippets": {
      "get": {
        "tags": [
          "PolicySnippents"
        ],
        "operationId": "PolicySnippents_ListByResourceGroup",
        "description": "List all policy snippets.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Polisy scope.",
            "enum": [
              "Tenant",
              "Product",
              "Api",
              "Operation",
              "All"
            ],
            "x-ms-enum": {
              "name": "PolicyScopeContract",
              "modelAsString": false
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PolicySnippetContract"
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{pid}/subscriptions": {
      "get": {
        "tags": [
          "ProductSubscriptions"
        ],
        "operationId": "ProductSubscriptions_ListByResourceGroup",
        "description": "List all Product APIs.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "pid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the product."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriptionPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/SubscriptionContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_ListByResourceGroup",
        "description": "List all users.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/UserContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_Get",
        "description": "Gets specific user.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the user."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_Create",
        "description": "Creates new user.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the user.",
            "maxLength": 256
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreateParameters"
            },
            "description": "Create or update parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_Update",
        "description": "Updates specific user.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the user."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_Delete",
        "description": "Deletes specific user.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the user."
          },
          {
            "name": "deleteSubscriptions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Whether to delete user's subscription or not."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/generateSsoUrl": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_GenerateSsoUrl",
        "description": "Generates SSO URL.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the user."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GenerateSsoUrlResult"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/groups": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "operationId": "UserGroups_ListByResourceGroup",
        "description": "List all user groups.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the user."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/GroupContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/subscriptions": {
      "get": {
        "tags": [
          "UserSubscriptions"
        ],
        "operationId": "UserSubscriptions_ListByResourceGroup",
        "description": "List all user subscriptions of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User identifier."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriptionPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/SubscriptionContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers": {
      "get": {
        "tags": [
          "AuthorizationServers"
        ],
        "operationId": "AuthorizationServers_ListByResourceGroup",
        "description": "List all authorization servers.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthorizationServerPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/OAuth2AuthorizationServerContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers/{authsid}": {
      "get": {
        "tags": [
          "AuthorizationServers"
        ],
        "operationId": "AuthorizationServers_Get",
        "description": "Gets specific authorizations server.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "authsid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the authorization server."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OAuth2AuthorizationServerContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AuthorizationServers"
        ],
        "operationId": "AuthorizationServers_Create",
        "description": "Creates new authorization server.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "authsid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the authorization server.",
            "maxLength": 256
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationServerCreateOrUpdateParameters"
            },
            "description": "Create or update parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "AuthorizationServers"
        ],
        "operationId": "AuthorizationServers_Update",
        "description": "Updates existing authorization server.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "authsid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the authorization server."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationServerCreateOrUpdateParameters"
            },
            "description": "Create or update parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "AuthorizationServers"
        ],
        "operationId": "AuthorizationServers_Delete",
        "description": "Deletes specific auuthorization server instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "authsid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the authorization server."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/regions": {
      "get": {
        "tags": [
          "Regions"
        ],
        "operationId": "Regions_ListByResourceGroup",
        "description": "List all regions.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegionListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/identities": {
      "get": {
        "tags": [
          "UserIdentities"
        ],
        "operationId": "UserIdentities_ListByResourceGroup",
        "description": "List all user identities.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the user."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserIdentityContract"
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/{aggregation}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "operationId": "Reports_ListByResourceGroup",
        "description": "Lists report records.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aggregation",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Report aggregation.",
            "enum": [
              "byApi",
              "byGeo",
              "byOperation",
              "byProduct",
              "bySubscription",
              "byTime",
              "byUser"
            ],
            "x-ms-enum": {
              "name": "ReportsAggregation",
              "modelAsString": false
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "name": "interval",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "By time interval. This value is only applicable to ByTime aggregation. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, secconds))"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReportPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ReportRecordContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access": {
      "get": {
        "tags": [
          "TenantAccess"
        ],
        "operationId": "TenantAccess_Get",
        "description": "Get tenant settings.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AccessInformationContract"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TenantAccess"
        ],
        "operationId": "TenantAccess_Update",
        "description": "Update tenant settings.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessInformationUpdateParameters"
            },
            "description": "Parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/regeneratePrimaryKey": {
      "post": {
        "tags": [
          "TenantAccess"
        ],
        "operationId": "TenantAccess_RegeneratePrimaryKey",
        "description": "Regenerate primary access key.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/regenerateSecondaryKey": {
      "post": {
        "tags": [
          "TenantAccess"
        ],
        "operationId": "TenantAccess_RegenerateSecondaryKey",
        "description": "Regenerate secondary access key.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers": {
      "get": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Loggers_ListByResourceGroup",
        "description": "List all loggers.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LoggerPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/LoggerGetContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers/{loggerid}": {
      "get": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Loggers_Get",
        "description": "Gets specific logger.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "loggerid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the logger."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LoggerGetContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Loggers_Create",
        "description": "Creates new logger.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "loggerid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the logger.",
            "maxLength": 256
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoggerCreateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Loggers_Update",
        "description": "Patches specific logger.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "loggerid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the logger."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoggerUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Loggers_Delete",
        "description": "Deletes specific logger of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "loggerid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the logger."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/properties": {
      "get": {
        "tags": [
          "Property"
        ],
        "operationId": "Property_ListByResourceGroup",
        "description": "List all properties.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PropertyPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/PropertyContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/properties/{propId}": {
      "get": {
        "tags": [
          "Property"
        ],
        "operationId": "Property_Get",
        "description": "Gets specific property.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "propId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the property."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PropertyContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Property"
        ],
        "operationId": "Property_Create",
        "description": "Creates new property.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "propId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the property.",
            "maxLength": 256
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PropertyCreateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Property"
        ],
        "operationId": "Property_Update",
        "description": "Patches specific property.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "propId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the property."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PropertyUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Property"
        ],
        "operationId": "Property_Delete",
        "description": "Deletes specific property from the the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "propId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the property."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders": {
      "get": {
        "tags": [
          "OpenIdConnectProviders"
        ],
        "operationId": "OpenIdConnectProviders_ListByResourceGroup",
        "description": "List all OpenID Connect Providers.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OpenIdConnectProviderPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/OpenidConnectProviderContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders/{opid}": {
      "get": {
        "tags": [
          "OpenIdConnectProviders"
        ],
        "operationId": "OpenIdConnectProviders_Get",
        "description": "Gets specific OpenID Connect Provider.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "opid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the OpenID Connect Provider."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OpenidConnectProviderContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "OpenIdConnectProviders"
        ],
        "operationId": "OpenIdConnectProviders_Create",
        "description": "Creates new OpenID Connect Provider.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "opid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the OpenID Connect Provider.",
            "maxLength": 256
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenidConnectProviderCreateContract"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "OpenIdConnectProviders"
        ],
        "operationId": "OpenIdConnectProviders_Update",
        "description": "Patches specific OpenID Connect Provider.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "opid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the OpenID Connect Provider."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenidConnectProviderUpdateContract"
            },
            "description": "Update parameters."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Service not found."
          }
        }
      },
      "delete": {
        "tags": [
          "OpenIdConnectProviders"
        ],
        "operationId": "OpenIdConnectProviders_Delete",
        "description": "Deletes specific OpenID Connect Provider of the Api Management service instance.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "opid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the OpenID Connect Provider."
          },
          {
            "name": "etag",
            "in": "header",
            "required": true,
            "description": "ETag.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/git": {
      "get": {
        "tags": [
          "TenantAccessGit"
        ],
        "operationId": "TenantAccessGit_Get",
        "description": "Get tenant settings.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AccessInformationContract"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/git/regeneratePrimaryKey": {
      "post": {
        "tags": [
          "TenantAccessGit"
        ],
        "operationId": "TenantAccessGit_RegeneratePrimaryKey",
        "description": "Regenerate primary access key.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/git/regenerateSecondaryKey": {
      "post": {
        "tags": [
          "TenantAccessGit"
        ],
        "operationId": "TenantAccessGit_RegenerateSecondaryKey",
        "description": "Regenerate secondary access key.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/deploy": {
      "post": {
        "tags": [
          "TenantConfiguration"
        ],
        "operationId": "TenantConfiguration_Deploy",
        "description": "Begin deploy operation of configuration from the specified Git branch to the configuration database in an Api Management service.To determine whether the operation has finished processing the request, call GetTenantConfigurationLongRunningOperationStatus.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeployConfigurationParameters"
            },
            "description": "Deploy Configuration parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": ""
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TenantLongRunningOperationResult"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/save": {
      "post": {
        "tags": [
          "TenantConfiguration"
        ],
        "operationId": "TenantConfiguration_Save",
        "description": "Begin save operation creates a commit of the current configuration snapshot to the specified branch in the repository in an Api Management service.To determine whether the operation has finished processing the request, call GetTenantConfigurationLongRunningOperationStatus.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveConfigurationParameter"
            },
            "description": "Save Configuration parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": ""
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TenantLongRunningOperationResult"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/validate": {
      "post": {
        "tags": [
          "TenantConfiguration"
        ],
        "operationId": "TenantConfiguration_Validate",
        "description": "Begin validate operation of configuration changes in the specified Git branch of an Api Management service.To determine whether the operation has finished processing the request, call GetLongRunningOperationStatus.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeployConfigurationParameters"
            },
            "description": "Validate Configuration parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": ""
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TenantLongRunningOperationResult"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/syncState": {
      "get": {
        "tags": [
          "TenantConfigurationSyncState"
        ],
        "operationId": "TenantConfigurationSyncState_Get",
        "description": "Gets Tenant Configuration Synchronization State operation result.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TenantConfigurationSyncStateContract"
            }
          }
        }
      }
    }
  },
  "x-ms-paths" : {
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis?path={path}&wsdlServiceName={wsdlServiceName}&wsdlEndpointName={wsdlEndpointName}": {
      "post": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_Import",
        "description": "This operation creates a new API directly or by importing an API description in one of the supported formats.",
        "consumes": [
          "application/vnd.sun.wadl+xml",
          "application/vnd.swagger.doc+json",
          "application/wsdl+xml"
        ],
         "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the API.",
            "maxLength": 256
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Path of the Api."            
          },
          {
            "name": "wsdlServiceName",
            "in": "path",
            "required": false,
            "type": "string",
            "description": "Local name of the WSDL Service to be imported. This is optional and only required for Api of Type Wsdl."
          },
          {
            "name": "wsdlEndpointName",
            "in": "path",
            "required": false,
            "type": "string",
            "description": "Local name of the WSDL Endpoint to be imported. This is optional and only required for Api of Type Wsdl."
          }
        ],
        "responses": {
          "201": {
            "description": "Created"            
          },
          "204": {
            "description": "No Content."
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found."
          }
        }
      }
    }
  },
  "definitions": {
    "CertificateInformation": {
      "properties": {
        "expiry": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets expiration date of the certificate."
        },
        "thumbprint": {
          "type": "string",
          "description": "Gets or sets thumbprint of the certificate."
        },
        "subject": {
          "type": "string",
          "description": "Gets or sets subject of the certificate."
        }
      },
      "required": [
        "expiry",
        "thumbprint",
        "subject"
      ],
      "description": "SSL certificate information."
    },
    "HostnameConfiguration": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Gets or sets hostname type.",
          "enum": [
            "Proxy",
            "Portal",
            "Management",
            "Scm"
          ],
          "x-ms-enum": {
            "name": "HostnameType",
            "modelAsString": false
          }
        },
        "hostname": {
          "type": "string",
          "description": "Gets or sets hostname."
        },
        "certificate": {
          "$ref": "#/definitions/CertificateInformation",
          "description": "Gets or sets certificate information."
        }
      },
      "required": [
        "type",
        "hostname",
        "certificate"
      ],
      "description": "Custom hostname configuration."
    },    
    "VirtualNetworkConfiguration": {
      "properties": {
        "vnetid": {
          "readOnly": true,
          "type": "string",
          "description": "Gets virtual network id."
        },
        "subnetname": {
          "readOnly": true,
          "type": "string",
          "description": "Gets subnet name."
        },
        "subnetResourceId": {
          "type": "string",
          "description": "Gets or sets subnet Resource Id."
        },
        "location": {
          "type": "string",
          "description": "Gets or sets virtual network location name."
        }
      },
      "description": "Configuration of a virtual network."
    },
    "AdditionalRegion": {
      "properties": {
        "location": {
          "type": "string",
          "description": "Gets or sets location name."
        },
        "skuType": {
          "type": "string",
          "description": "Gets or sets sku type of the location.",
          "enum": [
            "Developer",
            "Standard",
            "Premium"
          ],
          "x-ms-enum": {
            "name": "SkuType",
            "modelAsString": false
          }
        },
        "skuUnitCount": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets sku Unit count of the location."
        },
        "staticIPs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets static IP addresses of the location virtual machines."
        },
        "vpnconfiguration": {
          "$ref": "#/definitions/VirtualNetworkConfiguration",
          "description": "Gets or sets virtual network configuration for the location."
        }
      },
      "description": "Description of an additional ApiService resource location."
    },
    "ApiServiceManageDeploymentsParameters": {
      "properties": {
        "location": {
          "type": "string",
          "description": "Gets or sets location of the Api Management service data center."
        },
        "skuType": {
          "type": "string",
          "description": "Gets or sets sku type of the Api Management service.",
          "enum": [
            "Developer",
            "Standard",
            "Premium"
          ],
          "x-ms-enum": {
            "name": "SkuType",
            "modelAsString": false
          }
        },
        "skuUnitCount": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets sku Unit count of the Api Management service."
        },
        "additionalLocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdditionalRegion"
          },
          "description": "Gets or sets additional data center locations for the Api Management service."
        },
        "vpnConfiguration": {
          "$ref": "#/definitions/VirtualNetworkConfiguration",
          "description": "Gets or sets virtual network configuration."
        },
        "vpnType": {
          "type": "string",
          "description": "Gets or sets vpn type.",
          "enum": [
            "None",
            "External",
            "Internal"
          ],
          "x-ms-enum": {
            "name": "VirtualNetworkType",
            "modelAsString": false
          }
        }
      },
      "required": [
        "location",
        "skuType"
      ],
      "description": "Parameters supplied to the ManageDeployments operation."
    },
    "ApiServiceBackupRestoreParameters": {
      "properties": {
        "storageAccount": {
          "type": "string",
          "description": "Gets or sets Azure Cloud Starage account (used to place/retrieve the backup) name."
        },
        "accessKey": {
          "type": "string",
          "description": "Gets or sets Azure Cloud Starage account (used to place/retrieve the backup) access key."
        },
        "containerName": {
          "type": "string",
          "description": "Gets or sets Azure Cloud Starage blob container name used to place/retrieve the backup."
        },
        "backupName": {
          "type": "string",
          "description": "Gets or sets the name of the backup."
        }
      },
      "required": [
        "storageAccount",
        "accessKey",
        "containerName",
        "backupName"
      ],
      "description": "Parameters supplied to the Backup/Restore of an Api Management service operation."
    },
    "ApiServiceProperties": {
      "properties": {
        "publisherEmail": {
          "type": "string",
          "description": "Gets or sets publisher email.",
          "maxLength": 100
        },
        "publisherName": {
          "type": "string",
          "description": "Gets or sets publisher name."
        },
        "provisioningState": {
          "type": "string",
          "description": "Gets or sets provisioning state of the Api Management service."
        },
        "targetProvisioningState": {
          "type": "string",
          "description": "Gets or sets target provisioning state of the Api Management service.The state that is targeted for the Api Management service by the infrastructure."
        },
        "createdAtUtc": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets creation UTC date of the Api Management service."
        },
        "runtimeUrl": {
          "type": "string",
          "description": "Gets or sets proxy endpoint Url of the Api Management service."
        },
        "portalUrl": {
          "type": "string",
          "description": "Gets or sets management portal endpoint Url of the Api Management service."
        },
        "managementApiUrl": {
          "type": "string",
          "description": "Gets or sets management api endpoint Url of the Api Management service."
        },
        "scmUrl": {
          "type": "string",
          "description": "Gets or sets scm endpoint Url of the Api Management service."
        },
        "addresserEmail": {
          "type": "string",
          "description": "Gets or sets addresser email."
        },
        "hostnameConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostnameConfiguration"
          },
          "description": "Gets or sets custom hostname configuration of the Api Management service."
        },
        "staticIPs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets static ip addresses of the Api Management service virtual machines. Available only for Standard and Premium Sku."
        },
        "vpnconfiguration": {
          "$ref": "#/definitions/VirtualNetworkConfiguration",
          "description": "Gets or sets virtual network configuration of the Api Management service ."
        },
        "additionalLocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdditionalRegion"
          },
          "description": "Gets or sets additional datacenter locations description of the Api Management service."
        },
        "customProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets custom properties of the Api Management service."
        },
        "vpnType": {
          "type": "string",
          "description": "Gets or sets virtual private network type of the Api Management service.",
          "enum": [
            "None",
            "External",
            "Internal"
          ],
          "x-ms-enum": {
            "name": "VirtualNetworkType",
            "modelAsString": false
          }
        }
      },
      "description": "Properties of an Api Management service resource description."
    },
    "ApiServiceSkuProperties": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets name of the Sku.",
          "enum": [
            "Developer",
            "Standard",
            "Premium"
          ],
          "x-ms-enum": {
            "name": "SkuType",
            "modelAsString": false
          }
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets capacity of the Sku (number of deployed units of the Sku)."
        }
      },
      "description": "Api Management service resource Sku properties."
    },
    "ApiServiceResource": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the id of the created Api Management service."
        },
        "location": {
          "type": "string",
          "description": "Gets or sets datacenter location of the Api Management service."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets name of the Api Management service."
        },
        "type": {
          "type": "string",
          "description": "Gets or sets resource type of the Api Management service."
        },
        "etag": {
          "type": "string",
          "description": "Gets or sets ETag of the resource."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets tags of the Api Management service."
        },
        "properties": {
          "$ref": "#/definitions/ApiServiceProperties",
          "description": "Gets or sets properties of the Api Management service."
        },
        "sku": {
          "$ref": "#/definitions/ApiServiceSkuProperties",
          "description": "Gets or sets sku properties of the Api Management service."
        }
      },
      "description": "Description of an Api Management service resource."
    },
    "ApiServiceCreateOrUpdateParameters": {
      "properties": {
        "location": {
          "type": "string",
          "description": "Gets or sets Api Management service data center location."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets Api Management service tags. A maximum of 10 tags can be provided for a resource, and each tag must have a key no greater than 128 characters (and value no greater than 256 characters)"
        },
        "properties": {
          "$ref": "#/definitions/ApiServiceProperties",
          "description": "Gets or sets properties of the Api Management service."
        },
        "sku": {
          "$ref": "#/definitions/ApiServiceSkuProperties",
          "description": "Gets or sets sku properties of the Api Management service."
        }
      },
      "required": [
        "location",
        "properties",
        "sku"
      ],
      "description": "Parameters supplied to the CreateOrUpdate Api Management service operation."
    },
    "ApiServiceListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiServiceResource"
          },
          "description": "Gets or sets result of the List Api Management services operation."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets link to the next set of results. Not empty if Value contains incomplete list of Api Management services."
        }
      },
      "description": "The response of the List Api Management services operation."
    },
    "ApiServiceGetSsoTokenResult": {
      "properties": {
        "redirect_uri": {
          "type": "string",
          "description": "Gets or sets redirect url containing the SSO token."
        }
      },
      "description": "The response of the GetSsoToken operation."
    },
    "ApiServiceCheckNameAvailabilityParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name to check for."
        }
      },
      "required": [
        "name"
      ],
      "description": "Parameters supplied to the CheckNameAvailability operation."
    },
    "ApiServiceNameAvailabilityResult": {
      "properties": {
        "nameAvailable": {
          "type": "boolean",
          "description": "Gets or sets true if the name is available and can be used to create new Api Management service. Otherwise false."
        },
        "message": {
          "type": "string",
          "description": "Gets or sets the message, which provides the resource naming requirements in case the reason is Invalid."
        },
        "reason": {
          "type": "string",
          "description": "Gets or sets the reason when isAvailable is false.",
          "enum": [
            "Valid",
            "Invalid",
            "AlreadyExists"
          ],
          "x-ms-enum": {
            "name": "NameAvailabilityReason",
            "modelAsString": false
          }
        }
      },
      "description": "Response of the CheckNameAvailability operation."
    },
    "ApiServiceUploadCertificateParameters": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Gets or sets hostname type.",
          "enum": [
            "Proxy",
            "Portal",
            "Management",
            "Scm"
          ],
          "x-ms-enum": {
            "name": "HostnameType",
            "modelAsString": false
          }
        },
        "certificate": {
          "type": "string",
          "description": "Gets or sets encoded certificate."
        },
        "certificate_password": {
          "type": "string",
          "description": "Gets or sets certificate password."
        }
      },
      "required": [
        "type",
        "certificate",
        "certificate_password"
      ],
      "description": "Parameters supplied to the Upload SSL certificate for an Api Management service operation."
    },
    "ApiServiceUpdateHostnameParameters": {
      "properties": {
        "update": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostnameConfiguration"
          },
          "description": "Gets or sets hostnames to create of update."
        },
        "delete": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Proxy",
              "Portal",
              "Management",
              "Scm"
            ],
            "x-ms-enum": {
              "name": "HostnameType",
              "modelAsString": false
            }
          },
          "description": "Gets or sets hostnames to delete."
        }
      },
      "description": "Parameters supplied to the UpdateHostname operation."
    },
    "OAuth2AuthenticationSettingsContract": {
      "properties": {
        "authorizationServerId": {
          "type": "string",
          "description": "Gets or sets OAuth authorization server identifier."
        },
        "scope": {
          "type": "string",
          "description": "Gets or sets operations scope."
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "AuthenticationSettingsContract": {
      "properties": {
        "oAuth2": {
          "$ref": "#/definitions/OAuth2AuthenticationSettingsContract",
          "description": "Gets or sets OAuth Authentication Settings."
        }
      },
      "description": "API Authentication Settings."
    },
    "SubscriptionKeyParameterNamesContract": {
      "properties": {
        "header": {
          "type": "string",
          "description": "Gets or sets Subscription key header name."
        },
        "query": {
          "type": "string",
          "description": "Gets or sets Subscription key query string parameter name."
        }
      },
      "description": "Subscription key parameter names details."
    },
    "ApiContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets API identifier path: /apis/{aid}"
        },
        "name": {
          "type": "string",
          "description": "Gets or sets API name. Must be 1 to 300 characters long.",
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Gets or sets API description."
        },
        "serviceUrl": {
          "type": "string",
          "description": "Gets or sets Base address for API requests. Must be 1 to 2000 characters long.",
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Gets or sets Path for API requests. Must be 1 to 400 characters long.",
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Http",
              "Https"
            ],
            "x-ms-enum": {
              "name": "ApiProtocolContract",
              "modelAsString": false
            }
          },
          "description": "Gets or sets Protocols over which API is made available."
        },
        "authenticationSettings": {
          "$ref": "#/definitions/AuthenticationSettingsContract",
          "description": "Gets or sets Collection of authentication settings included into this API."
        },
        "subscriptionKeyParameterNames": {
          "$ref": "#/definitions/SubscriptionKeyParameterNamesContract",
          "description": "Gets or sets Protocols over which API is made available."
        },
        "type": {
          "type": "string",
          "description": "Type of API.",
          "enum": [
            "Http",
            "Soap"
          ],
          "x-ms-enum": {
            "name": "ApiTypeContract",
            "modelAsString": false
          }
        }
      },
      "required": [
        "name",
        "serviceUrl",
        "path",
        "protocols"
      ],
      "description": "API details."
    },
    "ApiPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged Api list representation."
    },
    "ApiCreateOrUpdateParameters": {
      "properties": {
        "ApiContract": {
          "$ref": "#/definitions/ApiContract",
          "description": "Gets or sets ApiContract."
        }
      },
      "required": [
        "ApiContract"
      ],
      "description": "Parameters supplied to the CreateOrUpdate Api operation."
    },
    "PatchParameters": {
      "properties": {
        "RawJson": {
          "type": "object",
          "description": "Gets or sets json value."
        }
      },
      "required": [
        "RawJson"
      ],
      "description": "Parameters supplied to the Patch operations."
    },
    "ApiExportResult": {
      "properties": {
        "content": {
          "type": "string",
          "format": "byte",
          "description": "Gets or sets response content bytes."
        },
        "statusCode": {
          "type": "string",
          "enum": [
            "Continue",            
            "OK",
            "Created",
            "Accepted",            
            "NotFound",            
            "Conflict"                        
          ],
          "x-ms-enum": {
            "name": "HttpStatusCode",
            "modelAsString": false
          }
        },
        "requestId": {
          "type": "string"
        }
      },
      "description": "The response model for the export API output operation."
    },
    "ParameterContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets Parameter name."
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Parameter description."
        },
        "type": {
          "type": "string",
          "description": "Gets or sets Parameter type."
        },
        "defaultValue": {
          "type": "string",
          "description": "Gets or sets Default parameter value."
        },
        "required": {
          "type": "boolean",
          "description": "Gets or sets whether parameter is required or not."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets Parameter values."
        }
      },
      "required": [
        "name",
        "type"
      ],
      "description": "Operation parameters details."
    },
    "RepresentationContract": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Gets or sets Content type."
        },
        "sample": {
          "type": "string",
          "description": "Gets or sets Content sample."
        }
      },
      "required": [
        "contentType"
      ],
      "description": "Operation request/response representation details."
    },
    "RequestContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Gets or sets Operation request description."
        },
        "queryParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Gets or sets Collection of operation request query parameters."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Gets or sets Collection of operation request headers."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Gets or sets Collection of operation request representations."
        }
      },
      "description": "Operation request details."
    },
    "ResultContract": {
      "properties": {
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets Operation response status code."
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Operation response description."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Gets or sets Collection of operation response representations."
        }
      },
      "required": [
        "statusCode"
      ],
      "description": "Operation response details."
    },
    "OperationContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets OperationId path."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets Operation Name. Must be 1 to 300 characters long.",
          "maxLength": 300
        },
        "method": {
          "type": "string",
          "description": "Gets or sets Operation Method (GET, PUT, POST, etc.)."
        },
        "urlTemplate": {
          "type": "string",
          "description": "Gets or sets Operation URI template. Cannot be more than 400 characters long.",
          "maxLength": 400
        },
        "templateParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Gets or sets Collection of URL template parameters."
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Operation description."
        },
        "request": {
          "$ref": "#/definitions/RequestContract",
          "description": "Gets or sets Operation request."
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultContract"
          },
          "description": "Gets or sets Array of Operation responses."
        }
      },
      "required": [
        "name",
        "method",
        "urlTemplate"
      ],
      "description": "Api Operation details."
    },
    "OperationPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged Operation list representation."
    },
    "OperationCreateOrUpdateParameters": {
      "properties": {
        "OperationContract": {
          "$ref": "#/definitions/OperationContract",
          "description": "Gets or sets operation details."
        }
      },
      "required": [
        "OperationContract"
      ],
      "description": "Parameters supplied to the CreateOrUpdate Operation operation."
    },
    "ProductContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets Product identifier path."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets Product name. Must be 1 to 300 characters long.",
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Product description. May be 1 to 500 characters long."
        },
        "terms": {
          "type": "string",
          "description": "Gets or sets Product terms and conditions. Developer will have to accept these terms before he's allowed to call product API."
        },
        "subscriptionRequired": {
          "type": "boolean",
          "description": "Gets or sets whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true."
        },
        "approvalRequired": {
          "type": "boolean",
          "description": "Gets or sets whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "subscriptionsLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "state": {
          "type": "string",
          "description": "Gets or sets whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators.",
          "enum": [
            "NotPublished",
            "Published"
          ],
          "x-ms-enum": {
            "name": "ProductStateContract",
            "modelAsString": false
          }
        }
      },
      "required": [
        "name"
      ],
      "description": "Product profile."
    },
    "ProductPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged Products list representation."
    },
    "SubscriptionContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets Subscription identifier path."
        },
        "userId": {
          "type": "string",
          "description": "Gets or sets Subscriber identifier path."
        },
        "productId": {
          "type": "string",
          "description": "Gets or sets Product identifier path."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets Subscription name."
        },
        "state": {
          "type": "string",
          "description": "Gets or sets Subscription state.",
          "enum": [
            "Suspended",
            "Active",
            "Expired",
            "Submitted",
            "Rejected",
            "Cancelled"
          ],
          "x-ms-enum": {
            "name": "SubscriptionStateContract",
            "modelAsString": false
          }
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets Subscription creation date."
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets Subscription activation date."
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets Subscription expiration date."
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets Date when subscription was cancelled or expired."
        },
        "notificationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets Upcoming subscription expiration notification date."
        },
        "primaryKey": {
          "type": "string",
          "description": "Gets or sets Subscription primary key."
        },
        "secondaryKey": {
          "type": "string",
          "description": "Gets or sets Subscription secondary key."
        },
        "stateComment": {
          "type": "string",
          "description": "Gets or sets Subscription State Comment."
        }
      },
      "description": "Subscription details."
    },
    "SubscriptionPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged Subsctions list representation."
    },
    "SubscriptionCreateParameters": {
      "properties": {
        "userId": {
          "type": "string",
          "description": "Gets or sets User (user id path) for whom subscription is being created."
        },
        "productId": {
          "type": "string",
          "description": "Gets or sets Product (product id path) for which subscription is being created."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets Subscription name."
        },
        "primaryKey": {
          "type": "string",
          "description": "Gets or sets Primary subscription key. If not specified during request key will be generated automatically. Must be 1 to 256 characters long.",
          "maxLength": 256
        },
        "secondaryKey": {
          "type": "string",
          "description": "Gets or sets Secondary subscription key. If not specified during request key will be generated automatically. Must be 1 to 256 characters long.",
          "maxLength": 256
        },
        "state": {
          "type": "string",
          "description": "Gets or sets Initial subscription state.",
          "enum": [
            "Suspended",
            "Active",
            "Expired",
            "Submitted",
            "Rejected",
            "Cancelled"
          ],
          "x-ms-enum": {
            "name": "SubscriptionStateContract",
            "modelAsString": false
          }
        }
      },
      "required": [
        "userId",
        "productId",
        "name"
      ],
      "description": "Parameters supplied to the Create subscription operation."
    },
    "SubscriptionUpdateParameters": {
      "properties": {
        "userId": {
          "type": "string",
          "description": "Gets or sets User identifier path: /users/{uid}"
        },
        "productId": {
          "type": "string",
          "description": "Gets or sets Product identifier path: /products/{pid}"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets New subscription expiration date."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets Subscription name."
        },
        "primaryKey": {
          "type": "string",
          "description": "Gets or sets Primary subscription key. Must be 1 to 256 characters long.",
          "maxLength": 256
        },
        "secondaryKey": {
          "type": "string",
          "description": "Gets or sets Secondary subscription key. Must be 1 to 256 characters long.",
          "maxLength": 256
        },
        "state": {
          "type": "string",
          "description": "Gets or sets Initial subscription state.",
          "enum": [
            "Suspended",
            "Active",
            "Expired",
            "Submitted",
            "Rejected",
            "Cancelled"
          ],
          "x-ms-enum": {
            "name": "SubscriptionStateContract",
            "modelAsString": false
          }
        },
        "stateComment": {
          "type": "string",
          "description": "Gets or sets Comments describing subscription state change."
        }
      },
      "description": "Parameters supplied to the Update subscription operation."
    },
    "ProductCreateParameters": {
      "properties": {
        "ProductContract": {
          "$ref": "#/definitions/ProductContract",
          "description": "Gets or sets product details."
        }
      },
      "required": [
        "ProductContract"
      ],
      "description": "Parameters supplied to the CreateOrUpdate Product operation."
    },
    "ProductUpdateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets Product name. Must be 1 to 300 characters long.",
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Product description. May be 1 to 500 characters long."
        },
        "terms": {
          "type": "string",
          "description": "Gets or sets Product terms and conditions. Developer will have to accept these terms before he's allowed to call product API."
        },
        "subscriptionRequired": {
          "type": "boolean",
          "description": "Gets or sets whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true."
        },
        "approvalRequired": {
          "type": "boolean",
          "description": "Gets or sets whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "subscriptionsLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "state": {
          "type": "string",
          "description": "Gets or sets whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators.",
          "enum": [
            "NotPublished",
            "Published"
          ],
          "x-ms-enum": {
            "name": "ProductStateContract",
            "modelAsString": false
          }
        }
      },
      "description": "Parameters supplied to the CreateOrUpdate Product operation."
    },
    "GroupContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets group identifier."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets Group name. Must be 1 to 300 characters long.",
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Group description."
        },
        "builtIn": {
          "readOnly": true,
          "type": "boolean",
          "description": "Gets whether group is built in or not."
        },
        "type": {
          "type": "string",
          "description": "Gets or sets Group type.",
          "enum": [
            "Custom",
            "System",
            "External"
          ],
          "x-ms-enum": {
            "name": "GroupTypeContract",
            "modelAsString": false
          }
        },
        "externalId": {
          "type": "string",
          "description": "Gets or sets Identifier for an external group."
        }
      },
      "required": [
        "name"
      ],
      "description": "Developer group."
    },
    "GroupPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged Group list representation."
    },
    "GroupCreateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets Group name. Must be 1 to 300 characters long.",
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Group description."
        },
        "type": {
          "type": "string",
          "description": "Gets or sets Group type.",
          "enum": [
            "Custom",
            "System",
            "External"
          ],
          "x-ms-enum": {
            "name": "GroupTypeContract",
            "modelAsString": false
          }
        },
        "externalId": {
          "type": "string",
          "description": "Gets or sets Identifier for an external group."
        }
      },
      "required": [
        "name"
      ],
      "description": "Parameters supplied to the Create Group operation."
    },
    "GroupUpdateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets Group name. Must be 1 to 300 characters long.",
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Group description."
        },
        "type": {
          "type": "string",
          "description": "Gets or sets Group type.",
          "enum": [
            "Custom",
            "System",
            "External"
          ],
          "x-ms-enum": {
            "name": "GroupTypeContract",
            "modelAsString": false
          }
        },
        "externalId": {
          "type": "string",
          "description": "Gets or sets Identifier for an external group."
        }
      },
      "description": "Parameters supplied to the Update Group operation."
    },
    "UserIdentityContract": {
      "properties": {
        "provider": {
          "type": "string",
          "description": "Gets or sets Identity provider name."
        },
        "id": {
          "type": "string",
          "description": "Gets or sets Identifier value within provider."
        }
      },
      "description": "User identity details."
    },
    "UserContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets User identifier path."
        },
        "firstName": {
          "type": "string",
          "description": "Gets or sets First name."
        },
        "lastName": {
          "type": "string",
          "description": "Gets or sets Last name."
        },
        "email": {
          "type": "string",
          "description": "Gets or sets Email address."
        },
        "state": {
          "type": "string",
          "description": "Gets or sets User state.",
          "enum": [
            "Active",
            "Blocked"
          ],
          "x-ms-enum": {
            "name": "UserStateContract",
            "modelAsString": false
          }
        },
        "registrationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets Date of user registration."
        },
        "note": {
          "type": "string",
          "description": "Gets or sets Administrator's note about given user."
        },
        "identities": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserIdentityContract"
          },
          "description": "Gets Collection of user identities."
        }
      },
      "description": "User profile."
    },
    "UserPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged Users list representation."
    },
    "CertificateContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets Certificate identifier path: /certificates/{certificateId}"
        },
        "subject": {
          "type": "string",
          "description": "Gets or sets Subject attribute of the certificate."
        },
        "thumbprint": {
          "type": "string",
          "description": "Gets or sets Thumbprint of the certificate."
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets Expiration date of the certificate."
        }
      },
      "description": "Certificate details."
    },
    "CertificatePaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged Certificates list representation."
    },
    "CertificateCreateOrUpdateParameters": {
      "properties": {
        "data": {
          "type": "string",
          "description": "Gets or sets Base 64 encoded Certificate"
        },
        "password": {
          "type": "string",
          "description": "Gets or sets Password for the Certificate"
        }
      },
      "description": "Parameters supplied to the CreateOrUpdate certificate operation."
    },
    "PolicySnippetContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets Snippet name."
        },
        "content": {
          "type": "string",
          "description": "Gets or sets Snippet content."
        },
        "toolTip": {
          "type": "string",
          "description": "Gets or sets Snippet toolTip."
        },
        "scope": {
          "type": "string",
          "description": "Gets or sets Snippet scope.",
          "enum": [
            "Tenant",
            "Product",
            "Api",
            "Operation",
            "All"
          ],
          "x-ms-enum": {
            "name": "PolicyScopeContract",
            "modelAsString": false
          }
        }
      },
      "description": "Policy snippet."
    },
    "UserCreateParameters": {
      "properties": {
        "email": {
          "type": "string",
          "description": "Gets or sets Email address."
        },
        "password": {
          "type": "string",
          "description": "Gets or sets Password."
        },
        "firstName": {
          "type": "string",
          "description": "Gets or sets First name. Must be 1 to 100 characters long.",
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "description": "Gets or sets Last name. Must be 1 to 100 characters long.",
          "maxLength": 100
        },
        "state": {
          "type": "string",
          "description": "Gets or sets account state.",
          "enum": [
            "Active",
            "Blocked"
          ],
          "x-ms-enum": {
            "name": "UserStateContract",
            "modelAsString": false
          }
        },
        "note": {
          "type": "string",
          "description": "Gets or sets Note about user."
        }
      },
      "required": [
        "email",
        "password",
        "firstName",
        "lastName"
      ],
      "description": "Parameters supplied to the Create User operation."
    },
    "UserUpdateParameters": {
      "properties": {
        "email": {
          "type": "string",
          "description": "Gets or sets Email address."
        },
        "password": {
          "type": "string",
          "description": "Gets or sets Password."
        },
        "firstName": {
          "type": "string",
          "description": "Gets or sets First name. Must be 1 to 100 characters long.",
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "description": "Gets or sets Last name. Must be 1 to 100 characters long.",
          "maxLength": 100
        },
        "state": {
          "type": "string",
          "description": "Gets or sets account state.",
          "enum": [
            "Active",
            "Blocked"
          ],
          "x-ms-enum": {
            "name": "UserStateContract",
            "modelAsString": false
          }
        },
        "note": {
          "type": "string",
          "description": "Gets or sets Note about user."
        }
      },
      "description": "Parameters supplied to the Update User operation."
    },
    "GenerateSsoUrlResult": {
      "properties": {
        "value": {
          "type": "string",
          "description": "Gets or sets SSO URL value."
        }
      },
      "description": "Generate SSO Url operations response details."
    },
    "TokenBodyParameterContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets body parameter name."
        },
        "value": {
          "type": "string",
          "description": "Gets or sets body parameter value."
        }
      },
      "description": "OAuth acquire token request body parameter (www-url-form-encoded)."
    },
    "OAuth2AuthorizationServerContract": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Gets Authorization server identifier path."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets User-friendly authorization server name."
        },
        "description": {
          "type": "string",
          "description": "Gets or sets User-friendly authorization server name."
        },
        "clientRegistrationEndpoint": {
          "type": "string",
          "description": "Gets or sets Client registration URI that will be shown for developers."
        },
        "authorizationEndpoint": {
          "type": "string",
          "description": "Gets or sets OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2."
        },
        "authorizationMethods": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "HEAD",
              "OPTIONS",
              "TRACE",
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ],
            "x-ms-enum": {
              "name": "MethodContract",
              "modelAsString": false
            }
          },
          "description": "Gets or sets Supported methods of authorization."
        },
        "clientAuthenticationMethod": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Basic",
              "Body"
            ],
            "x-ms-enum": {
              "name": "ClientAuthenticationMethodContract",
              "modelAsString": false
            }
          },
          "description": "Gets or sets Supported methods of authorization."
        },
        "tokenBodyParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenBodyParameterContract"
          },
          "description": "Gets or sets Token request body parameters."
        },
        "tokenEndpoint": {
          "type": "string",
          "description": "Gets or sets OAuth token endpoint. See http://tools.ietf.org/html/rfc6749#section-3.1 ."
        },
        "supportState": {
          "type": "boolean",
          "description": "Gets or sets whether Auhtorizatoin Server supports client credentials in body or not. See http://tools.ietf.org/html/rfc6749#section-3.1 ."
        },
        "defaultScope": {
          "type": "string",
          "description": "Gets or sets Scope that is going to applied by default on the console page. See http://tools.ietf.org/html/rfc6749#section-3.3 ."
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "authorizationCode",
              "implicit",
              "resourceOwnerPassword",
              "clientCredentials"
            ],
            "x-ms-enum": {
              "name": "GrantTypesContract",
              "modelAsString": false
            }
          },
          "description": "Gets or sets Form of an authorization grant, which the client uses to request the access token. See http://tools.ietf.org/html/rfc6749#section-4 ."
        },
        "bearerTokenSendingMethods": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "authorizationHeader",
              "query"
            ],
            "x-ms-enum": {
              "name": "BearerTokenSendingMethodsContract",
              "modelAsString": false
            }
          },
          "description": "Gets or sets Form of an authorization grant, which the client uses to request the access token. See http://tools.ietf.org/html/rfc6749#section-4 ."
        },
        "clientId": {
          "type": "string",
          "description": "Gets or sets Client ID of developer console which is the client application."
        },
        "clientSecret": {
          "type": "string",
          "description": "Gets or sets Client Secret of developer console which is the client application."
        },
        "resourceOwnerUsername": {
          "type": "string",
          "description": "Gets or sets Username of the resource owner on behalf of whom developer console will make requests."
        },
        "resourceOwnerPassword": {
          "type": "string",
          "description": "Gets or sets Password of the resource owner on behalf of whom developer console will make requests."
        }
      },
      "description": "External OAuth authorization server settings."
    },
    "AuthorizationServerPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OAuth2AuthorizationServerContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged OAuth2 Authorization Servers list representation."
    },
    "AuthorizationServerCreateOrUpdateParameters": {
      "properties": {
        "OAuth2AuthorizationServerContract": {
          "$ref": "#/definitions/OAuth2AuthorizationServerContract",
          "description": "Gets or sets OAuth2 Authorization Server details."
        }
      },
      "required": [
        "OAuth2AuthorizationServerContract"
      ],
      "description": "Parameters supplied to the CreateOrUpdate Authorization Server operation."
    },
    "RegionContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets Region name."
        },
        "isMasterRegion": {
          "type": "boolean",
          "description": "Gets or sets whether Region is the master region."
        }
      },
      "required": [
        "name",
        "isMasterRegion"
      ],
      "description": "Region profile."
    },
    "RegionListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegionContract"
          },
          "description": "Gets ot sets result of List Regions operation."
        }
      },
      "description": "List Regions operation response details."
    },
    "ReportRecordContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets name depending on report endpoint specifies product, API, operation or developer name."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets Start of aggregation period."
        },
        "interval": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets Length of agregation period."
        },
        "country": {
          "type": "string",
          "description": "Gets or sets Country to which this record data is related."
        },
        "region": {
          "type": "string",
          "description": "Gets or sets Country region to which this record data is related."
        },
        "zip": {
          "type": "string",
          "description": "Gets or sets Zip code to which this record data is related."
        },
        "userId": {
          "readOnly": true,
          "type": "string",
          "description": "Gets User identifier path. /users/{userId}"
        },
        "productId": {
          "readOnly": true,
          "type": "string",
          "description": "Gets Product identifier path. /products/{productId}"
        },
        "apiId": {
          "type": "string",
          "description": "Gets or sets API identifier path. /apis/{apiId}"
        },
        "operationId": {
          "type": "string",
          "description": "Gets or sets Operation identifier path. /apis/{aid}/operations/{oid}"
        },
        "apiRegion": {
          "type": "string",
          "description": "Gets or sets API region identifier."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Gets or sets Subscription identifier path. /subscriptions/{subscriptionId}"
        },
        "callCountSuccess": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets Number of succesful calls."
        },
        "callCountBlocked": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets Number of calls blocked due to invalid credentials."
        },
        "callCountFailed": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets number of calls failed due to proxy or backend errors."
        },
        "callCountOther": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets Number of other calls."
        },
        "callCountTotal": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets Total number of calls."
        },
        "bandwidth": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets Bandwidth consumed."
        },
        "cacheHitCount": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets Number of times when content was served from cache policy."
        },
        "cacheMissCount": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets Number of times content was fetched from backend."
        },
        "apiTimeAvg": {
          "type": "number",
          "format": "double",
          "description": "Gets or sets Average time it took to process request."
        },
        "apiTimeMin": {
          "type": "number",
          "format": "double",
          "description": "Gets or sets Minimum time it took to process request."
        },
        "apiTimeMax": {
          "type": "number",
          "format": "double",
          "description": "Gets or sets Maximum time it took to process request."
        },
        "serviceTimeAvg": {
          "type": "number",
          "format": "double",
          "description": "Gets or sets Average time it took to process request on backend."
        },
        "serviceTimeMin": {
          "type": "number",
          "format": "double",
          "description": "Gets or sets Minimum time it took to process request on backend."
        },
        "serviceTimeMax": {
          "type": "number",
          "format": "double",
          "description": "Gets or sets Maximum time it took to process request on backend."
        }
      },
      "description": "Report data."
    },
    "ReportPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportRecordContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged Report records list representation."
    },
    "AccessInformationContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets Identifier."
        },
        "primaryKey": {
          "type": "string",
          "description": "Gets or sets Primary access key."
        },
        "secondaryKey": {
          "type": "string",
          "description": "Gets or sets Secondary access key."
        },
        "enabled": {
          "type": "boolean",
          "description": "Gets or sets tenant access information of the Api Management service."
        }
      },
      "description": "Tenant access information contract of the Api Management service."
    },
    "AccessInformationUpdateParameters": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Gets or sets tenant access information of the Api Management service."
        }
      },
      "required": [
        "enabled"
      ],
      "description": "Tenant access information update parameters of the Api Management service."
    },
    "LoggerGetContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets logger identifier."
        },
        "type": {
          "type": "string",
          "description": "Gets or sets Logger type.",
          "enum": [
            "AzureEventHub"
          ],
          "x-ms-enum": {
            "name": "LoggerTypeContract",
            "modelAsString": false
          }
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Logger description."
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets Logger credentials."
        },
        "isBuffered": {
          "type": "boolean",
          "description": "Gets or sets whether records are buffered in the logger before publishing. Default is assumed to be true."
        }
      },
      "required": [
        "type"
      ],
      "description": "Logger."
    },
    "LoggerPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoggerGetContract"
          },
          "description": "Gets or sets logger values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged Logger list representation."
    },
    "LoggerCreateParameters": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Gets or sets Logger type.",
          "enum": [
            "AzureEventHub"
          ],
          "x-ms-enum": {
            "name": "LoggerTypeContract",
            "modelAsString": false
          }
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Logger description."
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets Logger credentials."
        },
        "isBuffered": {
          "type": "boolean",
          "description": "Gets or sets whether records are buffered in the logger before publishing. Default is assumed to be true."
        }
      },
      "required": [
        "type",
        "credentials"
      ],
      "description": "Parameters supplied to the Create Logger operation."
    },
    "LoggerUpdateParameters": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Gets or sets Logger type.",
          "enum": [
            "AzureEventHub"
          ],
          "x-ms-enum": {
            "name": "LoggerTypeContract",
            "modelAsString": false
          }
        },
        "description": {
          "type": "string",
          "description": "Gets or sets Logger description."
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets Logger credentials."
        },
        "isBuffered": {
          "type": "boolean",
          "description": "Gets or sets whether records are buffered in the logger before publishing. Default is assumed to be true."
        }
      },
      "required": [
        "type"
      ],
      "description": "Parameters supplied to the Update Logger operation."
    },
    "PropertyContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets Property identifier path."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets Unique name of Property. Must be between 1 to 256 characters long.",
          "maxLength": 256
        },
        "value": {
          "type": "string",
          "description": "Gets or sets the Value of the Property. Must be between 1 to 4096 characters long.",
          "maxLength": 4096
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets Collection of tags associated with a property."
        },
        "secret": {
          "type": "boolean",
          "description": "Gets or sets the value which determines the value should be encrypted or not. Default value is false."
        }
      },
      "required": [
        "name",
        "value"
      ],
      "description": "Property details."
    },
    "PropertyPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged Property list representation."
    },
    "PropertyCreateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets Unique name of Property. Must be between 1 to 256 characters long.",
          "maxLength": 256
        },
        "value": {
          "type": "string",
          "description": "Gets or sets the Value of the Property. Must be between 1 to 4096 characters long.",
          "maxLength": 4096
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets Collection of tags associated with a property."
        },
        "secret": {
          "type": "boolean",
          "description": "Gets or sets the value which determines the value should be encrypted or not. Default value is false."
        }
      },
      "required": [
        "name",
        "value"
      ],
      "description": "Parameters supplied to the Create Property operation."
    },
    "PropertyUpdateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets Unique name of Property. Must be between 1 to 256 characters long.",
          "maxLength": 256
        },
        "value": {
          "type": "string",
          "description": "Gets or sets the Value of the Property. Must be between 1 to 4096 characters long.",
          "maxLength": 4096
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets Collection of tags associated with a property."
        },
        "secret": {
          "type": "boolean",
          "description": "Gets or sets the value which determines the value should be encrypted or not. Default value is false."
        }
      },
      "description": "Parameters supplied to the Update Property operation."
    },
    "OpenidConnectProviderContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets OpenID Connect Provider identifier."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets User-friendly OpenID Connect Provider name.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "Gets or sets User-friendly description of OpenID Connect Provider."
        },
        "metadataEndpoint": {
          "type": "string",
          "description": "Gets or sets Metadata endpoint URI."
        },
        "clientId": {
          "type": "string",
          "description": "Gets or sets Client ID of developer console which is the client application."
        },
        "clientSecret": {
          "type": "string",
          "description": "Gets or sets Client Secret of developer console which is the client application."
        }
      },
      "required": [
        "name",
        "metadataEndpoint",
        "clientId"
      ],
      "description": "OpenID Connect Providers Contract."
    },
    "OpenIdConnectProviderPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpenidConnectProviderContract"
          },
          "description": "Gets or sets page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets next page link if any."
        }
      },
      "description": "Paged OpenIdProviders list representation."
    },
    "OpenidConnectProviderCreateContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets User-friendly OpenID Connect Provider name.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "Gets or sets User-friendly description of OpenID Connect Provider."
        },
        "metadataEndpoint": {
          "type": "string",
          "description": "Gets or sets Metadata endpoint URI."
        },
        "clientId": {
          "type": "string",
          "description": "Gets or sets Client ID of developer console which is the client application."
        },
        "clientSecret": {
          "type": "string",
          "description": "Gets or sets Client Secret of developer console which is the client application."
        }
      },
      "required": [
        "name",
        "metadataEndpoint",
        "clientId"
      ],
      "description": "Parameters supplied to the Create OpenID Connect Provider operation."
    },
    "OpenidConnectProviderUpdateContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets User-friendly OpenID Connect Provider name.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "Gets or sets User-friendly description of OpenID Connect Provider."
        },
        "metadataEndpoint": {
          "type": "string",
          "description": "Gets or sets Metadata endpoint URI."
        },
        "clientId": {
          "type": "string",
          "description": "Gets or sets Client ID of developer console which is the client application."
        },
        "clientSecret": {
          "type": "string",
          "description": "Gets or sets Client Secret of developer console which is the client application."
        }
      },
      "description": "Parameters supplied to the Update OpenID Connect Provider operation."
    },
    "DeployConfigurationParameters": {
      "properties": {
        "branch": {
          "type": "string",
          "description": "Gets or sets the name of the Git branch from which the configuration is to be deployed to the configuration database."
        },
        "force": {
          "type": "boolean",
          "description": "Gets or sets the value enforcing deleting subscriptions to products that are deleted in this update."
        }
      },
      "required": [
        "branch"
      ],
      "description": "Parameters supplied to the Deploy Configuration operation."
    },
    "TenantLongRunningOperationResult": {
      "properties": {
        "operationStatusLink": {
          "type": "string",
          "description": "Gets or sets operation status link."
        },
        "retryAfter": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the number of minutes to retry the operation after."
        },
        "status": {
          "type": "string",
          "description": "Gets or sets current status of the operation.",
          "enum": [
            "InProgress",
            "Succeeded",
            "Failed"
          ],
          "x-ms-enum": {
            "name": "OperationStatus",
            "modelAsString": false
          }
        },
        "statusCode": {
          "type": "string",
          "enum": [
            "Continue",            
            "OK",
            "Created",
            "Accepted",            
            "NotFound",            
            "Conflict"                        
          ],
          "x-ms-enum": {
            "name": "HttpStatusCode",
            "modelAsString": false
          }
        },
        "requestId": {
          "type": "string"
        }
      },
      "description": "A standard service response for long running tenant operations."
    },
    "ErrorFieldContract": {
      "properties": {
        "code": {
          "type": "string",
          "description": "Gets or sets Property level error code."
        },
        "message": {
          "type": "string",
          "description": "Gets or sets Human-readable representation of property-level error."
        },
        "target": {
          "type": "string",
          "description": "Gets or sets Property name."
        }
      },
      "description": "Error Field contract."
    },
    "ErrorBodyContract": {
      "properties": {
        "code": {
          "type": "string",
          "description": "Gets or sets Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response."
        },
        "message": {
          "type": "string",
          "description": "Gets or sets Human-readable representation of the error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorFieldContract"
          },
          "description": "Gets or sets the list of invalid fields send in request, in case of validation error."
        }
      },
      "description": "Error Body contract."
    },
    "OperationResultContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets Operation result identifier."
        },
        "status": {
          "type": "string",
          "description": "Gets or sets Status of an async operation.",
          "enum": [
            "Started",
            "InProgress",
            "Succeeded",
            "Failed"
          ],
          "x-ms-enum": {
            "name": "AsyncOperationState",
            "modelAsString": false
          }
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets Start time of an async operation."
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets Last update time of an async operation."
        },
        "resultInfo": {
          "type": "string",
          "description": "Gets or sets Optional result info."
        },
        "error": {
          "$ref": "#/definitions/ErrorBodyContract",
          "description": "Gets or sets Errors that have occured during the operation execution."
        }
      },
      "description": "Operation Result."
    },
    "SaveConfigurationParameter": {
      "properties": {
        "branch": {
          "type": "string",
          "description": "Gets or sets the name of the Git branch in which to commit the current configuration snapshot."
        },
        "force": {
          "type": "boolean",
          "description": "Gets or sets the value if true, the current configuration database is committed to the Git repository, even if the Git repository has newer changes that would be overwritten."
        }
      },
      "required": [
        "branch"
      ],
      "description": "Parameters supplied to the Save Tenant Configuration operation."
    },
    "TenantConfigurationSyncStateContract": {
      "properties": {
        "branch": {
          "type": "string",
          "description": "Gets or sets the name of Git branch."
        },
        "commitId": {
          "type": "string",
          "description": "Gets or sets the latest commit Id."
        },
        "isExport": {
          "type": "boolean",
          "description": "Gets or sets value indicating if last sync was save (true) or deploy (false) operation."
        },
        "isSynced": {
          "type": "boolean",
          "description": "Gets or sets value indicating if last synchronization was later than the configuration change."
        },
        "isGitEnabled": {
          "type": "boolean",
          "description": "Gets or sets value indicating whether Git configuration access is enabled."
        },
        "syncDate": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets the date of the latest synchronization, in ISO 8601 format."
        },
        "configurationChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Gets or sets the date of the latest configuration change, in ISO 8601 format."
        }
      },
      "description": "Tenant Configuration Synchronization State."
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Client Api Version."
    },
    "ServiceNameParameter": {
      "name": "serviceName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the Api Management service.",
      "maxLength": 50
    }
  }
}