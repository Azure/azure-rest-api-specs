name: "Azure OpenAPI"

trigger: none

variables:
  TRAVIS: 'true'
  TRAVIS_BRANCH: $(System.PullRequest.TargetBranch)
  TRAVIS_PULL_REQUEST: $(System.PullRequest.PullRequestNumber)
  TRAVIS_REPO_SLUG: $(Build.Repository.Name)
  TRAVIS_PULL_REQUEST_SLUG: $(Build.Repository.Name)
  TRAVIS_PULL_REQUEST_SHA: $(Build.SourceVersion)
  PR_ONLY: 'true'

jobs:

- job: "BranchProtectionForPrivateRepo"
  pool:
    vmImage: 'Ubuntu 16.04'
  condition: and(variables['PRIVATE'], eq(variables['System.PullRequest.TargetBranch'], 'master'))
  steps:
  - script: '>&2 echo "the branch is protected"'
    failOnStderr: true

- job: "Syntax"
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - script: |
      echo TRAVIS: $(TRAVIS)
      echo TRAVIS_BRANCH: $(TRAVIS_BRANCH)
      echo TRAVIS_REPO_SLUG: $(TRAVIS_REPO_SLUG)
      echo TRAVIS_PULL_REQUEST: $(TRAVIS_PULL_REQUEST)
      echo TRAVIS_PULL_REQUEST_SLUG: $(TRAVIS_PULL_REQUEST_SLUG)
      echo TRAVIS_PULL_REQUEST_SHA: $(TRAVIS_PULL_REQUEST_SHA)
      echo PR_ONLY: $(PR_ONLY)
    displayName: "Info"
  - task: Npm@1
    displayName: 'npm install'
    inputs:
      verbose: false
  - script: 'npm test -- test/syntax.js'
    displayName: 'Syntax validation'

- job: "Semantic"
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: Npm@1
    displayName: 'npm install'
    inputs:
      verbose: false
  - script: 'npm run tsc && node scripts/semanticValidation.js'
    displayName: 'Semantic Validation'

- job: "ModelValidation"
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: Npm@1
    displayName: 'npm install'
    inputs:
      verbose: false
  - script: 'npm run tsc && node scripts/modelValidation.js'
    displayName: 'Model Validation'

- job: "Avocado"
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: Npm@1
    displayName: 'npm install'
    inputs:
      verbose: false
  - script: './node_modules/.bin/avocado'
    displayName: 'Avocado'

- job: "BreakingChange"
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - script: 'scripts/install-dotnet.sh'
    displayName: 'Install .Net'
  - task: Npm@1
    displayName: 'npm install'
    inputs:
      verbose: false
  - script: 'npm run tsc && node scripts/breaking-change.js'
    displayName: 'Breaking Changes'

- job: "LintDiff"
  variables:
    NODE_OPTIONS: '--max-old-space-size=8192'
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: Npm@1
    displayName: 'npm install'
    inputs:
      verbose: false
  - script: 'scripts/install-dotnet.sh'
    displayName: 'install .Net'
  - script: 'npm run tsc && node scripts/momentOfTruth.js && node scripts/momentOfTruthPostProcessing.js'
    displayName: 'LintDiff'

- job: "SDK"
  timeoutInMinutes: 120
  strategy:
    matrix:
      ruby:
        AZURE_SDK_REPO: azure-sdk-for-ruby
        AZURE_SDK_PARAMS: ''
      java:
        AZURE_SDK_REPO: azure-sdk-for-java
        AZURE_SDK_PARAMS: ''
      javascript:
        AZURE_SDK_REPO: azure-sdk-for-js
        AZURE_SDK_PARAMS: ''
      node:
        AZURE_SDK_REPO: azure-sdk-for-node
        AZURE_SDK_PARAMS: ''
      python:
        AZURE_SDK_REPO: azure-sdk-for-python
        AZURE_SDK_PARAMS: ''
      go:
        AZURE_SDK_REPO: azure-sdk-for-go
        AZURE_SDK_PARAMS: '-o latest'
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    NODE_OPTIONS: '--max-old-space-size=8192'
  steps:
  - script: echo $(NODE_OPTIONS)
  - script: "scripts/swagger-to-sdk.sh Azure/$(AZURE_SDK_REPO) -v $(AZURE_SDK_PARAMS)"
    displayName: "Swagger to SDK script"

- job: "NetworkValidation"
  condition: and(startsWith(variables['System.PullRequest.TargetBranch'], 'network-'), endsWith(variables['System.PullRequest.TargetBranch'], '-release'))
  continueOnError: true
  pool:
    vmImage: vs2017-win2016
  variables:
    NRP_SWAGGER_VALIDATION_OVERRIDE_PS_BRANCH: 'true'
    NRP_BUILD_TOOLS_SKIP_GENERATE_PS1: 'true'
    NRP_BUILD_TOOLS_OUTPUT_PATH: '$(System.DefaultWorkingDirectory)\Out'
  steps:
  - powershell: |
      & "C:/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.6.1 Tools/sn.exe" -Vr *,31bf3856ad364e35
    displayName: Bypass Strong Name validation
  - task: NodeTool@0
    inputs:
      versionSpec: 10.x
    displayName: Install Node.js
  - script: npm install autorest -g
    displayName: Install autorest
  - script: git clone --depth 1 -- https://dev.azure.com/v-anevse/BuildScripts/_git/BuildScripts ..\BuildScripts
    displayName: Clone build tools
  - powershell: |
      $swgrPath = (Get-Item ".\").FullName
      $outputPath = $env:NRP_BUILD_TOOLS_OUTPUT_PATH
      New-Item -Path $outputPath -ItemType "Directory" -Force | Out-Null
      ..\BuildScripts\Test-SwaggerRelease.ps1 -Component Network -SwaggerRepoPath $swgrPath -OutputFolder $outputPath
    failOnStderr: false
    displayName: Test Swagger updates
  - powershell: |
      Copy-Item "..\BuildScripts\.azure-pipelines\.artifactignore" -Destination "$($env:NRP_BUILD_TOOLS_OUTPUT_PATH)\.artifactignore" -Force -ErrorAction "SilentlyContinue"
    failOnStderr: false
    condition: always()
    displayName: Copy .artifactignore
  - task: PublishPipelineArtifact@0
    condition: always()
    inputs:
      artifactName: SwaggerTestOutput
      targetPath: $(NRP_BUILD_TOOLS_OUTPUT_PATH)
