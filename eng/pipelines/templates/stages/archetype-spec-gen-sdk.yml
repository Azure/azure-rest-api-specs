parameters:
  - name: SpecRepoUrl
    type: string
  - name: SdkRepoUrl
    type: string
  - name: SdkRepoBranch
    type: string
    default: 'main'
  - name: ConfigType
    type: string
    default: ''
    displayName: 'API specification type'
  - name: ConfigPath
    type: string
    default: ''
    displayName: 'Path to API specification file (TypeSpec/OpenAPI)'
  - name: ApiVersion
    type: string
    default: ''
    displayName: 'API version'
  - name: SdkReleaseType
    type: string
    default: ''
    displayName: 'SDK release type'
  - name: CreatePullRequest
    type: boolean
    default: false
  - name: SpecBatchTypes
    type: string
    default: ''

stages:
- stage: Build
  displayName: 'SDK Generation'
  jobs:
  - job:
    timeoutInMinutes: 2400

    variables:
      - template: /eng/pipelines/templates/variables/image.yml
      - name: NodeVersion
        value: '22.13.x'
      - name: PythonVersion
        value: '3.13'
      - name: PipelineArtifactsName
        value: 'packages'
      - name: SpecRepoCommit
        value: $(Build.SourceVersion)

    pool:
      name: $(LINUXPOOL)
      vmImage: $(LINUXVMIMAGE)
      os: linux

    steps:
      - checkout: none

      - pwsh: |
          $tspConfigPathPattern = '^specification\/([^\/]+\/)+tspconfig\.yaml$'
          $readmePathPattern = '^specification\/([^\/]+\/){2,}readme\.md$'
          if (('${{ parameters.ConfigType }}' -eq 'TypeSpec') -and ('${{ parameters.ConfigPath }}' -notmatch $tspConfigPathPattern)) {
            Write-Host "##vso[task.logissue type=error]'ConfigPath' must be a valid 'tspconfig.yaml' file path when 'ConfigType' is set to 'TypeSpec'. For example, 'specification/contosowidgetmanager/Contoso.Management/tspconfig.yaml'"
            Exit 1
          } elseif (('${{ parameters.ConfigType }}' -eq 'OpenAPI') -and ('${{ parameters.ConfigPath }}' -notmatch $readmePathPattern)) {
            Write-Host "##vso[task.logissue type=error]'ConfigPath' must be a valid 'readme.md' file path when 'ConfigType' is set to 'OpenAPI'. For example, 'specification/appplatform/resource-manager/readme.md'"
            Exit 1
          }
          if (('$(Build.Reason)' -ne 'PullRequest') -and ('${{ parameters.SpecBatchTypes }}' -eq '')) {
            if (('${{ parameters.SdkReleaseType }}' -eq 'stable') -and ('${{ parameters.ApiVersion}}' -match 'preview')) {
              Write-Host "##vso[task.logissue type=error]'SDK release type' must be set to 'beta' for the preview API specifications."
              Exit 1
            }
          }
          $urlPattern = '^https://github\.com/(?<organization>[^/]+)/(?<repository>[^/]+)'
          if ('${{ parameters.SpecRepoUrl }}' -match $urlPattern) {
            $specRepoOwner = $Matches['organization']
            Write-Host "##vso[task.setvariable variable=SpecRepoOwner]$specRepoOwner"
            Write-Host "SpecRepoOwner variable set to: $specRepoOwner"

            $specRepoName = $Matches['repository']
            Write-Host "##vso[task.setvariable variable=SpecRepoName]$specRepoName"
            Write-Host "SpecRepoName variable set to: $specRepoName"

            $specRepoDirectory = "$(System.DefaultWorkingDirectory)/$specRepoName"
            Write-Host "##vso[task.setvariable variable=SpecRepoDirectory]$specRepoDirectory"
            Write-Host "SpecRepoDirectory variable set to: $specRepoDirectory"
          }

          if ('${{ parameters.SdkRepoUrl }}' -match $urlPattern) {
            if ('${{ parameters.SpecRepoUrl }}'.EndsWith('-pr') -and (-not '${{ parameters.SdkRepoUrl }}'.EndsWith('-pr'))) {
              Write-Host "##vso[task.logissue type=error]SdkRepoUrl must be a private repository if SpecRepoUrl is a private repository."
              Exit 1
            }

            $sdkRepoOwner = $Matches['organization']
            Write-Host "##vso[task.setvariable variable=SdkRepoOwner]$sdkRepoOwner"
            Write-Host "SdkRepoOwner variable set to: $sdkRepoOwner"

            $sdkRepoName = $Matches['repository']
            Write-Host "##vso[task.setvariable variable=SdkRepoName]$sdkRepoName"
            Write-Host "SdkRepoName variable set to: $sdkRepoName"

            $sdkRepoDirectory = "$(System.DefaultWorkingDirectory)/$sdkRepoName"
            Write-Host "##vso[task.setvariable variable=SdkRepoDirectory]$sdkRepoDirectory"
            Write-Host "SdkRepoDirectory variable set to: $sdkRepoDirectory"
          }

          if ([string]::IsNullOrEmpty($SpecRepoOwner) -or [string]::IsNullOrEmpty($SpecRepoName) -or [string]::IsNullOrEmpty($SdkRepoOwner) -or [string]::IsNullOrEmpty($SdkRepoName)) {
            Write-Host "##vso[task.logissue type=error]One or more required variables is empty or invalid. Ensure that SpecRepoUrl and SdkRepoUrl are set to valid GitHub repository URLs."
            Exit 1
          }

          $checkoutCommitish = '${{ parameters.SdkRepoBranch }}'
          Write-Host "##vso[task.setvariable variable=CheckoutCommitish]$checkoutCommitish"
          Write-Host "Will use commitish for SDK repo checkout: '$checkoutCommitish'"
        displayName: "Create Run Time Variables"

      - ${{ if and(eq(variables['System.TeamProject'], 'internal'), ne(variables['Build.Reason'], 'PullRequest')) }}:
        - pwsh: |
            $sdkRepoBranch = '${{ parameters.SdkRepoBranch }}'
            $sdkRepoUrl = '${{ parameters.SdkRepoUrl }}'
            Write-Host "Validating SDK repo branch: '$SdkRepoBranch'"

            if (($sdkRepoBranch -ne 'main') -and (-not [string]::IsNullOrWhiteSpace($sdkRepoBranch))) {

              # GitHub's limit is around 250 characters
              if ($sdkRepoBranch.Length -gt 250) {
                Write-Host "##vso[task.logissue type=error]The provided SDK branch name exceeds 250 characters."
                Exit 1
              }

              # Validate branch name
              if ($sdkRepoBranch -notmatch '^(?!refs/)(?!/)(?!.*//)(?!.*\.\.)(?!.*\.lock$)(?!@$)(?!.*\.$)(?!.*\/$)(?!.*\\)(?!.*[~^:?*\[\]\s])[\u0020-\u007E]+$') {
                  Write-Host "##vso[task.logissue type=error]The provided SDK branch name '$sdkRepoBranch' is invalid."
                  Exit 1
              }

              # Set repo owner to 'azure-sdk' when customized branch is provided
              $sdkRepoOwner = 'azure-sdk'
              Write-Host "##vso[task.setvariable variable=SdkRepoOwner]$sdkRepoOwner"
              Write-Host "SdkRepoOwner variable set to: $sdkRepoOwner"
              $sdkRepoUrl = "https://github.com/azure-sdk/$(SdkRepoName)"

              # Check if branch exists remotely
              Write-Host "Checking if branch '$SdkRepoBranch' exists in remote repository '$sdkRepoUrl'..."
              $branchExists = git ls-remote --heads $sdkRepoUrl "refs/heads/$SdkRepoBranch"
              $gitExitCode = $LASTEXITCODE

              if ($gitExitCode -ne 0) {
                Write-Host "##vso[task.logissue type=error]Failed to validate branch remotely (git exit code: $gitExitCode)"
                Exit $gitExitCode
              }

              if ([string]::IsNullOrEmpty($branchExists)) {
                Write-Host "Branch '$SdkRepoBranch' does not exist in remote repository"
                $checkoutCommitish = 'main'
              } else {
                Write-Host "Branch '$SdkRepoBranch' exists in remote repository"
                $checkoutCommitish = $SdkRepoBranch
              }
            } else {
              Write-Host "Using commitish as-is: '$SdkRepoBranch' (main branch)"
              $checkoutCommitish = $SdkRepoBranch
            }

            Write-Host "##vso[task.setvariable variable=CheckoutCommitish]$checkoutCommitish"
            Write-Host "Will use commitish for SDK repo checkout: '$checkoutCommitish'"
          displayName: "Validate and update SDK repository commitish"

      - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
        parameters:
          Paths:
            - '/*'
            - '!sdk/**/test-recordings/*'
            - '!sdk/**/recordings/*'
            - '!sdk/**/SessionRecords/*'
            - '!sdk/**/session-records/*'
          Repositories:
            - Name: $(SpecRepoOwner)/$(SpecRepoName)
              Commitish: $(SpecRepoCommit)
              WorkingDirectory: $(SpecRepoDirectory)
            - Name: $(SdkRepoOwner)/$(SdkRepoName)
              Commitish: $(CheckoutCommitish)
              WorkingDirectory: $(SdkRepoDirectory)
          SkipCheckoutNone: true
          ${{ if and(eq(variables['System.TeamProject'], 'internal'), endsWith(variables['Build.Repository.Name'], '-pr')) }}:
            TokenToUseForAuth: $(azuresdk-github-pat)
            PreserveAuthToken: true

      - task: NodeTool@0
        inputs:
          versionSpec: $(NodeVersion)
        displayName: 'Install Node.js'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PythonVersion)

      - script: |
          optional_params=""
          sdk_gen_info="Configurations: "

          if [ "$(Build.Reason)" != "PullRequest" ] && [ "${{ parameters.ConfigType }}" = "TypeSpec" ]; then
            optional_params="$optional_params --tsp-config-relative-path ${{ parameters.ConfigPath }}"
            sdk_gen_info="$sdk_gen_info '${{ parameters.ConfigPath }}',"
          elif [ "$(Build.Reason)" != "PullRequest" ] && [ "${{ parameters.ConfigType }}" = "OpenAPI" ]; then
            optional_params="$optional_params --readme-relative-path ${{ parameters.ConfigPath }}"
            sdk_gen_info="$sdk_gen_info '${{ parameters.ConfigPath }}',"
          fi

          updatedSpecRepoCommit="$(SpecRepoCommit)"
          if [ "$(Build.Reason)" = "PullRequest" ]; then
            optional_params="$optional_params --pr-number $(System.PullRequest.PullRequestNumber)"
            specPrUrl="${{ parameters.SpecRepoUrl }}/pull/$(System.PullRequest.PullRequestNumber)"
            sdk_gen_info="$sdk_gen_info spec PR: $specPrUrl"
            updatedSpecRepoCommit="$(System.PullRequest.SourceCommitId)"
          fi

          if [ "${{ parameters.SpecBatchTypes }}" != "" ]; then
            optional_params="$optional_params --batch-type ${{ parameters.SpecBatchTypes }}"
            sdk_gen_info="$sdk_gen_info SpecBatchTypes: ${{ parameters.SpecBatchTypes }},"
          fi

          if [ "${{ parameters.ApiVersion }}" != "" ]; then
            optional_params="$optional_params --api-version ${{ parameters.ApiVersion }} --sdk-release-type ${{ parameters.SdkReleaseType }}"
            sdk_gen_info="$sdk_gen_info API Version: ${{ parameters.ApiVersion }}, SDK Release Type: ${{ parameters.SdkReleaseType }},"
          fi
          sdk_gen_info="$sdk_gen_info and CommitSHA: '$updatedSpecRepoCommit' in SpecRepo: '${{ parameters.SpecRepoUrl }}'"

          if [ "$(Build.Reason)" = "Manual" ]; then
            sdk_gen_info="$sdk_gen_info Pipeline run: $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
            sdk_gen_info="$sdk_gen_info Refer to https://eng.ms/docs/products/azure-developer-experience/develop/sdk-release/sdk-release-prerequisites to prepare for SDK release."
          fi
          echo "##vso[task.setvariable variable=GeneratedSDKInformation]$sdk_gen_info"
          echo "$sdk_gen_info"

          cd $(SpecRepoDirectory)
          echo "##[group]Run npm ci"
          npm ci
          echo "##[endgroup]"
          node $(SpecRepoDirectory)/eng/tools/spec-gen-sdk-runner/cmd/spec-gen-sdk-runner.js \
            --scp $(SpecRepoDirectory) \
            --sdp $(SdkRepoDirectory) \
            --wf $(System.DefaultWorkingDirectory) \
            --lang $(SdkRepoName) \
            --commit $updatedSpecRepoCommit \
            --spec-repo-url ${{ parameters.SpecRepoUrl }} \
            $optional_params || true # return true always to suppress exit error logging
        displayName: 'Generate SDK'

      - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
        parameters:
          ArtifactName: $(SpecGenSdkArtifactName)
          ArtifactPath: "$(System.DefaultWorkingDirectory)/$(SpecGenSdkArtifactPath)"
          CustomCondition: and(succeededOrFailed(), ne(variables['SpecGenSdkArtifactName'], ''))

      - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
        parameters:
          ArtifactName: $(PipelineArtifactsName)
          ArtifactPath: $(StagedArtifactsFolder)
          CustomCondition: and(succeededOrFailed(), ne(variables['StagedArtifactsFolder'], ''))

      - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.CreatePullRequest, true), ne(variables['Build.Reason'], 'PullRequest')) }}:
        - pwsh: |
            $sdkPrBranchName = "$(PrBranch)-$(Build.BuildId)"

            # use the user provided branch name when SdkRepoOwner is set as 'azure-sdk'
            if ('$(SdkRepoOwner)' -eq 'azure-sdk') {
              $sdkPrBranchName = '${{ parameters.SdkRepoBranch }}'
            }
            Write-Host "Branch name is set to: $sdkPrBranchName"
            Write-Host "##vso[task.setvariable variable=SdkPullRequestSourceBranch]$sdkPrBranchName"
          workingDirectory: $(SdkRepoDirectory)
          displayName: "Create SDK PR branch variable"

        - template: /eng/common/pipelines/templates/steps/git-push-changes.yml
          parameters:
            BaseRepoBranch: $(SdkPullRequestSourceBranch)
            BaseRepoOwner: azure-sdk
            CommitMsg: $(GeneratedSDKInformation)
            TargetRepoOwner: azure
            TargetRepoName: $(SdkRepoName)
            WorkingDirectory: $(SdkRepoDirectory)
            ScriptDirectory: $(SdkRepoDirectory)/eng/common/scripts

        - task: PowerShell@2
          displayName: Create pull request
          condition: and(succeeded(), eq(variables['HasChanges'], 'true'), ne(variables['Build.Reason'], 'PullRequest'), not(endsWith(variables['SdkRepoName'], '-pr')))
          inputs:
            pwsh: true
            workingDirectory: $(SdkRepoDirectory)
            filePath: $(SdkRepoDirectory)/eng/common/scripts/Submit-PullRequest.ps1
            arguments: >
              -RepoOwner "azure"
              -RepoName "$(SdkRepoName)"
              -BaseBranch "main"
              -PROwner "azure-sdk"
              -PRBranch "$(SdkPullRequestSourceBranch)"
              -AuthToken "$(azuresdk-github-pat)"
              -PRTitle "$(PrTitle)-generated-from-$(Build.DefinitionName)-$(Build.BuildId)"
              -PRBody "$(GeneratedSDKInformation)"
              -OpenAsDraft $true

      - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - pwsh: |
            . $(SpecRepoDirectory)/eng/common/scripts/Helpers/ApiView-Helpers.ps1
            Create-API-Review `
              -specGenSDKArtifactPath "$(System.DefaultWorkingDirectory)/$(SpecGenSdkArtifactPath)/$(SpecGenSdkArtifactName).json" `
              -apiviewArtifactName "$(PipelineArtifactsName)" `
              -buildId "$(Build.BuildId)" `
              -commitish "$(System.PullRequest.SourceCommitId)" `
              -repoName "$(SpecRepoOwner)/$(SpecRepoName)" `
              -pullRequestNumber "$(System.PullRequest.PullRequestNumber)" 
          displayName: 'Detect API Change and Create API Review'
          condition: and(succeeded(), eq(variables['HasAPIViewArtifact'], 'true'))

      - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
        parameters:
          ArtifactName: "spec-gen-sdk-logs"
          ArtifactPath: "$(System.DefaultWorkingDirectory)/out/logs"
          CustomCondition: succeededOrFailed()
