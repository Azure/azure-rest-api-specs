parameters:
  - name: RunMode
    type: string
    values:
      - 'all-specs'
      - 'all-typespecs'
      - 'all-openapis'
      - 'sample-typespecs'
    default: 'sample-typespecs'
    displayName: 'Specs to Run'

extends:
  template: /eng/pipelines/templates/stages/1es-redirect.yml
  parameters:
    stages:
    - stage: Build
      displayName: 'SDK Generation'
      jobs:
      - job:
        displayName: 'SDK Generation'

        variables:
          - template: /eng/pipelines/templates/variables/image.yml
          - name: NodeVersion
            value: '22.13.x'
          - name: PythonVersion
            value: '3.13'
          - name: SpecGenSdkVersion
            value: 'latest'
          - name: SdkArtifactName
            value: SDK_Artifact
          - name: SpecRepoUrl
            value: 'https://github.com/$(Build.Repository.Name)'

        pool:
          name: $(LINUXPOOL)
          vmImage: $(LINUXVMIMAGE)
          os: linux

        templateContext:
          outputParentDirectory: $(System.DefaultWorkingDirectory)/out
          outputs:
            - output: pipelineArtifact
              displayName: Publish SDK artifacts to Pipeline Artifacts
              condition: and(ne(variables['ValidationResult'], ''), eq(variables['HasSDKArtifact'], 'true'))
              artifactName: $(sdkArtifactName)
              targetPath: "$(System.DefaultWorkingDirectory)/out/generatedSdkArtifacts"
            - output: pipelineArtifact
              displayName: Publish API View artifacts to Pipeline Artifacts
              condition: and(ne(variables['ValidationResult'], ''), eq(variables['HasApiViewArtifact'], 'true'))
              artifactName: $(ArtifactName)
              targetPath: "$(System.DefaultWorkingDirectory)/out/sdkApiViewArtifacts"
            - output: pipelineArtifact
              displayName: Publish logs to Pipeline Artifacts
              condition: ne(variables['ValidationResult'], '')
              artifactName: "spec-gen-sdk-logs"
              targetPath: "$(System.DefaultWorkingDirectory)/out/logs"

        steps:
          - checkout: none

          - pwsh: |
              $urlPattern = '^https://github\.com/(?<organization>[^/]+)/(?<repository>[^/]+)'
              if ('$(SpecRepoUrl)' -match $urlPattern) {
                $specRepoOwner = $Matches['organization']
                Write-Host "##vso[task.setvariable variable=SpecRepoOwner]$specRepoOwner"
                Write-Host "SpecRepoOwner variable set to: $specRepoOwner"

                $specRepoName = $Matches['repository']
                Write-Host "##vso[task.setvariable variable=SpecRepoName]$specRepoName"
                Write-Host "SpecRepoName variable set to: $specRepoName"

                $specRepoDirectory = "$(System.DefaultWorkingDirectory)/$specRepoName"
                Write-Host "##vso[task.setvariable variable=SpecRepoDirectory]$specRepoDirectory"
                Write-Host "SpecRepoDirectory variable set to: $specRepoDirectory"
              }

              if ('$(SdkRepoUrl)' -match $urlPattern) {
                if ('$(SpecRepoUrl)'.EndsWith('-pr') -and (-not '$(SdkRepoUrl)'.EndsWith('-pr'))) {
                  Write-Host "##vso[task.logissue type=error]SdkRepoUrl must be a private repository if SpecRepoUrl is a private repository."
                  Exit 1
                }

                $sdkRepoOwner = $Matches['organization']
                Write-Host "##vso[task.setvariable variable=SdkRepoOwner]$sdkRepoOwner"
                Write-Host "SdkRepoOwner variable set to: $sdkRepoOwner"

                $sdkRepoName = $Matches['repository']
                Write-Host "##vso[task.setvariable variable=SdkRepoName]$sdkRepoName"
                Write-Host "SdkRepoName variable set to: $sdkRepoName"

                $sdkRepoDirectory = "$(System.DefaultWorkingDirectory)/$sdkRepoName"
                Write-Host "##vso[task.setvariable variable=SdkRepoDirectory]$sdkRepoDirectory"
                Write-Host "SdkRepoDirectory variable set to: $sdkRepoDirectory"
              }

              if ([string]::IsNullOrEmpty($SdkRepoOwner) -or [string]::IsNullOrEmpty($SdkRepoName)) {
                Write-Host "##vso[task.logissue type=error]One or more required variables is empty or invalid. Ensure that SdkRepoUrl are set to valid GitHub repository URLs."
                Exit 1
              }

            displayName: "Create Run Time Variables"

          - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
            parameters:
              Paths:
              - '/*'
              - '!sdk/**/test-recordings/*'
              - '!sdk/**/recordings/*'
              - '!sdk/**/SessionRecords/*'
              - '!sdk/**/session-records/*'
              Repositories:
              - Name: $(SpecRepoOwner)/$(SpecRepoName)
                Commitish: ${{ coalesce(variables['Build.SourceVersion'], 'main') }}
                WorkingDirectory: $(SpecRepoDirectory)
              - Name: $(SdkRepoOwner)/$(SdkRepoName)
                Commitish: 'main'
                WorkingDirectory: $(SdkRepoDirectory)
              SkipCheckoutNone: true

          - script: |
              cd $(SpecRepoDirectory)
              default_commit=$(git rev-parse HEAD)
              echo "##vso[task.setvariable variable=SpecRepoCommit]$default_commit"
              echo "SpecRepoCommit variable set to default commit: $default_commit"
            displayName: 'Set SpecRepoCommit variable'

          - task: NodeTool@0
            inputs:
              versionSpec: $(NodeVersion)
            displayName: 'Install Node.js'

          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(PythonVersion)

          - script: |
              cd $(SpecRepoDirectory)/eng/tools/gen-sdk
              npm ci
            displayName: 'Run npm ci'

          - script: |
              npm install -g @azure-tools/spec-gen-sdk@$(SpecGenSdkVersion)
            displayName: 'Install spec-gen-sdk'

          - script: |
              node $(SpecRepoDirectory)/eng/tools/gen-sdk/cmd/gen-sdk.js \
                --scp $(SpecRepoDirectory) \
                --sdp $(SdkRepoDirectory) \
                --wf $(System.DefaultWorkingDirectory) \
                --lang $(SdkRepoName) \
                --commit $(SpecRepoCommit) \
                --tr $true \
                --rm $(RunMode)
            displayName: 'Run spec-gen-sdk'

          - pwsh: |
              Write-Host "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/out/logs/generation-summary.md"
            displayName: 'Upload generation summary'

