<#
.SYNOPSIS
Tests the azure-sdk-mcp installation and validates artifacts.

.DESCRIPTION
This script tests the azure-sdk-mcp tool installation, verifies the version matches
the pinned version, and validates that all required release artifacts exist.
#>

$ErrorActionPreference = "Stop"
$PSNativeCommandUseErrorActionPreference = $true

# Get the script directory and read pinned version
$pinnedVersionPath = Join-Path $PSScriptRoot "target_version.txt"

if (-not (Test-Path $pinnedVersionPath)) {
    throw "target_version.txt not found at $pinnedVersionPath"
}

$Version = (Get-Content $pinnedVersionPath -Raw).Trim()
$Repository = 'Azure/azure-sdk-tools'

Write-Host "Starting azure-sdk-mcp tests for pinned version $Version"

# Install the tool 
$tempDir = Join-Path ([System.IO.Path]::GetTempPath()) "azsdk-mcp-test-$(Get-Random)"
New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
$mcpScript = Join-Path $PSScriptRoot "azure-sdk-mcp.ps1"

Write-Host "Installing azsdk mcp to test directory: $tempDir"
& $mcpScript -InstallDirectory $tempDir

# Find the executable
$exePath = Get-ChildItem -Path $tempDir -Recurse -Name "azsdk*" -File | Where-Object { $_ -match ".(exe|)$" } | Select-Object -First 1
if (-not $exePath) {
    throw "Could not find azsdk executable in $tempDir"
}
$fullExePath = Join-Path $tempDir $exePath
Write-Host "Found executable at: $fullExePath"

try {
    # Test 1: Check if the azsdk mcp server runs
    Write-Host "`nTest 1: Testing if azsdk mcp server starts and runs..."
    try {
        # Test if it runs by starting the MCP server and checking if it stays alive
        Write-Host "Starting MCP server..."
        $process = Start-Process -FilePath $fullExePath -ArgumentList "start" -PassThru -NoNewWindow
        
        # Wait a few seconds to see if the process stays running
        Start-Sleep -Seconds 3
        
        if ($process.HasExited) {
            throw "MCP server exited immediately with exit code: $($process.ExitCode)"
        }
        
        Write-Host "âœ“ Test 1 PASSED: azsdk mcp server runs successfully"
    } 
    catch {
        Write-Host "âœ— Test 1 FAILED: $($_.Exception.Message)"
        throw
    } 
    finally {
        # Cleanup process if still running
        try {
            $process.Kill()
            $process.WaitForExit(5000)
        } 
        catch {
            Write-Host "Warning: Could not cleanly stop MCP server process"
        }
    }

    # Test 2: Check version matches the pinned version
    Write-Host "`nTest 2: Verifying version matches pinned version..."
    try {        
        # Get version output
        $versionOutput = & $fullExePath --version 2>&1
        Write-Host "Executable version output: $versionOutput"
        
        # Check if version matches
        if ($versionOutput -match $Version) {
            Write-Host "âœ“ Test 2 PASSED: Version matches pinned version ($Version)"
        } 
        else {
            throw "Version mismatch. Expected: $Version, Got: $versionOutput"
        }
    } 
    catch {
        Write-Host "âœ— Test 2 FAILED: $($_.Exception.Message)"
        throw
    }

} finally {
    # Cleanup temp directory
    if (Test-Path $tempDir) {
        Remove-Item -Path $tempDir -Recurse -Force -ErrorAction SilentlyContinue
    }
}

# Test 3: Check release artifacts exist
Write-Host "`nTest 3: Checking release artifacts for tag azsdk_$Version..."

$requiredArtifacts = @(
    'Azure.Sdk.Tools.Cli-standalone-linux-arm64.tar.gz',
    'Azure.Sdk.Tools.Cli-standalone-linux-x64.tar.gz',
    'Azure.Sdk.Tools.Cli-standalone-osx-arm64.zip',
    'Azure.Sdk.Tools.Cli-standalone-osx-x64.zip',
    'Azure.Sdk.Tools.Cli-standalone-win-x64.zip'
)

try {
    $tag = "azsdk_$Version"
    $releasesUrl = "https://api.github.com/repos/$Repository/releases/tags/$tag"
    
    Write-Host "Fetching release information for tag: $tag"
    $release = Invoke-RestMethod -Uri $releasesUrl
    
    Write-Host "Release found: $($release.name)"
    
    # Check binary artifacts
    $foundArtifacts = @()
    $missingArtifacts = @()
    
    foreach ($artifact in $requiredArtifacts) {
        $found = $release.assets | Where-Object { $_.name -eq $artifact }
        if ($found) {
            $foundArtifacts += $artifact
            Write-Host "  âœ“ Found: $artifact"
        } 
        else {
            $missingArtifacts += $artifact
            Write-Host "  âœ— Missing: $artifact"
        }
    }
    
    # Check source code artifacts (these are automatically generated by GitHub)
    $sourceZip = $release.zipball_url
    $sourceTarGz = $release.tarball_url
    
    if ($sourceZip -and $sourceTarGz) {
        Write-Host "  âœ“ Found: Source code (zip)"
        Write-Host "  âœ“ Found: Source code (tar.gz)"
    } 
    else {
        Write-Host "  âœ— Missing: Source code artifacts"
        $missingArtifacts += "Source code artifacts"
    }
    
    if ($missingArtifacts.Count -eq 0) {
        Write-Host "âœ“ Test 3 PASSED: All required artifacts found"
    } 
    else {
        throw "Missing artifacts: $($missingArtifacts -join ', ')"
    }
    
} 
catch {
    Write-Host "âœ— Test 3 FAILED: $($_.Exception.Message)"
    throw
}

Write-Host "`nðŸŽ‰ All tests passed successfully!"
Write-Host "Version $Version is ready for use."
