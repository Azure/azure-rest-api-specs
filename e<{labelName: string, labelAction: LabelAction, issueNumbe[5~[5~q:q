[1mdiff --git a/.github/src/context.js b/.github/src/context.js[m
[1mindex de694c6145..6f7549ae9a 100644[m
[1m--- a/.github/src/context.js[m
[1m+++ b/.github/src/context.js[m
[36m@@ -9,7 +9,7 @@[m [mimport { PER_PAGE_MAX } from "./github.js";[m
  * @param {import('github-script').AsyncFunctionArguments['github']} github[m
  * @param {import('github-script').AsyncFunctionArguments['context']} context[m
  * @param {import('github-script').AsyncFunctionArguments['core']} core[m
[31m- * @returns {Promise<{owner: string, repo: string, head_sha: string, issue_number: number, run_id: number }>}[m
[32m+[m[32m * @returns {Promise<{owner: string, repo: string, head_sha: string, issue_number?: number, run_id?: number, ado_project_url?: string, ado_build_id?: string }>}[m
  */[m
 export async function extractInputs(github, context, core) {[m
   core.info("extractInputs()");[m
[36m@@ -23,7 +23,7 @@[m [mexport async function extractInputs(github, context, core) {[m
   // with debug enabled to replay the previous context.[m
   core.isDebug() && core.debug(`context: ${JSON.stringify(context)}`);[m
 [m
[31m-  /** @type {{ owner: string, repo: string, head_sha: string, issue_number: number, run_id: number }} */[m
[32m+[m[32m  /** @type {{ owner: string, repo: string, head_sha: string, issue_number?: number, run_id?: number, ado_project_url?: string, ado_build_id?: string }} */[m
   let inputs;[m
 [m
   // Add support for more event types as needed[m
[36m@@ -209,6 +209,37 @@[m [mexport async function extractInputs(github, context, core) {[m
       issue_number: issue_number,[m
       run_id: payload.workflow_run.id,[m
     };[m
[32m+[m[32m  } else if (context.eventName === "check_run") {[m
[32m+[m[32m    let checkRun = context.payload.check_run;[m
[32m+[m[32m    if (process.env.CHECK_RUN_ID) {[m
[32m+[m[32m      core.info(`Fetching check run with ID from input: ${process.env.CHECK_RUN_ID}`);[m
[32m+[m[41m  [m
[32m+[m[32m      // fetch the check run with specific ID in case of dispatch run[m
[32m+[m[32m      checkRun = (await github.rest.checks.get({[m
[32m+[m[32m        owner: context.repo.owner,[m
[32m+[m[32m        repo: context.repo.repo,[m
[32m+[m[32m        check_run_id: parseInt(process.env.CHECK_RUN_ID)[m
[32m+[m[32m      })).data;[m
[32m+[m[32m      if (!checkRun) {[m
[32m+[m[32m        throw new Error('No check run data found in the API response');[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Extract the ADO build ID and project URL from the check run details URL[m
[32m+[m[32m    const buildUrlRegex = /^(.*?)(?=\/_build\/).*?[?&]buildId=(\d+)/;[m
[32m+[m[32m    const match = checkRun.details_url.match(buildUrlRegex);[m
[32m+[m[32m    if (!match) {[m
[32m+[m[32m      throw new Error([m
[32m+[m[32m        `Could not extract build ID or project URL from check run details URL: ${checkRun.details_url}`,[m
[32m+[m[32m      );[m
[32m+[m[32m    }[m
[32m+[m[32m    inputs = {[m
[32m+[m[32m      owner: context.payload.repository.owner.login,[m
[32m+[m[32m      repo: context.payload.repository.name,[m
[32m+[m[32m      head_sha: context.payload.check_run.head_sha,[m
[32m+[m[32m      ado_build_id: match[2],[m
[32m+[m[32m      ado_project_url: match[1],[m
[32m+[m[32m    };[m
   } else {[m
     throw new Error([m
       `Context '${context.eventName}:${context.payload.action}' is not yet supported.`,[m
[1mdiff --git a/.github/workflows/src/sdk-breaking-change-labels.js b/.github/workflows/src/sdk-breaking-change-labels.js[m
[1mindex 5f6caadb36..a0e692da00 100644[m
[1m--- a/.github/workflows/src/sdk-breaking-change-labels.js[m
[1m+++ b/.github/workflows/src/sdk-breaking-change-labels.js[m
[36m@@ -2,6 +2,7 @@[m
 import { sdkLabels } from "../../src/sdk-types.js";[m
 import { LabelAction } from "../../src/label.js";[m
 import { stringify } from "querystring";[m
[32m+[m[32mimport { extractInputs } from "../../src/context.js";[m
 [m
 const wfName = 'sdk-breaking-change-labels';[m
 [m
[36m@@ -10,108 +11,88 @@[m [mconst wfName = 'sdk-breaking-change-labels';[m
  * @returns {Promise<{labelName: string, labelAction: LabelAction, issueNumber: number}>}[m
  */[m
 export async function getLabelAndAction({ github, context, core }) {[m
[32m+[m[32m  const inputs = await extractInputs(github, context, core);[m
[32m+[m[32m  const ado_build_id = inputs.ado_build_id || "";[m
[32m+[m[32m  const ado_project_url = inputs.ado_project_url || "";[m
[32m+[m[32m  const head_sha = inputs.head_sha;[m
[32m+[m[32m  return await getLabelAndActionImpl({ado_build_id, ado_project_url, head_sha, core, github});[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @param {Object} params[m
[32m+[m[32m * @param {string} params.ado_build_id[m
[32m+[m[32m * @param {string} params.ado_project_url[m
[32m+[m[32m * @param {string} params.head_sha[m
[32m+[m[32m * @param {(import("@octokit/core").Octokit & import("@octokit/plugin-rest-endpoint-methods/dist-types/types.js").Api & { paginate: import("@octokit/plugin-paginate-rest").PaginateInterface; })} params.github[m
[32m+[m[32m * @param {typeof import("@actions/core")} params.core[m
[32m+[m[32m * @returns[m[41m [m
[32m+[m[32m */[m
[32m+[m[32masync function getLabelAndActionImpl({ado_build_id, ado_project_url, head_sha, core, github }) {[m
   let issue_number = NaN;[m
[31m-  let check_run_id = process.env.CHECK_RUN_ID;[m
   let labelAction;[m
   let labelName = "";[m
[31m-  let checkRun = context.payload.check_run;[m
[31m-  core.info(`context: ${JSON.stringify(context)}`);[m
[31m-  core.info(`github: ${JSON.stringify(github)}`);[m
[31m-  core.info(`core: ${JSON.stringify(core)}`);[m
[31m-  // Determine check run ID to use (from manual input or hardcoded default)[m
[31m-  if (check_run_id) {[m
[31m-    core.info(`Fetching check run with ID from input: ${check_run_id}`);[m
[31m-[m
[31m-    // First fetch the check run with specific ID[m
[31m-    checkRun = (await github.rest.checks.get({[m
[31m-      owner: context.repo.owner,[m
[31m-      repo: context.repo.repo,[m
[31m-      check_run_id: parseInt(check_run_id, 10)[m
[31m-    })).data;[m
[31m-    if (!checkRun) {[m
[31m-      throw new Error('No check run data found in the API response');[m
[31m-    }[m
[31m-  }[m
[31m-  [m
[31m-  core.info(`Check run name: ${checkRun.name}`);[m
[31m-  if (!checkRun.name.includes("(SDK Generation Job)")) {[m
[31m-    core.info(`Ignoring check run as it's not an SDK generation job`);[m
[31m-    return { labelName, labelAction: LabelAction.None, issueNumber: issue_number };[m
[31m-  }[m
 [m
[31m-  // Extract build ID from details_url if available[m
[31m-  if (checkRun.details_url) {[m
[31m-    core.info(`Details URL:, ${checkRun.details_url}`);[m
[31m-[m
[31m-    const buildUrlRegex = /^(.*?)(?=\/_build\/).*?[?&]buildId=(\d+)/;[m
[31m-    const match = checkRun.details_url.match(buildUrlRegex);[m
[31m-    const artifactName = "spec-gen-sdk_azure-sdk-for-js_true";[m
[31m-    if (match) {[m
[31m-      const apiUrl = `${match[1]}/_apis/build/builds/${match[2]}/artifacts/${artifactName}?api-version=7.0`;[m
[31m-      // Call Azure DevOps REST API to list artifacts[m
[31m-      try {[m
[31m-        core.info(`Calling Azure DevOps API to get the artifacts: ${apiUrl}`);[m
[31m-        [m
[31m-        // Use Node.js fetch to call the API[m
[31m-        const response = await fetch(apiUrl, {[m
[31m-          method: 'GET',[m
[31m-          headers: {[m
[31m-            'Content-Type': 'application/json'[m
[31m-          }[m
[31m-        });[m
[31m-[m
[31m-        if (response.ok) {[m
[31m-          const artifacts = await response.json();[m
[31m-          core.info(`Artifacts found: ${stringify(artifacts)}`);[m
[31m-          /*[m
[31m-          core.info(`Artifacts found: ${artifacts.count}`);[m
[31m-          [m
[31m-          // Process artifacts as needed[m
[31m-          let addLabel = false;[m
[31m-          let removeLabel = false;[m
[31m-          let language = "";[m
[31m-          for (const artifact of artifacts.value) {[m
[31m-[m
[31m-            // label artifact name example: 'spec-gen-sdk-azure-sdk-for-js-true'[m
[31m-            if (artifact.name.startsWith("spec-gen-sdk_")) {[m
[31m-              core.info(`Artifact: ${artifact.name}`);[m
[31m-              if(artifact.name.endsWith("true")) {[m
[31m-                addLabel = true;[m
[31m-                language = artifact.name.split("_")[1];[m
[31m-              } else if(artifact.name.endsWith("false")) {[m
[31m-                removeLabel = true;[m
[31m-                language = artifact.name.split("_")[1];[m
[31m-              }[m
[31m-            }[m
[31m-          }[m
[32m+[m[32m  const artifactName = "spec-gen-sdk_fewf";[m
[32m+[m[32m  const apiUrl = `${ado_project_url}/_apis/build/builds/${ado_build_id}/artifacts/${artifactName}?api-version=7.0`;[m
[32m+[m[32m  // Call Azure DevOps REST API to list artifacts[m
[32m+[m[32m  try {[m
[32m+[m[32m    core.info(`Calling Azure DevOps API to get the artifacts: ${apiUrl}`);[m
[32m+[m[41m    [m
[32m+[m[32m    // Use Node.js fetch to call the API[m
[32m+[m[32m    const response = await fetch(apiUrl, {[m
[32m+[m[32m      method: 'GET',[m
[32m+[m[32m      headers: {[m
[32m+[m[32m        'Content-Type': 'application/json'[m
[32m+[m[32m      }[m
[32m+[m[32m    });[m
 [m
[31m-          // Set label action and name based on the artifacts[m
[31m-          if (addLabel) {[m
[31m-            labelAction = LabelAction.Add;[m
[31m-          } else if (removeLabel) {[m
[31m-            labelAction = LabelAction.Remove;[m
[32m+[m[32m    if (response.ok) {[m
[32m+[m[32m      const artifacts = await response.json();[m
[32m+[m[32m      core.info(`Artifacts found: ${stringify(artifacts)}`);[m
[32m+[m[32m      /*[m
[32m+[m[32m      core.info(`Artifacts found: ${artifacts.count}`);[m
[32m+[m[41m      [m
[32m+[m[32m      // Process artifacts as needed[m
[32m+[m[32m      let addLabel = false;[m
[32m+[m[32m      let removeLabel = false;[m
[32m+[m[32m      let language = "";[m
[32m+[m[32m      for (const artifact of artifacts.value) {[m
[32m+[m
[32m+[m[32m        // label artifact name example: 'spec-gen-sdk-azure-sdk-for-js-true'[m
[32m+[m[32m        if (artifact.name.startsWith("spec-gen-sdk_")) {[m
[32m+[m[32m          core.info(`Artifact: ${artifact.name}`);[m
[32m+[m[32m          if(artifact.name.endsWith("true")) {[m
[32m+[m[32m            addLabel = true;[m
[32m+[m[32m            language = artifact.name.split("_")[1];[m
[32m+[m[32m          } else if(artifact.name.endsWith("false")) {[m
[32m+[m[32m            removeLabel = true;[m
[32m+[m[32m            language = artifact.name.split("_")[1];[m
           }[m
[31m-          if (language) {[m
[31m-            labelName = sdkLabels[`${language}`].breakingChange;[m
[31m-          }*/[m
[31m-        } else {[m
[31m-          core.error(`Failed to fetch artifacts: ${response.status}, ${response.statusText}`);[m
[31m-          const errorText = await response.text();[m
[31m-          core.error(`Error details: ${errorText}`);[m
         }[m
[31m-      } catch (apiError) {[m
[31m-        core.error(`Error calling Azure DevOps API: ${apiError}`);[m
       }[m
[32m+[m
[32m+[m[32m      // Set label action and name based on the artifacts[m
[32m+[m[32m      if (addLabel) {[m
[32m+[m[32m        labelAction = LabelAction.Add;[m
[32m+[m[32m      } else if (removeLabel) {[m
[32m+[m[32m        labelAction = LabelAction.Remove;[m
[32m+[m[32m      }[m
[32m+[m[32m      if (language) {[m
[32m+[m[32m        labelName = sdkLabels[`${language}`].breakingChange;[m
[32m+[m[32m      }*/[m
     } else {[m
[31m-      core.error(`Could not extract devops info from details_url: ${checkRun.details_url}`);[m
[32m+[m[32m      core.error(`Failed to fetch artifacts: ${response.status}, ${response.statusText}`);[m
[32m+[m[32m      const errorText = await response.text();[m
[32m+[m[32m      core.error(`Error details: ${errorText}`);[m
     }[m
[31m-  } else {[m
[31m-    core.info('No details_url found in check run');[m
[32m+[m[32m  } catch (apiError) {[m
[32m+[m[32m    core.error(`Error calling Azure DevOps API: ${apiError}`);[m
   }[m
 [m
   // Get the issue number from the check run[m
   if (Number.isNaN(issue_number)) {[m
[31m-    const { issueNumber } = await getIssueNumber({checkRun, core, github});[m
[32m+[m[32m    const { issueNumber } = await getIssueNumber({head_sha, core, github});[m
     issue_number = issueNumber;[m
   }[m
 [m
[36m@@ -126,25 +107,25 @@[m [mexport async function getLabelAndAction({ github, context, core }) {[m
 /**[m
  * Retrieves the PR number associated with a specific commit SHA[m
  * @param {Object} params[m
[31m- * @param {import('github').CheckRun} params.checkRun - The check run object containing head_sha[m
[32m+[m[32m * @param {String} params.head_sha - The head_sha[m
  * @param {typeof import("@actions/core")} params.core - GitHub Actions core for logging[m
  * @param {import('github-script').GitHub} params.github - GitHub API client[m
  * @returns {Promise<{issueNumber: number}>} - The PR number or NaN if not found[m
  */[m
[31m-async function getIssueNumber({checkRun, core, github})[m
[32m+[m[32masync function getIssueNumber({head_sha, core, github})[m
 {[m
   let issueNumber = NaN;[m
 [m
[31m-  if (!checkRun.head_sha) {[m
[32m+[m[32m  if (!head_sha) {[m
     core.info('No head_sha found in check run');[m
     return { issueNumber };[m
   }[m
 [m
[31m-  core.info(`Searching for PRs with commit SHA: ${checkRun.head_sha}`);[m
[32m+[m[32m  core.info(`Searching for PRs with commit SHA: ${head_sha}`);[m
 [m
   try {[m
     const searchResponse = await github.rest.search.issuesAndPullRequests({[m
[31m-      q: `sha:${checkRun.head_sha} type:pr state:open`[m
[32m+[m[32m      q: `sha:${head_sha} type:pr state:open`[m
     });[m
 [m
     const totalCount = searchResponse.data.total_count;[m
[36m@@ -158,13 +139,13 @@[m [masync function getIssueNumber({checkRun, core, github})[m
       core.info(`Found the first matched PR #${issueNumber}: ${firstItem.html_url}`);[m
 [m
       if (itemsCount > 1) {[m
[31m-        core.warning(`Multiple PRs found for commit ${checkRun.head_sha}: ${searchResponse.data.items.map(item => `#${item.html_url}`).join(', ')}`);[m
[32m+[m[32m        core.warning(`Multiple PRs found for commit ${head_sha}: ${searchResponse.data.items.map(item => `#${item.html_url}`).join(', ')}`);[m
       }[m
     } else {[m
[31m-      core.info(`No open PRs found for commit ${checkRun.head_sha}`);[m
[32m+[m[32m      core.info(`No open PRs found for commit ${head_sha}`);[m
     }[m
   } catch (error) {[m
[31m-    core.error(`${wfName}: Error searching for PRs with commit ${checkRun.head_sha}: ${error.message}`);[m
[32m+[m[32m    core.error(`${wfName}: Error searching for PRs with commit ${head_sha}: ${error.message}`);[m
     throw error;[m
   }[m
 [m
