{
  "swagger": "2.0",
  "info": {
    "title": "Azure Machine Learning Workspaces",
    "description": "These APIs allow end users to operate on Azure Machine Learning Workspace resources.",
    "version": "2020-09-01-preview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores": {
      "get": {
        "tags": [
          "Datastore"
        ],
        "summary": "List datastores.",
        "operationId": "Datastores_List",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/PaginationParameter"
          },
          {
            "in": "query",
            "name": "count",
            "description": "Maximum number of results to return.",
            "type": "integer",
            "format": "int32",
            "default": 30
          },
          {
            "in": "query",
            "name": "isDefault",
            "description": "Filter down to the workspace default datastore.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of datastores to return.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "searchText",
            "description": "Text to search for in the datastore names.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Order by property (createdtime | modifiedtime | name).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "orderByAsc",
            "description": "Order by property in ascending order.",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DatastorePropertiesResourcePaginatedResult"
            }
          }
        },
        "x-ms-examples": {
          "List datastores.": {
            "$ref": "./examples/getDatastores.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores/{name}": {
      "delete": {
        "tags": [
          "Datastore"
        ],
        "summary": "Delete datastore.",
        "operationId": "Datastores_Delete",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Datastore name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          }
        },
        "x-ms-examples": {
          "Delete datastore.": {
            "$ref": "./examples/deleteDatastore.json"
          }
        }
      },
      "get": {
        "tags": [
          "Datastore"
        ],
        "summary": "Get datastore.",
        "operationId": "Datastores_Get",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Datastore name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DatastorePropertiesResource"
            }
          }
        },
        "x-ms-examples": {
          "Get datastore.": {
            "$ref": "./examples/getDatastore.json"
          }
        }
      },
      "put": {
        "tags": [
          "Datastore"
        ],
        "summary": "Create or update datastore.",
        "operationId": "Datastores_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Datastore name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Datastore entity to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatastorePropertiesResource"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DatastorePropertiesResource"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DatastorePropertiesResource"
            }
          }
        },
        "x-ms-examples": {
          "Create or update datastore.": {
            "$ref": "./examples/createOrUpdateDatastore.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores/{name}/listSecrets": {
      "post": {
        "tags": [
          "Datastore"
        ],
        "summary": "Get datastore secrets.",
        "operationId": "Datastores_ListSecrets",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Datastore name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DatastoreCredentials"
            }
          }
        },
        "x-ms-examples": {
          "Get datastore secrets.": {
            "$ref": "./examples/listDatastoreSecrets.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models": {
      "get": {
        "tags": [
          "ModelContainer"
        ],
        "summary": "List model containers.",
        "operationId": "ModelContainers_List",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/PaginationParameter"
          },
          {
            "in": "query",
            "name": "count",
            "description": "Maximum number of results to return.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelContainerResourcePaginatedResult"
            }
          }
        },
        "x-ms-examples": {
          "List model containers.": {
            "$ref": "./examples/getModelContainers.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/{name}": {
      "delete": {
        "tags": [
          "ModelContainer"
        ],
        "summary": "Delete model container.",
        "operationId": "ModelContainers_Delete",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Model container name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          }
        },
        "x-ms-examples": {
          "Delete model container.": {
            "$ref": "./examples/deleteModelContainer.json"
          }
        }
      },
      "get": {
        "tags": [
          "ModelContainer"
        ],
        "summary": "Get model container.",
        "operationId": "ModelContainers_Get",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Model container name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelContainerResource"
            }
          }
        },
        "x-ms-examples": {
          "Get model container.": {
            "$ref": "./examples/getModelContainer.json"
          }
        }
      },
      "put": {
        "tags": [
          "ModelContainer"
        ],
        "summary": "Create or update model container.",
        "operationId": "ModelContainers_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Model container name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model container entity to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelContainerResource"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelContainerResource"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelContainerResource"
            }
          }
        },
        "x-ms-examples": {
          "Create or update model container.": {
            "$ref": "./examples/createOrUpdateModelContainer.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/{name}/versions": {
      "get": {
        "tags": [
          "ModelVersion"
        ],
        "summary": "List model versions.",
        "operationId": "ModelVersions_List",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/PaginationParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Model name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "version",
            "description": "Model version.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "Model description.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "count",
            "description": "Maximum number of results to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of initial results to skip.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "type": "string"
          },
          {
            "in": "query",
            "name": "properties",
            "description": "Comma-separated list of property names (and optionally values). Example: prop1,prop2=value2",
            "type": "string"
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Property by which to order the results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "latestVersionOnly",
            "description": "Only return the most recent version of a model.",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelVersionResourcePaginatedResult"
            }
          }
        },
        "x-ms-examples": {
          "List model versions.": {
            "$ref": "./examples/getModelVersions.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/{name}/versions/{version}": {
      "delete": {
        "tags": [
          "ModelVersion"
        ],
        "summary": "Delete model.",
        "operationId": "ModelVersions_Delete",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Model name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "Model version.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          }
        },
        "x-ms-examples": {
          "Delete model version.": {
            "$ref": "./examples/deleteModelVersion.json"
          }
        }
      },
      "get": {
        "tags": [
          "ModelVersion"
        ],
        "summary": "Get model.",
        "operationId": "ModelVersions_Get",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Model name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "Model version.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelVersionResource"
            }
          }
        },
        "x-ms-examples": {
          "Get model version.": {
            "$ref": "./examples/getModelVersion.json"
          }
        }
      },
      "put": {
        "tags": [
          "ModelVersion"
        ],
        "summary": "Create or update model.",
        "operationId": "ModelVersions_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "machineLearningServices.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/APIVersionParameter"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Model name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "Model version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Model entity to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelVersionResource"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "machineLearningServices.json#/definitions/MachineLearningServiceError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelVersionResource"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelVersionResource"
            }
          }
        },
        "x-ms-examples": {
          "Create or update model version.": {
            "$ref": "./examples/createOrUpdateModelVersion.json"
          }
        }
      }
    }
  },
  "definitions": {
    "ContentsType": {
      "enum": [
        "AzureBlob",
        "AzureDataLake",
        "AzureDataLakeGen2",
        "AzureFile",
        "AzureMySql",
        "AzurePostgreSql",
        "AzureSqlDatabase",
        "GlusterFs"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ContentsType",
        "modelAsString": false
      }
    },
    "CredentialsType": {
      "enum": [
        "AccountKey",
        "Certificate",
        "Sas",
        "ServicePrincipal",
        "SqlAdmin"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "CredentialsType",
        "modelAsString": false
      }
    },
    "AccountKeySection": {
      "type": "object",
      "properties": {
        "key": {
          "description": "Storage account key.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "update"
          ],
          "x-ms-secret": true
        }
      }
    },
    "CertificateSection": {
      "required": [
        "clientId",
        "tenantId",
        "thumbprint"
      ],
      "type": "object",
      "properties": {
        "authorityUrl": {
          "description": "Authority URL used for authentication.",
          "type": "string"
        },
        "resourceUri": {
          "description": "Resource the service principal has access to.",
          "type": "string"
        },
        "tenantId": {
          "format": "uuid",
          "description": "ID of the tenant to which the service principal belongs.",
          "type": "string"
        },
        "clientId": {
          "format": "uuid",
          "description": "Service principal client ID.",
          "type": "string"
        },
        "certificate": {
          "description": "Service principal certificate.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "update"
          ],
          "x-ms-secret": true
        },
        "thumbprint": {
          "description": "Thumbprint of the certificate used for authentication.",
          "pattern": "\\w",
          "type": "string"
        }
      }
    },
    "SasSection": {
      "type": "object",
      "properties": {
        "sasToken": {
          "description": "Storage container SAS token.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "update"
          ],
          "x-ms-secret": true
        }
      }
    },
    "ServicePrincipalSection": {
      "required": [
        "clientId",
        "tenantId"
      ],
      "type": "object",
      "properties": {
        "authorityUrl": {
          "description": "Authority URL used for authentication.",
          "type": "string"
        },
        "resourceUri": {
          "description": "Resource the service principal has access to.",
          "type": "string"
        },
        "tenantId": {
          "format": "uuid",
          "description": "ID of the tenant to which the service principal belongs.",
          "type": "string"
        },
        "clientId": {
          "format": "uuid",
          "description": "Service principal client ID.",
          "type": "string"
        },
        "clientSecret": {
          "description": "Service principal secret.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "update"
          ],
          "x-ms-secret": true
        }
      }
    },
    "SqlAdminSection": {
      "required": [
        "userId"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "description": "SQL database user name.",
          "pattern": "\\w",
          "type": "string"
        },
        "password": {
          "description": "SQL database password.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "update"
          ],
          "x-ms-secret": true
        }
      }
    },
    "DatastoreCredentials": {
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Credential type used to authentication with storage.",
          "allOf": [
            {
              "$ref": "#/definitions/CredentialsType"
            }
          ]
        },
        "accountKey": {
          "description": "Storage account key authentication.",
          "allOf": [
            {
              "$ref": "#/definitions/AccountKeySection"
            }
          ]
        },
        "certificate": {
          "description": "Service principal certificate authentication.",
          "allOf": [
            {
              "$ref": "#/definitions/CertificateSection"
            }
          ]
        },
        "sas": {
          "description": "Storage container SAS token authentication.",
          "allOf": [
            {
              "$ref": "#/definitions/SasSection"
            }
          ]
        },
        "servicePrincipal": {
          "description": "Service principal password authentication.",
          "allOf": [
            {
              "$ref": "#/definitions/ServicePrincipalSection"
            }
          ]
        },
        "sqlAdmin": {
          "description": "SQL user/password authentication.",
          "allOf": [
            {
              "$ref": "#/definitions/SqlAdminSection"
            }
          ]
        }
      }
    },
    "AzureDataLakeSection": {
      "required": [
        "credentials",
        "storeName"
      ],
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Azure Data Lake credentials.",
          "allOf": [
            {
              "$ref": "#/definitions/DatastoreCredentials"
            }
          ]
        },
        "storeName": {
          "description": "Azure Data Lake store name.",
          "pattern": "\\w",
          "type": "string"
        }
      }
    },
    "AzureMySqlSection": {
      "required": [
        "credentials",
        "databaseName",
        "endpoint",
        "portNumber",
        "serverName"
      ],
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Azure SQL database credentials.",
          "allOf": [
            {
              "$ref": "#/definitions/DatastoreCredentials"
            }
          ]
        },
        "databaseName": {
          "description": "Azure SQL database name.",
          "pattern": "\\w",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "endpoint": {
          "description": "Azure cloud endpoint for the database.",
          "pattern": "\\w",
          "type": "string",
          "example": "database.windows.net",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "portNumber": {
          "format": "int32",
          "description": "Azure SQL server port.",
          "type": "integer",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "serverName": {
          "description": "Azure SQL server name.",
          "pattern": "\\w",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        }
      }
    },
    "AzurePostgreSqlSection": {
      "required": [
        "credentials",
        "databaseName",
        "endpoint",
        "portNumber",
        "serverName"
      ],
      "type": "object",
      "properties": {
        "enableSSL": {
          "description": "Whether the Azure PostgreSQL server requires SSL.",
          "type": "boolean",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "credentials": {
          "description": "Azure SQL database credentials.",
          "allOf": [
            {
              "$ref": "#/definitions/DatastoreCredentials"
            }
          ]
        },
        "databaseName": {
          "description": "Azure SQL database name.",
          "pattern": "\\w",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "endpoint": {
          "description": "Azure cloud endpoint for the database.",
          "pattern": "\\w",
          "type": "string",
          "example": "database.windows.net",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "portNumber": {
          "format": "int32",
          "description": "Azure SQL server port.",
          "type": "integer",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "serverName": {
          "description": "Azure SQL server name.",
          "pattern": "\\w",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        }
      }
    },
    "AzureSqlDatabaseSection": {
      "required": [
        "credentials",
        "databaseName",
        "endpoint",
        "portNumber",
        "serverName"
      ],
      "type": "object",
      "properties": {
        "credentials": {
          "description": "Azure SQL database credentials.",
          "allOf": [
            {
              "$ref": "#/definitions/DatastoreCredentials"
            }
          ]
        },
        "databaseName": {
          "description": "Azure SQL database name.",
          "pattern": "\\w",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "endpoint": {
          "description": "Azure cloud endpoint for the database.",
          "pattern": "\\w",
          "type": "string",
          "example": "database.windows.net",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "portNumber": {
          "format": "int32",
          "description": "Azure SQL server port.",
          "type": "integer",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "serverName": {
          "description": "Azure SQL server name.",
          "pattern": "\\w",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        }
      }
    },
    "AzureStorageSection": {
      "required": [
        "accountName",
        "containerName",
        "credentials",
        "endpoint",
        "protocol"
      ],
      "type": "object",
      "properties": {
        "accountName": {
          "description": "Storage account name.",
          "pattern": "\\w",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "blobCacheTimeout": {
          "format": "int32",
          "description": "Blob storage cache timeout.",
          "type": "integer",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "containerName": {
          "description": "Storage account container name.",
          "pattern": "\\w",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "credentials": {
          "description": "Storage account credentials.",
          "allOf": [
            {
              "$ref": "#/definitions/DatastoreCredentials"
            }
          ]
        },
        "endpoint": {
          "description": "Azure cloud endpoint for the storage account.",
          "pattern": "\\w",
          "type": "string",
          "example": "core.windows.net",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "protocol": {
          "description": "Protocol used to communicate with the storage account.",
          "pattern": "\\w",
          "type": "string",
          "example": "https",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        }
      }
    },
    "GlusterFsSection": {
      "required": [
        "serverAddress",
        "volumeName"
      ],
      "type": "object",
      "properties": {
        "serverAddress": {
          "description": "GlusterFS server address (can be the IP address or server name).",
          "pattern": "\\w",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "volumeName": {
          "description": "GlusterFS volume name.",
          "pattern": "\\w",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        }
      }
    },
    "DatastoreContents": {
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Storage type backing the datastore.",
          "allOf": [
            {
              "$ref": "#/definitions/ContentsType"
            }
          ]
        },
        "azureDataLake": {
          "description": "Azure Data Lake (Gen1/2) storage information.",
          "allOf": [
            {
              "$ref": "#/definitions/AzureDataLakeSection"
            }
          ]
        },
        "azureMySql": {
          "description": "Azure Database for MySQL information.",
          "allOf": [
            {
              "$ref": "#/definitions/AzureMySqlSection"
            }
          ]
        },
        "azurePostgreSql": {
          "description": "Azure Database for PostgreSQL information.",
          "allOf": [
            {
              "$ref": "#/definitions/AzurePostgreSqlSection"
            }
          ]
        },
        "azureSqlDatabase": {
          "description": "Azure SQL Database information.",
          "allOf": [
            {
              "$ref": "#/definitions/AzureSqlDatabaseSection"
            }
          ]
        },
        "azureStorage": {
          "description": "Azure storage account (blobs, files) information.",
          "allOf": [
            {
              "$ref": "#/definitions/AzureStorageSection"
            }
          ]
        },
        "glusterFs": {
          "description": "GlusterFS volume information.",
          "allOf": [
            {
              "$ref": "#/definitions/GlusterFsSection"
            }
          ]
        }
      }
    },
    "OriginType": {
      "enum": [
        "Synapse"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "OriginType",
        "modelAsString": false
      }
    },
    "LinkedInfo": {
      "type": "object",
      "properties": {
        "linkedId": {
          "description": "Linked service ID.",
          "type": "string"
        },
        "linkedResourceName": {
          "description": "Linked service resource name.",
          "type": "string"
        },
        "origin": {
          "description": "Type of the linked service.",
          "allOf": [
            {
              "$ref": "#/definitions/OriginType"
            }
          ]
        }
      }
    },
    "DatastoreProperties": {
      "required": [
        "contents"
      ],
      "type": "object",
      "properties": {
        "contents": {
          "description": "Reference to the datastore storage contents.",
          "allOf": [
            {
              "$ref": "#/definitions/DatastoreContents"
            }
          ]
        },
        "description": {
          "description": "Datastore description.",
          "type": "string"
        },
        "hasBeenValidated": {
          "description": "Whether the service has validated access to the datastore with the provided credentials.",
          "type": "boolean",
          "readOnly": true
        },
        "isDefault": {
          "description": "Whether this datastore is the default for the workspace.",
          "type": "boolean"
        },
        "linkedInfo": {
          "description": "Information about the datastore origin, if linked.",
          "allOf": [
            {
              "$ref": "#/definitions/LinkedInfo"
            }
          ]
        },
        "tags": {
          "description": "Tags (key-value metadata).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DatastorePropertiesResource": {
      "description": "Azure Resource Manager resource Envelope",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "description": "Additional attributes of the entity.",
          "allOf": [
            {
              "$ref": "#/definitions/DatastoreProperties"
            }
          ]
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData"
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "DatastorePropertiesResourcePaginatedResult": {
      "type": "object",
      "properties": {
        "value": {
          "description": "A page of resources returned from the list operation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatastorePropertiesResource"
          }
        },
        "nextLink": {
          "description": "URI of the next page of results.",
          "type": "string"
        }
      }
    },
    "AssetPath": {
      "description": "Details of an AssetUri.",
      "type": "object",
      "properties": {
        "path": {
          "description": "The path of file/directory.",
          "type": "string"
        },
        "isDirectory": {
          "description": "Whether the path defines a directory or a single file.",
          "type": "boolean"
        }
      }
    },
    "ModelVersion": {
      "description": "Details of an ModelDto",
      "type": "object",
      "properties": {
        "stage": {
          "description": "Model asset stage.",
          "type": "string"
        },
        "description": {
          "description": "The asset description text.",
          "type": "string"
        },
        "datastoreId": {
          "description": "The asset datastoreId",
          "type": "string"
        },
        "tags": {
          "description": "The asset tag dictionary.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The asset property dictionary.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "assetPaths": {
          "description": "Details of asset paths in the datastore.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetPath"
          }
        },
        "linkedResourceIds": {
          "description": "Associated ARM resources. Key is the link type, value is a list of ARM IDs.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ModelVersionResource": {
      "description": "Azure Resource Manager resource Envelope",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "description": "Additional attributes of the entity.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelVersion"
            }
          ]
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData"
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "ModelContainer": {
      "type": "object",
      "properties": {
        "description": {
          "description": "The asset container description text.",
          "type": "string"
        },
        "tags": {
          "description": "The asset tag dictionary. Tags can be added, removed, and updated.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "latestVersions": {
          "description": "Latest Versions for all assets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelVersionResource"
          }
        }
      }
    },
    "ModelContainerResource": {
      "description": "Azure Resource Manager resource Envelope",
      "required": [
        "properties"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "description": "Additional attributes of the entity.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelContainer"
            }
          ]
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData"
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "ModelContainerResourcePaginatedResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "description": "A page of resources returned from the list operation.",
          "items": {
            "$ref": "#/definitions/ModelContainerResource"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "URI of the next page of results."
        }
      }
    },
    "ModelVersionResourcePaginatedResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "description": "A page of resources returned from the list operation.",
          "items": {
            "$ref": "#/definitions/ModelVersionResource"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "URI of the next page of results."
        }
      }
    }
  }
}
