{
  "swagger": "2.0",
  "info": {
    "title": "Azure Machine Learning Workspaces",
    "version": "2021-03-01-preview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/services": {
      "get": {
        "tags": [
          "MachineLearningServices"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "operationId": "MachineLearningServices_ListByWorkspace",
        "description": "Gets services in specified workspace.",
        "x-ms-examples": {
          "Get Services": {
            "$ref": "./examples/MachineLearningService/listByWorkspace.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/PaginationParameter"
          },
          {
            "$ref": "#/parameters/ModelIdParameter"
          },
          {
            "$ref": "#/parameters/ModelNameParameter"
          },
          {
            "$ref": "#/parameters/WebServiceTagParameter"
          },
          {
            "$ref": "#/parameters/WebServiceTagsParameter"
          },
          {
            "$ref": "#/parameters/WebServicePropertiesParameter"
          },
          {
            "$ref": "#/parameters/WebServiceRunIdParameter"
          },
          {
            "$ref": "#/parameters/WebServiceExpandParameter"
          },
          {
            "$ref": "#/parameters/WebServiceOrderByParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response includes a paginated array of Machine Learning services and a URI to the next set of results, if any. For the more information the limits of the number of items in a resource group, see https://azure.microsoft.com/en-us/documentation/articles/azure-subscription-service-limits/.",
            "schema": {
              "$ref": "#/definitions/PaginatedServiceList"
            }
          },
          "default": {
            "description": "Error response describing why the request failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/services/{serviceName}": {
      "get": {
        "tags": [
          "MachineLearningServices"
        ],
        "operationId": "MachineLearningServices_Get",
        "description": "Get a Service by name.",
        "x-ms-examples": {
          "Get Service": {
            "$ref": "./examples/MachineLearningService/get.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/WebServiceNameParameter"
          },
          {
            "in": "query",
            "name": "expand",
            "description": "Set to True to include Model details.",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceResource"
            }
          },
          "default": {
            "description": "Error response describing why the request failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MachineLearningServices"
        ],
        "operationId": "MachineLearningServices_Delete",
        "description": "Delete a specific Service..",
        "x-ms-examples": {
          "Delete Service": {
            "$ref": "./examples/MachineLearningService/delete.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/WebServiceNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The resource exists and was deleted successfully."
          },
          "204": {
            "description": "The resource does not exist and the request was well formed."
          },
          "default": {
            "description": "Error response describing why the request failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "MachineLearningServices"
        ],
        "description": "Creates or updates service. This call will update a service if it exists. This is a nonrecoverable operation. If your intent is to create a new service, do a GET first to verify that it does not exist yet.",
        "operationId": "MachineLearningServices_CreateOrUpdate",
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Create Or Update service": {
            "$ref": "./examples/MachineLearningService/createOrUpdate.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "machineLearningServices.json#/parameters/WorkspaceNameParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/WebServiceNameParameter"
          },
          {
            "in": "body",
            "name": "properties",
            "description": "The payload that is used to create or update the Service.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service creation or update initiated.",
            "schema": {
              "$ref": "#/definitions/ServiceResource"
            }
          },
          "201": {
            "description": "Service creation or update initiated.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "URI to poll for asynchronous operation status.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "ModelIdParameter": {
      "in": "query",
      "name": "modelId",
      "type": "string",
      "description": "The Model Id.",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "ModelNameParameter": {
      "in": "query",
      "name": "modelName",
      "type": "string",
      "description": "The Model name.",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "WebServiceNameParameter": {
      "name": "serviceName",
      "description": "Name of the Azure Machine Learning service.",
      "in": "path",
      "type": "string",
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "WebServiceTagParameter": {
      "in": "query",
      "name": "tag",
      "type": "string",
      "description": "The object tag.",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "WebServiceCountParameter": {
      "in": "query",
      "name": "count",
      "type": "integer",
      "format": "int32",
      "description": "The number of items to retrieve in a page.",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "WebServiceTagsParameter": {
      "in": "query",
      "name": "tags",
      "type": "string",
      "description": "A set of tags with which to filter the returned services. It is a comma separated string of tags key or tags key=value Example: tagKey1,tagKey2,tagKey3=value3 .",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "WebServicePropertiesParameter": {
      "in": "query",
      "name": "properties",
      "type": "string",
      "description": "A set of properties with which to filter the returned services. It is a comma separated string of properties key and/or properties key=value Example: propKey1,propKey2,propKey3=value3 .",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "WebServiceRunIdParameter": {
      "in": "query",
      "name": "runId",
      "type": "string",
      "description": "runId for model associated with service.",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "WebServiceExpandParameter": {
      "in": "query",
      "name": "expand",
      "type": "boolean",
      "description": "Set to True to include Model details.",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "WebServiceOrderByParameter": {
      "in": "query",
      "name": "orderby",
      "type": "string",
      "description": "The option to order the response.",
      "required": false,
      "default": "UpdatedAtDesc",
      "enum": [
        "CreatedAtDesc",
        "CreatedAtAsc",
        "UpdatedAtDesc",
        "UpdatedAtAsc"
      ],
      "x-ms-enum": {
        "name": "OrderString",
        "modelAsString": true
      },
      "x-ms-parameter-location": "method"
    }
  },
  "definitions": {
    "ServiceResource": {
      "type": "object",
      "description": "Machine Learning service object wrapped into ARM resource envelope.",
      "properties": {
        "identity": {
          "$ref": "machineLearningServices.json#/definitions/Identity",
          "description": "The identity of the resource."
        },
        "location": {
          "description": "Specifies the location of the resource.",
          "type": "string"
        },
        "tags": {
          "description": "Contains resource tags defined as key/value pairs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sku": {
          "$ref": "machineLearningServices.json#/definitions/Sku",
          "description": "The sku of the workspace."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData"
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "properties": {
              "description": "Service properties",
              "$ref": "#/definitions/ServiceResponseBase"
            }
          }
        }
      ]
    },
    "ServiceResponseBase": {
      "description": "The base service response. The correct inherited response based on computeType will be returned (ex. ACIServiceResponse)",
      "required": [
        "computeType"
      ],
      "type": "object",
      "properties": {
        "description": {
          "description": "The service description.",
          "type": "string"
        },
        "kvTags": {
          "description": "The service tag dictionary. Tags are mutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The service property dictionary. Properties are immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "state": {
          "description": "The current state of the service.",
          "enum": [
            "Transitioning",
            "Healthy",
            "Unhealthy",
            "Failed",
            "Unschedulable"
          ],
          "type": "string",
          "example": "Healthy",
          "x-ms-enum": {
            "name": "WebServiceState",
            "modelAsString": true
          },
          "readOnly": true
        },
        "error": {
          "description": "The error details.",
          "allOf": [
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          ],
          "readOnly": true
        },
        "computeType": {
          "description": "The compute environment type for the service.",
          "enum": [
            "ACI",
            "AKS"
          ],
          "type": "string",
          "example": "AKS",
          "x-ms-enum": {
            "name": "ComputeEnvironmentType",
            "modelAsString": true
          }
        },
        "deploymentType": {
          "description": "The deployment type for the service.",
          "enum": [
            "GRPCRealtimeEndpoint",
            "HttpRealtimeEndpoint",
            "Batch"
          ],
          "type": "string",
          "example": "HttpRealtimeEndpoint",
          "x-ms-enum": {
            "name": "DeploymentType",
            "modelAsString": true
          }
        }
      },
      "discriminator": "computeType"
    },
    "PaginatedServiceList": {
      "type": "object",
      "description": "Paginated list of Machine Learning service objects wrapped in ARM resource envelope.",
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "description": "An array of Machine Learning compute objects wrapped in ARM resource envelope.",
          "items": {
            "$ref": "#/definitions/ServiceResource"
          }
        },
        "nextLink": {
          "readOnly": true,
          "type": "string",
          "description": "A continuation link (absolute URI) to the next page of results in the list."
        }
      }
    },
    "ACIServiceResponse": {
      "description": "The response for an ACI service.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "containerResourceRequirements": {
              "description": "The container resource requirements.",
              "$ref": "machineLearningServices.json#/definitions/ContainerResourceRequirements"
            },
            "scoringUri": {
              "description": "The Uri for sending scoring requests.",
              "type": "string",
              "readOnly": true
            },
            "location": {
              "description": "The name of the Azure location/region.",
              "type": "string"
            },
            "authEnabled": {
              "description": "Whether or not authentication is enabled on the service.",
              "type": "boolean"
            },
            "sslEnabled": {
              "description": "Whether or not SSL is enabled.",
              "type": "boolean"
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "type": "boolean"
            },
            "dataCollection": {
              "description": "Details of the data collection options specified.",
              "allOf": [
                {
                  "$ref": "#/definitions/ModelDataCollection"
                }
              ]
            },
            "sslCertificate": {
              "description": "The public SSL certificate in PEM format to use if SSL is enabled.",
              "type": "string"
            },
            "sslKey": {
              "description": "The public SSL key in PEM format for the certificate.",
              "type": "string"
            },
            "cname": {
              "description": "The CName for the service.",
              "type": "string"
            },
            "publicIp": {
              "description": "The public IP address for the service.",
              "type": "string"
            },
            "publicFqdn": {
              "description": "The public Fqdn for the service.",
              "type": "string"
            },
            "swaggerUri": {
              "description": "The Uri for sending swagger requests.",
              "type": "string",
              "readOnly": true
            },
            "modelConfigMap": {
              "description": "Details on the models and configurations.",
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "readOnly": true
            },
            "models": {
              "description": "The list of models.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Model"
              }
            },
            "environmentImageRequest": {
              "description": "The Environment, models and assets used for inferencing.",
              "allOf": [
                {
                  "$ref": "#/definitions/EnvironmentImageResponse"
                }
              ]
            },
            "vnetConfiguration": {
              "description": "The virtual network configuration.",
              "allOf": [
                {
                  "$ref": "#/definitions/VnetConfiguration"
                }
              ]
            },
            "encryptionProperties": {
              "description": "The encryption properties.",
              "allOf": [
                {
                  "$ref": "#/definitions/EncryptionProperties"
                }
              ]
            }
          }
        }
      ],
      "x-ms-discriminator-value": "ACI"
    },
    "ModelDataCollection": {
      "description": "The Model data collection properties.",
      "type": "object",
      "properties": {
        "eventHubEnabled": {
          "description": "Option for enabling/disabling Event Hub.",
          "type": "boolean"
        },
        "storageEnabled": {
          "description": "Option for enabling/disabling storage.",
          "type": "boolean"
        }
      }
    },
    "VnetConfiguration": {
      "type": "object",
      "properties": {
        "vnetName": {
          "description": "The name of the virtual network.",
          "type": "string"
        },
        "subnetName": {
          "description": "The name of the virtual network subnet.",
          "type": "string"
        }
      }
    },
    "EncryptionProperties": {
      "type": "object",
      "properties": {
        "vaultBaseUrl": {
          "description": "vault base Url",
          "type": "string"
        },
        "keyName": {
          "description": "Encryption Key name",
          "type": "string"
        },
        "keyVersion": {
          "description": "Encryption Key Version",
          "type": "string"
        }
      },
      "required": [
        "vaultBaseUrl",
        "keyName",
        "keyVersion"
      ]
    },
    "Model": {
      "description": "An Azure Machine Learning Model.",
      "required": [
        "mimeType",
        "name",
        "url"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The Model Id.",
          "type": "string",
          "example": "sklearn_mnist:1"
        },
        "name": {
          "description": "The Model name.",
          "type": "string",
          "example": "sklearn_mnist"
        },
        "framework": {
          "description": "The Model framework.",
          "type": "string"
        },
        "frameworkVersion": {
          "description": "The Model framework version.",
          "type": "string"
        },
        "version": {
          "format": "int64",
          "description": "The Model version assigned by Model Management Service.",
          "type": "integer",
          "example": 1
        },
        "datasets": {
          "description": "The list of datasets associated with the model.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetReference"
          }
        },
        "url": {
          "description": "The URL of the Model. Usually a SAS URL.",
          "type": "string"
        },
        "mimeType": {
          "description": "The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml",
          "type": "string"
        },
        "description": {
          "description": "The Model description text.",
          "type": "string",
          "example": "A mnist model, first version."
        },
        "createdTime": {
          "format": "date-time",
          "description": "The Model creation time (UTC).",
          "type": "string"
        },
        "modifiedTime": {
          "format": "date-time",
          "description": "The Model last modified time (UTC).",
          "type": "string"
        },
        "unpack": {
          "description": "Indicates whether we need to unpack the Model during docker Image creation.",
          "type": "boolean"
        },
        "parentModelId": {
          "description": "The Parent Model Id.",
          "type": "string",
          "example": "sklearn_mnist_root:1"
        },
        "runId": {
          "description": "The RunId that created this model.",
          "type": "string"
        },
        "experimentName": {
          "description": "The name of the experiment where this model was created.",
          "type": "string"
        },
        "kvTags": {
          "description": "The Model tag dictionary. Items are mutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The Model property dictionary. Properties are immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "derivedModelIds": {
          "description": "Models derived from this model",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sampleInputData": {
          "description": "Sample Input Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}",
          "type": "string"
        },
        "sampleOutputData": {
          "description": "Sample Output Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}",
          "type": "string"
        },
        "resourceRequirements": {
          "description": "Resource requirements for the model",
          "$ref": "machineLearningServices.json#/definitions/ContainerResourceRequirements"
        }
      }
    },
    "EnvironmentImageRequest": {
      "description": "Request to create a Docker image based on Environment.",
      "type": "object",
      "properties": {
        "driverProgram": {
          "description": "The name of the driver file.",
          "type": "string"
        },
        "assets": {
          "description": "The list of assets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageAsset"
          }
        },
        "modelIds": {
          "description": "The list of model Ids.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "models": {
          "description": "The list of models.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          }
        },
        "environment": {
          "description": "The details of the AZURE ML environment.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelEnvironmentDefinition"
            }
          ]
        },
        "environmentReference": {
          "description": "The unique identifying details of the AZURE ML environment.",
          "allOf": [
            {
              "$ref": "#/definitions/EnvironmentReference"
            }
          ]
        }
      }
    },
    "EnvironmentImageResponse": {
      "description": "Request to create a Docker image based on Environment.",
      "type": "object",
      "properties": {
        "driverProgram": {
          "description": "The name of the driver file.",
          "type": "string"
        },
        "assets": {
          "description": "The list of assets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageAsset"
          }
        },
        "modelIds": {
          "description": "The list of model Ids.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "models": {
          "description": "The list of models.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          }
        },
        "environment": {
          "description": "The details of the AZURE ML environment.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelEnvironmentDefinitionResponse"
            }
          ]
        },
        "environmentReference": {
          "description": "The unique identifying details of the AZURE ML environment.",
          "allOf": [
            {
              "$ref": "#/definitions/EnvironmentReference"
            }
          ]
        }
      }
    },
    "ImageAsset": {
      "description": "An Image asset.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Asset Id.",
          "type": "string"
        },
        "mimeType": {
          "description": "The mime type.",
          "type": "string"
        },
        "url": {
          "description": "The Url of the Asset.",
          "type": "string"
        },
        "unpack": {
          "description": "Whether the Asset is unpacked.",
          "type": "boolean"
        }
      }
    },
    "ModelEnvironmentDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the environment.",
          "type": "string",
          "example": "mydevenvironment"
        },
        "version": {
          "description": "The environment version.",
          "type": "string",
          "example": "1"
        },
        "python": {
          "description": "Settings for a Python environment.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelPythonSection"
            }
          ]
        },
        "environmentVariables": {
          "description": "Definition of environment variables to be defined in the environment.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "docker": {
          "description": "The definition of a Docker container.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelDockerSection"
            }
          ]
        },
        "spark": {
          "description": "The configuration for a Spark environment.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelSparkSection"
            }
          ]
        },
        "r": {
          "description": "Settings for a R environment.",
          "allOf": [
            {
              "$ref": "#/definitions/RSection"
            }
          ]
        },
        "inferencingStackVersion": {
          "description": "The inferencing stack version added to the image. To avoid adding an inferencing stack, do not set this value. Valid values: \"latest\".",
          "type": "string",
          "example": "latest"
        }
      }
    },
    "ModelEnvironmentDefinitionResponse": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the environment.",
          "type": "string",
          "example": "mydevenvironment"
        },
        "version": {
          "description": "The environment version.",
          "type": "string",
          "example": "1"
        },
        "python": {
          "description": "Settings for a Python environment.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelPythonSection"
            }
          ]
        },
        "environmentVariables": {
          "description": "Definition of environment variables to be defined in the environment.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "docker": {
          "description": "The definition of a Docker container.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelDockerSectionResponse"
            }
          ]
        },
        "spark": {
          "description": "The configuration for a Spark environment.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelSparkSection"
            }
          ]
        },
        "r": {
          "description": "Settings for a R environment.",
          "allOf": [
            {
              "$ref": "#/definitions/RSectionResponse"
            }
          ]
        },
        "inferencingStackVersion": {
          "description": "The inferencing stack version added to the image. To avoid adding an inferencing stack, do not set this value. Valid values: \"latest\".",
          "type": "string",
          "example": "latest"
        }
      }
    },
    "EnvironmentReference": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the environment.",
          "type": "string"
        },
        "version": {
          "description": "Version of the environment.",
          "type": "string"
        }
      }
    },
    "ModelPythonSection": {
      "type": "object",
      "properties": {
        "interpreterPath": {
          "description": "The python interpreter path to use if an environment build is not required. The path specified gets used to call the user script.",
          "type": "string"
        },
        "userManagedDependencies": {
          "description": "True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.",
          "type": "boolean"
        },
        "condaDependencies": {
          "description": "A JObject containing Conda dependencies.",
          "type": "object"
        },
        "baseCondaEnvironment": {
          "type": "string"
        }
      }
    },
    "ContainerRegistry": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "x-ms-secret": true
        },
        "password": {
          "type": "string",
          "x-ms-secret": true
        }
      }
    },
    "ContainerRegistryResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        }
      }
    },
    "ModelDockerSection": {
      "type": "object",
      "properties": {
        "baseImage": {
          "description": "Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.",
          "type": "string",
          "example": "ubuntu:latest"
        },
        "baseDockerfile": {
          "description": "Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.",
          "type": "string",
          "example": "FROM ubuntu:latest\r\nRUN echo \"Hello world!\""
        },
        "baseImageRegistry": {
          "description": "Image registry that contains the base image.",
          "allOf": [
            {
              "$ref": "#/definitions/ContainerRegistry"
            }
          ]
        }
      }
    },
    "ModelDockerSectionResponse": {
      "type": "object",
      "properties": {
        "baseImage": {
          "description": "Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.",
          "type": "string",
          "example": "ubuntu:latest"
        },
        "baseDockerfile": {
          "description": "Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.",
          "type": "string",
          "example": "FROM ubuntu:latest\r\nRUN echo \"Hello world!\""
        },
        "baseImageRegistry": {
          "description": "Image registry that contains the base image.",
          "allOf": [
            {
              "$ref": "#/definitions/ContainerRegistryResponse"
            }
          ]
        }
      }
    },
    "SparkMavenPackage": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "artifact": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ModelSparkSection": {
      "type": "object",
      "properties": {
        "repositories": {
          "description": "The list of spark repositories.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "packages": {
          "description": "The Spark packages to use.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SparkMavenPackage"
          }
        },
        "precachePackages": {
          "description": "Whether to precache the packages.",
          "type": "boolean"
        }
      }
    },
    "RCranPackage": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The package name.",
          "type": "string"
        },
        "repository": {
          "description": "The repository name.",
          "type": "string"
        }
      }
    },
    "RGitHubPackage": {
      "type": "object",
      "properties": {
        "repository": {
          "description": "Repository address in the format username/repo[/subdir][@ref|#pull].",
          "type": "string"
        },
        "authToken": {
          "description": "Personal access token to install from a private repo",
          "type": "string",
          "x-ms-secret": true
        }
      }
    },
    "RGitHubPackageResponse": {
      "type": "object",
      "properties": {
        "repository": {
          "description": "Repository address in the format username/repo[/subdir][@ref|#pull].",
          "type": "string"
        }
      }
    },
    "RSection": {
      "type": "object",
      "properties": {
        "rVersion": {
          "description": "The version of R to be installed",
          "type": "string"
        },
        "userManaged": {
          "description": "Indicates whether the environment is managed by user or by AzureML.",
          "type": "boolean"
        },
        "rscriptPath": {
          "description": "The Rscript path to use if an environment build is not required.\r\nThe path specified gets used to call the user script.",
          "type": "string"
        },
        "snapshotDate": {
          "description": "Date of MRAN snapshot to use in YYYY-MM-DD format, e.g. \"2019-04-17\"",
          "type": "string"
        },
        "cranPackages": {
          "description": "The CRAN packages to use.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RCranPackage"
          }
        },
        "gitHubPackages": {
          "description": "The packages directly from GitHub.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RGitHubPackage"
          }
        },
        "customUrlPackages": {
          "description": "The packages from custom urls.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bioConductorPackages": {
          "description": "The packages from Bioconductor.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RSectionResponse": {
      "type": "object",
      "properties": {
        "rVersion": {
          "description": "The version of R to be installed",
          "type": "string"
        },
        "userManaged": {
          "description": "Indicates whether the environment is managed by user or by AzureML.",
          "type": "boolean"
        },
        "rscriptPath": {
          "description": "The Rscript path to use if an environment build is not required.\r\nThe path specified gets used to call the user script.",
          "type": "string"
        },
        "snapshotDate": {
          "description": "Date of MRAN snapshot to use in YYYY-MM-DD format, e.g. \"2019-04-17\"",
          "type": "string"
        },
        "cranPackages": {
          "description": "The CRAN packages to use.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RCranPackage"
          }
        },
        "gitHubPackages": {
          "description": "The packages directly from GitHub.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RGitHubPackageResponse"
          }
        },
        "customUrlPackages": {
          "description": "The packages from custom urls.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bioConductorPackages": {
          "description": "The packages from Bioconductor.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DatasetReference": {
      "description": "The dataset reference object.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the dataset reference.",
          "type": "string"
        },
        "id": {
          "description": "The id of the dataset reference.",
          "type": "string"
        }
      }
    },
    "AKSVariantResponse": {
      "description": "The response for an AKS variant.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "isDefault": {
              "description": "Is this the default variant.",
              "type": "boolean"
            },
            "trafficPercentile": {
              "format": "float",
              "description": "The amount of traffic variant receives.",
              "type": "number",
              "example": 100
            },
            "type": {
              "description": "The type of the variant.",
              "enum": [
                "Control",
                "Treatment"
              ],
              "type": "string",
              "example": "Control",
              "x-ms-enum": {
                "name": "VariantType",
                "modelAsString": true
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Custom"
    },
    "AutoScaler": {
      "description": "The Auto Scaler properties.",
      "type": "object",
      "properties": {
        "autoscaleEnabled": {
          "description": "Option to enable/disable auto scaling.",
          "type": "boolean"
        },
        "minReplicas": {
          "format": "int32",
          "description": "The minimum number of replicas to scale down to.",
          "type": "integer",
          "example": 1
        },
        "maxReplicas": {
          "format": "int32",
          "description": "The maximum number of replicas in the cluster.",
          "type": "integer",
          "example": 3
        },
        "targetUtilization": {
          "format": "int32",
          "description": "The target utilization percentage to use for determining whether to scale the cluster.",
          "type": "integer",
          "example": 70
        },
        "refreshPeriodInSeconds": {
          "format": "int32",
          "description": "The amount of seconds to wait between auto scale updates.",
          "type": "integer",
          "example": 120
        }
      }
    },
    "AKSReplicaStatus": {
      "type": "object",
      "properties": {
        "desiredReplicas": {
          "format": "int32",
          "description": "The desired number of replicas.",
          "type": "integer",
          "example": 2
        },
        "updatedReplicas": {
          "format": "int32",
          "description": "The number of updated replicas.",
          "type": "integer",
          "example": 1
        },
        "availableReplicas": {
          "format": "int32",
          "description": "The number of available replicas.",
          "type": "integer",
          "example": 1
        },
        "error": {
          "description": "The error details.",
          "allOf": [
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          ]
        }
      }
    },
    "LivenessProbeRequirements": {
      "description": "The liveness probe requirements.",
      "type": "object",
      "properties": {
        "failureThreshold": {
          "format": "int32",
          "description": "The number of failures to allow before returning an unhealthy status.",
          "type": "integer"
        },
        "successThreshold": {
          "format": "int32",
          "description": "The number of successful probes before returning a healthy status.",
          "type": "integer"
        },
        "timeoutSeconds": {
          "format": "int32",
          "description": "The probe timeout in seconds.",
          "type": "integer"
        },
        "periodSeconds": {
          "format": "int32",
          "description": "The length of time between probes in seconds.",
          "type": "integer"
        },
        "initialDelaySeconds": {
          "format": "int32",
          "description": "The delay before the first probe in seconds.",
          "type": "integer"
        }
      }
    },
    "AKSServiceResponse": {
      "description": "The response for an AKS service.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AKSVariantResponse"
        },
        {
          "type": "object",
          "properties": {
            "models": {
              "description": "The list of models.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Model"
              }
            },
            "containerResourceRequirements": {
              "description": "The container resource requirements.",
              "$ref": "machineLearningServices.json#/definitions/ContainerResourceRequirements"
            },
            "maxConcurrentRequestsPerContainer": {
              "format": "int32",
              "description": "The maximum number of concurrent requests per container.",
              "type": "integer",
              "example": 100
            },
            "maxQueueWaitMs": {
              "format": "int32",
              "description": "Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)",
              "type": "integer",
              "example": 250
            },
            "computeName": {
              "description": "The name of the compute resource.",
              "type": "string"
            },
            "namespace": {
              "description": "The Kubernetes namespace of the deployment.",
              "type": "string",
              "example": "default"
            },
            "numReplicas": {
              "format": "int32",
              "description": "The number of replicas on the cluster.",
              "type": "integer",
              "example": 1
            },
            "dataCollection": {
              "description": "Details of the data collection options specified.",
              "allOf": [
                {
                  "$ref": "#/definitions/ModelDataCollection"
                }
              ]
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "type": "boolean"
            },
            "autoScaler": {
              "description": "The auto scaler properties.",
              "allOf": [
                {
                  "$ref": "#/definitions/AutoScaler"
                }
              ]
            },
            "scoringUri": {
              "description": "The Uri for sending scoring requests.",
              "type": "string",
              "readOnly": true
            },
            "deploymentStatus": {
              "description": "The deployment status.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/definitions/AKSReplicaStatus"
                }
              ]
            },
            "scoringTimeoutMs": {
              "format": "int32",
              "description": "The scoring timeout in milliseconds.",
              "type": "integer",
              "example": 100
            },
            "livenessProbeRequirements": {
              "description": "The liveness probe requirements.",
              "allOf": [
                {
                  "$ref": "#/definitions/LivenessProbeRequirements"
                }
              ]
            },
            "authEnabled": {
              "description": "Whether or not authentication is enabled.",
              "type": "boolean"
            },
            "aadAuthEnabled": {
              "description": "Whether or not AAD authentication is enabled.",
              "type": "boolean"
            },
            "swaggerUri": {
              "description": "The Uri for sending swagger requests.",
              "type": "string",
              "readOnly": true
            },
            "modelConfigMap": {
              "description": "Details on the models and configurations.",
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "readOnly": true
            },
            "environmentImageRequest": {
              "description": "The Environment, models and assets used for inferencing.",
              "allOf": [
                {
                  "$ref": "#/definitions/EnvironmentImageResponse"
                }
              ]
            }
          }
        }
      ],
      "x-ms-discriminator-value": "AKS"
    },
    "AuthKeys": {
      "type": "object",
      "properties": {
        "primaryKey": {
          "description": "The primary key.",
          "type": "string"
        },
        "secondaryKey": {
          "description": "The secondary key.",
          "type": "string"
        }
      }
    },
    "CreateServiceRequest": {
      "description": "The base class for creating a service.",
      "required": [
        "computeType"
      ],
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of the service.",
          "type": "string"
        },
        "kvTags": {
          "description": "The service tag dictionary. Tags are mutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The service properties dictionary. Properties are immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "keys": {
          "description": "The authentication keys.",
          "allOf": [
            {
              "$ref": "#/definitions/AuthKeys"
            }
          ]
        },
        "computeType": {
          "description": "The compute environment type for the service.",
          "enum": [
            "ACI",
            "AKS"
          ],
          "type": "string",
          "example": "AKS",
          "x-ms-enum": {
            "name": "ComputeEnvironmentType",
            "modelAsString": true
          }
        },
        "environmentImageRequest": {
          "description": "The Environment, models and assets needed for inferencing.",
          "allOf": [
            {
              "$ref": "#/definitions/EnvironmentImageRequest"
            }
          ]
        },
        "location": {
          "description": "The name of the Azure location/region.",
          "type": "string"
        }
      },
      "discriminator": "computeType"
    },
    "ACIServiceCreateRequest": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CreateServiceRequest"
        },
        {
          "type": "object",
          "properties": {
            "containerResourceRequirements": {
              "description": "The container resource requirements.",
              "$ref": "machineLearningServices.json#/definitions/ContainerResourceRequirements"
            },
            "authEnabled": {
              "description": "Whether or not authentication is enabled on the service.",
              "default": false,
              "type": "boolean"
            },
            "sslEnabled": {
              "description": "Whether or not SSL is enabled.",
              "default": false,
              "type": "boolean"
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "default": false,
              "type": "boolean"
            },
            "dataCollection": {
              "description": "Details of the data collection options specified.",
              "allOf": [
                {
                  "$ref": "#/definitions/ModelDataCollection"
                }
              ]
            },
            "sslCertificate": {
              "description": "The public SSL certificate in PEM format to use if SSL is enabled.",
              "type": "string"
            },
            "sslKey": {
              "description": "The public SSL key in PEM format for the certificate.",
              "type": "string"
            },
            "cname": {
              "description": "The CName for the service.",
              "type": "string"
            },
            "dnsNameLabel": {
              "description": "The Dns label for the service.",
              "type": "string"
            },
            "vnetConfiguration": {
              "description": "The virtual network configuration.",
              "allOf": [
                {
                  "$ref": "#/definitions/VnetConfiguration"
                }
              ]
            },
            "encryptionProperties": {
              "description": "The encryption properties.",
              "allOf": [
                {
                  "$ref": "#/definitions/EncryptionProperties"
                }
              ]
            }
          }
        }
      ],
      "x-ms-discriminator-value": "ACI"
    },
    "AKSServiceCreateRequest": {
      "description": "The request to create an AKS service.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CreateEndpointVariantRequest"
        },
        {
          "type": "object",
          "properties": {
            "numReplicas": {
              "format": "int32",
              "description": "The number of replicas on the cluster.",
              "type": "integer",
              "example": 1
            },
            "dataCollection": {
              "description": "Details of the data collection options specified.",
              "allOf": [
                {
                  "$ref": "#/definitions/ModelDataCollection"
                }
              ]
            },
            "computeName": {
              "description": "The name of the compute resource.",
              "type": "string"
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "type": "boolean"
            },
            "autoScaler": {
              "description": "The auto scaler properties.",
              "allOf": [
                {
                  "$ref": "#/definitions/AutoScaler"
                }
              ]
            },
            "containerResourceRequirements": {
              "description": "The container resource requirements.",
              "$ref": "machineLearningServices.json#/definitions/ContainerResourceRequirements"
            },
            "maxConcurrentRequestsPerContainer": {
              "format": "int32",
              "description": "The maximum number of concurrent requests per container.",
              "type": "integer",
              "example": 100
            },
            "maxQueueWaitMs": {
              "format": "int32",
              "description": "Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)",
              "type": "integer",
              "example": 250
            },
            "namespace": {
              "description": "Kubernetes namespace for the service.",
              "type": "string",
              "example": "default"
            },
            "scoringTimeoutMs": {
              "format": "int32",
              "description": "The scoring timeout in milliseconds.",
              "type": "integer",
              "example": 100
            },
            "authEnabled": {
              "description": "Whether or not authentication is enabled.",
              "type": "boolean"
            },
            "livenessProbeRequirements": {
              "description": "The liveness probe requirements.",
              "allOf": [
                {
                  "$ref": "#/definitions/LivenessProbeRequirements"
                }
              ]
            },
            "aadAuthEnabled": {
              "description": "Whether or not AAD authentication is enabled.",
              "type": "boolean"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "AKS"
    },
    "CreateEndpointVariantRequest": {
      "description": "The Variant properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CreateServiceRequest"
        },
        {
          "type": "object",
          "properties": {
            "isDefault": {
              "description": "Is this the default variant.",
              "type": "boolean"
            },
            "trafficPercentile": {
              "format": "float",
              "description": "The amount of traffic variant receives.",
              "type": "number",
              "example": 100
            },
            "type": {
              "description": "The type of the variant.",
              "enum": [
                "Control",
                "Treatment"
              ],
              "type": "string",
              "example": "Control",
              "x-ms-enum": {
                "name": "VariantType",
                "modelAsString": true
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Custom"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "description": "Azure Active Directory OAuth2 Flow."
    }
  }
}
