{
  "swagger": "2.0",
  "info": {
    "title": "Azure Machine Learning Model Management Service",
    "description": "These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.",
    "version": "2020-09-23"
  },
  "paths": {
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Create an Asset.",
        "description": "Create an Asset from the provided payload.",
        "operationId": "Assets_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The Asset to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Query the list of Assets in a workspace.",
        "description": "If no filter is passed, the query lists all the Assets in the given workspace. The returned list is paginated and the count of items in each page is an optional parameter.",
        "operationId": "Assets_ListQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "query",
            "name": "runId",
            "description": "The run Id associated with the Assets.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "The object name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tag",
            "description": "The object tag.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "count",
            "description": "The number of items to retrieve in a page.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "description": "The continuation token to retrieve the next page.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "A set of tags with which to filter the returned models.\r\n            It is a comma separated string of tags key or tags key=value\r\n            Example: tagKey1,tagKey2,tagKey3=value3 .",
            "type": "string"
          },
          {
            "in": "query",
            "name": "properties",
            "description": "A set of properties with which to filter the returned models.\r\n            It is a comma separated string of properties key and/or properties key=value\r\n            Example: propKey1,propKey2,propKey3=value3 .",
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "description": "The object type.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "orderby",
            "description": "An option for specifying how to order the list.",
            "type": "string",
            "default": "CreatedAtDesc",
            "enum": [
              "CreatedAtDesc",
              "CreatedAtAsc",
              "UpdatedAtDesc",
              "UpdatedAtAsc"
            ],
            "x-ms-enum": {
              "name": "OrderString",
              "modelAsString": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaginatedAssetList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}": {
      "patch": {
        "tags": [
          "Asset"
        ],
        "summary": "Update an Asset.",
        "description": "Patch a specific Asset.",
        "operationId": "Assets_Patch",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the Asset to patch.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to patch an Asset.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JsonPatchOperation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Asset"
        ],
        "summary": "Delete an Asset.",
        "description": "Delete the specified Asset.",
        "operationId": "Assets_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the Asset to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The resource exists and was deleted successfully."
          },
          "204": {
            "description": "The resource does not exist and the request was well formed."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get an Asset.",
        "description": "Get an Asset by Id.",
        "operationId": "Assets_QueryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Asset Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models/{id}": {
      "get": {
        "tags": [
          "Model"
        ],
        "summary": "Gets a model.",
        "description": "Gets a model by model id.",
        "operationId": "MLModels_QueryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The model id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Model"
        ],
        "summary": "Delete the specified Model.",
        "description": "Deletes a model if it exists.",
        "operationId": "MLModels_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The model id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The resource exists and was deleted successfully."
          },
          "204": {
            "description": "The resource does not exist and the request was well formed."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Model"
        ],
        "summary": "Patch a specific model.",
        "description": "Updates an existing model with the specified patch.",
        "operationId": "MLModels_Patch",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The model id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to patch the model.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JsonPatchOperation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models": {
      "get": {
        "tags": [
          "Model"
        ],
        "summary": "Query the list of Models in a workspace.",
        "description": "The result list can be filtered using tag and name. If no filter is passed, the query lists all the Models in the given workspace. The returned list is paginated and the count of items in each page is an optional parameter.",
        "operationId": "MLModels_ListQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "query",
            "name": "name",
            "description": "The object name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tag",
            "description": "The object tag.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "framework",
            "description": "The framework.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "The object description.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "count",
            "description": "The number of items to retrieve in a page.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "The (zero-based) offset of the first item in the collection to return continuation token to retrieve the next page.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "description": "The continuation token to retrieve the next page.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "A set of tags with which to filter the returned models.\r\n            It is a comma separated string of tags key or tags key=value\r\n            Example: tagKey1,tagKey2,tagKey3=value3 .",
            "type": "string"
          },
          {
            "in": "query",
            "name": "properties",
            "description": "A set of properties with which to filter the returned models.\r\n            It is a comma separated string of properties key and/or properties key=value\r\n            Example: propKey1,propKey2,propKey3=value3 .",
            "type": "string"
          },
          {
            "in": "query",
            "name": "runId",
            "description": "The runId which created the model.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "datasetId",
            "description": "The datasetId associated with the model.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "An option to specify how the models are ordered in the response.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "latestVersionOnly",
            "description": "An option to get only the latest version of the models in the response.",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaginatedModelList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "tags": [
          "Model"
        ],
        "summary": "Register a model.",
        "description": "Register the model provided.",
        "operationId": "MLModels_Register",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to register the model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Model"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The model registration was successful.",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models/list": {
      "post": {
        "tags": [
          "Model"
        ],
        "summary": "Query the list of Models in a Workspace.",
        "description": "If no filter is passed, the query lists all Models in the Workspace. The returned list is paginated and the count of item in each page is an optional parameter.",
        "operationId": "MLModels_ListQueryPost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to list models.",
            "schema": {
              "$ref": "#/definitions/ListModelsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaginatedModelListPost"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/operations/{id}": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Get the status of an async operation.",
        "description": "Get the status of an async operation by operation id.",
        "operationId": "Operations_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The operation id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AsyncOperationStatus"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles/{id}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get a Profile.",
        "description": "Get the Profile for an Image.",
        "operationId": "Profiles_QueryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "imageId",
            "description": "The Image Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Profile Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProfileResponse"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get a list of Image Profiles.",
        "description": "If no filter is passed, the query lists all Profiles for the Image. The returned list is paginated and the count of items in each page is an optional parameter.",
        "operationId": "Profiles_ListQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "imageId",
            "description": "The Image Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "The Profile name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "The Profile description.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "A set of tags with which to filter the returned models.\r\n            It is a comma separated string of tags key or tags key=value\r\n            Example: tagKey1,tagKey2,tagKey3=value3 .",
            "type": "string"
          },
          {
            "in": "query",
            "name": "properties",
            "description": "A set of properties with which to filter the returned models.\r\n            It is a comma separated string of properties key and/or properties key=value\r\n            Example: propKey1,propKey2,propKey3=value3 .",
            "type": "string"
          },
          {
            "in": "query",
            "name": "count",
            "description": "The number of items to retrieve in a page.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "description": "The continuation token to retrieve the next page.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "The option to order the response.",
            "type": "string",
            "default": "CreatedAtDesc",
            "enum": [
              "CreatedAtDesc",
              "CreatedAtAsc",
              "UpdatedAtDesc",
              "UpdatedAtAsc"
            ],
            "x-ms-enum": {
              "name": "OrderString",
              "modelAsString": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaginatedProfileResponseList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Create a Profile.",
        "description": "Create a Profile for an Image.",
        "operationId": "Profiles_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "imageId",
            "description": "The Image Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to create the Profile.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileRequestBase"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request was accepted. The header 'Operation-Location' contains the async operation location URL. Accessing this URL with a GET call will return the status of the background task."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get a Service.",
        "description": "Get a Service by Id.",
        "operationId": "Services_QueryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Service Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "expand",
            "description": "Set to True to include Model details.",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceResponseBase"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Service"
        ],
        "summary": "Patch a Service.",
        "description": "Patch a specific Service.",
        "operationId": "Services_Patch",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Service Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to patch the Service.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JsonPatchOperation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "The request was accepted.  The header 'Operation-Location' contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Delete a Service.",
        "description": "Delete a specific Service.",
        "operationId": "Services_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Service Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The resource exists and was deleted successfully."
          },
          "202": {
            "description": "Success"
          },
          "204": {
            "description": "The resource does not exist and the request was well formed."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/validate/name/{serviceName}": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Validate if a Service name exists.",
        "description": "Validate if a Service name already exists.",
        "operationId": "Services_Name_Validation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "The Service Name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceResponseBase"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/validate/resource": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Check if the service resouce is enough.",
        "description": "Check if the resource required by the service is enough.",
        "operationId": "Services_Resource_Validation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to create the Service.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AKSServiceValidateResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceResponseBase"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Query the list of Services in a Workspace.",
        "description": "If no filter is passed, the query lists all Services in the Workspace. The returned list is paginated and the count of item in each page is an optional parameter.",
        "operationId": "Services_ListQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "query",
            "name": "imageId",
            "description": "The Image Id.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "imageDigest",
            "description": "The Image Digest.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "imageName",
            "description": "The Image name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "modelId",
            "description": "The Model Id.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "modelName",
            "description": "The Model name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "The object name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tag",
            "description": "The object tag.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "count",
            "description": "The number of items to retrieve in a page.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "computeType",
            "description": "The compute environment type.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skipToken",
            "description": "The continuation token to retrieve the next page.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "A set of tags with which to filter the returned models.\r\n            It is a comma separated string of tags key or tags key=value\r\n            Example: tagKey1,tagKey2,tagKey3=value3 .",
            "type": "string"
          },
          {
            "in": "query",
            "name": "properties",
            "description": "A set of properties with which to filter the returned models.\r\n            It is a comma separated string of properties key and/or properties key=value\r\n            Example: propKey1,propKey2,propKey3=value3 .",
            "type": "string"
          },
          {
            "in": "query",
            "name": "runId",
            "description": "runId for model associated with service.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "expand",
            "description": "Set to True to include Model details.",
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "orderby",
            "description": "The option to order the response.",
            "type": "string",
            "default": "UpdatedAtDesc",
            "enum": [
              "CreatedAtDesc",
              "CreatedAtAsc",
              "UpdatedAtDesc",
              "UpdatedAtAsc"
            ],
            "x-ms-enum": {
              "name": "OrderString",
              "modelAsString": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaginatedServiceList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a Service.",
        "description": "Create a Service with the specified payload.",
        "operationId": "Services_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to create the Service.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request was accepted.  The header 'Operation-Location' contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Create a Service.",
        "description": "Create a Service with the specified payload.",
        "operationId": "Services_CreatePut",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to create the Service.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request was accepted.  The header 'Operation-Location' contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/list": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Query the list of Services in a Workspace.",
        "description": "If no filter is passed, the query lists all Services in the Workspace. The returned list is paginated and the count of item in each page is an optional parameter.",
        "operationId": "Services_ListQueryPost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to list services.",
            "schema": {
              "$ref": "#/definitions/ListServicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaginatedServiceListPost"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}/listkeys": {
      "post": {
        "tags": [
          "Service",
          "Keys"
        ],
        "summary": "Lists Service keys.",
        "description": "Gets a list of Service keys.",
        "operationId": "Services_ListServiceKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Service Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthKeys"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}/regenerateKeys": {
      "post": {
        "tags": [
          "Service",
          "Keys"
        ],
        "summary": "Regenerate Service Keys.",
        "description": "Regenerate and return the Service keys.",
        "operationId": "Services_RegenerateServiceKeys",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Service Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The payload that is used to regenerate keys.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegenerateServiceKeysRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request was accepted. The header 'Operation-Location' contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}/token": {
      "post": {
        "tags": [
          "Service",
          "Token"
        ],
        "summary": "Generate Service Access Token.",
        "description": "Gets access token that can be used for calling service.",
        "operationId": "Services_GetServiceToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Service Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    },
    "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}/logs": {
      "get": {
        "tags": [
          "Service"
        ],
        "operationId": "Services_GetLogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupParameter"
          },
          {
            "$ref": "#/parameters/workspaceParameter"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tail",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "init",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceLogs"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ArtifactDetails": {
      "description": "The Artifact definition.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Artifact Id.",
          "type": "string"
        },
        "prefix": {
          "description": "The Artifact prefix.",
          "type": "string"
        }
      }
    },
    "Asset": {
      "description": "The Asset definition.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The Asset Id.",
          "type": "string"
        },
        "name": {
          "description": "The name of the Asset.",
          "type": "string"
        },
        "type": {
          "description": "The type of the Asset",
          "type": "string"
        },
        "description": {
          "description": "The Asset description.",
          "type": "string"
        },
        "artifacts": {
          "description": "A list of child artifacts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactDetails"
          }
        },
        "kvTags": {
          "description": "The Asset tag dictionary. Tags are mutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The Asset property dictionary. Properties are immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "runid": {
          "description": "The RunId associated with this Asset.",
          "type": "string"
        },
        "meta": {
          "description": "A dictionary containing metadata about the Asset.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdTime": {
          "format": "date-time",
          "description": "The time the Asset was created in UTC.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PaginatedAssetList": {
      "description": "A paginated list of Assets.",
      "type": "object",
      "properties": {
        "value": {
          "description": "An array of objects of type Asset.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "continuationToken": {
          "description": "The token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "A continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "JsonPatchOperation": {
      "description": "The Json Patch definition.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value.",
          "type": "object"
        },
        "path": {
          "description": "The target location.",
          "type": "string"
        },
        "op": {
          "description": "The operation.",
          "type": "string"
        },
        "from": {
          "description": "The source location.",
          "type": "string"
        }
      }
    },
    "DatasetReference": {
      "description": "The dataset reference object.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the dataset reference.",
          "type": "string"
        },
        "id": {
          "description": "The id of the dataset reference.",
          "type": "string"
        }
      }
    },
    "RegistryInfo": {
      "description": "Contains registry information.",
      "required": [
        "location",
        "password",
        "user"
      ],
      "type": "object",
      "properties": {
        "user": {
          "description": "The user.",
          "type": "string"
        },
        "location": {
          "description": "The location.",
          "type": "string"
        },
        "password": {
          "description": "The password.",
          "type": "string"
        }
      }
    },
    "ContainerResourceRequirements": {
      "description": "The resource requirements for the container (cpu and memory).",
      "type": "object",
      "properties": {
        "cpu": {
          "format": "double",
          "description": "The minimum amount of CPU cores to be used by the container. More info:\r\nhttps://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "number",
          "example": 4
        },
        "cpuLimit": {
          "format": "double",
          "description": "The maximum amount of CPU cores allowed to be used by the container. More info:\r\nhttps://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "number",
          "example": 4
        },
        "memoryInGB": {
          "format": "double",
          "description": "The minimum amount of memory (in GB) to be used by the container. More info:\r\nhttps://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "number",
          "example": 64
        },
        "memoryInGBLimit": {
          "format": "double",
          "description": "The maximum amount of memory (in GB) allowed to be used by the container. More info:\r\nhttps://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "number",
          "example": 64
        },
        "gpuEnabled": {
          "description": "If gpu should be enabled",
          "type": "boolean"
        },
        "gpu": {
          "format": "int32",
          "description": "The number of GPU cores in the container.",
          "type": "integer"
        },
        "fpga": {
          "format": "int32",
          "description": "The number of FPGA PCIE devices exposed to the container. Must be multiple of 2.",
          "type": "integer"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "userObjectId": {
          "type": "string"
        },
        "userPuId": {
          "type": "string"
        },
        "userIdp": {
          "type": "string"
        },
        "userAltSecId": {
          "type": "string"
        },
        "userIss": {
          "type": "string"
        },
        "userTenantId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "Model": {
      "description": "An Azure Machine Learning Model.",
      "required": [
        "mimeType",
        "name",
        "url"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The Model Id.",
          "type": "string",
          "example": "sklearn_mnist:1"
        },
        "name": {
          "description": "The Model name.",
          "type": "string",
          "example": "sklearn_mnist"
        },
        "framework": {
          "description": "The Model framework.",
          "type": "string"
        },
        "frameworkVersion": {
          "description": "The Model framework version.",
          "type": "string"
        },
        "version": {
          "format": "int64",
          "description": "The Model version assigned by Model Management Service.",
          "type": "integer",
          "example": 1
        },
        "datasets": {
          "description": "The list of datasets associated with the model.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetReference"
          }
        },
        "url": {
          "format": "uri",
          "description": "The URL of the Model. Usually a SAS URL.",
          "type": "string"
        },
        "mimeType": {
          "description": "The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml",
          "type": "string"
        },
        "description": {
          "description": "The Model description text.",
          "type": "string",
          "example": "A mnist model, first version."
        },
        "createdTime": {
          "format": "date-time",
          "description": "The Model creation time (UTC).",
          "type": "string"
        },
        "modifiedTime": {
          "format": "date-time",
          "description": "The Model last modified time (UTC).",
          "type": "string"
        },
        "unpack": {
          "description": "Indicates whether we need to unpack the Model during docker Image creation.",
          "type": "boolean"
        },
        "parentModelId": {
          "description": "The Parent Model Id.",
          "type": "string",
          "example": "sklearn_mnist_root:1"
        },
        "runId": {
          "description": "The RunId that created this model.",
          "type": "string"
        },
        "experimentName": {
          "description": "The name of the experiment where this model was created.",
          "type": "string"
        },
        "kvTags": {
          "description": "The Model tag dictionary. Items are mutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The Model property dictionary. Properties are immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "derivedModelIds": {
          "description": "Models dervied from this model",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sampleInputData": {
          "description": "Sample Input Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}",
          "type": "string"
        },
        "sampleOutputData": {
          "description": "Sample Output Data for the Model. A reference to a dataset in the workspace in the format aml://dataset/{datasetId}",
          "type": "string"
        },
        "resourceRequirements": {
          "description": "Resource requirements for the model",
          "allOf": [
            {
              "$ref": "#/definitions/ContainerResourceRequirements"
            }
          ]
        },
        "createdBy": {
          "description": "The User who created this entity.",
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        }
      }
    },
    "PaginatedModelList": {
      "description": "A paginated list of Models.",
      "type": "object",
      "properties": {
        "value": {
          "description": "An array of objects of type Model.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          }
        },
        "continuationToken": {
          "description": "The token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "A continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "ListModelsRequest": {
      "description": "The class for getting models.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The object name.",
          "type": "string"
        },
        "tag": {
          "description": "The object tag.",
          "type": "string"
        },
        "version": {
          "description": "The object version.",
          "type": "string"
        },
        "framework": {
          "description": "The framework.",
          "type": "string"
        },
        "description": {
          "description": "The object description.",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The number of items to retrieve in a page.",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "description": "The (zero-based) offset of the first item in the collection to return continuation token to retrieve the next page.",
          "type": "integer"
        },
        "skipToken": {
          "description": "The continuation token to retrieve the next page.",
          "type": "string"
        },
        "tags": {
          "description": "A set of tags with which to filter the returned models.\r\nIt is a comma separated string of tags key or tags key=value\r\nExample: tagKey1,tagKey2,tagKey3=value3 .",
          "type": "string"
        },
        "properties": {
          "description": "A set of properties with which to filter the returned models.\r\nIt is a comma separated string of properties key and/or properties key=value\r\nExample: propKey1,propKey2,propKey3=value3 .",
          "type": "string"
        },
        "runId": {
          "description": "The runId which created the model.",
          "type": "string"
        },
        "datasetId": {
          "description": "The datasetId associated with the model.",
          "type": "string"
        },
        "orderBy": {
          "description": "The option to order the response.",
          "enum": [
            "CreatedAtDesc",
            "CreatedAtAsc",
            "UpdatedAtDesc",
            "UpdatedAtAsc"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "OrderString",
            "modelAsString": false
          }
        },
        "latestVersionOnly": {
          "description": "An option to get only the latest version of the models in the response.",
          "type": "boolean"
        }
      }
    },
    "PaginatedModelListPost": {
      "description": "A paginated list of Models.",
      "type": "object",
      "properties": {
        "value": {
          "description": "An array of objects of type Model.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          }
        },
        "nextLink": {
          "description": "A continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        },
        "continuationToken": {
          "description": "The token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextRequest": {
          "description": "A request body(payload) to the next page of results in the list.",
          "allOf": [
            {
              "$ref": "#/definitions/ListModelsRequest"
            }
          ]
        }
      }
    },
    "ErrorDetails": {
      "description": "The error details.",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code.",
          "type": "string"
        },
        "message": {
          "description": "The error message.",
          "type": "string"
        },
        "target": {
          "description": "The target of the error (e.g., the name of the property in error).",
          "type": "string"
        }
      }
    },
    "ModelErrorResponse": {
      "description": "The Model Management Service Error object.",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code.",
          "type": "string"
        },
        "statusCode": {
          "format": "int32",
          "description": "The HTTP status code.",
          "type": "integer"
        },
        "message": {
          "description": "The error message.",
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "details": {
          "description": "An array of error detail objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetails"
          }
        },
        "correlation": {
          "description": "A dictionary of information used to correlate the failing request.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AsyncOperationDetails": {
      "description": "The async operation details.",
      "type": "object",
      "properties": {
        "subOperationType": {
          "description": "The suboperation type.",
          "type": "string"
        },
        "subOperationState": {
          "description": "The suboperation state.",
          "type": "string"
        }
      }
    },
    "AsyncOperationRunInfo": {
      "type": "object",
      "properties": {
        "experiment": {
          "type": "string"
        },
        "runId": {
          "type": "string"
        }
      }
    },
    "AsyncOperationStatus": {
      "description": "The async operation status.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The async operation id.",
          "type": "string"
        },
        "operationType": {
          "description": "The async operation type.",
          "type": "string"
        },
        "state": {
          "description": "The async operation state.",
          "enum": [
            "NotStarted",
            "Running",
            "Cancelled",
            "Succeeded",
            "Failed",
            "TimedOut"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AsyncOperationState",
            "modelAsString": false
          }
        },
        "createdTime": {
          "format": "date-time",
          "description": "The async operation creation time (UTC).",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "description": "The async operation end time (UTC)l",
          "type": "string"
        },
        "error": {
          "description": "The error details.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          ]
        },
        "resourceLocation": {
          "description": "The resource created/updated by the async operation.",
          "type": "string"
        },
        "operationLog": {
          "description": "The async operation log.",
          "type": "string"
        },
        "operationDetails": {
          "description": "The async operation details.",
          "allOf": [
            {
              "$ref": "#/definitions/AsyncOperationDetails"
            }
          ]
        },
        "parentRequestId": {
          "description": "The request id that created this operation",
          "type": "string"
        },
        "operationRunInfo": {
          "description": "The async operation run information.",
          "allOf": [
            {
              "$ref": "#/definitions/AsyncOperationRunInfo"
            }
          ]
        }
      }
    },
    "ProfileResponse": {
      "description": "The profile response.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The profile name.",
          "type": "string"
        },
        "description": {
          "description": "The profile description.",
          "type": "string"
        },
        "imageId": {
          "description": "The Image Id.",
          "type": "string"
        },
        "inputData": {
          "description": "The input data.",
          "type": "string"
        },
        "state": {
          "description": "The state of the profile.",
          "type": "string"
        },
        "createdTime": {
          "format": "date-time",
          "description": "The profile creation time (UTC).",
          "type": "string"
        },
        "kvTags": {
          "description": "The profile tags dictionary. Tags are mutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The profile properties dictionary. Properties are immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "recommendedMemoryInGB": {
          "format": "double",
          "description": "The recommended amount of memory to allocate in GB.",
          "type": "number"
        },
        "recommendedCpu": {
          "format": "double",
          "description": "The recommended CPU allocation.",
          "type": "number"
        },
        "recommendationLatencyInMs": {
          "format": "double",
          "description": "Latency associated with the recommended memory/cpu config",
          "type": "number"
        },
        "profileRunResult": {
          "format": "uri",
          "description": "The profile run result.",
          "type": "string"
        },
        "error": {
          "description": "The error details.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          ]
        },
        "profilingErrorLogs": {
          "format": "uri",
          "description": "The profiling error logs.",
          "type": "string"
        }
      }
    },
    "PaginatedProfileResponseList": {
      "description": "A paginated list of ProfileResponses.",
      "type": "object",
      "properties": {
        "value": {
          "description": "An array of objects of type ProfileResponse.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileResponse"
          }
        },
        "continuationToken": {
          "description": "The token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "A continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "ProfileRequestBase": {
      "description": "The request for creating a profile.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The profile name.",
          "type": "string"
        },
        "description": {
          "description": "The profile description.",
          "type": "string"
        },
        "inputData": {
          "description": "The profile input data.",
          "type": "string"
        },
        "inputDatasetId": {
          "description": "The profile input dataset name/id.",
          "type": "string"
        },
        "kvTags": {
          "description": "The tags dictionary.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The properties dictionary.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ServiceResponseBase": {
      "description": "The base service response. The correct inherited response based on computeType will be returned (ex. ACIServiceResponse)",
      "required": [
        "computeType"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The service Id.",
          "type": "string"
        },
        "name": {
          "description": "The service name.",
          "type": "string"
        },
        "description": {
          "description": "The service description.",
          "type": "string"
        },
        "kvTags": {
          "description": "The service tag dictionary. Tags are mutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The service property dictionary. Properties are immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "operationId": {
          "description": "The ID of the latest asynchronous operation for this service.",
          "type": "string"
        },
        "state": {
          "description": "The current state of the service.",
          "enum": [
            "Transitioning",
            "Healthy",
            "Unhealthy",
            "Failed",
            "Unschedulable"
          ],
          "type": "string",
          "example": "Healthy",
          "x-ms-enum": {
            "name": "WebServiceState",
            "modelAsString": false
          }
        },
        "createdTime": {
          "format": "date-time",
          "description": "The time the service was created.",
          "type": "string"
        },
        "updatedTime": {
          "format": "date-time",
          "description": "The time the service was updated.",
          "type": "string"
        },
        "error": {
          "description": "The error details.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          ]
        },
        "computeType": {
          "description": "The compute environment type for the service.",
          "enum": [
            "ACI",
            "AKS",
            "AMLCOMPUTE",
            "IOT",
            "AKSENDPOINT",
            "MIRSINGLEMODEL",
            "UNKNOWN"
          ],
          "type": "string",
          "example": "AKS",
          "x-ms-enum": {
            "name": "ComputeEnvironmentType",
            "modelAsString": false
          }
        },
        "deploymentType": {
          "description": "The deployment type for the service.",
          "enum": [
            "GRPCRealtimeEndpoint",
            "HttpRealtimeEndpoint",
            "Batch"
          ],
          "type": "string",
          "example": "HttpRealtimeEndpoint",
          "x-ms-enum": {
            "name": "DeploymentType",
            "modelAsString": false
          }
        },
        "createdBy": {
          "description": "The individual last responsible for creating or updating the service.",
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        }
      },
      "discriminator": "computeType"
    },
    "AutoScaler": {
      "description": "The Auto Scaler properties.",
      "type": "object",
      "properties": {
        "autoscaleEnabled": {
          "description": "Option to enable/disable auto scaling.",
          "type": "boolean"
        },
        "minReplicas": {
          "format": "int32",
          "description": "The minimum number of replicas to scale down to.",
          "type": "integer",
          "example": 1
        },
        "maxReplicas": {
          "format": "int32",
          "description": "The maximum number of replicas in the cluster.",
          "type": "integer",
          "example": 3
        },
        "targetUtilization": {
          "format": "int32",
          "description": "The target utilization percentage to use for determining whether to scale the cluster.",
          "type": "integer",
          "example": 70
        },
        "refreshPeriodInSeconds": {
          "format": "int32",
          "description": "The amount of seconds to wait between auto scale updates.",
          "type": "integer",
          "example": 120
        }
      }
    },
    "AKSServiceValidateResourceRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The service name.",
          "type": "string"
        },
        "containerResourceRequirements": {
          "description": "The container resource requirements.",
          "allOf": [
            {
              "$ref": "#/definitions/ContainerResourceRequirements"
            }
          ]
        },
        "computeName": {
          "description": "The name of the compute resource.",
          "type": "string"
        },
        "numReplicas": {
          "format": "int32",
          "description": "The number of replicas on the cluster.",
          "type": "integer",
          "example": 1
        },
        "autoScaler": {
          "description": "The auto scaler properties.",
          "allOf": [
            {
              "$ref": "#/definitions/AutoScaler"
            }
          ]
        }
      }
    },
    "PaginatedServiceList": {
      "description": "A paginated list of Services.",
      "type": "object",
      "properties": {
        "value": {
          "description": "An array of objects of type Service.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceResponseBase"
          }
        },
        "continuationToken": {
          "description": "The token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "A continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "AuthKeys": {
      "type": "object",
      "properties": {
        "primaryKey": {
          "description": "The primary key.",
          "type": "string"
        },
        "secondaryKey": {
          "description": "The secondary key.",
          "type": "string"
        }
      }
    },
    "ImageAsset": {
      "description": "An Image asset.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Asset Id.",
          "type": "string"
        },
        "mimeType": {
          "description": "The mime type.",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "description": "The Url of the Asset.",
          "type": "string"
        },
        "unpack": {
          "description": "Whether the Asset is unpacked.",
          "type": "boolean"
        }
      }
    },
    "ModelPythonSection": {
      "type": "object",
      "properties": {
        "interpreterPath": {
          "description": "The python interpreter path to use if an environment build is not required. The path specified gets used to call the user script.",
          "type": "string"
        },
        "userManagedDependencies": {
          "description": "True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.",
          "type": "boolean"
        },
        "condaDependencies": {},
        "baseCondaEnvironment": {
          "type": "string"
        }
      }
    },
    "DockerImagePlatform": {
      "type": "object",
      "properties": {
        "os": {
          "type": "string"
        },
        "architecture": {
          "type": "string"
        }
      }
    },
    "RegistryIdentity": {
      "type": "object",
      "properties": {
        "resourceId": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        }
      }
    },
    "ContainerRegistry": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "registryIdentity": {
          "description": "Settings for a RegistryIdentity.",
          "allOf": [
            {
              "$ref": "#/definitions/RegistryIdentity"
            }
          ]
        }
      }
    },
    "ModelDockerSection": {
      "type": "object",
      "properties": {
        "baseImage": {
          "description": "Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.",
          "type": "string",
          "example": "ubuntu:latest"
        },
        "platform": {
          "description": "Docker image target platform (OS and Architecture). Defaults to Linux",
          "allOf": [
            {
              "$ref": "#/definitions/DockerImagePlatform"
            }
          ]
        },
        "baseDockerfile": {
          "description": "Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.",
          "type": "string",
          "example": "FROM ubuntu:latest\r\nRUN echo \"Hello world!\""
        },
        "baseImageRegistry": {
          "description": "Image registry that contains the base image.",
          "allOf": [
            {
              "$ref": "#/definitions/ContainerRegistry"
            }
          ]
        }
      }
    },
    "SparkMavenPackage": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "artifact": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ModelSparkSection": {
      "type": "object",
      "properties": {
        "repositories": {
          "description": "The list of spark repositories.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "packages": {
          "description": "The Spark packages to use.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SparkMavenPackage"
          }
        },
        "precachePackages": {
          "description": "Whether to precache the packages.",
          "type": "boolean"
        }
      }
    },
    "RCranPackage": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The package name.",
          "type": "string"
        },
        "version": {
          "description": "The package version.",
          "type": "string"
        },
        "repository": {
          "description": "The repository name.",
          "type": "string"
        }
      }
    },
    "RGitHubPackage": {
      "type": "object",
      "properties": {
        "repository": {
          "description": "Repository address in the format username/repo[/subdir][@ref|#pull].",
          "type": "string"
        },
        "authToken": {
          "description": "Personal access token to install from a private repo",
          "type": "string"
        }
      }
    },
    "RSection": {
      "type": "object",
      "properties": {
        "rVersion": {
          "description": "The version of R to be installed",
          "type": "string"
        },
        "userManaged": {
          "description": "Indicates whether the environment is managed by user or by AzureML.",
          "type": "boolean"
        },
        "rscriptPath": {
          "description": "The Rscript path to use if an environment build is not required.\r\nThe path specified gets used to call the user script.",
          "type": "string"
        },
        "snapshotDate": {
          "description": "Date of MRAN snapshot to use in YYYY-MM-DD format, e.g. \"2019-04-17\"",
          "type": "string"
        },
        "cranPackages": {
          "description": "The CRAN packages to use.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RCranPackage"
          }
        },
        "gitHubPackages": {
          "description": "The packages directly from GitHub.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RGitHubPackage"
          }
        },
        "customUrlPackages": {
          "description": "The packages from custom urls.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bioConductorPackages": {
          "description": "The packages from Bioconductor.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ModelEnvironmentDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the environment.",
          "type": "string",
          "example": "mydevenvironment"
        },
        "version": {
          "description": "The environment version.",
          "type": "string",
          "example": "1"
        },
        "python": {
          "description": "Settings for a Python environment.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelPythonSection"
            }
          ]
        },
        "environmentVariables": {
          "description": "Definition of environment variables to be defined in the environment.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "docker": {
          "description": "The definition of a Docker container.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelDockerSection"
            }
          ]
        },
        "spark": {
          "description": "The configuration for a Spark environment.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelSparkSection"
            }
          ]
        },
        "r": {
          "description": "Settings for a R environment.",
          "allOf": [
            {
              "$ref": "#/definitions/RSection"
            }
          ]
        },
        "inferencingStackVersion": {
          "description": "The inferencing stack version added to the image. To avoid adding an inferencing stack, do not set this value. Valid values: \"latest\".",
          "type": "string",
          "example": "latest"
        }
      }
    },
    "EnvironmentReference": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the environment.",
          "type": "string"
        },
        "version": {
          "description": "Version of the environment.",
          "type": "string"
        }
      }
    },
    "EnvironmentImageRequest": {
      "description": "Request to create a Docker image based on Environment.",
      "type": "object",
      "properties": {
        "driverProgram": {
          "description": "The name of the driver file.",
          "type": "string"
        },
        "assets": {
          "description": "The list of assets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageAsset"
          }
        },
        "modelIds": {
          "description": "The list of model Ids.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "models": {
          "description": "The list of models.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          }
        },
        "environment": {
          "description": "The details of the AZURE ML environment.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelEnvironmentDefinition"
            }
          ]
        },
        "environmentReference": {
          "description": "The unique identifying details of the AZURE ML environment.",
          "allOf": [
            {
              "$ref": "#/definitions/EnvironmentReference"
            }
          ]
        }
      }
    },
    "DeployedApiOptionsBase": {
      "type": "object",
      "properties": {
        "flavor": {
          "description": "Gets the flavor of the package to create, which is where the image will be used.",
          "enum": [
            "AzureMlApp",
            "FunctionsApp"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "DeployedApiFlavor",
            "modelAsString": false
          }
        }
      }
    },
    "CreateServiceRequest": {
      "description": "The base class for creating a service.",
      "required": [
        "computeType",
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The service name.",
          "type": "string"
        },
        "description": {
          "description": "The description of the service.",
          "type": "string"
        },
        "kvTags": {
          "description": "The service tag dictionary. Tags are mutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The service properties dictionary. Properties are immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "keys": {
          "description": "The authentication keys.",
          "allOf": [
            {
              "$ref": "#/definitions/AuthKeys"
            }
          ]
        },
        "computeType": {
          "description": "The compute environment type for the service.",
          "enum": [
            "ACI",
            "AKS",
            "AMLCOMPUTE",
            "IOT",
            "AKSENDPOINT",
            "MIRSINGLEMODEL",
            "UNKNOWN"
          ],
          "type": "string",
          "example": "AKS",
          "x-ms-enum": {
            "name": "ComputeEnvironmentType",
            "modelAsString": false
          }
        },
        "imageId": {
          "description": "The Image Id.",
          "type": "string"
        },
        "environmentImageRequest": {
          "description": "The Environment, models and assets needed for inferencing.",
          "allOf": [
            {
              "$ref": "#/definitions/EnvironmentImageRequest"
            }
          ]
        },
        "location": {
          "description": "The location of the service.",
          "type": "string"
        },
        "overwrite": {
          "description": "Whether to overwrite existing service if exists",
          "type": "boolean"
        },
        "deployedApiOptions": {
          "description": "Options for the API that the package exposes. Defaults to the standard AzureML REST server.",
          "allOf": [
            {
              "$ref": "#/definitions/DeployedApiOptionsBase"
            }
          ]
        },
        "containerResourceRequirements": {
          "description": "The container resource requirements.",
          "allOf": [
            {
              "$ref": "#/definitions/ContainerResourceRequirements"
            }
          ]
        }
      },
      "discriminator": "computeType"
    },
    "ListServicesRequest": {
      "description": "The  class for getting services.",
      "type": "object",
      "properties": {
        "imageId": {
          "description": "The Image Id.",
          "type": "string"
        },
        "imageDigest": {
          "description": "The Image Digest.",
          "type": "string"
        },
        "imageName": {
          "description": "The Image name.",
          "type": "string"
        },
        "modelId": {
          "description": "The Model Id.",
          "type": "string"
        },
        "modelName": {
          "description": "The Model Name.",
          "type": "string"
        },
        "name": {
          "description": "The object name.",
          "type": "string"
        },
        "tag": {
          "description": "The object tag.",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The number of items to retrieve in a page.",
          "type": "integer"
        },
        "computeType": {
          "description": "The compute environment type.",
          "type": "string"
        },
        "skipToken": {
          "description": "The continuation token to retrieve the next page.",
          "type": "string"
        },
        "tags": {
          "description": "A set of tags with which to filter the returned models.\r\nIt is a comma separated string of tags key or tags key=value\r\nExample: tagKey1,tagKey2,tagKey3=value3 .",
          "type": "string"
        },
        "properties": {
          "description": "A set of properties with which to filter the returned models.\r\nIt is a comma separated string of properties key and/or properties key=value\r\nExample: propKey1,propKey2,propKey3=value3 .",
          "type": "string"
        },
        "runId": {
          "description": "runId for model associated with service.",
          "type": "string"
        },
        "expand": {
          "description": "Set to True to include Model details.",
          "type": "boolean"
        },
        "orderby": {
          "description": "The option to order the response.",
          "default": "UpdatedAtDesc",
          "enum": [
            "CreatedAtDesc",
            "CreatedAtAsc",
            "UpdatedAtDesc",
            "UpdatedAtAsc"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "OrderString",
            "modelAsString": false
          }
        }
      }
    },
    "PaginatedServiceListPost": {
      "description": "A paginated list of Services.",
      "type": "object",
      "properties": {
        "value": {
          "description": "An array of objects of type Service.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceResponseBase"
          }
        },
        "nextLink": {
          "description": "A continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        },
        "continuationToken": {
          "description": "The token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextRequest": {
          "description": "A request body(payload) to the next page of results in the list.",
          "allOf": [
            {
              "$ref": "#/definitions/ListServicesRequest"
            }
          ]
        }
      }
    },
    "RegenerateServiceKeysRequest": {
      "type": "object",
      "properties": {
        "keyType": {
          "format": "int32",
          "description": "Specification for which type of key to generate.",
          "enum": [
            "Primary",
            "Secondary"
          ],
          "type": "integer",
          "example": 0,
          "x-ms-enum": {
            "name": "KeyType",
            "modelAsString": false
          }
        },
        "keyValue": {
          "description": "The value the key is set to.",
          "type": "string"
        }
      }
    },
    "AuthToken": {
      "description": "Service Token",
      "type": "object",
      "properties": {
        "accessToken": {
          "description": "Access token.",
          "type": "string"
        },
        "tokenType": {
          "description": "Access token type.",
          "type": "string"
        },
        "expiryOn": {
          "format": "int64",
          "description": "Access token expiry time (UTC).",
          "type": "integer"
        },
        "refreshAfter": {
          "format": "int64",
          "description": "Refresh access token after time (UTC).",
          "type": "integer"
        }
      }
    },
    "ServiceLogs": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        }
      }
    },
    "TargetRuntime": {
      "description": "The target runtime.",
      "type": "object",
      "properties": {
        "targetArchitecture": {
          "description": "The target architecture.",
          "enum": [
            "Amd64",
            "Arm32v7"
          ],
          "type": "string",
          "example": "Amd64",
          "x-ms-enum": {
            "name": "ArchitectureType",
            "modelAsString": false
          }
        },
        "osType": {
          "description": "The target operating system.",
          "enum": [
            "Linux",
            "Windows"
          ],
          "type": "string",
          "example": "Linux",
          "x-ms-enum": {
            "name": "OSType",
            "modelAsString": false
          }
        },
        "runtimeType": {
          "description": "The target runtime type.",
          "enum": [
            "SparkPython",
            "Python",
            "PythonSlim",
            "PythonCustom"
          ],
          "type": "string",
          "example": "Python",
          "x-ms-enum": {
            "name": "RuntimeType",
            "modelAsString": false
          }
        },
        "properties": {
          "description": "The properties dictionary.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "DockerImageResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ImageResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "driverProgram": {
              "description": "The name of the driver file.",
              "type": "string"
            },
            "assets": {
              "description": "The list of assets.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageAsset"
              }
            },
            "targetRuntime": {
              "description": "The target runtime.",
              "allOf": [
                {
                  "$ref": "#/definitions/TargetRuntime"
                }
              ]
            },
            "dockerFileUri": {
              "format": "uri",
              "description": "The Uri to the docker file.",
              "type": "string"
            },
            "generatedDockerFileUri": {
              "format": "uri",
              "description": "The Uri to the generated docker file.",
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "WEBAPICONTAINER"
    },
    "ModelDataCollection": {
      "description": "The Model data collection properties.",
      "type": "object",
      "properties": {
        "eventHubEnabled": {
          "description": "Option for enabling/disabling Event Hub.",
          "type": "boolean"
        },
        "storageEnabled": {
          "description": "Option for enabling/disabling storage.",
          "type": "boolean"
        }
      }
    },
    "VnetConfiguration": {
      "type": "object",
      "properties": {
        "vnetName": {
          "description": "vnetName",
          "type": "string"
        },
        "subnetName": {
          "description": "subnetName",
          "type": "string"
        }
      }
    },
    "EncryptionProperties": {
      "type": "object",
      "properties": {
        "vaultBaseUrl": {
          "format": "uri",
          "description": "vault base Url",
          "type": "string"
        },
        "keyName": {
          "description": "Encryption Key name",
          "type": "string"
        },
        "keyVersion": {
          "description": "Encryption Key Version",
          "type": "string"
        }
      }
    },
    "ACIServiceResponse": {
      "description": "The response for an ACI service.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "containerResourceRequirements": {
              "description": "The container resource requirements.",
              "allOf": [
                {
                  "$ref": "#/definitions/ContainerResourceRequirements"
                }
              ]
            },
            "imageId": {
              "description": "The Id of the Image.",
              "type": "string"
            },
            "imageDigest": {
              "description": "The Digest of the Image.",
              "type": "string"
            },
            "imageDetails": {
              "description": "The Image details.",
              "allOf": [
                {
                  "$ref": "#/definitions/DockerImageResponse"
                }
              ]
            },
            "scoringUri": {
              "format": "uri",
              "description": "The Uri for sending scoring requests.",
              "type": "string"
            },
            "location": {
              "description": "The location of the service.",
              "type": "string"
            },
            "authEnabled": {
              "description": "Whether or not authentication is enabled on the service.",
              "type": "boolean"
            },
            "sslEnabled": {
              "description": "Whether or not SSL is enabled.",
              "type": "boolean"
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "type": "boolean"
            },
            "dataCollection": {
              "description": "Details of the data collection options specified.",
              "allOf": [
                {
                  "$ref": "#/definitions/ModelDataCollection"
                }
              ]
            },
            "sslCertificate": {
              "description": "The SSL certificate to use if SSL is enabled.",
              "type": "string"
            },
            "sslKey": {
              "description": "The SSL key for the certificate.",
              "type": "string"
            },
            "cname": {
              "description": "The CName for the service.",
              "type": "string"
            },
            "publicIp": {
              "description": "The public IP address for the service.",
              "type": "string"
            },
            "publicFqdn": {
              "description": "The public Fqdn for the service.",
              "type": "string"
            },
            "swaggerUri": {
              "format": "uri",
              "description": "The Uri for sending swagger requests.",
              "type": "string"
            },
            "modelConfigMap": {
              "description": "Details on the models and configurations.",
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "models": {
              "description": "The list of models.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Model"
              }
            },
            "environmentImageRequest": {
              "description": "The Environment, models and assets used for inferencing.",
              "allOf": [
                {
                  "$ref": "#/definitions/EnvironmentImageRequest"
                }
              ]
            },
            "vnetConfiguration": {
              "description": "VnetConfiguration",
              "allOf": [
                {
                  "$ref": "#/definitions/VnetConfiguration"
                }
              ]
            },
            "encryptionProperties": {
              "description": "EncryptionProperties.",
              "allOf": [
                {
                  "$ref": "#/definitions/EncryptionProperties"
                }
              ]
            }
          }
        }
      ],
      "x-ms-discriminator-value": "ACI"
    },
    "ImageResponseBase": {
      "required": [
        "imageFlavor"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The image Id.",
          "type": "string",
          "example": "myimage:3"
        },
        "name": {
          "description": "The image name.",
          "type": "string",
          "example": "myimage:3"
        },
        "version": {
          "format": "int64",
          "description": "The image version.",
          "type": "integer",
          "example": 3
        },
        "digest": {
          "description": "The sha256-based digest of the image",
          "type": "string"
        },
        "description": {
          "description": "The image description.",
          "type": "string",
          "example": "My docker image."
        },
        "kvTags": {
          "description": "The image tag dictionary. Tags are mutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The image properties dictionary. Properties are immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdTime": {
          "format": "date-time",
          "description": "The time the image was created.",
          "type": "string"
        },
        "modifiedTime": {
          "format": "date-time",
          "description": "The time the image was last modified.",
          "type": "string"
        },
        "autoDelete": {
          "description": "Whether the image will be automatically deleted with the last service using it.",
          "type": "boolean"
        },
        "imageType": {
          "description": "The type of the image.",
          "enum": [
            "Docker"
          ],
          "type": "string",
          "example": "Docker",
          "x-ms-enum": {
            "name": "ImageType",
            "modelAsString": false
          }
        },
        "imageFlavor": {
          "description": "The flavor of the image.",
          "enum": [
            "WebApiContainer",
            "BatchContainer",
            "IoTContainer",
            "AccelContainer",
            "UserProvidedContainer"
          ],
          "type": "string",
          "example": "WebApiContainer",
          "x-ms-enum": {
            "name": "ImageFlavor",
            "modelAsString": false
          }
        },
        "creationState": {
          "description": "The state of the operation.",
          "enum": [
            "NotStarted",
            "Running",
            "Cancelled",
            "Succeeded",
            "Failed",
            "TimedOut"
          ],
          "type": "string",
          "example": "Running",
          "x-ms-enum": {
            "name": "AsyncOperationState",
            "modelAsString": false
          }
        },
        "error": {
          "description": "The error response.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          ]
        },
        "modelIds": {
          "description": "The list of model Ids.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "modelDetails": {
          "description": "The list of models.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          }
        },
        "imageLocation": {
          "description": "The Image location string.",
          "type": "string"
        },
        "imageBuildLogUri": {
          "format": "uri",
          "description": "The Uri to the image build logs.",
          "type": "string"
        },
        "operationId": {
          "description": "The ID of the asynchronous operation for this image.",
          "type": "string"
        }
      },
      "discriminator": "imageFlavor"
    },
    "AKSReplicaStatus": {
      "type": "object",
      "properties": {
        "desiredReplicas": {
          "format": "int32",
          "description": "The desired number of replicas.",
          "type": "integer",
          "example": 2
        },
        "updatedReplicas": {
          "format": "int32",
          "description": "The number of updated replicas.",
          "type": "integer",
          "example": 1
        },
        "availableReplicas": {
          "format": "int32",
          "description": "The number of available replicas.",
          "type": "integer",
          "example": 1
        },
        "error": {
          "description": "The error details.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelErrorResponse"
            }
          ]
        }
      }
    },
    "LivenessProbeRequirements": {
      "description": "The liveness probe requirements.",
      "type": "object",
      "properties": {
        "failureThreshold": {
          "format": "int32",
          "description": "The number of failures to allow before returning an unhealthy status.",
          "type": "integer"
        },
        "successThreshold": {
          "format": "int32",
          "description": "The number of successful probes before returning a healthy status.",
          "type": "integer"
        },
        "timeoutSeconds": {
          "format": "int32",
          "description": "The probe timeout in seconds.",
          "type": "integer"
        },
        "periodSeconds": {
          "format": "int32",
          "description": "The length of time between probes in seconds.",
          "type": "integer"
        },
        "initialDelaySeconds": {
          "format": "int32",
          "description": "The delay before the first probe in seconds.",
          "type": "integer"
        }
      }
    },
    "AKSServiceResponse": {
      "description": "The response for an AKS service.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AKSVariantResponse"
        },
        {
          "type": "object",
          "properties": {
            "imageDetails": {
              "description": "The Docker Image details.",
              "allOf": [
                {
                  "$ref": "#/definitions/ImageResponseBase"
                }
              ]
            },
            "imageId": {
              "description": "The Id of the Image.",
              "type": "string"
            },
            "imageDigest": {
              "description": "The Digest of the Image.",
              "type": "string"
            },
            "models": {
              "description": "The list of models.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Model"
              }
            },
            "containerResourceRequirements": {
              "description": "The container resource requirements.",
              "allOf": [
                {
                  "$ref": "#/definitions/ContainerResourceRequirements"
                }
              ]
            },
            "maxConcurrentRequestsPerContainer": {
              "format": "int32",
              "description": "The maximum number of concurrent requests per container.",
              "type": "integer",
              "example": 100
            },
            "maxQueueWaitMs": {
              "format": "int32",
              "description": "Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)",
              "type": "integer",
              "example": 250
            },
            "computeName": {
              "description": "The name of the compute resource.",
              "type": "string"
            },
            "namespace": {
              "description": "The Kubernetes namespace of the deployment.",
              "type": "string",
              "example": "default"
            },
            "numReplicas": {
              "format": "int32",
              "description": "The number of replicas on the cluster.",
              "type": "integer",
              "example": 1
            },
            "dataCollection": {
              "description": "Details of the data collection options specified.",
              "allOf": [
                {
                  "$ref": "#/definitions/ModelDataCollection"
                }
              ]
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "type": "boolean"
            },
            "autoScaler": {
              "description": "The auto scaler properties.",
              "allOf": [
                {
                  "$ref": "#/definitions/AutoScaler"
                }
              ]
            },
            "scoringUri": {
              "format": "uri",
              "description": "The Uri for sending scoring requests.",
              "type": "string"
            },
            "deploymentStatus": {
              "description": "The deployment status.",
              "allOf": [
                {
                  "$ref": "#/definitions/AKSReplicaStatus"
                }
              ]
            },
            "scoringTimeoutMs": {
              "format": "int32",
              "description": "The scoring timeout in milliseconds.",
              "type": "integer",
              "example": 100
            },
            "livenessProbeRequirements": {
              "description": "The liveness probe requirements.",
              "allOf": [
                {
                  "$ref": "#/definitions/LivenessProbeRequirements"
                }
              ]
            },
            "authEnabled": {
              "description": "Whether or not authentication is enabled.",
              "type": "boolean"
            },
            "aadAuthEnabled": {
              "description": "Whether or not AAD authentication is enabled.",
              "type": "boolean"
            },
            "swaggerUri": {
              "format": "uri",
              "description": "The Uri for sending swagger requests.",
              "type": "string"
            },
            "modelConfigMap": {
              "description": "Details on the models and configurations.",
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "environmentImageRequest": {
              "description": "The Environment, models and assets used for inferencing.",
              "allOf": [
                {
                  "$ref": "#/definitions/EnvironmentImageRequest"
                }
              ]
            }
          }
        }
      ],
      "x-ms-discriminator-value": "AKS"
    },
    "AKSEndpointResponse": {
      "description": "The response for an AKS Endpoint.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "computeName": {
              "description": "The name of the compute resource.",
              "type": "string"
            },
            "namespace": {
              "description": "The Kubernetes namespace of the deployment.",
              "type": "string",
              "example": "default"
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "type": "boolean"
            },
            "authEnabled": {
              "description": "Whether or not authentication is enabled.",
              "type": "boolean"
            },
            "aadAuthEnabled": {
              "description": "Whether or not AAD authentication is enabled.",
              "type": "boolean"
            },
            "swaggerUri": {
              "format": "uri",
              "description": "The Uri for sending swagger requests.",
              "type": "string"
            },
            "scoringUri": {
              "format": "uri",
              "description": "The Uri for sending scoring requests.",
              "type": "string"
            },
            "versions": {
              "description": "All the variants that belongs to this endpoint.",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/AKSServiceResponse"
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "AKSENDPOINT"
    },
    "AKSVariantResponse": {
      "description": "The response for an AKS variant.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "isDefault": {
              "description": "Is this the default variant.",
              "type": "boolean"
            },
            "trafficPercentile": {
              "format": "float",
              "description": "The amount of traffic variant receives.",
              "type": "number",
              "example": 100
            },
            "type": {
              "description": "The type of the variant.",
              "enum": [
                "Control",
                "Treatment"
              ],
              "type": "string",
              "example": "Control",
              "x-ms-enum": {
                "name": "VariantType",
                "modelAsString": false
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Custom"
    },
    "BatchServiceResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "modelIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "computeName": {
              "type": "string"
            },
            "environmentName": {
              "type": "string"
            },
            "environmentVersion": {
              "type": "string"
            },
            "scoringUri": {
              "format": "uri",
              "type": "string"
            },
            "appInsightsEnabled": {
              "type": "boolean"
            },
            "modelDataCollection": {
              "allOf": [
                {
                  "$ref": "#/definitions/ModelDataCollection"
                }
              ]
            },
            "entryScript": {
              "type": "string"
            },
            "inputFormat": {
              "type": "string"
            },
            "outputAction": {
              "type": "string"
            },
            "miniBatchSize": {
              "format": "int32",
              "type": "integer"
            },
            "errorThreshold": {
              "format": "double",
              "type": "number"
            },
            "nodeCount": {
              "format": "int32",
              "type": "integer"
            },
            "processCountPerNode": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "AMLCOMPUTE"
    },
    "IotModuleSettings": {
      "type": "object",
      "properties": {
        "imageLocation": {
          "type": "string"
        },
        "moduleName": {
          "type": "string"
        },
        "propertiesDesired": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createOptions": {
          "type": "string"
        },
        "environmentVariables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "IotServiceResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "iotDeviceId": {
              "type": "string"
            },
            "routes": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "computeName": {
              "type": "string"
            },
            "iotEdgeModules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IotModuleSettings"
              }
            },
            "authEnabled": {
              "type": "boolean"
            },
            "imageDetails": {
              "allOf": [
                {
                  "$ref": "#/definitions/ImageResponseBase"
                }
              ]
            },
            "imageId": {
              "type": "string"
            },
            "imageDigest": {
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "IOT"
    },
    "MirRevisionStatus": {
      "type": "object",
      "properties": {
        "lastCreatedRevision": {
          "description": "The revision associated with the last MIR Spec specified by the user.",
          "type": "string",
          "example": "mir-serv-b9ce679b3fc3dff40f358014affca004-787cb6448b"
        },
        "lastReadyRevision": {
          "description": "The revision associated with the last MIR Spec that was last ready.",
          "type": "string",
          "example": "mir-serv-b9ce679b3fc3dff40f358014affca004-594744c7f9"
        }
      }
    },
    "MirServiceResponse": {
      "description": "The response for an MIR service.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "sku": {
              "description": "Long form of Azure SKU to use. Optional. Will default in MIR Service.",
              "type": "string"
            },
            "imageDetails": {
              "description": "The Docker Image details.",
              "allOf": [
                {
                  "$ref": "#/definitions/ImageResponseBase"
                }
              ]
            },
            "imageId": {
              "description": "The Id of the Image.",
              "type": "string"
            },
            "imageDigest": {
              "description": "The Digest of the Image.",
              "type": "string"
            },
            "models": {
              "description": "The list of models.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Model"
              }
            },
            "containerResourceRequirements": {
              "description": "The container resource requirements.",
              "allOf": [
                {
                  "$ref": "#/definitions/ContainerResourceRequirements"
                }
              ]
            },
            "maxConcurrentRequestsPerContainer": {
              "format": "int32",
              "description": "The maximum number of concurrent requests per container.",
              "type": "integer",
              "example": 100
            },
            "computeName": {
              "description": "The name of the compute resource.",
              "type": "string"
            },
            "numReplicas": {
              "format": "int32",
              "description": "The number of replicas on the cluster.",
              "type": "integer",
              "example": 1
            },
            "dataCollection": {
              "description": "Details of the data collection options specified.",
              "allOf": [
                {
                  "$ref": "#/definitions/ModelDataCollection"
                }
              ]
            },
            "autoScaler": {
              "description": "The auto scaler properties.",
              "allOf": [
                {
                  "$ref": "#/definitions/AutoScaler"
                }
              ]
            },
            "scoringUri": {
              "format": "uri",
              "description": "The Uri for sending scoring requests.",
              "type": "string"
            },
            "deploymentStatus": {
              "description": "The deployment status of the MIR currently deployed.",
              "allOf": [
                {
                  "$ref": "#/definitions/MirRevisionStatus"
                }
              ]
            },
            "scoringTimeoutMs": {
              "format": "int32",
              "description": "The scoring timeout in milliseconds.",
              "type": "integer",
              "example": 100
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "type": "boolean"
            },
            "livenessProbeRequirements": {
              "description": "The liveness probe requirements.",
              "allOf": [
                {
                  "$ref": "#/definitions/LivenessProbeRequirements"
                }
              ]
            },
            "authEnabled": {
              "description": "Whether or not authentication is enabled.",
              "type": "boolean"
            },
            "aadAuthEnabled": {
              "description": "Whether or not AAD authentication is enabled.",
              "type": "boolean"
            },
            "environmentImageRequest": {
              "description": "The Environment, models and assets used for inferencing.",
              "allOf": [
                {
                  "$ref": "#/definitions/EnvironmentImageRequest"
                }
              ]
            },
            "tlsMode": {
              "format": "int32",
              "description": "TLS mode for scoring authentication, options are \"DISABLED\", \"SIMPLE\", \"MUTUAL\"",
              "enum": [
                "DISABLED",
                "SIMPLE",
                "MUTUAL"
              ],
              "type": "integer",
              "x-ms-enum": {
                "name": "TlsMode",
                "modelAsString": false
              }
            },
            "certificateFingerprints": {
              "description": "List of fingerprints for scoring authentication",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "MIR"
    },
    "UnknownServiceResponse": {
      "description": "The response for an unsupported Service\r\nDefines the basic service properties",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceResponseBase"
        },
        {
          "type": "object"
        }
      ],
      "x-ms-discriminator-value": "UNKNOWN"
    },
    "ACIServiceCreateRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CreateServiceRequest"
        },
        {
          "type": "object",
          "properties": {
            "authEnabled": {
              "description": "Whether or not authentication is enabled on the service.",
              "default": false,
              "type": "boolean"
            },
            "sslEnabled": {
              "description": "Whether or not SSL is enabled.",
              "default": false,
              "type": "boolean"
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "default": false,
              "type": "boolean"
            },
            "dataCollection": {
              "description": "Details of the data collection options specified.",
              "allOf": [
                {
                  "$ref": "#/definitions/ModelDataCollection"
                }
              ]
            },
            "sslCertificate": {
              "description": "The SSL certificate to use if SSL is enabled.",
              "type": "string"
            },
            "sslKey": {
              "description": "The SSL key for the certificate.",
              "type": "string"
            },
            "cname": {
              "description": "The CName for the service.",
              "type": "string"
            },
            "dnsNameLabel": {
              "description": "The Dns label for the service.",
              "type": "string"
            },
            "vnetConfiguration": {
              "description": "VnetConfiguration",
              "allOf": [
                {
                  "$ref": "#/definitions/VnetConfiguration"
                }
              ]
            },
            "encryptionProperties": {
              "description": "EncryptionProperties.",
              "allOf": [
                {
                  "$ref": "#/definitions/EncryptionProperties"
                }
              ]
            }
          }
        }
      ],
      "x-ms-discriminator-value": "ACI"
    },
    "AKSServiceCreateRequest": {
      "description": "The request to create an AKS service.",
      "required": [
        "name"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CreateEndpointVariantRequest"
        },
        {
          "type": "object",
          "properties": {
            "numReplicas": {
              "format": "int32",
              "description": "The number of replicas on the cluster.",
              "type": "integer",
              "example": 1
            },
            "dataCollection": {
              "description": "Details of the data collection options specified.",
              "allOf": [
                {
                  "$ref": "#/definitions/ModelDataCollection"
                }
              ]
            },
            "computeName": {
              "description": "The name of the compute resource.",
              "type": "string"
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "type": "boolean"
            },
            "autoScaler": {
              "description": "The auto scaler properties.",
              "allOf": [
                {
                  "$ref": "#/definitions/AutoScaler"
                }
              ]
            },
            "maxConcurrentRequestsPerContainer": {
              "format": "int32",
              "description": "The maximum number of concurrent requests per container.",
              "type": "integer",
              "example": 100
            },
            "maxQueueWaitMs": {
              "format": "int32",
              "description": "Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)",
              "type": "integer",
              "example": 250
            },
            "namespace": {
              "description": "Kubernetes namespace for the service.",
              "type": "string",
              "example": "default"
            },
            "scoringTimeoutMs": {
              "format": "int32",
              "description": "The scoring timeout in milliseconds.",
              "type": "integer",
              "example": 100
            },
            "authEnabled": {
              "description": "Whether or not authentication is enabled.",
              "type": "boolean"
            },
            "livenessProbeRequirements": {
              "description": "The liveness probe requirements.",
              "allOf": [
                {
                  "$ref": "#/definitions/LivenessProbeRequirements"
                }
              ]
            },
            "aadAuthEnabled": {
              "description": "Whether or not AAD authentication is enabled.",
              "type": "boolean"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "AKS"
    },
    "CreateEndpointRequest": {
      "description": "The request to create an Endpoint in the AKS.",
      "required": [
        "name"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CreateServiceRequest"
        },
        {
          "type": "object",
          "properties": {
            "computeName": {
              "description": "The name of the compute resource.",
              "type": "string"
            },
            "appInsightsEnabled": {
              "description": "Whether or not Application Insights is enabled.",
              "type": "boolean"
            },
            "authEnabled": {
              "description": "Whether or not authentication is enabled.",
              "type": "boolean"
            },
            "aadAuthEnabled": {
              "description": "Whether or not AAD authentication is enabled.",
              "type": "boolean"
            },
            "namespace": {
              "description": "Kubernetes namespace for the service.",
              "type": "string",
              "example": "default"
            },
            "versions": {
              "description": "The service tag list.",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/AKSServiceCreateRequest"
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "AKSENDPOINT"
    },
    "CreateEndpointVariantRequest": {
      "description": "The Variant properties.",
      "required": [
        "name"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CreateServiceRequest"
        },
        {
          "type": "object",
          "properties": {
            "isDefault": {
              "description": "Is this the default variant.",
              "type": "boolean"
            },
            "trafficPercentile": {
              "format": "float",
              "description": "The amount of traffic variant receives.",
              "type": "number",
              "example": 100
            },
            "type": {
              "description": "The type of the variant.",
              "enum": [
                "Control",
                "Treatment"
              ],
              "type": "string",
              "example": "Control",
              "x-ms-enum": {
                "name": "VariantType",
                "modelAsString": false
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Custom"
    },
    "IotBaseModuleSettings": {
      "type": "object",
      "properties": {
        "moduleName": {
          "type": "string"
        },
        "propertiesDesired": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createOptions": {
          "type": "string"
        },
        "environmentVariables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CreateIotServiceRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CreateServiceRequest"
        },
        {
          "type": "object",
          "properties": {
            "iotDeviceId": {
              "type": "string"
            },
            "routes": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "iotEdgeUserModule": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IotModuleSettings"
              }
            },
            "iotEdgeModule": {
              "allOf": [
                {
                  "$ref": "#/definitions/IotBaseModuleSettings"
                }
              ]
            },
            "computeName": {
              "type": "string"
            },
            "acrCredentials": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RegistryInfo"
              }
            },
            "authEnabled": {
              "type": "boolean"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "IOT"
    },
    "FPGADockerImageResponse": {
      "description": "The FPGA Docker Image response.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ImageResponseBase"
        },
        {
          "type": "object"
        }
      ],
      "x-ms-discriminator-value": "ACCELCONTAINER"
    }
  },
  "parameters": {
    "subscriptionIdParameter": {
      "in": "path",
      "name": "subscriptionId",
      "description": "The Azure Subscription ID.",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method"
    },
    "resourceGroupParameter": {
      "in": "path",
      "name": "resourceGroup",
      "description": "The Name of the resource group in which the workspace is located.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "workspaceParameter": {
      "in": "path",
      "name": "workspace",
      "description": "The name of the workspace.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}
