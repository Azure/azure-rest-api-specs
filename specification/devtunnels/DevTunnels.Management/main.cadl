import "@cadl-lang/rest";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-autorest";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.ResourceManager;
using Azure.ResourceManager.Foundations;

@armProviderNamespace
@service({
  title: "Azure Dev Tunnels",
  version: "2023-05-23-preview",
})
@useDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
namespace Microsoft.DevTunnels;

interface Operations extends Azure.ResourceManager.Operations { }

@doc("Provisioning state enum")
enum ProvisioningState {
    Succeeded,
    Failed,
    Canceled
}

@doc("The properties of TunnelPlan")
model TunnelPlanProperties {
  @doc("The billing tier for the plan")
  billingTier: string;

  @doc("The provisioning state of the plan")
  @visibility("read")
  provisioningState?: ProvisioningState
}

@doc("A Tunnel Plan resource")
model TunnelPlanResource is TrackedResource<TunnelPlanProperties> {
  @key("planName")
  @segment("tunnelPlans")
  @doc("The name of the Tunnel Plan")
  @visibility("read")
  @path
  @pattern("^[a-zA-Z0-9-]{3,24}$")
  name: string;

  ...EntityTag;
}

@doc("The response to a getToken request")
model GetTokenResponse {
    @doc("The TunnelPlan token")
    token: string;
}

@armResourceOperations
interface TunnelPlans {
  @autoRoute
  @armResourceAction(TResource)
  @post
  @doc("POST ARM resource action with no body")
  op ArmResourceActionNoBodySync<
    TResource extends ArmResource,
    TResponse extends object,
    TBaseParameters = BaseParameters<TResource>
  >(
    ...ResourceInstanceParameters<TResource, TBaseParameters>
  ): ArmResponse<TResponse> | ErrorResponse;

  get is ArmResourceRead<TunnelPlanResource>;
  createOrUpdate is ArmResourceCreateOrUpdateSync<TunnelPlanResource>;
  update is ArmResourcePatchSync<TunnelPlanResource, TunnelPlanProperties>;
  delete is ArmResourceDeleteSync<TunnelPlanResource>;
  listByResourceGroup is ArmResourceListByParent<TunnelPlanResource>;
  listBySubscription is ArmListBySubscription<TunnelPlanResource>;
  @doc("Get a Tunnel Plan token")
  ListToken is TunnelPlans.ArmResourceActionNoBodySync<TunnelPlanResource, GetTokenResponse>
}

@doc("The properties of a billing plan")
model BillingPlanProperties {
    @doc("Description of the billing plan")
    description: string;

    @doc("The provisioning state of the plan")
    @visibility("read")
    provisioningState?: ProvisioningState
}

@subscriptionResource
model BillingPlanResource is ProxyResource<BillingPlanProperties>
{
    @doc("Plans name")
    @visibility("read")
    @key
    @path
    @segment("billingPlans")
    name: string;
}

@armResourceOperations(BillingPlanResource)
interface BillingPlans extends ResourceListBySubscription<BillingPlanResource>{ }
