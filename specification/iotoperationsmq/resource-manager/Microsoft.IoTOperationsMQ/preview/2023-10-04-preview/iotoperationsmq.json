{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft.IoTOperationsMQ management service",
    "version": "2023-10-04-preview",
    "description": "Microsoft.IoTOperationsMQ Resource Provider management API.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "Mq"
    },
    {
      "name": "Broker"
    },
    {
      "name": "BrokerListener"
    },
    {
      "name": "BrokerAuthentication"
    },
    {
      "name": "BrokerAuthorization"
    },
    {
      "name": "MqttBridgeConnector"
    },
    {
      "name": "MqttBridgeTopicMap"
    },
    {
      "name": "DiagnosticService"
    },
    {
      "name": "DataLakeConnector"
    },
    {
      "name": "DataLakeConnectorTopicMap"
    },
    {
      "name": "KafkaConnector"
    },
    {
      "name": "KafkaConnectorTopicMap"
    }
  ],
  "paths": {
    "/providers/Microsoft.IoTOperationsMQ/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Operations_List": {
            "$ref": "./examples/Operations_List_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.IoTOperationsMQ/mq": {
      "get": {
        "operationId": "Mq_ListBySubscription",
        "tags": [
          "Mq"
        ],
        "description": "List MqResource resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Mq_ListBySubscription": {
            "$ref": "./examples/Mq_ListBySubscription_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq": {
      "get": {
        "operationId": "Mq_ListByResourceGroup",
        "tags": [
          "Mq"
        ],
        "description": "List MqResource resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Mq_ListByResourceGroup": {
            "$ref": "./examples/Mq_ListByResourceGroup_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}": {
      "get": {
        "operationId": "Mq_Get",
        "tags": [
          "Mq"
        ],
        "description": "Get a MqResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Mq_Get": {
            "$ref": "./examples/Mq_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "Mq_CreateOrUpdate",
        "tags": [
          "Mq"
        ],
        "description": "Create a MqResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'MqResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/MqResource"
            }
          },
          "201": {
            "description": "Resource 'MqResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/MqResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Mq_CreateOrUpdate": {
            "$ref": "./examples/Mq_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Mq_Update",
        "tags": [
          "Mq"
        ],
        "description": "Update a MqResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Mq_Update": {
            "$ref": "./examples/Mq_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "Mq_Delete",
        "tags": [
          "Mq"
        ],
        "description": "Delete a MqResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Mq_Delete": {
            "$ref": "./examples/Mq_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker": {
      "get": {
        "operationId": "Broker_ListByMqResource",
        "tags": [
          "Broker"
        ],
        "description": "List BrokerResource resources by MqResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Broker_ListByMqResource": {
            "$ref": "./examples/Broker_ListByMqResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}": {
      "get": {
        "operationId": "Broker_Get",
        "tags": [
          "Broker"
        ],
        "description": "Get a BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Broker_Get": {
            "$ref": "./examples/Broker_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "Broker_CreateOrUpdate",
        "tags": [
          "Broker"
        ],
        "description": "Create a BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'BrokerResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/BrokerResource"
            }
          },
          "201": {
            "description": "Resource 'BrokerResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/BrokerResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Broker_CreateOrUpdate": {
            "$ref": "./examples/Broker_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Broker_Update",
        "tags": [
          "Broker"
        ],
        "description": "Update a BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Broker_Update": {
            "$ref": "./examples/Broker_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "Broker_Delete",
        "tags": [
          "Broker"
        ],
        "description": "Delete a BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Broker_Delete": {
            "$ref": "./examples/Broker_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/authentication": {
      "get": {
        "operationId": "BrokerAuthentication_ListByBrokerResource",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "List BrokerAuthenticationResource resources by BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthentication_ListByBrokerResource": {
            "$ref": "./examples/BrokerAuthentication_ListByBrokerResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/authentication/{authenticationName}": {
      "get": {
        "operationId": "BrokerAuthentication_Get",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Get a BrokerAuthenticationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of MQ broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthentication_Get": {
            "$ref": "./examples/BrokerAuthentication_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "BrokerAuthentication_CreateOrUpdate",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Create a BrokerAuthenticationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of MQ broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'BrokerAuthenticationResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResource"
            }
          },
          "201": {
            "description": "Resource 'BrokerAuthenticationResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthentication_CreateOrUpdate": {
            "$ref": "./examples/BrokerAuthentication_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "BrokerAuthentication_Update",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Update a BrokerAuthenticationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of MQ broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthenticationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthentication_Update": {
            "$ref": "./examples/BrokerAuthentication_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "BrokerAuthentication_Delete",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Delete a BrokerAuthenticationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of MQ broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthentication_Delete": {
            "$ref": "./examples/BrokerAuthentication_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/authorization": {
      "get": {
        "operationId": "BrokerAuthorization_ListByBrokerResource",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "List BrokerAuthorizationResource resources by BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthorization_ListByBrokerResource": {
            "$ref": "./examples/BrokerAuthorization_ListByBrokerResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/authorization/{authorizationName}": {
      "get": {
        "operationId": "BrokerAuthorization_Get",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Get a BrokerAuthorizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of MQ broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthorization_Get": {
            "$ref": "./examples/BrokerAuthorization_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "BrokerAuthorization_CreateOrUpdate",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Create a BrokerAuthorizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of MQ broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'BrokerAuthorizationResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResource"
            }
          },
          "201": {
            "description": "Resource 'BrokerAuthorizationResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthorization_CreateOrUpdate": {
            "$ref": "./examples/BrokerAuthorization_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "BrokerAuthorization_Update",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Update a BrokerAuthorizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of MQ broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerAuthorizationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthorization_Update": {
            "$ref": "./examples/BrokerAuthorization_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "BrokerAuthorization_Delete",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Delete a BrokerAuthorizationResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of MQ broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerAuthorization_Delete": {
            "$ref": "./examples/BrokerAuthorization_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/listener": {
      "get": {
        "operationId": "BrokerListener_ListByBrokerResource",
        "tags": [
          "BrokerListener"
        ],
        "description": "List BrokerListenerResource resources by BrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerListenerResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerListener_ListByBrokerResource": {
            "$ref": "./examples/BrokerListener_ListByBrokerResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/listener/{listenerName}": {
      "get": {
        "operationId": "BrokerListener_Get",
        "tags": [
          "BrokerListener"
        ],
        "description": "Get a BrokerListenerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of MQ broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerListenerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerListener_Get": {
            "$ref": "./examples/BrokerListener_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "BrokerListener_CreateOrUpdate",
        "tags": [
          "BrokerListener"
        ],
        "description": "Create a BrokerListenerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of MQ broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerListenerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'BrokerListenerResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/BrokerListenerResource"
            }
          },
          "201": {
            "description": "Resource 'BrokerListenerResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/BrokerListenerResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerListener_CreateOrUpdate": {
            "$ref": "./examples/BrokerListener_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "BrokerListener_Update",
        "tags": [
          "BrokerListener"
        ],
        "description": "Update a BrokerListenerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of MQ broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrokerListenerResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/BrokerListenerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerListener_Update": {
            "$ref": "./examples/BrokerListener_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "BrokerListener_Delete",
        "tags": [
          "BrokerListener"
        ],
        "description": "Delete a BrokerListenerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of MQ broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "BrokerListener_Delete": {
            "$ref": "./examples/BrokerListener_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/dataLakeConnector": {
      "get": {
        "operationId": "DataLakeConnector_ListByMqResource",
        "tags": [
          "DataLakeConnector"
        ],
        "description": "List DataLakeConnectorResource resources by MqResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DataLakeConnectorResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DataLakeConnector_ListByMqResource": {
            "$ref": "./examples/DataLakeConnector_ListByMqResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/dataLakeConnector/{dataLakeConnectorName}": {
      "get": {
        "operationId": "DataLakeConnector_Get",
        "tags": [
          "DataLakeConnector"
        ],
        "description": "Get a DataLakeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DataLakeConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DataLakeConnector_Get": {
            "$ref": "./examples/DataLakeConnector_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "DataLakeConnector_CreateOrUpdate",
        "tags": [
          "DataLakeConnector"
        ],
        "description": "Create a DataLakeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataLakeConnectorResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DataLakeConnectorResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/DataLakeConnectorResource"
            }
          },
          "201": {
            "description": "Resource 'DataLakeConnectorResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/DataLakeConnectorResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DataLakeConnector_CreateOrUpdate": {
            "$ref": "./examples/DataLakeConnector_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "DataLakeConnector_Update",
        "tags": [
          "DataLakeConnector"
        ],
        "description": "Update a DataLakeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataLakeConnectorResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DataLakeConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DataLakeConnector_Update": {
            "$ref": "./examples/DataLakeConnector_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "DataLakeConnector_Delete",
        "tags": [
          "DataLakeConnector"
        ],
        "description": "Delete a DataLakeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DataLakeConnector_Delete": {
            "$ref": "./examples/DataLakeConnector_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/dataLakeConnector/{dataLakeConnectorName}/topicMap": {
      "get": {
        "operationId": "DataLakeConnectorTopicMap_ListByDataLakeConnectorResource",
        "tags": [
          "DataLakeConnectorTopicMap"
        ],
        "description": "List DataLakeTopicMapResource resources by DataLakeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DataLakeTopicMapResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DataLakeConnectorTopicMap_ListByDataLakeConnectorResource": {
            "$ref": "./examples/DataLakeConnectorTopicMap_ListByDataLakeConnectorResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/dataLakeConnector/{dataLakeConnectorName}/topicMap/{topicMapName}": {
      "get": {
        "operationId": "DataLakeConnectorTopicMap_Get",
        "tags": [
          "DataLakeConnectorTopicMap"
        ],
        "description": "Get a DataLakeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DataLakeTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DataLakeConnectorTopicMap_Get": {
            "$ref": "./examples/DataLakeConnectorTopicMap_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "DataLakeConnectorTopicMap_CreateOrUpdate",
        "tags": [
          "DataLakeConnectorTopicMap"
        ],
        "description": "Create a DataLakeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataLakeTopicMapResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DataLakeTopicMapResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/DataLakeTopicMapResource"
            }
          },
          "201": {
            "description": "Resource 'DataLakeTopicMapResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/DataLakeTopicMapResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DataLakeConnectorTopicMap_CreateOrUpdate": {
            "$ref": "./examples/DataLakeConnectorTopicMap_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "DataLakeConnectorTopicMap_Update",
        "tags": [
          "DataLakeConnectorTopicMap"
        ],
        "description": "Update a DataLakeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataLakeTopicMapResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DataLakeTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DataLakeConnectorTopicMap_Update": {
            "$ref": "./examples/DataLakeConnectorTopicMap_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "DataLakeConnectorTopicMap_Delete",
        "tags": [
          "DataLakeConnectorTopicMap"
        ],
        "description": "Delete a DataLakeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DataLakeConnectorTopicMap_Delete": {
            "$ref": "./examples/DataLakeConnectorTopicMap_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/diagnosticService": {
      "get": {
        "operationId": "DiagnosticService_ListByMqResource",
        "tags": [
          "DiagnosticService"
        ],
        "description": "List DiagnosticServiceResource resources by MqResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DiagnosticService_ListByMqResource": {
            "$ref": "./examples/DiagnosticService_ListByMqResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/diagnosticService/{diagnosticServiceName}": {
      "get": {
        "operationId": "DiagnosticService_Get",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Get a DiagnosticServiceResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of MQ diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DiagnosticService_Get": {
            "$ref": "./examples/DiagnosticService_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "DiagnosticService_CreateOrUpdate",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Create a DiagnosticServiceResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of MQ diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DiagnosticServiceResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResource"
            }
          },
          "201": {
            "description": "Resource 'DiagnosticServiceResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DiagnosticService_CreateOrUpdate": {
            "$ref": "./examples/DiagnosticService_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "DiagnosticService_Update",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Update a DiagnosticServiceResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of MQ diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DiagnosticServiceResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DiagnosticService_Update": {
            "$ref": "./examples/DiagnosticService_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "DiagnosticService_Delete",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Delete a DiagnosticServiceResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of MQ diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DiagnosticService_Delete": {
            "$ref": "./examples/DiagnosticService_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/kafkaConnector": {
      "get": {
        "operationId": "KafkaConnector_ListByMqResource",
        "tags": [
          "KafkaConnector"
        ],
        "description": "List KafkaConnectorResource resources by MqResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/KafkaConnectorResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "KafkaConnector_ListByMqResource": {
            "$ref": "./examples/KafkaConnector_ListByMqResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/kafkaConnector/{kafkaConnectorName}": {
      "get": {
        "operationId": "KafkaConnector_Get",
        "tags": [
          "KafkaConnector"
        ],
        "description": "Get a KafkaConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/KafkaConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "KafkaConnector_Get": {
            "$ref": "./examples/KafkaConnector_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "KafkaConnector_CreateOrUpdate",
        "tags": [
          "KafkaConnector"
        ],
        "description": "Create a KafkaConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KafkaConnectorResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'KafkaConnectorResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/KafkaConnectorResource"
            }
          },
          "201": {
            "description": "Resource 'KafkaConnectorResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/KafkaConnectorResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "KafkaConnector_CreateOrUpdate": {
            "$ref": "./examples/KafkaConnector_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "KafkaConnector_Update",
        "tags": [
          "KafkaConnector"
        ],
        "description": "Update a KafkaConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KafkaConnectorResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/KafkaConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "KafkaConnector_Update": {
            "$ref": "./examples/KafkaConnector_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "KafkaConnector_Delete",
        "tags": [
          "KafkaConnector"
        ],
        "description": "Delete a KafkaConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "KafkaConnector_Delete": {
            "$ref": "./examples/KafkaConnector_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/kafkaConnector/{kafkaConnectorName}/topicMap": {
      "get": {
        "operationId": "KafkaConnectorTopicMap_ListByKafkaConnectorResource",
        "tags": [
          "KafkaConnectorTopicMap"
        ],
        "description": "List KafkaTopicMapResource resources by KafkaConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/KafkaTopicMapResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "KafkaConnectorTopicMap_ListByKafkaConnectorResource": {
            "$ref": "./examples/KafkaConnectorTopicMap_ListByKafkaConnectorResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/kafkaConnector/{kafkaConnectorName}/topicMap/{topicMapName}": {
      "get": {
        "operationId": "KafkaConnectorTopicMap_Get",
        "tags": [
          "KafkaConnectorTopicMap"
        ],
        "description": "Get a KafkaTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ kafka/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/KafkaTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "KafkaConnectorTopicMap_Get": {
            "$ref": "./examples/KafkaConnectorTopicMap_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "KafkaConnectorTopicMap_CreateOrUpdate",
        "tags": [
          "KafkaConnectorTopicMap"
        ],
        "description": "Create a KafkaTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ kafka/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KafkaTopicMapResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'KafkaTopicMapResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/KafkaTopicMapResource"
            }
          },
          "201": {
            "description": "Resource 'KafkaTopicMapResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/KafkaTopicMapResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "KafkaConnectorTopicMap_CreateOrUpdate": {
            "$ref": "./examples/KafkaConnectorTopicMap_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "KafkaConnectorTopicMap_Update",
        "tags": [
          "KafkaConnectorTopicMap"
        ],
        "description": "Update a KafkaTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ kafka/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KafkaTopicMapResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/KafkaTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "KafkaConnectorTopicMap_Update": {
            "$ref": "./examples/KafkaConnectorTopicMap_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "KafkaConnectorTopicMap_Delete",
        "tags": [
          "KafkaConnectorTopicMap"
        ],
        "description": "Delete a KafkaTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ kafka/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "KafkaConnectorTopicMap_Delete": {
            "$ref": "./examples/KafkaConnectorTopicMap_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/mqttBridgeConnector": {
      "get": {
        "operationId": "MqttBridgeConnector_ListByMqResource",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "List MqttBridgeConnectorResource resources by MqResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeConnector_ListByMqResource": {
            "$ref": "./examples/MqttBridgeConnector_ListByMqResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/mqttBridgeConnector/{mqttBridgeConnectorName}": {
      "get": {
        "operationId": "MqttBridgeConnector_Get",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Get a MqttBridgeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeConnector_Get": {
            "$ref": "./examples/MqttBridgeConnector_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "MqttBridgeConnector_CreateOrUpdate",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Create a MqttBridgeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'MqttBridgeConnectorResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResource"
            }
          },
          "201": {
            "description": "Resource 'MqttBridgeConnectorResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeConnector_CreateOrUpdate": {
            "$ref": "./examples/MqttBridgeConnector_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "MqttBridgeConnector_Update",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Update a MqttBridgeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeConnectorResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeConnector_Update": {
            "$ref": "./examples/MqttBridgeConnector_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "MqttBridgeConnector_Delete",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Delete a MqttBridgeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeConnector_Delete": {
            "$ref": "./examples/MqttBridgeConnector_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/mqttBridgeConnector/{mqttBridgeConnectorName}/topicMap": {
      "get": {
        "operationId": "MqttBridgeTopicMap_ListByMqttBridgeConnectorResource",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "List MqttBridgeTopicMapResource resources by MqttBridgeConnectorResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeTopicMap_ListByMqttBridgeConnectorResource": {
            "$ref": "./examples/MqttBridgeTopicMap_ListByMqttBridgeConnectorResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/mqttBridgeConnector/{mqttBridgeConnectorName}/topicMap/{topicMapName}": {
      "get": {
        "operationId": "MqttBridgeTopicMap_Get",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Get a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeTopicMap_Get": {
            "$ref": "./examples/MqttBridgeTopicMap_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "MqttBridgeTopicMap_CreateOrUpdate",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Create a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'MqttBridgeTopicMapResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResource"
            }
          },
          "201": {
            "description": "Resource 'MqttBridgeTopicMapResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeTopicMap_CreateOrUpdate": {
            "$ref": "./examples/MqttBridgeTopicMap_CreateOrUpdate_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "MqttBridgeTopicMap_Update",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Update a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MqttBridgeTopicMapResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeTopicMap_Update": {
            "$ref": "./examples/MqttBridgeTopicMap_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "MqttBridgeTopicMap_Delete",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Delete a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MqttBridgeTopicMap_Delete": {
            "$ref": "./examples/MqttBridgeTopicMap_Delete_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "AuthorizationBasicRule": {
      "type": "object",
      "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
      "properties": {
        "brokerResources": {
          "type": "array",
          "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
          "items": {
            "$ref": "#/definitions/ResourceInfoDefinition"
          },
          "x-ms-identifiers": []
        },
        "principals": {
          "$ref": "#/definitions/PrincipalDefinition",
          "description": "This subfield defines the identities that represent the clients."
        }
      },
      "required": [
        "brokerResources",
        "principals"
      ]
    },
    "AuthorizationConfig": {
      "type": "object",
      "description": "Broker AuthorizationConfig properties",
      "properties": {
        "enableCache": {
          "type": "boolean",
          "description": "Enable caching of the authorization rules.",
          "default": true
        },
        "rules": {
          "type": "array",
          "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
          "items": {
            "$ref": "#/definitions/AuthorizationBasicRule"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "AutomaticCertMethod": {
      "type": "object",
      "description": "Automatic TLS server certificate management with cert-manager",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Lifetime of automatically-managed certificate.",
          "default": "720h"
        },
        "issuerRef": {
          "$ref": "#/definitions/CertManagerIssuerRef",
          "description": "cert-manager issuerRef."
        },
        "privateKey": {
          "$ref": "#/definitions/CertManagerPrivateKey",
          "description": "Cert Manager private key."
        },
        "renewBefore": {
          "type": "string",
          "description": "When to begin renewing automatically-managed certificate.",
          "default": "240h"
        },
        "san": {
          "$ref": "#/definitions/SanForCert",
          "description": "Additional SANs to include in the certificate."
        },
        "secretName": {
          "type": "string",
          "description": "Secret for storing server certificate. Any existing data will be overwritten."
        },
        "secretNamespace": {
          "type": "string",
          "description": "Certificate K8S namespace. Omit to use default namespace."
        }
      },
      "required": [
        "issuerRef"
      ]
    },
    "AutomaticCertMethodUpdate": {
      "type": "object",
      "description": "Automatic TLS server certificate management with cert-manager",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Lifetime of automatically-managed certificate.",
          "default": "720h"
        },
        "issuerRef": {
          "$ref": "#/definitions/CertManagerIssuerRefUpdate",
          "description": "cert-manager issuerRef."
        },
        "privateKey": {
          "$ref": "#/definitions/CertManagerPrivateKeyUpdate",
          "description": "Cert Manager private key."
        },
        "renewBefore": {
          "type": "string",
          "description": "When to begin renewing automatically-managed certificate.",
          "default": "240h"
        },
        "san": {
          "$ref": "#/definitions/SanForCertUpdate",
          "description": "Additional SANs to include in the certificate."
        },
        "secretName": {
          "type": "string",
          "description": "Secret for storing server certificate. Any existing data will be overwritten."
        },
        "secretNamespace": {
          "type": "string",
          "description": "Certificate K8S namespace. Omit to use default namespace."
        }
      }
    },
    "BackendChain": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "partitions": {
          "type": "integer",
          "format": "int32",
          "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "redundancyFactor": {
          "type": "integer",
          "format": "int32",
          "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryDiskTransferEnabled": {
          "type": "boolean",
          "description": "Defines whether disk transfer is enabled or not."
        },
        "temporaryDiskTransferHighWatermarkPercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryDiskTransferLowWatermarkPercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryMaxBackendMemUsagePercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryResourceLimits": {
          "$ref": "#/definitions/TemporaryResourceLimitsConfig",
          "description": "Defines the limits for resources of the backend instances of the MQTT broker."
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logical backend workers per pod.",
          "default": 1,
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "partitions",
        "redundancyFactor"
      ]
    },
    "BackendChainUpdate": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "partitions": {
          "type": "integer",
          "format": "int32",
          "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "redundancyFactor": {
          "type": "integer",
          "format": "int32",
          "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryDiskTransferEnabled": {
          "type": "boolean",
          "description": "Defines whether disk transfer is enabled or not."
        },
        "temporaryDiskTransferHighWatermarkPercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryDiskTransferLowWatermarkPercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryMaxBackendMemUsagePercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryResourceLimits": {
          "$ref": "#/definitions/TemporaryResourceLimitsConfigUpdate",
          "description": "Defines the limits for resources of the backend instances of the MQTT broker."
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logical backend workers per pod.",
          "default": 1,
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "BrokerAuthenticationProperties": {
      "type": "object",
      "description": "Broker Resource properties",
      "properties": {
        "authenticationMethods": {
          "type": "array",
          "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
          "items": {
            "$ref": "#/definitions/BrokerAuthenticatorMethods"
          },
          "x-ms-identifiers": []
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "authenticationMethods",
        "listenerRef"
      ]
    },
    "BrokerAuthenticationResource": {
      "type": "object",
      "description": "MQ broker/authentication resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/BrokerAuthenticationProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "BrokerAuthenticationResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerAuthenticationResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerAuthenticationResource items on this page",
          "items": {
            "$ref": "#/definitions/BrokerAuthenticationResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerAuthenticationResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerAuthenticationResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/BrokerAuthenticationResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "BrokerAuthenticationResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerAuthenticationResource.",
      "properties": {
        "authenticationMethods": {
          "type": "array",
          "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
          "items": {
            "$ref": "#/definitions/BrokerAuthenticatorMethods"
          },
          "x-ms-identifiers": []
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BrokerAuthenticatorCustomAuth": {
      "type": "object",
      "description": "Custom Authentication properties",
      "properties": {
        "x509": {
          "$ref": "#/definitions/BrokerAuthenticatorCustomAuthX509",
          "description": "X509 Custom Auth type details."
        }
      },
      "required": [
        "x509"
      ]
    },
    "BrokerAuthenticatorCustomAuthX509": {
      "type": "object",
      "description": "X509 Custom Authentication properties. NOTE - Enum only authenticator type supported at a time.",
      "properties": {
        "keyVault": {
          "$ref": "#/definitions/KeyVaultCertificateProperties",
          "description": "Keyvault X509 secret properties."
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "BrokerAuthenticatorMethodCustom": {
      "type": "object",
      "description": "Custom method for BrokerAuthentication",
      "properties": {
        "auth": {
          "$ref": "#/definitions/BrokerAuthenticatorCustomAuth",
          "description": "Custom Broker Authentication Method."
        },
        "caCertConfigMap": {
          "type": "string",
          "description": "CA cert config map to use."
        },
        "endpoint": {
          "type": "string",
          "description": "Endpoint to connect to."
        },
        "headers": {
          "type": "object",
          "description": "Configuration Headers to use.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "endpoint"
      ]
    },
    "BrokerAuthenticatorMethodSat": {
      "type": "object",
      "description": "Service Account Token for BrokerAuthentication",
      "properties": {
        "audiences": {
          "type": "array",
          "description": "List of allowed audience.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "audiences"
      ]
    },
    "BrokerAuthenticatorMethodSvid": {
      "type": "object",
      "description": "SVID for BrokerAuthentication",
      "properties": {
        "agentSocketPath": {
          "type": "string",
          "description": "Mounted socket path for spiffe agent."
        },
        "identityMaxRetry": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of re-tries to fetch identity.",
          "default": 3,
          "minimum": 0,
          "maximum": 4294967295
        },
        "identityWaitRetryMs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum time to wait before fetching identity again.",
          "default": 5000,
          "minimum": 0,
          "maximum": 9223372036854000000
        }
      },
      "required": [
        "agentSocketPath"
      ]
    },
    "BrokerAuthenticatorMethodUsernamePassword": {
      "type": "object",
      "description": "UsernamePassword for BrokerAuthentication",
      "properties": {
        "keyVault": {
          "$ref": "#/definitions/KeyVaultSecretProperties",
          "description": "Keyvault username password secret properties."
        },
        "secretName": {
          "type": "string",
          "description": "Secret where username and password are stored."
        }
      }
    },
    "BrokerAuthenticatorMethodX509": {
      "type": "object",
      "description": "X509 for BrokerAuthentication.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodX509Attributes",
          "description": "K8S Secret name to mount for username and password."
        },
        "trustedClientCaCertConfigMap": {
          "type": "string",
          "description": "Trusted client ca cert config map.",
          "default": "client-ca"
        }
      }
    },
    "BrokerAuthenticatorMethodX509Attributes": {
      "type": "object",
      "description": "BrokerAuthenticatorMethodX509Attributes properties. NOTE - Enum only type supported at a time.",
      "properties": {
        "keyVault": {
          "$ref": "#/definitions/KeyVaultSecretProperties",
          "description": "Keyvault x509 attributes secret properties."
        },
        "secretName": {
          "type": "string",
          "description": "Secret where x509 attributes are stored."
        }
      }
    },
    "BrokerAuthenticatorMethods": {
      "type": "object",
      "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
      "properties": {
        "custom": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodCustom",
          "description": "Custom Authentication Method."
        },
        "sat": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodSat",
          "description": "Service Account Token Method."
        },
        "svid": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodSvid",
          "description": "Service Account Token Method."
        },
        "usernamePassword": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodUsernamePassword",
          "description": "UsernamePassword Method."
        },
        "x509": {
          "$ref": "#/definitions/BrokerAuthenticatorMethodX509",
          "description": "X509 Method."
        }
      }
    },
    "BrokerAuthorizationProperties": {
      "type": "object",
      "description": "Broker Resource properties",
      "properties": {
        "authorizationPolicies": {
          "$ref": "#/definitions/AuthorizationConfig",
          "description": "The list of authorization policies supported by the Authorization Resource."
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "authorizationPolicies",
        "listenerRef"
      ]
    },
    "BrokerAuthorizationResource": {
      "type": "object",
      "description": "MQ broker/authorization resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/BrokerAuthorizationProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "BrokerAuthorizationResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerAuthorizationResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerAuthorizationResource items on this page",
          "items": {
            "$ref": "#/definitions/BrokerAuthorizationResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerAuthorizationResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerAuthorizationResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/BrokerAuthorizationResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "BrokerAuthorizationResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerAuthorizationResource.",
      "properties": {
        "authorizationPolicies": {
          "$ref": "#/definitions/AuthorizationConfig",
          "description": "The list of authorization policies supported by the Authorization Resource."
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BrokerDiagnostics": {
      "type": "object",
      "description": "Diagnostics setting specific to Broker",
      "properties": {
        "diagnosticServiceEndpoint": {
          "type": "string",
          "description": "Diagnostic Service endpoint"
        },
        "enableMetrics": {
          "type": "boolean",
          "description": "Knob to enable/disable metrics. Default = true",
          "default": true
        },
        "enableSelfCheck": {
          "type": "boolean",
          "description": "Enable self check on Broker via Probe.",
          "default": true
        },
        "enableSelfTracing": {
          "type": "boolean",
          "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
          "default": true
        },
        "enableTracing": {
          "type": "boolean",
          "description": "Knob to enable/disable entire tracing infrastructure.",
          "default": true
        },
        "logFormat": {
          "type": "string",
          "description": "Format for the logs generated.",
          "default": "text"
        },
        "logLevel": {
          "type": "string",
          "description": "Log level for the Broker.",
          "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
        },
        "maxCellMapLifetime": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum time for the CellMap to live.",
          "default": 60,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "metricUpdateFrequencySeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Metric update frequency in seconds.",
          "default": 30,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "probeImage": {
          "type": "string",
          "description": "Probe Image to run.",
          "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
        },
        "selfCheckFrequencySeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Frequency for the self check to run.",
          "default": 30,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "selfCheckTimeoutSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Time out period of the self check.",
          "default": 15,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "selfTraceFrequencySeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The frequency at which selfTrace should run.",
          "default": 30,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "spanChannelCapacity": {
          "type": "integer",
          "format": "int64",
          "description": "The number of the spans generated by the Tracing.",
          "default": 1000,
          "minimum": 0,
          "maximum": 9223372036854000000
        }
      }
    },
    "BrokerListenerProperties": {
      "type": "object",
      "description": "Broker Listener Resource properties",
      "properties": {
        "authenticationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authentication rules on Listener Port.",
          "default": false
        },
        "authorizationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
          "default": false
        },
        "brokerRef": {
          "type": "string",
          "description": "The k8s cr/resource reference of mq/broker."
        },
        "nodePort": {
          "type": "integer",
          "format": "int32",
          "description": "The node port to use on the Host node.",
          "minimum": 0,
          "maximum": 65535
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port to start Listening for connections on.",
          "minimum": 0,
          "maximum": 65535
        },
        "serviceName": {
          "type": "string",
          "description": "The service name to expose Listener port on.",
          "default": "aio-mq-dmqtt-frontend"
        },
        "serviceType": {
          "$ref": "#/definitions/ServiceType",
          "description": "The Kubernetes Service type to deploy for Listener.",
          "default": "clusterIp"
        },
        "tls": {
          "$ref": "#/definitions/TlsCertMethod",
          "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported"
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "brokerRef",
        "port"
      ]
    },
    "BrokerListenerResource": {
      "type": "object",
      "description": "MQ broker/listener resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/BrokerListenerProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "BrokerListenerResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerListenerResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerListenerResource items on this page",
          "items": {
            "$ref": "#/definitions/BrokerListenerResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerListenerResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerListenerResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/BrokerListenerResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "BrokerListenerResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerListenerResource.",
      "properties": {
        "authenticationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authentication rules on Listener Port.",
          "default": false
        },
        "authorizationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
          "default": false
        },
        "brokerRef": {
          "type": "string",
          "description": "The k8s cr/resource reference of mq/broker."
        },
        "nodePort": {
          "type": "integer",
          "format": "int32",
          "description": "The node port to use on the Host node.",
          "minimum": 0,
          "maximum": 65535
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port to start Listening for connections on.",
          "minimum": 0,
          "maximum": 65535
        },
        "serviceName": {
          "type": "string",
          "description": "The service name to expose Listener port on.",
          "default": "aio-mq-dmqtt-frontend"
        },
        "serviceType": {
          "$ref": "#/definitions/ServiceType",
          "description": "The Kubernetes Service type to deploy for Listener.",
          "default": "clusterIp"
        },
        "tls": {
          "$ref": "#/definitions/TlsCertMethodUpdate",
          "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported"
        }
      }
    },
    "BrokerMemoryProfile": {
      "type": "string",
      "description": "The memory profile settings of the Broker",
      "enum": [
        "tiny",
        "low",
        "medium",
        "high"
      ],
      "x-ms-enum": {
        "name": "BrokerMemoryProfile",
        "modelAsString": true,
        "values": [
          {
            "name": "tiny",
            "value": "tiny",
            "description": "Tiny memory profile."
          },
          {
            "name": "low",
            "value": "low",
            "description": "Low memory profile."
          },
          {
            "name": "medium",
            "value": "medium",
            "description": "Medium memory profile."
          },
          {
            "name": "high",
            "value": "high",
            "description": "High memory profile."
          }
        ]
      }
    },
    "BrokerProperties": {
      "type": "object",
      "description": "Broker Resource properties",
      "properties": {
        "authImage": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of Authentication Docker Image."
        },
        "brokerImage": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of Broker Docker Image."
        },
        "brokerNodeTolerations": {
          "$ref": "#/definitions/NodeTolerations",
          "description": "The details of Node Tolerations for Broker Pods."
        },
        "cardinality": {
          "$ref": "#/definitions/Cardinality",
          "description": "The cardinality details of the broker."
        },
        "diagnostics": {
          "$ref": "#/definitions/BrokerDiagnostics",
          "description": "The diagnostic details of the broker deployment."
        },
        "diskBackedMessageBufferSettings": {
          "$ref": "#/definitions/DiskBackedMessageBufferSettings",
          "description": "The settings of the disk-backed message buffer."
        },
        "encryptInternalTraffic": {
          "type": "boolean",
          "description": "The setting to enable or disable encryption of internal Traffic.",
          "default": true
        },
        "healthManagerImage": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of Health Manager Docker Image."
        },
        "healthManagerNodeTolerations": {
          "$ref": "#/definitions/NodeTolerations",
          "description": "The details of Node Tolerations for Health Manager Pods."
        },
        "internalCerts": {
          "$ref": "#/definitions/CertManagerCertOptions",
          "description": "Details of the internal CA cert that will be used to secure communication between pods."
        },
        "memoryProfile": {
          "$ref": "#/definitions/BrokerMemoryProfile",
          "description": "Memory profile of broker.",
          "default": "medium"
        },
        "mode": {
          "$ref": "#/definitions/RunMode",
          "description": "The Running Mode of the Broker Deployment."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "authImage",
        "brokerImage",
        "healthManagerImage",
        "mode"
      ]
    },
    "BrokerResource": {
      "type": "object",
      "description": "MQ broker resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/BrokerProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "BrokerResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerResource items on this page",
          "items": {
            "$ref": "#/definitions/BrokerResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/BrokerResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "BrokerResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerResource.",
      "properties": {
        "authImage": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of Authentication Docker Image."
        },
        "brokerImage": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of Broker Docker Image."
        },
        "brokerNodeTolerations": {
          "$ref": "#/definitions/NodeTolerationsUpdate",
          "description": "The details of Node Tolerations for Broker Pods."
        },
        "cardinality": {
          "$ref": "#/definitions/CardinalityUpdate",
          "description": "The cardinality details of the broker."
        },
        "diagnostics": {
          "$ref": "#/definitions/BrokerDiagnostics",
          "description": "The diagnostic details of the broker deployment."
        },
        "diskBackedMessageBufferSettings": {
          "$ref": "#/definitions/DiskBackedMessageBufferSettingsUpdate",
          "description": "The settings of the disk-backed message buffer."
        },
        "encryptInternalTraffic": {
          "type": "boolean",
          "description": "The setting to enable or disable encryption of internal Traffic.",
          "default": true
        },
        "healthManagerImage": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of Health Manager Docker Image."
        },
        "healthManagerNodeTolerations": {
          "$ref": "#/definitions/NodeTolerationsUpdate",
          "description": "The details of Node Tolerations for Health Manager Pods."
        },
        "internalCerts": {
          "$ref": "#/definitions/CertManagerCertOptionsUpdate",
          "description": "Details of the internal CA cert that will be used to secure communication between pods."
        },
        "memoryProfile": {
          "$ref": "#/definitions/BrokerMemoryProfile",
          "description": "Memory profile of broker.",
          "default": "medium"
        },
        "mode": {
          "$ref": "#/definitions/RunMode",
          "description": "The Running Mode of the Broker Deployment."
        }
      }
    },
    "Cardinality": {
      "type": "object",
      "description": "Cardinality properties",
      "properties": {
        "backendChain": {
          "$ref": "#/definitions/BackendChain",
          "description": "The backend broker desired properties"
        },
        "frontend": {
          "$ref": "#/definitions/Frontend",
          "description": "The frontend broker desired properties"
        }
      },
      "required": [
        "backendChain",
        "frontend"
      ]
    },
    "CardinalityUpdate": {
      "type": "object",
      "description": "Cardinality properties",
      "properties": {
        "backendChain": {
          "$ref": "#/definitions/BackendChainUpdate",
          "description": "The backend broker desired properties"
        },
        "frontend": {
          "$ref": "#/definitions/FrontendUpdate",
          "description": "The frontend broker desired properties"
        }
      }
    },
    "CertManagerCertOptions": {
      "type": "object",
      "description": "Cert Manager CA Cert properties",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Duration of CA cert.",
          "default": "720h"
        },
        "privateKey": {
          "$ref": "#/definitions/CertManagerPrivateKey",
          "description": "Cert Manager private key."
        },
        "renewBefore": {
          "type": "string",
          "description": "Renew before time of CA cert.",
          "default": "240h"
        }
      },
      "required": [
        "duration",
        "privateKey",
        "renewBefore"
      ]
    },
    "CertManagerCertOptionsUpdate": {
      "type": "object",
      "description": "Cert Manager CA Cert properties",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Duration of CA cert.",
          "default": "720h"
        },
        "privateKey": {
          "$ref": "#/definitions/CertManagerPrivateKeyUpdate",
          "description": "Cert Manager private key."
        },
        "renewBefore": {
          "type": "string",
          "description": "Renew before time of CA cert.",
          "default": "240h"
        }
      }
    },
    "CertManagerIssuerRef": {
      "type": "object",
      "description": "Cert-Manager issuerRef properties",
      "properties": {
        "group": {
          "type": "string",
          "description": "group of issuer.",
          "default": "cert-manager.io"
        },
        "kind": {
          "type": "string",
          "description": "kind of issuer (Issuer or ClusterIssuer)."
        },
        "name": {
          "type": "string",
          "description": "name of issuer."
        }
      },
      "required": [
        "group",
        "kind",
        "name"
      ]
    },
    "CertManagerIssuerRefUpdate": {
      "type": "object",
      "description": "Cert-Manager issuerRef properties",
      "properties": {
        "group": {
          "type": "string",
          "description": "group of issuer.",
          "default": "cert-manager.io"
        },
        "kind": {
          "type": "string",
          "description": "kind of issuer (Issuer or ClusterIssuer)."
        },
        "name": {
          "type": "string",
          "description": "name of issuer."
        }
      }
    },
    "CertManagerPrivateKey": {
      "type": "object",
      "description": "Cert Manager private key properties",
      "properties": {
        "algorithm": {
          "type": "string",
          "description": "algorithm for private key.",
          "default": "ECDSA"
        },
        "rotationPolicy": {
          "type": "string",
          "description": "cert-manager rotationPolicy.",
          "default": "Always"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "size of private key.",
          "default": 256,
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "algorithm",
        "rotationPolicy",
        "size"
      ]
    },
    "CertManagerPrivateKeyUpdate": {
      "type": "object",
      "description": "Cert Manager private key properties",
      "properties": {
        "algorithm": {
          "type": "string",
          "description": "algorithm for private key.",
          "default": "ECDSA"
        },
        "rotationPolicy": {
          "type": "string",
          "description": "cert-manager rotationPolicy.",
          "default": "Always"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "size of private key.",
          "default": 256,
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "ContainerImage": {
      "type": "object",
      "description": "Defines the Docker image details",
      "properties": {
        "pullPolicy": {
          "type": "string",
          "description": "Image pull policy."
        },
        "pullSecrets": {
          "type": "string",
          "description": "Image pull secrets."
        },
        "repository": {
          "type": "string",
          "description": "The Docker image name."
        },
        "tag": {
          "type": "string",
          "description": "The Docker  image tag."
        }
      },
      "required": [
        "repository",
        "tag"
      ]
    },
    "ContainerImageUpdate": {
      "type": "object",
      "description": "Defines the Docker image details",
      "properties": {
        "pullPolicy": {
          "type": "string",
          "description": "Image pull policy."
        },
        "pullSecrets": {
          "type": "string",
          "description": "Image pull secrets."
        },
        "repository": {
          "type": "string",
          "description": "The Docker image name."
        },
        "tag": {
          "type": "string",
          "description": "The Docker  image tag."
        }
      }
    },
    "DataLakeConnectorMap": {
      "type": "object",
      "description": "DataLake connector map route properties",
      "properties": {
        "allowedLatencySecs": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed latency for transferring data.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientId": {
          "type": "string",
          "description": "Client Id to use."
        },
        "maxMessagesPerBatch": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum messages to send per Batch.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "messagePayloadType": {
          "type": "string",
          "description": "Message payload type."
        },
        "mqttSourceTopic": {
          "type": "string",
          "description": "Mqtt source topic."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "Quality of Service.",
          "default": 1,
          "minimum": 0,
          "maximum": 2
        },
        "table": {
          "$ref": "#/definitions/DeltaTable",
          "description": "Delta table properties to use."
        }
      },
      "required": [
        "allowedLatencySecs",
        "clientId",
        "maxMessagesPerBatch",
        "messagePayloadType",
        "mqttSourceTopic",
        "table"
      ]
    },
    "DataLakeConnectorMapUpdate": {
      "type": "object",
      "description": "DataLake connector map route properties",
      "properties": {
        "allowedLatencySecs": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed latency for transferring data.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientId": {
          "type": "string",
          "description": "Client Id to use."
        },
        "maxMessagesPerBatch": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum messages to send per Batch.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "messagePayloadType": {
          "type": "string",
          "description": "Message payload type."
        },
        "mqttSourceTopic": {
          "type": "string",
          "description": "Mqtt source topic."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "Quality of Service.",
          "default": 1,
          "minimum": 0,
          "maximum": 2
        },
        "table": {
          "$ref": "#/definitions/DeltaTableUpdate",
          "description": "Delta table properties to use."
        }
      }
    },
    "DataLakeConnectorProperties": {
      "type": "object",
      "description": "MQ DataLakeConnector  Resource properties",
      "properties": {
        "databaseFormat": {
          "$ref": "#/definitions/DataLakeDatabaseFormat",
          "description": "DataLake database format to use."
        },
        "image": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of DataLakeConnector Docker Image."
        },
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of DataLakeConnector pods to spin up.",
          "minimum": 0,
          "maximum": 65535
        },
        "localBrokerConnection": {
          "$ref": "#/definitions/LocalBrokerConnectionSpec",
          "description": "The details for connecting with Local Broker."
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the DataLake Connector instances."
        },
        "nodeTolerations": {
          "$ref": "#/definitions/NodeTolerations",
          "description": "The Node Tolerations for the DataLake Connector pods."
        },
        "protocol": {
          "$ref": "#/definitions/MqttProtocol",
          "description": "The protocol to use for connecting with Brokers."
        },
        "target": {
          "$ref": "#/definitions/DataLakeTargetStorage",
          "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "databaseFormat",
        "image",
        "protocol",
        "target"
      ]
    },
    "DataLakeConnectorResource": {
      "type": "object",
      "description": "MQ dataLakeConnector resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DataLakeConnectorProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "DataLakeConnectorResourceListResult": {
      "type": "object",
      "description": "The response of a DataLakeConnectorResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DataLakeConnectorResource items on this page",
          "items": {
            "$ref": "#/definitions/DataLakeConnectorResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DataLakeConnectorResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DataLakeConnectorResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/DataLakeConnectorResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "DataLakeConnectorResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DataLakeConnectorResource.",
      "properties": {
        "databaseFormat": {
          "$ref": "#/definitions/DataLakeDatabaseFormat",
          "description": "DataLake database format to use."
        },
        "image": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of DataLakeConnector Docker Image."
        },
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of DataLakeConnector pods to spin up.",
          "minimum": 0,
          "maximum": 65535
        },
        "localBrokerConnection": {
          "$ref": "#/definitions/LocalBrokerConnectionSpecUpdate",
          "description": "The details for connecting with Local Broker."
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the DataLake Connector instances."
        },
        "nodeTolerations": {
          "$ref": "#/definitions/NodeTolerationsUpdate",
          "description": "The Node Tolerations for the DataLake Connector pods."
        },
        "protocol": {
          "$ref": "#/definitions/MqttProtocol",
          "description": "The protocol to use for connecting with Brokers."
        },
        "target": {
          "$ref": "#/definitions/DataLakeTargetStorageUpdate",
          "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time."
        }
      }
    },
    "DataLakeConnectorTopicMapProperties": {
      "type": "object",
      "description": "MQ DataLakeConnector TopicMap Resource properties",
      "properties": {
        "dataLakeConnectorRef": {
          "type": "string",
          "description": "DataLake Connector CRD to use."
        },
        "mapping": {
          "$ref": "#/definitions/DataLakeConnectorMap",
          "description": "TopicMap for DataLake connector."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "dataLakeConnectorRef",
        "mapping"
      ]
    },
    "DataLakeDatabaseFormat": {
      "type": "string",
      "description": "DataLake possible database formats",
      "enum": [
        "delta",
        "parquet"
      ],
      "x-ms-enum": {
        "name": "DataLakeDatabaseFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "delta",
            "value": "delta",
            "description": "Delta format."
          },
          {
            "name": "parquet",
            "value": "parquet",
            "description": "Parquet format."
          }
        ]
      }
    },
    "DataLakeFabricStorage": {
      "type": "object",
      "description": "DataLake Fabric Storage details.",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/DataLakeFabricStorageAuthentication",
          "description": "DataLake fabric storage authentication details."
        },
        "endpoint": {
          "type": "string",
          "description": "DataLake fabric storage endpoint to use."
        },
        "fabricPath": {
          "$ref": "#/definitions/FabricPathType",
          "description": "Fabric path type to use."
        },
        "guids": {
          "$ref": "#/definitions/FabricGuids",
          "description": "Fabric one lake Guids."
        },
        "names": {
          "$ref": "#/definitions/FabricNames",
          "description": "Fabric one lake Names."
        }
      },
      "required": [
        "authentication",
        "endpoint",
        "fabricPath"
      ]
    },
    "DataLakeFabricStorageAuthentication": {
      "type": "object",
      "description": "DataLake Fabric Storage authentication details.",
      "properties": {
        "systemAssignedManagedIdentity": {
          "$ref": "#/definitions/ManagedIdentityAuthentication",
          "description": "Configuration for managed identity authentication."
        }
      },
      "required": [
        "systemAssignedManagedIdentity"
      ]
    },
    "DataLakeFabricStorageAuthenticationUpdate": {
      "type": "object",
      "description": "DataLake Fabric Storage authentication details.",
      "properties": {
        "systemAssignedManagedIdentity": {
          "$ref": "#/definitions/ManagedIdentityAuthenticationUpdate",
          "description": "Configuration for managed identity authentication."
        }
      }
    },
    "DataLakeFabricStorageUpdate": {
      "type": "object",
      "description": "DataLake Fabric Storage details.",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/DataLakeFabricStorageAuthenticationUpdate",
          "description": "DataLake fabric storage authentication details."
        },
        "endpoint": {
          "type": "string",
          "description": "DataLake fabric storage endpoint to use."
        },
        "fabricPath": {
          "$ref": "#/definitions/FabricPathType",
          "description": "Fabric path type to use."
        },
        "guids": {
          "$ref": "#/definitions/FabricGuidsUpdate",
          "description": "Fabric one lake Guids."
        },
        "names": {
          "$ref": "#/definitions/FabricNamesUpdate",
          "description": "Fabric one lake Names."
        }
      }
    },
    "DataLakeLocalStorage": {
      "type": "object",
      "description": "DataLake Local Storage details.",
      "properties": {
        "volumeName": {
          "type": "string",
          "description": "Volume name to write to."
        }
      },
      "required": [
        "volumeName"
      ]
    },
    "DataLakeLocalStorageUpdate": {
      "type": "object",
      "description": "DataLake Local Storage details.",
      "properties": {
        "volumeName": {
          "type": "string",
          "description": "Volume name to write to."
        }
      }
    },
    "DataLakeServiceStorage": {
      "type": "object",
      "description": "DataLake Service Storage details.",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "DataLake service storage endpoint to use."
        },
        "authentication": {
          "$ref": "#/definitions/DataLakeServiceStorageAuthentication",
          "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported."
        }
      },
      "required": [
        "endpoint",
        "authentication"
      ]
    },
    "DataLakeServiceStorageAuthentication": {
      "type": "object",
      "description": "DataLake Service Storage authentication details. NOTE - Enum only one method is supported.",
      "properties": {
        "accessTokenSecretName": {
          "type": "string",
          "description": "Access token secret name."
        },
        "systemAssignedManagedIdentity": {
          "$ref": "#/definitions/ManagedIdentityAuthentication",
          "description": "Configuration for managed identity authentication."
        }
      }
    },
    "DataLakeServiceStorageAuthenticationUpdate": {
      "type": "object",
      "description": "DataLake Service Storage authentication details. NOTE - Enum only one method is supported.",
      "properties": {
        "accessTokenSecretName": {
          "type": "string",
          "description": "Access token secret name."
        },
        "systemAssignedManagedIdentity": {
          "$ref": "#/definitions/ManagedIdentityAuthenticationUpdate",
          "description": "Configuration for managed identity authentication."
        }
      }
    },
    "DataLakeServiceStorageUpdate": {
      "type": "object",
      "description": "DataLake Service Storage details.",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "DataLake service storage endpoint to use."
        },
        "authentication": {
          "$ref": "#/definitions/DataLakeServiceStorageAuthenticationUpdate",
          "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported."
        }
      }
    },
    "DataLakeTargetStorage": {
      "type": "object",
      "description": "Target storage for the DataLake. NOTE - Enum only storage is supported at a time.",
      "properties": {
        "datalakeStorage": {
          "$ref": "#/definitions/DataLakeServiceStorage",
          "description": "DataLake service storage details."
        },
        "localStorage": {
          "$ref": "#/definitions/DataLakeLocalStorage",
          "description": "Local storage details."
        },
        "fabricOneLake": {
          "$ref": "#/definitions/DataLakeFabricStorage",
          "description": "Fabric one lake storage details."
        }
      }
    },
    "DataLakeTargetStorageUpdate": {
      "type": "object",
      "description": "Target storage for the DataLake. NOTE - Enum only storage is supported at a time.",
      "properties": {
        "datalakeStorage": {
          "$ref": "#/definitions/DataLakeServiceStorageUpdate",
          "description": "DataLake service storage details."
        },
        "localStorage": {
          "$ref": "#/definitions/DataLakeLocalStorageUpdate",
          "description": "Local storage details."
        },
        "fabricOneLake": {
          "$ref": "#/definitions/DataLakeFabricStorageUpdate",
          "description": "Fabric one lake storage details."
        }
      }
    },
    "DataLakeTopicMapResource": {
      "type": "object",
      "description": "MQ dataLakeConnector/topicMap resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DataLakeConnectorTopicMapProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "DataLakeTopicMapResourceListResult": {
      "type": "object",
      "description": "The response of a DataLakeTopicMapResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DataLakeTopicMapResource items on this page",
          "items": {
            "$ref": "#/definitions/DataLakeTopicMapResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DataLakeTopicMapResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DataLakeTopicMapResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/DataLakeTopicMapResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "DataLakeTopicMapResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DataLakeTopicMapResource.",
      "properties": {
        "dataLakeConnectorRef": {
          "type": "string",
          "description": "DataLake Connector CRD to use."
        },
        "mapping": {
          "$ref": "#/definitions/DataLakeConnectorMapUpdate",
          "description": "TopicMap for DataLake connector."
        }
      }
    },
    "DeltaTable": {
      "type": "object",
      "description": "Delta table properties",
      "properties": {
        "schema": {
          "type": "array",
          "description": "Schema list supported.",
          "items": {
            "$ref": "#/definitions/DeltaTableSchema"
          },
          "x-ms-identifiers": []
        },
        "tableName": {
          "type": "string",
          "description": "Delta table name."
        },
        "tablePath": {
          "type": "string",
          "description": "Delta table path."
        }
      },
      "required": [
        "schema",
        "tableName"
      ]
    },
    "DeltaTableFormatEnum": {
      "type": "string",
      "description": "Delta table format properties",
      "enum": [
        "boolean",
        "int8",
        "int16",
        "int32",
        "uInt8",
        "uInt16",
        "uInt32",
        "uInt64",
        "float16",
        "float32",
        "float64",
        "date32",
        "date64",
        "binary",
        "utf8"
      ],
      "x-ms-enum": {
        "name": "DeltaTableFormatEnum",
        "modelAsString": true,
        "values": [
          {
            "name": "boolean",
            "value": "boolean",
            "description": "Bool format"
          },
          {
            "name": "int8",
            "value": "int8",
            "description": "Signed integer 8"
          },
          {
            "name": "int16",
            "value": "int16",
            "description": "Signed integer 16"
          },
          {
            "name": "int32",
            "value": "int32",
            "description": "Signed integer 32"
          },
          {
            "name": "uInt8",
            "value": "uInt8",
            "description": "Unsigned integer 8"
          },
          {
            "name": "uInt16",
            "value": "uInt16",
            "description": "Unsigned integer 16"
          },
          {
            "name": "uInt32",
            "value": "uInt32",
            "description": "Unsigned integer 32"
          },
          {
            "name": "uInt64",
            "value": "uInt64",
            "description": "Unsigned integer 64"
          },
          {
            "name": "float16",
            "value": "float16",
            "description": "Float 16"
          },
          {
            "name": "float32",
            "value": "float32",
            "description": "Float 32"
          },
          {
            "name": "float64",
            "value": "float64",
            "description": "Float 64"
          },
          {
            "name": "date32",
            "value": "date32",
            "description": "Date 32"
          },
          {
            "name": "date64",
            "value": "date64",
            "description": "Date 64"
          },
          {
            "name": "binary",
            "value": "binary",
            "description": "Binary data"
          },
          {
            "name": "utf8",
            "value": "utf8",
            "description": "UTF8 format"
          }
        ]
      }
    },
    "DeltaTableSchema": {
      "type": "object",
      "description": "Delta table schema properties",
      "properties": {
        "format": {
          "$ref": "#/definitions/DeltaTableFormatEnum",
          "description": "Delta table format supported."
        },
        "mapping": {
          "type": "string",
          "description": "Delta table schema mapping."
        },
        "name": {
          "type": "string",
          "description": "Delta table schema name."
        },
        "optional": {
          "type": "boolean",
          "description": "Delta table schema optional."
        }
      },
      "required": [
        "format",
        "mapping",
        "name",
        "optional"
      ]
    },
    "DeltaTableUpdate": {
      "type": "object",
      "description": "Delta table properties",
      "properties": {
        "schema": {
          "type": "array",
          "description": "Schema list supported.",
          "items": {
            "$ref": "#/definitions/DeltaTableSchema"
          },
          "x-ms-identifiers": []
        },
        "tableName": {
          "type": "string",
          "description": "Delta table name."
        },
        "tablePath": {
          "type": "string",
          "description": "Delta table path."
        }
      }
    },
    "DiagnosticServiceProperties": {
      "type": "object",
      "description": "MQ Diagnostic Services Resource properties",
      "properties": {
        "dataExportFrequencySeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The frequency at which the data will be exported.",
          "default": 10,
          "minimum": 0,
          "maximum": 65535
        },
        "image": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of Diagnostic Service Docker Image."
        },
        "logFormat": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "json"
        },
        "logLevel": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "info"
        },
        "maxDataStorageSize": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum data stored in MiB.",
          "default": 16,
          "minimum": 0,
          "maximum": 4294967295
        },
        "metricsPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port at which metrics is exposed.",
          "default": 9600,
          "minimum": 0,
          "maximum": 65535
        },
        "openTelemetryTracesCollectorAddr": {
          "type": "string",
          "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "staleDataTimeoutSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Metric inactivity timeout.",
          "default": 600,
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "image"
      ]
    },
    "DiagnosticServiceResource": {
      "type": "object",
      "description": "MQ diagnostic services resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DiagnosticServiceProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "DiagnosticServiceResourceListResult": {
      "type": "object",
      "description": "The response of a DiagnosticServiceResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DiagnosticServiceResource items on this page",
          "items": {
            "$ref": "#/definitions/DiagnosticServiceResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DiagnosticServiceResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DiagnosticServiceResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/DiagnosticServiceResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "DiagnosticServiceResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DiagnosticServiceResource.",
      "properties": {
        "dataExportFrequencySeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The frequency at which the data will be exported.",
          "default": 10,
          "minimum": 0,
          "maximum": 65535
        },
        "image": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of Diagnostic Service Docker Image."
        },
        "logFormat": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "json"
        },
        "logLevel": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "info"
        },
        "maxDataStorageSize": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum data stored in MiB.",
          "default": 16,
          "minimum": 0,
          "maximum": 4294967295
        },
        "metricsPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port at which metrics is exposed.",
          "default": 9600,
          "minimum": 0,
          "maximum": 65535
        },
        "openTelemetryTracesCollectorAddr": {
          "type": "string",
          "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
        },
        "staleDataTimeoutSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Metric inactivity timeout.",
          "default": 600,
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "DiskBackedMessageBufferSettings": {
      "type": "object",
      "description": "DiskBackedMessageBufferSettings properties",
      "properties": {
        "ephemeralVolumeClaimSpec": {
          "$ref": "#/definitions/VolumeClaimSpec",
          "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details."
        },
        "maxSize": {
          "type": "string",
          "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
        },
        "persistentVolumeClaimSpec": {
          "$ref": "#/definitions/VolumeClaimSpec",
          "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer."
        }
      },
      "required": [
        "maxSize"
      ]
    },
    "DiskBackedMessageBufferSettingsUpdate": {
      "type": "object",
      "description": "DiskBackedMessageBufferSettings properties",
      "properties": {
        "ephemeralVolumeClaimSpec": {
          "$ref": "#/definitions/VolumeClaimSpecUpdate",
          "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details."
        },
        "maxSize": {
          "type": "string",
          "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
        },
        "persistentVolumeClaimSpec": {
          "$ref": "#/definitions/VolumeClaimSpecUpdate",
          "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer."
        }
      }
    },
    "ExtendedLocationProperty": {
      "type": "object",
      "description": "ExtendedLocation properties",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the extended location."
        },
        "type": {
          "$ref": "#/definitions/ExtendedLocationType",
          "description": "Type of ExtendedLocation."
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "ExtendedLocationType": {
      "type": "string",
      "description": "The enum defining type of ExtendedLocation accepted.",
      "enum": [
        "CustomLocation"
      ],
      "x-ms-enum": {
        "name": "ExtendedLocationType",
        "modelAsString": true,
        "values": [
          {
            "name": "CustomLocation",
            "value": "CustomLocation",
            "description": "CustomLocation type"
          }
        ]
      }
    },
    "FabricGuids": {
      "type": "object",
      "description": "Fabric one lake guids.",
      "properties": {
        "lakehouseGuid": {
          "type": "string",
          "description": "Fabric one lake house guid."
        },
        "workspaceGuid": {
          "type": "string",
          "description": "Fabric one lake workspace guid."
        }
      },
      "required": [
        "lakehouseGuid",
        "workspaceGuid"
      ]
    },
    "FabricGuidsUpdate": {
      "type": "object",
      "description": "Fabric one lake guids.",
      "properties": {
        "lakehouseGuid": {
          "type": "string",
          "description": "Fabric one lake house guid."
        },
        "workspaceGuid": {
          "type": "string",
          "description": "Fabric one lake workspace guid."
        }
      }
    },
    "FabricNames": {
      "type": "object",
      "description": "Fabric one lake names.",
      "properties": {
        "lakehouseName": {
          "type": "string",
          "description": "Fabric one lake house name."
        },
        "workspaceName": {
          "type": "string",
          "description": "Fabric one lake workspace name."
        }
      },
      "required": [
        "lakehouseName",
        "workspaceName"
      ]
    },
    "FabricNamesUpdate": {
      "type": "object",
      "description": "Fabric one lake names.",
      "properties": {
        "lakehouseName": {
          "type": "string",
          "description": "Fabric one lake house name."
        },
        "workspaceName": {
          "type": "string",
          "description": "Fabric one lake workspace name."
        }
      }
    },
    "FabricPathType": {
      "type": "string",
      "description": "Fabric path type to use.",
      "enum": [
        "files",
        "tables"
      ],
      "x-ms-enum": {
        "name": "FabricPathType",
        "modelAsString": true,
        "values": [
          {
            "name": "files",
            "value": "files",
            "description": "Fabric path type is Files."
          },
          {
            "name": "tables",
            "value": "tables",
            "description": "Fabric path type is Tables."
          }
        ]
      }
    },
    "Frontend": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryResourceLimits": {
          "$ref": "#/definitions/TemporaryResourceLimitsConfig",
          "description": "Defines the limits for resources of the frontend instances of the MQTT broker."
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logical frontend workers per pod.",
          "default": 2,
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "replicas"
      ]
    },
    "FrontendUpdate": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryResourceLimits": {
          "$ref": "#/definitions/TemporaryResourceLimitsConfigUpdate",
          "description": "Defines the limits for resources of the frontend instances of the MQTT broker."
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logical frontend workers per pod.",
          "default": 2,
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "KafkaAcks": {
      "type": "string",
      "description": "Kafka Acks enum properties",
      "enum": [
        "zero",
        "one",
        "all"
      ],
      "x-ms-enum": {
        "name": "KafkaAcks",
        "modelAsString": true,
        "values": [
          {
            "name": "zero",
            "value": "zero",
            "description": "Kafka acks zero."
          },
          {
            "name": "one",
            "value": "one",
            "description": "Kafka acks one."
          },
          {
            "name": "all",
            "value": "all",
            "description": "Kafka acks all."
          }
        ]
      }
    },
    "KafkaConnectorProperties": {
      "type": "object",
      "description": "KafkaConnector Properties",
      "properties": {
        "clientIdPrefix": {
          "type": "string",
          "description": "The client id prefix of the dynamically generated client ids."
        },
        "image": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of KafkaConnector Docker Image."
        },
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of KafkaConnector pods to spin up.",
          "minimum": 0,
          "maximum": 65535
        },
        "kafkaConnection": {
          "$ref": "#/definitions/KafkaRemoteBrokerConnectionSpec",
          "description": "The details for connecting with Remote Kafka Broker."
        },
        "localBrokerConnection": {
          "$ref": "#/definitions/LocalBrokerConnectionSpec",
          "description": "The details for connecting with Local Broker."
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the Bridge Connector instances.",
          "default": "info"
        },
        "nodeTolerations": {
          "$ref": "#/definitions/NodeTolerations",
          "description": "The Node Tolerations for the Bridge Connector pods."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "kafkaConnection"
      ]
    },
    "KafkaConnectorResource": {
      "type": "object",
      "description": "MQ kafkaConnector resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/KafkaConnectorProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "KafkaConnectorResourceListResult": {
      "type": "object",
      "description": "The response of a KafkaConnectorResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The KafkaConnectorResource items on this page",
          "items": {
            "$ref": "#/definitions/KafkaConnectorResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "KafkaConnectorResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the KafkaConnectorResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/KafkaConnectorResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "KafkaConnectorResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the KafkaConnectorResource.",
      "properties": {
        "clientIdPrefix": {
          "type": "string",
          "description": "The client id prefix of the dynamically generated client ids."
        },
        "image": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of KafkaConnector Docker Image."
        },
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of KafkaConnector pods to spin up.",
          "minimum": 0,
          "maximum": 65535
        },
        "kafkaConnection": {
          "$ref": "#/definitions/KafkaRemoteBrokerConnectionSpecUpdate",
          "description": "The details for connecting with Remote Kafka Broker."
        },
        "localBrokerConnection": {
          "$ref": "#/definitions/LocalBrokerConnectionSpecUpdate",
          "description": "The details for connecting with Local Broker."
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the Bridge Connector instances.",
          "default": "info"
        },
        "nodeTolerations": {
          "$ref": "#/definitions/NodeTolerationsUpdate",
          "description": "The Node Tolerations for the Bridge Connector pods."
        }
      }
    },
    "KafkaMessageCompressionType": {
      "type": "string",
      "description": "Kafka Message compression enum properties",
      "enum": [
        "none",
        "gzip",
        "snappy",
        "lz4"
      ],
      "x-ms-enum": {
        "name": "KafkaMessageCompressionType",
        "modelAsString": true,
        "values": [
          {
            "name": "none",
            "value": "none",
            "description": "No Kafka message compression."
          },
          {
            "name": "gzip",
            "value": "gzip",
            "description": "Gzip Kafka message compression."
          },
          {
            "name": "snappy",
            "value": "snappy",
            "description": "Snappy Kafka message compression."
          },
          {
            "name": "lz4",
            "value": "lz4",
            "description": "Lz4 Kafka message compression."
          }
        ]
      }
    },
    "KafkaPartitionStrategy": {
      "type": "string",
      "description": "Kafka Partition Strategy enum properties",
      "enum": [
        "default",
        "static",
        "topic",
        "property"
      ],
      "x-ms-enum": {
        "name": "KafkaPartitionStrategy",
        "modelAsString": true,
        "values": [
          {
            "name": "default",
            "value": "default",
            "description": "Default partition strategy."
          },
          {
            "name": "static",
            "value": "static",
            "description": "Static partition strategy."
          },
          {
            "name": "topic",
            "value": "topic",
            "description": "Topic partition strategy."
          },
          {
            "name": "property",
            "value": "property",
            "description": "Property partition strategy."
          }
        ]
      }
    },
    "KafkaRemoteBrokerAuthenticationProperties": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Authentication methods",
      "properties": {
        "authType": {
          "$ref": "#/definitions/KafkaRemoteBrokerAuthenticationTypes",
          "description": "The type of authentication to use for Kafka remote broker."
        },
        "enabled": {
          "type": "boolean",
          "description": "If authentication is enabled for Kafka remote broker."
        }
      },
      "required": [
        "enabled"
      ]
    },
    "KafkaRemoteBrokerAuthenticationPropertiesUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Authentication methods",
      "properties": {
        "authType": {
          "$ref": "#/definitions/KafkaRemoteBrokerAuthenticationTypesUpdate",
          "description": "The type of authentication to use for Kafka remote broker."
        },
        "enabled": {
          "type": "boolean",
          "description": "If authentication is enabled for Kafka remote broker."
        }
      }
    },
    "KafkaRemoteBrokerAuthenticationTypes": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Authentication types. NOTE - Enum only one method is allowed to be passed.",
      "properties": {
        "sasl": {
          "$ref": "#/definitions/SaslRemoteBrokerBasicAuthentication",
          "description": "Sasl remote broker authentication method."
        },
        "systemAssignedManagedIdentity": {
          "$ref": "#/definitions/ManagedIdentityAuthentication",
          "description": "Managed identity remote broker authentication method."
        },
        "x509": {
          "$ref": "#/definitions/KafkaX509Authentication",
          "description": "X509 remote broker authentication method."
        }
      }
    },
    "KafkaRemoteBrokerAuthenticationTypesUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Authentication types. NOTE - Enum only one method is allowed to be passed.",
      "properties": {
        "sasl": {
          "$ref": "#/definitions/SaslRemoteBrokerBasicAuthenticationUpdate",
          "description": "Sasl remote broker authentication method."
        },
        "systemAssignedManagedIdentity": {
          "$ref": "#/definitions/ManagedIdentityAuthenticationUpdate",
          "description": "Managed identity remote broker authentication method."
        },
        "x509": {
          "$ref": "#/definitions/KafkaX509AuthenticationUpdate",
          "description": "X509 remote broker authentication method."
        }
      }
    },
    "KafkaRemoteBrokerConnectionSpec": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnectionSpec details",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/KafkaRemoteBrokerAuthenticationProperties",
          "description": "The remote broker authentication methods."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of remote broker to connect to."
        },
        "tls": {
          "$ref": "#/definitions/KafkaRemoteBrokerConnectionTls",
          "description": "TLS details for Remote broker Connection."
        }
      },
      "required": [
        "authentication",
        "endpoint",
        "tls"
      ]
    },
    "KafkaRemoteBrokerConnectionSpecUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnectionSpec details",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/KafkaRemoteBrokerAuthenticationPropertiesUpdate",
          "description": "The remote broker authentication methods."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of remote broker to connect to."
        },
        "tls": {
          "$ref": "#/definitions/KafkaRemoteBrokerConnectionTlsUpdate",
          "description": "TLS details for Remote broker Connection."
        }
      }
    },
    "KafkaRemoteBrokerConnectionTls": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Remote Broker Connection."
        },
        "trustedCaCertificateConfigMap": {
          "type": "string",
          "description": "Trusted CA certificate name for Remote Broker."
        }
      },
      "required": [
        "tlsEnabled"
      ]
    },
    "KafkaRemoteBrokerConnectionTlsUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Remote Broker Connection."
        },
        "trustedCaCertificateConfigMap": {
          "type": "string",
          "description": "Trusted CA certificate name for Remote Broker."
        }
      }
    },
    "KafkaRoutes": {
      "type": "object",
      "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
      "properties": {
        "kafkaToMqtt": {
          "$ref": "#/definitions/KafkaToMqttRoutes",
          "description": "Kafka to Mqtt route."
        },
        "mqttToKafka": {
          "$ref": "#/definitions/MqttToKafkaRoutes",
          "description": "Mqtt to Kafka route."
        }
      }
    },
    "KafkaSaslType": {
      "type": "string",
      "description": "Kafka Sasl Authentication types",
      "enum": [
        "plain",
        "scramSha256",
        "scramSha512"
      ],
      "x-ms-enum": {
        "name": "KafkaSaslType",
        "modelAsString": true,
        "values": [
          {
            "name": "plain",
            "value": "plain",
            "description": "Sasl Plain authentication."
          },
          {
            "name": "scramSha256",
            "value": "scramSha256",
            "description": "Sasl ScramSha256 authentication."
          },
          {
            "name": "scramSha512",
            "value": "scramSha512",
            "description": "Sasl ScramSha512 authentication."
          }
        ]
      }
    },
    "KafkaSharedSubscriptionProperties": {
      "type": "object",
      "description": "Kafka Shared Subscription properties",
      "properties": {
        "groupMinimumShareNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number to use in a group for subscription.",
          "minimum": 0,
          "maximum": 255
        },
        "groupName": {
          "type": "string",
          "description": "The name of the shared subscription."
        }
      },
      "required": [
        "groupMinimumShareNumber",
        "groupName"
      ]
    },
    "KafkaToMqttRoutes": {
      "type": "object",
      "description": "Kafka to Mqtt route properties",
      "properties": {
        "consumerGroupId": {
          "type": "string",
          "description": "The consumer group id to use."
        },
        "kafkaTopic": {
          "type": "string",
          "description": "The kafka topic to pull from."
        },
        "mqttTopic": {
          "type": "string",
          "description": "The mqtt topic to publish to."
        },
        "name": {
          "type": "string",
          "description": "The name of the route."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "The qos to use for mqtt.",
          "default": 1,
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "kafkaTopic",
        "mqttTopic",
        "name"
      ]
    },
    "KafkaTokenKeyVaultProperties": {
      "type": "object",
      "description": "Kafka Token KeyVault properties.",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username to connect with."
        },
        "vault": {
          "$ref": "#/definitions/KeyVaultConnectionProperties",
          "description": "KeyVault properties."
        },
        "vaultSecret": {
          "$ref": "#/definitions/KeyVaultSecretObject",
          "description": "KeyVault secret details."
        }
      },
      "required": [
        "vault",
        "vaultSecret"
      ]
    },
    "KafkaTokenKeyVaultPropertiesUpdate": {
      "type": "object",
      "description": "Kafka Token KeyVault properties.",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username to connect with."
        },
        "vault": {
          "$ref": "#/definitions/KeyVaultConnectionPropertiesUpdate",
          "description": "KeyVault properties."
        },
        "vaultSecret": {
          "$ref": "#/definitions/KeyVaultSecretObjectUpdate",
          "description": "KeyVault secret details."
        }
      }
    },
    "KafkaTopicMapBatching": {
      "type": "object",
      "description": "Kafka TopicMap Batching properties",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "The setting to enable or disable batching.",
          "default": false
        },
        "latencyMs": {
          "type": "integer",
          "format": "int32",
          "description": "The latency of message batching.",
          "default": 5,
          "minimum": 0,
          "maximum": 65535
        },
        "maxBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum bytes to send in a batch.",
          "default": 1000000,
          "minimum": 0,
          "maximum": 4294967295
        },
        "maxMessages": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum messages to send in a batch.",
          "default": 100000,
          "minimum": 0,
          "maximum": 4294967295
        }
      }
    },
    "KafkaTopicMapProperties": {
      "type": "object",
      "description": "KafkaTopicMap Properties",
      "properties": {
        "batching": {
          "$ref": "#/definitions/KafkaTopicMapBatching",
          "description": "The batching settings for kafka messages."
        },
        "compression": {
          "$ref": "#/definitions/KafkaMessageCompressionType",
          "description": "The compression to use for kafka messages.",
          "default": "none"
        },
        "copyMqttProperties": {
          "type": "string",
          "description": "The flag to copy Mqtt properties."
        },
        "kafkaConnectorRef": {
          "type": "string",
          "description": "The kafkaConnector CRD it refers to."
        },
        "partitionKeyProperty": {
          "type": "string",
          "description": "The partition to use for Kafka."
        },
        "partitionStrategy": {
          "$ref": "#/definitions/KafkaPartitionStrategy",
          "description": "The partition strategy to use for Kafka.",
          "default": "default"
        },
        "routes": {
          "type": "array",
          "description": "The route details for Kafka connector.",
          "items": {
            "$ref": "#/definitions/KafkaRoutes"
          },
          "x-ms-identifiers": []
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "kafkaConnectorRef",
        "routes"
      ]
    },
    "KafkaTopicMapResource": {
      "type": "object",
      "description": "MQ kafkaConnector/topicMap resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/KafkaTopicMapProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "KafkaTopicMapResourceListResult": {
      "type": "object",
      "description": "The response of a KafkaTopicMapResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The KafkaTopicMapResource items on this page",
          "items": {
            "$ref": "#/definitions/KafkaTopicMapResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "KafkaTopicMapResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the KafkaTopicMapResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/KafkaTopicMapResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "KafkaTopicMapResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the KafkaTopicMapResource.",
      "properties": {
        "batching": {
          "$ref": "#/definitions/KafkaTopicMapBatching",
          "description": "The batching settings for kafka messages."
        },
        "compression": {
          "$ref": "#/definitions/KafkaMessageCompressionType",
          "description": "The compression to use for kafka messages.",
          "default": "none"
        },
        "copyMqttProperties": {
          "type": "string",
          "description": "The flag to copy Mqtt properties."
        },
        "kafkaConnectorRef": {
          "type": "string",
          "description": "The kafkaConnector CRD it refers to."
        },
        "partitionKeyProperty": {
          "type": "string",
          "description": "The partition to use for Kafka."
        },
        "partitionStrategy": {
          "$ref": "#/definitions/KafkaPartitionStrategy",
          "description": "The partition strategy to use for Kafka.",
          "default": "default"
        },
        "routes": {
          "type": "array",
          "description": "The route details for Kafka connector.",
          "items": {
            "$ref": "#/definitions/KafkaRoutes"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "KafkaX509Authentication": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection X509 Authentication properties.",
      "properties": {
        "keyVault": {
          "$ref": "#/definitions/KeyVaultCertificateProperties",
          "description": "Keyvault X509 secret properties."
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "KafkaX509AuthenticationUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection X509 Authentication properties.",
      "properties": {
        "keyVault": {
          "$ref": "#/definitions/KeyVaultCertificatePropertiesUpdate",
          "description": "Keyvault X509 secret properties."
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "KeyVaultCertificateProperties": {
      "type": "object",
      "description": "KeyVault certificate properties",
      "properties": {
        "vault": {
          "$ref": "#/definitions/KeyVaultConnectionProperties",
          "description": "KeyVault properties."
        },
        "vaultCaChainSecret": {
          "$ref": "#/definitions/KeyVaultSecretObject",
          "description": "KeyVault CA chain secret details."
        },
        "vaultCert": {
          "$ref": "#/definitions/KeyVaultSecretObject",
          "description": "KeyVault Cert secret details."
        }
      },
      "required": [
        "vault",
        "vaultCert"
      ]
    },
    "KeyVaultCertificatePropertiesUpdate": {
      "type": "object",
      "description": "KeyVault certificate properties",
      "properties": {
        "vault": {
          "$ref": "#/definitions/KeyVaultConnectionPropertiesUpdate",
          "description": "KeyVault properties."
        },
        "vaultCaChainSecret": {
          "$ref": "#/definitions/KeyVaultSecretObjectUpdate",
          "description": "KeyVault CA chain secret details."
        },
        "vaultCert": {
          "$ref": "#/definitions/KeyVaultSecretObjectUpdate",
          "description": "KeyVault Cert secret details."
        }
      }
    },
    "KeyVaultConnectionProperties": {
      "type": "object",
      "description": "KeyVault properties",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/KeyVaultCredentialsProperties",
          "description": "KeyVault credentials."
        },
        "directoryId": {
          "type": "string",
          "description": "KeyVault directoryId."
        },
        "name": {
          "type": "string",
          "description": "KeyVault name."
        }
      },
      "required": [
        "credentials",
        "directoryId",
        "name"
      ]
    },
    "KeyVaultConnectionPropertiesUpdate": {
      "type": "object",
      "description": "KeyVault properties",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/KeyVaultCredentialsPropertiesUpdate",
          "description": "KeyVault credentials."
        },
        "directoryId": {
          "type": "string",
          "description": "KeyVault directoryId."
        },
        "name": {
          "type": "string",
          "description": "KeyVault name."
        }
      }
    },
    "KeyVaultCredentialsProperties": {
      "type": "object",
      "description": "KeyVault credentials properties. NOTE - Future this will be ENUM.",
      "properties": {
        "servicePrincipalLocalSecretName": {
          "type": "string",
          "description": "KeyVault service principal local secret name."
        }
      },
      "required": [
        "servicePrincipalLocalSecretName"
      ]
    },
    "KeyVaultCredentialsPropertiesUpdate": {
      "type": "object",
      "description": "KeyVault credentials properties. NOTE - Future this will be ENUM.",
      "properties": {
        "servicePrincipalLocalSecretName": {
          "type": "string",
          "description": "KeyVault service principal local secret name."
        }
      }
    },
    "KeyVaultSecretObject": {
      "type": "object",
      "description": "KeyVault secret object properties",
      "properties": {
        "name": {
          "type": "string",
          "description": "KeyVault secret name."
        },
        "version": {
          "type": "string",
          "description": "KeyVault secret version."
        }
      },
      "required": [
        "name"
      ]
    },
    "KeyVaultSecretObjectUpdate": {
      "type": "object",
      "description": "KeyVault secret object properties",
      "properties": {
        "name": {
          "type": "string",
          "description": "KeyVault secret name."
        },
        "version": {
          "type": "string",
          "description": "KeyVault secret version."
        }
      }
    },
    "KeyVaultSecretProperties": {
      "type": "object",
      "description": "KeyVault secret properties",
      "properties": {
        "vault": {
          "$ref": "#/definitions/KeyVaultConnectionProperties",
          "description": "KeyVault properties."
        },
        "vaultSecret": {
          "$ref": "#/definitions/KeyVaultSecretObject",
          "description": "KeyVault secret details."
        }
      },
      "required": [
        "vault",
        "vaultSecret"
      ]
    },
    "LocalBrokerAuthenticationMethods": {
      "type": "object",
      "description": "Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication",
      "properties": {
        "kubernetes": {
          "$ref": "#/definitions/LocalBrokerKubernetesAuthentication",
          "description": "Kubernetes local broker authentication method."
        }
      },
      "required": [
        "kubernetes"
      ]
    },
    "LocalBrokerAuthenticationMethodsUpdate": {
      "type": "object",
      "description": "Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication",
      "properties": {
        "kubernetes": {
          "$ref": "#/definitions/LocalBrokerKubernetesAuthentication",
          "description": "Kubernetes local broker authentication method."
        }
      }
    },
    "LocalBrokerConnectionSpec": {
      "type": "object",
      "description": "Mqtt Local Broker ConnectionSpec details",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/LocalBrokerAuthenticationMethods",
          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of local broker to connect to.",
          "default": "aio-mq-dmqtt-frontend:1883"
        },
        "tls": {
          "$ref": "#/definitions/LocalBrokerConnectionTls",
          "description": "TLS details for Local broker Connection."
        }
      }
    },
    "LocalBrokerConnectionSpecUpdate": {
      "type": "object",
      "description": "Mqtt Local Broker ConnectionSpec details",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/LocalBrokerAuthenticationMethodsUpdate",
          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of local broker to connect to.",
          "default": "aio-mq-dmqtt-frontend:1883"
        },
        "tls": {
          "$ref": "#/definitions/LocalBrokerConnectionTls",
          "description": "TLS details for Local broker Connection."
        }
      }
    },
    "LocalBrokerConnectionTls": {
      "type": "object",
      "description": "Mqtt Local Broker Connection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Local Broker Connection.",
          "default": false
        },
        "trustedCaCertificateConfigMap": {
          "type": "string",
          "description": "Trusted CA certificate config map name for Local Broker."
        }
      }
    },
    "LocalBrokerKubernetesAuthentication": {
      "type": "object",
      "description": "Local Broker Kubernetes Authentication",
      "properties": {
        "secretPath": {
          "type": "string",
          "description": "Secret Path where SAT is mounted.",
          "default": "/var/run/serviceaccount/localbroker"
        },
        "serviceAccountTokenName": {
          "type": "string",
          "description": "Token name where SAT is mounted on secret path.",
          "default": "sat"
        }
      }
    },
    "ManagedIdentityAuthentication": {
      "type": "object",
      "description": "Managed identity authentication details.",
      "properties": {
        "audience": {
          "type": "string",
          "description": "Token audience."
        },
        "extensionName": {
          "type": "string",
          "description": "Arc Extension name."
        }
      },
      "required": [
        "audience"
      ]
    },
    "ManagedIdentityAuthenticationUpdate": {
      "type": "object",
      "description": "Managed identity authentication details.",
      "properties": {
        "audience": {
          "type": "string",
          "description": "Token audience."
        },
        "extensionName": {
          "type": "string",
          "description": "Arc Extension name."
        }
      }
    },
    "ManualCertMethod": {
      "type": "object",
      "description": "Manual TLS server certificate management through a defined secret",
      "properties": {
        "secretName": {
          "type": "string",
          "description": "secret containing TLS cert."
        },
        "secretNamespace": {
          "type": "string",
          "description": "namespace of secret; omit to use default namespace."
        }
      },
      "required": [
        "secretName"
      ]
    },
    "ManualCertMethodUpdate": {
      "type": "object",
      "description": "Manual TLS server certificate management through a defined secret",
      "properties": {
        "secretName": {
          "type": "string",
          "description": "secret containing TLS cert."
        },
        "secretNamespace": {
          "type": "string",
          "description": "namespace of secret; omit to use default namespace."
        }
      }
    },
    "MqProperties": {
      "type": "object",
      "description": "MQ Resource properties",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      }
    },
    "MqResource": {
      "type": "object",
      "description": "MQ resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MqProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "MqResourceListResult": {
      "type": "object",
      "description": "The response of a MqResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MqResource items on this page",
          "items": {
            "$ref": "#/definitions/MqResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "MqResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the MqResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MqttBridgeConnectorProperties": {
      "type": "object",
      "description": "MqttBridgeConnector Properties",
      "properties": {
        "bridgeInstances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of instances to deploy for a bridge rollout.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientIdPrefix": {
          "type": "string",
          "description": "The client id prefix of the dynamically generated client ids."
        },
        "image": {
          "$ref": "#/definitions/ContainerImage",
          "description": "The details of MqttBridge Docker Image."
        },
        "localBrokerConnection": {
          "$ref": "#/definitions/LocalBrokerConnectionSpec",
          "description": "The details for connecting with Local Broker."
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the Bridge Connector instances."
        },
        "nodeTolerations": {
          "$ref": "#/definitions/NodeTolerations",
          "description": "The Node Tolerations for the Bridge Connector pods."
        },
        "protocol": {
          "$ref": "#/definitions/MqttProtocol",
          "description": "The protocol to use for connecting with Brokers."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "remoteBrokerConnection": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerConnectionSpec",
          "description": "The details for connecting with Remote Broker."
        }
      },
      "required": [
        "image",
        "protocol",
        "remoteBrokerConnection"
      ]
    },
    "MqttBridgeConnectorResource": {
      "type": "object",
      "description": "MQ mqttBridgeConnector resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MqttBridgeConnectorProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "MqttBridgeConnectorResourceListResult": {
      "type": "object",
      "description": "The response of a MqttBridgeConnectorResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MqttBridgeConnectorResource items on this page",
          "items": {
            "$ref": "#/definitions/MqttBridgeConnectorResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "MqttBridgeConnectorResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the MqttBridgeConnectorResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/MqttBridgeConnectorResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "MqttBridgeConnectorResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the MqttBridgeConnectorResource.",
      "properties": {
        "bridgeInstances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of instances to deploy for a bridge rollout.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientIdPrefix": {
          "type": "string",
          "description": "The client id prefix of the dynamically generated client ids."
        },
        "image": {
          "$ref": "#/definitions/ContainerImageUpdate",
          "description": "The details of MqttBridge Docker Image."
        },
        "localBrokerConnection": {
          "$ref": "#/definitions/LocalBrokerConnectionSpecUpdate",
          "description": "The details for connecting with Local Broker."
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the Bridge Connector instances."
        },
        "nodeTolerations": {
          "$ref": "#/definitions/NodeTolerationsUpdate",
          "description": "The Node Tolerations for the Bridge Connector pods."
        },
        "protocol": {
          "$ref": "#/definitions/MqttProtocol",
          "description": "The protocol to use for connecting with Brokers."
        },
        "remoteBrokerConnection": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerConnectionSpecUpdate",
          "description": "The details for connecting with Remote Broker."
        }
      }
    },
    "MqttBridgeRemoteBrokerAuthenticationMethods": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.",
      "properties": {
        "x509": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerX509Authentication",
          "description": "X509 remote broker authentication method."
        },
        "systemAssignedManagedIdentity": {
          "$ref": "#/definitions/ManagedIdentityAuthentication",
          "description": "Managed identity remote broker authentication method."
        }
      }
    },
    "MqttBridgeRemoteBrokerAuthenticationMethodsUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.",
      "properties": {
        "x509": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerX509AuthenticationUpdate",
          "description": "X509 remote broker authentication method."
        },
        "systemAssignedManagedIdentity": {
          "$ref": "#/definitions/ManagedIdentityAuthenticationUpdate",
          "description": "Managed identity remote broker authentication method."
        }
      }
    },
    "MqttBridgeRemoteBrokerConnectionSpec": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnectionSpec details",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerAuthenticationMethods",
          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of remote broker to connect to."
        },
        "protocol": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerProtocol",
          "description": "Protocol for remote connection.",
          "default": "mqtt"
        },
        "tls": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerConnectionTls",
          "description": "TLS details for Remote broker Connection."
        }
      },
      "required": [
        "authentication",
        "endpoint",
        "tls"
      ]
    },
    "MqttBridgeRemoteBrokerConnectionSpecUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnectionSpec details",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerAuthenticationMethodsUpdate",
          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of remote broker to connect to."
        },
        "protocol": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerProtocol",
          "description": "Protocol for remote connection.",
          "default": "mqtt"
        },
        "tls": {
          "$ref": "#/definitions/MqttBridgeRemoteBrokerConnectionTlsUpdate",
          "description": "TLS details for Remote broker Connection."
        }
      }
    },
    "MqttBridgeRemoteBrokerConnectionTls": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Remote Broker Connection."
        },
        "trustedCaCertificateConfigMap": {
          "type": "string",
          "description": "Trusted CA certificate name for Remote Broker."
        }
      },
      "required": [
        "tlsEnabled"
      ]
    },
    "MqttBridgeRemoteBrokerConnectionTlsUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Remote Broker Connection."
        },
        "trustedCaCertificateConfigMap": {
          "type": "string",
          "description": "Trusted CA certificate name for Remote Broker."
        }
      }
    },
    "MqttBridgeRemoteBrokerProtocol": {
      "type": "string",
      "description": "Protocol for remote connection.",
      "enum": [
        "mqtt",
        "webSocket"
      ],
      "x-ms-enum": {
        "name": "MqttBridgeRemoteBrokerProtocol",
        "modelAsString": true,
        "values": [
          {
            "name": "mqtt",
            "value": "mqtt",
            "description": "MQTT protocol."
          },
          {
            "name": "webSocket",
            "value": "webSocket",
            "description": "MQTT over WebSocket protocol."
          }
        ]
      }
    },
    "MqttBridgeRemoteBrokerX509Authentication": {
      "type": "object",
      "description": "MqttBridge RemoteBroker X509 Authentication properties.",
      "properties": {
        "keyVault": {
          "$ref": "#/definitions/KeyVaultCertificateProperties",
          "description": "Keyvault X509 secret properties."
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "MqttBridgeRemoteBrokerX509AuthenticationUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBroker X509 Authentication properties.",
      "properties": {
        "keyVault": {
          "$ref": "#/definitions/KeyVaultCertificatePropertiesUpdate",
          "description": "Keyvault X509 secret properties."
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "MqttBridgeRouteDirection": {
      "type": "string",
      "description": "MqttBridgeRoute direction properties",
      "enum": [
        "remote-to-local",
        "local-to-remote"
      ],
      "x-ms-enum": {
        "name": "MqttBridgeRouteDirection",
        "modelAsString": true,
        "values": [
          {
            "name": "RemoteToLocal",
            "value": "remote-to-local",
            "description": "Remote to Local Broker."
          },
          {
            "name": "LocalToRemote",
            "value": "local-to-remote",
            "description": "Local to Remote Broker."
          }
        ]
      }
    },
    "MqttBridgeRouteSharedSubscription": {
      "type": "object",
      "description": "MqttBridgeRoute Shared subscription properties",
      "properties": {
        "groupMinimumShareNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The group shared subscription minimum share number.",
          "minimum": 0,
          "maximum": 255
        },
        "groupName": {
          "type": "string",
          "description": "The group name for Shared subscription."
        }
      },
      "required": [
        "groupMinimumShareNumber",
        "groupName"
      ]
    },
    "MqttBridgeRoutes": {
      "type": "object",
      "description": "MqttBridgeTopicMap route properties",
      "properties": {
        "direction": {
          "$ref": "#/definitions/MqttBridgeRouteDirection",
          "description": "Direction of the route."
        },
        "name": {
          "type": "string",
          "description": "Name of the route."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "Qos for MQTT connection.",
          "default": 1,
          "minimum": 0,
          "maximum": 2
        },
        "sharedSubscription": {
          "$ref": "#/definitions/MqttBridgeRouteSharedSubscription",
          "description": "Shared subscription topic details."
        },
        "source": {
          "type": "string",
          "description": "Source topic of the route."
        },
        "target": {
          "type": "string",
          "description": "Target topic of the route. Ignore if same as source"
        }
      },
      "required": [
        "direction",
        "name",
        "source"
      ]
    },
    "MqttBridgeTopicMapProperties": {
      "type": "object",
      "description": "MqttBridgeTopicMap Properties",
      "properties": {
        "mqttBridgeConnectorRef": {
          "type": "string",
          "description": "The MqttBridgeConnector CRD it refers to."
        },
        "routes": {
          "type": "array",
          "description": "The route details for MqttBridge connector.",
          "items": {
            "$ref": "#/definitions/MqttBridgeRoutes"
          },
          "x-ms-identifiers": []
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        }
      },
      "required": [
        "mqttBridgeConnectorRef"
      ]
    },
    "MqttBridgeTopicMapResource": {
      "type": "object",
      "description": "MQ mqttBridgeTopicMap resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MqttBridgeTopicMapProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocationProperty",
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "MqttBridgeTopicMapResourceListResult": {
      "type": "object",
      "description": "The response of a MqttBridgeTopicMapResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MqttBridgeTopicMapResource items on this page",
          "items": {
            "$ref": "#/definitions/MqttBridgeTopicMapResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "MqttBridgeTopicMapResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the MqttBridgeTopicMapResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/MqttBridgeTopicMapResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "MqttBridgeTopicMapResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the MqttBridgeTopicMapResource.",
      "properties": {
        "mqttBridgeConnectorRef": {
          "type": "string",
          "description": "The MqttBridgeConnector CRD it refers to."
        },
        "routes": {
          "type": "array",
          "description": "The route details for MqttBridge connector.",
          "items": {
            "$ref": "#/definitions/MqttBridgeRoutes"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "MqttProtocol": {
      "type": "string",
      "description": "Mqtt Protocol types",
      "enum": [
        "v3",
        "v5"
      ],
      "x-ms-enum": {
        "name": "MqttProtocol",
        "modelAsString": true,
        "values": [
          {
            "name": "v3",
            "value": "v3",
            "description": "Mqttv3"
          },
          {
            "name": "v5",
            "value": "v5",
            "description": "Mqttv5"
          }
        ]
      }
    },
    "MqttToKafkaRoutes": {
      "type": "object",
      "description": "Mqtt to Kafka route properties",
      "properties": {
        "kafkaAcks": {
          "$ref": "#/definitions/KafkaAcks",
          "description": "The kafka acks to use."
        },
        "kafkaTopic": {
          "type": "string",
          "description": "The kafka topic to publish to."
        },
        "mqttTopic": {
          "type": "string",
          "description": "The mqtt topic to pull from."
        },
        "name": {
          "type": "string",
          "description": "The name of the route."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "The qos to use for mqtt.",
          "default": 1,
          "minimum": 0,
          "maximum": 1
        },
        "sharedSubscription": {
          "$ref": "#/definitions/KafkaSharedSubscriptionProperties",
          "description": "The properties for shared subscription."
        }
      },
      "required": [
        "kafkaAcks",
        "kafkaTopic",
        "mqttTopic",
        "name"
      ]
    },
    "NodeTolerations": {
      "type": "object",
      "description": "Defines the Node Tolerations details",
      "properties": {
        "effect": {
          "type": "string",
          "description": "Toleration effect."
        },
        "key": {
          "type": "string",
          "description": "Toleration key."
        },
        "operator": {
          "type": "string",
          "description": "Toleration operator like 'Exists', 'Equal' etc."
        },
        "value": {
          "type": "string",
          "description": "Toleration Value."
        }
      },
      "required": [
        "effect",
        "key",
        "operator",
        "value"
      ]
    },
    "NodeTolerationsUpdate": {
      "type": "object",
      "description": "Defines the Node Tolerations details",
      "properties": {
        "effect": {
          "type": "string",
          "description": "Toleration effect."
        },
        "key": {
          "type": "string",
          "description": "Toleration key."
        },
        "operator": {
          "type": "string",
          "description": "Toleration operator like 'Exists', 'Equal' etc."
        },
        "value": {
          "type": "string",
          "description": "Toleration Value."
        }
      }
    },
    "PrincipalDefinition": {
      "type": "object",
      "description": "PrincipalDefinition properties of Basic Rule",
      "properties": {
        "attributes": {
          "type": "array",
          "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
          "default": [],
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "x-ms-identifiers": []
        },
        "clientids": {
          "type": "array",
          "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
          "items": {
            "type": "string"
          }
        },
        "usernames": {
          "type": "array",
          "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProvisioningState": {
      "type": "string",
      "description": "The enum defining status of resource.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Provisioning",
        "Updating",
        "Deleting",
        "Accepted"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          },
          {
            "name": "Provisioning",
            "value": "Provisioning",
            "description": "Resource is getting provisioned."
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "Resource is Updating."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "Resource is Deleting."
          },
          {
            "name": "Accepted",
            "value": "Accepted",
            "description": "Resource has been Accepted."
          }
        ]
      }
    },
    "ResourceInfoDefinition": {
      "type": "object",
      "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
      "properties": {
        "method": {
          "$ref": "#/definitions/ResourceInfoDefinitionMethods",
          "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe."
        },
        "topics": {
          "type": "array",
          "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "method"
      ]
    },
    "ResourceInfoDefinitionMethods": {
      "type": "string",
      "description": "ResourceInfoDefinition methods allowed",
      "enum": [
        "Connect",
        "Publish",
        "Subscribe"
      ],
      "x-ms-enum": {
        "name": "ResourceInfoDefinitionMethods",
        "modelAsString": true,
        "values": [
          {
            "name": "Connect",
            "value": "Connect",
            "description": "Allowed Connecting to Broker"
          },
          {
            "name": "Publish",
            "value": "Publish",
            "description": "Allowed Publishing to Broker"
          },
          {
            "name": "Subscribe",
            "value": "Subscribe",
            "description": "Allowed Subscribing to Broker"
          }
        ]
      }
    },
    "RunMode": {
      "type": "string",
      "description": "The enum defining run mode of the broker deployment",
      "enum": [
        "auto",
        "distributed"
      ],
      "x-ms-enum": {
        "name": "RunMode",
        "modelAsString": true,
        "values": [
          {
            "name": "auto",
            "value": "auto",
            "description": "Automatically provision Frontend and Backend pods."
          },
          {
            "name": "distributed",
            "value": "distributed",
            "description": "Use Cardinality to set Frontend and Backend pods."
          }
        ]
      }
    },
    "SanForCert": {
      "type": "object",
      "description": "SANs for certificate.",
      "properties": {
        "dns": {
          "type": "array",
          "description": "DNS SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "ip": {
          "type": "array",
          "description": "IP address SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "dns",
        "ip"
      ]
    },
    "SanForCertUpdate": {
      "type": "object",
      "description": "SANs for certificate.",
      "properties": {
        "dns": {
          "type": "array",
          "description": "DNS SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "ip": {
          "type": "array",
          "description": "IP address SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SaslRemoteBrokerBasicAuthentication": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Sasl Authentication properties.",
      "properties": {
        "saslType": {
          "$ref": "#/definitions/KafkaSaslType",
          "description": "Sasl Mechanism for remote broker authentication."
        },
        "token": {
          "$ref": "#/definitions/SaslRemoteBrokerBasicAuthenticationToken",
          "description": "Sasl token for remote broker authentication."
        }
      },
      "required": [
        "saslType",
        "token"
      ]
    },
    "SaslRemoteBrokerBasicAuthenticationToken": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Sasl Authentication token properties. NOTE - Enum only one method is allowed to be passed.",
      "properties": {
        "keyVault": {
          "$ref": "#/definitions/KafkaTokenKeyVaultProperties",
          "description": "Keyvault token keyvault secret properties."
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "SaslRemoteBrokerBasicAuthenticationTokenUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Sasl Authentication token properties. NOTE - Enum only one method is allowed to be passed.",
      "properties": {
        "keyVault": {
          "$ref": "#/definitions/KafkaTokenKeyVaultPropertiesUpdate",
          "description": "Keyvault token keyvault secret properties."
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "SaslRemoteBrokerBasicAuthenticationUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Sasl Authentication properties.",
      "properties": {
        "saslType": {
          "$ref": "#/definitions/KafkaSaslType",
          "description": "Sasl Mechanism for remote broker authentication."
        },
        "token": {
          "$ref": "#/definitions/SaslRemoteBrokerBasicAuthenticationTokenUpdate",
          "description": "Sasl token for remote broker authentication."
        }
      }
    },
    "ServiceType": {
      "type": "string",
      "description": "Kubernetes Service Types supported by Listener",
      "enum": [
        "clusterIp",
        "loadBalancer",
        "nodePort"
      ],
      "x-ms-enum": {
        "name": "ServiceType",
        "modelAsString": true,
        "values": [
          {
            "name": "clusterIp",
            "value": "clusterIp",
            "description": "Cluster IP Service."
          },
          {
            "name": "loadBalancer",
            "value": "loadBalancer",
            "description": "Load Balancer Service."
          },
          {
            "name": "nodePort",
            "value": "nodePort",
            "description": "Node Port Service."
          }
        ]
      }
    },
    "TemporaryResourceLimitsConfig": {
      "type": "object",
      "description": "Internal knobs of Resource Limits for FE and BE",
      "properties": {
        "maxInflightMessages": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of messages a client can have inflight.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxInflightPatches": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of patch inflight per node.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxInflightPatchesPerClient": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of patch a client can have in flight.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxMessageExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum message expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "maxQueuedMessages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxQueuedQos0Messages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive QoS0 for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxSessionExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum session expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        }
      },
      "required": [
        "maxInflightMessages",
        "maxInflightPatches",
        "maxInflightPatchesPerClient",
        "maxQueuedMessages",
        "maxQueuedQos0Messages",
        "maxSessionExpirySecs"
      ]
    },
    "TemporaryResourceLimitsConfigUpdate": {
      "type": "object",
      "description": "Internal knobs of Resource Limits for FE and BE",
      "properties": {
        "maxInflightMessages": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of messages a client can have inflight.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxInflightPatches": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of patch inflight per node.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxInflightPatchesPerClient": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of patch a client can have in flight.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxMessageExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum message expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "maxQueuedMessages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxQueuedQos0Messages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive QoS0 for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxSessionExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum session expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        }
      }
    },
    "TlsCertMethod": {
      "type": "object",
      "description": "Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported",
      "properties": {
        "automatic": {
          "$ref": "#/definitions/AutomaticCertMethod",
          "description": "Option 1 - Automatic TLS server certificate management with cert-manager."
        },
        "manual": {
          "$ref": "#/definitions/ManualCertMethod",
          "description": "Option 2 - Manual TLS server certificate management through a defined secret."
        },
        "keyVault": {
          "$ref": "#/definitions/KeyVaultCertificateProperties",
          "description": "Option 3 - TLS server certificate retrieved from Key Vault.."
        }
      }
    },
    "TlsCertMethodUpdate": {
      "type": "object",
      "description": "Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported",
      "properties": {
        "automatic": {
          "$ref": "#/definitions/AutomaticCertMethodUpdate",
          "description": "Option 1 - Automatic TLS server certificate management with cert-manager."
        },
        "manual": {
          "$ref": "#/definitions/ManualCertMethodUpdate",
          "description": "Option 2 - Manual TLS server certificate management through a defined secret."
        },
        "keyVault": {
          "$ref": "#/definitions/KeyVaultCertificatePropertiesUpdate",
          "description": "Option 3 - TLS server certificate retrieved from Key Vault.."
        }
      }
    },
    "VolumeClaimDataSource": {
      "type": "object",
      "description": "VolumeClaimDataSource properties",
      "properties": {
        "apiGroup": {
          "type": "string",
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        },
        "kind": {
          "type": "string",
          "description": "Kind is the type of resource being referenced"
        },
        "name": {
          "type": "string",
          "description": "Name is the name of resource being referenced"
        }
      },
      "required": [
        "kind",
        "name"
      ]
    },
    "VolumeClaimDataSourceRef": {
      "type": "object",
      "description": "VolumeClaimDataSourceRef properties",
      "properties": {
        "apiGroup": {
          "type": "string",
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        },
        "kind": {
          "type": "string",
          "description": "Kind is the type of resource being referenced"
        },
        "name": {
          "type": "string",
          "description": "Name is the name of resource being referenced"
        }
      },
      "required": [
        "kind",
        "name"
      ]
    },
    "VolumeClaimDataSourceRefUpdate": {
      "type": "object",
      "description": "VolumeClaimDataSourceRef properties",
      "properties": {
        "apiGroup": {
          "type": "string",
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        },
        "kind": {
          "type": "string",
          "description": "Kind is the type of resource being referenced"
        },
        "name": {
          "type": "string",
          "description": "Name is the name of resource being referenced"
        }
      }
    },
    "VolumeClaimDataSourceUpdate": {
      "type": "object",
      "description": "VolumeClaimDataSource properties",
      "properties": {
        "apiGroup": {
          "type": "string",
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        },
        "kind": {
          "type": "string",
          "description": "Kind is the type of resource being referenced"
        },
        "name": {
          "type": "string",
          "description": "Name is the name of resource being referenced"
        }
      }
    },
    "VolumeClaimResourceRequirements": {
      "type": "object",
      "description": "VolumeClaimResourceRequirements properties",
      "properties": {
        "limits": {
          "type": "object",
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requests": {
          "type": "object",
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VolumeClaimSpec": {
      "type": "object",
      "description": "VolumeClaimSpec properties",
      "properties": {
        "accessModes": {
          "type": "array",
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "x-ms-identifiers": []
        },
        "dataSource": {
          "$ref": "#/definitions/VolumeClaimDataSource",
          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field."
        },
        "dataSourceRef": {
          "$ref": "#/definitions/VolumeClaimDataSourceRef",
          "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled."
        },
        "resources": {
          "$ref": "#/definitions/VolumeClaimResourceRequirements",
          "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
        },
        "selector": {
          "$ref": "#/definitions/VolumeClaimSpecSelector",
          "description": "A label query over volumes to consider for binding."
        },
        "storageClassName": {
          "type": "string",
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
        },
        "volumeMode": {
          "type": "string",
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
        },
        "volumeName": {
          "type": "string",
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
        }
      }
    },
    "VolumeClaimSpecSelector": {
      "type": "object",
      "description": "VolumeClaimSpecSelector properties",
      "properties": {
        "matchExpressions": {
          "type": "array",
          "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/VolumeClaimSpecSelectorMatchExpressions"
          },
          "x-ms-identifiers": []
        },
        "matchLabels": {
          "type": "object",
          "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VolumeClaimSpecSelectorMatchExpressions": {
      "type": "object",
      "description": "VolumeClaimSpecSelectorMatchExpressions properties",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the label key that the selector applies to."
        },
        "operator": {
          "type": "string",
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
        },
        "values": {
          "type": "array",
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "key",
        "operator"
      ]
    },
    "VolumeClaimSpecUpdate": {
      "type": "object",
      "description": "VolumeClaimSpec properties",
      "properties": {
        "accessModes": {
          "type": "array",
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "x-ms-identifiers": []
        },
        "dataSource": {
          "$ref": "#/definitions/VolumeClaimDataSourceUpdate",
          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field."
        },
        "dataSourceRef": {
          "$ref": "#/definitions/VolumeClaimDataSourceRefUpdate",
          "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled."
        },
        "resources": {
          "$ref": "#/definitions/VolumeClaimResourceRequirements",
          "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
        },
        "selector": {
          "$ref": "#/definitions/VolumeClaimSpecSelector",
          "description": "A label query over volumes to consider for binding."
        },
        "storageClassName": {
          "type": "string",
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
        },
        "volumeMode": {
          "type": "string",
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
        },
        "volumeName": {
          "type": "string",
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
        }
      }
    }
  },
  "parameters": {}
}
