{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Azure Media Services",
    "description": "Streaming resource management client for Azure Media Services",
    "version": "2018-03-30-preview"
  },
  "host": "management.azure.com",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "Impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents": {
      "get": {
        "tags": [
          "LiveEvents"
        ],
        "summary": "List Live Events",
        "description": "Lists the Live Events in the account.",
        "operationId": "LiveEvents_List",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LiveEventListResult"
            }
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink"
        },
        "x-ms-examples": {
          "List all LiveEvents": {
            "$ref": "examples/liveevent-list-all.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}": {
      "get": {
        "tags": [
          "LiveEvents"
        ],
        "summary": "Get Live Event",
        "description": "Gets a Live Event.",
        "operationId": "LiveEvents_Get",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LiveEvent"
            }
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-examples": {
          "Get a LiveEvent by name": {
            "$ref": "examples/liveevent-list-by-name.json"
          }
        }
      },
      "put": {
        "tags": [
          "LiveEvents"
        ],
        "summary": "Create Live Event",
        "description": "Creates a Live Event.",
        "operationId": "LiveEvents_Create",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/StreamingResourceAutoStart"
          },
          {
            "name": "parameters",
            "description": "Live Event properties needed for creation.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LiveEvent"
            }
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/LiveEvent"
            }
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Create a LiveEvent": {
            "$ref": "examples/liveevent-create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "LiveEvents"
        ],
        "description": "Updates a existing Live Event.",
        "operationId": "LiveEvents_Update",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "name": "parameters",
            "description": "Live Event properties needed for creation.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LiveEvent"
            }
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/LiveEvent"
            }
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Update a LiveEvent": {
            "$ref": "examples/liveevent-update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "LiveEvents"
        ],
        "summary": "Delete Live Event",
        "description": "Deletes a Live Event.",
        "operationId": "LiveEvents_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded."
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously."
          },
          "204": {
            "description": "No content. The request has been accepted but the Live Event was not found."
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Delete a LiveEvent": {
            "$ref": "examples/liveevent-delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/start": {
      "post": {
        "tags": [
          "LiveEvents"
        ],
        "summary": "Start Live Event",
        "description": "Starts an existing Live Event.",
        "operationId": "LiveEvents_Start",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded."
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously."
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Start a LiveEvent": {
            "$ref": "examples/liveevent-start.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/stop": {
      "post": {
        "tags": [
          "LiveEvents"
        ],
        "summary": "Stop Live Event",
        "description": "Stops an existing Live Event.",
        "operationId": "LiveEvents_Stop",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "name": "parameters",
            "description": "LiveEvent stop parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveEventActionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded."
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously."
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Stop a LiveEvent": {
            "$ref": "examples/liveevent-stop.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/reset": {
      "post": {
        "tags": [
          "LiveEvents"
        ],
        "summary": "Reset Live Event",
        "description": "Resets an existing Live Event.",
        "operationId": "LiveEvents_Reset",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded."
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously."
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Reset a LiveEvent": {
            "$ref": "examples/liveevent-reset.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs": {
      "get": {
        "tags": [
          "LiveOutputs"
        ],
        "summary": "List Live Outputs",
        "description": "Lists the Live Outputs in the Live Event.",
        "operationId": "LiveOutputs_List",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LiveOutputListResult"
            }
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink"
        },
        "x-ms-examples": {
          "List all LiveOutputs": {
            "$ref": "examples/liveoutput-list-all.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}": {
      "get": {
        "tags": [
          "LiveOutputs"
        ],
        "summary": "Get Live Output",
        "description": "Gets a Live Output.",
        "operationId": "LiveOutputs_Get",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/LiveOutputName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LiveOutput"
            }
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-examples": {
          "Get a LiveOutput by name": {
            "$ref": "examples/liveoutput-list-by-name.json"
          }
        }
      },
      "put": {
        "tags": [
          "LiveOutputs"
        ],
        "summary": "Create Live Output",
        "description": "Creates a Live Output.",
        "operationId": "LiveOutputs_Create",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/LiveOutputName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "name": "parameters",
            "description": "Live Output properties needed for creation.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveOutput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LiveOutput"
            }
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/LiveOutput"
            }
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Create a LiveOutput": {
            "$ref": "examples/liveoutput-create.json"
          }
        }
      },
      "delete": {
        "tags": [
          "LiveOutputs"
        ],
        "summary": "Delete Live Output",
        "description": "Deletes a Live Output.",
        "operationId": "LiveOutputs_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/LiveEventName"
          },
          {
            "$ref": "#/parameters/LiveOutputName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded."
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously."
          },
          "204": {
            "description": "No content. The request has been accepted but the Live Output was not found."
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Delete a LiveOutput": {
            "$ref": "examples/liveoutput-delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints": {
      "get": {
        "tags": [
          "StreamingEndpoints"
        ],
        "summary": "List StreamingEndpoints",
        "description": "Lists the StreamingEndpoints in the account.",
        "operationId": "StreamingEndpoints_List",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/StreamingEndpointListResult"
            }
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink"
        },
        "x-ms-examples": {
          "List all StreamingEndpoints": {
            "$ref": "examples/streamingendpoint-list-all.json"
          }
         }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}": {
      "get": {
        "tags": [
          "StreamingEndpoints"
        ],
        "summary": "Get StreamingEndpoint",
        "description": "Gets a StreamingEndpoint.",
        "operationId": "StreamingEndpoints_Get",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/StreamingEndpointName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/StreamingEndpoint"
            }
          },
          "404": {
            "description": "NotFound"
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-examples": {
          "Get a StreamingEndpoint by name": {
            "$ref": "examples/streamingendpoint-list-by-name.json"
          }
        }
      },
      "put": {
        "tags": [
          "StreamingEndpoints"
        ],
        "summary": "Create StreamingEndpoint",
        "description": "Creates a StreamingEndpoint.",
        "operationId": "StreamingEndpoints_Create",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/StreamingEndpointName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/StreamingResourceAutoStart"
          },
          {
            "name": "parameters",
            "description": "StreamingEndpoint properties needed for creation.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamingEndpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/StreamingEndpoint"
            }
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/StreamingEndpoint"
            }
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Create a StreamingEndpoint": {
            "$ref": "examples/streamingendpoint-create.json"
          }
         }
      },
      "patch": {
        "tags": [
          "StreamingEndpoint"
        ],
        "summary": "Update StreamingEndpoint",
        "description": "Updates a existing StreamingEndpoint.",
        "operationId": "StreamingEndpoints_Update",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/StreamingEndpointName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "name": "parameters",
            "description": "StreamingEndpoint properties needed for creation.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamingEndpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/StreamingEndpoint"
            }
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/StreamingEndpoint"
            }
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Update a StreamingEndpoint": {
            "$ref": "examples/streamingendpoint-update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "StreamingEndpoints"
        ],
        "summary": "Delete StreamingEndpoint",
        "description": "Deletes a StreamingEndpoint.",
        "operationId": "StreamingEndpoints_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/StreamingEndpointName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded."
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously."
          },
          "204": {
            "description": "No content. The request has been accepted but the Streaming Endpoint was not found."
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Delete a StreamingEndpoint": {
            "$ref": "examples/streamingendpoint-delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/start": {
      "post": {
        "tags": [
          "StreamingEndpoints"
        ],
        "summary": "Start StreamingEndpoint",
        "description": "Starts an existing StreamingEndpoint.",
        "operationId": "StreamingEndpoints_Start",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/StreamingEndpointName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded."
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously."
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Start a StreamingEndpoint": {
            "$ref": "examples/streamingendpoint-start.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/stop": {
      "post": {
        "tags": [
          "StreamingEndpoints"
        ],
        "summary": "Stop StreamingEndpoint",
        "description": "Stops an existing StreamingEndpoint.",
        "operationId": "StreamingEndpoints_Stop",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/StreamingEndpointName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded."
          },
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously."
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Stop a StreamingEndpoint": {
            "$ref": "examples/streamingendpoint-stop.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/scale": {
      "post": {
        "tags": [
          "StreamingEndpoints"
        ],
        "summary": "Scale StreamingEndpoint",
        "description": "Scales an existing StreamingEndpoint.",
        "operationId": "StreamingEndpoints_Scale",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionId"
          },
          {
            "$ref": "#/parameters/ResourceGroupName"
          },
          {
            "$ref": "#/parameters/MediaServicesAccountName"
          },
          {
            "$ref": "#/parameters/StreamingEndpointName"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "name": "parameters",
            "description": "StreamingEndpoint scale parameters",
            "in": "body",
            "required": true,
            "schema": {             
              "$ref": "#/definitions/StreamingEntityScaleUnit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded."
          },        
          "202": {
            "description": "Accepted. The request has been accepted for processing and the operation will complete asynchronously."
          },
          "default": {
            "description": "The streaming error response describing why the operation failed.",
            "schema": {
              "$ref": "./Encoding.json#/definitions/ApiError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Scale a StreamingEndpoint": {
            "$ref": "examples/streamingendpoint-scale.json"
          }
        }
      }
    }
  },
  "definitions": {
    "Hls": {
      "properties": {
        "fragmentsPerTsSegment": {
          "format": "int32",
          "type": "integer",
          "description": "The amount of fragments per HTTP Live Streaming (HLS) segment."
        }
      },
      "description": "The HLS configuration."
    },
    "LiveOutputProperties": {
      "required": ["assetName","archiveWindowLength"],
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the Live Output."
        },
        "assetName": {
          "type": "string",
          "description": "The asset name."
        },
        "archiveWindowLength": {
          "format": "duration",
          "type": "string",
          "description": "ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content."
        },
        "manifestName": {
          "type": "string",
          "description": "The manifest file name."
        },
        "hls": {
          "type": "object",
          "$ref": "#/definitions/Hls",
          "description": "The HLS configuration."
        },
        "outputSnapTime": {
          "type": "integer",
          "format": "int64",
          "description": "The output snapshot time."
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "The exact time the Live Output was created."
        },
        "lastModified": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "The exact time the Live Output was last modified."
        },
        "provisioningState": {
          "readOnly": true,
          "type": "string",
          "description": "The provisioning state of the Live Output."
        },
        "resourceState": {
          "description": "The resource state of the Live Output.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Creating",
            "Running",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "LiveOutputResourceState",
            "modelAsString": false
          }
        }
      },
      "description": "The JSON object that contains the properties required to create a Live Output."
    },
    "LiveOutput": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/LiveOutputProperties",
          "description": "The Live Output properties."
        }
      },
      "allOf": [
        {
          "$ref": "./Common.json#/definitions/ProxyResource"
        }
      ],
      "description": "The Live Output."
    },
    "LiveOutputListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveOutput"
          },
          "description": "The result of the List Live Output operation."
        },
        "@odata.count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of result."
        },
        "@odata.nextLink": {
          "type": "string",
          "description": "Th link to the next set of results. Not empty if value contains incomplete list of Live Outputs."
        }
      },
      "description": "The LiveOutput list result.",
      "title": "LiveOutputListResult"
    },
    "LiveEventEndpoint": {
      "properties": {
        "protocol": {
          "type": "string",
          "description": "The endpoint protocol."
        },
        "url": {
          "type": "string",
          "description": "The endpoint URL."
        }
      },
      "description": "The Live Event endpoint."
    },
    "LiveEventInput": {
      "required": ["streamingProtocol"],
      "properties": {
        "streamingProtocol": {
          "type": "string",
          "description": "The streaming protocol for the Live Event.",
          "enum": [
            "FragmentedMP4",
            "RTMP"
          ],
          "x-ms-enum": {
            "name": "LiveEventInputProtocol",
            "modelAsString": false
          }
        },
        "keyFrameIntervalDuration": {
          "type": "string",
          "description": "ISO 8601 timespan duration of the key frame interval duration."
        },
        "accessToken": {
          "type": "string",
          "description": "The access token."
        },
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveEventEndpoint"
          },
          "description": "The input endpoints for the Live Event."
        }
      },
      "description": "The Live Event input."
    },
    "IPRange": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The friendly name for the IP address range."
        },
        "address": {
          "type": "string",
          "description": "The IP address."
        },
        "subnetPrefixLength": {
          "format": "int32",
          "type": "integer",
          "description": "The subnet mask prefix length (see CIDR notation)."
        }
      },
      "description": "The IP address range in the CIDR scheme."
    },
    "IPAccessControl": {
      "properties": {
        "allow": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPRange"
          },
          "description": "The IP allow list."
        }
      },
      "description": "The IP access control."
    },
    "LiveEventPreviewAccessControl": {
      "properties": {
        "ip": {
          "type": "object",
          "$ref": "#/definitions/IPAccessControl",
          "description": "The IP access control properties."
        }
      },
      "description": "The IP access control for Live Event preview."
    },
    "LiveEventPreview": {
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveEventEndpoint"
          },
          "description": "The endpoints for preview."
        },
        "accessControl": {
          "type": "object",
          "$ref": "#/definitions/LiveEventPreviewAccessControl",
          "description": "The access control for LiveEvent preview."
        },
        "previewLocator": {
          "type": "string",
          "description": "The preview locator Guid."
        },
        "streamingPolicyName": {
          "type": "string",
          "description": "The name of streaming policy used for LiveEvent preview"
        }
      },
      "description": "The Live Event preview."
    },
    "LiveEventEncoding": {
      "properties": {
        "encodingType": {
          "type": "string",
          "description": "The encoding type for Live Event.",
          "enum": [
            "None",
            "Basic"
          ],
          "x-ms-enum": {
            "name": "LiveEventEncodingType",
            "modelAsString": false
          }
        },
        "presetName": {
          "type": "string",
          "description": "The encoding preset name."
        }
      },
      "description": "The Live Event encoding."
    },
    "CrossSiteAccessPolicies": {
      "properties": {
        "clientAccessPolicy": {
          "type": "string",
          "description": "The content of clientaccesspolicy.xml used by Silverlight."
        },
        "crossDomainPolicy": {
          "type": "string",
          "description": "The content of crossdomain.xml used by Silverlight."
        }
      },
      "description": "The client access policy."
    },
    "LiveEventActionInput": {
      "properties": {
        "removeOutputsOnStop": {
          "type": "boolean",
          "description": "The flag indicates if remove LiveOutputs on Stop."
        }
      },
      "description": "The LiveEvent action input parameter definition."
    },
    "LiveEventProperties": {
      "required": ["input"],
      "properties": {
        "description": {
          "type": "string",
          "description": "The Live Event description."
        },
        "input": {
          "type": "object",
          "$ref": "#/definitions/LiveEventInput",
          "description": "The Live Event input."
        },
        "preview": {
          "type": "object",
          "$ref": "#/definitions/LiveEventPreview",
          "description": "The Live Event preview."
        },
        "encoding": {
          "type": "object",
          "$ref": "#/definitions/LiveEventEncoding",
          "description": "The Live Event encoding."
        },
        "provisioningState": {
          "readOnly": true,
          "type": "string",
          "description": "The provisioning state of the Live Event."
        },
        "resourceState": {
          "readOnly": true,
          "type": "string",
          "description": "The resource state of the Live Event.",
          "enum": [
            "Stopped",
            "Starting",
            "Running",
            "Stopping",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "LiveEventResourceState",
            "modelAsString": false
          }
        },
        "crossSiteAccessPolicies": {
          "type": "object",
          "$ref": "#/definitions/CrossSiteAccessPolicies",
          "description": "The Live Event access policies."
        },
        "vanityUrl": {
          "type": "boolean",
          "description": "The Live Event vanity URL flag."
        },
        "streamOptions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Default",
              "LowLatency"
            ],
            "x-ms-enum": {
              "name": "StreamOptionsFlag",
              "modelAsString": false
            }
          },
          "description": "The stream options."
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "The exact time the Live Event was created."
        },
        "lastModified": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "The exact time the Live Event was last modified."
        }
      },
      "description": "The Live Event properties."
    },
    "LiveEvent": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/LiveEventProperties",
          "description": "The Live Event properties."
        }
      },
      "allOf": [
        {
          "$ref": "./Common.json#/definitions/TrackedResource"
        }
      ],
      "description": "The Live Event."
    },
    "LiveEventListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveEvent"
          },
          "description": "The result of the List Live Event operation."
        },
        "@odata.count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of result."
        },
        "@odata.nextLink": {
          "type": "string",
          "description": "Th link to the next set of results. Not empty if value contains incomplete list of Live Outputs."
        }
      },
      "description": "The LiveEvent list result.",
      "title": "LiveEventListResult"
    },
    "AkamaiSignatureHeaderAuthenticationKey": {
      "properties": {
        "identifier": {
          "type": "string",
          "description": "identifier of the key"
        },
        "base64Key": {
          "type": "string",
          "description": "authentication key"
        },
        "expiration": {
          "format": "date-time",
          "type": "string",
          "description": "The exact time the authentication key."
        }
      },
      "description": "Akamai Signature Header authentication key."
    },
    "AkamaiAccessControl": {
      "properties": {
        "akamaiSignatureHeaderAuthenticationKeyList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AkamaiSignatureHeaderAuthenticationKey"
          },
          "description": "authentication key list"
        }
      },
      "description": "Akamai access control"
    },
    "StreamingEndpointAccessControl": {
      "properties": {
        "akamai": {
          "type": "object",
          "$ref": "#/definitions/AkamaiAccessControl",
          "description": "The access control of Akamai"
        },
        "ip": {
          "type": "object",
          "$ref": "#/definitions/IPAccessControl",
          "description": "The IP access control of the StreamingEndpoint."
        }
      },
      "description": "StreamingEndpoint access control definition."
    },
    "StreamingEntityScaleUnit": {
      "properties": {
        "scaleUnit": {
          "type": "integer",
          "format": "int32",
          "description": "The scale unit number of the StreamingEndpoint.",
          "title": "ScaleUnit"
        }
      },
      "description": "scale units definition"
    },
    "StreamingEndpointProperties": {
      "properties": {
        "description": {
          "type": "string",
          "description": "The StreamingEndpoint description."
        },
        "scaleUnits": {
          "type": "integer",
          "format": "int32",
          "description": "The number of scale units.",
          "x-nullable": false
        },
        "availabilitySetName": {
          "type": "string",
          "description": "AvailabilitySet name"
        },
        "accessControl": {
          "type": "object",
          "$ref": "#/definitions/StreamingEndpointAccessControl",
          "description": "The access control definition of the StreamingEndpoint."
        },
        "maxCacheAge": {
          "type": "integer",
          "format": "int64",
          "description": "Max cache age"
        },
        "customHostNames": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "custom host name"
          },
          "description": "The custom host names of the StreamingEndpoint"
        },
        "hostName": {
          "readOnly": true,
          "type": "string",
          "description": "The StreamingEndpoint host name."
        },
        "cdnEnabled": {
          "type": "boolean",
          "description": "The CDN enabled flag."
        },
        "cdnProvider": {
          "type": "string",
          "description": "The CDN provider name."
        },
        "cdnProfile": {
          "type": "string",
          "description": "The CDN profile name."
        },
        "provisioningState": {
          "readOnly": true,
          "type": "string",
          "description": "The provisioning state of the StreamingEndpoint."
        },
        "resourceState": {
          "readOnly": true,
          "type": "string",
          "description": "The resource state of the StreamingEndpoint.",
          "enum": [
            "Stopped",
            "Starting",
            "Running",
            "Stopping",
            "Deleting",
            "Scaling"
          ],
          "x-ms-enum": {
            "name": "StreamingEndpointResourceState",
            "modelAsString": false
          }
        },
        "crossSiteAccessPolicies": {
          "type": "object",
          "$ref": "#/definitions/CrossSiteAccessPolicies",
          "description": "The StreamingEndpoint access policies."
        },
        "freeTrialEndTime": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "The free trial expiration time."
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "The exact time the StreamingEndpoint was created."
        },
        "lastModified": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "The exact time the StreamingEndpoint was last modified."
        }
      },
      "description": "The StreamingEndpoint properties."
    },
    "StreamingEndpoint": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/StreamingEndpointProperties",
          "description": "The StreamingEndpoint properties."
        }
      },
      "allOf": [
        {
          "$ref": "./Common.json#/definitions/TrackedResource"
        }
      ],
      "description": "The StreamingEndpoint."
    },
    "StreamingEndpointListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StreamingEndpoint"
          },
          "description": "The result of the List StreamingEndpoint operation."
        },
        "@odata.count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of result."
        },
        "@odata.nextLink": {
          "type": "string",
          "description": "Th link to the next set of results. Not empty if value contains incomplete list of StreamingEndpoints."
        }
      },
      "description": "The StreamingEndpoint list result.",
      "title": "StreamingEndpointListResult"
    }
  },
  "parameters": {
    "SubscriptionId": {
      "name": "subscriptionId",
      "description": "The unique identifier for a Microsoft Azure subscription.",
      "in": "path",
      "required": true,
      "type": "string"
    },
    "ApiVersion": {
      "name": "api-version",
      "description": "The Version of the API to be used with the client request.",
      "in": "query",
      "required": true,
      "type": "string"
    },
    "ResourceGroupName": {
      "name": "resourceGroupName",
      "description": "The name of the resource group within the Azure subscription.",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "MediaServicesAccountName": {
      "name": "accountName",
      "description": "The Media Services account name.",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "LiveEventName": {
      "name": "liveEventName",
      "description": "The name of the Live Event.",
      "in": "path",
      "required": true,
      "type": "string",
      "pattern": "^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$",
      "minLength": 1,
      "maxLength": 32,
      "x-ms-parameter-location": "method"
    },
    "StreamingResourceAutoStart": {
      "name": "autoStart",
      "description": "The flag indicates if auto start the Live Event.",
      "in": "query",
      "required": false,
      "type": "boolean",
      "x-ms-parameter-location": "method"
    },
    "LiveOutputName": {
      "name": "liveOutputName",
      "description": "The name of the Live Output.",
      "in": "path",
      "required": true,
      "type": "string",
      "pattern": "^([a-zA-Z0-9])+(-*[a-zA-Z0-9])*$",
      "minLength": 1,
      "maxLength": 256,
      "x-ms-parameter-location": "method"
    },
    "StreamingEndpointName": {
      "name": "streamingEndpointName",
      "description": "The name of the StreamingEndpoint.",
      "in": "path",
      "required": true,
      "type": "string",
      "pattern": "^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$",
      "minLength": 1,
      "maxLength": 24,
      "x-ms-parameter-location": "method"
    }
  }
}
