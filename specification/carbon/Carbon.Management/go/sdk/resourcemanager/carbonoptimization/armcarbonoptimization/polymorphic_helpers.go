// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcarbonoptimization

import "encoding/json"

func unmarshalCarbonEmissionDataClassification(rawMsg json.RawMessage) (CarbonEmissionDataClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b CarbonEmissionDataClassification
	switch m["dataType"] {
	case "ItemDetailsData":
		b = &CarbonEmissionItemDetailData{}
	case "MonthlySummaryData":
		b = &CarbonEmissionMonthlySummaryData{}
	case "OverallSummaryData":
		b = &CarbonEmissionOverallSummaryData{}
	case "ResourceGroupItemDetailsData":
		b = &ResourceGroupCarbonEmissionItemDetailData{}
	case "ResourceGroupTopItemsMonthlySummaryData":
		b = &ResourceGroupCarbonEmissionTopItemMonthlySummaryData{}
	case "ResourceGroupTopItemsSummaryData":
		b = &ResourceGroupCarbonEmissionTopItemsSummaryData{}
	case "ResourceItemDetailsData":
		b = &ResourceCarbonEmissionItemDetailData{}
	case "ResourceTopItemsMonthlySummaryData":
		b = &ResourceCarbonEmissionTopItemMonthlySummaryData{}
	case "ResourceTopItemsSummaryData":
		b = &ResourceCarbonEmissionTopItemsSummaryData{}
	case "ResourceTypeItemDetailsData":
		b = &ResourceTypeCarbonEmissionItemDetailData{}
	case "TopItemsMonthlySummaryData":
		b = &CarbonEmissionTopItemMonthlySummaryData{}
	case "TopItemsSummaryData":
		b = &CarbonEmissionTopItemsSummaryData{}
	default:
		b = &CarbonEmissionData{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalCarbonEmissionDataClassificationArray(rawMsg json.RawMessage) ([]CarbonEmissionDataClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]CarbonEmissionDataClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalCarbonEmissionDataClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}
