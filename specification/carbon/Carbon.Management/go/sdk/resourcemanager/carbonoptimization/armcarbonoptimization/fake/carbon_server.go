// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// CarbonServer is a fake server for instances of the armcarbonoptimization.CarbonClient type.
type CarbonServer struct {
	// CarbonCarbonServiceServer contains the fakes for client CarbonCarbonServiceClient
	CarbonCarbonServiceServer CarbonCarbonServiceServer

	// CarbonOperationsServer contains the fakes for client CarbonOperationsClient
	CarbonOperationsServer CarbonOperationsServer
}

// NewCarbonServerTransport creates a new instance of CarbonServerTransport with the provided implementation.
// The returned CarbonServerTransport instance is connected to an instance of armcarbonoptimization.CarbonClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCarbonServerTransport(srv *CarbonServer) *CarbonServerTransport {
	return &CarbonServerTransport{srv: srv}
}

// CarbonServerTransport connects instances of armcarbonoptimization.CarbonClient to instances of CarbonServer.
// Don't use this type directly, use NewCarbonServerTransport instead.
type CarbonServerTransport struct {
	srv                         *CarbonServer
	trMu                        sync.Mutex
	trCarbonCarbonServiceServer *CarbonCarbonServiceServerTransport
	trCarbonOperationsServer    *CarbonOperationsServerTransport
}

// Do implements the policy.Transporter interface for CarbonServerTransport.
func (c *CarbonServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (c *CarbonServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "CarbonCarbonServiceClient":
		initServer(&c.trMu, &c.trCarbonCarbonServiceServer, func() *CarbonCarbonServiceServerTransport {
			return NewCarbonCarbonServiceServerTransport(&c.srv.CarbonCarbonServiceServer)
		})
		resp, err = c.trCarbonCarbonServiceServer.Do(req)
	case "CarbonOperationsClient":
		initServer(&c.trMu, &c.trCarbonOperationsServer, func() *CarbonOperationsServerTransport {
			return NewCarbonOperationsServerTransport(&c.srv.CarbonOperationsServer)
		})
		resp, err = c.trCarbonOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
