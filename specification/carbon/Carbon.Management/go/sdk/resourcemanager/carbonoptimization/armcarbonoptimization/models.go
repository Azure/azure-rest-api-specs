// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcarbonoptimization

import "time"

// Response for given query parameters
type CarbonEmissionData struct {
	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Query result data type name
	DataType *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type CarbonEmissionData.
func (c *CarbonEmissionData) GetCarbonEmissionData() *CarbonEmissionData { return c }

// Response for available date range of carbon emission data
type CarbonEmissionDataAvailableDateRange struct {
	// REQUIRED; End date parameter, format is yyyy-MM-dd
	EndDate *string

	// REQUIRED; Start date parameter, format is yyyy-MM-dd
	StartDate *string
}

// List of carbon emission results
type CarbonEmissionDataListResult struct {
	// REQUIRED; The CarbonEmissionData items on this page
	Value []CarbonEmissionDataClassification

	// The link to the next page of items
	NextLink *string

	// The number of result items to skip for next page
	SkipToken *string

	// The access decision list for each input subscription
	SubscriptionAccessDecisionList []*SubscriptionAccessDecision
}

// Response for detailed carbon emissions
type CarbonEmissionItemDetailData struct {
	// REQUIRED; Item category
	CategoryType *CategoryTypeEnum

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Item details data
	DataType *string

	// REQUIRED; Item group name
	GroupName *string

	// REQUIRED; Item name
	ItemName *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type CarbonEmissionItemDetailData.
func (c *CarbonEmissionItemDetailData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         c.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        c.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      c.ChangeValueMonthOverMonth,
		DataType:                       c.DataType,
		TotalCarbonEmission:            c.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: c.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   c.TotalCarbonEmissionLastMonth,
	}
}

// Response for Monthly Carbon Emissions Summary
type CarbonEmissionMonthlySummaryData struct {
	// REQUIRED; Carbon Intensity
	CarbonIntensity *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Monthly summary data
	DataType *string

	// REQUIRED; Monthly date string
	Date *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type CarbonEmissionMonthlySummaryData.
func (c *CarbonEmissionMonthlySummaryData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         c.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        c.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      c.ChangeValueMonthOverMonth,
		DataType:                       c.DataType,
		TotalCarbonEmission:            c.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: c.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   c.TotalCarbonEmissionLastMonth,
	}
}

// Response for Overall Carbon Emissions Summary
type CarbonEmissionOverallSummaryData struct {
	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Overall summary data
	DataType *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type CarbonEmissionOverallSummaryData.
func (c *CarbonEmissionOverallSummaryData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         c.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        c.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      c.ChangeValueMonthOverMonth,
		DataType:                       c.DataType,
		TotalCarbonEmission:            c.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: c.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   c.TotalCarbonEmissionLastMonth,
	}
}

// Response for Top Items Carbon Emissions by Month
type CarbonEmissionTopItemMonthlySummaryData struct {
	// REQUIRED; Item category
	CategoryType *CategoryTypeEnum

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Top items Monthly summary data
	DataType *string

	// REQUIRED; Month date
	Date *string

	// REQUIRED; Item name
	ItemName *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type CarbonEmissionTopItemMonthlySummaryData.
func (c *CarbonEmissionTopItemMonthlySummaryData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         c.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        c.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      c.ChangeValueMonthOverMonth,
		DataType:                       c.DataType,
		TotalCarbonEmission:            c.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: c.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   c.TotalCarbonEmissionLastMonth,
	}
}

// Response for Top Items by Category Type
type CarbonEmissionTopItemsSummaryData struct {
	// REQUIRED; Item category
	CategoryType *CategoryTypeEnum

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Top items summary data
	DataType *string

	// REQUIRED; Item name
	ItemName *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type CarbonEmissionTopItemsSummaryData.
func (c *CarbonEmissionTopItemsSummaryData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         c.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        c.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      c.ChangeValueMonthOverMonth,
		DataType:                       c.DataType,
		TotalCarbonEmission:            c.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: c.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   c.TotalCarbonEmissionLastMonth,
	}
}

// Date range to be used with QueryParameter
type DateRange struct {
	// REQUIRED; End date parameter, format is yyyy-MM-dd
	End *time.Time

	// REQUIRED; Start date parameter, format is yyyy-MM-dd
	Start *time.Time
}

// Query Parameters for Detailed carbon emissions by pageSize
type ItemDetailsQueryFilter struct {
	// REQUIRED; Carbon emission scope for carbon emissions data
	CarbonScopeList []*EmissionScopeEnum

	// REQUIRED; Item Category type
	CategoryType *CategoryTypeEnum

	// REQUIRED; The start date and end date for carbon emissions data
	DateRange *DateRange

	// REQUIRED; Group category name
	GroupCategory *string

	// REQUIRED; Order by column name
	OrderBy *string

	// REQUIRED; Number of items to return
	PageSize *int32

	// CONSTANT; Item pagination data report type name
	// Field has constant value "ItemDetailsReport", any specified value is ignored.
	ReportType *string

	// REQUIRED; Direction for sorting
	SortDirection *string

	// REQUIRED; SubscriptionId list for carbon emissions data
	SubscriptionList []*string

	// Location list for carbon emissions data
	LocationList []*string

	// resourceGroupUrl list for carbon emissions data
	ResourceGroupURLList []*string

	// resource type list for carbon emissions data
	ResourceTypeList []*string

	// The number of result items to skip
	SkipToken *string
}

// GetQueryFilter implements the QueryFilterClassification interface for type ItemDetailsQueryFilter.
func (i *ItemDetailsQueryFilter) GetQueryFilter() *QueryFilter {
	return &QueryFilter{
		CarbonScopeList:      i.CarbonScopeList,
		DateRange:            i.DateRange,
		LocationList:         i.LocationList,
		ReportType:           i.ReportType,
		ResourceGroupURLList: i.ResourceGroupURLList,
		ResourceTypeList:     i.ResourceTypeList,
		SubscriptionList:     i.SubscriptionList,
	}
}

// Query Parameters for Monthly Carbon Emissions Summary
type MonthlySummaryReportQueryFilter struct {
	// REQUIRED; Carbon emission scope for carbon emissions data
	CarbonScopeList []*EmissionScopeEnum

	// REQUIRED; The start date and end date for carbon emissions data
	DateRange *DateRange

	// CONSTANT; Monthly summary report type name
	// Field has constant value "MonthlySummaryReport", any specified value is ignored.
	ReportType *string

	// REQUIRED; SubscriptionId list for carbon emissions data
	SubscriptionList []*string

	// Location list for carbon emissions data
	LocationList []*string

	// resourceGroupUrl list for carbon emissions data
	ResourceGroupURLList []*string

	// resource type list for carbon emissions data
	ResourceTypeList []*string
}

// GetQueryFilter implements the QueryFilterClassification interface for type MonthlySummaryReportQueryFilter.
func (m *MonthlySummaryReportQueryFilter) GetQueryFilter() *QueryFilter {
	return &QueryFilter{
		CarbonScopeList:      m.CarbonScopeList,
		DateRange:            m.DateRange,
		LocationList:         m.LocationList,
		ReportType:           m.ReportType,
		ResourceGroupURLList: m.ResourceGroupURLList,
		ResourceTypeList:     m.ResourceTypeList,
		SubscriptionList:     m.SubscriptionList,
	}
}

// Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// Localized display information for this particular operation.
	Display *OperationDisplay

	// Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure Resource Manager/control-plane
	// operations.
	IsDataAction *bool

	// The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is
	// "user,system"
	Origin *Origin
}

// Localized display information for and operation.
type OperationDisplay struct {
	// The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine",
	// "Restart Virtual Machine".
	Operation *string

	// The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
	Provider *string

	// The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
	Resource *string
}

// Query Parameters for Overall Carbon Emissions Summary
type OverallSummaryReportQueryFilter struct {
	// REQUIRED; Carbon emission scope for carbon emissions data
	CarbonScopeList []*EmissionScopeEnum

	// REQUIRED; The start date and end date for carbon emissions data
	DateRange *DateRange

	// CONSTANT; Overall summary report type name
	// Field has constant value "OverallSummaryReport", any specified value is ignored.
	ReportType *string

	// REQUIRED; SubscriptionId list for carbon emissions data
	SubscriptionList []*string

	// Location list for carbon emissions data
	LocationList []*string

	// resourceGroupUrl list for carbon emissions data
	ResourceGroupURLList []*string

	// resource type list for carbon emissions data
	ResourceTypeList []*string
}

// GetQueryFilter implements the QueryFilterClassification interface for type OverallSummaryReportQueryFilter.
func (o *OverallSummaryReportQueryFilter) GetQueryFilter() *QueryFilter {
	return &QueryFilter{
		CarbonScopeList:      o.CarbonScopeList,
		DateRange:            o.DateRange,
		LocationList:         o.LocationList,
		ReportType:           o.ReportType,
		ResourceGroupURLList: o.ResourceGroupURLList,
		ResourceTypeList:     o.ResourceTypeList,
		SubscriptionList:     o.SubscriptionList,
	}
}

// A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.
type PagedOperation struct {
	// REQUIRED; The Operation items on this page
	Value []*Operation

	// The link to the next page of items
	NextLink *string
}

// Query filter parameter specified by users
type QueryFilter struct {
	// REQUIRED; Carbon emission scope for carbon emissions data
	CarbonScopeList []*EmissionScopeEnum

	// REQUIRED; The start date and end date for carbon emissions data
	DateRange *DateRange

	// REQUIRED; Report type
	ReportType *string

	// REQUIRED; SubscriptionId list for carbon emissions data
	SubscriptionList []*string

	// Location list for carbon emissions data
	LocationList []*string

	// resourceGroupUrl list for carbon emissions data
	ResourceGroupURLList []*string

	// resource type list for carbon emissions data
	ResourceTypeList []*string
}

// GetQueryFilter implements the QueryFilterClassification interface for type QueryFilter.
func (q *QueryFilter) GetQueryFilter() *QueryFilter { return q }

// Response for Resource detailed carbon emissions
type ResourceCarbonEmissionItemDetailData struct {
	// REQUIRED; Item category
	CategoryType *CategoryTypeEnum

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Item details data
	DataType *string

	// REQUIRED; Item group name
	GroupName *string

	// REQUIRED; Item name
	ItemName *string

	// REQUIRED; Resource Group
	ResourceGroup *string

	// REQUIRED; Subscription Id
	SubscriptionID *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64

	// Resource Location
	Location *string

	// Resource Id Url
	ResourceID *string

	// Resource Provider
	ResourceProvider *string

	// Resource Type
	ResourceType *string

	// Friendly name of Resource Type
	ResourceTypeFriendlyName *string
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type ResourceCarbonEmissionItemDetailData.
func (r *ResourceCarbonEmissionItemDetailData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         r.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        r.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      r.ChangeValueMonthOverMonth,
		DataType:                       r.DataType,
		TotalCarbonEmission:            r.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: r.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   r.TotalCarbonEmissionLastMonth,
	}
}

// Response for Top Items Carbon Emissions by Month for ResourceType
type ResourceCarbonEmissionTopItemMonthlySummaryData struct {
	// REQUIRED; Item category
	CategoryType *CategoryTypeEnum

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Top items Monthly summary data
	DataType *string

	// REQUIRED; Month date
	Date *string

	// REQUIRED; Item name
	ItemName *string

	// REQUIRED; Resource Group
	ResourceGroup *string

	// REQUIRED; Subscription Id
	SubscriptionID *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type ResourceCarbonEmissionTopItemMonthlySummaryData.
func (r *ResourceCarbonEmissionTopItemMonthlySummaryData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         r.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        r.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      r.ChangeValueMonthOverMonth,
		DataType:                       r.DataType,
		TotalCarbonEmission:            r.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: r.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   r.TotalCarbonEmissionLastMonth,
	}
}

// Response for Top Items For Resource
type ResourceCarbonEmissionTopItemsSummaryData struct {
	// REQUIRED; Item category
	CategoryType *CategoryTypeEnum

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Top items summary data
	DataType *string

	// REQUIRED; Item name
	ItemName *string

	// REQUIRED; Resource Group
	ResourceGroup *string

	// REQUIRED; Subscription Id
	SubscriptionID *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type ResourceCarbonEmissionTopItemsSummaryData.
func (r *ResourceCarbonEmissionTopItemsSummaryData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         r.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        r.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      r.ChangeValueMonthOverMonth,
		DataType:                       r.DataType,
		TotalCarbonEmission:            r.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: r.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   r.TotalCarbonEmissionLastMonth,
	}
}

// Response for Resource Group detailed carbon emissions
type ResourceGroupCarbonEmissionItemDetailData struct {
	// REQUIRED; Item category
	CategoryType *CategoryTypeEnum

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Item details data
	DataType *string

	// REQUIRED; Item group name
	GroupName *string

	// REQUIRED; Item name
	ItemName *string

	// REQUIRED; Subscription Id
	SubscriptionID *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type ResourceGroupCarbonEmissionItemDetailData.
func (r *ResourceGroupCarbonEmissionItemDetailData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         r.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        r.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      r.ChangeValueMonthOverMonth,
		DataType:                       r.DataType,
		TotalCarbonEmission:            r.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: r.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   r.TotalCarbonEmissionLastMonth,
	}
}

// Response for Top Items Carbon Emissions by Month for ResourceGroupType
type ResourceGroupCarbonEmissionTopItemMonthlySummaryData struct {
	// REQUIRED; Item category
	CategoryType *CategoryTypeEnum

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Top items Monthly summary data
	DataType *string

	// REQUIRED; Month date
	Date *string

	// REQUIRED; Item name
	ItemName *string

	// REQUIRED; Subscription Id
	SubscriptionID *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type ResourceGroupCarbonEmissionTopItemMonthlySummaryData.
func (r *ResourceGroupCarbonEmissionTopItemMonthlySummaryData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         r.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        r.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      r.ChangeValueMonthOverMonth,
		DataType:                       r.DataType,
		TotalCarbonEmission:            r.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: r.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   r.TotalCarbonEmissionLastMonth,
	}
}

// Response for Top Items For ResourceGroup
type ResourceGroupCarbonEmissionTopItemsSummaryData struct {
	// REQUIRED; Item category
	CategoryType *CategoryTypeEnum

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Top items summary data
	DataType *string

	// REQUIRED; Item name
	ItemName *string

	// REQUIRED; Subscription Id
	SubscriptionID *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type ResourceGroupCarbonEmissionTopItemsSummaryData.
func (r *ResourceGroupCarbonEmissionTopItemsSummaryData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         r.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        r.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      r.ChangeValueMonthOverMonth,
		DataType:                       r.DataType,
		TotalCarbonEmission:            r.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: r.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   r.TotalCarbonEmissionLastMonth,
	}
}

// Response for detailed carbon emissions
type ResourceTypeCarbonEmissionItemDetailData struct {
	// REQUIRED; Item category, which is ResourceType
	CategoryType *CategoryTypeEnum

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo
	ChangeRatioFor12Months *float64

	// REQUIRED; Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeRatioForLastMonth *float64

	// REQUIRED; Resource Type level details data
	DataType *string

	// REQUIRED; Item name, resource type name
	ItemName *string

	// REQUIRED; Item group name
	ResourceTypeFriendlyName *string

	// REQUIRED; Total carbon emissions for given query parameters
	TotalCarbonEmission *float64

	// REQUIRED; Total carbon emissions for 12 months ago for given query parameters
	TotalCarbonEmission12MonthsAgo *float64

	// REQUIRED; Total carbon emission for last month for given query parameters
	TotalCarbonEmissionLastMonth *float64

	// Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth
	ChangeValueMonthOverMonth *float64
}

// GetCarbonEmissionData implements the CarbonEmissionDataClassification interface for type ResourceTypeCarbonEmissionItemDetailData.
func (r *ResourceTypeCarbonEmissionItemDetailData) GetCarbonEmissionData() *CarbonEmissionData {
	return &CarbonEmissionData{
		ChangeRatioFor12Months:         r.ChangeRatioFor12Months,
		ChangeRatioForLastMonth:        r.ChangeRatioForLastMonth,
		ChangeValueMonthOverMonth:      r.ChangeValueMonthOverMonth,
		DataType:                       r.DataType,
		TotalCarbonEmission:            r.TotalCarbonEmission,
		TotalCarbonEmission12MonthsAgo: r.TotalCarbonEmission12MonthsAgo,
		TotalCarbonEmissionLastMonth:   r.TotalCarbonEmissionLastMonth,
	}
}

// Access Decision for each Subscription
type SubscriptionAccessDecision struct {
	// REQUIRED; Access decision to subscription
	Decision *AccessDecisionEnum

	// REQUIRED; Id of Subscription
	SubscriptionID *string
}

// Query Parameters for Top Items Carbon Emissions by Month
type TopItemsMonthlySummaryReportQueryFilter struct {
	// REQUIRED; Carbon emission scope for carbon emissions data
	CarbonScopeList []*EmissionScopeEnum

	// REQUIRED; Item Category type
	CategoryType *CategoryTypeEnum

	// REQUIRED; The start date and end date for carbon emissions data
	DateRange *DateRange

	// CONSTANT; Top items monthly summary report type name
	// Field has constant value "TopItemsMonthlySummaryReport", any specified value is ignored.
	ReportType *string

	// REQUIRED; SubscriptionId list for carbon emissions data
	SubscriptionList []*string

	// REQUIRED; Number of top items to return. The value should be between 5 and 100
	TopItems *int32

	// Location list for carbon emissions data
	LocationList []*string

	// resourceGroupUrl list for carbon emissions data
	ResourceGroupURLList []*string

	// resource type list for carbon emissions data
	ResourceTypeList []*string
}

// GetQueryFilter implements the QueryFilterClassification interface for type TopItemsMonthlySummaryReportQueryFilter.
func (t *TopItemsMonthlySummaryReportQueryFilter) GetQueryFilter() *QueryFilter {
	return &QueryFilter{
		CarbonScopeList:      t.CarbonScopeList,
		DateRange:            t.DateRange,
		LocationList:         t.LocationList,
		ReportType:           t.ReportType,
		ResourceGroupURLList: t.ResourceGroupURLList,
		ResourceTypeList:     t.ResourceTypeList,
		SubscriptionList:     t.SubscriptionList,
	}
}

// Query Parameters for Top Items Carbon Emission by Category Type
type TopItemsSummaryReportQueryFilter struct {
	// REQUIRED; Carbon emission scope for carbon emissions data
	CarbonScopeList []*EmissionScopeEnum

	// REQUIRED; Item Category type
	CategoryType *CategoryTypeEnum

	// REQUIRED; The start date and end date for carbon emissions data
	DateRange *DateRange

	// CONSTANT; Top items summary report type name
	// Field has constant value "TopItemsSummaryReport", any specified value is ignored.
	ReportType *string

	// REQUIRED; SubscriptionId list for carbon emissions data
	SubscriptionList []*string

	// REQUIRED; Number of top items to return. The value should be between 5 and 100
	TopItems *int32

	// Location list for carbon emissions data
	LocationList []*string

	// resourceGroupUrl list for carbon emissions data
	ResourceGroupURLList []*string

	// resource type list for carbon emissions data
	ResourceTypeList []*string
}

// GetQueryFilter implements the QueryFilterClassification interface for type TopItemsSummaryReportQueryFilter.
func (t *TopItemsSummaryReportQueryFilter) GetQueryFilter() *QueryFilter {
	return &QueryFilter{
		CarbonScopeList:      t.CarbonScopeList,
		DateRange:            t.DateRange,
		LocationList:         t.LocationList,
		ReportType:           t.ReportType,
		ResourceGroupURLList: t.ResourceGroupURLList,
		ResourceTypeList:     t.ResourceTypeList,
		SubscriptionList:     t.SubscriptionList,
	}
}
