import "@cadl-lang/rest";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-providerhub";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";


@armProviderNamespace
@service({
  title: "NewRelic.Observability",
  version: "2022-07-01-preview",
})
@useDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
@useDependency(Azure.Core.Versions.v1_0_Preview_1)
namespace NewRelic.Observability;

using Azure.ResourceManager;
using Cadl.Rest;
using Cadl.Http;
using Cadl.Versioning;
using Azure.Core;

@doc("Reusable representation of an email address")
@pattern("^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$")
scalar email extends string;

@doc("Credential string.")
@secret
scalar SecureString extends string;

@doc("A Monitor Resource by NewRelic")
model NewRelicMonitorResource is TrackedResource<MonitorProperties> {
  @key("monitorName")
  @segment("monitors")
  @doc("Name of the Monitors resource")
  @path
  name: string;
  ...ManagedServiceIdentity;
  
}

interface Operations extends Azure.ResourceManager.Operations {}

@armResourceOperations
interface Monitors {
  op Get is
   ArmResourceRead<NewRelicMonitorResource,
   {...ApiVersionParameter,...SubscriptionIdParameter,...ResourceGroupParameter}>;
  
  op CreateOrUpdate is
   ArmResourceCreateOrUpdateAsync<NewRelicMonitorResource,
   {...ApiVersionParameter,...SubscriptionIdParameter,...ResourceGroupParameter}>;
  
  op Update is
   ArmResourcePatchSync<NewRelicMonitorResource, MonitorProperties,
   {...ApiVersionParameter,...SubscriptionIdParameter,...ResourceGroupParameter}>;
  
  op Delete is
   ArmResourceDeleteAsync<NewRelicMonitorResource,
   {...ApiVersionParameter,...SubscriptionIdParameter,...ResourceGroupParameter,...UserEmailParameter}>;
   
  op ListBySubscription is ArmListBySubscription<NewRelicMonitorResource>;
  
  op LIstByRG is ArmResourceListByParent<NewRelicMonitorResource>;

  @post
  @doc("List the resources currently being monitored by the NewRelic monitor resource.")
  @armResourceAction(NewRelicMonitorResource)
  @segment("monitoredResources")
  op ListMonitoredResources(
    ...ResourceInstanceParameters<NewRelicMonitorResource>
  ): ArmResponse<MonitoredResourceListResponse> | ErrorResponse;
  
  @post
  @doc("Returns the payload that needs to be passed in the request body for installing NewRelic agent on a VM.")
  @segment("vmHostPayloads")
  op VMHostPayload(
    ...ResourceInstanceParameters<NewRelicMonitorResource>
  ): ArmResponse<VMExtensionPayload> | ErrorResponse;
  
  @post
  @doc("List the compute vm resources currently being monitored by the NewRelic resource.")
  @segment("listHosts")
  op ListHosts(
    ...ResourceInstanceParameters<NewRelicMonitorResource>,
    ...HostsGetParameter
  ): ArmResponse<VMHostsListResponse> | ErrorResponse;

  @post
  @doc("List the app service resources currently being monitored by the NewRelic resource.")
  @segment("listAppServices")
  op ListAppServices(
    ...ResourceInstanceParameters<NewRelicMonitorResource>,
    ...AppServicesGetParameter
  ): ArmResponse<AppServicesListResponse> | ErrorResponse;

  @post
  @doc("Switches the billing for NewRelic monitor resource.")
  @segment("switchBilling")
  op SwitchBilling(
    ...ResourceInstanceParameters<NewRelicMonitorResource>,
    ...SwitchBillingParameter
  ): ArmResponse<NewRelicMonitorResource> | ArmAcceptedResponse | void | ErrorResponse;
  
  @post
  @doc("Get metric rules")
  @segment("getMetricRules")
  op getMetricRules(
    ...ResourceInstanceParameters<NewRelicMonitorResource>,
    ...MetricsRequestParameter
  ): ArmResponse<MetricRules> | ErrorResponse;

  @post
  @doc("Get metric status")
  @segment("getMetricStatus")
  op getMetricStatus(
    ...ResourceInstanceParameters<NewRelicMonitorResource>,
    ...MetricsStatusRequestParameter
  ): ArmResponse<MetricsStatusResponse> | ErrorResponse;
}

interface accounts {
  @doc("List all the existing accounts")
  @tag("Accounts")
  @route("/subscriptions/{subscriptionId}/providers/NewRelic.Observability/accounts")
  op list(...ApiVersionParameter,
  ...SubscriptionIdParameter,
  ...UserEmailParameter,
  ...LocationParameter):ArmResponse<AccountsListResponse> | ErrorResponse
}

interface organizations {
  @doc("List all the existing organizations")
  @tag("Organizations")
  @route("/subscriptions/{subscriptionId}/providers/NewRelic.Observability/organizations")
  op list(...ApiVersionParameter,
    ...SubscriptionIdParameter,
    ...UserEmailParameter,
    ...LocationParameter):ArmResponse<OrganizationsListResponse> | ErrorResponse
}

interface plans {
  @doc("List plans data")
  @tag("Plan")
  @route("/subscriptions/{subscriptionId}/providers/NewRelic.Observability/plans")
  op list(...ApiVersionParameter,
    ...SubscriptionIdParameter,
    ...AccountIdParameter,
    ...OrganizationIdParameter):ArmResponse<PlanDataListResponse> | ErrorResponse
}

@doc("A tag rule belonging to NewRelic account")
@parentResource(NewRelicMonitorResource)
model TagRule is ProxyResource<MonitoringTagRulesProperties> {
  @key("ruleSetName")
  @segment("tagRules")
  @doc("Name of the TagRule")
  @path
  name: string;
  
}

@armResourceOperations
interface TagRules extends ProxyResourceOperations<TagRule>,ProxyResourceUpdate<TagRule, MonitoringTagRulesProperties>{
}

@doc("Properties specific to the NewRelic Monitor resource")
model MonitorProperties {
  @visibility("read")
  @doc("Provisioning State of the resource")
  provisioningState?: ProvisioningState;

  @visibility("read")
  @doc("MonitoringStatus of the resource")
  monitoringStatus?: MonitoringStatus;
  
  @visibility("read")
  @doc("NewRelic Organization properties of the resource")
  marketplaceSubscriptionStatus?: MarketplaceSubscriptionStatus;
  
  @visibility("read")
  @doc("Marketplace Subscription Id")
  marketplaceSubscriptionId?: string;
  
  @doc("MarketplaceSubscriptionStatus of the resource")
  newRelicAccountProperties?: NewRelicAccountProperties;
  
  @doc("User Info")
  userInfo?: UserInfo;
  
  @doc("Plan details")
  planData?: PlanData;

  @visibility("read")
  @doc("Liftr resource category")
  liftrResourceCategory?: LiftrResourceCategories;
  
  @visibility("read")
  @doc("Liftr resource preference. The priority of the resource.")
  liftrResourcePreference?: int32;

  @doc("Source of org creation")
  orgCreationSource?: OrgCreationSource;

  @doc("Source of account creation")
  accountCreationSource?: AccountCreationSource;

}

@doc("Properties of the NewRelic account")
model NewRelicAccountProperties{

  @doc("User id")
  userId?: string;

  @doc("NewRelic Account Information")
  accountInfo?: AccountInfo;

  @doc("NewRelic Organization Information")
  organizationInfo?: OrganizationInfo;

  @doc("date when plan was applied")
  singleSignOnProperties?: NewRelicSingleSignOnProperties;
}

@doc("Single sign on Info of the NewRelic account")
model NewRelicSingleSignOnProperties{

  @doc("Single sign-on state")
  singleSignOnState?: SingleSignOnStates;

  @doc("The Id of the Enterprise App used for Single sign-on.")
  enterpriseAppId?: string;

  @doc("The login URL specific to this NewRelic Organization")
  singleSignOnUrl?: string;
  
  @doc("Provisioning state")
  provisioningState?: ProvisioningState;
}


@doc("Account Info of the NewRelic account")
model AccountInfo{

  @doc("Account id")
  accountId?: string;

  @doc("ingestion key of account")
  ingestionKey?: SecureString;

  @doc("NewRelic account region")
  region?: string;
}

@doc("Organization Info of the NewRelic account")
model OrganizationInfo{

  @doc("Organization id")
  organizationId?: string;
}

@doc("Plan data of NewRelic Monitor resource")
model PlanData{

  @doc("Different usage type like PAYG/COMMITTED. this could be enum")
  usageType?: UsageType;

  @doc("Different billing cycles like MONTHLY/WEEKLY. this could be enum")
  billingCycle?: BillingCycle;

  @doc("plan id as published by NewRelic")
  planDetails?: string;

  @doc("date when plan was applied")
  effectiveDate?: zonedDateTime;
}

@doc("User Info of NewRelic Monitor resource")
model UserInfo{

  @maxLength(50)
  @doc("First name")
  firstName?: string;

  @maxLength(50)
  @doc("Last name")
  lastName?: string;

  @doc("User Email")
  emailAddress?: email;

  @maxLength(40)
  @doc("Contact phone number")
  phoneNumber?: string;
  
  @doc("country if user")
  country?: string;
}

@doc("Provisioning State of the Monitor resource")
enum ProvisioningState {
  @doc("Monitor resource creation request accepted")
  "Accepted",
  @doc("Monitor resource creation started")
  "Creating",
  @doc("Monitor resource is being updated")
  "Updating",
  @doc("Monitor resource deletion started")
  "Deleting",
  @doc("Monitor resource creation successful")
  "Succeeded",
  @doc("Monitor resource creation failed")
  "Failed",
  @doc("Monitor resource creation canceled")
  "Canceled",
  @doc("Monitor resource is deleted")
  "Deleted",
  @doc("Monitor resource state is unknown")
  "NotSpecified"
}

@doc("Flag specifying if the resource monitoring is enabled or disabled.")
enum MonitoringStatus {
  @doc("monitoring is enabled")
  "Enabled",
  @doc("monitoring is disabled")
  "Disabled"
}

@doc("Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.")
enum MarketplaceSubscriptionStatus {
  @doc("monitoring is enabled")
  "Active",
  @doc("monitoring is disabled")
  "Suspended"
}

@doc("Liftr Resource category.")
enum LiftrResourceCategories {
  "Unknown",
  "MonitorLogs"
}

@doc("Various states of the SSO resource")
enum SingleSignOnStates {
  "Initial",
  "Enable",
  "Disable",
  "Existing"
}

@doc("The resource-specific properties for this resource.")
model MonitoringTagRulesProperties {
  @visibility("read")
  @doc("Provisioning State of the resource")
  provisioningState?: ProvisioningState;

  @doc("Set of rules for sending logs for the Monitor resource.")
  logRules?: LogRules;
  
  @doc("Set of rules for sending metrics for the Monitor resource.")
  metricRules?: MetricRules;
}

@doc("Set of rules for sending logs for the Monitor resource.")
model LogRules {
  @doc("Flag specifying if AAD logs should be sent for the Monitor resource.")
  sendAadLogs?: SendAadLogsStatus;

  @doc("Flag specifying if subscription logs should be sent for the Monitor resource.")
  sendSubscriptionLogs?: SendSubscriptionLogsStatus;
  
  @doc("Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.")
  sendActivityLogs?: SendActivityLogsStatus;
  
  @doc("List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured.\nIf only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.")
  filteringTags?: FilteringTag[];
}

@doc("Set of rules for sending metrics for the Monitor resource.")
model MetricRules {
  @doc("Flag specifying if metrics should be sent for the Monitor resource.")
  sendMetrics?: SendMetricsStatus;

  @doc("List of filtering tags to be used for capturing metrics.")
  filteringTags?: FilteringTag[];

  @doc("User Email")
  userEmail?: email;
}

@doc("Indicates whether AAD logs are being sent.")
enum SendAadLogsStatus {
  "Enabled",
  "Disabled"
}

@doc("Indicates whether metrics are being sent.")
enum SendMetricsStatus {
  "Enabled",
  "Disabled"
}

@doc("Indicates whether subscription logs are being sent.")
enum SendSubscriptionLogsStatus {
  "Enabled",
  "Disabled"
}

@doc("Indicates whether activity logs are being sent.")
enum SendActivityLogsStatus {
  "Enabled",
  "Disabled"
}

@doc("The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.")
model FilteringTag{

  @doc("The name (also known as the key) of the tag.")
  name?: string;

  @doc("The value of the tag.")
  value?: string;

  @doc("Valid actions for a filtering tag. Exclusion takes priority over inclusion.")
  action?: TagAction;
}

@doc("Valid actions for a filtering tag. Exclusion takes priority over inclusion.")
enum TagAction {
  "Include",
  "Exclude"
}

@doc("Details of resource being monitored by NewRelic monitor resource")
model MonitoredResource {
  @doc("The ARM id of the resource.")
  id?: string;

  @doc("Flag indicating if resource is sending metrics to NewRelic.")
  sendingMetrics?: SendingMetricsStatus;
  
  @doc("Reason for why the resource is sending metrics (or why it is not sending).")
  reasonForMetricsStatus?: string;
  
  @doc("Flag indicating if resource is sending logs to NewRelic.")
  sendingLogs?: SendingLogsStatus;
  
  @doc("Reason for why the resource is sending logs (or why it is not sending).")
  reasonForLogsStatus?: string;
}

@doc("Indicates whether metrics are being sent.")
enum SendingMetricsStatus {
  "Enabled",
  "Disabled"
}

@doc("Indicates whether logs are being sent.")
enum SendingLogsStatus {
  "Enabled",
  "Disabled"
}

@doc("List of all the resources being monitored by NewRelic monitor resource")
model MonitoredResourceListResponse extends Azure.Core.Page<MonitoredResource> {}

@doc("Response of payload to be passed while installing VM agent.")
model VMExtensionPayload {
  @doc("Ingestion key of the account")
  ingestionKey?: string;
}

@doc("Host Get Parameter specification.")
model HostsGetParameter {
  @doc("The details of the Hosts get request.")
  @body
  request: HostsGetRequest;
}

@doc("User email specification.")
model UserEmailParameter {
  @doc("User Email.")
  @query
  userEmail: string;
}

@doc("Location for NewRelic resource")
model LocationParameter {
  @doc("Location for NewRelic.")
  @query
  location: string;
}

@doc("Account Id parameter")
model AccountIdParameter {
  @doc("Account Id.")
  @query
  accountId?: string;
}

@doc("Organization Id parameter")
model OrganizationIdParameter {
  @doc("Organization Id.")
  @query
  organizationId?: string;
}

@doc("Request of a Hosts get Operation.")
model HostsGetRequest {
  @doc("VM resource IDs")
  vmIds?: string[]; 

  @doc("User Email")
  userEmail: email;
}

@doc("App services Get Parameter specification.")
model AppServicesGetParameter {
  @doc("The details of the app services get request.")
  @body
  request: AppServicesGetRequest;
}

@doc("Request of a app services get Operation.")
model AppServicesGetRequest {
  @doc("Azure resource IDs")
  azureResourceIds?: string[]; 

  @doc("User Email")
  userEmail: email;
}

@doc("Switch Billing Parameter specification.")
model SwitchBillingParameter {
  @doc("The details of the switch billing request.")
  @body
  request: SwitchBillingRequest;
}

@doc("Request of a switch billing Operation.")
model SwitchBillingRequest {
  @doc("Azure resource Id")
  azureResourceId?: string;

  @doc("Organization id")
  organizationId?: string;

  @doc("Plan details")
  planData?: PlanData;

  @doc("User Email")
  userEmail: email;
}

@doc("Get Metrics Status Parameter specification.")
model MetricsStatusRequestParameter {
  @doc("The details of the get metrics status request.")
  @body
  request: MetricsStatusRequest;
}

@doc("Request of get metrics status Operation.")
model MetricsStatusRequest {
  @doc("Azure resource IDs")
  azureResourceIds?: string[];

  @doc("User Email")
  userEmail: email;

}

@doc("Response of get metrics status Operation.")
model MetricsStatusResponse {
  @doc("Azure resource IDs")
  azureResourceIds?: string[];

}

@doc("Get Metrics Status Parameter specification.")
model MetricsRequestParameter {
  @doc("The details of the get metrics status request.")
  @body
  request: MetricsRequest;
}

@doc("Request of get metrics Operation.")
model MetricsRequest {

  @doc("User Email")
  userEmail: email;

}

@doc("Response of a list VM Host Operation.")
model VMHostsListResponse extends Azure.Core.Page<VMInfo> {}

@doc("Details of VM Resource having NewRelic OneAgent installed")
model VMInfo {
  @doc("Azure VM resource ID")
  vmId?: string;

  @doc("Version of the NewRelic agent installed on the VM.")
  agentVersion?: string;
  
  @doc("Status of the NewRelic agent installed on the VM.")
  agentStatus?: string;
}

@doc("Response of a list app services Operation.")
model AppServicesListResponse extends Azure.Core.Page<AppServiceInfo> {}

@doc("Details of VM Resource having NewRelic OneAgent installed")
model AppServiceInfo {
  @doc("Azure App service resource ID")
  azureResourceId?: string;

  @doc("Version of the NewRelic agent installed on the App service.")
  agentVersion?: string;
  
  @doc("Status of the NewRelic agent installed on the App service.")
  agentStatus?: string;
}

@doc("The details of a Organization resource.")
model OrganizationResource is ProxyResource<OrganizationProperties> {
  @key("organization")
  @segment("organizations")
  @doc("The name of the Organization resource")
  @path
  name: string;
}

@doc("Response of get all organizations Operation.")
model OrganizationsListResponse extends Azure.Core.Page<OrganizationResource> {}

@doc("Details of Organizations")
model OrganizationProperties {
  @doc("organization id")
  organizationId?: string;

  @doc("organization name")
  organizationName?: string;

  @doc("Billing source")
  billingSource?: BillingSource;
}

@doc("The details of a account resource.")
model AccountResource is ProxyResource<AccountProperties> {
  @key("account")
  @segment("accounts")
  @doc("The name of the Account resource")
  @path
  name: string;
}

@doc("List of all the New relic accounts for the given user")
model AccountProperties {
  @doc("organization id")
  organizationId?: string;

  @doc("account id")
  accountId?: string;

  @doc("account name")
  accountName?: string;

  @doc("region")
  region?: string;
}

@doc("Response of get all accounts Operation.")
model AccountsListResponse extends Azure.Core.Page<AccountResource> {}

@doc("The details of a PlanData resource.")
model PlanDataResource is ProxyResource<PlanDataProperties> {
  @key("plan")
  @segment("plans")
  @doc("The name of the PlanData resource")
  @path
  name: string;
}

@doc("Response of get all plan data Operation.")
model PlanDataListResponse extends Azure.Core.Page<PlanDataResource> {}

@doc("Plan details")
model PlanDataProperties {
  @doc("Plan details")
  planData?: PlanData;

  @doc("Source of org creation")
  orgCreationSource?: OrgCreationSource;

  @doc("Source of account creation")
  accountCreationSource?: AccountCreationSource;
}

@doc("Billing source")
enum BillingSource {
  @doc("Billing source is Azure")
  "AZURE",
  "NEWRELIC"
}

@doc("Source of Org creation")
enum OrgCreationSource {
  @doc("Org is created from LIFTR")
  "LIFTR",

  @doc("Org is created from NEWRELIC")
  "NEWRELIC"
}

@doc("Source of Account creation")
enum AccountCreationSource {
  @doc("Account is created from LIFTR")
  "LIFTR",

  @doc("Account is created from NEWRELIC")
  "NEWRELIC"
}

@doc("Different usage type like PAYG/COMMITTED")
enum UsageType {
  @doc("Usage type is PAYG")
  "PAYG",
  @doc("Usage type is COMMITTED")
  "COMMITTED"
}

@doc("Different usage type like YEARLY/MONTHLY")
enum BillingCycle {
  @doc("Billing cycle is YEARLY")
  "YEARLY",
  @doc("Billing cycle is MONTHLY")
  "MONTHLY",
  @doc("Billing cycle is WEEKLY")
  "WEEKLY"
}