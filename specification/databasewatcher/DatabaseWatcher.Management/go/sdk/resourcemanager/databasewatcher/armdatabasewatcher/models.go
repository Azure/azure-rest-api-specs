// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armdatabasewatcher

import "time"

// Common properties for all Azure Resource Manager resources.
type ArmResource struct {
	// REQUIRED; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// REQUIRED; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string

	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData
}

// Base class used for type definitions
type ArmResourceBase struct {
}

// The properties of a data store.
type Datastore struct {
	// REQUIRED; The Kusto cluster URI.
	KustoClusterURI *string

	// REQUIRED; The Kusto data ingestion URI.
	KustoDataIngestionURI *string

	// REQUIRED; The name of a Kusto database.
	KustoDatabaseName *string

	// REQUIRED; The Kusto management URL.
	KustoManagementURL *string

	// REQUIRED; The type of a Kusto offering.
	KustoOfferingType *KustoOfferingType

	// The Azure ResourceId of an Azure Data Explorer cluster.
	AdxClusterResourceID *string

	// The Kusto cluster display name.
	KustoClusterDisplayName *string
}

// The properties of the managed service identities assigned to this resource.
type ManagedIdentityProperties struct {
	// REQUIRED; The type of managed identity assigned to this resource.
	Type *ManagedIdentityType

	// The active directory identifier of this principal.
	PrincipalID *string

	// The Active Directory tenant id of the principal.
	TenantID *string

	// The identities assigned to this resource by the user.
	UserAssignedIdentities map[string]*UserAssignedIdentity
}

// Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// Localized display information for this particular operation.
	Display *OperationDisplay

	// Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure Resource Manager/control-plane
	// operations.
	IsDataAction *bool

	// The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is
	// "user,system"
	Origin *Origin
}

// Localized display information for and operation.
type OperationDisplay struct {
	// The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine",
	// "Restart Virtual Machine".
	Operation *string

	// The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
	Provider *string

	// The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
	Resource *string
}

// A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.
type PagedOperation struct {
	// REQUIRED; The Operation items on this page
	Value []*Operation

	// The link to the next page of items
	NextLink *string
}

// The base proxy resource.
type ProxyResourceBase struct {
	// REQUIRED; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// REQUIRED; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string

	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData
}

// The properties specific to elastic pool in Azure SQL Database.
type SQLDbElasticPoolTargetProperties struct {
	// REQUIRED; The Azure ResourceId of the anchor database used to connect to an elastic pool.
	AnchorDatabaseResourceID *string

	// REQUIRED; The server name to use in the connection string when connecting to a target. Port number and instance name must
	// be specified separately.
	ConnectionServerName *string

	// REQUIRED; The Azure ResourceId of an Azure SQL DB elastic pool target.
	SQLEpResourceID *string

	// REQUIRED; The type of authentication to use when connecting to a target.
	TargetAuthenticationType *TargetAuthenticationType

	// CONSTANT; The Azure SQL DB elastic pool target.
	// Field has constant value "SqlEp", any specified value is ignored.
	TargetType *string

	// The provisioning state of the resource.
	ProvisioningState *ResourceProvisioningState

	// Set to true to monitor a high availability replica of specified target, if any.
	ReadIntent *bool

	// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
	TargetVault *VaultSecret
}

// GetTargetProperties implements the TargetPropertiesClassification interface for type SQLDbElasticPoolTargetProperties.
func (s *SQLDbElasticPoolTargetProperties) GetTargetProperties() *TargetProperties {
	return &TargetProperties{
		ConnectionServerName:     s.ConnectionServerName,
		ProvisioningState:        s.ProvisioningState,
		TargetAuthenticationType: s.TargetAuthenticationType,
		TargetType:               s.TargetType,
		TargetVault:              s.TargetVault,
	}
}

// The properties specific to single database in Azure SQL Database.
type SQLDbSingleDatabaseTargetProperties struct {
	// REQUIRED; The server name to use in the connection string when connecting to a target. Port number and instance name must
	// be specified separately.
	ConnectionServerName *string

	// REQUIRED; The Azure ResourceId of an Azure SQL DB single database target.
	SQLDbResourceID *string

	// REQUIRED; The type of authentication to use when connecting to a target.
	TargetAuthenticationType *TargetAuthenticationType

	// CONSTANT; The Azure SQL DB single database target.
	// Field has constant value "SqlDb", any specified value is ignored.
	TargetType *string

	// The provisioning state of the resource.
	ProvisioningState *ResourceProvisioningState

	// Set to true to monitor a high availability replica of specified target, if any.
	ReadIntent *bool

	// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
	TargetVault *VaultSecret
}

// GetTargetProperties implements the TargetPropertiesClassification interface for type SQLDbSingleDatabaseTargetProperties.
func (s *SQLDbSingleDatabaseTargetProperties) GetTargetProperties() *TargetProperties {
	return &TargetProperties{
		ConnectionServerName:     s.ConnectionServerName,
		ProvisioningState:        s.ProvisioningState,
		TargetAuthenticationType: s.TargetAuthenticationType,
		TargetType:               s.TargetType,
		TargetVault:              s.TargetVault,
	}
}

// The properties specific to Azure SQL Managed Instance targets.
type SQLMiTargetProperties struct {
	// REQUIRED; The server name to use in the connection string when connecting to a target. Port number and instance name must
	// be specified separately.
	ConnectionServerName *string

	// REQUIRED; The Azure ResourceId of an Azure SQL Managed Instance target.
	SQLMiResourceID *string

	// REQUIRED; The type of authentication to use when connecting to a target.
	TargetAuthenticationType *TargetAuthenticationType

	// CONSTANT; The Azure SQL Managed Instance target.
	// Field has constant value "SqlMi", any specified value is ignored.
	TargetType *string

	// The TCP port number to optionally use in the connection string when connecting to an Azure SQL Managed Instance target.
	ConnectionTCPPort *int32

	// The provisioning state of the resource.
	ProvisioningState *ResourceProvisioningState

	// Set to true to monitor a high availability replica of specified target, if any.
	ReadIntent *bool

	// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
	TargetVault *VaultSecret
}

// GetTargetProperties implements the TargetPropertiesClassification interface for type SQLMiTargetProperties.
func (s *SQLMiTargetProperties) GetTargetProperties() *TargetProperties {
	return &TargetProperties{
		ConnectionServerName:     s.ConnectionServerName,
		ProvisioningState:        s.ProvisioningState,
		TargetAuthenticationType: s.TargetAuthenticationType,
		TargetType:               s.TargetType,
		TargetVault:              s.TargetVault,
	}
}

// The properties specific to Azure SQL VM targets.
type SQLVMTargetProperties struct {
	// REQUIRED; The server name to use in the connection string when connecting to a target. Port number and instance name must
	// be specified separately.
	ConnectionServerName *string

	// REQUIRED; The Azure ResourceId of an Azure SQL VM target.
	SQLVMResourceID *string

	// REQUIRED; The type of authentication to use when connecting to a target.
	TargetAuthenticationType *TargetAuthenticationType

	// CONSTANT; The Azure SQL VM target.
	// Field has constant value "SqlVm", any specified value is ignored.
	TargetType *string

	// The TCP port number to optionally use in the connection string when connecting to an Azure SQL VM target.
	ConnectionTCPPort *int32

	// The provisioning state of the resource.
	ProvisioningState *ResourceProvisioningState

	// The SQL instance name to optionally use in the connection string when connecting to an Azure SQL VM target.
	SQLNamedInstanceName *string

	// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
	TargetVault *VaultSecret
}

// GetTargetProperties implements the TargetPropertiesClassification interface for type SQLVMTargetProperties.
func (s *SQLVMTargetProperties) GetTargetProperties() *TargetProperties {
	return &TargetProperties{
		ConnectionServerName:     s.ConnectionServerName,
		ProvisioningState:        s.ProvisioningState,
		TargetAuthenticationType: s.TargetAuthenticationType,
		TargetType:               s.TargetType,
		TargetVault:              s.TargetVault,
	}
}

// Concrete proxy resource types can be created by aliasing this type using a specific property type.
type SharedPrivateLinkResource struct {
	// REQUIRED; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// REQUIRED; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string

	// The resource-specific properties for this resource.
	Properties *SharedPrivateLinkResourceProperties

	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The Shared Private Link resource name.
	Name *string
}

// The response of a SharedPrivateLinkResource list operation.
type SharedPrivateLinkResourceListResult struct {
	// REQUIRED; The SharedPrivateLinkResource items on this page
	Value []*SharedPrivateLinkResource

	// The link to the next page of items
	NextLink *string
}

// The generic properties of a Shared Private Link resource.
type SharedPrivateLinkResourceProperties struct {
	// REQUIRED; The group id from the provider of resource the shared private link resource is for.
	GroupID *string

	// REQUIRED; The resource id of the resource the shared private link resource is for.
	PrivateLinkResourceID *string

	// REQUIRED; The request message for requesting approval of the shared private link resource.
	RequestMessage *string

	// The DNS zone to be included in the DNS name of the shared private link. Value is service-specific.
	DNSZone *string

	// The provisioning state of the resource.
	ProvisioningState *ResourceProvisioningState

	// Status of the shared private link resource. Can be Pending, Approved, Rejected or Disconnected.
	Status *SharedPrivateLinkResourceStatus
}

// Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The type of identity that created the resource.
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// Concrete proxy resource types can be created by aliasing this type using a specific property type.
type Target struct {
	// REQUIRED; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// REQUIRED; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string

	// The resource-specific properties for this resource.
	Properties TargetPropertiesClassification

	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The target resource name.
	Name *string
}

// The response of a Target list operation.
type TargetListResult struct {
	// REQUIRED; The Target items on this page
	Value []*Target

	// The link to the next page of items
	NextLink *string
}

// The generic properties of a target.
type TargetProperties struct {
	// REQUIRED; The server name to use in the connection string when connecting to a target. Port number and instance name must
	// be specified separately.
	ConnectionServerName *string

	// REQUIRED; The type of authentication to use when connecting to a target.
	TargetAuthenticationType *TargetAuthenticationType

	// REQUIRED
	TargetType *string

	// The provisioning state of the resource.
	ProvisioningState *ResourceProvisioningState

	// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
	TargetVault *VaultSecret
}

// GetTargetProperties implements the TargetPropertiesClassification interface for type TargetProperties.
func (t *TargetProperties) GetTargetProperties() *TargetProperties { return t }

// The resource model definition for an Azure Resource Manager tracked top level resource
type TrackedResourceBase struct {
	// REQUIRED; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string

	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// Resource tags.
	Tags map[string]*string
}

// A managed identity assigned by the user.
type UserAssignedIdentity struct {
	// The active directory client identifier for this principal.
	ClientID *string

	// The active directory identifier for this principal.
	PrincipalID *string
}

// The vault specific details required if using SQL authentication to connect to a target.
type VaultSecret struct {
	// The Azure ResourceId of the Key Vault instance storing database authentication secrets.
	AkvResourceID *string

	// The path to the Key Vault secret storing the password for authentication to a target.
	AkvTargetPassword *string

	// The path to the Key Vault secret storing the login name (aka user name, aka account name) for authentication to a target.
	AkvTargetUser *string
}

// The DatabaseWatcherProviderHub resource.
type Watcher struct {
	// REQUIRED; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string

	// The resource-specific properties for this resource.
	Properties *WatcherProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; The database watcher name.
	Name *string

	// The managed service identities assigned to this resource.
	Identity *ManagedIdentityProperties

	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData
}

// The response of a Watcher list operation.
type WatcherListResult struct {
	// REQUIRED; The Watcher items on this page
	Value []*Watcher

	// The link to the next page of items
	NextLink *string
}

// The RP specific properties of the resource.
type WatcherProperties struct {
	// The data store for collected monitoring data.
	Datastore *Datastore

	// The provisioning state of the resource watcher.
	ProvisioningState *ProvisioningState

	// The monitoring collection status of the watcher.
	Status *WatcherStatus
}

// The type used for update operations of the Watcher.
type WatcherUpdate struct {
	// The managed service identities assigned to this resource.
	Identity   *ManagedIdentityProperties
	Properties *WatcherUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// The updatable properties of the Watcher.
type WatcherUpdateProperties struct {
	// The data store for collected monitoring data.
	Datastore *Datastore
}
