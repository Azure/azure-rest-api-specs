// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armdevopsinfrastructure

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SkuClient contains the methods for the Microsoft.DevOpsInfrastructure namespace.
// Don't use this type directly, use NewSkuClient() instead.
type SkuClient struct {
	internal *arm.Client
}

// NewSkuClient creates a new instance of SkuClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSkuClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SkuClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SkuClient{
		internal: cl,
	}
	return client, nil
}

// NewListByLocationPager - List ResourceSku resources by subscription ID
//   - subscriptionID - The ID of the target subscription.
//   - locationName - Name of the location.
//   - options - SkuClientListByLocationOptions contains the optional parameters for the SkuClient.NewListByLocationPager method.
func (client *SkuClient) NewListByLocationPager(subscriptionID string, locationName string, options *SkuClientListByLocationOptions) *runtime.Pager[SkuClientListByLocationResponse] {
	return runtime.NewPager(runtime.PagingHandler[SkuClientListByLocationResponse]{
		More: func(page SkuClientListByLocationResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SkuClientListByLocationResponse) (SkuClientListByLocationResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SkuClient.NewListByLocationPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByLocationCreateRequest(ctx, subscriptionID, locationName, options)
			}, nil)
			if err != nil {
				return SkuClientListByLocationResponse{}, err
			}
			return client.listByLocationHandleResponse(resp)
		},
	})
}

// listByLocationCreateRequest creates the ListByLocation request.
func (client *SkuClient) listByLocationCreateRequest(ctx context.Context, subscriptionID string, locationName string, options *SkuClientListByLocationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.DevOpsInfrastructure/locations/{locationName}/skus"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if locationName == "" {
		return nil, errors.New("parameter locationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationName}", url.PathEscape(locationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-26-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByLocationHandleResponse handles the ListByLocation response.
func (client *SkuClient) listByLocationHandleResponse(resp *http.Response) (SkuClientListByLocationResponse, error) {
	result := SkuClientListByLocationResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceSKUListResult); err != nil {
		return SkuClientListByLocationResponse{}, err
	}
	return result, nil
}
