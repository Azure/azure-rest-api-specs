{
  "swagger": "2.0",
  "info": {
    "description": "Direct Methods for Azure Video Analyzer on IoT Edge.",
    "version": "1.0.0",
    "title": "Direct Methods for Azure Video Analyzer on IoT Edge",
    "contact": {
      "email": "amshelp@microsoft.com"
    }
  },
  "security": [
    {
      "sharedAccessSignature": []
    }
  ],
  "paths": {},
  "securityDefinitions": {
    "sharedAccessSignature": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "LivePipeline": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifier for the live pipeline."
        },
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "The system data for a resource."
        },
        "properties": {
          "$ref": "#/definitions/LivePipelineProperties",
          "description": "The properties of the live pipeline."
        }
      },
      "description": "Represents a unique live pipeline."
    },
    "LivePipelineProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "An optional description for the live pipeline."
        },
        "topologyName": {
          "type": "string",
          "description": "The name of the pipeline topology that this live pipeline will run. A pipeline topology with this name should already have been set in the Edge module."
        },
        "parameters": {
          "type": "array",
          "description": "List of one or more live pipeline parameters.",
          "items": {
            "$ref": "#/definitions/ParameterDefinition"
          }
        },
        "state": {
          "type": "string",
          "description": "Allowed states for a live pipeline.",
          "enum": [
            "inactive",
            "activating",
            "active",
            "deactivating"
          ],
          "x-ms-enum": {
            "name": "livePipelineState",
            "values": [
              {
                "value": "inactive",
                "description": "The live pipeline is idle and not processing media."
              },
              {
                "value": "activating",
                "description": "The live pipeline is transitioning into the active state."
              },
              {
                "value": "active",
                "description": "The live pipeline is active and processing media."
              },
              {
                "value": "deactivating",
                "description": "The live pipeline is transitioning into the inactive state."
              }
            ],
            "modelAsString": true
          }
        }
      },
      "description": "Properties of a live pipeline."
    },
    "ParameterDefinition": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the parameter defined in the pipeline topology."
        },
        "value": {
          "type": "string",
          "description": "The value to supply for the named parameter defined in the pipeline topology."
        }
      },
      "description": "A key-value pair. A pipeline topology allows certain values to be parameterized. When a live pipeline is created, the parameters are supplied with arguments specific to that instance. This allows the same pipeline topology to be used as a blueprint for multiple streams with different values for the parameters."
    },
    "LivePipelineCollection": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "description": "A collection of live pipelines.",
          "items": {
            "$ref": "#/definitions/LivePipeline"
          }
        },
        "@continuationToken": {
          "type": "string",
          "description": "A continuation token to use in subsequent calls to enumerate through the live pipeline collection. This is used when the collection contains too many results to return in one response."
        }
      },
      "description": "A collection of streams."
    },
    "PipelineTopologyCollection": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "description": "A collection of pipeline topologies.",
          "items": {
            "$ref": "#/definitions/PipelineTopology"
          }
        },
        "@continuationToken": {
          "type": "string",
          "description": "A continuation token to use in subsequent calls to enumerate through the pipeline topology collection. This is used when the collection contains too many results to return in one response."
        }
      },
      "description": "A collection of pipeline topologies."
    },
    "PipelineTopology": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifier for the pipeline topology."
        },
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "The system data for a resource."
        },
        "properties": {
          "$ref": "#/definitions/PipelineTopologyProperties",
          "description": "The properties of the pipeline topology."
        }
      },
      "description": "The definition of a pipeline topology."
    },
    "PipelineTopologyProperties": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of a pipeline topology. It is recommended to use this to describe the expected use of the pipeline topology."
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterDeclaration"
          },
          "description": "The list of parameters defined in the pipeline topology. The value for these parameters are supplied by streams of this pipeline topology."
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "description": "The list of source nodes in this pipeline topology."
        },
        "processors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Processor"
          },
          "description": "The list of processor nodes in this pipeline topology."
        },
        "sinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sink"
          },
          "description": "The list of sink nodes in this pipeline topology."
        }
      },
      "description": "A description of the properties of a pipeline topology."
    },
    "SystemData": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource creation (UTC)."
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource last modification (UTC)."
        }
      },
      "description": "The system data for a resource. This is used by both pipeline topologies and live pipelines."
    },
    "ParameterDeclaration": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the parameter.",
          "maxLength": 64
        },
        "type": {
          "type": "string",
          "description": "The type of the parameter.",
          "enum": [
            "string",
            "secretString",
            "int",
            "double",
            "bool"
          ],
          "x-ms-enum": {
            "name": "parameterType",
            "values": [
              {
                "value": "string",
                "description": "A string parameter value."
              },
              {
                "value": "secretString",
                "description": "A string to hold sensitive information as parameter value."
              },
              {
                "value": "int",
                "description": "A 32-bit signed integer as parameter value."
              },
              {
                "value": "double",
                "description": "A 64-bit double-precision floating point type as parameter value."
              },
              {
                "value": "bool",
                "description": "A boolean value that is either true or false."
              }
            ],
            "modelAsString": true
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the parameter."
        },
        "default": {
          "type": "string",
          "description": "The default value for the parameter to be used if the live pipeline does not specify a value."
        }
      },
      "description": "The declaration of a parameter in the pipeline topology. A topology can be authored with parameters. Then, during live pipeline creation, the value for those parameters can be specified. This allows the same pipeline topology to be used as a blueprint for multiple live pipelines with different values for the parameters."
    },
    "Source": {
      "type": "object",
      "required": [
        "@type",
        "name"
      ],
      "discriminator": "@type",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The type of the source node. The discriminator for derived types."
        },
        "name": {
          "type": "string",
          "description": "The name to be used for this source node."
        }
      },
      "description": "A source node in a pipeline topology."
    },
    "RtspSource": {
      "type": "object",
      "properties": {
        "transport": {
          "type": "string",
          "description": "Underlying RTSP transport. This is used to enable or disable HTTP tunneling.",
          "enum": [
            "http",
            "tcp"
          ],
          "x-ms-enum": {
            "name": "rtspTransport",
            "values": [
              {
                "value": "http",
                "description": "HTTP/HTTPS transport. This should be used when HTTP tunneling is desired."
              },
              {
                "value": "tcp",
                "description": "TCP transport. This should be used when HTTP tunneling is NOT desired."
              }
            ],
            "modelAsString": true
          }
        },
        "endpoint": {
          "description": "RTSP endpoint of the stream that is being connected to.",
          "$ref": "#/definitions/Endpoint"
        }
      },
      "required": [
        "endpoint"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Source"
        }
      ],
      "description": "Enables a pipeline topology to capture media from a RTSP server.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.RtspSource"
    },
    "IotHubMessageSource": {
      "type": "object",
      "properties": {
        "hubInputName": {
          "type": "string",
          "description": "Name of the input path where messages can be routed to (via routes declared in the IoT Edge deployment manifest)."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Source"
        }
      ],
      "description": "Enables a pipeline topology to receive messages via routes declared in the IoT Edge deployment manifest.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.IotHubMessageSource"
    },
    "IotHubMessageSink": {
      "type": "object",
      "properties": {
        "hubOutputName": {
          "type": "string",
          "description": "Name of the output path to which the pipeline topology will publish message. These messages can then be delivered to desired destinations by declaring routes referencing the output path in the IoT Edge deployment manifest."
        }
      },
      "required": [
        "@type",
        "hubOutputName"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Sink"
        }
      ],
      "description": "Enables a pipeline topology to publish messages that can be delivered via routes declared in the IoT Edge deployment manifest.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.IotHubMessageSink"
    },
    "Endpoint": {
      "type": "object",
      "required": [
        "@type",
        "url"
      ],
      "discriminator": "@type",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The discriminator for derived types."
        },
        "credentials": {
          "description": "Polymorphic credentials to be presented to the endpoint.",
          "$ref": "#/definitions/Credentials"
        },
        "url": {
          "type": "string",
          "description": "Url for the endpoint."
        }
      },
      "description": "Base class for endpoints."
    },
    "Credentials": {
      "type": "object",
      "required": [
        "@type"
      ],
      "discriminator": "@type",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The discriminator for derived types."
        }
      },
      "description": "Credentials to present during authentication."
    },
    "UsernamePasswordCredentials": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username for a username/password pair."
        },
        "password": {
          "type": "string",
          "description": "Password for a username/password pair. Please use a parameter so that the actual value is not returned on PUT or GET requests."
        }
      },
      "required": [
        "username",
        "password"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Credentials"
        }
      ],
      "description": "Username/password credential pair.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.UsernamePasswordCredentials"
    },
    "HttpHeaderCredentials": {
      "type": "object",
      "properties": {
        "headerName": {
          "type": "string",
          "description": "HTTP header name."
        },
        "headerValue": {
          "type": "string",
          "description": "HTTP header value. Please use a parameter so that the actual value is not returned on PUT or GET requests."
        }
      },
      "required": [
        "headerName",
        "headerValue"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Credentials"
        }
      ],
      "description": "Http header service credentials.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.HttpHeaderCredentials"
    },
    "UnsecuredEndpoint": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Endpoint"
        }
      ],
      "description": "An endpoint that the pipeline topology can connect to, with no encryption in transit.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.UnsecuredEndpoint"
    },
    "TlsEndpoint": {
      "type": "object",
      "properties": {
        "trustedCertificates": {
          "description": "Trusted certificates when authenticating a TLS connection. Null designates that Azure Media Service's source of trust should be used.",
          "$ref": "#/definitions/CertificateSource"
        },
        "validationOptions": {
          "description": "Validation options to use when authenticating a TLS connection. By default, strict validation is used.",
          "$ref": "#/definitions/TlsValidationOptions"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Endpoint"
        }
      ],
      "description": "A TLS endpoint for pipeline topology external connections.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.TlsEndpoint"
    },
    "SymmetricKeyCredentials": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Symmetric key credential."
        }
      },
      "required": [
        "key"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Credentials"
        }
      ],
      "description": "Symmetric key credential.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.SymmetricKeyCredentials"
    },
    "CertificateSource": {
      "type": "object",
      "required": [
        "@type"
      ],
      "discriminator": "@type",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The discriminator for derived types."
        }
      },
      "description": "Base class for certificate sources."
    },
    "TlsValidationOptions": {
      "type": "object",
      "properties": {
        "ignoreHostname": {
          "type": "string",
          "description": "Boolean value ignoring the host name (common name) during validation."
        },
        "ignoreSignature": {
          "type": "string",
          "description": "Boolean value ignoring the integrity of the certificate chain at the current time."
        }
      },
      "description": "Options for controlling the authentication of TLS endpoints."
    },
    "PemCertificateList": {
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "description": "PEM formatted public certificates one per entry.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "certificates"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CertificateSource"
        }
      ],
      "description": "A list of PEM formatted certificates.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.PemCertificateList"
    },
    "Sink": {
      "type": "object",
      "required": [
        "@type",
        "inputs",
        "name"
      ],
      "discriminator": "@type",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The discriminator for derived types."
        },
        "name": {
          "type": "string",
          "description": "The name to be used for the topology sink."
        },
        "inputs": {
          "type": "array",
          "description": "An array of the names of the other nodes in the pipeline topology, the outputs of which are used as input for this sink node.",
          "items": {
            "$ref": "#/definitions/NodeInput"
          }
        }
      },
      "description": "Enables a pipeline topology to write media data to a destination outside of the Azure Video Analyzer IoT Edge module."
    },
    "NodeInput": {
      "type": "object",
      "required": [
        "nodeName"
      ],
      "properties": {
        "nodeName": {
          "type": "string",
          "description": "The name of another node in the pipeline topology, the output of which is used as input to this node."
        },
        "outputSelectors": {
          "type": "array",
          "description": "Allows for the selection of particular streams from another node.",
          "items": {
            "$ref": "#/definitions/OutputSelector"
          }
        }
      },
      "description": "Represents the input to any node in a topology."
    },
    "OutputSelector": {
      "type": "object",
      "properties": {
        "property": {
          "type": "string",
          "description": "The stream property to compare with.",
          "enum": [
            "mediaType"
          ],
          "x-ms-enum": {
            "name": "outputSelectorProperty",
            "values": [
              {
                "value": "mediaType",
                "description": "The stream's MIME type or subtype."
              }
            ],
            "modelAsString": true
          }
        },
        "operator": {
          "type": "string",
          "description": "The operator to compare streams by.",
          "enum": [
            "is",
            "isNot"
          ],
          "x-ms-enum": {
            "name": "outputSelectorOperator",
            "values": [
              {
                "value": "is",
                "description": "A media type is the same type or a subtype."
              },
              {
                "value": "isNot",
                "description": "A media type is not the same type or a subtype."
              }
            ],
            "modelAsString": true
          }
        },
        "value": {
          "type": "string",
          "description": "Value to compare against."
        }
      },
      "description": "Allows for the selection of particular streams from another node."
    },
    "FileSink": {
      "type": "object",
      "properties": {
        "baseDirectoryPath": {
          "type": "string",
          "description": "Absolute directory for all outputs to the Edge device from this sink.",
          "example": "/var/media/output/"
        },
        "fileNamePattern": {
          "type": "string",
          "description": "File name pattern for creating new files on the Edge device. The pattern must include at least one system variable. See the documentation for available variables and additional examples.",
          "example": "mySampleFile-${System.PipelineTopologyName}-${System.LivePipelineName}-${System.DateTime}"
        },
        "maximumSizeMiB": {
          "type": "string",
          "description": "Maximum amount of disk space that can be used for storing files from this sink."
        }
      },
      "required": [
        "fileNamePattern",
        "baseDirectoryPath",
        "maximumSizeMiB"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Sink"
        }
      ],
      "description": "Enables a topology to write/store media (video and audio) to a file on the Edge device.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.FileSink"
    },
    "AssetSink": {
      "type": "object",
      "properties": {
        "assetContainerSasUrl": {
          "type": "string",
          "description": "An Azure Storage SAS Url which points to container, such as the one created for an Azure Media Services asset.",
          "example": "https://azurestorage.com/mycontainer?sig=mysecretkey"
        },
        "segmentLength": {
          "type": "string",
          "example": "PT30S",
          "description": "When writing media to an asset, wait until at least this duration of media has been accumulated on the Edge. Expressed in increments of 30 seconds, with a minimum of 30 seconds and a recommended maximum of 5 minutes."
        },
        "localMediaCachePath": {
          "type": "string",
          "description": "Path to a local file system directory for temporary caching of media before writing to an Asset. Used when the Edge device is temporarily disconnected from Azure.",
          "example": "/var/lib/tmp/"
        },
        "localMediaCacheMaximumSizeMiB": {
          "type": "string",
          "description": "Maximum amount of disk space that can be used for temporary caching of media."
        }
      },
      "required": [
        "@type",
        "assetContainerSasUrl",
        "localMediaCachePath",
        "localMediaCacheMaximumSizeMiB"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Sink"
        }
      ],
      "description": "Enables a pipeline topology to record media to an Azure Media Services asset for subsequent playback.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.AssetSink"
    },
    "VideoCreationProperties": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "An optional title for the video."
        },
        "description": {
          "type": "string",
          "description": "An optional description for the video."
        },
        "segmentLength": {
          "type": "string",
          "example": "PT30S",
          "description": "When writing media to video, wait until at least this duration of media has been accumulated on the Edge. Expressed in increments of 30 seconds, with a minimum of 30 seconds and a recommended maximum of 5 minutes."
        }
      },
      "description": "Properties which will be used only if a video is being created."
    },
    "VideoSink": {
      "type": "object",
      "properties": {
        "videoName": {
          "type": "string",
          "description": "Name of a new or existing Video Analyzer video entity to use as media output.",
          "example": "myVideo001"
        },
        "videoCreationProperties": {
          "type": "string",
          "description": "Optional properties which will be used only if a video is being created.",
          "$ref": "#/definitions/VideoCreationProperties"
        },
        "localMediaCachePath": {
          "type": "string",
          "description": "Path to a local file system directory for temporary caching of media before writing to a video. This local cache will grow if the connection to Azure is not stable.",
          "example": "/var/lib/tmp/"
        },
        "localMediaCacheMaximumSizeMiB": {
          "type": "string",
          "description": "Maximum amount of disk space that can be used for temporary caching of media."
        }
      },
      "required": [
        "@type",
        "videoName",
        "localMediaCachePath",
        "localMediaCacheMaximumSizeMiB"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Sink"
        }
      ],
      "description": "Enables a pipeline topology to record media to an Azure Video Analyzer video for subsequent playback.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.VideoSink"
    },
    "Processor": {
      "type": "object",
      "required": [
        "@type",
        "inputs",
        "name"
      ],
      "discriminator": "@type",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The discriminator for derived types."
        },
        "name": {
          "type": "string",
          "description": "The name for this processor node."
        },
        "inputs": {
          "type": "array",
          "description": "An array of the names of the other nodes in the topology, the outputs of which are used as input for this processor node.",
          "items": {
            "$ref": "#/definitions/NodeInput"
          }
        }
      },
      "description": "A node that represents the desired processing of media in a topology. Takes media and/or events as inputs, and emits media and/or event as output."
    },
    "MotionDetectionProcessor": {
      "type": "object",
      "properties": {
        "sensitivity": {
          "type": "string",
          "description": "Enumeration that specifies the sensitivity of the motion detection processor.",
          "enum": [
            "low",
            "medium",
            "high"
          ],
          "x-ms-enum": {
            "name": "motionDetectionSensitivity",
            "values": [
              {
                "value": "low",
                "description": "Low Sensitivity."
              },
              {
                "value": "medium",
                "description": "Medium Sensitivity."
              },
              {
                "value": "high",
                "description": "High Sensitivity."
              }
            ],
            "modelAsString": true
          }
        },
        "outputMotionRegion": {
          "type": "boolean",
          "description": "Indicates whether the processor should detect and output the regions, within the video frame, where motion was detected. Default is true."
        },
        "eventAggregationWindow": {
          "type": "string",
          "description": "Event aggregation window duration, or 0 for no aggregation."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Processor"
        }
      ],
      "description": "A node that accepts raw video as input, and detects if there are moving objects present. If so, then it emits an event, and allows frames where motion was detected to pass through. Other frames are blocked/dropped.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.MotionDetectionProcessor"
    },
    "ObjectTrackingProcessor": {
      "type": "object",
      "properties": {
        "accuracy": {
          "type": "string",
          "description": "Enumeration that controls the accuracy of the tracker.",
          "enum": [
            "low",
            "medium",
            "high"
          ],
          "x-ms-enum": {
            "name": "objectTrackingAccuracy",
            "values": [
              {
                "value": "low",
                "description": "Low Accuracy."
              },
              {
                "value": "medium",
                "description": "Medium Accuracy."
              },
              {
                "value": "high",
                "description": "High Accuracy."
              }
            ],
            "modelAsString": true
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Processor"
        }
      ],
      "description": "A node that accepts raw video as input, and detects objects.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.ObjectTrackingProcessor"
    },
    "LineCrossingProcessor": {
      "type": "object",
      "required": [
        "lines"
      ],
      "properties": {
        "lines": {
          "type": "array",
          "description": "An array of lines used to compute line crossing events.",
          "items": {
            "$ref": "#/definitions/Line"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Processor"
        }
      ],
      "description": "A node that accepts raw video as input, and detects when an object crosses a line.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.LineCrossingProcessor"
    },
    "ExtensionProcessorBase": {
      "type": "object",
      "required": [
        "endpoint",
        "image"
      ],
      "properties": {
        "endpoint": {
          "description": "Endpoint to which this processor should connect.",
          "$ref": "#/definitions/Endpoint"
        },
        "image": {
          "description": "Describes the parameters of the image that is sent as input to the endpoint.",
          "$ref": "#/definitions/Image"
        },
        "samplingOptions": {
          "description": "Describes the sampling options to be applied when forwarding samples to the extension.",
          "$ref": "#/definitions/SamplingOptions"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Processor"
        }
      ],
      "description": "Processor that allows for extensions outside of the Azure Video Analyzer Edge module to be integrated into the pipeline topology. It is the base class for various different kinds of extension processor types.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.ExtensionProcessorBase"
    },
    "CognitiveServicesVisionExtension": {
      "type": "object",
      "properties": {
        "extensionConfiguration": {
          "type": "string",
          "description": "Optional configuration to pass to the CognitiveServicesVision extension."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionProcessorBase"
        }
      ],
      "description": "A processor that allows the pipeline topology to send video frames to a Cognitive Services Vision extension. Inference results are relayed to downstream nodes.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.CognitiveServicesVisionExtension"
    },
    "GrpcExtension": {
      "type": "object",
      "required": [
        "dataTransfer"
      ],
      "properties": {
        "dataTransfer": {
          "description": "How media should be transferred to the inference engine.",
          "$ref": "#/definitions/GrpcExtensionDataTransfer"
        },
        "extensionConfiguration": {
          "type": "string",
          "description": "Optional configuration to pass to the gRPC extension."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionProcessorBase"
        }
      ],
      "description": "A processor that allows the pipeline topology to send video frames to an external inference container over a gRPC connection. This can be done using shared memory (for high frame rates), or over the network. Inference results are relayed to downstream nodes.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.GrpcExtension"
    },
    "GrpcExtensionDataTransfer": {
      "type": "object",
      "required": [
        "mode"
      ],
      "properties": {
        "sharedMemorySizeMiB": {
          "type": "string",
          "description": "The size of the buffer for all in-flight frames in mebibytes if mode is SharedMemory. Should not be specified otherwise."
        },
        "mode": {
          "type": "string",
          "description": "How frame data should be transmitted to the inference engine.",
          "enum": [
            "embedded",
            "sharedMemory"
          ],
          "x-ms-enum": {
            "name": "grpcExtensionDataTransferMode",
            "values": [
              {
                "value": "embedded",
                "description": "Frames are transferred embedded into the gRPC messages."
              },
              {
                "value": "sharedMemory",
                "description": "Frames are transferred through shared memory."
              }
            ],
            "modelAsString": true
          }
        }
      },
      "description": "Describes how media should be transferred to the inference engine.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.GrpcExtensionDataTransfer"
    },
    "HttpExtension": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionProcessorBase"
        }
      ],
      "description": "A processor that allows the pipeline topology to send video frames (mostly at low frame rates e.g. <5 fps) to an external inference container over an HTTP-based RESTful API. Inference results are relayed to downstream nodes.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.HttpExtension"
    },
    "Image": {
      "type": "object",
      "properties": {
        "scale": {
          "$ref": "#/definitions/ImageScale"
        },
        "format": {
          "$ref": "#/definitions/ImageFormat"
        }
      },
      "description": "Describes the properties of an image frame."
    },
    "SamplingOptions": {
      "type": "object",
      "properties": {
        "skipSamplesWithoutAnnotation": {
          "type": "string",
          "description": "If true, limits the samples submitted to the extension to only samples which have associated inference(s)"
        },
        "maximumSamplesPerSecond": {
          "type": "string",
          "description": "Maximum rate of samples submitted to the extension"
        }
      },
      "description": "Describes the properties of a sample."
    },
    "ImageScale": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "string",
          "description": "Describes the modes for scaling an input video frame into an image, before it is sent to an inference engine.",
          "enum": [
            "preserveAspectRatio",
            "pad",
            "stretch"
          ],
          "x-ms-enum": {
            "name": "imageScaleMode",
            "values": [
              {
                "value": "preserveAspectRatio",
                "description": "Use the same aspect ratio as the input frame."
              },
              {
                "value": "pad",
                "description": "Center pad the input frame to match the given dimensions."
              },
              {
                "value": "stretch",
                "description": "Stretch input frame to match given dimensions."
              }
            ],
            "modelAsString": true
          }
        },
        "width": {
          "type": "string",
          "description": "The desired output width of the image."
        },
        "height": {
          "type": "string",
          "description": "The desired output height of the image."
        }
      },
      "description": "The scaling mode for the image."
    },
    "ImageFormat": {
      "type": "object",
      "required": [
        "@type"
      ],
      "discriminator": "@type",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The discriminator for derived types."
        }
      },
      "description": "Encoding settings for an image.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.ImageFormat"
    },
    "ImageFormatRaw": {
      "type": "object",
      "required": [
        "pixelFormat"
      ],
      "properties": {
        "pixelFormat": {
          "type": "string",
          "description": "The pixel format that will be used to encode images.",
          "enum": [
            "yuv420p",
            "rgb565be",
            "rgb565le",
            "rgb555be",
            "rgb555le",
            "rgb24",
            "bgr24",
            "argb",
            "rgba",
            "abgr",
            "bgra"
          ],
          "x-ms-enum": {
            "name": "imageFormatRawPixelFormat",
            "values": [
              {
                "value": "yuv420p",
                "description": "Planar YUV 4:2:0, 12bpp, (1 Cr and Cb sample per 2x2 Y samples)."
              },
              {
                "value": "rgb565be",
                "description": "Packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), big-endian."
              },
              {
                "value": "rgb565le",
                "description": "Packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), little-endian."
              },
              {
                "value": "rgb555be",
                "description": "Packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), big-endian , X=unused/undefined."
              },
              {
                "value": "rgb555le",
                "description": "Packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), little-endian, X=unused/undefined."
              },
              {
                "value": "rgb24",
                "description": "Packed RGB 8:8:8, 24bpp, RGBRGB."
              },
              {
                "value": "bgr24",
                "description": "Packed RGB 8:8:8, 24bpp, BGRBGR."
              },
              {
                "value": "argb",
                "description": "Packed ARGB 8:8:8:8, 32bpp, ARGBARGB."
              },
              {
                "value": "rgba",
                "description": "Packed RGBA 8:8:8:8, 32bpp, RGBARGBA."
              },
              {
                "value": "abgr",
                "description": "Packed ABGR 8:8:8:8, 32bpp, ABGRABGR."
              },
              {
                "value": "bgra",
                "description": "Packed BGRA 8:8:8:8, 32bpp, BGRABGRA."
              }
            ],
            "modelAsString": true
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ImageFormat"
        }
      ],
      "description": "Encoding settings for raw images.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.ImageFormatRaw"
    },
    "ImageFormatJpeg": {
      "type": "object",
      "properties": {
        "quality": {
          "type": "string",
          "description": "The image quality. Value must be between 0 to 100 (best quality)."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ImageFormat"
        }
      ],
      "description": "Encoding settings for Jpeg images.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.ImageFormatJpeg"
    },
    "ImageFormatBmp": {
      "type": "object",
      "properties": {},
      "allOf": [
        {
          "$ref": "#/definitions/ImageFormat"
        }
      ],
      "description": "Encoding settings for Bmp images.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.ImageFormatBmp"
    },
    "ImageFormatPng": {
      "type": "object",
      "properties": {},
      "allOf": [
        {
          "$ref": "#/definitions/ImageFormat"
        }
      ],
      "description": "Encoding settings for Png images.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.ImageFormatPng"
    },
    "Line": {
      "type": "object",
      "required": [
        "name",
        "line"
      ],
      "properties": {
        "line": {
          "$ref": "#/definitions/LineCoordinates",
          "description": "Sets the properties of the line."
        },
        "name": {
          "type": "string",
          "description": "The name of the line."
        }
      },
      "description": "Describes the properties of a line."
    },
    "LineCoordinates": {
      "type": "object",
      "required": [
        "start",
        "end"
      ],
      "properties": {
        "start": {
          "$ref": "#/definitions/Point",
          "description": "Sets the coordinates of the starting point for the line."
        },
        "end": {
          "$ref": "#/definitions/Point",
          "description": "Sets the coordinates of the ending point for the line."
        }
      },
      "description": "Describes the start point and end point of a line in the frame."
    },
    "Point": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "properties": {
        "x": {
          "type": "string",
          "description": "The X value of the point ranging from 0 to 1 starting from the left side of the frame."
        },
        "y": {
          "type": "string",
          "description": "The Y value of the point ranging from 0 to 1 starting from the upper side of the frame."
        }
      },
      "description": "Describes the x and y value of a point in the frame."
    },
    "SignalGateProcessor": {
      "type": "object",
      "properties": {
        "activationEvaluationWindow": {
          "type": "string",
          "example": "PT1.0S",
          "description": "The period of time over which the gate gathers input events before evaluating them."
        },
        "activationSignalOffset": {
          "type": "string",
          "example": "-PT1.0S",
          "description": "Signal offset once the gate is activated (can be negative). It is an offset between the time the event is received, and the timestamp of the first media sample (eg. video frame) that is allowed through by the gate."
        },
        "minimumActivationTime": {
          "type": "string",
          "example": "PT1S",
          "description": "The minimum period for which the gate remains open in the absence of subsequent triggers (events)."
        },
        "maximumActivationTime": {
          "type": "string",
          "example": "PT2S",
          "description": "The maximum period for which the gate remains open in the presence of subsequent events."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Processor"
        }
      ],
      "description": "A signal gate determines when to block (gate) incoming media, and when to allow it through. It gathers input events over the activationEvaluationWindow, and determines whether to open or close the gate.",
      "x-ms-discriminator-value": "#Microsoft.VideoAnalyzer.SignalGateProcessor"
    }
  }
}