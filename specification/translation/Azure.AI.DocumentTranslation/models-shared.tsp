import "@typespec/rest";
import "@azure-tools/typespec-azure-core";

using TypeSpec.Http;
using TypeSpec.Rest;
using Azure.Core;

namespace DocumentTranslation;

alias CommonParameters = {
  /** Mandatory API version parameter */
  @query("api-version")
  apiVersion: string,

  @header("X-ClientTraceId")
  /** A client-generated GUID to uniquely identify the request. */
  clientTraceId?: string;

  @header("If-None-Match")
  /** Etag comparison, if it is provided and its value matches the response then request will return Status => 304 (Not modified). */
  ifNoneMatch?: string;
};

alias CommonResultHeaders = {
  @header("X-RequestId")
  /** Value generated by the service to identify the request. It is used for troubleshooting purposes. */
  requestId: string;
  @header("ETag")
  /** This will have value of response hash, customer can provide this value for any consecutive request as “If-None-Match” header. To make sure get response if the value is changed otherwise 304. */
  eTag: string
};

/** Representation of the Error Response from Translator Service. */
@error
model ErrorResponse {
  ...CommonResultHeaders;

  /** Error details. */
  error: ErrorDetails;
}

/** Error details as returned by Translator Service. */
model ErrorDetails {
  /** Enums containing high-level error codes. Possible values:.
   * InternalServerError
   * InvalidArgument
   * InvalidRequest
   * RequestRateTooHigh
   * ResourceNotFound
   * ServiceUnavailable
   * Unauthorized
  */
  code: string;

  /** Human readable error description. */
  message: string;
}

/** Item containing Document format result. */
model FileFormat {
  /** Name of the format. */
  format: string;

  /** Supported file extension for this format. */
  fileExtensions: string[];

  /** Supported Content-Types for this format. */
  contentTypes: string[];

  /** Default version if none is specified. */
  defaultVersion: string;

  /** Supported Version. */
  versions: string[];
}
