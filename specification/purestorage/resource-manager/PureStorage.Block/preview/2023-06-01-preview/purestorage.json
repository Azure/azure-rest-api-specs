{
  "swagger": "2.0",
  "info": {
    "title": "PureStorage.Block",
    "version": "2023-06-01-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "Reservations"
    },
    {
      "name": "StoragePools"
    },
    {
      "name": "AvsStorageContainers"
    }
  ],
  "paths": {
    "/providers/PureStorage.Block/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Operations_List": {
            "$ref": "./examples/Operations_List_MaximumSet_Gen.json"
          },
          "Operations_List_MinSet": {
            "$ref": "./examples/Operations_List_MinimumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/PureStorage.Block/reservations": {
      "get": {
        "operationId": "Reservations_ListBySubscription",
        "tags": [
          "Reservations"
        ],
        "description": "List Reservation resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ReservationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Reservations_ListBySubscription": {
            "$ref": "./examples/Reservations_ListBySubscription_MaximumSet_Gen.json"
          },
          "Reservations_ListBySubscription_MinSet": {
            "$ref": "./examples/Reservations_ListBySubscription_MinimumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/PureStorage.Block/storagePools": {
      "get": {
        "operationId": "StoragePools_ListBySubscription",
        "tags": [
          "StoragePools"
        ],
        "description": "List StoragePool resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/StoragePoolListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "StoragePools_ListBySubscription": {
            "$ref": "./examples/StoragePools_ListBySubscription_MaximumSet_Gen.json"
          },
          "StoragePools_ListBySubscription_MinSet": {
            "$ref": "./examples/StoragePools_ListBySubscription_MinimumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/reservations": {
      "get": {
        "operationId": "Reservations_ListByResourceGroup",
        "tags": [
          "Reservations"
        ],
        "description": "List Reservation resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ReservationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Reservations_ListByResourceGroup": {
            "$ref": "./examples/Reservations_ListByResourceGroup_MaximumSet_Gen.json"
          },
          "Reservations_ListByResourceGroup_MinSet": {
            "$ref": "./examples/Reservations_ListByResourceGroup_MinimumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/reservations/{reservationName}": {
      "get": {
        "operationId": "Reservations_Get",
        "tags": [
          "Reservations"
        ],
        "description": "Get a Reservation",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "reservationName",
            "in": "path",
            "description": "The name of the reservation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/LiftrBase.Storage.Reservation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Reservations_Get": {
            "$ref": "./examples/Reservations_Get_MaximumSet_Gen.json"
          },
          "Reservations_Get_MinSet": {
            "$ref": "./examples/Reservations_Get_MinimumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "Reservations_Create",
        "tags": [
          "Reservations"
        ],
        "description": "Create a Reservation",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "reservationName",
            "in": "path",
            "description": "The name of the reservation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiftrBase.Storage.Reservation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Reservation' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/LiftrBase.Storage.Reservation"
            }
          },
          "201": {
            "description": "Resource 'Reservation' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/LiftrBase.Storage.Reservation"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Reservations_Create": {
            "$ref": "./examples/Reservations_Create_MaximumSet_Gen.json"
          },
          "Reservations_Create_MinSet": {
            "$ref": "./examples/Reservations_Create_MinimumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Reservations_Update",
        "tags": [
          "Reservations"
        ],
        "description": "Update a Reservation",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "reservationName",
            "in": "path",
            "description": "The name of the reservation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReservationUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/LiftrBase.Storage.Reservation"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Reservations_Update": {
            "$ref": "./examples/Reservations_Update_MaximumSet_Gen.json"
          },
          "Reservations_Update_MinSet": {
            "$ref": "./examples/Reservations_Update_MinimumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "Reservations_Delete",
        "tags": [
          "Reservations"
        ],
        "description": "Delete a Reservation",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "reservationName",
            "in": "path",
            "description": "The name of the reservation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Reservations_Delete": {
            "$ref": "./examples/Reservations_Delete_MaximumSet_Gen.json"
          },
          "Reservations_Delete_MinSet": {
            "$ref": "./examples/Reservations_Delete_MinimumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools": {
      "get": {
        "operationId": "StoragePools_ListByResourceGroup",
        "tags": [
          "StoragePools"
        ],
        "description": "List StoragePool resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/StoragePoolListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "StoragePools_ListByResourceGroup": {
            "$ref": "./examples/StoragePools_ListByResourceGroup_MaximumSet_Gen.json"
          },
          "StoragePools_ListByResourceGroup_MinSet": {
            "$ref": "./examples/StoragePools_ListByResourceGroup_MinimumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}": {
      "get": {
        "operationId": "StoragePools_Get",
        "tags": [
          "StoragePools"
        ],
        "description": "Get a StoragePool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "storagePoolName",
            "in": "path",
            "description": "Name of the Storage Pool.",
            "required": true,
            "type": "string",
            "minLength": 4,
            "maxLength": 20
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "StoragePools_Get": {
            "$ref": "./examples/StoragePools_Get_MaximumSet_Gen.json"
          },
          "StoragePools_Get_MinSet": {
            "$ref": "./examples/StoragePools_Get_MinimumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "StoragePools_Create",
        "tags": [
          "StoragePools"
        ],
        "description": "Create a StoragePool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "storagePoolName",
            "in": "path",
            "description": "Name of the Storage Pool.",
            "required": true,
            "type": "string",
            "minLength": 4,
            "maxLength": 20
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'StoragePool' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "201": {
            "description": "Resource 'StoragePool' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "StoragePools_Create": {
            "$ref": "./examples/StoragePools_Create_MaximumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "StoragePools_Update",
        "tags": [
          "StoragePools"
        ],
        "description": "Update a StoragePool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "storagePoolName",
            "in": "path",
            "description": "Name of the Storage Pool.",
            "required": true,
            "type": "string",
            "minLength": 4,
            "maxLength": 20
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoragePoolUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "StoragePools_Update": {
            "$ref": "./examples/StoragePools_Update_MaximumSet_Gen.json"
          },
          "StoragePools_Update_MinSet": {
            "$ref": "./examples/StoragePools_Update_MinimumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "StoragePools_Delete",
        "tags": [
          "StoragePools"
        ],
        "description": "Delete a StoragePool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "storagePoolName",
            "in": "path",
            "description": "Name of the Storage Pool.",
            "required": true,
            "type": "string",
            "minLength": 4,
            "maxLength": 20
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "StoragePools_Delete": {
            "$ref": "./examples/StoragePools_Delete_MaximumSet_Gen.json"
          },
          "StoragePools_Delete_MinSet": {
            "$ref": "./examples/StoragePools_Delete_MinimumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsStorageContainers": {
      "get": {
        "operationId": "AvsStorageContainers_ListByStoragePool",
        "tags": [
          "AvsStorageContainers"
        ],
        "description": "List AvsStorageContainer resources by StoragePool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "storagePoolName",
            "in": "path",
            "description": "Name of the Storage Pool.",
            "required": true,
            "type": "string",
            "minLength": 4,
            "maxLength": 20
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/AvsStorageContainerListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "AvsStorageContainers_ListByStoragePool": {
            "$ref": "./examples/AvsStorageContainers_ListByStoragePool_MaximumSet_Gen.json"
          },
          "AvsStorageContainers_ListByStoragePool_MinSet": {
            "$ref": "./examples/AvsStorageContainers_ListByStoragePool_MinimumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsStorageContainers/{storageContainerName}": {
      "get": {
        "operationId": "AvsStorageContainers_Get",
        "tags": [
          "AvsStorageContainers"
        ],
        "description": "Get a AvsStorageContainer",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "storagePoolName",
            "in": "path",
            "description": "Name of the Storage Pool.",
            "required": true,
            "type": "string",
            "minLength": 4,
            "maxLength": 20
          },
          {
            "name": "storageContainerName",
            "in": "path",
            "description": "The name of the storage container.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z\\-_]{1,32}$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/AvsStorageContainer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "AvsStorageContainers_Get": {
            "$ref": "./examples/AvsStorageContainers_Get_MaximumSet_Gen.json"
          },
          "AvsStorageContainers_Get_MinSet": {
            "$ref": "./examples/AvsStorageContainers_Get_MinimumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "AvsStorageContainers_Create",
        "tags": [
          "AvsStorageContainers"
        ],
        "description": "Create a AvsStorageContainer",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "storagePoolName",
            "in": "path",
            "description": "Name of the Storage Pool.",
            "required": true,
            "type": "string",
            "minLength": 4,
            "maxLength": 20
          },
          {
            "name": "storageContainerName",
            "in": "path",
            "description": "The name of the storage container.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z\\-_]{1,32}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AvsStorageContainer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/AvsStorageContainer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "AvsStorageContainers_Create": {
            "$ref": "./examples/AvsStorageContainers_Create_MaximumSet_Gen.json"
          },
          "AvsStorageContainers_Create_MinSet": {
            "$ref": "./examples/AvsStorageContainers_Create_MinimumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "AvsStorageContainers_Delete",
        "tags": [
          "AvsStorageContainers"
        ],
        "description": "Delete a AvsStorageContainer",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "storagePoolName",
            "in": "path",
            "description": "Name of the Storage Pool.",
            "required": true,
            "type": "string",
            "minLength": 4,
            "maxLength": 20
          },
          {
            "name": "storageContainerName",
            "in": "path",
            "description": "The name of the storage container.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z\\-_]{1,32}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "AvsStorageContainers_Delete": {
            "$ref": "./examples/AvsStorageContainers_Delete_MaximumSet_Gen.json"
          },
          "AvsStorageContainers_Delete_MinSet": {
            "$ref": "./examples/AvsStorageContainers_Delete_MinimumSet_Gen.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "AvsStorageContainer": {
      "type": "object",
      "description": "The AVS Storage Container resource type.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/AvsStorageContainerProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "AvsStorageContainerListResult": {
      "type": "object",
      "description": "The response of a AvsStorageContainer list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The AvsStorageContainer items on this page",
          "items": {
            "$ref": "#/definitions/AvsStorageContainer"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "AvsStorageContainerProperties": {
      "type": "object",
      "description": "The properties of an AVS Storage Container resource.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/Azure.ResourceManager.ResourceProvisioningState",
          "description": "Provisioning state of the resource.",
          "readOnly": true
        }
      }
    },
    "Azure.ResourceManager.ResourceProvisioningState": {
      "type": "string",
      "description": "The provisioning state of a resource type.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "ResourceProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          }
        ]
      }
    },
    "AzureVmwareService": {
      "type": "object",
      "description": "Azure VmWare Service properties. VASA is vSphere Storage APIs for Storage Awareness.",
      "properties": {
        "storageProviderId": {
          "type": "string",
          "description": "Internal VMware id identifying this StoragePool as a storage provider."
        },
        "sddc": {
          "type": "string",
          "description": "Resource id pointing at the AVS SDDC the pool is configured with (used by AVS Resource Provider to keep track of attached pools)."
        },
        "vasaProviderPassword": {
          "type": "string",
          "format": "password",
          "description": "Password for VASA service login, disabled if omitted or set to null.",
          "x-ms-mutability": [
            "update",
            "create"
          ],
          "x-ms-secret": true
        }
      },
      "required": [
        "storageProviderId"
      ]
    },
    "AzureVmwareServiceUpdate": {
      "type": "object",
      "description": "Azure VmWare Service properties. VASA is vSphere Storage APIs for Storage Awareness.",
      "properties": {
        "storageProviderId": {
          "type": "string",
          "description": "Internal VMware id identifying this StoragePool as a storage provider."
        },
        "sddc": {
          "type": "string",
          "description": "Resource id pointing at the AVS SDDC the pool is configured with (used by AVS Resource Provider to keep track of attached pools)."
        },
        "vasaProviderPassword": {
          "type": "string",
          "format": "password",
          "description": "Password for VASA service login, disabled if omitted or set to null.",
          "x-ms-mutability": [
            "update",
            "create"
          ],
          "x-ms-secret": true
        }
      }
    },
    "LiftrBase.MarketplaceDetails": {
      "type": "object",
      "description": "Marketplace details of a resource.",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "description": "Azure subscription id for the the marketplace offer is purchased from"
        },
        "subscriptionStatus": {
          "$ref": "#/definitions/LiftrBase.MarketplaceSubscriptionStatus",
          "description": "Marketplace subscription status"
        },
        "offerDetails": {
          "$ref": "#/definitions/LiftrBase.OfferDetails",
          "description": "Offer details for the marketplace that is selected by the user"
        }
      },
      "required": [
        "subscriptionId",
        "offerDetails"
      ]
    },
    "LiftrBase.MarketplaceSubscriptionStatus": {
      "type": "string",
      "description": "Marketplace subscription status of a resource.",
      "enum": [
        "PendingFulfillmentStart",
        "Subscribed",
        "Suspended",
        "Unsubscribed"
      ],
      "x-ms-enum": {
        "name": "MarketplaceSubscriptionStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "PendingFulfillmentStart",
            "value": "PendingFulfillmentStart",
            "description": "Purchased but not yet activated"
          },
          {
            "name": "Subscribed",
            "value": "Subscribed",
            "description": "Marketplace subscription is activated"
          },
          {
            "name": "Suspended",
            "value": "Suspended",
            "description": "This state indicates that a customer's payment for the Marketplace service was not received"
          },
          {
            "name": "Unsubscribed",
            "value": "Unsubscribed",
            "description": "Customer has cancelled the subscription"
          }
        ]
      }
    },
    "LiftrBase.OfferDetails": {
      "type": "object",
      "description": "Offer details for the marketplace that is selected by the user",
      "properties": {
        "publisherId": {
          "type": "string",
          "description": "Publisher Id for the marketplace offer"
        },
        "offerId": {
          "type": "string",
          "description": "Offer Id for the marketplace offer"
        },
        "planId": {
          "type": "string",
          "description": "Plan Id for the marketplace offer"
        },
        "planName": {
          "type": "string",
          "description": "Plan Name for the marketplace offer"
        },
        "termUnit": {
          "type": "string",
          "description": "Term Unit for the marketplace offer"
        },
        "termId": {
          "type": "string",
          "description": "Term ID for the marketplace offer"
        }
      },
      "required": [
        "publisherId",
        "offerId",
        "planId"
      ]
    },
    "LiftrBase.Storage.Reservation": {
      "type": "object",
      "description": "Reservation resource type.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/LiftrBase.Storage.ReservationProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "LiftrBase.Storage.ReservationProperties": {
      "type": "object",
      "description": "Properties of a Reservation resource.",
      "properties": {
        "marketplace": {
          "$ref": "#/definitions/LiftrBase.MarketplaceDetails",
          "description": "Marketplace details of the resource.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "user": {
          "$ref": "#/definitions/LiftrBase.UserDetails",
          "description": "Details of the user."
        },
        "provisioningState": {
          "$ref": "#/definitions/Azure.ResourceManager.ResourceProvisioningState",
          "description": "Provisioning state of the resource.",
          "readOnly": true
        }
      },
      "required": [
        "marketplace",
        "user"
      ]
    },
    "LiftrBase.Storage.VnetInjection": {
      "type": "object",
      "description": "Describes parameters for Virtual Network to deploy to (VNet injection).",
      "properties": {
        "subnetId": {
          "type": "string",
          "description": "Full Azure Resource ID of the Virtual Network subnet to make the Pool visible in."
        }
      },
      "required": [
        "subnetId"
      ]
    },
    "LiftrBase.Storage.VnetInjectionUpdate": {
      "type": "object",
      "description": "Describes parameters for Virtual Network to deploy to (VNet injection).",
      "properties": {
        "subnetId": {
          "type": "string",
          "description": "Full Azure Resource ID of the Virtual Network subnet to make the Pool visible in."
        }
      }
    },
    "LiftrBase.UserDetails": {
      "type": "object",
      "description": "Details of the User.",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name of the user"
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user"
        },
        "emailAddress": {
          "$ref": "#/definitions/LiftrBase.email",
          "description": "Email address of the user"
        },
        "upn": {
          "type": "string",
          "description": "User's principal name"
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number"
        }
      },
      "required": [
        "firstName",
        "lastName",
        "emailAddress"
      ]
    },
    "LiftrBase.UserDetailsUpdate": {
      "type": "object",
      "description": "Details of the User.",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name of the user"
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user"
        },
        "emailAddress": {
          "$ref": "#/definitions/LiftrBase.email",
          "description": "Email address of the user"
        },
        "upn": {
          "type": "string",
          "description": "User's principal name"
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number"
        }
      }
    },
    "LiftrBase.email": {
      "type": "string",
      "description": "Reusable representation of an email address.",
      "pattern": "^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$"
    },
    "ReservationListResult": {
      "type": "object",
      "description": "The response of a Reservation list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Reservation items on this page",
          "items": {
            "$ref": "#/definitions/LiftrBase.Storage.Reservation"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ReservationUpdate": {
      "type": "object",
      "description": "The type used for update operations of the Reservation.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/ReservationUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "ReservationUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the Reservation.",
      "properties": {
        "user": {
          "$ref": "#/definitions/LiftrBase.UserDetailsUpdate",
          "description": "Details of the user."
        }
      }
    },
    "StoragePool": {
      "type": "object",
      "description": "Storage Pool resource type.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/StoragePoolProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "StoragePoolListResult": {
      "type": "object",
      "description": "The response of a StoragePool list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The StoragePool items on this page",
          "items": {
            "$ref": "#/definitions/StoragePool"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "StoragePoolProperties": {
      "type": "object",
      "description": "Properties of a Storage Pool resource.",
      "properties": {
        "storagePoolId": {
          "type": "string",
          "description": "ID of StoragePool in Pure Storage systems.",
          "readOnly": true
        },
        "availabilityZone": {
          "type": "string",
          "description": "Azure Availability Zone the Pool is located in."
        },
        "vnetInjection": {
          "$ref": "#/definitions/LiftrBase.Storage.VnetInjection",
          "description": "Describes parameters for Virtual Network to deploy to (VNet injection)."
        },
        "dataRetentionPeriod": {
          "type": "integer",
          "format": "int64",
          "description": "How long a deleted object is kept before eradication (time in seconds).",
          "readOnly": true
        },
        "avsEnabled": {
          "type": "boolean",
          "description": "if true, VASA support is enabled and the AVS configuration parameters below may be passed to change the current password. if false, VASA support will be disabled (but previous password configuration is not lost)."
        },
        "provisionedBandwidthMbPerSec": {
          "type": "integer",
          "format": "int64",
          "description": "Total bandwidth provisioned for the pool (in MB/s)."
        },
        "avs": {
          "$ref": "#/definitions/AzureVmwareService",
          "description": "Presented if avsEnabled is true."
        },
        "provisioningState": {
          "$ref": "#/definitions/Azure.ResourceManager.ResourceProvisioningState",
          "description": "Provisioning state of the resource.",
          "readOnly": true
        },
        "reservationResourceId": {
          "type": "string",
          "description": "Resource id of the reservation resource. The RP should make sure this is a valid resource before allowing StoragePool creation to continue."
        }
      },
      "required": [
        "availabilityZone",
        "vnetInjection",
        "avsEnabled",
        "provisionedBandwidthMbPerSec",
        "reservationResourceId"
      ]
    },
    "StoragePoolUpdate": {
      "type": "object",
      "description": "The type used for update operations of the StoragePool.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/StoragePoolUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "StoragePoolUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the StoragePool.",
      "properties": {
        "availabilityZone": {
          "type": "string",
          "description": "Azure Availability Zone the Pool is located in."
        },
        "vnetInjection": {
          "$ref": "#/definitions/LiftrBase.Storage.VnetInjectionUpdate",
          "description": "Describes parameters for Virtual Network to deploy to (VNet injection)."
        },
        "avsEnabled": {
          "type": "boolean",
          "description": "if true, VASA support is enabled and the AVS configuration parameters below may be passed to change the current password. if false, VASA support will be disabled (but previous password configuration is not lost)."
        },
        "provisionedBandwidthMbPerSec": {
          "type": "integer",
          "format": "int64",
          "description": "Total bandwidth provisioned for the pool (in MB/s)."
        },
        "avs": {
          "$ref": "#/definitions/AzureVmwareServiceUpdate",
          "description": "Presented if avsEnabled is true."
        },
        "reservationResourceId": {
          "type": "string",
          "description": "Resource id of the reservation resource. The RP should make sure this is a valid resource before allowing StoragePool creation to continue."
        }
      }
    },
    "Versions": {
      "type": "string",
      "description": "Supported versions for PureStorage.Block.",
      "enum": [
        "2023-06-01-preview"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v1_preview",
            "value": "2023-06-01-preview",
            "description": "Version 1 preview."
          }
        ]
      }
    }
  },
  "parameters": {}
}
