{
  "swagger": "2.0",
  "info": {
    "title": "Azure Device Registry",
    "description": "Asset resource type.",
    "version": "2023-11-01-preview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "operationId": "Assets_ListBySubscription",
        "description": "List all assets in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Assets.",
            "schema": {
              "$ref": "#/definitions/AssetResponseList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List Assets in a Subscription": {
            "$ref": "./examples/assets/List_Assets_Subscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "operationId": "Assets_ListByResourceGroup",
        "description": "List all assets in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Assets.",
            "schema": {
              "$ref": "#/definitions/AssetResponseList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List Assets in a Resource Group": {
            "$ref": "./examples/assets/List_Assets_ResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assets/{assetName}": {
      "put": {
        "tags": [
          "Assets"
        ],
        "operationId": "Assets_CreateOrReplace",
        "description": "Create a new asset or replace an existing asset.",
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/assetNameParameter"
          },
          {
            "name": "asset",
            "in": "body",
            "required": true,
            "description": "Resource create or replace parameters.",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Asset is created or updated (replaced) successfully.",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "201": {
            "x-nullable": false,
            "description": "Async operation to create or update (replace) the Asset.",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create an Asset With External Asset Id": {
            "$ref": "./examples/assets/Create_Asset_With_ExternalAssetId.json"
          },
          "Create an Asset Without External Asset Id": {
            "$ref": "./examples/assets/Create_Asset_Without_ExternalAssetId.json"
          },
          "Create an Asset Without Display Name": {
            "$ref": "./examples/assets/Create_Asset_Without_DisplayName.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Assets"
        ],
        "operationId": "Assets_Update",
        "description": "Update specific asset properties.",
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/assetNameParameter"
          },
          {
            "name": "asset",
            "in": "body",
            "required": true,
            "description": "Resource Update parameters.",
            "schema": {
              "$ref": "#/definitions/AssetPatchPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Asset.",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "202": {
            "x-nullable": false,
            "description": "Async operation to update the Asset.",
            "headers": {
              "Location": {
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Patch an Asset": {
            "$ref": "./examples/assets/Update_Asset.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "operationId": "Assets_Delete",
        "description": "Delete an asset.",
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/assetNameParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Async operation to delete the Asset is created.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Asset deletion no-op since the resource does not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete an Asset": {
            "$ref": "./examples/assets/Delete_Asset.json"
          }
        }
      },
      "get": {
        "tags": [
          "Assets"
        ],
        "operationId": "Assets_Get",
        "description": "Retrieve a single asset.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/assetNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A single Asset.",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get an Asset": {
            "$ref": "./examples/assets/Get_Asset.json"
          },
          "Get an Asset with Sync Status ": {
            "$ref": "./examples/assets/Get_Asset_With_SyncStatus.json"
          }
        }
      }
    }
  },
  "parameters": {
    "assetNameParameter": {
      "name": "assetName",
      "description": "Asset name parameter.",
      "in": "path",
      "required": true,
      "type": "string",
      "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
      "maxLength": 63,
      "minLength": 3
    }
  },
  "definitions": {
    "AssetResponseList": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string"
        }
      },
      "description": "List of Assets."
    },
    "Asset": {
      "type": "object",
      "required": [
        "extendedLocation"
      ],
      "properties": {
        "properties": {
          "type": "object",
          "required": [
            "assetEndpointProfileUri"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/AssetProperties"
            }
          ],
          "description": "Asset resource properties."
        },
        "extendedLocation": {
          "type": "object",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The extended location type."
            },
            "name": {
              "type": "string",
              "description": "The extended location name."
            }
          },
          "description": "The extended location."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ],
      "description": "Asset definition."
    },
    "AssetPatchPayload": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/AssetProperties",
          "description": "Asset resource properties."
        }
      },
      "description": "Asset definition for Patch operation."
    },
    "AssetProperties": {
      "description": "Defines the asset properties.",
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Globally unique, immutable, non-reusable id.",
          "readOnly": true
        },
        "assetType": {
          "type": "string",
          "description": "Resource path to asset type (model) definition."
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled/Disabled status of the asset."
        },
        "externalAssetId": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "Asset id provided by the customer."
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the asset."
        },
        "assetEndpointProfileUri": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must have the format <ModuleCR.metadata.namespace>/<ModuleCR.metadata.name>."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "An integer that is incremented each time the resource is modified.",
          "readOnly": true
        },
        "manufacturer": {
          "type": "string",
          "description": "Asset manufacturer name."
        },
        "manufacturerUri": {
          "type": "string",
          "description": "Asset manufacturer URI."
        },
        "model": {
          "type": "string",
          "description": "Asset model name."
        },
        "productCode": {
          "type": "string",
          "description": "Asset product code."
        },
        "hardwareRevision": {
          "type": "string",
          "description": "Revision number of the hardware."
        },
        "softwareRevision": {
          "type": "string",
          "description": "Revision number of the software."
        },
        "documentationUri": {
          "type": "string",
          "description": "Reference to the documentation."
        },
        "serialNumber": {
          "type": "string",
          "description": "Asset serial number."
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes set by the customer.",
          "additionalProperties": true
        },
        "defaultDataPointsConfiguration": {
          "type": "string",
          "description": "Protocol-specific default configuration for all data points. Each data point can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol."
        },
        "defaultEventsConfiguration": {
          "type": "string",
          "description": "Protocol-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here. This assumes that each asset instance has one protocol."
        },
        "dataPoints": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "dataSource"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the data point."
              },
              "dataSource": {
                "type": "string",
                "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
              },
              "capabilityId": {
                "type": "string",
                "description": "The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1."
              },
              "observabilityMode": {
                "type": "string",
                "enum": [
                  "none",
                  "counter",
                  "gauge",
                  "histogram",
                  "log"
                ],
                "x-ms-enum": {
                  "name": "DataPointsObservabilityMode",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "None",
                      "value": "none"
                    },
                    {
                      "name": "Counter",
                      "value": "counter"
                    },
                    {
                      "name": "Gauge",
                      "value": "gauge"
                    },
                    {
                      "name": "Histogram",
                      "value": "histogram"
                    },
                    {
                      "name": "Log",
                      "value": "log"
                    }
                  ]
                },
                "default": "none",
                "description": "An indication of how the data point should be mapped to OpenTelemetry."
              },
              "dataPointConfiguration": {
                "type": "string",
                "description": "Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              }
            }
          },
          "x-ms-identifiers": [],
          "description": "Array of data points that are part of the asset. Each data point can reference an asset type capability and have per-data point configuration. See below for more details for the definition of the dataPoints element."
        },
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "eventNotifier"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event."
              },
              "eventNotifier": {
                "type": "string",
                "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
              },
              "capabilityId": {
                "type": "string",
                "description": "The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1."
              },
              "observabilityMode": {
                "type": "string",
                "enum": [
                  "none",
                  "log"
                ],
                "x-ms-enum": {
                  "name": "EventsObservabilityMode",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "None",
                      "value": "none"
                    },
                    {
                      "name": "Log",
                      "value": "log"
                    }
                  ]
                },
                "default": "none",
                "description": "An indication of how the event should be mapped to OpenTelemetry."
              },
              "eventConfiguration": {
                "type": "string",
                "description": "Protocol-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              }
            }
          },
          "x-ms-identifiers": [],
          "description": "Array of events that are part of the asset. Each event can reference an asset type capability and have per-event configuration. See below for more details about the definition of the events element."
        },
        "status": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "errors": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code for classification of errors (ex: 400, 404, 500, etc.)."
                  },
                  "message": {
                    "type": "string",
                    "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”)."
                  }
                }
              },
              "x-ms-identifiers": [],
              "description": "Array object to transfer and persist errors that originate from the Edge."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version."
            }
          },
          "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources."
        },
        "provisioningState": {
          "type": "string",
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation has been canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              }
            ]
          }
        }
      }
    }
  }
}
