{
  "swagger": "2.0",
  "info": {
    "title": "Azure.Analytics.OnlineExperimentation service",
    "version": "2025-05-31-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "Endpoint URL for the Online Experimentation workspace.",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "AadOauth2Auth": [
        "https://exp.azure.net/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "AadOauth2Auth": {
      "type": "oauth2",
      "description": "The Azure Active Directory OAuth2 Flow",
      "flow": "accessCode",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "https://exp.azure.net/.default": ""
      },
      "tokenUrl": "https://login.microsoftonline.com/common/oauth2/token"
    }
  },
  "tags": [],
  "paths": {
    "/experiment-metrics": {
      "get": {
        "operationId": "ListMetrics",
        "description": "Lists experiment metrics.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedExperimentMetric"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "ListMetrics": {
            "$ref": "./examples/ListMetrics.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/experiment-metrics/{experimentMetricId}": {
      "get": {
        "operationId": "GetMetric",
        "description": "Fetches an experiment metric by ID.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "experimentMetricId",
            "in": "path",
            "description": "Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z_][a-z0-9_]*$"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifModifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ExperimentMetric"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetMetric": {
            "$ref": "./examples/GetMetric.json"
          }
        }
      },
      "patch": {
        "operationId": "CreateOrUpdateMetric",
        "description": "Creates or updates an experiment metric.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "experimentMetricId",
            "in": "path",
            "description": "Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z_][a-z0-9_]*$"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifModifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentMetricCreateOrUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ExperimentMetric"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/ExperimentMetric"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "CreateOrUpdateMetric_Average": {
            "$ref": "./examples/CreateOrUpdateMetric_Average.json"
          },
          "CreateOrUpdateMetric_EventCount": {
            "$ref": "./examples/CreateOrUpdateMetric_EventCount.json"
          },
          "CreateOrUpdateMetric_EventRate": {
            "$ref": "./examples/CreateOrUpdateMetric_EventRate.json"
          },
          "CreateOrUpdateMetric_Percentile": {
            "$ref": "./examples/CreateOrUpdateMetric_Percentile.json"
          },
          "CreateOrUpdateMetric_Sum": {
            "$ref": "./examples/CreateOrUpdateMetric_Sum.json"
          },
          "CreateOrUpdateMetric_UserCount": {
            "$ref": "./examples/CreateOrUpdateMetric_UserCount.json"
          },
          "CreateOrUpdateMetric_UserRate": {
            "$ref": "./examples/CreateOrUpdateMetric_UserRate.json"
          }
        }
      },
      "delete": {
        "operationId": "DeleteMetric",
        "description": "Deletes an experiment metric.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "experimentMetricId",
            "in": "path",
            "description": "Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z_][a-z0-9_]*$"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.ConditionalRequestHeaders.ifModifiedSince"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DeleteMetric": {
            "$ref": "./examples/DeleteMetric.json"
          }
        }
      }
    },
    "/experiment-metrics:validate": {
      "post": {
        "operationId": "ValidateMetric",
        "description": "Validates an experiment metric definition.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Experiment metric input to validate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentMetric"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ExperimentMetricValidationResult"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "ValidateMetric": {
            "$ref": "./examples/ValidateMetric.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AggregatedValue": {
      "type": "object",
      "description": "An event property value aggregated by a metric.",
      "properties": {
        "eventName": {
          "type": "string",
          "description": "The name of the event.",
          "minLength": 1,
          "maxLength": 200
        },
        "filter": {
          "$ref": "#/definitions/EventCondition",
          "description": "[Optional] A condition to filter events."
        },
        "eventProperty": {
          "type": "string",
          "description": "The key of the event property to aggregate.",
          "minLength": 1,
          "maxLength": 200,
          "pattern": "^[a-zA-Z0-9_ -.]+$"
        }
      },
      "required": [
        "eventName",
        "eventProperty"
      ]
    },
    "AverageMetricDefinition": {
      "type": "object",
      "description": "The definition of an Average metric definition. Calculates the average value of a specified event property.",
      "properties": {
        "value": {
          "$ref": "#/definitions/AggregatedValue",
          "description": "The value to aggregate."
        }
      },
      "required": [
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ExperimentMetricDefinition"
        }
      ],
      "x-ms-discriminator-value": "Average"
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md#handling-errors.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "Azure.Core.eTag": {
      "type": "string",
      "description": "The ETag (or entity tag) HTTP response header is an identifier for a specific version of a resource.\nIt lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response if the content was not changed.\n\nIt is a string of ASCII characters placed between double quotes, like \"675af34563dc-tr34\"."
    },
    "Category": {
      "type": "string",
      "description": "A category attached to the metric.",
      "minLength": 1,
      "maxLength": 30,
      "pattern": "^[a-zA-Z0-9 _:()&-]+$"
    },
    "DesiredDirection": {
      "type": "string",
      "description": "Desired direction for an experiment metric value.",
      "enum": [
        "Increase",
        "Decrease",
        "Neutral"
      ],
      "x-ms-enum": {
        "name": "DesiredDirection",
        "modelAsString": true,
        "values": [
          {
            "name": "Increase",
            "value": "Increase",
            "description": "An increase to the metric value is desired. E.g., Success rate, Total revenue."
          },
          {
            "name": "Decrease",
            "value": "Decrease",
            "description": "A decrease to the metric value is desired. E.g., Error rate, Latency."
          },
          {
            "name": "Neutral",
            "value": "Neutral",
            "description": "Neither an increase nor a decrease to the metric value is desired, or the desired direction depends on other factors. E.g., Number of video play attempts, Number of user feedbacks"
          }
        ]
      }
    },
    "DiagnosticCode": {
      "type": "string",
      "description": "The diagnostic error codes.",
      "enum": [
        "FailedSchemaValidation",
        "InvalidEventCondition",
        "UnsupportedEventCondition",
        "InvalidExperimentMetricDefinition"
      ],
      "x-ms-enum": {
        "name": "DiagnosticCode",
        "modelAsString": true,
        "values": [
          {
            "name": "FailedSchemaValidation",
            "value": "FailedSchemaValidation",
            "description": "The metric definition does not conform to the required schema."
          },
          {
            "name": "InvalidEventCondition",
            "value": "InvalidEventCondition",
            "description": "The filter condition is invalid."
          },
          {
            "name": "UnsupportedEventCondition",
            "value": "UnsupportedEventCondition",
            "description": "The filter condition is valid but not currently supported."
          },
          {
            "name": "InvalidExperimentMetricDefinition",
            "value": "InvalidExperimentMetricDefinition",
            "description": "The provided metric definition is invalid.\nFor example, defining a metric to calculate the average of a numeric property but\nincluding a filter condition that compares it to a string value creates a type mismatch."
          }
        ]
      }
    },
    "DiagnosticDetail": {
      "type": "object",
      "description": "Diagnostic details for validation errors.",
      "properties": {
        "message": {
          "type": "string",
          "description": "A human-readable error message.",
          "readOnly": true
        },
        "code": {
          "$ref": "#/definitions/DiagnosticCode",
          "description": "The diagnostic error code.",
          "readOnly": true
        }
      },
      "required": [
        "message",
        "code"
      ]
    },
    "EventCondition": {
      "type": "string",
      "description": "A condition to filter events. Accepts a Kusto Query Language (KQL) filter predicate. \nAllowed expressions evaluate to a bool data type and use a subset of KQL syntax:\nEvent properties: plain or bracket notation.\nLiterals: bool, long, real, string.\nComparison operators: ==, !=, <, <=, >, >=.\nBoolean operators: and, or.\nGrouping operations: parentheses.",
      "minLength": 1,
      "maxLength": 1000
    },
    "EventCountMetricDefinition": {
      "type": "object",
      "description": "The definition of an EventCount metric definition. Counts the occurrences of a specified event.",
      "properties": {
        "event": {
          "$ref": "#/definitions/ObservedEvent",
          "description": "Event to observe."
        }
      },
      "required": [
        "event"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ExperimentMetricDefinition"
        }
      ],
      "x-ms-discriminator-value": "EventCount"
    },
    "EventRateMetricDefinition": {
      "type": "object",
      "description": "The definition of an EventRate metric definition. Calculates the percentage of events satisfying a specified condition.",
      "properties": {
        "event": {
          "$ref": "#/definitions/ObservedEvent",
          "description": "Event to observe as the rate denominator."
        },
        "rateCondition": {
          "$ref": "#/definitions/EventCondition",
          "description": "The event contributes to the rate numerator if it satisfies this condition."
        }
      },
      "required": [
        "event",
        "rateCondition"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ExperimentMetricDefinition"
        }
      ],
      "x-ms-discriminator-value": "EventRate"
    },
    "ExperimentMetric": {
      "type": "object",
      "description": "Defines experiment metric metadata and computation details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores.",
          "minLength": 1,
          "maxLength": 50,
          "pattern": "^[a-z_][a-z0-9_]*$",
          "readOnly": true
        },
        "lifecycle": {
          "$ref": "#/definitions/LifecycleStage",
          "description": "Determines whether it is included in experiment analysis."
        },
        "displayName": {
          "type": "string",
          "description": "A user-friendly display name for the experiment metric shown in reports and dashboards.",
          "minLength": 1,
          "maxLength": 200
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the experiment metric.",
          "minLength": 1,
          "maxLength": 1000
        },
        "categories": {
          "type": "array",
          "description": "Categories associated with the experiment metric. Used for organizing and filtering metrics.",
          "items": {
            "$ref": "#/definitions/Category"
          }
        },
        "desiredDirection": {
          "$ref": "#/definitions/DesiredDirection",
          "description": "The desired direction for changes in the metric value."
        },
        "definition": {
          "$ref": "#/definitions/ExperimentMetricDefinition",
          "description": "The metric definition specifying how the metric value is calculated from event data."
        },
        "eTag": {
          "$ref": "#/definitions/Azure.Core.eTag",
          "description": "ETag of the experiment metric.",
          "readOnly": true
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp (UTC) of the last modification to the experiment metric resource.",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "lifecycle",
        "displayName",
        "description",
        "categories",
        "desiredDirection",
        "definition",
        "eTag",
        "lastModifiedAt"
      ]
    },
    "ExperimentMetricCreateOrUpdate": {
      "type": "object",
      "description": "Defines experiment metric metadata and computation details.",
      "properties": {
        "lifecycle": {
          "$ref": "#/definitions/LifecycleStage",
          "description": "Determines whether it is included in experiment analysis."
        },
        "displayName": {
          "type": "string",
          "description": "A user-friendly display name for the experiment metric shown in reports and dashboards.",
          "minLength": 1,
          "maxLength": 200
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the experiment metric.",
          "minLength": 1,
          "maxLength": 1000
        },
        "categories": {
          "type": "array",
          "description": "Categories associated with the experiment metric. Used for organizing and filtering metrics.",
          "items": {
            "$ref": "#/definitions/Category"
          }
        },
        "desiredDirection": {
          "$ref": "#/definitions/DesiredDirection",
          "description": "The desired direction for changes in the metric value."
        },
        "definition": {
          "$ref": "#/definitions/ExperimentMetricDefinition",
          "description": "The metric definition specifying how the metric value is calculated from event data."
        }
      }
    },
    "ExperimentMetricDefinition": {
      "type": "object",
      "description": "The metric definition, which determines how the metric value is calculated from event data.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminator property for ExperimentMetricDefinition."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "ExperimentMetricValidationResult": {
      "type": "object",
      "description": "The result of validating an experiment metric.",
      "properties": {
        "isValid": {
          "type": "boolean",
          "description": "Indicates whether the experiment metric is valid."
        },
        "diagnostics": {
          "type": "array",
          "description": "Diagnostic details from the validation process.",
          "items": {
            "$ref": "#/definitions/DiagnosticDetail"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "required": [
        "isValid",
        "diagnostics"
      ]
    },
    "LifecycleStage": {
      "type": "string",
      "description": "Lifecycle stages of an experiment metric, determining whether the metric is included in experiment analysis.",
      "enum": [
        "Active",
        "Inactive"
      ],
      "x-ms-enum": {
        "name": "LifecycleStage",
        "modelAsString": true,
        "values": [
          {
            "name": "Active",
            "value": "Active",
            "description": "The metric is included in experiment analysis."
          },
          {
            "name": "Inactive",
            "value": "Inactive",
            "description": "The metric is excluded from experiment analysis but remains available for future use."
          }
        ]
      }
    },
    "ObservedEvent": {
      "type": "object",
      "description": "An event observed by a metric.",
      "properties": {
        "eventName": {
          "type": "string",
          "description": "The name of the event.",
          "minLength": 1,
          "maxLength": 200
        },
        "filter": {
          "$ref": "#/definitions/EventCondition",
          "description": "[Optional] A condition to filter events."
        }
      },
      "required": [
        "eventName"
      ]
    },
    "PagedExperimentMetric": {
      "type": "object",
      "description": "Paged collection of ExperimentMetric items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ExperimentMetric items on this page",
          "items": {
            "$ref": "#/definitions/ExperimentMetric"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PercentileMetricDefinition": {
      "type": "object",
      "description": "The definition of a Percentile metric definition. Calculates a specified percentile of an event property.",
      "properties": {
        "value": {
          "$ref": "#/definitions/AggregatedValue",
          "description": "The value to aggregate, including the event name and property to measure."
        },
        "percentile": {
          "type": "number",
          "format": "double",
          "description": "The percentile to measure."
        }
      },
      "required": [
        "value",
        "percentile"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ExperimentMetricDefinition"
        }
      ],
      "x-ms-discriminator-value": "Percentile"
    },
    "SumMetricDefinition": {
      "type": "object",
      "description": "The definition of a Sum metric definition. Calculates the sum of a specified event property. Experiment analysis accounts for unequal traffic allocation.",
      "properties": {
        "value": {
          "$ref": "#/definitions/AggregatedValue",
          "description": "The value to aggregate."
        }
      },
      "required": [
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ExperimentMetricDefinition"
        }
      ],
      "x-ms-discriminator-value": "Sum"
    },
    "UserCountMetricDefinition": {
      "type": "object",
      "description": "The definition of a UserCount metric definition. Counts unique users who encounter a specified event.",
      "properties": {
        "event": {
          "$ref": "#/definitions/ObservedEvent",
          "description": "Event to observe."
        }
      },
      "required": [
        "event"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ExperimentMetricDefinition"
        }
      ],
      "x-ms-discriminator-value": "UserCount"
    },
    "UserRateMetricDefinition": {
      "type": "object",
      "description": "The definition of a UserRate metric definition. Calculates the percentage of users who encounter a start event and subsequently an end event. Users must encounter events in the specified order.",
      "properties": {
        "startEvent": {
          "$ref": "#/definitions/ObservedEvent",
          "description": "The start event to observe as the rate denominator."
        },
        "endEvent": {
          "$ref": "#/definitions/ObservedEvent",
          "description": "The end event to observe, which is a condition for the rate numerator."
        }
      },
      "required": [
        "startEvent",
        "endEvent"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ExperimentMetricDefinition"
        }
      ],
      "x-ms-discriminator-value": "UserRate"
    }
  },
  "parameters": {
    "Azure.Core.ClientRequestIdHeader": {
      "name": "x-ms-client-request-id",
      "in": "header",
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "required": false,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "clientRequestId"
    },
    "Azure.Core.ConditionalRequestHeaders.ifMatch": {
      "name": "If-Match",
      "in": "header",
      "description": "The request should only proceed if an entity matches this string.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "ifMatch"
    },
    "Azure.Core.ConditionalRequestHeaders.ifModifiedSince": {
      "name": "If-Modified-Since",
      "in": "header",
      "description": "The request should only proceed if the entity was modified after this time.",
      "required": false,
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "ifModifiedSince"
    },
    "Azure.Core.ConditionalRequestHeaders.ifNoneMatch": {
      "name": "If-None-Match",
      "in": "header",
      "description": "The request should only proceed if no entity matches this string.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "ifNoneMatch"
    },
    "Azure.Core.ConditionalRequestHeaders.ifUnmodifiedSince": {
      "name": "If-Unmodified-Since",
      "in": "header",
      "description": "The request should only proceed if the entity was not modified after this time.",
      "required": false,
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "ifUnmodifiedSince"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "Azure.Core.MaxPageSizeQueryParameter": {
      "name": "maxpagesize",
      "in": "query",
      "description": "The maximum number of result items per page.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.SkipQueryParameter": {
      "name": "skip",
      "in": "query",
      "description": "The number of result items to skip.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.TopQueryParameter": {
      "name": "top",
      "in": "query",
      "description": "The number of result items to return.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    }
  }
}
