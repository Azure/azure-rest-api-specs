{
  "swagger": "2.0",
  "info": {
    "title": "ContainerServiceFleetClient",
    "version": "2025-03-02-naar",
    "description": "Azure Kubernetes Fleet Manager api client.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "Fleets"
    },
    {
      "name": "FleetMembers"
    },
    {
      "name": "FleetManagedNamespaces"
    },
    {
      "name": "UpdateRuns"
    },
    {
      "name": "FleetUpdateStrategies"
    },
    {
      "name": "AutoUpgradeProfiles"
    },
    {
      "name": "AutoUpgradeProfileOperations"
    }
  ],
  "paths": {
    "/providers/Microsoft.ContainerService/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/fleets": {
      "get": {
        "operationId": "Fleets_ListBySubscription",
        "tags": [
          "Fleets"
        ],
        "description": "Lists fleets in the specified subscription.",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/FleetListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets": {
      "get": {
        "operationId": "Fleets_ListByResourceGroup",
        "tags": [
          "Fleets"
        ],
        "description": "Lists fleets in the specified subscription and resource group.",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/FleetListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}": {
      "get": {
        "operationId": "Fleets_Get",
        "tags": [
          "Fleets"
        ],
        "description": "Gets a Fleet.",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Fleet"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "Fleets_CreateOrUpdate",
        "tags": [
          "Fleets"
        ],
        "description": "Creates or updates a Fleet.",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The request should only proceed if no entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Fleet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Fleet' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Fleet"
            }
          },
          "201": {
            "description": "Resource 'Fleet' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Fleet"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Fleets_Update",
        "tags": [
          "Fleets"
        ],
        "description": "Update a Fleet",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FleetPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Fleet"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "original-uri"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "Fleets_Delete",
        "tags": [
          "Fleets"
        ],
        "description": "Delete a Fleet",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/autoUpgradeProfiles": {
      "get": {
        "operationId": "AutoUpgradeProfiles_ListByFleet",
        "tags": [
          "AutoUpgradeProfiles"
        ],
        "description": "List AutoUpgradeProfile resources by Fleet",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/AutoUpgradeProfileListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/autoUpgradeProfiles/{autoUpgradeProfileName}": {
      "get": {
        "operationId": "AutoUpgradeProfiles_Get",
        "tags": [
          "AutoUpgradeProfiles"
        ],
        "description": "Get a AutoUpgradeProfile",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "autoUpgradeProfileName",
            "in": "path",
            "description": "The name of the AutoUpgradeProfile resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/AutoUpgradeProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "AutoUpgradeProfiles_CreateOrUpdate",
        "tags": [
          "AutoUpgradeProfiles"
        ],
        "description": "Create a AutoUpgradeProfile",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The request should only proceed if no entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "autoUpgradeProfileName",
            "in": "path",
            "description": "The name of the AutoUpgradeProfile resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutoUpgradeProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'AutoUpgradeProfile' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/AutoUpgradeProfile"
            }
          },
          "201": {
            "description": "Resource 'AutoUpgradeProfile' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/AutoUpgradeProfile"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "AutoUpgradeProfiles_Delete",
        "tags": [
          "AutoUpgradeProfiles"
        ],
        "description": "Delete a AutoUpgradeProfile",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "autoUpgradeProfileName",
            "in": "path",
            "description": "The name of the AutoUpgradeProfile resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/autoUpgradeProfiles/{autoUpgradeProfileName}/generateUpdateRun": {
      "post": {
        "operationId": "AutoUpgradeProfileOperations_GenerateUpdateRun",
        "tags": [
          "AutoUpgradeProfileOperations"
        ],
        "description": "A long-running resource action.",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "autoUpgradeProfileName",
            "in": "path",
            "description": "The name of the AutoUpgradeProfile resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/GenerateResponse"
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "If-Match": {
                "type": "string",
                "description": "The request should only proceed if an entity matches this string."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/listCredentials": {
      "post": {
        "operationId": "Fleets_ListCredentials",
        "tags": [
          "Fleets"
        ],
        "description": "Lists the user credentials of a Fleet.",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/FleetCredentialResults"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/managedNamespaces": {
      "get": {
        "operationId": "FleetManagedNamespaces_ListByFleet",
        "tags": [
          "FleetManagedNamespaces"
        ],
        "description": "List FleetManagedNamespace resources by Fleet",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/FleetManagedNamespaceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/managedNamespaces/{managedNamespaceName}": {
      "get": {
        "operationId": "FleetManagedNamespaces_Get",
        "tags": [
          "FleetManagedNamespaces"
        ],
        "description": "Get a FleetManagedNamespace",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "managedNamespaceName",
            "in": "path",
            "description": "The name of the fleet managed namespace resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/FleetManagedNamespace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "FleetManagedNamespaces_CreateOrUpdate",
        "tags": [
          "FleetManagedNamespaces"
        ],
        "description": "Create a FleetManagedNamespace",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The request should only proceed if no entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "managedNamespaceName",
            "in": "path",
            "description": "The name of the fleet managed namespace resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FleetManagedNamespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'FleetManagedNamespace' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/FleetManagedNamespace"
            }
          },
          "201": {
            "description": "Resource 'FleetManagedNamespace' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/FleetManagedNamespace"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "FleetManagedNamespaces_Delete",
        "tags": [
          "FleetManagedNamespaces"
        ],
        "description": "Delete a FleetManagedNamespace",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "managedNamespaceName",
            "in": "path",
            "description": "The name of the fleet managed namespace resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/members": {
      "get": {
        "operationId": "FleetMembers_ListByFleet",
        "tags": [
          "FleetMembers"
        ],
        "description": "List FleetMember resources by Fleet",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/FleetMemberListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/members/{fleetMemberName}": {
      "get": {
        "operationId": "FleetMembers_Get",
        "tags": [
          "FleetMembers"
        ],
        "description": "Get a FleetMember",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "fleetMemberName",
            "in": "path",
            "description": "The name of the Fleet member resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/FleetMember"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "FleetMembers_Create",
        "tags": [
          "FleetMembers"
        ],
        "description": "Create a FleetMember",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The request should only proceed if no entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "fleetMemberName",
            "in": "path",
            "description": "The name of the Fleet member resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FleetMember"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'FleetMember' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/FleetMember"
            }
          },
          "201": {
            "description": "Resource 'FleetMember' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/FleetMember"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "FleetMembers_Update",
        "tags": [
          "FleetMembers"
        ],
        "description": "Update a FleetMember",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "fleetMemberName",
            "in": "path",
            "description": "The name of the Fleet member resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FleetMemberUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/FleetMember"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "original-uri"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "FleetMembers_Delete",
        "tags": [
          "FleetMembers"
        ],
        "description": "Delete a FleetMember",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "fleetMemberName",
            "in": "path",
            "description": "The name of the Fleet member resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateRuns": {
      "get": {
        "operationId": "UpdateRuns_ListByFleet",
        "tags": [
          "UpdateRuns"
        ],
        "description": "List UpdateRun resources by Fleet",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/UpdateRunListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateRuns/{updateRunName}": {
      "get": {
        "operationId": "UpdateRuns_Get",
        "tags": [
          "UpdateRuns"
        ],
        "description": "Get a UpdateRun",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "updateRunName",
            "in": "path",
            "description": "The name of the UpdateRun resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/UpdateRun"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "UpdateRuns_CreateOrUpdate",
        "tags": [
          "UpdateRuns"
        ],
        "description": "Create a UpdateRun",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The request should only proceed if no entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "updateRunName",
            "in": "path",
            "description": "The name of the UpdateRun resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRun"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'UpdateRun' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/UpdateRun"
            }
          },
          "201": {
            "description": "Resource 'UpdateRun' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/UpdateRun"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "UpdateRuns_Delete",
        "tags": [
          "UpdateRuns"
        ],
        "description": "Delete a UpdateRun",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "updateRunName",
            "in": "path",
            "description": "The name of the UpdateRun resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateRuns/{updateRunName}/skip": {
      "post": {
        "operationId": "UpdateRuns_Skip",
        "tags": [
          "UpdateRuns"
        ],
        "description": "Skips one or a combination of member/group/stage/afterStageWait(s) of an update run.",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "updateRunName",
            "in": "path",
            "description": "The name of the UpdateRun resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SkipProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/UpdateRun"
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateRuns/{updateRunName}/start": {
      "post": {
        "operationId": "UpdateRuns_Start",
        "tags": [
          "UpdateRuns"
        ],
        "description": "Starts an UpdateRun.",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "updateRunName",
            "in": "path",
            "description": "The name of the UpdateRun resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/UpdateRun"
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateRuns/{updateRunName}/stop": {
      "post": {
        "operationId": "UpdateRuns_Stop",
        "tags": [
          "UpdateRuns"
        ],
        "description": "Stops an UpdateRun.",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "updateRunName",
            "in": "path",
            "description": "The name of the UpdateRun resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/UpdateRun"
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateStrategies": {
      "get": {
        "operationId": "FleetUpdateStrategies_ListByFleet",
        "tags": [
          "FleetUpdateStrategies"
        ],
        "description": "List FleetUpdateStrategy resources by Fleet",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/FleetUpdateStrategyListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateStrategies/{updateStrategyName}": {
      "get": {
        "operationId": "FleetUpdateStrategies_Get",
        "tags": [
          "FleetUpdateStrategies"
        ],
        "description": "Get a FleetUpdateStrategy",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "updateStrategyName",
            "in": "path",
            "description": "The name of the UpdateStrategy resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/FleetUpdateStrategy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "FleetUpdateStrategies_CreateOrUpdate",
        "tags": [
          "FleetUpdateStrategies"
        ],
        "description": "Create a FleetUpdateStrategy",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The request should only proceed if no entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "updateStrategyName",
            "in": "path",
            "description": "The name of the UpdateStrategy resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FleetUpdateStrategy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'FleetUpdateStrategy' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/FleetUpdateStrategy"
            }
          },
          "201": {
            "description": "Resource 'FleetUpdateStrategy' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/FleetUpdateStrategy"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "FleetUpdateStrategies_Delete",
        "tags": [
          "FleetUpdateStrategies"
        ],
        "description": "Delete a FleetUpdateStrategy",
        "parameters": [
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The request should only proceed if an entity matches this string.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "fleetName",
            "in": "path",
            "description": "The name of the Fleet resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          },
          {
            "name": "updateStrategyName",
            "in": "path",
            "description": "The name of the UpdateStrategy resource.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "APIServerAccessProfile": {
      "type": "object",
      "description": "Access profile for the Fleet hub API server.",
      "properties": {
        "enablePrivateCluster": {
          "type": "boolean",
          "description": "Whether to create the Fleet hub as a private cluster or not.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "enableVnetIntegration": {
          "type": "boolean",
          "description": "Whether to enable apiserver vnet integration for the Fleet hub or not.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "subnetId": {
          "$ref": "#/definitions/SubnetResourceId",
          "description": "The subnet to be used when apiserver vnet integration is enabled. It is required when creating a new Fleet with BYO vnet.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      }
    },
    "AdoptionPolicy": {
      "type": "string",
      "description": "Action if the Namespace with the same name already exists.",
      "enum": [
        "Never",
        "IfIdentical",
        "Always"
      ],
      "x-ms-enum": {
        "name": "AdoptionPolicy",
        "modelAsString": true,
        "values": [
          {
            "name": "Never",
            "value": "Never",
            "description": "If the Namespace already exists, do not take over the existing Namespace to be managed by ARM."
          },
          {
            "name": "IfIdentical",
            "value": "IfIdentical",
            "description": "If there is an identical Namespace, take over the existing Namespace to be managed by ARM."
          },
          {
            "name": "Always",
            "value": "Always",
            "description": "Always take over the existing Namespace to be managed by ARM, even if it is not identical."
          }
        ]
      }
    },
    "AgentProfile": {
      "type": "object",
      "description": "Agent profile for the Fleet hub.",
      "properties": {
        "subnetId": {
          "$ref": "#/definitions/SubnetResourceId",
          "description": "The ID of the subnet which the Fleet hub node will join on startup. If this is not specified, a vnet and subnet will be generated and used.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "vmSize": {
          "type": "string",
          "description": "The virtual machine size of the Fleet hub.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      }
    },
    "AutoUpgradeLastTriggerStatus": {
      "type": "string",
      "description": "AutoUpgradeLastTriggerStatus is the status of the last AutoUpgrade trigger (attempt to automatically create and start UpdateRun when there are new released versions) of an auto upgrade profile.",
      "enum": [
        "Succeeded",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "AutoUpgradeLastTriggerStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The last AutoUpgrade trigger was succeeded."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The last AutoUpgrade trigger failed."
          }
        ]
      },
      "readOnly": true
    },
    "AutoUpgradeNodeImageSelection": {
      "type": "object",
      "description": "The node image upgrade to be applied to the target clusters in auto upgrade.",
      "properties": {
        "type": {
          "$ref": "#/definitions/AutoUpgradeNodeImageSelectionType",
          "description": "The node image upgrade type.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "AutoUpgradeNodeImageSelectionType": {
      "type": "string",
      "description": "The node image upgrade type.",
      "enum": [
        "Latest",
        "Consistent"
      ],
      "x-ms-enum": {
        "name": "AutoUpgradeNodeImageSelectionType",
        "modelAsString": true,
        "values": [
          {
            "name": "Latest",
            "value": "Latest",
            "description": "Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12' and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different regions."
          },
          {
            "name": "Consistent",
            "value": "Consistent",
            "description": "The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected by the update run, the system selects the latest image version such that it is available across all other node pools (in all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12' for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'."
          }
        ]
      }
    },
    "AutoUpgradeProfile": {
      "type": "object",
      "description": "The AutoUpgradeProfile resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/AutoUpgradeProfileProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        },
        "eTag": {
          "type": "string",
          "description": "If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "AutoUpgradeProfileId": {
      "type": "string",
      "format": "arm-id",
      "description": "A type definition that refers the id to an Azure Resource Manager resource.",
      "x-ms-arm-id-details": {
        "allowedResources": [
          {
            "type": "Microsoft.ContainerService/fleets/updateRuns"
          }
        ]
      }
    },
    "AutoUpgradeProfileListResult": {
      "type": "object",
      "description": "The response of a AutoUpgradeProfile list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The AutoUpgradeProfile items on this page",
          "items": {
            "$ref": "#/definitions/AutoUpgradeProfile"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "AutoUpgradeProfileProperties": {
      "type": "object",
      "description": "The properties of the AutoUpgradeProfile.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/AutoUpgradeProfileProvisioningState",
          "description": "The provisioning state of the AutoUpgradeProfile resource.",
          "readOnly": true
        },
        "updateStrategyId": {
          "$ref": "#/definitions/FleetUpdateStrategyResourceId",
          "description": "The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "channel": {
          "$ref": "#/definitions/UpgradeChannel",
          "description": "Configures how auto-upgrade will be run."
        },
        "nodeImageSelection": {
          "$ref": "#/definitions/AutoUpgradeNodeImageSelection",
          "description": "The node image upgrade to be applied to the target clusters in auto upgrade."
        },
        "disabled": {
          "type": "boolean",
          "description": "If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.\nIf set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.\nThis is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.\nBy default, this is set to False."
        },
        "autoUpgradeProfileStatus": {
          "$ref": "#/definitions/AutoUpgradeProfileStatus",
          "description": "The status of the auto upgrade profile."
        }
      },
      "required": [
        "channel"
      ]
    },
    "AutoUpgradeProfileProvisioningState": {
      "type": "string",
      "description": "The provisioning state of the AutoUpgradeProfile resource.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "AutoUpgradeProfileProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          }
        ]
      },
      "readOnly": true
    },
    "AutoUpgradeProfileStatus": {
      "type": "object",
      "description": "AutoUpgradeProfileStatus is the status of an auto upgrade profile.",
      "properties": {
        "lastTriggeredAt": {
          "type": "string",
          "format": "date-time",
          "description": "The UTC time of the last attempt to automatically create and start an UpdateRun as triggered by the release of new versions.",
          "readOnly": true
        },
        "lastTriggerStatus": {
          "$ref": "#/definitions/AutoUpgradeLastTriggerStatus",
          "description": "The status of the last AutoUpgrade trigger.",
          "readOnly": true
        },
        "lastTriggerError": {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorDetail",
          "description": "The error details of the last trigger.",
          "readOnly": true
        },
        "lastTriggerUpgradeVersions": {
          "type": "array",
          "description": "The target Kubernetes version or node image versions of the last trigger.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "ClusterResourceId": {
      "type": "string",
      "format": "arm-id",
      "description": "A type definition that refers the id to an Azure Resource Manager resource.",
      "x-ms-arm-id-details": {
        "allowedResources": [
          {
            "type": "Microsoft.ContainerService/managedClusters"
          }
        ]
      }
    },
    "Core.V1.TaintEffect": {
      "type": "string",
      "description": "TaintEffect defines the effects of Taint",
      "enum": [
        "NoSchedule"
      ],
      "x-ms-enum": {
        "name": "TaintEffect",
        "modelAsString": true,
        "values": [
          {
            "name": "NoSchedule",
            "value": "NoSchedule",
            "description": "Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler."
          }
        ]
      }
    },
    "Core.V1.TolerationOperator": {
      "type": "string",
      "description": "TolerationOperator is the set of operators that can be used in a toleration.",
      "enum": [
        "Exists",
        "Equal"
      ],
      "x-ms-enum": {
        "name": "TolerationOperator",
        "modelAsString": true,
        "values": [
          {
            "name": "Exists",
            "value": "Exists",
            "description": "TolerationOperator Exists"
          },
          {
            "name": "Equal",
            "value": "Equal",
            "description": "TolerationOperator Equal"
          }
        ]
      }
    },
    "DeletePolicy": {
      "type": "string",
      "description": "Delete options for the ARM managed namespace.",
      "enum": [
        "Keep",
        "Delete"
      ],
      "x-ms-enum": {
        "name": "DeletePolicy",
        "modelAsString": true,
        "values": [
          {
            "name": "Keep",
            "value": "Keep",
            "description": "Delete the ARM resource but keep the Namespace."
          },
          {
            "name": "Delete",
            "value": "Delete",
            "description": "Delete both ARM resource and Namespace."
          }
        ]
      }
    },
    "Fleet": {
      "type": "object",
      "description": "The Fleet resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/FleetProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        },
        "eTag": {
          "type": "string",
          "description": "If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.",
          "readOnly": true
        },
        "identity": {
          "$ref": "../../../../../../common-types/resource-management/v4/managedidentity.json#/definitions/ManagedServiceIdentity",
          "description": "Managed identity."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "FleetCredentialResult": {
      "type": "object",
      "description": "One credential result item.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the credential.",
          "readOnly": true
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Base64-encoded Kubernetes configuration file.",
          "readOnly": true
        }
      }
    },
    "FleetCredentialResults": {
      "type": "object",
      "description": "The Credential results response.",
      "properties": {
        "kubeconfigs": {
          "type": "array",
          "description": "Array of base64-encoded Kubernetes configuration files.",
          "items": {
            "$ref": "#/definitions/FleetCredentialResult"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "name"
          ]
        }
      }
    },
    "FleetHubProfile": {
      "type": "object",
      "description": "The FleetHubProfile configures the fleet hub.",
      "properties": {
        "dnsPrefix": {
          "type": "string",
          "description": "DNS prefix used to create the FQDN for the Fleet hub.",
          "minLength": 1,
          "maxLength": 54,
          "pattern": "^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-]{0,52}[a-zA-Z0-9]$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "apiServerAccessProfile": {
          "$ref": "#/definitions/APIServerAccessProfile",
          "description": "The access profile for the Fleet hub API server.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "agentProfile": {
          "$ref": "#/definitions/AgentProfile",
          "description": "The agent profile for the Fleet hub.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "fqdn": {
          "type": "string",
          "description": "The FQDN of the Fleet hub.",
          "readOnly": true
        },
        "kubernetesVersion": {
          "type": "string",
          "description": "The Kubernetes version of the Fleet hub.",
          "readOnly": true
        },
        "portalFqdn": {
          "type": "string",
          "description": "The Azure Portal FQDN of the Fleet hub.",
          "readOnly": true
        }
      }
    },
    "FleetListResult": {
      "type": "object",
      "description": "The response of a Fleet list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Fleet items on this page",
          "items": {
            "$ref": "#/definitions/Fleet"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "FleetManagedNamespace": {
      "type": "object",
      "description": "A fleet managed namespace.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/FleetManagedNamespaceProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        },
        "eTag": {
          "type": "string",
          "description": "If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.",
          "readOnly": true
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "FleetManagedNamespaceListResult": {
      "type": "object",
      "description": "The response of a FleetManagedNamespace list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The FleetManagedNamespace items on this page",
          "items": {
            "$ref": "#/definitions/FleetManagedNamespace"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "FleetManagedNamespaceProperties": {
      "type": "object",
      "description": "The properties of a fleet managed namespace.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/FleetManagedNamespaceProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "managedNamespaceProperties": {
          "$ref": "#/definitions/ManagedNamespaceProperties",
          "description": "The namespace properties for the fleet managed namespace."
        },
        "adoptionPolicy": {
          "$ref": "#/definitions/AdoptionPolicy",
          "description": "Action if the managed namespace with the same name already exists. Default is Never."
        },
        "deletePolicy": {
          "$ref": "#/definitions/DeletePolicy",
          "description": "Delete options of a fleet managed namespace. Default is Keep."
        },
        "propagationPolicy": {
          "$ref": "#/definitions/PropagationPolicy",
          "description": "The profile of the propagation to create the namespace."
        },
        "status": {
          "$ref": "#/definitions/FleetManagedNamespaceStatus",
          "description": "Status information of the last operation for fleet managed namespace.",
          "readOnly": true
        }
      },
      "required": [
        "adoptionPolicy",
        "deletePolicy"
      ]
    },
    "FleetManagedNamespaceProvisioningState": {
      "type": "string",
      "description": "The provisioning state of the fleet managed namespace resource",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Creating",
        "Updating",
        "Deleting"
      ],
      "x-ms-enum": {
        "name": "FleetManagedNamespaceProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          },
          {
            "name": "Creating",
            "value": "Creating",
            "description": "The provisioning state of a fleet managed namespace being created."
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "The provisioning state of a fleet managed namespace being updated."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "The provisioning state of a fleet managed namespace being deleted."
          }
        ]
      },
      "readOnly": true
    },
    "FleetManagedNamespaceStatus": {
      "type": "object",
      "description": "Status information for the fleet managed namespace.",
      "properties": {
        "lastOperationId": {
          "type": "string",
          "description": "The last operation ID for the fleet managed namespace",
          "readOnly": true
        },
        "lastOperationError": {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorDetail",
          "description": "The last operation error of the fleet managed namespace",
          "readOnly": true
        }
      }
    },
    "FleetMember": {
      "type": "object",
      "description": "A member of the Fleet. It contains a reference to an existing Kubernetes cluster on Azure.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/FleetMemberProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        },
        "eTag": {
          "type": "string",
          "description": "If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "FleetMemberListResult": {
      "type": "object",
      "description": "The response of a FleetMember list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The FleetMember items on this page",
          "items": {
            "$ref": "#/definitions/FleetMember"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "FleetMemberProperties": {
      "type": "object",
      "description": "A member of the Fleet. It contains a reference to an existing Kubernetes cluster on Azure.",
      "properties": {
        "clusterResourceId": {
          "$ref": "#/definitions/ClusterResourceId",
          "description": "The ARM resource id of the cluster that joins the Fleet. Must be a valid Azure resource id. e.g.: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "group": {
          "type": "string",
          "description": "The group this member belongs to for multi-cluster update management.",
          "minLength": 1,
          "maxLength": 50,
          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
        },
        "provisioningState": {
          "$ref": "#/definitions/FleetMemberProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/FleetMemberStatus",
          "description": "Status information of the last operation for fleet member.",
          "readOnly": true
        }
      },
      "required": [
        "clusterResourceId"
      ]
    },
    "FleetMemberProvisioningState": {
      "type": "string",
      "description": "The provisioning state of the last accepted operation.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Joining",
        "Leaving",
        "Updating"
      ],
      "x-ms-enum": {
        "name": "FleetMemberProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          },
          {
            "name": "Joining",
            "value": "Joining",
            "description": "The provisioning state of a member joining a fleet."
          },
          {
            "name": "Leaving",
            "value": "Leaving",
            "description": "The provisioning state of a member leaving a fleet."
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "The provisioning state of a member being updated."
          }
        ]
      },
      "readOnly": true
    },
    "FleetMemberStatus": {
      "type": "object",
      "description": "Status information for the fleet member",
      "properties": {
        "lastOperationId": {
          "type": "string",
          "description": "The last operation ID for the fleet member",
          "readOnly": true
        },
        "lastOperationError": {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorDetail",
          "description": "The last operation error of the fleet member",
          "readOnly": true
        }
      }
    },
    "FleetMemberUpdate": {
      "type": "object",
      "description": "The type used for update operations of the FleetMember.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/FleetMemberUpdateProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        }
      }
    },
    "FleetMemberUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the FleetMember.",
      "properties": {
        "group": {
          "type": "string",
          "description": "The group this member belongs to for multi-cluster update management.",
          "minLength": 1,
          "maxLength": 50,
          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
        }
      }
    },
    "FleetPatch": {
      "type": "object",
      "description": "Properties of a Fleet that can be patched.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "identity": {
          "$ref": "../../../../../../common-types/resource-management/v4/managedidentity.json#/definitions/ManagedServiceIdentity",
          "description": "Managed identity."
        }
      }
    },
    "FleetProperties": {
      "type": "object",
      "description": "Fleet properties.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/FleetProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "hubProfile": {
          "$ref": "#/definitions/FleetHubProfile",
          "description": "The FleetHubProfile configures the Fleet's hub."
        },
        "status": {
          "$ref": "#/definitions/FleetStatus",
          "description": "Status information for the fleet.",
          "readOnly": true
        }
      }
    },
    "FleetProvisioningState": {
      "type": "string",
      "description": "The provisioning state of the last accepted operation.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Creating",
        "Updating",
        "Deleting"
      ],
      "x-ms-enum": {
        "name": "FleetProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          },
          {
            "name": "Creating",
            "value": "Creating",
            "description": "The provisioning state of a fleet being created."
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "The provisioning state of a fleet being updated."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "The provisioning state of a fleet being deleted."
          }
        ]
      },
      "readOnly": true
    },
    "FleetStatus": {
      "type": "object",
      "description": "Status information for the fleet.",
      "properties": {
        "lastOperationId": {
          "type": "string",
          "description": "The last operation ID for the fleet.",
          "readOnly": true
        },
        "lastOperationError": {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorDetail",
          "description": "The last operation error for the fleet.",
          "readOnly": true
        }
      }
    },
    "FleetUpdateStrategy": {
      "type": "object",
      "description": "Defines a multi-stage process to perform update operations across members of a Fleet.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/FleetUpdateStrategyProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        },
        "eTag": {
          "type": "string",
          "description": "If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "FleetUpdateStrategyListResult": {
      "type": "object",
      "description": "The response of a FleetUpdateStrategy list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The FleetUpdateStrategy items on this page",
          "items": {
            "$ref": "#/definitions/FleetUpdateStrategy"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "FleetUpdateStrategyProperties": {
      "type": "object",
      "description": "The properties of the UpdateStrategy.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/FleetUpdateStrategyProvisioningState",
          "description": "The provisioning state of the UpdateStrategy resource.",
          "readOnly": true
        },
        "strategy": {
          "$ref": "#/definitions/UpdateRunStrategy",
          "description": "Defines the update sequence of the clusters.",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        }
      },
      "required": [
        "strategy"
      ]
    },
    "FleetUpdateStrategyProvisioningState": {
      "type": "string",
      "description": "The provisioning state of the UpdateStrategy resource.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "FleetUpdateStrategyProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          }
        ]
      },
      "readOnly": true
    },
    "FleetUpdateStrategyResourceId": {
      "type": "string",
      "format": "arm-id",
      "description": "A type definition that refers the id to an Azure Resource Manager resource.",
      "x-ms-arm-id-details": {
        "allowedResources": [
          {
            "type": "Microsoft.ContainerService/fleets/updateStrategies"
          }
        ]
      }
    },
    "GenerateResponse": {
      "type": "object",
      "description": "GenerateResponse is the response of a generate request.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ARM resource id of the generated UpdateRun. Must be a valid Azure resource id. e.g.: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateRuns/{updateRunName}'.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "id"
      ]
    },
    "KubernetesVersion": {
      "type": "string"
    },
    "ManagedClusterUpdate": {
      "type": "object",
      "description": "The update to be applied to the ManagedClusters.",
      "properties": {
        "upgrade": {
          "$ref": "#/definitions/ManagedClusterUpgradeSpec",
          "description": "The upgrade to apply to the ManagedClusters."
        },
        "nodeImageSelection": {
          "$ref": "#/definitions/NodeImageSelection",
          "description": "The node image upgrade to be applied to the target nodes in update run.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "upgrade"
      ]
    },
    "ManagedClusterUpgradeSpec": {
      "type": "object",
      "description": "The upgrade to apply to a ManagedCluster.",
      "properties": {
        "type": {
          "$ref": "#/definitions/ManagedClusterUpgradeType",
          "description": "ManagedClusterUpgradeType is the type of upgrade to be applied."
        },
        "kubernetesVersion": {
          "$ref": "#/definitions/KubernetesVersion",
          "description": "The Kubernetes version to upgrade the member clusters to."
        }
      },
      "required": [
        "type"
      ]
    },
    "ManagedClusterUpgradeType": {
      "type": "string",
      "description": "The type of upgrade to perform when targeting ManagedClusters.",
      "enum": [
        "Full",
        "NodeImageOnly",
        "ControlPlaneOnly"
      ],
      "x-ms-enum": {
        "name": "ManagedClusterUpgradeType",
        "modelAsString": true,
        "values": [
          {
            "name": "Full",
            "value": "Full",
            "description": "Full upgrades the control plane and all agent pools of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to be set."
          },
          {
            "name": "NodeImageOnly",
            "value": "NodeImageOnly",
            "description": "NodeImageOnly upgrades only the node images of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to NOT be set."
          },
          {
            "name": "ControlPlaneOnly",
            "value": "ControlPlaneOnly",
            "description": "ControlPlaneOnly upgrades only targets the KubernetesVersion of the ManagedClusters and will not be applied to the AgentPool. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to be set."
          }
        ]
      }
    },
    "ManagedNamespaceProperties": {
      "type": "object",
      "description": "The namespace properties for the fleet managed namespace.",
      "properties": {
        "labels": {
          "type": "object",
          "description": "The labels for the fleet managed namespace.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "type": "object",
          "description": "The annotations for the fleet managed namespace.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "defaultResourceQuota": {
          "$ref": "#/definitions/ResourceQuota",
          "description": "The default resource quota for the fleet managed namespace."
        },
        "defaultNetworkPolicy": {
          "$ref": "#/definitions/NetworkPolicy",
          "description": "The default network policy for the fleet managed namespace."
        }
      }
    },
    "MemberUpdateStatus": {
      "type": "object",
      "description": "The status of a member update operation.",
      "properties": {
        "status": {
          "$ref": "#/definitions/UpdateStatus",
          "description": "The status of the MemberUpdate operation.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the FleetMember.",
          "readOnly": true
        },
        "clusterResourceId": {
          "type": "string",
          "description": "The Azure resource id of the target Kubernetes cluster.",
          "readOnly": true
        },
        "operationId": {
          "type": "string",
          "description": "The operation resource id of the latest attempt to perform the operation.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "The status message after processing the member update operation.",
          "readOnly": true
        }
      }
    },
    "Meta.V1.LabelSelector": {
      "type": "object",
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchLabels": {
          "type": "object",
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "matchExpressions": {
          "type": "array",
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/Meta.V1.LabelSelectorRequirement"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "Meta.V1.LabelSelectorOperator": {
      "type": "string",
      "description": "A label selector operator is the set of operators that can be used in a selector requirement.",
      "enum": [
        "In",
        "NotIn",
        "Exists",
        "DoesNotExist"
      ],
      "x-ms-enum": {
        "name": "LabelSelectorOperator",
        "modelAsString": true,
        "values": [
          {
            "name": "In",
            "value": "In",
            "description": "LabelSelectorOperator In"
          },
          {
            "name": "NotIn",
            "value": "NotIn",
            "description": "LabelSelectorOperator NotIn"
          },
          {
            "name": "Exists",
            "value": "Exists",
            "description": "LabelSelectorOperator Exists"
          },
          {
            "name": "DoesNotExist",
            "value": "DoesNotExist",
            "description": "LabelSelectorOperator DoesNotExist"
          }
        ]
      }
    },
    "Meta.V1.LabelSelectorRequirement": {
      "type": "object",
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the label key that the selector applies to."
        },
        "operator": {
          "$ref": "#/definitions/Meta.V1.LabelSelectorOperator",
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
        },
        "values": {
          "type": "array",
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "key",
        "operator"
      ]
    },
    "NetworkPolicy": {
      "type": "object",
      "description": "The network policy for the managed namespace.",
      "properties": {
        "ingress": {
          "$ref": "#/definitions/PolicyRule",
          "description": "The ingress policy for the managed namespace."
        },
        "egress": {
          "$ref": "#/definitions/PolicyRule",
          "description": "The egress policy for the managed namespace."
        }
      }
    },
    "NodeImageSelection": {
      "type": "object",
      "description": "The node image upgrade to be applied to the target nodes in update run.",
      "properties": {
        "type": {
          "$ref": "#/definitions/NodeImageSelectionType",
          "description": "The node image upgrade type.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "customNodeImageVersions": {
          "type": "array",
          "description": "Custom node image versions to upgrade the nodes to. This field is required if node image selection type is Custom. Otherwise, it must be empty. For each node image family (e.g., 'AKSUbuntu-1804gen2containerd'), this field can contain at most one version (e.g., only one of 'AKSUbuntu-1804gen2containerd-2023.01.12' or 'AKSUbuntu-1804gen2containerd-2023.02.12', not both). If the nodes belong to a family without a matching image version in this field, they are not upgraded.",
          "items": {
            "$ref": "#/definitions/NodeImageVersion"
          },
          "x-ms-identifiers": [
            "version"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "NodeImageSelectionStatus": {
      "type": "object",
      "description": "The node image upgrade specs for the update run.",
      "properties": {
        "selectedNodeImageVersions": {
          "type": "array",
          "description": "The image versions to upgrade the nodes to.",
          "items": {
            "$ref": "#/definitions/NodeImageVersion"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "version"
          ]
        }
      }
    },
    "NodeImageSelectionType": {
      "type": "string",
      "description": "The node image upgrade type.",
      "enum": [
        "Latest",
        "Consistent",
        "Custom"
      ],
      "x-ms-enum": {
        "name": "NodeImageSelectionType",
        "modelAsString": true,
        "values": [
          {
            "name": "Latest",
            "value": "Latest",
            "description": "Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12' and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different regions."
          },
          {
            "name": "Consistent",
            "value": "Consistent",
            "description": "The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected by the update run, the system selects the latest image version such that it is available across all other node pools (in all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12' for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'."
          },
          {
            "name": "Custom",
            "value": "Custom",
            "description": "Upgrade the nodes to the custom image versions. When set, update run will use node image versions provided in customNodeImageVersions to upgrade the nodes. If set, customNodeImageVersions must not be empty."
          }
        ]
      }
    },
    "NodeImageVersion": {
      "type": "object",
      "description": "The node upgrade image version.",
      "properties": {
        "version": {
          "type": "string",
          "description": "The image version to upgrade the nodes to (e.g., 'AKSUbuntu-1804gen2containerd-2022.12.13').",
          "readOnly": true
        }
      }
    },
    "Placement.V1.Affinity": {
      "type": "object",
      "description": "Affinity is a group of cluster affinity scheduling rules.",
      "properties": {
        "clusterAffinity": {
          "$ref": "#/definitions/Placement.V1.ClusterAffinity",
          "description": "ClusterAffinity contains cluster affinity scheduling rules for the selected resources."
        }
      }
    },
    "Placement.V1.ClusterAffinity": {
      "type": "object",
      "description": "ClusterAffinity contains cluster affinity scheduling rules for the selected resources.",
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/Placement.V1.ClusterSelector",
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the resource will not be scheduled onto the cluster. If the affinity requirements specified by this field cease to be met at some point after the placement (e.g. due to an update), the system may or may not try to eventually remove the resource from the cluster."
        }
      }
    },
    "Placement.V1.ClusterResourcePlacementSpec": {
      "type": "object",
      "description": "ClusterResourcePlacementSpec defines the desired state of ClusterResourcePlacement.",
      "properties": {
        "policy": {
          "$ref": "#/definitions/Placement.V1.PlacementPolicy",
          "description": "Policy defines how to select member clusters to place the selected resources. If unspecified, all the joined member clusters are selected."
        }
      }
    },
    "Placement.V1.ClusterSelector": {
      "type": "object",
      "description": "ClusterSelector.",
      "properties": {
        "clusterSelectorTerms": {
          "type": "array",
          "description": "ClusterSelectorTerms is a list of cluster selector terms. The terms are `ORed`.",
          "items": {
            "$ref": "#/definitions/Placement.V1.ClusterSelectorTerm"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "clusterSelectorTerms"
      ]
    },
    "Placement.V1.ClusterSelectorTerm": {
      "type": "object",
      "description": "ClusterSelectorTerm",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/Meta.V1.LabelSelector",
          "description": "LabelSelector is a label query over all the joined member clusters. Clusters matching the query are selected. If you specify both label and property selectors in the same term, the results are AND'd."
        },
        "propertySelector": {
          "$ref": "#/definitions/Placement.V1.PropertySelector",
          "description": "PropertySelector is a property query over all joined member clusters. Clusters matching the query are selected. If you specify both label and property selectors in the same term, the results are AND'd. At this moment, PropertySelector can only be used with `RequiredDuringSchedulingIgnoredDuringExecution` affinity terms. This field is beta-level; it is for the property-based scheduling feature and is only functional when a property provider is enabled in the deployment."
        }
      }
    },
    "Placement.V1.PlacementPolicy": {
      "type": "object",
      "description": "PlacementPolicy contains the rules to select target member clusters to place the selected resources. Note that only clusters that are both joined and satisfying the rules will be selected. You can only specify at most one of the two fields: ClusterNames and Affinity. If none is specified, all the joined clusters are selected.",
      "properties": {
        "placementType": {
          "$ref": "#/definitions/Placement.V1.PlacementType",
          "description": "Type of placement. Can be \"PickAll\", \"PickN\" or \"PickFixed\". Default is PickAll."
        },
        "clusterNames": {
          "type": "array",
          "description": "ClusterNames contains a list of names of MemberCluster to place the selected resources. Only valid if the placement type is PickFixed.",
          "items": {
            "type": "string"
          }
        },
        "affinity": {
          "$ref": "#/definitions/Placement.V1.Affinity",
          "description": "Affinity contains cluster affinity scheduling rules. Defines which member clusters to place the selected resources. Only valid if the placement type is PickAll."
        },
        "tolerations": {
          "type": "array",
          "description": "If specified, the ClusterResourcePlacement's Tolerations. Tolerations cannot be updated or deleted. This field is beta-level and is for the taints and tolerations feature.",
          "items": {
            "$ref": "#/definitions/Placement.V1.Toleration"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "Placement.V1.PlacementType": {
      "type": "string",
      "description": "PlacementType identifies the type of placement.",
      "enum": [
        "PickAll",
        "PickFixed"
      ],
      "x-ms-enum": {
        "name": "PlacementType",
        "modelAsString": true,
        "values": [
          {
            "name": "PickAll",
            "value": "PickAll",
            "description": "PickAll picks all clusters that satisfy the rules"
          },
          {
            "name": "PickFixed",
            "value": "PickFixed",
            "description": "PickFixed picks a fixed set of clusters."
          }
        ]
      }
    },
    "Placement.V1.PropertySelector": {
      "type": "object",
      "description": "PropertySelector helps user specify property requirements when picking clusters for resource placement.",
      "properties": {
        "matchExpressions": {
          "type": "array",
          "description": "MatchExpressions is an array of PropertySelectorRequirements. The requirements are AND'd.",
          "items": {
            "$ref": "#/definitions/Placement.V1.PropertySelectorRequirement"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "matchExpressions"
      ]
    },
    "Placement.V1.PropertySelectorOperator": {
      "type": "string",
      "description": "PropertySelectorOperator is the operator that can be used with PropertySelectorRequirements.",
      "enum": [
        "Gt",
        "Ge",
        "Eq",
        "Ne",
        "Lt",
        "Le"
      ],
      "x-ms-enum": {
        "name": "PropertySelectorOperator",
        "modelAsString": true,
        "values": [
          {
            "name": "Gt",
            "value": "Gt",
            "description": "GreaterThan dictates Fleet to select cluster if its observed value of a given property is greater than the value specified in the requirement."
          },
          {
            "name": "Ge",
            "value": "Ge",
            "description": "GreaterThanOrEqualTo dictates Fleet to select cluster if its observed value of a given property is greater than or equal to the value specified in the requirement."
          },
          {
            "name": "Eq",
            "value": "Eq",
            "description": "EqualTo dictates Fleet to select cluster if its observed value of a given property is equal to the values specified in the requirement."
          },
          {
            "name": "Ne",
            "value": "Ne",
            "description": "NotEqualTo dictates Fleet to select cluster if its observed value of a given property is not equal to the values specified in the requirement."
          },
          {
            "name": "Lt",
            "value": "Lt",
            "description": "LessThan dictates Fleet to select cluster if its observed value of a given property is less than the value specified in the requirement."
          },
          {
            "name": "Le",
            "value": "Le",
            "description": "LessThanOrEqualTo dictates Fleet to select cluster if its observed value of a given property is less than or equal to the value specified in the requirement."
          }
        ]
      }
    },
    "Placement.V1.PropertySelectorRequirement": {
      "type": "object",
      "description": "PropertySelectorRequirement is a specific property requirement when picking clusters for resource placement.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name is the name of the property; it should be a Kubernetes label name."
        },
        "operator": {
          "$ref": "#/definitions/Placement.V1.PropertySelectorOperator",
          "description": "Operator specifies the relationship between a cluster's observed value of the specified property and the values given in the requirement."
        },
        "values": {
          "type": "array",
          "description": "Values are a list of values of the specified property which Fleet will compare against the observed values of individual member clusters in accordance with the given operator. At this moment, each value should be a Kubernetes quantity. For more information, see https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity. If the operator is Gt (greater than), Ge (greater than or equal to), Lt (less than), or `Le` (less than or equal to), Eq (equal to), or Ne (ne), exactly one value must be specified in the list.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "name",
        "operator",
        "values"
      ]
    },
    "Placement.V1.Toleration": {
      "type": "object",
      "description": "Toleration allows ClusterResourcePlacement to tolerate any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
        },
        "operator": {
          "$ref": "#/definitions/Core.V1.TolerationOperator",
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a ClusterResourcePlacement can tolerate all taints of a particular category."
        },
        "value": {
          "type": "string",
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
        },
        "effect": {
          "$ref": "#/definitions/Core.V1.TaintEffect",
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, only allowed value is NoSchedule."
        }
      }
    },
    "PlacementProfile": {
      "type": "object",
      "description": "The configuration profile for default ClusterResourcePlacement for placement.",
      "properties": {
        "defaultClusterResourcePlacement": {
          "$ref": "#/definitions/Placement.V1.ClusterResourcePlacementSpec",
          "description": "The default ClusterResourcePlacement policy configuration."
        }
      }
    },
    "PolicyRule": {
      "type": "string",
      "description": "The possible values representing different network policy rules.",
      "enum": [
        "AllowAll",
        "DenyAll",
        "AllowSameNamespace"
      ],
      "x-ms-enum": {
        "name": "PolicyRule",
        "modelAsString": true,
        "values": [
          {
            "name": "AllowAll",
            "value": "AllowAll",
            "description": "Allow all network traffic."
          },
          {
            "name": "DenyAll",
            "value": "DenyAll",
            "description": "Deny all network traffic."
          },
          {
            "name": "AllowSameNamespace",
            "value": "AllowSameNamespace",
            "description": "Allow traffic within the same namespace."
          }
        ]
      }
    },
    "PropagationPolicy": {
      "type": "object",
      "description": "The propagation to be used for provisioning the namespace among the fleet.",
      "properties": {
        "type": {
          "$ref": "#/definitions/PropagationType",
          "description": "The type of the policy to be used. Default is Placement."
        },
        "propagationProfile": {
          "$ref": "#/definitions/PlacementProfile",
          "description": "The propagation profile to be used for the propagation. Default is PlacementProfile."
        }
      },
      "required": [
        "type"
      ]
    },
    "PropagationType": {
      "type": "string",
      "description": "How the namespace will be provisioned among the fleet members.",
      "enum": [
        "Placement"
      ],
      "x-ms-enum": {
        "name": "PropagationType",
        "modelAsString": true,
        "values": [
          {
            "name": "Placement",
            "value": "Placement",
            "description": "Using ClusterResourcePlacement."
          }
        ]
      }
    },
    "ResourceQuota": {
      "type": "object",
      "description": "The resource quota for the managed namespace.",
      "properties": {
        "cpuRequest": {
          "type": "string",
          "description": "The CPU request for the managed namespace."
        },
        "cpuLimit": {
          "type": "string",
          "description": "The CPU limit for the managed namespace."
        },
        "memoryRequest": {
          "type": "string",
          "description": "The memory request for the managed namespace."
        },
        "memoryLimit": {
          "type": "string",
          "description": "The memory limit for the managed namespace."
        }
      }
    },
    "SkipProperties": {
      "type": "object",
      "description": "The properties of a skip operation containing multiple skip requests.",
      "properties": {
        "targets": {
          "type": "array",
          "description": "The targets to skip.",
          "items": {
            "$ref": "#/definitions/SkipTarget"
          },
          "x-ms-identifiers": [
            "type",
            "name"
          ]
        }
      },
      "required": [
        "targets"
      ]
    },
    "SkipTarget": {
      "type": "object",
      "description": "The definition of a single skip request.",
      "properties": {
        "type": {
          "$ref": "#/definitions/TargetType",
          "description": "The skip target type."
        },
        "name": {
          "type": "string",
          "description": "The skip target's name. \nTo skip a member/group/stage, use the member/group/stage's name;\nTp skip an after stage wait, use the parent stage's name."
        }
      },
      "required": [
        "type",
        "name"
      ]
    },
    "SubnetResourceId": {
      "type": "string",
      "format": "arm-id",
      "description": "A type definition that refers the id to an Azure Resource Manager resource.",
      "x-ms-arm-id-details": {
        "allowedResources": [
          {
            "type": "Microsoft.Network/virtualNetworks/subnets"
          }
        ]
      }
    },
    "TargetType": {
      "type": "string",
      "description": "The target type of a skip request.",
      "enum": [
        "Member",
        "Group",
        "Stage",
        "AfterStageWait"
      ],
      "x-ms-enum": {
        "name": "TargetType",
        "modelAsString": true,
        "values": [
          {
            "name": "Member",
            "value": "Member",
            "description": "Skip the update of a member."
          },
          {
            "name": "Group",
            "value": "Group",
            "description": "Skip the update of a group."
          },
          {
            "name": "Stage",
            "value": "Stage",
            "description": "Skip the update of an entire stage including the after stage wait."
          },
          {
            "name": "AfterStageWait",
            "value": "AfterStageWait",
            "description": "Skip the update of the after stage wait of a certain stage."
          }
        ]
      }
    },
    "UpdateGroup": {
      "type": "object",
      "description": "A group to be updated.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the group.\nIt must match a group name of an existing fleet member. ",
          "minLength": 1,
          "maxLength": 50,
          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
        }
      },
      "required": [
        "name"
      ]
    },
    "UpdateGroupStatus": {
      "type": "object",
      "description": "The status of a UpdateGroup.",
      "properties": {
        "status": {
          "$ref": "#/definitions/UpdateStatus",
          "description": "The status of the UpdateGroup.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the UpdateGroup.",
          "readOnly": true
        },
        "members": {
          "type": "array",
          "description": "The list of member this UpdateGroup updates.",
          "items": {
            "$ref": "#/definitions/MemberUpdateStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "name"
          ]
        }
      }
    },
    "UpdateRun": {
      "type": "object",
      "description": "A multi-stage process to perform update operations across members of a Fleet.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/UpdateRunProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        },
        "eTag": {
          "type": "string",
          "description": "If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "UpdateRunListResult": {
      "type": "object",
      "description": "The response of a UpdateRun list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The UpdateRun items on this page",
          "items": {
            "$ref": "#/definitions/UpdateRun"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "UpdateRunProperties": {
      "type": "object",
      "description": "The properties of the UpdateRun.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/UpdateRunProvisioningState",
          "description": "The provisioning state of the UpdateRun resource.",
          "readOnly": true
        },
        "updateStrategyId": {
          "$ref": "#/definitions/FleetUpdateStrategyResourceId",
          "description": "The resource id of the FleetUpdateStrategy resource to reference.\n\nWhen creating a new run, there are three ways to define a strategy for the run:\n1. Define a new strategy in place: Set the \"strategy\" field.\n2. Use an existing strategy: Set the \"updateStrategyId\" field. (since 2023-08-15-preview)\n3. Use the default strategy to update all the members one by one: Leave both \"updateStrategyId\" and \"strategy\" unset. (since 2023-08-15-preview)\n\nSetting both \"updateStrategyId\" and \"strategy\" is invalid.\n\nUpdateRuns created by \"updateStrategyId\" snapshot the referenced UpdateStrategy at the time of creation and store it in the \"strategy\" field. \nSubsequent changes to the referenced FleetUpdateStrategy resource do not propagate.\nUpdateRunStrategy changes can be made directly on the \"strategy\" field before launching the UpdateRun."
        },
        "strategy": {
          "$ref": "#/definitions/UpdateRunStrategy",
          "description": "The strategy defines the order in which the clusters will be updated.\nIf not set, all members will be updated sequentially. The UpdateRun status will show a single UpdateStage and a single UpdateGroup targeting all members.\nThe strategy of the UpdateRun can be modified until the run is started."
        },
        "managedClusterUpdate": {
          "$ref": "#/definitions/ManagedClusterUpdate",
          "description": "The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be modified until the run is started."
        },
        "status": {
          "$ref": "#/definitions/UpdateRunStatus",
          "description": "The status of the UpdateRun.",
          "readOnly": true
        },
        "autoUpgradeProfileId": {
          "$ref": "#/definitions/AutoUpgradeProfileId",
          "description": "AutoUpgradeProfileId is the id of an auto upgrade profile resource.",
          "readOnly": true
        }
      },
      "required": [
        "managedClusterUpdate"
      ]
    },
    "UpdateRunProvisioningState": {
      "type": "string",
      "description": "The provisioning state of the UpdateRun resource.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "UpdateRunProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          }
        ]
      },
      "readOnly": true
    },
    "UpdateRunStatus": {
      "type": "object",
      "description": "The status of a UpdateRun.",
      "properties": {
        "status": {
          "$ref": "#/definitions/UpdateStatus",
          "description": "The status of the UpdateRun.",
          "readOnly": true
        },
        "stages": {
          "type": "array",
          "description": "The stages composing an update run. Stages are run sequentially withing an UpdateRun.",
          "items": {
            "$ref": "#/definitions/UpdateStageStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "name"
          ]
        },
        "nodeImageSelection": {
          "$ref": "#/definitions/NodeImageSelectionStatus",
          "description": "The node image upgrade specs for the update run. It is only set in update run when `NodeImageSelection.type` is `Consistent`.",
          "readOnly": true
        }
      }
    },
    "UpdateRunStrategy": {
      "type": "object",
      "description": "Defines the update sequence of the clusters via stages and groups.\n\nStages within a run are executed sequentially one after another.\nGroups within a stage are executed in parallel.\nMember clusters within a group are updated sequentially one after another.\n\nA valid strategy contains no duplicate groups within or across stages.",
      "properties": {
        "stages": {
          "type": "array",
          "description": "The list of stages that compose this update run. Min size: 1.",
          "items": {
            "$ref": "#/definitions/UpdateStage"
          },
          "x-ms-identifiers": [
            "name"
          ]
        }
      },
      "required": [
        "stages"
      ]
    },
    "UpdateStage": {
      "type": "object",
      "description": "Defines a stage which contains the groups to update and the steps to take (e.g., wait for a time period) before starting the next stage.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the stage. Must be unique within the UpdateRun.",
          "minLength": 1,
          "maxLength": 50,
          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
        },
        "groups": {
          "type": "array",
          "description": "Defines the groups to be executed in parallel in this stage. Duplicate groups are not allowed. Min size: 1.",
          "items": {
            "$ref": "#/definitions/UpdateGroup"
          },
          "x-ms-identifiers": [
            "name"
          ]
        },
        "afterStageWaitInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified."
        }
      },
      "required": [
        "name"
      ]
    },
    "UpdateStageStatus": {
      "type": "object",
      "description": "The status of a UpdateStage.",
      "properties": {
        "status": {
          "$ref": "#/definitions/UpdateStatus",
          "description": "The status of the UpdateStage.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the UpdateStage.",
          "readOnly": true
        },
        "groups": {
          "type": "array",
          "description": "The list of groups to be updated as part of this UpdateStage.",
          "items": {
            "$ref": "#/definitions/UpdateGroupStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "name"
          ]
        },
        "afterStageWaitStatus": {
          "$ref": "#/definitions/WaitStatus",
          "description": "The status of the wait period configured on the UpdateStage.",
          "readOnly": true
        }
      }
    },
    "UpdateState": {
      "type": "string",
      "description": "The state of the UpdateRun, UpdateStage, UpdateGroup, or MemberUpdate.",
      "enum": [
        "NotStarted",
        "Running",
        "Stopping",
        "Stopped",
        "Skipped",
        "Failed",
        "Completed"
      ],
      "x-ms-enum": {
        "name": "UpdateState",
        "modelAsString": true,
        "values": [
          {
            "name": "NotStarted",
            "value": "NotStarted",
            "description": "The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has not been started."
          },
          {
            "name": "Running",
            "value": "Running",
            "description": "The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that is running."
          },
          {
            "name": "Stopping",
            "value": "Stopping",
            "description": "The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that is being stopped."
          },
          {
            "name": "Stopped",
            "value": "Stopped",
            "description": "The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has stopped."
          },
          {
            "name": "Skipped",
            "value": "Skipped",
            "description": "The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has been skipped."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has failed."
          },
          {
            "name": "Completed",
            "value": "Completed",
            "description": "The state of an UpdateRun/UpdateStage/UpdateGroup/MemberUpdate that has completed."
          }
        ]
      }
    },
    "UpdateStatus": {
      "type": "object",
      "description": "The status for an operation or group of operations.",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the operation or group was started.",
          "readOnly": true
        },
        "completedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the operation or group was completed.",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/UpdateState",
          "description": "The State of the operation or group.",
          "readOnly": true
        },
        "error": {
          "$ref": "../../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorDetail",
          "description": "The error details when a failure is encountered.",
          "readOnly": true
        }
      }
    },
    "UpgradeChannel": {
      "type": "string",
      "description": "Configuration of how auto upgrade will be run.",
      "enum": [
        "Stable",
        "Rapid",
        "NodeImage"
      ],
      "x-ms-enum": {
        "name": "UpgradeChannel",
        "modelAsString": true,
        "values": [
          {
            "name": "Stable",
            "value": "Stable",
            "description": " Upgrades the clusters kubernetes version to the latest supported patch release on minor version N-1, where N is the latest supported minor version.\n For example, if a cluster runs version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, the cluster upgrades to 1.18.6."
          },
          {
            "name": "Rapid",
            "value": "Rapid",
            "description": "Upgrades the clusters kubernetes version to the latest supported patch release on the latest supported minor version."
          },
          {
            "name": "NodeImage",
            "value": "NodeImage",
            "description": "Upgrade node image version of the clusters."
          }
        ]
      }
    },
    "WaitStatus": {
      "type": "object",
      "description": "The status of the wait duration.",
      "properties": {
        "status": {
          "$ref": "#/definitions/UpdateStatus",
          "description": "The status of the wait duration.",
          "readOnly": true
        },
        "waitDurationInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The wait duration configured in seconds.",
          "readOnly": true
        }
      }
    }
  },
  "parameters": {}
}
