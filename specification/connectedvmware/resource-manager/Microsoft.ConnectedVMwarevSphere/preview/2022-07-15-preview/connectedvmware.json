{
  "swagger": "2.0",
  "info": {
    "title": "Azure Arc VMware Management Service API",
    "description": "Self service experience for VMware.",
    "version": "2022-07-15-preview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/providers/Microsoft.ConnectedVMwarevSphere/operations": {
      "get": {
        "description": "Returns list of all operations.",
        "operationId": "Operations_List",
        "x-ms-examples": {
          "ListOperations": {
            "$ref": "./examples/ListOperations.json"
          }
        },
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation details.",
            "schema": {
              "$ref": "#/definitions/operationsList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "deprecated": false,
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/assessPatches": {
      "post": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_AssessPatches",
        "x-ms-examples": {
          "Assess patch state of a machine.": {
            "$ref": "./examples/VirtualMachineAssessPatches.json"
          }
        },
        "description": "The operation to assess patches on a vSphere VMware machine identity in Azure.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "name": "virtualMachineName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the vSphere VMware machine."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualMachineAssessPatchesResult"
            }
          },
          "202": {
            "description": "HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/installPatches": {
      "post": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_InstallPatches",
        "description": "The operation to install patches on a vSphere VMware machine identity in Azure.",
        "x-ms-examples": {
          "Install patch state of a machine.": {
            "$ref": "./examples/VirtualMachineInstallPatches.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "name": "virtualMachineName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the vSphere VMware machine."
          },
          {
            "name": "installPatchesInput",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualMachineInstallPatchesParameters"
            },
            "description": "Input for InstallPatches as directly received by the API"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirtualMachineInstallPatchesResult"
            }
          },
          "202": {
            "description": "HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools/{resourcePoolName}": {
      "put": {
        "tags": [
          "ResourcePools"
        ],
        "operationId": "ResourcePools_Create",
        "description": "Create Or Update resourcePool.",
        "summary": "Implements resourcePool PUT method.",
        "x-ms-examples": {
          "CreateResourcePool": {
            "$ref": "./examples/CreateResourcePool.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "resourcePoolName",
            "required": true,
            "type": "string",
            "description": "Name of the resourcePool."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/ResourcePool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourcePool"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResourcePool"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "get": {
        "tags": [
          "ResourcePools"
        ],
        "operationId": "ResourcePools_Get",
        "summary": "Gets a resourcePool.",
        "description": "Implements resourcePool GET method.",
        "x-ms-examples": {
          "GetResourcePool": {
            "$ref": "./examples/GetResourcePool.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "resourcePoolName",
            "description": "Name of the resourcePool.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourcePool"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ResourcePools"
        ],
        "operationId": "ResourcePools_Update",
        "summary": "Updates a resourcePool.",
        "description": "API to update certain properties of the resourcePool resource.",
        "x-ms-examples": {
          "UpdateResourcePool": {
            "$ref": "./examples/UpdateResourcePool.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "resourcePoolName",
            "required": true,
            "type": "string",
            "description": "Name of the resourcePool."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource properties to update.",
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourcePool"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ResourcePools"
        ],
        "operationId": "ResourcePools_Delete",
        "summary": "Deletes an resourcePool.",
        "description": "Implements resourcePool DELETE method.",
        "x-ms-examples": {
          "DeleteResourcePool": {
            "$ref": "./examples/DeleteResourcePool.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "resourcePoolName",
            "description": "Name of the resourcePool.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools": {
      "get": {
        "tags": [
          "ResourcePools"
        ],
        "operationId": "ResourcePools_List",
        "summary": "Implements GET resourcePools in a subscription.",
        "description": "List of resourcePools in a subscription.",
        "x-ms-examples": {
          "ListResourcePools": {
            "$ref": "./examples/ListResourcePools.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourcePoolsList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools": {
      "get": {
        "tags": [
          "ResourcePools"
        ],
        "operationId": "ResourcePools_ListByResourceGroup",
        "summary": "Implements GET resourcePools in a resource group.",
        "description": "List of resourcePools in a resource group.",
        "x-ms-examples": {
          "ListResourcePoolsByResourceGroup": {
            "$ref": "./examples/ListResourcePoolsByResourceGroup.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourcePoolsList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/clusters/{clusterName}": {
      "put": {
        "tags": [
          "Clusters"
        ],
        "operationId": "Clusters_Create",
        "description": "Create Or Update cluster.",
        "summary": "Implements cluster PUT method.",
        "x-ms-examples": {
          "CreateCluster": {
            "$ref": "./examples/CreateCluster.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "description": "Name of the cluster."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "get": {
        "tags": [
          "Clusters"
        ],
        "operationId": "Clusters_Get",
        "summary": "Gets a cluster.",
        "description": "Implements cluster GET method.",
        "x-ms-examples": {
          "GetCluster": {
            "$ref": "./examples/GetCluster.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "clusterName",
            "description": "Name of the cluster.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Clusters"
        ],
        "operationId": "Clusters_Update",
        "summary": "Updates a cluster.",
        "description": "API to update certain properties of the cluster resource.",
        "x-ms-examples": {
          "UpdateCluster": {
            "$ref": "./examples/UpdateCluster.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string",
            "description": "Name of the cluster."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource properties to update.",
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Clusters"
        ],
        "operationId": "Clusters_Delete",
        "summary": "Deletes an cluster.",
        "description": "Implements cluster DELETE method.",
        "x-ms-examples": {
          "DeleteCluster": {
            "$ref": "./examples/DeleteCluster.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "clusterName",
            "description": "Name of the cluster.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/clusters": {
      "get": {
        "tags": [
          "Clusters"
        ],
        "operationId": "Clusters_List",
        "summary": "Implements GET clusters in a subscription.",
        "description": "List of clusters in a subscription.",
        "x-ms-examples": {
          "ListClusters": {
            "$ref": "./examples/ListClusters.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClustersList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/clusters": {
      "get": {
        "tags": [
          "Clusters"
        ],
        "operationId": "Clusters_ListByResourceGroup",
        "summary": "Implements GET clusters in a resource group.",
        "description": "List of clusters in a resource group.",
        "x-ms-examples": {
          "ListClustersByResourceGroup": {
            "$ref": "./examples/ListClustersByResourceGroup.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClustersList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/hosts/{hostName}": {
      "put": {
        "tags": [
          "Hosts"
        ],
        "operationId": "Hosts_Create",
        "description": "Create Or Update host.",
        "summary": "Implements host PUT method.",
        "x-ms-examples": {
          "CreateHost": {
            "$ref": "./examples/CreateHost.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "hostName",
            "required": true,
            "type": "string",
            "description": "Name of the host."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "get": {
        "tags": [
          "Hosts"
        ],
        "operationId": "Hosts_Get",
        "summary": "Gets a host.",
        "description": "Implements host GET method.",
        "x-ms-examples": {
          "GetHost": {
            "$ref": "./examples/GetHost.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "hostName",
            "description": "Name of the host.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Hosts"
        ],
        "operationId": "Hosts_Update",
        "summary": "Updates a host.",
        "description": "API to update certain properties of the host resource.",
        "x-ms-examples": {
          "UpdateHost": {
            "$ref": "./examples/UpdateHost.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "hostName",
            "required": true,
            "type": "string",
            "description": "Name of the host."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource properties to update.",
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Hosts"
        ],
        "operationId": "Hosts_Delete",
        "summary": "Deletes an host.",
        "description": "Implements host DELETE method.",
        "x-ms-examples": {
          "DeleteHost": {
            "$ref": "./examples/DeleteHost.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "hostName",
            "description": "Name of the host.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/hosts": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "operationId": "Hosts_List",
        "summary": "Implements GET hosts in a subscription.",
        "description": "List of hosts in a subscription.",
        "x-ms-examples": {
          "ListHosts": {
            "$ref": "./examples/ListHosts.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HostsList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/hosts": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "operationId": "Hosts_ListByResourceGroup",
        "summary": "Implements GET hosts in a resource group.",
        "description": "List of hosts in a resource group.",
        "x-ms-examples": {
          "ListHostsByResourceGroup": {
            "$ref": "./examples/ListHostsByResourceGroup.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HostsList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/datastores/{datastoreName}": {
      "put": {
        "tags": [
          "Datastores"
        ],
        "operationId": "Datastores_Create",
        "description": "Create Or Update datastore.",
        "summary": "Implements datastore PUT method.",
        "x-ms-examples": {
          "CreateDatastore": {
            "$ref": "./examples/CreateDatastore.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "datastoreName",
            "required": true,
            "type": "string",
            "description": "Name of the datastore."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "get": {
        "tags": [
          "Datastores"
        ],
        "operationId": "Datastores_Get",
        "summary": "Gets a datastore.",
        "description": "Implements datastore GET method.",
        "x-ms-examples": {
          "GetDatastore": {
            "$ref": "./examples/GetDatastore.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "datastoreName",
            "description": "Name of the datastore.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Datastores"
        ],
        "operationId": "Datastores_Update",
        "summary": "Updates a datastore.",
        "description": "API to update certain properties of the datastore resource.",
        "x-ms-examples": {
          "UpdateDatastore": {
            "$ref": "./examples/UpdateDatastore.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "datastoreName",
            "required": true,
            "type": "string",
            "description": "Name of the datastore."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource properties to update.",
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Datastores"
        ],
        "operationId": "Datastores_Delete",
        "summary": "Deletes an datastore.",
        "description": "Implements datastore DELETE method.",
        "x-ms-examples": {
          "DeleteDatastore": {
            "$ref": "./examples/DeleteDatastore.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "datastoreName",
            "description": "Name of the datastore.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/datastores": {
      "get": {
        "tags": [
          "Datastores"
        ],
        "operationId": "Datastores_List",
        "summary": "Implements GET datastores in a subscription.",
        "description": "List of datastores in a subscription.",
        "x-ms-examples": {
          "ListDatastores": {
            "$ref": "./examples/ListDatastores.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DatastoresList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/datastores": {
      "get": {
        "tags": [
          "Datastores"
        ],
        "operationId": "Datastores_ListByResourceGroup",
        "summary": "Implements GET datastores in a resource group.",
        "description": "List of datastores in a resource group.",
        "x-ms-examples": {
          "ListDatastoresByResourceGroup": {
            "$ref": "./examples/ListDatastoresByResourceGroup.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DatastoresList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}": {
      "put": {
        "tags": [
          "VCenters"
        ],
        "operationId": "VCenters_Create",
        "description": "Create Or Update vCenter.",
        "summary": "Implements vCenter PUT method.",
        "x-ms-examples": {
          "CreateVCenter": {
            "$ref": "./examples/CreateVCenter.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vcenterName",
            "required": true,
            "type": "string",
            "description": "Name of the vCenter."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/VCenter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VCenter"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VCenter"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "get": {
        "tags": [
          "VCenters"
        ],
        "operationId": "VCenters_Get",
        "summary": "Gets a vCenter.",
        "description": "Implements vCenter GET method.",
        "x-ms-examples": {
          "GetVCenter": {
            "$ref": "./examples/GetVCenter.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vcenterName",
            "required": true,
            "type": "string",
            "description": "Name of the vCenter."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VCenter"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "VCenters"
        ],
        "operationId": "VCenters_Update",
        "summary": "Updates a vCenter.",
        "description": "API to update certain properties of the vCenter resource.",
        "x-ms-examples": {
          "UpdateVCenter": {
            "$ref": "./examples/UpdateVCenter.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vcenterName",
            "required": true,
            "type": "string",
            "description": "Name of the vCenter."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource properties to update.",
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VCenter"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VCenters"
        ],
        "operationId": "VCenters_Delete",
        "summary": "Deletes an vCenter.",
        "description": "Implements vCenter DELETE method.",
        "x-ms-examples": {
          "DeleteVCenter": {
            "$ref": "./examples/DeleteVCenter.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vcenterName",
            "required": true,
            "type": "string",
            "description": "Name of the vCenter."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/vcenters": {
      "get": {
        "tags": [
          "VCenters"
        ],
        "operationId": "VCenters_List",
        "summary": "Implements GET vCenters in a subscription.",
        "description": "List of vCenters in a subscription.",
        "x-ms-examples": {
          "ListVCenters": {
            "$ref": "./examples/ListVCenters.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VCentersList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters": {
      "get": {
        "tags": [
          "VCenters"
        ],
        "operationId": "VCenters_ListByResourceGroup",
        "summary": "Implements GET vCenters in a resource group.",
        "description": "List of vCenters in a resource group.",
        "x-ms-examples": {
          "ListVCentersByResourceGroup": {
            "$ref": "./examples/ListVCentersByResourceGroup.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VCentersList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}": {
      "put": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_CreateOrUpdate",
        "description": "Create Or Update virtual machine.",
        "summary": "Implements virtual machine PUT method.",
        "x-ms-examples": {
          "CreateVirtualMachine": {
            "$ref": "./examples/CreateVirtualMachine.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the virtual machine resource."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/VirtualMachine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualMachine"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VirtualMachine"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "get": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_Get",
        "summary": "Gets a virtual machine.",
        "description": "Implements virtual machine GET method.",
        "x-ms-examples": {
          "GetVirtualMachine": {
            "$ref": "./examples/GetVirtualMachine.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the virtual machine resource."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualMachine"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_Update",
        "summary": "Updates a virtual machine.",
        "description": "API to update certain properties of the virtual machine resource.",
        "x-ms-examples": {
          "UpdateVirtualMachine": {
            "$ref": "./examples/UpdateVirtualMachine.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the virtual machine resource."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource properties to update.",
            "schema": {
              "$ref": "#/definitions/VirtualMachineUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualMachine"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VirtualMachine"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_Delete",
        "summary": "Deletes an virtual machine.",
        "description": "Implements virtual machine DELETE method.",
        "x-ms-examples": {
          "DeleteVirtualMachine": {
            "$ref": "./examples/DeleteVirtualMachine.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "description": "Name of the virtual machine resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "retain",
            "description": "Whether to just disable the VM from azure and retain the VM in the VMM.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/stop": {
      "post": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_Stop",
        "description": "Stop virtual machine.",
        "summary": "Implements the operation to stop a virtual machine.",
        "x-ms-examples": {
          "StopVirtualMachine": {
            "$ref": "./examples/StopVirtualMachine.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "description": "Name of the virtual machine resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Virtualmachine stop action payload.",
            "schema": {
              "$ref": "#/definitions/StopVirtualMachineOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/start": {
      "post": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_Start",
        "description": "Start virtual machine.",
        "summary": "Implements the operation to start a virtual machine.",
        "x-ms-examples": {
          "StartVirtualMachine": {
            "$ref": "./examples/StartVirtualMachine.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "description": "Name of the virtual machine resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/restart": {
      "post": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_Restart",
        "description": "Restart virtual machine.",
        "summary": "Implements the operation to restart a virtual machine.",
        "x-ms-examples": {
          "RestartVirtualMachine": {
            "$ref": "./examples/RestartVirtualMachine.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "description": "Name of the virtual machine resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines": {
      "get": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_ListAll",
        "summary": "Implements GET virtualMachines in a subscription.",
        "description": "List of virtualMachines in a subscription.",
        "x-ms-examples": {
          "ListVirtualMachines": {
            "$ref": "./examples/ListVirtualMachines.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualMachinesList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines": {
      "get": {
        "tags": [
          "VirtualMachines"
        ],
        "operationId": "VirtualMachines_List",
        "summary": "Implements GET virtualMachines in a resource group.",
        "description": "List of virtualMachines in a resource group.",
        "x-ms-examples": {
          "ListVirtualMachinesByResourceGroup": {
            "$ref": "./examples/ListVirtualMachinesByResourceGroup.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualMachinesList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates/{virtualMachineTemplateName}": {
      "put": {
        "tags": [
          "VirtualMachineTemplates"
        ],
        "operationId": "VirtualMachineTemplates_Create",
        "description": "Create Or Update virtual machine template.",
        "x-ms-examples": {
          "CreateVirtualMachineTemplate": {
            "$ref": "./examples/CreateVirtualMachineTemplate.json"
          }
        },
        "summary": "Implements virtual machine template PUT method.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineTemplateName",
            "description": "Name of the virtual machine template resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplate"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "get": {
        "tags": [
          "VirtualMachineTemplates"
        ],
        "operationId": "VirtualMachineTemplates_Get",
        "summary": "Gets a virtual machine template.",
        "description": "Implements virtual machine template GET method.",
        "x-ms-examples": {
          "GetVirtualMachineTemplate": {
            "$ref": "./examples/GetVirtualMachineTemplate.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineTemplateName",
            "description": "Name of the virtual machine template resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplate"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "VirtualMachineTemplates"
        ],
        "operationId": "VirtualMachineTemplates_Update",
        "summary": "Updates a virtual machine template.",
        "description": "API to update certain properties of the virtual machine template resource.",
        "x-ms-examples": {
          "UpdateVirtualMachineTemplate": {
            "$ref": "./examples/UpdateVirtualMachineTemplate.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineTemplateName",
            "required": true,
            "type": "string",
            "description": "Name of the virtual machine template resource."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource properties to update.",
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplate"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VirtualMachineTemplates"
        ],
        "operationId": "VirtualMachineTemplates_Delete",
        "summary": "Deletes an virtual machine template.",
        "description": "Implements virtual machine template DELETE method.",
        "x-ms-examples": {
          "DeleteVirtualMachineTemplate": {
            "$ref": "./examples/DeleteVirtualMachineTemplate.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineTemplateName",
            "required": true,
            "type": "string",
            "description": "Name of the virtual machine template resource."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates": {
      "get": {
        "tags": [
          "VirtualMachineTemplates"
        ],
        "operationId": "VirtualMachineTemplates_List",
        "summary": "Implements GET virtualMachineTemplates in a subscription.",
        "description": "List of virtualMachineTemplates in a subscription.",
        "x-ms-examples": {
          "ListVirtualMachineTemplates": {
            "$ref": "./examples/ListVirtualMachineTemplates.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplatesList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates": {
      "get": {
        "tags": [
          "VirtualMachineTemplates"
        ],
        "operationId": "VirtualMachineTemplates_ListByResourceGroup",
        "summary": "Implements GET virtualMachineTemplates in a resource group.",
        "description": "List of virtualMachineTemplates in a resource group.",
        "x-ms-examples": {
          "ListVirtualMachineTemplatesByResourceGroup": {
            "$ref": "./examples/ListVirtualMachineTemplatesByResourceGroup.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplatesList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks/{virtualNetworkName}": {
      "put": {
        "tags": [
          "VirtualNetworks"
        ],
        "operationId": "VirtualNetworks_Create",
        "description": "Create Or Update virtual network.",
        "summary": "Implements virtual network PUT method.",
        "x-ms-examples": {
          "CreateVirtualNetwork": {
            "$ref": "./examples/CreateVirtualNetwork.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualNetworkName",
            "description": "Name of the virtual network resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "get": {
        "tags": [
          "VirtualNetworks"
        ],
        "operationId": "VirtualNetworks_Get",
        "summary": "Gets a virtual network.",
        "description": "Implements virtual network GET method.",
        "x-ms-examples": {
          "GetVirtualNetwork": {
            "$ref": "./examples/GetVirtualNetwork.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string",
            "description": "Name of the virtual network resource."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "VirtualNetworks"
        ],
        "operationId": "VirtualNetworks_Update",
        "summary": "Updates a virtual network.",
        "description": "API to update certain properties of the virtual network resource.",
        "x-ms-examples": {
          "UpdateVirtualNetwork": {
            "$ref": "./examples/UpdateVirtualNetwork.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualNetworkName",
            "description": "Name of the virtual network resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource properties to update.",
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VirtualNetworks"
        ],
        "operationId": "VirtualNetworks_Delete",
        "summary": "Deletes an virtual network.",
        "description": "Implements virtual network DELETE method.",
        "x-ms-examples": {
          "DeleteVirtualNetwork": {
            "$ref": "./examples/DeleteVirtualNetwork.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualNetworkName",
            "description": "Name of the virtual network resource.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks": {
      "get": {
        "tags": [
          "VirtualNetworks"
        ],
        "operationId": "VirtualNetworks_List",
        "summary": "Implements GET virtualNetworks in a subscription.",
        "description": "List of virtualNetworks in a subscription.",
        "x-ms-examples": {
          "ListVirtualNetworks": {
            "$ref": "./examples/ListVirtualNetworks.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualNetworksList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks": {
      "get": {
        "tags": [
          "VirtualNetworks"
        ],
        "operationId": "VirtualNetworks_ListByResourceGroup",
        "summary": "Implements GET virtualNetworks in a resource group.",
        "description": "List of virtualNetworks in a resource group.",
        "x-ms-examples": {
          "ListVirtualNetworksByResourceGroup": {
            "$ref": "./examples/ListVirtualNetworksByResourceGroup.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualNetworksList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}/inventoryItems/{inventoryItemName}": {
      "put": {
        "tags": [
          "InventoryItems"
        ],
        "operationId": "InventoryItems_Create",
        "description": "Create Or Update InventoryItem.",
        "summary": "Implements InventoryItem PUT method.",
        "x-ms-examples": {
          "CreateInventoryItem": {
            "$ref": "./examples/CreateInventoryItem.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vcenterName",
            "required": true,
            "type": "string",
            "description": "Name of the vCenter."
          },
          {
            "in": "path",
            "name": "inventoryItemName",
            "required": true,
            "type": "string",
            "description": "Name of the inventoryItem."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/InventoryItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InventoryItem"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "InventoryItems"
        ],
        "operationId": "InventoryItems_Get",
        "summary": "Gets InventoryItem.",
        "description": "Implements InventoryItem GET method.",
        "x-ms-examples": {
          "GetInventoryItem": {
            "$ref": "./examples/GetInventoryItem.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vcenterName",
            "required": true,
            "type": "string",
            "description": "Name of the vCenter."
          },
          {
            "in": "path",
            "name": "inventoryItemName",
            "required": true,
            "type": "string",
            "description": "Name of the inventoryItem."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InventoryItem"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryItems"
        ],
        "operationId": "InventoryItems_Delete",
        "summary": "Deletes an inventoryItem.",
        "description": "Implements inventoryItem DELETE method.",
        "x-ms-examples": {
          "DeleteInventoryItem": {
            "$ref": "./examples/DeleteInventoryItem.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vcenterName",
            "required": true,
            "type": "string",
            "description": "Name of the vCenter."
          },
          {
            "in": "path",
            "name": "inventoryItemName",
            "required": true,
            "type": "string",
            "description": "Name of the inventoryItem."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}/inventoryItems": {
      "get": {
        "tags": [
          "InventoryItems"
        ],
        "operationId": "InventoryItems_ListByVCenter",
        "summary": "Implements GET inventoryItems in a vCenter.",
        "description": "Returns the list of inventoryItems of the given vCenter.",
        "x-ms-examples": {
          "InventoryItemsListByVCenter": {
            "$ref": "./examples/InventoryItems_ListByVCenter.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "vcenterName",
            "required": true,
            "type": "string",
            "description": "Name of the vCenter."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InventoryItemsList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/hybridIdentityMetadata/{metadataName}": {
      "put": {
        "tags": [
          "HybridIdentityMetadata"
        ],
        "operationId": "HybridIdentityMetadata_Create",
        "description": "Create Or Update HybridIdentityMetadata.",
        "summary": "Implements HybridIdentityMetadata PUT method.",
        "x-ms-examples": {
          "CreateHybridIdentityMetadata": {
            "$ref": "./examples/CreateHybridIdentityMetadata.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the vm."
          },
          {
            "in": "path",
            "name": "metadataName",
            "required": true,
            "type": "string",
            "description": "Name of the hybridIdentityMetadata."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/HybridIdentityMetadata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HybridIdentityMetadata"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "HybridIdentityMetadata"
        ],
        "operationId": "HybridIdentityMetadata_Get",
        "summary": "Gets HybridIdentityMetadata.",
        "description": "Implements HybridIdentityMetadata GET method.",
        "x-ms-examples": {
          "GetHybridIdentityMetadata": {
            "$ref": "./examples/GetHybridIdentityMetadata.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the vm."
          },
          {
            "in": "path",
            "name": "metadataName",
            "required": true,
            "type": "string",
            "description": "Name of the HybridIdentityMetadata."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HybridIdentityMetadata"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "HybridIdentityMetadata"
        ],
        "operationId": "HybridIdentityMetadata_Delete",
        "summary": "Deletes an HybridIdentityMetadata.",
        "description": "Implements HybridIdentityMetadata DELETE method.",
        "x-ms-examples": {
          "DeleteHybridIdentityMetadata": {
            "$ref": "./examples/DeleteHybridIdentityMetadata.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the vm."
          },
          {
            "in": "path",
            "name": "metadataName",
            "required": true,
            "type": "string",
            "description": "Name of the HybridIdentityMetadata."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/hybridIdentityMetadata": {
      "get": {
        "tags": [
          "HybridIdentityMetadata"
        ],
        "operationId": "HybridIdentityMetadata_List",
        "summary": "Implements GET HybridIdentityMetadata in a vm.",
        "description": "Returns the list of HybridIdentityMetadata of the given vm.",
        "x-ms-examples": {
          "HybridIdentityMetadataListByVm": {
            "$ref": "./examples/HybridIdentityMetadata_ListByVm.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the vm."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HybridIdentityMetadataList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/extensions/{extensionName}": {
      "put": {
        "tags": [
          "MachineExtensions"
        ],
        "operationId": "MachineExtensions_CreateOrUpdate",
        "description": "The operation to create or update the extension.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "virtualMachineName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the machine where the extension should be created or updated."
          },
          {
            "name": "extensionName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the machine extension."
          },
          {
            "name": "extensionParameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MachineExtension"
            },
            "description": "Parameters supplied to the Create Machine Extension operation."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MachineExtension"
            }
          },
          "201": {
            "description": "HTTP 201 (Created) if the operation was successfully started and will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/MachineExtension"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create or Update a Machine Extension (PUT)": {
            "$ref": "./examples/PUTExtension.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "patch": {
        "tags": [
          "MachineExtensions"
        ],
        "operationId": "MachineExtensions_Update",
        "description": "The operation to update the extension.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "virtualMachineName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the machine where the extension should be created or updated."
          },
          {
            "name": "extensionName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the machine extension."
          },
          {
            "name": "extensionParameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MachineExtensionUpdate"
            },
            "description": "Parameters supplied to the Create Machine Extension operation."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MachineExtension"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MachineExtension"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create or Update a Machine Extension (PATCH)": {
            "$ref": "./examples/UpdateExtension.json"
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "MachineExtensions"
        ],
        "operationId": "MachineExtensions_Delete",
        "description": "The operation to delete the extension.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "virtualMachineName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the machine where the extension should be deleted."
          },
          {
            "name": "extensionName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the machine extension."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Delete a Machine Extension": {
            "$ref": "./examples/DELETEExtension.json"
          }
        }
      },
      "get": {
        "tags": [
          "MachineExtensions"
        ],
        "operationId": "MachineExtensions_Get",
        "description": "The operation to get the extension.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "virtualMachineName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the machine containing the extension."
          },
          {
            "name": "extensionName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the machine extension."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MachineExtension"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Machine Extension": {
            "$ref": "./examples/GETExtension.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/extensions": {
      "get": {
        "tags": [
          "MachineExtensions"
        ],
        "operationId": "MachineExtensions_List",
        "description": "The operation to get all extensions of a non-Azure machine",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "virtualMachineName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the machine containing the extension."
          },
          {
            "name": "$expand",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The expand expression to apply on the operation."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MachineExtensionsListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Get all Machine Extensions": {
            "$ref": "./examples/LISTExtension.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/upgradeExtensions": {
      "post": {
        "tags": [
          "MachineExtensions Upgrade"
        ],
        "operationId": "UpgradeExtensions",
        "description": "The operation to Upgrade Machine Extensions.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "virtualMachineName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the machine containing the extension."
          },
          {
            "name": "extensionUpgradeParameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MachineExtensionUpgrade"
            },
            "description": "Parameters supplied to the Upgrade Extensions operation."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Upgrade Machine Extensions": {
            "$ref": "./examples/Extensions_Upgrade.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/guestAgents/{name}": {
      "put": {
        "tags": [
          "GuestAgents"
        ],
        "operationId": "GuestAgents_Create",
        "description": "Create Or Update GuestAgent.",
        "summary": "Implements GuestAgent PUT method.",
        "x-ms-examples": {
          "CreateGuestAgent": {
            "$ref": "./examples/CreateGuestAgent.json"
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the vm."
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "description": "Name of the guestAgents."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request payload.",
            "schema": {
              "$ref": "#/definitions/GuestAgent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GuestAgent"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuestAgent"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "get": {
        "tags": [
          "GuestAgents"
        ],
        "operationId": "GuestAgents_Get",
        "summary": "Gets GuestAgent.",
        "description": "Implements GuestAgent GET method.",
        "x-ms-examples": {
          "GetGuestAgent": {
            "$ref": "./examples/GetGuestAgent.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the vm."
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "description": "Name of the GuestAgent."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GuestAgent"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "GuestAgents"
        ],
        "operationId": "GuestAgents_Delete",
        "summary": "Deletes an GuestAgent.",
        "description": "Implements GuestAgent DELETE method.",
        "x-ms-examples": {
          "DeleteGuestAgent": {
            "$ref": "./examples/DeleteGuestAgent.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the vm."
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "description": "Name of the GuestAgent."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/guestAgents": {
      "get": {
        "tags": [
          "GuestAgents"
        ],
        "operationId": "GuestAgents_List",
        "summary": "Implements GET GuestAgent in a vm.",
        "description": "Returns the list of GuestAgent of the given vm.",
        "x-ms-examples": {
          "GuestAgentListByVm": {
            "$ref": "./examples/GuestAgent_ListByVm.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "virtualMachineName",
            "required": true,
            "type": "string",
            "description": "Name of the vm."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GuestAgentList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "ResourcePatch": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags."
        }
      },
      "description": "Object containing updates for patch operations."
    },
    "ResourcePoolProperties": {
      "description": "Describes the properties of a Resource Pool.",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "Gets or sets a unique identifier for this resource.",
          "type": "string",
          "readOnly": true
        },
        "vCenterId": {
          "description": "Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.",
          "type": "string"
        },
        "moRefId": {
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the resource pool.",
          "type": "string"
        },
        "inventoryItemId": {
          "description": "Gets or sets the inventory Item ID for the resource pool.",
          "type": "string"
        },
        "moName": {
          "description": "Gets or sets the vCenter Managed Object name for the resource pool.",
          "type": "string",
          "readOnly": true
        },
        "cpuSharesLevel": {
          "description": "Gets or sets CPUSharesLevel which specifies the CPU allocation level for this pool.\r\nThis property is used in relative allocation between resource consumers.",
          "type": "string",
          "readOnly": true
        },
        "cpuReservationMHz": {
          "format": "int64",
          "description": "Gets or sets CPUReservationMHz which specifies the CPU size in MHz that is guaranteed\r\nto be available.",
          "type": "integer",
          "readOnly": true
        },
        "cpuLimitMHz": {
          "format": "int64",
          "description": "Gets or sets CPULimitMHz which specifies a CPU usage limit in MHz.\r\nUtilization will not exceed this limit even if there are available resources.",
          "type": "integer",
          "readOnly": true
        },
        "memSharesLevel": {
          "description": "Gets or sets CPUSharesLevel which specifies the memory allocation level for this pool.\r\nThis property is used in relative allocation between resource consumers.",
          "type": "string",
          "readOnly": true
        },
        "memReservationMB": {
          "format": "int64",
          "description": "Gets or sets MemReservationMB which specifies the guaranteed available memory in\r\nmegabytes.",
          "type": "integer",
          "readOnly": true
        },
        "memLimitMB": {
          "format": "int64",
          "description": "Gets or sets MemLimitMB specifies a memory usage limit in megabytes.\r\nUtilization will not exceed the specified limit even if there are available resources.",
          "type": "integer",
          "readOnly": true
        },
        "customResourceName": {
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "type": "string",
          "readOnly": true
        },
        "datastoreIds": {
          "description": "Gets or sets the datastore ARM ids.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "networkIds": {
          "description": "Gets or sets the network ARM ids.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "statuses": {
          "description": "The resource status information.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          }
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResourcePool": {
      "description": "Define the resourcePool.",
      "required": [
        "location",
        "properties"
      ],
      "type": "object",
      "x-ms-azure-resource": true,
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/ResourcePoolProperties"
        },
        "location": {
          "description": "Gets or sets the location.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        },
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      }
    },
    "ResourcePoolsList": {
      "description": "List of ResourcePools.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of ResourcePools.",
          "type": "string"
        },
        "value": {
          "description": "Array of ResourcePools",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourcePool"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "VICredential": {
      "description": "Username / Password Credentials to connect to vcenter.",
      "type": "object",
      "properties": {
        "username": {
          "description": "Gets or sets username to connect with the vCenter.",
          "type": "string"
        },
        "password": {
          "description": "Gets or sets the password to connect with the vCenter.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "update"
          ],
          "x-ms-secret": true
        }
      }
    },
    "ResourceStatus": {
      "description": "The resource status information.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the condition.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the condition.",
          "type": "string",
          "readOnly": true
        },
        "reason": {
          "description": "The reason for the condition's status.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "A human readable message indicating details about the status.",
          "type": "string",
          "readOnly": true
        },
        "severity": {
          "description": "Severity with which to treat failures of this type of condition.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedAt": {
          "description": "The last update time for this condition.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "VCenterProperties": {
      "description": "Describes the properties of a VCenter.",
      "required": [
        "fqdn"
      ],
      "type": "object",
      "properties": {
        "uuid": {
          "description": "Gets or sets a unique identifier for this resource.",
          "type": "string",
          "readOnly": true
        },
        "fqdn": {
          "description": "Gets or sets the FQDN/IPAddress of the vCenter.",
          "type": "string"
        },
        "port": {
          "format": "int32",
          "description": "Gets or sets the port of the vCenter.",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "version": {
          "description": "Gets or sets the version of the vCenter.",
          "type": "string",
          "readOnly": true
        },
        "instanceUuid": {
          "description": "Gets or sets the instance UUID of the vCenter.",
          "type": "string",
          "readOnly": true
        },
        "connectionStatus": {
          "description": "Gets or sets the connection status to the vCenter.",
          "type": "string",
          "readOnly": true
        },
        "customResourceName": {
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "type": "string",
          "readOnly": true
        },
        "credentials": {
          "description": "Username / Password Credentials to connect to vcenter.",
          "$ref": "#/definitions/VICredential"
        },
        "statuses": {
          "description": "The resource status information.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          }
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VirtualDiskUpdate": {
      "description": "Defines the virtual disk update.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name of the virtual disk.",
          "type": "string"
        },
        "diskSizeGB": {
          "format": "int32",
          "description": "Gets or sets the disk total size.",
          "type": "integer"
        },
        "deviceKey": {
          "format": "int32",
          "description": "Gets or sets the device key value.",
          "type": "integer"
        },
        "diskMode": {
          "description": "Gets or sets the disk mode.",
          "$ref": "#/definitions/DiskMode"
        },
        "controllerKey": {
          "description": "Gets or sets the controller id.",
          "format": "int32",
          "type": "integer"
        },
        "unitNumber": {
          "description": "Gets or sets the unit number of the disk on the controller.",
          "format": "int32",
          "type": "integer"
        },
        "deviceName": {
          "description": "Gets or sets the device name.",
          "type": "string"
        },
        "diskType": {
          "description": "Gets or sets the disk backing type.",
          "$ref": "#/definitions/DiskType"
        }
      }
    },
    "VirtualDisk": {
      "description": "Virtual disk model",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name of the virtual disk.",
          "type": "string"
        },
        "label": {
          "description": "Gets or sets the label of the virtual disk in vCenter.",
          "type": "string",
          "readOnly": true
        },
        "diskObjectId": {
          "description": "Gets or sets the disk object id.",
          "type": "string",
          "readOnly": true
        },
        "diskSizeGB": {
          "format": "int32",
          "description": "Gets or sets the disk total size.",
          "type": "integer"
        },
        "deviceKey": {
          "format": "int32",
          "description": "Gets or sets the device key value.",
          "type": "integer"
        },
        "diskMode": {
          "description": "Gets or sets the disk mode.",
          "$ref": "#/definitions/DiskMode"
        },
        "controllerKey": {
          "description": "Gets or sets the controller id.",
          "format": "int32",
          "type": "integer"
        },
        "unitNumber": {
          "description": "Gets or sets the unit number of the disk on the controller.",
          "format": "int32",
          "type": "integer"
        },
        "deviceName": {
          "description": "Gets or sets the device name.",
          "type": "string"
        },
        "diskType": {
          "description": "Gets or sets the disk backing type.",
          "$ref": "#/definitions/DiskType"
        }
      }
    },
    "Condition": {
      "description": "Condition defines an extension to status.",
      "type": "object",
      "properties": {
        "status": {
          "description": "Status of the condition.",
          "type": "string",
          "readOnly": true
        },
        "reason": {
          "description": "The reason for the condition's status.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "A human readable message indicating details about the status.",
          "type": "string",
          "readOnly": true
        },
        "severity": {
          "description": "Severity with which to treat failures of this type of condition.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VCenter": {
      "description": "Defines the vCenter.",
      "required": [
        "location",
        "properties"
      ],
      "type": "object",
      "x-ms-azure-resource": true,
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/VCenterProperties"
        },
        "location": {
          "description": "Gets or sets the location.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        },
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      }
    },
    "VCentersList": {
      "description": "List of VCenters.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of VCenters.",
          "type": "string"
        },
        "value": {
          "description": "Array of VCenters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VCenter"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "OsType": {
      "description": "Defines the different types of VM guest operating systems.",
      "enum": [
        "Windows",
        "Linux",
        "Other"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "OsType"
      }
    },
    "PatchSettings": {
      "type": "object",
      "properties": {
        "assessmentMode": {
          "type": "string",
          "description": "Specifies the assessment mode."
        },
        "patchMode": {
          "type": "string",
          "description": "Specifies the patch mode."
        }
      },
      "description": "Specifies the patch settings."
    },
    "OsProfile": {
      "description": "Specifies the operating system settings for the virtual machine.",
      "type": "object",
      "properties": {
        "computerName": {
          "description": "Gets or sets computer name.",
          "type": "string"
        },
        "adminUsername": {
          "description": "Gets or sets administrator username.",
          "type": "string"
        },
        "adminPassword": {
          "description": "Gets or sets administrator password.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "update"
          ],
          "x-ms-secret": true
        },
        "guestId": {
          "description": "Gets or sets the guestId.",
          "type": "string"
        },
        "allowExtensionOperations": {
          "description": "Gets or sets a value indicating whether the VM is ready for extension operations.",
          "type": "boolean",
          "readOnly": true
        },
        "osType": {
          "description": "Gets or sets the type of the os.",
          "$ref": "#/definitions/OsType"
        },
        "osName": {
          "description": "Gets or sets os name.",
          "type": "string",
          "readOnly": true
        },
        "toolsRunningStatus": {
          "description": "Gets or sets the current running status of VMware Tools running in the guest operating system.",
          "type": "string",
          "readOnly": true
        },
        "toolsVersionStatus": {
          "description": "Gets or sets the current version status of VMware Tools installed in the guest operating system.",
          "type": "string",
          "readOnly": true
        },
        "toolsVersion": {
          "description": "Gets or sets the current version of VMware Tools.",
          "type": "string",
          "readOnly": true
        },
        "windowsConfiguration": {
          "type": "object",
          "properties": {
            "patchSettings": {
              "x-ms-client-flatten": true,
              "$ref": "#/definitions/PatchSettings"
            }
          },
          "description": "Specifies the windows configuration for update management."
        },
        "linuxConfiguration": {
          "type": "object",
          "properties": {
            "patchSettings": {
              "x-ms-client-flatten": true,
              "$ref": "#/definitions/PatchSettings"
            }
          },
          "description": "Specifies the linux configuration for update management."
        }
      }
    },
    "OsProfileUpdate": {
      "description": "Specifies the operating system settings for the virtual machine.",
      "type": "object",
      "properties": {
        "windowsConfiguration": {
          "type": "object",
          "properties": {
            "patchSettings": {
              "x-ms-client-flatten": true,
              "$ref": "#/definitions/PatchSettings"
            }
          },
          "description": "Specifies the windows configuration for update management."
        },
        "linuxConfiguration": {
          "type": "object",
          "properties": {
            "patchSettings": {
              "x-ms-client-flatten": true,
              "$ref": "#/definitions/PatchSettings"
            }
          },
          "description": "Specifies the linux configuration for update management."
        }
      }
    },
    "HardwareProfile": {
      "description": "Specifies the hardware settings for the virtual machine.",
      "type": "object",
      "properties": {
        "memorySizeMB": {
          "format": "int32",
          "description": "Gets or sets memory size in MBs for the vm.",
          "type": "integer"
        },
        "numCPUs": {
          "format": "int32",
          "description": "Gets or sets the number of vCPUs for the vm.",
          "type": "integer"
        },
        "numCoresPerSocket": {
          "format": "int32",
          "description": "Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.",
          "type": "integer"
        },
        "cpuHotAddEnabled": {
          "description": "Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.",
          "type": "boolean",
          "readOnly": true
        },
        "cpuHotRemoveEnabled": {
          "description": "Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.",
          "type": "boolean",
          "readOnly": true
        },
        "memoryHotAddEnabled": {
          "description": "Gets or sets a value indicating whether memory can be added while this virtual machine is running.",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "NetworkProfileUpdate": {
      "description": "Specifies the network interfaces of the virtual machine.",
      "type": "object",
      "properties": {
        "networkInterfaces": {
          "description": "Gets or sets the list of network interfaces associated with the virtual machine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkInterfaceUpdate"
          }
        }
      }
    },
    "NetworkProfile": {
      "description": "Specifies the network interfaces of the virtual machine.",
      "type": "object",
      "properties": {
        "networkInterfaces": {
          "description": "Gets or sets the list of network interfaces associated with the virtual machine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          }
        }
      }
    },
    "SCSIControllerType": {
      "description": "Defines the different types of SCSI controllers.",
      "enum": [
        "lsilogic",
        "buslogic",
        "pvscsi",
        "lsilogicsas"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "SCSIControllerType"
      }
    },
    "VirtualSCSISharing": {
      "description": "Defines the sharing mode for sharing the SCSI bus.",
      "enum": [
        "noSharing",
        "physicalSharing",
        "virtualSharing"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "VirtualSCSISharing"
      }
    },
    "VirtualSCSIController": {
      "description": "This data object type contains the properties of a SCSI controller device attached to a virtual machine that is reported by the controller.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Gets or sets the controller type.",
          "$ref": "#/definitions/SCSIControllerType"
        },
        "controllerKey": {
          "format": "int32",
          "description": "Gets or sets the key of the controller.",
          "type": "integer"
        },
        "busNumber": {
          "format": "int32",
          "description": "Gets or sets the bus number of the controller.",
          "type": "integer"
        },
        "scsiCtlrUnitNumber": {
          "format": "int32",
          "description": "Gets or sets the SCSI controller unit number.",
          "type": "integer"
        },
        "sharing": {
          "description": "Gets or sets the sharing mode.",
          "$ref": "#/definitions/VirtualSCSISharing"
        }
      }
    },
    "StorageProfile": {
      "description": "Specifies the storage settings for the virtual machine disks.",
      "type": "object",
      "properties": {
        "disks": {
          "description": "Gets or sets the list of virtual disks associated with the virtual machine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualDisk"
          }
        },
        "scsiControllers": {
          "description": "Gets or sets the list of virtual SCSI controllers associated with the virtual machine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualSCSIController"
          },
          "readOnly": true
        }
      }
    },
    "StorageProfileUpdate": {
      "description": "Specifies the storage settings for the virtual machine disks.",
      "type": "object",
      "properties": {
        "disks": {
          "description": "Gets or sets the list of virtual disks associated with the virtual machine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualDiskUpdate"
          }
        }
      }
    },
    "GuestAgentProfile": {
      "description": "Specifies the guest agent settings for the virtual machine.",
      "type": "object",
      "properties": {
        "vmUuid": {
          "readOnly": true,
          "type": "string",
          "description": "Specifies the VM's unique SMBIOS ID."
        },
        "status": {
          "readOnly": true,
          "type": "string",
          "description": "The status of the hybrid machine agent.",
          "enum": [
            "Connected",
            "Disconnected",
            "Error"
          ],
          "x-ms-enum": {
            "name": "StatusTypes",
            "modelAsString": true
          }
        },
        "lastStatusChange": {
          "readOnly": true,
          "type": "string",
          "format": "date-time",
          "description": "The time of the last status change."
        },
        "clientPublicKey": {
          "description": "Gets or sets the Public Key provided by the client for enabling guest management.",
          "type": "string"
        },
        "mssqlDiscovered": {
          "readOnly": true,
          "type": "string",
          "description": "Specifies whether any MS SQL instance is discovered on the machine."
        },
        "agentVersion": {
          "readOnly": true,
          "type": "string",
          "description": "The hybrid machine agent full version."
        },
        "errorDetails": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorDetail"
          },
          "description": "Details about the error state."
        }
      }
    },
    "GuestAgentProfileUpdate": {
      "description": "Specifies the guest agent settings for the virtual machine.",
      "type": "object",
      "properties": {
        "clientPublicKey": {
          "description": "Gets or sets the Public Key provided by the client for enabling guest management.",
          "type": "string"
        }
      }
    },
    "PlacementProfile": {
      "description": "Specifies the compute and storage placement settings for the virtual machine.",
      "type": "object",
      "properties": {
        "resourcePoolId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy."
        },
        "clusterId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy."
        },
        "hostId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the host resource on which this virtual machine will deploy."
        },
        "datastoreId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept."
        }
      }
    },
    "UefiSettings": {
      "type": "object",
      "properties": {
        "secureBootEnabled": {
          "type": "boolean",
          "description": "Specifies whether secure boot should be enabled on the virtual machine."
        }
      },
      "description": "Specifies the security settings like secure boot used while creating the virtual machine."
    },
    "SecurityProfile": {
      "type": "object",
      "properties": {
        "uefiSettings": {
          "$ref": "#/definitions/UefiSettings",
          "description": "Specifies the security settings like secure boot used while creating the virtual machine."
        }
      },
      "description": "Specifies the Security profile settings for the virtual machine."
    },
    "ExtendedLocation": {
      "type": "object",
      "description": "The extended location.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The extended location type."
        },
        "name": {
          "type": "string",
          "description": "The extended location name."
        }
      }
    },
    "VirtualMachineProperties": {
      "description": "Describes the properties of a Virtual Machine.",
      "type": "object",
      "properties": {
        "resourcePoolId": {
          "description": "Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will\r\ndeploy.",
          "type": "string"
        },
        "templateId": {
          "description": "Gets or sets the ARM Id of the template resource to deploy the virtual machine.",
          "type": "string"
        },
        "vCenterId": {
          "description": "Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.",
          "type": "string"
        },
        "placementProfile": {
          "description": "Placement properties.",
          "$ref": "#/definitions/PlacementProfile"
        },
        "osProfile": {
          "description": "OS properties.",
          "$ref": "#/definitions/OsProfile"
        },
        "hardwareProfile": {
          "description": "Hardware properties.",
          "$ref": "#/definitions/HardwareProfile"
        },
        "networkProfile": {
          "description": "Network properties.",
          "$ref": "#/definitions/NetworkProfile"
        },
        "storageProfile": {
          "description": "Storage properties.",
          "$ref": "#/definitions/StorageProfile"
        },
        "guestAgentProfile": {
          "description": "Guest agent status properties.",
          "$ref": "#/definitions/GuestAgentProfile"
        },
        "securityProfile": {
          "$ref": "#/definitions/SecurityProfile",
          "description": "Gets the security profile."
        },
        "moRefId": {
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.",
          "type": "string"
        },
        "inventoryItemId": {
          "description": "Gets or sets the inventory Item ID for the virtual machine.",
          "type": "string"
        },
        "moName": {
          "description": "Gets or sets the vCenter Managed Object name for the virtual machine.",
          "type": "string",
          "readOnly": true
        },
        "folderPath": {
          "description": "Gets or sets the folder path of the vm.",
          "type": "string",
          "readOnly": true
        },
        "instanceUuid": {
          "description": "Gets or sets the instance uuid of the vm.",
          "type": "string",
          "readOnly": true
        },
        "smbiosUuid": {
          "type": "string",
          "description": "Gets or sets the SMBIOS UUID of the vm."
        },
        "firmwareType": {
          "description": "Firmware type",
          "$ref": "#/definitions/FirmwareType"
        },
        "powerState": {
          "description": "Gets the power state of the virtual machine.",
          "type": "string",
          "readOnly": true
        },
        "customResourceName": {
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "type": "string",
          "readOnly": true
        },
        "uuid": {
          "description": "Gets or sets a unique identifier for this resource.",
          "type": "string",
          "readOnly": true
        },
        "statuses": {
          "description": "The resource status information.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          }
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "type": "string",
          "readOnly": true
        },
        "vmId": {
          "description": "Gets or sets a unique identifier for the vm resource.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VirtualMachine": {
      "description": "Define the virtualMachine.",
      "required": [
        "location",
        "properties"
      ],
      "type": "object",
      "x-ms-azure-resource": true,
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/VirtualMachineProperties"
        },
        "location": {
          "description": "Gets or sets the location.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        },
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        },
        "identity": {
          "$ref": "#/definitions/Identity",
          "description": "The identity of the resource."
        }
      }
    },
    "VirtualMachineUpdateProperties": {
      "description": "Describes the properties of a Virtual Machine.",
      "type": "object",
      "properties": {
        "hardwareProfile": {
          "$ref": "#/definitions/HardwareProfile"
        },
        "osProfile": {
          "description": "OS properties.",
          "$ref": "#/definitions/OsProfileUpdate"
        },
        "storageProfile": {
          "$ref": "#/definitions/StorageProfileUpdate"
        },
        "networkProfile": {
          "$ref": "#/definitions/NetworkProfileUpdate"
        },
        "guestAgentProfile": {
          "$ref": "#/definitions/GuestAgentProfileUpdate"
        }
      }
    },
    "VirtualMachineUpdate": {
      "description": "Defines the virtualMachineUpdate.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/VirtualMachineUpdateProperties"
        },
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "identity": {
          "$ref": "#/definitions/Identity",
          "description": "The identity of the resource."
        }
      }
    },
    "VirtualMachinesList": {
      "description": "List of VirtualMachines.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of VirtualMachines.",
          "type": "string"
        },
        "value": {
          "description": "Array of VirtualMachines",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualMachine"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "StopVirtualMachineOptions": {
      "description": "Defines the stop action properties.",
      "type": "object",
      "properties": {
        "skipShutdown": {
          "description": "Gets or sets a value indicating whether to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Defaults to false.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "VirtualMachineTemplateProperties": {
      "description": "Describes the properties of a Virtual Machine Template.",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "Gets or sets a unique identifier for this resource.",
          "type": "string",
          "readOnly": true
        },
        "vCenterId": {
          "description": "Gets or sets the ARM Id of the vCenter resource in which this template resides.",
          "type": "string"
        },
        "moRefId": {
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine\r\ntemplate.",
          "type": "string"
        },
        "inventoryItemId": {
          "description": "Gets or sets the inventory Item ID for the virtual machine template.",
          "type": "string"
        },
        "moName": {
          "description": "Gets or sets the vCenter Managed Object name for the virtual machine template.",
          "type": "string",
          "readOnly": true
        },
        "memorySizeMB": {
          "format": "int32",
          "description": "Gets or sets memory size in MBs for the template.",
          "type": "integer",
          "readOnly": true
        },
        "numCPUs": {
          "format": "int32",
          "description": "Gets or sets the number of vCPUs for the template.",
          "type": "integer",
          "readOnly": true
        },
        "numCoresPerSocket": {
          "format": "int32",
          "description": "Gets or sets the number of cores per socket for the template.\r\nDefaults to 1 if unspecified.",
          "type": "integer",
          "readOnly": true
        },
        "osType": {
          "description": "Gets or sets the type of the os.",
          "$ref": "#/definitions/OsType",
          "readOnly": true
        },
        "osName": {
          "description": "Gets or sets os name.",
          "type": "string",
          "readOnly": true
        },
        "folderPath": {
          "description": "Gets or sets the folder path of the template.",
          "type": "string",
          "readOnly": true
        },
        "networkInterfaces": {
          "description": "Gets or sets the network interfaces of the template.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          },
          "readOnly": true
        },
        "disks": {
          "description": "Gets or sets the disks the template.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualDisk"
          },
          "readOnly": true
        },
        "customResourceName": {
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "type": "string",
          "readOnly": true
        },
        "toolsVersionStatus": {
          "description": "Gets or sets the current version status of VMware Tools installed in the guest operating system.",
          "type": "string",
          "readOnly": true
        },
        "toolsVersion": {
          "description": "Gets or sets the current version of VMware Tools.",
          "type": "string",
          "readOnly": true
        },
        "firmwareType": {
          "description": "Firmware type",
          "$ref": "#/definitions/FirmwareType",
          "readOnly": true
        },
        "statuses": {
          "description": "The resource status information.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          }
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ClusterProperties": {
      "description": "Describes the properties of a Cluster.",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "Gets or sets a unique identifier for this resource.",
          "type": "string",
          "readOnly": true
        },
        "vCenterId": {
          "description": "Gets or sets the ARM Id of the vCenter resource in which this cluster resides.",
          "type": "string"
        },
        "moRefId": {
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the cluster.",
          "type": "string"
        },
        "inventoryItemId": {
          "description": "Gets or sets the inventory Item ID for the cluster.",
          "type": "string"
        },
        "moName": {
          "description": "Gets or sets the vCenter Managed Object name for the cluster.",
          "type": "string",
          "readOnly": true
        },
        "statuses": {
          "description": "The resource status information.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          }
        },
        "customResourceName": {
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "type": "string",
          "readOnly": true
        },
        "datastoreIds": {
          "description": "Gets or sets the datastore ARM ids.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "networkIds": {
          "description": "Gets or sets the network ARM ids.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Cluster": {
      "description": "Define the cluster.",
      "required": [
        "location",
        "properties"
      ],
      "type": "object",
      "x-ms-azure-resource": true,
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/ClusterProperties"
        },
        "location": {
          "description": "Gets or sets the location.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        },
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      }
    },
    "ClustersList": {
      "description": "List of Clusters.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of Clusters.",
          "type": "string"
        },
        "value": {
          "description": "Array of Clusters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cluster"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "HostProperties": {
      "description": "Describes the properties of a Host.",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "Gets or sets a unique identifier for this resource.",
          "type": "string",
          "readOnly": true
        },
        "vCenterId": {
          "description": "Gets or sets the ARM Id of the vCenter resource in which this host resides.",
          "type": "string"
        },
        "moRefId": {
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the host.",
          "type": "string"
        },
        "inventoryItemId": {
          "description": "Gets or sets the inventory Item ID for the host.",
          "type": "string"
        },
        "moName": {
          "description": "Gets or sets the vCenter Managed Object name for the host.",
          "type": "string",
          "readOnly": true
        },
        "statuses": {
          "description": "The resource status information.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          }
        },
        "customResourceName": {
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "type": "string",
          "readOnly": true
        },
        "datastoreIds": {
          "description": "Gets or sets the datastore ARM ids.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "networkIds": {
          "description": "Gets or sets the network ARM ids.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Host": {
      "description": "Define the host.",
      "required": [
        "location",
        "properties"
      ],
      "type": "object",
      "x-ms-azure-resource": true,
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/HostProperties"
        },
        "location": {
          "description": "Gets or sets the location.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        },
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      }
    },
    "HostsList": {
      "description": "List of Hosts.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of Hosts.",
          "type": "string"
        },
        "value": {
          "description": "Array of Hosts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Host"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "DatastoreProperties": {
      "description": "Describes the properties of a Datastore.",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "Gets or sets a unique identifier for this resource.",
          "type": "string",
          "readOnly": true
        },
        "vCenterId": {
          "description": "Gets or sets the ARM Id of the vCenter resource in which this datastore resides.",
          "type": "string"
        },
        "moRefId": {
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the datastore.",
          "type": "string"
        },
        "inventoryItemId": {
          "description": "Gets or sets the inventory Item ID for the datastore.",
          "type": "string"
        },
        "moName": {
          "description": "Gets or sets the vCenter Managed Object name for the datastore.",
          "type": "string",
          "readOnly": true
        },
        "statuses": {
          "description": "The resource status information.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          }
        },
        "customResourceName": {
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "type": "string",
          "readOnly": true
        },
        "capacityGB": {
          "description": "Gets or sets Maximum capacity of this datastore in GBs.",
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "freeSpaceGB": {
          "description": "Gets or sets Available space of this datastore in GBs.",
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "provisioningState": {
          "$ref": "#/definitions/ResourceProvisioningState",
          "description": "Provisioning state of the resource.",
          "readOnly": true
        }
      }
    },
    "ResourceProvisioningState": {
      "type": "string",
      "description": "The current deployment state of resource.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Provisioning",
        "Updating",
        "Deleting",
        "Accepted",
        "Created"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true
      }
    },
    "Datastore": {
      "description": "Define the datastore.",
      "required": [
        "location",
        "properties"
      ],
      "type": "object",
      "x-ms-azure-resource": true,
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/DatastoreProperties"
        },
        "location": {
          "description": "Gets or sets the location.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        },
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      }
    },
    "DatastoresList": {
      "description": "List of Datastores.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of Datastores.",
          "type": "string"
        },
        "value": {
          "description": "Array of Datastores",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Datastore"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "VirtualMachineTemplate": {
      "description": "Define the virtualMachineTemplate.",
      "required": [
        "location",
        "properties"
      ],
      "type": "object",
      "x-ms-azure-resource": true,
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/VirtualMachineTemplateProperties"
        },
        "location": {
          "description": "Gets or sets the location.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        },
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      }
    },
    "VirtualMachineTemplatesList": {
      "description": "List of VirtualMachineTemplates.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of VirtualMachineTemplates.",
          "type": "string"
        },
        "value": {
          "description": "Array of VirtualMachineTemplates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualMachineTemplate"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "VirtualNetworkProperties": {
      "description": "Describes the properties of a Virtual Network.",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "Gets or sets a unique identifier for this resource.",
          "type": "string",
          "readOnly": true
        },
        "vCenterId": {
          "description": "Gets or sets the ARM Id of the vCenter resource in which this template resides.",
          "type": "string"
        },
        "moRefId": {
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual network.",
          "type": "string"
        },
        "inventoryItemId": {
          "description": "Gets or sets the inventory Item ID for the virtual network.",
          "type": "string"
        },
        "moName": {
          "description": "Gets or sets the vCenter Managed Object name for the virtual network.",
          "type": "string",
          "readOnly": true
        },
        "customResourceName": {
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "type": "string",
          "readOnly": true
        },
        "statuses": {
          "description": "The resource status information.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          }
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VirtualNetwork": {
      "description": "Define the virtualNetwork.",
      "required": [
        "location",
        "properties"
      ],
      "type": "object",
      "x-ms-azure-resource": true,
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/VirtualNetworkProperties"
        },
        "location": {
          "description": "Gets or sets the location.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        },
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      }
    },
    "VirtualNetworksList": {
      "description": "List of VirtualNetworks.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of VirtualNetworks.",
          "type": "string"
        },
        "value": {
          "description": "Array of VirtualNetworks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetwork"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "NetworkInterfaceUpdate": {
      "description": "Defines the network interface update.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name of the network interface.",
          "type": "string"
        },
        "networkId": {
          "description": "Gets or sets the ARM Id of the network resource to connect the virtual machine.",
          "type": "string"
        },
        "nicType": {
          "description": "NIC type",
          "$ref": "#/definitions/NICType"
        },
        "powerOnBoot": {
          "description": "Gets or sets the power on boot.",
          "$ref": "#/definitions/PowerOnBootOption"
        },
        "deviceKey": {
          "format": "int32",
          "description": "Gets or sets the device key value.",
          "type": "integer"
        }
      }
    },
    "NetworkInterface": {
      "description": "Network Interface model",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name of the network interface.",
          "type": "string"
        },
        "label": {
          "description": "Gets or sets the label of the virtual network in vCenter that the nic is connected to.",
          "type": "string",
          "readOnly": true
        },
        "ipAddresses": {
          "description": "Gets or sets the nic ip addresses.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "macAddress": {
          "description": "Gets or sets the NIC MAC address.",
          "type": "string",
          "readOnly": true
        },
        "networkId": {
          "description": "Gets or sets the ARM Id of the network resource to connect the virtual machine.",
          "type": "string"
        },
        "nicType": {
          "description": "NIC type",
          "$ref": "#/definitions/NICType"
        },
        "powerOnBoot": {
          "description": "Gets or sets the power on boot.",
          "$ref": "#/definitions/PowerOnBootOption"
        },
        "networkMoRefId": {
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network\r\nthat the nic is connected to.",
          "type": "string",
          "readOnly": true
        },
        "networkMoName": {
          "description": "Gets or sets the name of the virtual network in vCenter that the nic is connected to.",
          "type": "string",
          "readOnly": true
        },
        "deviceKey": {
          "format": "int32",
          "description": "Gets or sets the device key value.",
          "type": "integer"
        },
        "ipSettings": {
          "description": "Gets or sets the ipsettings.",
          "$ref": "#/definitions/NicIPSettings"
        }
      }
    },
    "PowerOnBootOption": {
      "description": "Defines the options for power on boot.",
      "enum": [
        "enabled",
        "disabled"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "PowerOnBootOption"
      }
    },
    "DiskMode": {
      "description": "Defines the different types of disk modes.",
      "enum": [
        "persistent",
        "independent_persistent",
        "independent_nonpersistent"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "DiskMode"
      }
    },
    "DiskType": {
      "description": "Defines the different types of disks.",
      "enum": [
        "flat",
        "pmem",
        "rawphysical",
        "rawvirtual",
        "sparse",
        "sesparse",
        "unknown"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "DiskType"
      }
    },
    "NICType": {
      "description": "NIC type",
      "type": "string",
      "enum": [
        "vmxnet3",
        "vmxnet2",
        "vmxnet",
        "e1000",
        "e1000e",
        "pcnet32"
      ],
      "x-ms-enum": {
        "modelAsString": true,
        "name": "NICType"
      }
    },
    "FirmwareType": {
      "description": "Firmware type",
      "type": "string",
      "enum": [
        "bios",
        "efi"
      ],
      "x-ms-enum": {
        "modelAsString": true,
        "name": "FirmwareType"
      }
    },
    "IPAddressAllocationMethod": {
      "description": "IP address allocation method.",
      "enum": [
        "unset",
        "dynamic",
        "static",
        "linklayer",
        "random",
        "other"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "IPAddressAllocationMethod"
      }
    },
    "NicIPAddressSettings": {
      "description": "IP address information for a virtual network adapter reported by the fabric.",
      "type": "object",
      "properties": {
        "allocationMethod": {
          "description": "Gets the ip address allocation method.",
          "type": "string",
          "readOnly": true
        },
        "ipAddress": {
          "description": "Gets the ip address for the nic.",
          "type": "string",
          "readOnly": true
        },
        "subnetMask": {
          "description": "Gets the mask.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "NicIPSettings": {
      "description": "Defines the network interface ip settings.",
      "type": "object",
      "properties": {
        "allocationMethod": {
          "description": "Gets or sets the nic allocation method.",
          "$ref": "#/definitions/IPAddressAllocationMethod"
        },
        "dnsServers": {
          "description": "Gets or sets the dns servers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "description": "Gets or sets the gateway.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ipAddress": {
          "description": "Gets or sets the ip address for the nic.",
          "type": "string"
        },
        "subnetMask": {
          "description": "Gets or sets the mask.",
          "type": "string"
        },
        "primaryWinsServer": {
          "description": "Gets or sets the primary server.",
          "type": "string",
          "readOnly": true
        },
        "secondaryWinsServer": {
          "description": "Gets or sets the secondary server.",
          "type": "string",
          "readOnly": true
        },
        "ipAddressInfo": {
          "description": "Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information above plus IPV6 information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicIPAddressSettings"
          },
          "readOnly": true
        }
      }
    },
    "operation": {
      "description": "Operation provided by provider",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the operation"
        },
        "isDataAction": {
          "description": "Indicates whether the operation is data action or not.",
          "type": "boolean"
        },
        "display": {
          "type": "object",
          "description": "Properties of the operation",
          "properties": {
            "provider": {
              "type": "string",
              "description": "Provider name"
            },
            "resource": {
              "type": "string",
              "description": "Resource name"
            },
            "operation": {
              "type": "string",
              "description": "Operation name"
            },
            "description": {
              "type": "string",
              "description": "Description of the operation"
            }
          }
        }
      }
    },
    "operationsList": {
      "description": "Lists the operations available.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of operations.",
          "type": "string"
        },
        "value": {
          "description": "Array of operations",
          "type": "array",
          "items": {
            "description": "Operation.",
            "$ref": "#/definitions/operation"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "InventoryItemsList": {
      "description": "List of InventoryItems.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of InventoryItems.",
          "type": "string"
        },
        "value": {
          "description": "Array of InventoryItems",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItem"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "InventoryItem": {
      "description": "Defines the inventory item.",
      "required": [
        "properties"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ProxyResource",
          "description": "The resource model definition for an Azure Resource Manager proxy resource. It will have everything other than required location and tags."
        }
      ],
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/InventoryItemProperties"
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      },
      "x-ms-azure-resource": true
    },
    "InventoryItemProperties": {
      "description": "Describes the properties of an Inventory Item.",
      "required": [
        "inventoryType"
      ],
      "discriminator": "inventoryType",
      "type": "object",
      "properties": {
        "inventoryType": {
          "description": "They inventory type.",
          "$ref": "#/definitions/InventoryType"
        },
        "managedResourceId": {
          "description": "Gets or sets the tracked resource id corresponding to the inventory resource.",
          "type": "string"
        },
        "moRefId": {
          "description": "Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.",
          "type": "string"
        },
        "moName": {
          "description": "Gets or sets the vCenter Managed Object name for the inventory item.",
          "type": "string"
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResourcePoolInventoryItem": {
      "description": "The resource pool inventory item.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ],
      "properties": {
        "parent": {
          "description": "Parent resourcePool inventory resource details.",
          "$ref": "#/definitions/InventoryItemDetails"
        }
      },
      "x-ms-discriminator-value": "ResourcePool"
    },
    "VirtualMachineInventoryItem": {
      "description": "The VM inventory item.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ],
      "properties": {
        "osType": {
          "description": "Gets or sets the type of the os.",
          "$ref": "#/definitions/OsType"
        },
        "osName": {
          "description": "Gets or sets os name.",
          "type": "string"
        },
        "ipAddresses": {
          "description": "Gets or sets the nic ip addresses.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "folderPath": {
          "description": "Gets or sets the folder path of the vm.",
          "type": "string"
        },
        "host": {
          "description": "Host inventory resource details.",
          "$ref": "#/definitions/InventoryItemDetails"
        },
        "resourcePool": {
          "description": "ResourcePool inventory resource details.",
          "$ref": "#/definitions/InventoryItemDetails"
        },
        "cluster": {
          "description": "Cluster inventory resource details.",
          "$ref": "#/definitions/InventoryItemDetails"
        },
        "instanceUuid": {
          "description": "Gets or sets the instance uuid of the vm.",
          "type": "string"
        },
        "smbiosUuid": {
          "type": "string",
          "description": "Gets or sets the SMBIOS UUID of the vm."
        },
        "powerState": {
          "description": "Gets the power state of the virtual machine.",
          "type": "string",
          "readOnly": true
        },
        "toolsRunningStatus": {
          "description": "Gets or sets the current running status of VMware Tools running in the guest operating system.",
          "type": "string",
          "readOnly": true
        },
        "toolsVersionStatus": {
          "description": "Gets or sets the current version status of VMware Tools installed in the guest operating system.",
          "type": "string",
          "readOnly": true
        },
        "toolsVersion": {
          "description": "Gets or sets the current version of VMware Tools.",
          "type": "string",
          "readOnly": true
        }
      },
      "x-ms-discriminator-value": "VirtualMachine"
    },
    "VirtualMachineTemplateInventoryItem": {
      "description": "The VM Template inventory item.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ],
      "properties": {
        "memorySizeMB": {
          "format": "int32",
          "description": "Gets or sets memory size in MBs for the template.",
          "type": "integer"
        },
        "numCPUs": {
          "format": "int32",
          "description": "Gets or sets the number of vCPUs for the template.",
          "type": "integer"
        },
        "numCoresPerSocket": {
          "format": "int32",
          "description": "Gets or sets the number of cores per socket for the template.\r\nDefaults to 1 if unspecified.",
          "type": "integer"
        },
        "osType": {
          "description": "Gets or sets the type of the os.",
          "$ref": "#/definitions/OsType"
        },
        "osName": {
          "description": "Gets or sets os name.",
          "type": "string"
        },
        "toolsVersionStatus": {
          "description": "Gets or sets the current version status of VMware Tools installed in the guest operating system.",
          "type": "string",
          "readOnly": true
        },
        "toolsVersion": {
          "description": "Gets or sets the current version of VMware Tools.",
          "type": "string",
          "readOnly": true
        },
        "folderPath": {
          "description": "Gets or sets the folder path of the template.",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "VirtualMachineTemplate"
    },
    "VirtualNetworkInventoryItem": {
      "description": "The Virtual network inventory item.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ],
      "x-ms-discriminator-value": "VirtualNetwork"
    },
    "ClusterInventoryItem": {
      "description": "The cluster inventory item.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ],
      "x-ms-discriminator-value": "Cluster"
    },
    "DatastoreInventoryItem": {
      "description": "The datastore inventory item.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ],
      "properties": {
        "capacityGB": {
          "format": "int64",
          "description": "Gets or sets Maximum capacity of this datastore, in GBs.",
          "type": "integer"
        },
        "freeSpaceGB": {
          "format": "int64",
          "description": "Gets or sets Available space of this datastore, in GBs.",
          "type": "integer"
        }
      },
      "x-ms-discriminator-value": "Datastore"
    },
    "HostInventoryItem": {
      "description": "The host inventory item.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ],
      "properties": {
        "parent": {
          "description": "Parent host inventory resource details.",
          "$ref": "#/definitions/InventoryItemDetails"
        }
      },
      "x-ms-discriminator-value": "Host"
    },
    "InventoryType": {
      "type": "string",
      "description": "The inventory type.",
      "enum": [
        "ResourcePool",
        "VirtualMachine",
        "VirtualMachineTemplate",
        "VirtualNetwork",
        "Cluster",
        "Datastore",
        "Host"
      ],
      "x-ms-enum": {
        "name": "InventoryType",
        "modelAsString": true
      }
    },
    "InventoryItemDetails": {
      "description": "Describes the properties of an Inventory Item reference.",
      "type": "object",
      "properties": {
        "inventoryItemId": {
          "description": "Gets or sets the inventory Item ID for the resource.",
          "type": "string"
        },
        "moName": {
          "description": "Gets or sets the vCenter Managed Object name for the resource.",
          "type": "string"
        },
        "inventoryType": {
          "description": "The inventory type.",
          "$ref": "#/definitions/InventoryType"
        }
      }
    },
    "HybridIdentityMetadataList": {
      "description": "List of HybridIdentityMetadata.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of HybridIdentityMetadata.",
          "type": "string"
        },
        "value": {
          "description": "Array of HybridIdentityMetadata",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HybridIdentityMetadata"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "HybridIdentityMetadata": {
      "description": "Defines the HybridIdentityMetadata.",
      "required": [
        "properties"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ProxyResource",
          "description": "The resource model definition for an Azure Resource Manager proxy resource. It will have everything other than required location and tags."
        }
      ],
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/HybridIdentityMetadataProperties"
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        }
      },
      "x-ms-azure-resource": true
    },
    "HybridIdentityMetadataProperties": {
      "description": "Describes the properties of Hybrid Identity Metadata for a Virtual Machine.",
      "type": "object",
      "properties": {
        "vmId": {
          "description": "Gets or sets the Vm Id.",
          "type": "string"
        },
        "publicKey": {
          "description": "Gets or sets the Public Key.",
          "type": "string"
        },
        "identity": {
          "$ref": "#/definitions/Identity",
          "description": "The identity of the resource.",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Identity": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "principalId": {
          "readOnly": true,
          "type": "string",
          "description": "The principal id of managed service identity."
        },
        "tenantId": {
          "readOnly": true,
          "type": "string",
          "description": "The tenant of managed service identity."
        },
        "type": {
          "type": "string",
          "description": "The type of managed service identity.",
          "enum": [
            "None",
            "SystemAssigned"
          ],
          "x-ms-enum": {
            "name": "IdentityType",
            "modelAsString": true
          }
        }
      },
      "description": "Managed service identity."
    },
    "MachineExtension": {
      "x-ms-azure-resource": true,
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/MachineExtensionProperties",
          "description": "Describes Machine Extension Properties."
        },
        "location": {
          "description": "Gets or sets the location.",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        },
        "tags": {
          "description": "Gets or sets the Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        }
      },
      "description": "Describes a Machine Extension."
    },
    "MachineExtensionUpdate": {
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/MachineExtensionUpdateProperties",
          "description": "Describes Machine Extension Update Properties."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ResourcePatch"
        }
      ],
      "description": "Describes a Machine Extension Update."
    },
    "MachineExtensionProperties": {
      "type": "object",
      "properties": {
        "forceUpdateTag": {
          "type": "string",
          "description": "How the extension handler should be forced to update even if the extension configuration has not changed."
        },
        "publisher": {
          "type": "string",
          "description": "The name of the extension handler publisher."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of the extension; an example is \"CustomScriptExtension\"."
        },
        "typeHandlerVersion": {
          "type": "string",
          "description": "Specifies the version of the script handler."
        },
        "enableAutomaticUpgrade": {
          "type": "boolean",
          "description": "Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available."
        },
        "autoUpgradeMinorVersion": {
          "type": "boolean",
          "description": "Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
        },
        "settings": {
          "type": "object",
          "description": "Json formatted public settings for the extension."
        },
        "protectedSettings": {
          "type": "object",
          "description": "The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.",
          "x-ms-secret": true
        },
        "provisioningState": {
          "readOnly": true,
          "type": "string",
          "description": "The provisioning state, which only appears in the response."
        },
        "instanceView": {
          "allOf": [
            {
              "$ref": "#/definitions/MachineExtensionInstanceView"
            }
          ],
          "description": "The machine extension instance view."
        }
      },
      "description": "Describes the properties of a Machine Extension."
    },
    "MachineExtensionUpdateProperties": {
      "type": "object",
      "properties": {
        "forceUpdateTag": {
          "type": "string",
          "description": "How the extension handler should be forced to update even if the extension configuration has not changed."
        },
        "publisher": {
          "type": "string",
          "description": "The name of the extension handler publisher."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of the extension; an example is \"CustomScriptExtension\"."
        },
        "typeHandlerVersion": {
          "type": "string",
          "description": "Specifies the version of the script handler."
        },
        "enableAutomaticUpgrade": {
          "type": "boolean",
          "description": "Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available."
        },
        "autoUpgradeMinorVersion": {
          "type": "boolean",
          "description": "Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
        },
        "settings": {
          "type": "object",
          "description": "Json formatted public settings for the extension."
        },
        "protectedSettings": {
          "type": "object",
          "description": "The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.",
          "x-ms-secret": true
        }
      },
      "description": "Describes the properties of a Machine Extension."
    },
    "MachineExtensionInstanceView": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "The machine extension name."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Specifies the type of the extension; an example is \"CustomScriptExtension\"."
        },
        "typeHandlerVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Specifies the version of the script handler."
        },
        "status": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "readOnly": true,
              "description": "The status code."
            },
            "level": {
              "type": "string",
              "readOnly": true,
              "description": "The level code.",
              "enum": [
                "Info",
                "Warning",
                "Error"
              ],
              "x-ms-enum": {
                "name": "StatusLevelTypes",
                "modelAsString": true
              }
            },
            "displayStatus": {
              "type": "string",
              "readOnly": true,
              "description": "The short localizable label for the status."
            },
            "message": {
              "type": "string",
              "readOnly": true,
              "description": "The detailed status message, including for alerts and error messages."
            },
            "time": {
              "type": "string",
              "readOnly": true,
              "format": "date-time",
              "description": "The time of the status."
            }
          },
          "description": "Instance view status."
        }
      },
      "description": "Describes the Machine Extension Instance View."
    },
    "MachineExtensionsListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineExtension"
          },
          "description": "The list of extensions"
        },
        "nextLink": {
          "type": "string",
          "description": "The uri to fetch the next page of machine extensions. Call ListNext() with this to fetch the next page of extensions."
        }
      },
      "description": "Describes the Machine Extensions List Result."
    },
    "TargetVersion": {
      "type": "string",
      "description": "Extension Upgrade Target Version."
    },
    "ExtensionTargetProperties": {
      "type": "object",
      "properties": {
        "targetVersion": {
          "type": "object",
          "$ref": "#/definitions/TargetVersion",
          "description": "Properties for the specified Extension to Upgrade."
        }
      },
      "description": "Describes the Machine Extension Target Version Properties"
    },
    "ExtensionTarget": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "$ref": "#/definitions/ExtensionTargetProperties"
      },
      "description": "Describes the Machine Extension Target Properties"
    },
    "MachineExtensionUpgrade": {
      "type": "object",
      "properties": {
        "extensionTargets": {
          "$ref": "#/definitions/ExtensionTarget",
          "description": "Describes the Extension Target Properties."
        }
      },
      "description": "Describes the Machine Extension Upgrade Properties"
    },
    "ProvisioningAction": {
      "description": "Defines the different types of operations for guest agent.",
      "enum": [
        "install",
        "uninstall",
        "repair"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "ProvisioningAction"
      }
    },
    "GuestCredential": {
      "description": "Username / Password Credentials to connect to guest.",
      "type": "object",
      "properties": {
        "username": {
          "description": "Gets or sets username to connect with the guest.",
          "type": "string"
        },
        "password": {
          "description": "Gets or sets the password to connect with the guest.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "update"
          ],
          "x-ms-secret": true
        }
      }
    },
    "HttpProxyConfiguration": {
      "description": "HTTP Proxy configuration for the VM.",
      "type": "object",
      "properties": {
        "httpsProxy": {
          "description": "Gets or sets httpsProxy url.",
          "type": "string"
        }
      }
    },
    "GuestAgentList": {
      "description": "List of GuestAgent.",
      "type": "object",
      "properties": {
        "nextLink": {
          "description": "Url to follow for getting next page of GuestAgent.",
          "type": "string"
        },
        "value": {
          "description": "Array of GuestAgent",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GuestAgent"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "GuestAgent": {
      "description": "Defines the GuestAgent.",
      "required": [
        "properties"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ProxyResource",
          "description": "The resource model definition for an Azure Resource Manager proxy resource. It will have everything other than required location and tags."
        }
      ],
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Resource properties.",
          "$ref": "#/definitions/GuestAgentProperties"
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData",
          "description": "The system data."
        }
      },
      "x-ms-azure-resource": true
    },
    "GuestAgentProperties": {
      "description": "Describes the properties of a Virtual Machine Guest Agent.",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "Gets or sets a unique identifier for this resource.",
          "type": "string",
          "readOnly": true
        },
        "credentials": {
          "description": "Username / Password Credentials to provision guest agent.",
          "$ref": "#/definitions/GuestCredential"
        },
        "httpProxyConfig": {
          "description": "HTTP Proxy configuration for the VM.",
          "$ref": "#/definitions/HttpProxyConfiguration"
        },
        "provisioningAction": {
          "description": "Gets or sets the guest agent provisioning action.",
          "$ref": "#/definitions/ProvisioningAction",
          "type": "string"
        },
        "status": {
          "description": "Gets or sets the guest agent status.",
          "type": "string",
          "readOnly": true
        },
        "customResourceName": {
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "type": "string",
          "readOnly": true
        },
        "statuses": {
          "description": "The resource status information.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          }
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VirtualMachineAssessPatchesResult": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "readOnly": true,
          "description": "The overall success or failure status of the operation. It remains \"InProgress\" until the operation completes. At that point it will become \"Unknown\", \"Failed\", \"Succeeded\", or \"CompletedWithWarnings.\"",
          "enum": [
            "Unknown",
            "InProgress",
            "Failed",
            "Succeeded",
            "CompletedWithWarnings"
          ],
          "x-ms-enum": {
            "name": "PatchOperationStatus",
            "modelAsString": true
          }
        },
        "assessmentActivityId": {
          "type": "string",
          "readOnly": true,
          "description": "The activity ID of the operation that produced this result."
        },
        "rebootPending": {
          "type": "boolean",
          "readOnly": true,
          "description": "The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred."
        },
        "availablePatchCountByClassification": {
          "$ref": "#/definitions/AvailablePatchCountByClassification",
          "description": "Summarization of patches available for installation on the machine by classification."
        },
        "startDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The UTC timestamp when the operation began."
        },
        "lastModifiedDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The UTC timestamp when the operation finished."
        },
        "startedBy": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "User",
            "Platform"
          ],
          "x-ms-enum": {
            "name": "PatchOperationStartedBy",
            "modelAsString": true
          },
          "description": "Indicates if operation was triggered by user or by platform."
        },
        "patchServiceUsed": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Unknown",
            "WU",
            "WU_WSUS",
            "YUM",
            "APT",
            "Zypper"
          ],
          "x-ms-enum": {
            "name": "PatchServiceUsed",
            "modelAsString": true
          },
          "description": "Specifies the patch service used for the operation."
        },
        "osType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Windows",
            "Linux"
          ],
          "x-ms-enum": {
            "name": "OsTypeUM",
            "modelAsString": true
          },
          "description": "The operating system type of the machine."
        },
        "errorDetails": {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorDetail",
          "readOnly": true,
          "description": "The errors that were encountered during execution of the operation. The details array contains the list of them."
        }
      },
      "description": "Describes the properties of an AssessPatches result."
    },
    "AvailablePatchCountByClassification": {
      "type": "object",
      "properties": {
        "security": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Number of security patches available for installation."
        },
        "critical": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Number of critical patches available for installation."
        },
        "definition": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Number of definition patches available for installation."
        },
        "updateRollup": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Number of update Rollup patches available for installation."
        },
        "featurePack": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Number of feature pack patches available for installation."
        },
        "servicePack": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Number of service pack patches available for installation."
        },
        "tools": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Number of tools patches available for installation."
        },
        "updates": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Number of updates category patches available for installation."
        },
        "other": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Number of other patches available for installation."
        }
      },
      "description": "Summarization of patches available for installation on the machine by classification."
    },
    "VirtualMachineInstallPatchesParameters": {
      "type": "object",
      "properties": {
        "maximumDuration": {
          "type": "string",
          "description": "Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such as PT4H (4 hours)"
        },
        "rebootSetting": {
          "type": "string",
          "description": "Defines when it is acceptable to reboot a VM during a software update operation.",
          "enum": [
            "IfRequired",
            "Never",
            "Always"
          ],
          "x-ms-enum": {
            "name": "VMGuestPatchRebootSetting",
            "modelAsString": true
          }
        },
        "windowsParameters": {
          "$ref": "#/definitions/WindowsParameters",
          "description": "Input for InstallPatches on a Windows VM, as directly received by the API"
        },
        "linuxParameters": {
          "$ref": "#/definitions/LinuxParameters",
          "description": "Input for InstallPatches on a Linux VM, as directly received by the API"
        }
      },
      "required": [
        "maximumDuration",
        "rebootSetting"
      ],
      "description": "Input for InstallPatches as directly received by the API"
    },
    "WindowsParameters": {
      "type": "object",
      "properties": {
        "classificationsToInclude": {
          "type": "array",
          "description": "The update classifications to select when installing patches for Windows.",
          "items": {
            "type": "string",
            "enum": [
              "Critical",
              "Security",
              "UpdateRollUp",
              "FeaturePack",
              "ServicePack",
              "Definition",
              "Tools",
              "Updates"
            ],
            "x-ms-enum": {
              "name": "VMGuestPatchClassification_Windows",
              "modelAsString": true
            }
          }
        },
        "kbNumbersToInclude": {
          "type": "array",
          "description": "Kbs to include in the patch operation",
          "items": {
            "type": "string"
          }
        },
        "kbNumbersToExclude": {
          "type": "array",
          "description": "Kbs to exclude in the patch operation",
          "items": {
            "type": "string"
          }
        },
        "excludeKbsRequiringReboot": {
          "type": "boolean",
          "description": "Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true."
        },
        "maxPatchPublishDate": {
          "type": "string",
          "format": "date-time",
          "description": "This is used to install patches that were published on or before this given max published date."
        }
      },
      "description": "Input for InstallPatches on a Windows VM, as directly received by the API"
    },
    "LinuxParameters": {
      "type": "object",
      "properties": {
        "classificationsToInclude": {
          "type": "array",
          "description": "The update classifications to select when installing patches for Linux.",
          "items": {
            "type": "string",
            "enum": [
              "Critical",
              "Security",
              "Other"
            ],
            "x-ms-enum": {
              "name": "VMGuestPatchClassification_Linux",
              "modelAsString": true
            }
          }
        },
        "packageNameMasksToInclude": {
          "type": "array",
          "description": "packages to include in the patch operation. Format: packageName_packageVersion",
          "items": {
            "type": "string"
          }
        },
        "packageNameMasksToExclude": {
          "type": "array",
          "description": "packages to exclude in the patch operation. Format: packageName_packageVersion",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Input for InstallPatches on a Linux VM, as directly received by the API"
    },
    "VirtualMachineInstallPatchesResult": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "readOnly": true,
          "description": "The overall success or failure status of the operation. It remains \"InProgress\" until the operation completes. At that point it will become \"Failed\", \"Succeeded\", \"Unknown\" or \"CompletedWithWarnings.\"",
          "enum": [
            "Unknown",
            "InProgress",
            "Failed",
            "Succeeded",
            "CompletedWithWarnings"
          ],
          "x-ms-enum": {
            "name": "PatchOperationStatus",
            "modelAsString": true
          }
        },
        "installationActivityId": {
          "type": "string",
          "readOnly": true,
          "description": "The activity ID of the operation that produced this result."
        },
        "rebootStatus": {
          "type": "string",
          "readOnly": true,
          "description": "The reboot state of the VM following completion of the operation.",
          "enum": [
            "Unknown",
            "NotNeeded",
            "Required",
            "Started",
            "Failed",
            "Completed"
          ],
          "x-ms-enum": {
            "name": "VMGuestPatchRebootStatus",
            "modelAsString": true
          }
        },
        "maintenanceWindowExceeded": {
          "type": "boolean",
          "readOnly": true,
          "description": "Whether the operation ran out of time before it completed all its intended actions."
        },
        "excludedPatchCount": {
          "type": "integer",
          "readOnly": true,
          "format": "int32",
          "description": "The number of patches that were not installed due to the user blocking their installation."
        },
        "notSelectedPatchCount": {
          "type": "integer",
          "readOnly": true,
          "format": "int32",
          "description": "The number of patches that were detected as available for install, but did not meet the operation's criteria."
        },
        "pendingPatchCount": {
          "type": "integer",
          "readOnly": true,
          "format": "int32",
          "description": "The number of patches that were identified as meeting the installation criteria, but were not able to be installed. Typically this happens when maintenanceWindowExceeded == true."
        },
        "installedPatchCount": {
          "type": "integer",
          "readOnly": true,
          "format": "int32",
          "description": "The number of patches successfully installed."
        },
        "failedPatchCount": {
          "type": "integer",
          "readOnly": true,
          "format": "int32",
          "description": "The number of patches that could not be installed due to some issue. See errors for details."
        },
        "startDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The UTC timestamp when the operation began."
        },
        "lastModifiedDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The UTC timestamp when the operation finished."
        },
        "startedBy": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "User",
            "Platform"
          ],
          "x-ms-enum": {
            "name": "PatchOperationStartedBy",
            "modelAsString": true
          },
          "description": "Indicates if operation was triggered by user or by platform."
        },
        "patchServiceUsed": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Unknown",
            "WU",
            "WU_WSUS",
            "YUM",
            "APT",
            "Zypper"
          ],
          "x-ms-enum": {
            "name": "PatchServiceUsed",
            "modelAsString": true
          },
          "description": "Specifies the patch service used for the operation."
        },
        "osType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Windows",
            "Linux"
          ],
          "x-ms-enum": {
            "name": "OsTypeUM",
            "modelAsString": true
          },
          "description": "The operating system type of the machine."
        },
        "errorDetails": {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorDetail",
          "readOnly": true,
          "description": "The errors that were encountered during execution of the operation. The details array contains the list of them."
        }
      },
      "description": "The result summary of an installation operation."
    }
  },
  "parameters": {
    "subscriptionId": {
      "in": "path",
      "name": "subscriptionId",
      "description": "The Subscription ID.",
      "required": true,
      "type": "string"
    },
    "api-version": {
      "in": "query",
      "name": "api-version",
      "description": "Client Api Version.",
      "required": true,
      "type": "string"
    },
    "resourceGroupName": {
      "in": "path",
      "name": "resourceGroupName",
      "description": "The Resource Group Name.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
