{
  "swagger": "2.0",
  "info": {
    "title": "Azure Arc VMware Management Service API",
    "version": "2023-12-01",
    "description": "Self service experience for VMware.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "ResourcePools"
    },
    {
      "name": "Clusters"
    },
    {
      "name": "Hosts"
    },
    {
      "name": "Datastores"
    },
    {
      "name": "VCenters"
    },
    {
      "name": "VirtualMachineTemplates"
    },
    {
      "name": "VirtualNetworks"
    },
    {
      "name": "InventoryItems"
    },
    {
      "name": "VirtualMachineInstances"
    },
    {
      "name": "VmInstanceHybridIdentityMetadataOperationGroup"
    },
    {
      "name": "GuestAgents"
    }
  ],
  "paths": {
    "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances": {
      "get": {
        "operationId": "VirtualMachineInstances_List",
        "tags": [
          "VirtualMachineInstances"
        ],
        "description": "Lists all of the virtual machine instances within the specified parent resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VirtualMachineInstancesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetVirtualMachine": {
            "$ref": "./examples/ListVirtualMachineInstances.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default": {
      "get": {
        "operationId": "VirtualMachineInstances_Get",
        "tags": [
          "VirtualMachineInstances"
        ],
        "description": "Retrieves information about a virtual machine instance.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VirtualMachineInstance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetVirtualMachine": {
            "$ref": "./examples/GetVirtualMachineInstance.json"
          }
        }
      },
      "put": {
        "operationId": "VirtualMachineInstances_CreateOrUpdate",
        "tags": [
          "VirtualMachineInstances"
        ],
        "description": "The operation to create or update a virtual machine instance. Please note some properties can be set only during virtual machine instance creation.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "The fully qualified Azure Resource manager identifier of the resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VirtualMachineInstance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'VirtualMachineInstance' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/VirtualMachineInstance"
            }
          },
          "201": {
            "description": "Resource 'VirtualMachineInstance' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/VirtualMachineInstance"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateVirtualMachine": {
            "$ref": "./examples/CreateVirtualMachineInstance.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "VirtualMachineInstances_Update",
        "tags": [
          "VirtualMachineInstances"
        ],
        "description": "The operation to update a virtual machine instance.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "The fully qualified Azure Resource manager identifier of the resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Resource properties to update.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VirtualMachineInstanceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VirtualMachineInstance"
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "UpdateVirtualMachine": {
            "$ref": "./examples/UpdateVirtualMachineInstance.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "VirtualMachineInstances_Delete",
        "tags": [
          "VirtualMachineInstances"
        ],
        "description": "The operation to delete a virtual machine instance.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          },
          {
            "name": "deleteFromHost",
            "in": "query",
            "description": "Whether to delete the VM from the vCenter.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteVirtualMachine": {
            "$ref": "./examples/DeleteVirtualMachineInstance.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/guestAgents": {
      "get": {
        "operationId": "VMInstanceGuestAgents_List",
        "tags": [
          "GuestAgents"
        ],
        "description": "Returns the list of GuestAgent of the given vm.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/GuestAgentList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GuestAgentListByVm": {
            "$ref": "./examples/VMInstanceGuestAgent_ListByVm.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/guestAgents/default": {
      "get": {
        "operationId": "VMInstanceGuestAgents_Get",
        "tags": [
          "GuestAgents"
        ],
        "description": "Implements GuestAgent GET method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/GuestAgent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetGuestAgent": {
            "$ref": "./examples/GetVMInstanceGuestAgent.json"
          }
        }
      },
      "put": {
        "operationId": "VMInstanceGuestAgents_Create",
        "tags": [
          "GuestAgents"
        ],
        "description": "Create Or Update GuestAgent.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "name": "resourceUri",
            "in": "path",
            "description": "The fully qualified Azure Resource manager identifier of the resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GuestAgent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'GuestAgent' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/GuestAgent"
            }
          },
          "201": {
            "description": "Resource 'GuestAgent' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/GuestAgent"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateGuestAgent": {
            "$ref": "./examples/CreateVMInstanceGuestAgent.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "VMInstanceGuestAgents_Delete",
        "tags": [
          "GuestAgents"
        ],
        "description": "Implements GuestAgent DELETE method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteGuestAgent": {
            "$ref": "./examples/DeleteVMInstanceGuestAgent.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/hybridIdentityMetadata": {
      "get": {
        "operationId": "VmInstanceHybridIdentityMetadata_List",
        "tags": [
          "VmInstanceHybridIdentityMetadataOperationGroup"
        ],
        "description": "Returns the list of HybridIdentityMetadata of the given vm.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VmInstanceHybridIdentityMetadataList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "HybridIdentityMetadataListByVm": {
            "$ref": "./examples/HybridIdentityMetadata_ListByVmInstance.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/hybridIdentityMetadata/default": {
      "get": {
        "operationId": "VmInstanceHybridIdentityMetadata_Get",
        "tags": [
          "VmInstanceHybridIdentityMetadataOperationGroup"
        ],
        "description": "Implements HybridIdentityMetadata GET method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VmInstanceHybridIdentityMetadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetHybridIdentityMetadata": {
            "$ref": "./examples/GetVmInstanceHybridIdentityMetadata.json"
          }
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/restart": {
      "post": {
        "operationId": "VirtualMachineInstances_Restart",
        "tags": [
          "VirtualMachineInstances"
        ],
        "description": "The operation to restart a virtual machine instance.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RestartVirtualMachine": {
            "$ref": "./examples/RestartVirtualMachineInstance.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/start": {
      "post": {
        "operationId": "VirtualMachineInstances_Start",
        "tags": [
          "VirtualMachineInstances"
        ],
        "description": "The operation to start a virtual machine instance.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "StartVirtualMachine": {
            "$ref": "./examples/StartVirtualMachineInstance.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/stop": {
      "post": {
        "operationId": "VirtualMachineInstances_Stop",
        "tags": [
          "VirtualMachineInstances"
        ],
        "description": "The operation to power off (stop) a virtual machine instance.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.ResourceManager.ResourceUriParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Virtualmachine stop action payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StopVirtualMachineOptions"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "StopVirtualMachine": {
            "$ref": "./examples/StopVirtualMachineInstance.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/providers/Microsoft.ConnectedVMwarevSphere/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListOperations": {
            "$ref": "./examples/ListOperations.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/clusters": {
      "get": {
        "operationId": "Clusters_List",
        "tags": [
          "Clusters"
        ],
        "description": "List of clusters in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ClustersList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListClusters": {
            "$ref": "./examples/ListClusters.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/datastores": {
      "get": {
        "operationId": "Datastores_List",
        "tags": [
          "Datastores"
        ],
        "description": "List of datastores in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DatastoresList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListDatastores": {
            "$ref": "./examples/ListDatastores.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/hosts": {
      "get": {
        "operationId": "Hosts_List",
        "tags": [
          "Hosts"
        ],
        "description": "List of hosts in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/HostsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListHosts": {
            "$ref": "./examples/ListHosts.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools": {
      "get": {
        "operationId": "ResourcePools_List",
        "tags": [
          "ResourcePools"
        ],
        "description": "List of resourcePools in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ResourcePoolsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListResourcePools": {
            "$ref": "./examples/ListResourcePools.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/vcenters": {
      "get": {
        "operationId": "VCenters_List",
        "tags": [
          "VCenters"
        ],
        "description": "List of vCenters in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VCentersList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListVCenters": {
            "$ref": "./examples/ListVCenters.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates": {
      "get": {
        "operationId": "VirtualMachineTemplates_List",
        "tags": [
          "VirtualMachineTemplates"
        ],
        "description": "List of virtualMachineTemplates in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplatesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListVirtualMachineTemplates": {
            "$ref": "./examples/ListVirtualMachineTemplates.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks": {
      "get": {
        "operationId": "VirtualNetworks_List",
        "tags": [
          "VirtualNetworks"
        ],
        "description": "List of virtualNetworks in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworksList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListVirtualNetworks": {
            "$ref": "./examples/ListVirtualNetworks.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/clusters": {
      "get": {
        "operationId": "Clusters_ListByResourceGroup",
        "tags": [
          "Clusters"
        ],
        "description": "List of clusters in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ClustersList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListClustersByResourceGroup": {
            "$ref": "./examples/ListClustersByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/clusters/{clusterName}": {
      "get": {
        "operationId": "Clusters_Get",
        "tags": [
          "Clusters"
        ],
        "description": "Implements cluster GET method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "clusterName",
            "in": "path",
            "description": "Name of the cluster.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetCluster": {
            "$ref": "./examples/GetCluster.json"
          }
        }
      },
      "put": {
        "operationId": "Clusters_Create",
        "tags": [
          "Clusters"
        ],
        "description": "Create Or Update cluster.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "clusterName",
            "in": "path",
            "description": "The name of the Cluster",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Cluster' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "201": {
            "description": "Resource 'Cluster' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Cluster"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateCluster": {
            "$ref": "./examples/CreateCluster.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Clusters_Update",
        "tags": [
          "Clusters"
        ],
        "description": "API to update certain properties of the cluster resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "clusterName",
            "in": "path",
            "description": "The name of the Cluster",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Resource properties to update.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "UpdateCluster": {
            "$ref": "./examples/UpdateCluster.json"
          }
        }
      },
      "delete": {
        "operationId": "Clusters_Delete",
        "tags": [
          "Clusters"
        ],
        "description": "Implements cluster DELETE method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "clusterName",
            "in": "path",
            "description": "Name of the cluster.",
            "required": true,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteCluster": {
            "$ref": "./examples/DeleteCluster.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/datastores": {
      "get": {
        "operationId": "Datastores_ListByResourceGroup",
        "tags": [
          "Datastores"
        ],
        "description": "List of datastores in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DatastoresList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListDatastoresByResourceGroup": {
            "$ref": "./examples/ListDatastoresByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/datastores/{datastoreName}": {
      "get": {
        "operationId": "Datastores_Get",
        "tags": [
          "Datastores"
        ],
        "description": "Implements datastore GET method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "datastoreName",
            "in": "path",
            "description": "Name of the datastore.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetDatastore": {
            "$ref": "./examples/GetDatastore.json"
          }
        }
      },
      "put": {
        "operationId": "Datastores_Create",
        "tags": [
          "Datastores"
        ],
        "description": "Create Or Update datastore.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "datastoreName",
            "in": "path",
            "description": "The name of the Datastore",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Datastore' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "201": {
            "description": "Resource 'Datastore' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Datastore"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateDatastore": {
            "$ref": "./examples/CreateDatastore.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Datastores_Update",
        "tags": [
          "Datastores"
        ],
        "description": "API to update certain properties of the datastore resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "datastoreName",
            "in": "path",
            "description": "The name of the Datastore",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Resource properties to update.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "UpdateDatastore": {
            "$ref": "./examples/UpdateDatastore.json"
          }
        }
      },
      "delete": {
        "operationId": "Datastores_Delete",
        "tags": [
          "Datastores"
        ],
        "description": "Implements datastore DELETE method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "datastoreName",
            "in": "path",
            "description": "Name of the datastore.",
            "required": true,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteDatastore": {
            "$ref": "./examples/DeleteDatastore.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/hosts": {
      "get": {
        "operationId": "Hosts_ListByResourceGroup",
        "tags": [
          "Hosts"
        ],
        "description": "List of hosts in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/HostsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListHostsByResourceGroup": {
            "$ref": "./examples/ListHostsByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/hosts/{hostName}": {
      "get": {
        "operationId": "Hosts_Get",
        "tags": [
          "Hosts"
        ],
        "description": "Implements host GET method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "hostName",
            "in": "path",
            "description": "Name of the host.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetHost": {
            "$ref": "./examples/GetHost.json"
          }
        }
      },
      "put": {
        "operationId": "Hosts_Create",
        "tags": [
          "Hosts"
        ],
        "description": "Create Or Update host.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "hostName",
            "in": "path",
            "description": "The name of the Host",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Host' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "201": {
            "description": "Resource 'Host' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Host"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateHost": {
            "$ref": "./examples/CreateHost.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Hosts_Update",
        "tags": [
          "Hosts"
        ],
        "description": "API to update certain properties of the host resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "hostName",
            "in": "path",
            "description": "The name of the Host",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Resource properties to update.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "UpdateHost": {
            "$ref": "./examples/UpdateHost.json"
          }
        }
      },
      "delete": {
        "operationId": "Hosts_Delete",
        "tags": [
          "Hosts"
        ],
        "description": "Implements host DELETE method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "hostName",
            "in": "path",
            "description": "Name of the host.",
            "required": true,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteHost": {
            "$ref": "./examples/DeleteHost.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools": {
      "get": {
        "operationId": "ResourcePools_ListByResourceGroup",
        "tags": [
          "ResourcePools"
        ],
        "description": "List of resourcePools in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ResourcePoolsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListResourcePoolsByResourceGroup": {
            "$ref": "./examples/ListResourcePoolsByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/resourcePools/{resourcePoolName}": {
      "get": {
        "operationId": "ResourcePools_Get",
        "tags": [
          "ResourcePools"
        ],
        "description": "Implements resourcePool GET method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "resourcePoolName",
            "in": "path",
            "description": "Name of the resourcePool.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ResourcePool"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetResourcePool": {
            "$ref": "./examples/GetResourcePool.json"
          }
        }
      },
      "put": {
        "operationId": "ResourcePools_Create",
        "tags": [
          "ResourcePools"
        ],
        "description": "Create Or Update resourcePool.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "resourcePoolName",
            "in": "path",
            "description": "The name of the ResourcePool",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResourcePool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'ResourcePool' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/ResourcePool"
            }
          },
          "201": {
            "description": "Resource 'ResourcePool' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/ResourcePool"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateResourcePool": {
            "$ref": "./examples/CreateResourcePool.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "ResourcePools_Update",
        "tags": [
          "ResourcePools"
        ],
        "description": "API to update certain properties of the resourcePool resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "resourcePoolName",
            "in": "path",
            "description": "The name of the ResourcePool",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Resource properties to update.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ResourcePool"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "UpdateResourcePool": {
            "$ref": "./examples/UpdateResourcePool.json"
          }
        }
      },
      "delete": {
        "operationId": "ResourcePools_Delete",
        "tags": [
          "ResourcePools"
        ],
        "description": "Implements resourcePool DELETE method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "resourcePoolName",
            "in": "path",
            "description": "Name of the resourcePool.",
            "required": true,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteResourcePool": {
            "$ref": "./examples/DeleteResourcePool.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters": {
      "get": {
        "operationId": "VCenters_ListByResourceGroup",
        "tags": [
          "VCenters"
        ],
        "description": "List of vCenters in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VCentersList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListVCentersByResourceGroup": {
            "$ref": "./examples/ListVCentersByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}": {
      "get": {
        "operationId": "VCenters_Get",
        "tags": [
          "VCenters"
        ],
        "description": "Implements vCenter GET method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "vcenterName",
            "in": "path",
            "description": "Name of the vCenter.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VCenter"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetVCenter": {
            "$ref": "./examples/GetVCenter.json"
          }
        }
      },
      "put": {
        "operationId": "VCenters_Create",
        "tags": [
          "VCenters"
        ],
        "description": "Create Or Update vCenter.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "vcenterName",
            "in": "path",
            "description": "The name of the VCenter",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VCenter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'VCenter' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/VCenter"
            }
          },
          "201": {
            "description": "Resource 'VCenter' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/VCenter"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateVCenter": {
            "$ref": "./examples/CreateVCenter.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "VCenters_Update",
        "tags": [
          "VCenters"
        ],
        "description": "API to update certain properties of the vCenter resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "vcenterName",
            "in": "path",
            "description": "The name of the VCenter",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Resource properties to update.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VCenter"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "UpdateVCenter": {
            "$ref": "./examples/UpdateVCenter.json"
          }
        }
      },
      "delete": {
        "operationId": "VCenters_Delete",
        "tags": [
          "VCenters"
        ],
        "description": "Implements vCenter DELETE method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "vcenterName",
            "in": "path",
            "description": "Name of the vCenter.",
            "required": true,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteVCenter": {
            "$ref": "./examples/DeleteVCenter.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}/inventoryItems": {
      "get": {
        "operationId": "InventoryItems_ListByVCenter",
        "tags": [
          "InventoryItems"
        ],
        "description": "Returns the list of inventoryItems of the given vCenter.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "vcenterName",
            "in": "path",
            "description": "Name of the vCenter.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/InventoryItemsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "InventoryItemsListByVCenter": {
            "$ref": "./examples/InventoryItems_ListByVCenter.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/vcenters/{vcenterName}/inventoryItems/{inventoryItemName}": {
      "get": {
        "operationId": "InventoryItems_Get",
        "tags": [
          "InventoryItems"
        ],
        "description": "Implements InventoryItem GET method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "vcenterName",
            "in": "path",
            "description": "Name of the vCenter.",
            "required": true,
            "type": "string"
          },
          {
            "name": "inventoryItemName",
            "in": "path",
            "description": "Name of the inventoryItem.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/InventoryItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetInventoryItem": {
            "$ref": "./examples/GetInventoryItem.json"
          }
        }
      },
      "put": {
        "operationId": "InventoryItems_Create",
        "tags": [
          "InventoryItems"
        ],
        "description": "Create Or Update InventoryItem.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "vcenterName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "inventoryItemName",
            "in": "path",
            "description": "The name of the InventoryItem",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InventoryItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'InventoryItem' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/InventoryItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateInventoryItem": {
            "$ref": "./examples/CreateInventoryItem.json"
          }
        }
      },
      "delete": {
        "operationId": "InventoryItems_Delete",
        "tags": [
          "InventoryItems"
        ],
        "description": "Implements inventoryItem DELETE method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "vcenterName",
            "in": "path",
            "description": "Name of the vCenter.",
            "required": true,
            "type": "string"
          },
          {
            "name": "inventoryItemName",
            "in": "path",
            "description": "Name of the inventoryItem.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteInventoryItem": {
            "$ref": "./examples/DeleteInventoryItem.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates": {
      "get": {
        "operationId": "VirtualMachineTemplates_ListByResourceGroup",
        "tags": [
          "VirtualMachineTemplates"
        ],
        "description": "List of virtualMachineTemplates in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplatesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListVirtualMachineTemplatesByResourceGroup": {
            "$ref": "./examples/ListVirtualMachineTemplatesByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineTemplates/{virtualMachineTemplateName}": {
      "get": {
        "operationId": "VirtualMachineTemplates_Get",
        "tags": [
          "VirtualMachineTemplates"
        ],
        "description": "Implements virtual machine template GET method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualMachineTemplateName",
            "in": "path",
            "description": "Name of the virtual machine template resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetVirtualMachineTemplate": {
            "$ref": "./examples/GetVirtualMachineTemplate.json"
          }
        }
      },
      "put": {
        "operationId": "VirtualMachineTemplates_Create",
        "tags": [
          "VirtualMachineTemplates"
        ],
        "description": "Create Or Update virtual machine template.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualMachineTemplateName",
            "in": "path",
            "description": "The name of the VirtualMachineTemplate",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'VirtualMachineTemplate' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplate"
            }
          },
          "201": {
            "description": "Resource 'VirtualMachineTemplate' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplate"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateVirtualMachineTemplate": {
            "$ref": "./examples/CreateVirtualMachineTemplate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "VirtualMachineTemplates_Update",
        "tags": [
          "VirtualMachineTemplates"
        ],
        "description": "API to update certain properties of the virtual machine template resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualMachineTemplateName",
            "in": "path",
            "description": "The name of the VirtualMachineTemplate",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Resource properties to update.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VirtualMachineTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "UpdateVirtualMachineTemplate": {
            "$ref": "./examples/UpdateVirtualMachineTemplate.json"
          }
        }
      },
      "delete": {
        "operationId": "VirtualMachineTemplates_Delete",
        "tags": [
          "VirtualMachineTemplates"
        ],
        "description": "Implements virtual machine template DELETE method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualMachineTemplateName",
            "in": "path",
            "description": "Name of the virtual machine template resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteVirtualMachineTemplate": {
            "$ref": "./examples/DeleteVirtualMachineTemplate.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks": {
      "get": {
        "operationId": "VirtualNetworks_ListByResourceGroup",
        "tags": [
          "VirtualNetworks"
        ],
        "description": "List of virtualNetworks in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworksList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListVirtualNetworksByResourceGroup": {
            "$ref": "./examples/ListVirtualNetworksByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualNetworks/{virtualNetworkName}": {
      "get": {
        "operationId": "VirtualNetworks_Get",
        "tags": [
          "VirtualNetworks"
        ],
        "description": "Implements virtual network GET method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualNetworkName",
            "in": "path",
            "description": "Name of the virtual network resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetVirtualNetwork": {
            "$ref": "./examples/GetVirtualNetwork.json"
          }
        }
      },
      "put": {
        "operationId": "VirtualNetworks_Create",
        "tags": [
          "VirtualNetworks"
        ],
        "description": "Create Or Update virtual network.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualNetworkName",
            "in": "path",
            "description": "The name of the VirtualNetwork",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request payload.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'VirtualNetwork' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "201": {
            "description": "Resource 'VirtualNetwork' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateVirtualNetwork": {
            "$ref": "./examples/CreateVirtualNetwork.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "VirtualNetworks_Update",
        "tags": [
          "VirtualNetworks"
        ],
        "description": "API to update certain properties of the virtual network resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualNetworkName",
            "in": "path",
            "description": "The name of the VirtualNetwork",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Resource properties to update.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResourcePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "UpdateVirtualNetwork": {
            "$ref": "./examples/UpdateVirtualNetwork.json"
          }
        }
      },
      "delete": {
        "operationId": "VirtualNetworks_Delete",
        "tags": [
          "VirtualNetworks"
        ],
        "description": "Implements virtual network DELETE method.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "virtualNetworkName",
            "in": "path",
            "description": "Name of the virtual network resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether force delete was specified.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "DeleteVirtualNetwork": {
            "$ref": "./examples/DeleteVirtualNetwork.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "Cluster": {
      "type": "object",
      "description": "Define the cluster.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ClusterProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "ClusterInventoryItem": {
      "type": "object",
      "description": "The cluster inventory item.",
      "properties": {
        "inventoryType": {
          "type": "string",
          "description": "They inventory type.",
          "enum": [
            "Cluster"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "inventoryType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ]
    },
    "ClusterProperties": {
      "type": "object",
      "description": "Describes the properties of a Cluster.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Gets or sets a unique identifier for this resource.",
          "readOnly": true
        },
        "vCenterId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the vCenter resource in which this cluster resides."
        },
        "moRefId": {
          "type": "string",
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the cluster."
        },
        "inventoryItemId": {
          "type": "string",
          "description": "Gets or sets the inventory Item ID for the cluster."
        },
        "moName": {
          "type": "string",
          "description": "Gets or sets the vCenter Managed Object name for the cluster.",
          "readOnly": true
        },
        "statuses": {
          "type": "array",
          "description": "The resource status information.",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "type"
          ]
        },
        "customResourceName": {
          "type": "string",
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "readOnly": true
        },
        "usedMemoryGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the used physical memory on the cluster in GB.",
          "readOnly": true
        },
        "totalMemoryGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the total amount of physical memory on the cluster in GB.",
          "readOnly": true
        },
        "usedCpuMHz": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the used CPU usage across all cores on the cluster in MHz.",
          "readOnly": true
        },
        "totalCpuMHz": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the max CPU usage across all cores on the cluster in MHz.",
          "readOnly": true
        },
        "datastoreIds": {
          "type": "array",
          "description": "Gets the datastore ARM ids.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "networkIds": {
          "type": "array",
          "description": "Gets the network ARM ids.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Gets the provisioning state.",
          "readOnly": true
        }
      }
    },
    "ClustersList": {
      "type": "object",
      "description": "List of Clusters.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Cluster items on this page",
          "items": {
            "$ref": "#/definitions/Cluster"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "Datastore": {
      "type": "object",
      "description": "Define the datastore.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DatastoreProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "DatastoreInventoryItem": {
      "type": "object",
      "description": "The datastore inventory item.",
      "properties": {
        "capacityGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets Maximum capacity of this datastore, in GBs."
        },
        "freeSpaceGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets Available space of this datastore, in GBs."
        },
        "inventoryType": {
          "type": "string",
          "description": "They inventory type.",
          "enum": [
            "Datastore"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "inventoryType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ]
    },
    "DatastoreProperties": {
      "type": "object",
      "description": "Describes the properties of a Datastore.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Gets or sets a unique identifier for this resource.",
          "readOnly": true
        },
        "vCenterId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the vCenter resource in which this datastore resides."
        },
        "moRefId": {
          "type": "string",
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the datastore."
        },
        "inventoryItemId": {
          "type": "string",
          "description": "Gets or sets the inventory Item ID for the datastore."
        },
        "moName": {
          "type": "string",
          "description": "Gets or sets the vCenter Managed Object name for the datastore.",
          "readOnly": true
        },
        "statuses": {
          "type": "array",
          "description": "The resource status information.",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "type"
          ]
        },
        "customResourceName": {
          "type": "string",
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "readOnly": true
        },
        "capacityGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets Maximum capacity of this datastore in GBs.",
          "readOnly": true
        },
        "freeSpaceGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets Available space of this datastore in GBs.",
          "readOnly": true
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning state of the resource.",
          "readOnly": true
        }
      }
    },
    "DatastoresList": {
      "type": "object",
      "description": "List of Datastores.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Datastore items on this page",
          "items": {
            "$ref": "#/definitions/Datastore"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DiskMode": {
      "type": "string",
      "description": "Defines the different types of disk modes.",
      "enum": [
        "persistent",
        "independent_persistent",
        "independent_nonpersistent"
      ],
      "x-ms-enum": {
        "name": "DiskMode",
        "modelAsString": true,
        "values": [
          {
            "name": "persistent",
            "value": "persistent"
          },
          {
            "name": "independent_persistent",
            "value": "independent_persistent"
          },
          {
            "name": "independent_nonpersistent",
            "value": "independent_nonpersistent"
          }
        ]
      }
    },
    "DiskType": {
      "type": "string",
      "description": "Defines the different types of disks.",
      "enum": [
        "flat",
        "pmem",
        "rawphysical",
        "rawvirtual",
        "sparse",
        "sesparse",
        "unknown"
      ],
      "x-ms-enum": {
        "name": "DiskType",
        "modelAsString": true,
        "values": [
          {
            "name": "flat",
            "value": "flat"
          },
          {
            "name": "pmem",
            "value": "pmem"
          },
          {
            "name": "rawphysical",
            "value": "rawphysical"
          },
          {
            "name": "rawvirtual",
            "value": "rawvirtual"
          },
          {
            "name": "sparse",
            "value": "sparse"
          },
          {
            "name": "sesparse",
            "value": "sesparse"
          },
          {
            "name": "unknown",
            "value": "unknown"
          }
        ]
      }
    },
    "ExtendedLocation": {
      "type": "object",
      "description": "The extended location.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The extended location type."
        },
        "name": {
          "type": "string",
          "description": "The extended location name."
        }
      }
    },
    "FirmwareType": {
      "type": "string",
      "description": "Firmware type",
      "enum": [
        "bios",
        "efi"
      ],
      "x-ms-enum": {
        "name": "FirmwareType",
        "modelAsString": true,
        "values": [
          {
            "name": "bios",
            "value": "bios"
          },
          {
            "name": "efi",
            "value": "efi"
          }
        ]
      }
    },
    "GuestAgent": {
      "type": "object",
      "description": "Defines the GuestAgent.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/GuestAgentProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "GuestAgentList": {
      "type": "object",
      "description": "List of GuestAgent.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The GuestAgent items on this page",
          "items": {
            "$ref": "#/definitions/GuestAgent"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "GuestAgentProperties": {
      "type": "object",
      "description": "Describes the properties of a Virtual Machine Guest Agent.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Gets or sets a unique identifier for this resource.",
          "readOnly": true
        },
        "credentials": {
          "$ref": "#/definitions/GuestCredential",
          "description": "Username / Password Credentials to provision guest agent."
        },
        "privateLinkScopeResourceId": {
          "type": "string",
          "format": "arm-id",
          "description": "The resource id of the private link scope this machine is assigned to, if any."
        },
        "httpProxyConfig": {
          "$ref": "#/definitions/HttpProxyConfiguration",
          "description": "HTTP Proxy configuration for the VM."
        },
        "provisioningAction": {
          "$ref": "#/definitions/ProvisioningAction",
          "description": "Gets or sets the guest agent provisioning action."
        },
        "status": {
          "type": "string",
          "description": "Gets or sets the guest agent status.",
          "readOnly": true
        },
        "customResourceName": {
          "type": "string",
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "readOnly": true
        },
        "statuses": {
          "type": "array",
          "description": "The resource status information.",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "type"
          ]
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Gets the provisioning state.",
          "readOnly": true
        }
      }
    },
    "GuestCredential": {
      "type": "object",
      "description": "Username / Password Credentials to connect to guest.",
      "properties": {
        "username": {
          "type": "string",
          "description": "Gets or sets username to connect with the guest."
        },
        "password": {
          "type": "string",
          "format": "password",
          "description": "Gets or sets the password to connect with the guest.",
          "x-ms-mutability": [
            "update",
            "create"
          ],
          "x-ms-secret": true
        },
        "privateKey": {
          "type": "string",
          "format": "password",
          "description": "Private key used to authenticate to a virtual machine through ssh.",
          "x-ms-secret": true
        }
      }
    },
    "HardwareProfile": {
      "type": "object",
      "description": "Specifies the hardware settings for the virtual machine.",
      "properties": {
        "memorySizeMB": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets memory size in MBs for the vm."
        },
        "numCPUs": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the number of vCPUs for the vm."
        },
        "numCoresPerSocket": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified."
        },
        "cpuHotAddEnabled": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.",
          "readOnly": true
        },
        "cpuHotRemoveEnabled": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.",
          "readOnly": true
        },
        "memoryHotAddEnabled": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether memory can be added while this virtual machine is running.",
          "readOnly": true
        }
      }
    },
    "Host": {
      "type": "object",
      "description": "Define the host.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/HostProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "HostInventoryItem": {
      "type": "object",
      "description": "The host inventory item.",
      "properties": {
        "parent": {
          "$ref": "#/definitions/InventoryItemDetails",
          "description": "Parent host inventory resource details."
        },
        "numCoresPerSocket": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the number of cores per socket on the host.",
          "readOnly": true
        },
        "numSockets": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the number of sockets on the host.",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "Gets or sets the version of the host.",
          "readOnly": true
        },
        "cpuModel": {
          "type": "string",
          "description": "Gets or sets the cpu model of the host.",
          "readOnly": true
        },
        "memorySizeGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the total amount of physical memory on the host in GB.",
          "readOnly": true
        },
        "powerState": {
          "type": "string",
          "description": "Gets or sets the power state of the host.",
          "readOnly": true
        },
        "inventoryType": {
          "type": "string",
          "description": "They inventory type.",
          "enum": [
            "Host"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "inventoryType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ]
    },
    "HostProperties": {
      "type": "object",
      "description": "Describes the properties of a Host.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Gets or sets a unique identifier for this resource.",
          "readOnly": true
        },
        "vCenterId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the vCenter resource in which this host resides."
        },
        "moRefId": {
          "type": "string",
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the host."
        },
        "inventoryItemId": {
          "type": "string",
          "description": "Gets or sets the inventory Item ID for the host."
        },
        "moName": {
          "type": "string",
          "description": "Gets or sets the vCenter Managed Object name for the host.",
          "readOnly": true
        },
        "statuses": {
          "type": "array",
          "description": "The resource status information.",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "type"
          ]
        },
        "customResourceName": {
          "type": "string",
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "readOnly": true
        },
        "overallMemoryUsageGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the used physical memory on the host in GB.",
          "readOnly": true
        },
        "memorySizeGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the total amount of physical memory on the host in GB.",
          "readOnly": true
        },
        "overallCpuUsageMHz": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the used CPU usage across all cores in MHz.",
          "readOnly": true
        },
        "cpuMhz": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the max CPU usage across all cores in MHz.",
          "readOnly": true
        },
        "datastoreIds": {
          "type": "array",
          "description": "Gets the datastore ARM ids.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "networkIds": {
          "type": "array",
          "description": "Gets the network ARM ids.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Gets the provisioning state.",
          "readOnly": true
        }
      }
    },
    "HostsList": {
      "type": "object",
      "description": "List of Hosts.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Host items on this page",
          "items": {
            "$ref": "#/definitions/Host"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "HttpProxyConfiguration": {
      "type": "object",
      "description": "HTTP Proxy configuration for the VM.",
      "properties": {
        "httpsProxy": {
          "type": "string",
          "description": "Gets or sets httpsProxy url."
        }
      }
    },
    "IPAddressAllocationMethod": {
      "type": "string",
      "description": "IP address allocation method.",
      "enum": [
        "unset",
        "dynamic",
        "static",
        "linklayer",
        "random",
        "other"
      ],
      "x-ms-enum": {
        "name": "IPAddressAllocationMethod",
        "modelAsString": true,
        "values": [
          {
            "name": "unset",
            "value": "unset"
          },
          {
            "name": "dynamic",
            "value": "dynamic"
          },
          {
            "name": "static",
            "value": "static"
          },
          {
            "name": "linklayer",
            "value": "linklayer"
          },
          {
            "name": "random",
            "value": "random"
          },
          {
            "name": "other",
            "value": "other"
          }
        ]
      }
    },
    "InfrastructureProfile": {
      "type": "object",
      "description": "Specifies the vCenter infrastructure specific settings for the virtual machine.",
      "properties": {
        "templateId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the template resource to deploy the virtual machine."
        },
        "vCenterId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the vCenter resource in which this resource pool resides."
        },
        "moRefId": {
          "type": "string",
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.",
          "readOnly": true
        },
        "inventoryItemId": {
          "type": "string",
          "description": "Gets or sets the inventory Item ID for the virtual machine."
        },
        "moName": {
          "type": "string",
          "description": "Gets or sets the vCenter Managed Object name for the virtual machine.",
          "readOnly": true
        },
        "folderPath": {
          "type": "string",
          "description": "Gets or sets the folder path of the vm.",
          "readOnly": true
        },
        "instanceUuid": {
          "type": "string",
          "description": "Gets or sets the instance uuid of the vm.",
          "readOnly": true
        },
        "smbiosUuid": {
          "type": "string",
          "description": "Gets or sets the SMBIOS UUID of the vm."
        },
        "firmwareType": {
          "$ref": "#/definitions/FirmwareType",
          "description": "Firmware type"
        },
        "customResourceName": {
          "type": "string",
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "readOnly": true
        }
      }
    },
    "InventoryItem": {
      "type": "object",
      "description": "Defines the inventory item.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/InventoryItemProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "InventoryItemDetails": {
      "type": "object",
      "description": "Describes the properties of an Inventory Item reference.",
      "properties": {
        "inventoryItemId": {
          "type": "string",
          "description": "Gets or sets the inventory Item ID for the resource."
        },
        "moName": {
          "type": "string",
          "description": "Gets or sets the vCenter Managed Object name for the resource."
        },
        "inventoryType": {
          "$ref": "#/definitions/InventoryType",
          "description": "The inventory type."
        }
      }
    },
    "InventoryItemProperties": {
      "type": "object",
      "description": "Describes the properties of an Inventory Item.",
      "properties": {
        "inventoryType": {
          "$ref": "#/definitions/InventoryType",
          "description": "They inventory type."
        },
        "managedResourceId": {
          "type": "string",
          "description": "Gets or sets the tracked resource id corresponding to the inventory resource."
        },
        "moRefId": {
          "type": "string",
          "description": "Gets or sets the MoRef (Managed Object Reference) ID for the inventory item."
        },
        "moName": {
          "type": "string",
          "description": "Gets or sets the vCenter Managed Object name for the inventory item."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Gets the provisioning state.",
          "readOnly": true
        }
      },
      "required": [
        "inventoryType"
      ]
    },
    "InventoryItemsList": {
      "type": "object",
      "description": "List of InventoryItems.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The InventoryItem items on this page",
          "items": {
            "$ref": "#/definitions/InventoryItem"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "InventoryType": {
      "type": "string",
      "description": "The inventory type.",
      "enum": [
        "ResourcePool",
        "VirtualMachine",
        "VirtualMachineTemplate",
        "VirtualNetwork",
        "Cluster",
        "Datastore",
        "Host"
      ],
      "x-ms-enum": {
        "name": "InventoryType",
        "modelAsString": true,
        "values": [
          {
            "name": "ResourcePool",
            "value": "ResourcePool"
          },
          {
            "name": "VirtualMachine",
            "value": "VirtualMachine"
          },
          {
            "name": "VirtualMachineTemplate",
            "value": "VirtualMachineTemplate"
          },
          {
            "name": "VirtualNetwork",
            "value": "VirtualNetwork"
          },
          {
            "name": "Cluster",
            "value": "Cluster"
          },
          {
            "name": "Datastore",
            "value": "Datastore"
          },
          {
            "name": "Host",
            "value": "Host"
          }
        ]
      }
    },
    "NICType": {
      "type": "string",
      "description": "NIC type",
      "enum": [
        "vmxnet3",
        "vmxnet2",
        "vmxnet",
        "e1000",
        "e1000e",
        "pcnet32"
      ],
      "x-ms-enum": {
        "name": "NICType",
        "modelAsString": true,
        "values": [
          {
            "name": "vmxnet3",
            "value": "vmxnet3"
          },
          {
            "name": "vmxnet2",
            "value": "vmxnet2"
          },
          {
            "name": "vmxnet",
            "value": "vmxnet"
          },
          {
            "name": "e1000",
            "value": "e1000"
          },
          {
            "name": "e1000e",
            "value": "e1000e"
          },
          {
            "name": "pcnet32",
            "value": "pcnet32"
          }
        ]
      }
    },
    "NetworkInterface": {
      "type": "object",
      "description": "Network Interface model",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the network interface."
        },
        "label": {
          "type": "string",
          "description": "Gets or sets the label of the virtual network in vCenter that the nic is connected to.",
          "readOnly": true
        },
        "ipAddresses": {
          "type": "array",
          "description": "Gets or sets the nic ip addresses.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "macAddress": {
          "type": "string",
          "description": "Gets or sets the NIC MAC address.",
          "readOnly": true
        },
        "networkId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the network resource to connect the virtual machine."
        },
        "nicType": {
          "$ref": "#/definitions/NICType",
          "description": "NIC type"
        },
        "powerOnBoot": {
          "$ref": "#/definitions/PowerOnBootOption",
          "description": "Gets or sets the power on boot."
        },
        "networkMoRefId": {
          "type": "string",
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network\nthat the nic is connected to.",
          "readOnly": true
        },
        "networkMoName": {
          "type": "string",
          "description": "Gets or sets the name of the virtual network in vCenter that the nic is connected to.",
          "readOnly": true
        },
        "deviceKey": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the device key value."
        },
        "ipSettings": {
          "$ref": "#/definitions/NicIPSettings",
          "description": "Gets or sets the ipsettings."
        }
      }
    },
    "NetworkInterfaceInventory": {
      "type": "object",
      "description": "Inventory Network Interface model",
      "properties": {
        "label": {
          "type": "string",
          "description": "Gets or sets the label of the virtual network in vCenter that the nic is connected to.",
          "readOnly": true
        },
        "ipAddresses": {
          "type": "array",
          "description": "Gets or sets the nic ip addresses.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "macAddress": {
          "type": "string",
          "description": "Gets or sets the NIC MAC address.",
          "readOnly": true
        },
        "nicType": {
          "$ref": "#/definitions/NICType",
          "description": "NIC type",
          "readOnly": true
        },
        "networkMoRefId": {
          "type": "string",
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network\nthat the nic is connected to.",
          "readOnly": true
        },
        "networkMoName": {
          "type": "string",
          "description": "Gets or sets the name of the virtual network in vCenter that the nic is connected to.",
          "readOnly": true
        },
        "deviceKey": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the device key value.",
          "readOnly": true
        }
      }
    },
    "NetworkInterfaceUpdate": {
      "type": "object",
      "description": "Defines the network interface update.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the network interface."
        },
        "networkId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the network resource to connect the virtual machine."
        },
        "nicType": {
          "$ref": "#/definitions/NICType",
          "description": "NIC type"
        },
        "powerOnBoot": {
          "$ref": "#/definitions/PowerOnBootOption",
          "description": "Gets or sets the power on boot."
        },
        "deviceKey": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the device key value."
        }
      }
    },
    "NetworkProfile": {
      "type": "object",
      "description": "Specifies the network interfaces of the virtual machine.",
      "properties": {
        "networkInterfaces": {
          "type": "array",
          "description": "Gets or sets the list of network interfaces associated with the virtual machine.",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          }
        }
      }
    },
    "NetworkProfileInventory": {
      "type": "object",
      "description": "Specifies the network interfaces of the virtual machine.",
      "properties": {
        "networkInterfaces": {
          "type": "array",
          "description": "Gets or sets the list of network interfaces associated with the virtual machine.",
          "items": {
            "$ref": "#/definitions/NetworkInterfaceInventory"
          },
          "x-ms-identifiers": [
            "networkMoRefId"
          ]
        }
      }
    },
    "NetworkProfileUpdate": {
      "type": "object",
      "description": "Specifies the network interfaces of the virtual machine.",
      "properties": {
        "networkInterfaces": {
          "type": "array",
          "description": "Gets or sets the list of network interfaces associated with the virtual machine.",
          "items": {
            "$ref": "#/definitions/NetworkInterfaceUpdate"
          }
        }
      }
    },
    "NicIPAddressSettings": {
      "type": "object",
      "description": "IP address information for a virtual network adapter reported by the fabric.",
      "properties": {
        "allocationMethod": {
          "type": "string",
          "description": "Gets the ip address allocation method.",
          "readOnly": true
        },
        "ipAddress": {
          "type": "string",
          "description": "Gets the ip address for the nic.",
          "readOnly": true
        },
        "subnetMask": {
          "type": "string",
          "description": "Gets the mask.",
          "readOnly": true
        }
      }
    },
    "NicIPSettings": {
      "type": "object",
      "description": "Defines the network interface ip settings.",
      "properties": {
        "allocationMethod": {
          "$ref": "#/definitions/IPAddressAllocationMethod",
          "description": "Gets or sets the nic allocation method."
        },
        "dnsServers": {
          "type": "array",
          "description": "Gets or sets the dns servers.",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "type": "array",
          "description": "Gets or sets the gateway.",
          "items": {
            "type": "string"
          }
        },
        "ipAddress": {
          "type": "string",
          "description": "Gets or sets the ip address for the nic."
        },
        "subnetMask": {
          "type": "string",
          "description": "Gets or sets the mask."
        },
        "primaryWinsServer": {
          "type": "string",
          "description": "Gets or sets the primary server.",
          "readOnly": true
        },
        "secondaryWinsServer": {
          "type": "string",
          "description": "Gets or sets the secondary server.",
          "readOnly": true
        },
        "ipAddressInfo": {
          "type": "array",
          "description": "Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information above plus IPV6 information.",
          "items": {
            "$ref": "#/definitions/NicIPAddressSettings"
          },
          "readOnly": true
        }
      }
    },
    "OsProfileForVMInstance": {
      "type": "object",
      "description": "Specifies the operating system settings for the virtual machine.",
      "properties": {
        "computerName": {
          "type": "string",
          "description": "Gets or sets computer name."
        },
        "adminUsername": {
          "type": "string",
          "description": "Gets or sets administrator username."
        },
        "adminPassword": {
          "type": "string",
          "format": "password",
          "description": "Sets administrator password.",
          "x-ms-mutability": [
            "update",
            "create"
          ],
          "x-ms-secret": true
        },
        "guestId": {
          "type": "string",
          "description": "Gets or sets the guestId."
        },
        "osType": {
          "$ref": "#/definitions/OsType",
          "description": "Gets or sets the type of the os."
        },
        "osSku": {
          "type": "string",
          "description": "Gets or sets os sku.",
          "readOnly": true
        },
        "toolsRunningStatus": {
          "type": "string",
          "description": "Gets or sets the current running status of VMware Tools running in the guest operating system.",
          "readOnly": true
        },
        "toolsVersionStatus": {
          "type": "string",
          "description": "Gets or sets the current version status of VMware Tools installed in the guest operating system.",
          "readOnly": true
        },
        "toolsVersion": {
          "type": "string",
          "description": "Gets or sets the current version of VMware Tools.",
          "readOnly": true
        },
        "windowsConfiguration": {
          "$ref": "#/definitions/WindowsConfiguration",
          "description": "Windows Configuration."
        }
      }
    },
    "OsType": {
      "type": "string",
      "description": "Defines the different types of VM guest operating systems.",
      "enum": [
        "Windows",
        "Linux",
        "Other"
      ],
      "x-ms-enum": {
        "name": "OsType",
        "modelAsString": true,
        "values": [
          {
            "name": "Windows",
            "value": "Windows"
          },
          {
            "name": "Linux",
            "value": "Linux"
          },
          {
            "name": "Other",
            "value": "Other"
          }
        ]
      }
    },
    "PlacementProfile": {
      "type": "object",
      "description": "Specifies the compute and storage placement settings for the virtual machine.",
      "properties": {
        "resourcePoolId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy."
        },
        "clusterId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy."
        },
        "hostId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the host resource on which this virtual machine will deploy."
        },
        "datastoreId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept."
        }
      }
    },
    "PowerOnBootOption": {
      "type": "string",
      "description": "Defines the options for power on boot.",
      "enum": [
        "enabled",
        "disabled"
      ],
      "x-ms-enum": {
        "name": "PowerOnBootOption",
        "modelAsString": true,
        "values": [
          {
            "name": "enabled",
            "value": "enabled"
          },
          {
            "name": "disabled",
            "value": "disabled"
          }
        ]
      }
    },
    "ProvisioningAction": {
      "type": "string",
      "description": "Defines the different types of operations for guest agent.",
      "enum": [
        "install",
        "uninstall",
        "repair"
      ],
      "x-ms-enum": {
        "name": "ProvisioningAction",
        "modelAsString": true,
        "values": [
          {
            "name": "install",
            "value": "install"
          },
          {
            "name": "uninstall",
            "value": "uninstall"
          },
          {
            "name": "repair",
            "value": "repair"
          }
        ]
      }
    },
    "ProvisioningState": {
      "type": "string",
      "description": "The current deployment state of resource.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Provisioning",
        "Updating",
        "Deleting",
        "Accepted",
        "Created"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded"
          },
          {
            "name": "Failed",
            "value": "Failed"
          },
          {
            "name": "Canceled",
            "value": "Canceled"
          },
          {
            "name": "Provisioning",
            "value": "Provisioning"
          },
          {
            "name": "Updating",
            "value": "Updating"
          },
          {
            "name": "Deleting",
            "value": "Deleting"
          },
          {
            "name": "Accepted",
            "value": "Accepted"
          },
          {
            "name": "Created",
            "value": "Created"
          }
        ]
      },
      "readOnly": true
    },
    "ResourcePatch": {
      "type": "object",
      "description": "Object containing updates for patch operations.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourcePool": {
      "type": "object",
      "description": "Define the resourcePool.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ResourcePoolProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "ResourcePoolInventoryItem": {
      "type": "object",
      "description": "The resource pool inventory item.",
      "properties": {
        "parent": {
          "$ref": "#/definitions/InventoryItemDetails",
          "description": "Parent resourcePool inventory resource details."
        },
        "inventoryType": {
          "type": "string",
          "description": "They inventory type.",
          "enum": [
            "ResourcePool"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "inventoryType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ]
    },
    "ResourcePoolProperties": {
      "type": "object",
      "description": "Describes the properties of a Resource Pool.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Gets or sets a unique identifier for this resource.",
          "readOnly": true
        },
        "vCenterId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the vCenter resource in which this resource pool resides."
        },
        "moRefId": {
          "type": "string",
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the resource pool."
        },
        "inventoryItemId": {
          "type": "string",
          "description": "Gets or sets the inventory Item ID for the resource pool."
        },
        "moName": {
          "type": "string",
          "description": "Gets or sets the vCenter Managed Object name for the resource pool.",
          "readOnly": true
        },
        "cpuSharesLevel": {
          "type": "string",
          "description": "Gets or sets CPUSharesLevel which specifies the CPU allocation level for this pool.\nThis property is used in relative allocation between resource consumers.",
          "readOnly": true
        },
        "cpuReservationMHz": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets CPUReservationMHz which specifies the CPU size in MHz that is guaranteed\nto be available.",
          "readOnly": true
        },
        "cpuLimitMHz": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets CPULimitMHz which specifies a CPU usage limit in MHz.\nUtilization will not exceed this limit even if there are available resources.",
          "readOnly": true
        },
        "memSharesLevel": {
          "type": "string",
          "description": "Gets or sets CPUSharesLevel which specifies the memory allocation level for this pool.\nThis property is used in relative allocation between resource consumers.",
          "readOnly": true
        },
        "memReservationMB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets MemReservationMB which specifies the guaranteed available memory in\nmegabytes.",
          "readOnly": true
        },
        "memLimitMB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets or sets MemLimitMB specifies a memory usage limit in megabytes.\nUtilization will not exceed the specified limit even if there are available resources.",
          "readOnly": true
        },
        "memOverallUsageGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the used physical memory on the pool in GB.",
          "readOnly": true
        },
        "memCapacityGB": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the total amount of physical memory on the pool in GB.",
          "readOnly": true
        },
        "cpuOverallUsageMHz": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the used CPU usage across all cores on the pool in MHz.",
          "readOnly": true
        },
        "cpuCapacityMHz": {
          "type": "integer",
          "format": "int64",
          "description": "Gets the max CPU usage across all cores on the pool in MHz.",
          "readOnly": true
        },
        "customResourceName": {
          "type": "string",
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "readOnly": true
        },
        "datastoreIds": {
          "type": "array",
          "description": "Gets the datastore ARM ids.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "networkIds": {
          "type": "array",
          "description": "Gets the network ARM ids.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "statuses": {
          "type": "array",
          "description": "The resource status information.",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "type"
          ]
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Gets the provisioning state.",
          "readOnly": true
        }
      }
    },
    "ResourcePoolsList": {
      "type": "object",
      "description": "List of ResourcePools.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ResourcePool items on this page",
          "items": {
            "$ref": "#/definitions/ResourcePool"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ResourceStatus": {
      "type": "object",
      "description": "The resource status information.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the condition.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the condition.",
          "readOnly": true
        },
        "reason": {
          "type": "string",
          "description": "The reason for the condition's status.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "A human readable message indicating details about the status.",
          "readOnly": true
        },
        "severity": {
          "type": "string",
          "description": "Severity with which to treat failures of this type of condition.",
          "readOnly": true
        },
        "lastUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The last update time for this condition.",
          "readOnly": true
        }
      }
    },
    "SCSIControllerType": {
      "type": "string",
      "description": "Defines the different types of SCSI controllers.",
      "enum": [
        "lsilogic",
        "buslogic",
        "pvscsi",
        "lsilogicsas"
      ],
      "x-ms-enum": {
        "name": "SCSIControllerType",
        "modelAsString": true,
        "values": [
          {
            "name": "lsilogic",
            "value": "lsilogic"
          },
          {
            "name": "buslogic",
            "value": "buslogic"
          },
          {
            "name": "pvscsi",
            "value": "pvscsi"
          },
          {
            "name": "lsilogicsas",
            "value": "lsilogicsas"
          }
        ]
      }
    },
    "SecurityProfile": {
      "type": "object",
      "description": "Specifies the Security profile settings for the virtual machine.",
      "properties": {
        "uefiSettings": {
          "$ref": "#/definitions/UefiSettings",
          "description": "Specifies the security settings like secure boot used while creating the virtual machine."
        }
      }
    },
    "StopVirtualMachineOptions": {
      "type": "object",
      "description": "Defines the stop action properties.",
      "properties": {
        "skipShutdown": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Defaults to false.",
          "default": false
        }
      }
    },
    "StorageProfile": {
      "type": "object",
      "description": "Specifies the storage settings for the virtual machine disks.",
      "properties": {
        "disks": {
          "type": "array",
          "description": "Gets or sets the list of virtual disks associated with the virtual machine.",
          "items": {
            "$ref": "#/definitions/VirtualDisk"
          }
        },
        "scsiControllers": {
          "type": "array",
          "description": "Gets or sets the list of virtual SCSI controllers associated with the virtual machine.",
          "items": {
            "$ref": "#/definitions/VirtualSCSIController"
          },
          "readOnly": true
        }
      }
    },
    "StorageProfileInventory": {
      "type": "object",
      "description": "Specifies the storage settings for the virtual machine disks.",
      "properties": {
        "disks": {
          "type": "array",
          "description": "Gets or sets the list of virtual disks associated with the virtual machine.",
          "items": {
            "$ref": "#/definitions/VirtualDiskInventory"
          },
          "x-ms-identifiers": [
            "uuid"
          ]
        }
      }
    },
    "StorageProfileUpdate": {
      "type": "object",
      "description": "Specifies the storage settings for the virtual machine disks.",
      "properties": {
        "disks": {
          "type": "array",
          "description": "Gets or sets the list of virtual disks associated with the virtual machine.",
          "items": {
            "$ref": "#/definitions/VirtualDiskUpdate"
          }
        }
      }
    },
    "UefiSettings": {
      "type": "object",
      "description": "Specifies the security settings like secure boot used while creating the virtual machine.",
      "properties": {
        "secureBootEnabled": {
          "type": "boolean",
          "description": "Specifies whether secure boot should be enabled on the virtual machine."
        }
      }
    },
    "VCenter": {
      "type": "object",
      "description": "Defines the vCenter.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VCenterProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "VCenterProperties": {
      "type": "object",
      "description": "Describes the properties of a VCenter.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Gets or sets a unique identifier for this resource.",
          "readOnly": true
        },
        "fqdn": {
          "type": "string",
          "description": "Gets or sets the FQDN/IPAddress of the vCenter."
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the port of the vCenter.",
          "minimum": 1,
          "maximum": 65535
        },
        "version": {
          "type": "string",
          "description": "Gets or sets the version of the vCenter.",
          "readOnly": true
        },
        "instanceUuid": {
          "type": "string",
          "description": "Gets or sets the instance UUID of the vCenter.",
          "readOnly": true
        },
        "connectionStatus": {
          "type": "string",
          "description": "Gets or sets the connection status to the vCenter.",
          "readOnly": true
        },
        "customResourceName": {
          "type": "string",
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "readOnly": true
        },
        "credentials": {
          "$ref": "#/definitions/VICredential",
          "description": "Username / Password Credentials to connect to vcenter."
        },
        "statuses": {
          "type": "array",
          "description": "The resource status information.",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "type"
          ]
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Gets the provisioning state.",
          "readOnly": true
        }
      },
      "required": [
        "fqdn"
      ]
    },
    "VCentersList": {
      "type": "object",
      "description": "List of VCenters.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The VCenter items on this page",
          "items": {
            "$ref": "#/definitions/VCenter"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "VICredential": {
      "type": "object",
      "description": "Username / Password Credentials to connect to vcenter.",
      "properties": {
        "username": {
          "type": "string",
          "description": "Gets or sets username to connect with the vCenter."
        },
        "password": {
          "type": "string",
          "format": "password",
          "description": "Gets or sets the password to connect with the vCenter.",
          "x-ms-mutability": [
            "update",
            "create"
          ],
          "x-ms-secret": true
        }
      }
    },
    "VirtualDisk": {
      "type": "object",
      "description": "Virtual disk model",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the virtual disk."
        },
        "label": {
          "type": "string",
          "description": "Gets or sets the label of the virtual disk in vCenter.",
          "readOnly": true
        },
        "diskObjectId": {
          "type": "string",
          "description": "Gets or sets the disk object id.",
          "readOnly": true
        },
        "diskSizeGB": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the disk total size."
        },
        "deviceKey": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the device key value."
        },
        "diskMode": {
          "$ref": "#/definitions/DiskMode",
          "description": "Gets or sets the disk mode."
        },
        "controllerKey": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the controller id."
        },
        "unitNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the unit number of the disk on the controller."
        },
        "deviceName": {
          "type": "string",
          "description": "Gets or sets the device name."
        },
        "diskType": {
          "$ref": "#/definitions/DiskType",
          "description": "Gets or sets the disk backing type."
        }
      }
    },
    "VirtualDiskInventory": {
      "type": "object",
      "description": "Virtual disk model",
      "properties": {
        "diskName": {
          "type": "string",
          "description": "Gets or sets the name of the virtual disk."
        },
        "label": {
          "type": "string",
          "description": "Gets or sets the label of the virtual disk in vCenter.",
          "readOnly": true
        },
        "diskSizeGB": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the disk total size.",
          "readOnly": true
        },
        "deviceKey": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the device key value.",
          "readOnly": true
        },
        "diskMode": {
          "$ref": "#/definitions/DiskMode",
          "description": "Gets or sets the disk mode.",
          "readOnly": true
        },
        "controllerKey": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the controller id.",
          "readOnly": true
        },
        "unitNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the unit number of the disk on the controller.",
          "readOnly": true
        },
        "deviceName": {
          "type": "string",
          "description": "Gets or sets the device name.",
          "readOnly": true
        },
        "fileName": {
          "type": "string",
          "description": "Gets or sets the disk file name.",
          "readOnly": true
        },
        "diskType": {
          "$ref": "#/definitions/DiskType",
          "description": "Gets or sets the disk backing type.",
          "readOnly": true
        },
        "eagerlyScrub": {
          "type": "boolean",
          "description": "Gets or sets the eagerly scrub property of disk.",
          "readOnly": true
        },
        "thinProvisioned": {
          "type": "boolean",
          "description": "Gets or sets the thin provisioning property of disk.",
          "readOnly": true
        },
        "controllerType": {
          "type": "string",
          "description": "Gets or sets the controller type.",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "Gets or sets a unique identifier for this resource.",
          "readOnly": true
        }
      }
    },
    "VirtualDiskUpdate": {
      "type": "object",
      "description": "Defines the virtual disk update.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the virtual disk."
        },
        "diskSizeGB": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the disk total size."
        },
        "deviceKey": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the device key value."
        },
        "diskMode": {
          "$ref": "#/definitions/DiskMode",
          "description": "Gets or sets the disk mode."
        },
        "controllerKey": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the controller id."
        },
        "unitNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the unit number of the disk on the controller."
        },
        "deviceName": {
          "type": "string",
          "description": "Gets or sets the device name."
        },
        "diskType": {
          "$ref": "#/definitions/DiskType",
          "description": "Gets or sets the disk backing type."
        }
      }
    },
    "VirtualMachineInstance": {
      "type": "object",
      "description": "Define the virtualMachineInstance.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VirtualMachineInstanceProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "VirtualMachineInstanceProperties": {
      "type": "object",
      "description": "Describes the properties of a Virtual Machine Instance.",
      "properties": {
        "placementProfile": {
          "$ref": "#/definitions/PlacementProfile",
          "description": "Placement properties."
        },
        "osProfile": {
          "$ref": "#/definitions/OsProfileForVMInstance",
          "description": "OS properties."
        },
        "hardwareProfile": {
          "$ref": "#/definitions/HardwareProfile",
          "description": "Hardware properties."
        },
        "networkProfile": {
          "$ref": "#/definitions/NetworkProfile",
          "description": "Network properties."
        },
        "storageProfile": {
          "$ref": "#/definitions/StorageProfile",
          "description": "Storage properties."
        },
        "securityProfile": {
          "$ref": "#/definitions/SecurityProfile",
          "description": "Gets the security profile."
        },
        "infrastructureProfile": {
          "$ref": "#/definitions/InfrastructureProfile",
          "description": "Gets the infrastructure profile."
        },
        "powerState": {
          "type": "string",
          "description": "Gets the power state of the virtual machine.",
          "readOnly": true
        },
        "statuses": {
          "type": "array",
          "description": "The resource status information.",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "type"
          ]
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Gets the provisioning state.",
          "readOnly": true
        },
        "resourceUid": {
          "type": "string",
          "description": "Gets or sets a unique identifier for the vm resource.",
          "readOnly": true
        }
      }
    },
    "VirtualMachineInstanceUpdate": {
      "type": "object",
      "description": "Defines the virtualMachineInstanceUpdate.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VirtualMachineInstanceUpdateProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        }
      }
    },
    "VirtualMachineInstanceUpdateProperties": {
      "type": "object",
      "description": "Describes the properties of a Virtual Machine.",
      "properties": {
        "hardwareProfile": {
          "$ref": "#/definitions/HardwareProfile",
          "description": "Specifies the hardware settings for the virtual machine."
        },
        "storageProfile": {
          "$ref": "#/definitions/StorageProfileUpdate",
          "description": "Specifies the storage settings for the virtual machine disks."
        },
        "networkProfile": {
          "$ref": "#/definitions/NetworkProfileUpdate",
          "description": "Specifies the network interfaces of the virtual machine."
        }
      }
    },
    "VirtualMachineInstancesList": {
      "type": "object",
      "description": "List of VirtualMachineInstances.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The VirtualMachineInstance items on this page",
          "items": {
            "$ref": "#/definitions/VirtualMachineInstance"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "VirtualMachineInventoryItem": {
      "type": "object",
      "description": "The VM inventory item.",
      "properties": {
        "osType": {
          "$ref": "#/definitions/OsType",
          "description": "Gets or sets the type of the os."
        },
        "osName": {
          "type": "string",
          "description": "Gets or sets os name."
        },
        "ipAddresses": {
          "type": "array",
          "description": "Gets or sets the nic ip addresses.",
          "items": {
            "type": "string"
          }
        },
        "folderPath": {
          "type": "string",
          "description": "Gets or sets the folder path of the vm."
        },
        "host": {
          "$ref": "#/definitions/InventoryItemDetails",
          "description": "Host inventory resource details."
        },
        "resourcePool": {
          "$ref": "#/definitions/InventoryItemDetails",
          "description": "ResourcePool inventory resource details."
        },
        "cluster": {
          "$ref": "#/definitions/InventoryItemDetails",
          "description": "Cluster inventory resource details."
        },
        "instanceUuid": {
          "type": "string",
          "description": "Gets or sets the instance uuid of the vm."
        },
        "smbiosUuid": {
          "type": "string",
          "description": "Gets or sets the SMBIOS UUID of the vm."
        },
        "powerState": {
          "type": "string",
          "description": "Gets the power state of the virtual machine.",
          "readOnly": true
        },
        "toolsRunningStatus": {
          "type": "string",
          "description": "Gets or sets the current running status of VMware Tools running in the guest operating system.",
          "readOnly": true
        },
        "toolsVersionStatus": {
          "type": "string",
          "description": "Gets or sets the current version status of VMware Tools installed in the guest operating system.",
          "readOnly": true
        },
        "toolsVersion": {
          "type": "string",
          "description": "Gets or sets the current version of VMware Tools.",
          "readOnly": true
        },
        "firmwareType": {
          "$ref": "#/definitions/FirmwareType",
          "description": "Firmware type",
          "readOnly": true
        },
        "changeTrackingSupported": {
          "type": "boolean",
          "description": "Gets a value indicating whether change tracking is supported.",
          "readOnly": true
        },
        "changeTrackingEnabled": {
          "type": "boolean",
          "description": "Gets a value indicating whether change tracking is enabled.",
          "readOnly": true
        },
        "maxSnapshots": {
          "type": "integer",
          "format": "int32",
          "description": "Gets a value indicating the maximum possible number of snapshots.",
          "readOnly": true
        },
        "numberOfSnapshots": {
          "type": "integer",
          "format": "int32",
          "description": "Gets a value indicating the number of snapshots on the vm.",
          "readOnly": true
        },
        "diskEnabledUuid": {
          "type": "string",
          "description": "Gets or sets the disk Enabled UUID of the vm.",
          "readOnly": true
        },
        "computerName": {
          "type": "string",
          "description": "Gets the computer name.",
          "readOnly": true
        },
        "memorySizeMB": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets memory size in MBs for the vm.",
          "readOnly": true
        },
        "numCPUs": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the number of vCPU for the vm.",
          "readOnly": true
        },
        "storageProfile": {
          "$ref": "#/definitions/StorageProfileInventory",
          "description": "Storage properties."
        },
        "networkProfile": {
          "$ref": "#/definitions/NetworkProfileInventory",
          "description": "Network properties."
        },
        "inventoryType": {
          "type": "string",
          "description": "They inventory type.",
          "enum": [
            "VirtualMachine"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "inventoryType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ]
    },
    "VirtualMachineTemplate": {
      "type": "object",
      "description": "Define the virtualMachineTemplate.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VirtualMachineTemplateProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "VirtualMachineTemplateInventoryItem": {
      "type": "object",
      "description": "The VM Template inventory item.",
      "properties": {
        "memorySizeMB": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets memory size in MBs for the template."
        },
        "numCPUs": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the number of vCPUs for the template."
        },
        "numCoresPerSocket": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the number of cores per socket for the template.\nDefaults to 1 if unspecified."
        },
        "osType": {
          "$ref": "#/definitions/OsType",
          "description": "Gets or sets the type of the os."
        },
        "osName": {
          "type": "string",
          "description": "Gets or sets os name."
        },
        "toolsVersionStatus": {
          "type": "string",
          "description": "Gets or sets the current version status of VMware Tools installed in the guest operating system.",
          "readOnly": true
        },
        "toolsVersion": {
          "type": "string",
          "description": "Gets or sets the current version of VMware Tools.",
          "readOnly": true
        },
        "folderPath": {
          "type": "string",
          "description": "Gets or sets the folder path of the template."
        },
        "inventoryType": {
          "type": "string",
          "description": "They inventory type.",
          "enum": [
            "VirtualMachineTemplate"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "inventoryType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ]
    },
    "VirtualMachineTemplateProperties": {
      "type": "object",
      "description": "Describes the properties of a Virtual Machine Template.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Gets or sets a unique identifier for this resource.",
          "readOnly": true
        },
        "vCenterId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the vCenter resource in which this template resides."
        },
        "moRefId": {
          "type": "string",
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine\ntemplate."
        },
        "inventoryItemId": {
          "type": "string",
          "description": "Gets or sets the inventory Item ID for the virtual machine template."
        },
        "moName": {
          "type": "string",
          "description": "Gets or sets the vCenter Managed Object name for the virtual machine template.",
          "readOnly": true
        },
        "memorySizeMB": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets memory size in MBs for the template.",
          "readOnly": true
        },
        "numCPUs": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the number of vCPUs for the template.",
          "readOnly": true
        },
        "numCoresPerSocket": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the number of cores per socket for the template.\nDefaults to 1 if unspecified.",
          "readOnly": true
        },
        "osType": {
          "$ref": "#/definitions/OsType",
          "description": "Gets or sets the type of the os.",
          "readOnly": true
        },
        "osName": {
          "type": "string",
          "description": "Gets or sets os name.",
          "readOnly": true
        },
        "folderPath": {
          "type": "string",
          "description": "Gets or sets the folder path of the template.",
          "readOnly": true
        },
        "networkInterfaces": {
          "type": "array",
          "description": "Gets or sets the network interfaces of the template.",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          },
          "readOnly": true
        },
        "disks": {
          "type": "array",
          "description": "Gets or sets the disks the template.",
          "items": {
            "$ref": "#/definitions/VirtualDisk"
          },
          "readOnly": true
        },
        "customResourceName": {
          "type": "string",
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "readOnly": true
        },
        "toolsVersionStatus": {
          "type": "string",
          "description": "Gets or sets the current version status of VMware Tools installed in the guest operating system.",
          "readOnly": true
        },
        "toolsVersion": {
          "type": "string",
          "description": "Gets or sets the current version of VMware Tools.",
          "readOnly": true
        },
        "firmwareType": {
          "$ref": "#/definitions/FirmwareType",
          "description": "Firmware type",
          "readOnly": true
        },
        "statuses": {
          "type": "array",
          "description": "The resource status information.",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "type"
          ]
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Gets the provisioning state.",
          "readOnly": true
        }
      }
    },
    "VirtualMachineTemplatesList": {
      "type": "object",
      "description": "List of VirtualMachineTemplates.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The VirtualMachineTemplate items on this page",
          "items": {
            "$ref": "#/definitions/VirtualMachineTemplate"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "VirtualNetwork": {
      "type": "object",
      "description": "Define the virtualNetwork.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VirtualNetworkProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        },
        "extendedLocation": {
          "$ref": "#/definitions/ExtendedLocation",
          "description": "Gets or sets the extended location."
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value."
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "VirtualNetworkInventoryItem": {
      "type": "object",
      "description": "The Virtual network inventory item.",
      "properties": {
        "inventoryType": {
          "type": "string",
          "description": "They inventory type.",
          "enum": [
            "VirtualNetwork"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "inventoryType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InventoryItemProperties"
        }
      ]
    },
    "VirtualNetworkProperties": {
      "type": "object",
      "description": "Describes the properties of a Virtual Network.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Gets or sets a unique identifier for this resource.",
          "readOnly": true
        },
        "vCenterId": {
          "type": "string",
          "description": "Gets or sets the ARM Id of the vCenter resource in which this template resides."
        },
        "moRefId": {
          "type": "string",
          "description": "Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual network."
        },
        "inventoryItemId": {
          "type": "string",
          "description": "Gets or sets the inventory Item ID for the virtual network."
        },
        "moName": {
          "type": "string",
          "description": "Gets or sets the vCenter Managed Object name for the virtual network.",
          "readOnly": true
        },
        "customResourceName": {
          "type": "string",
          "description": "Gets the name of the corresponding resource in Kubernetes.",
          "readOnly": true
        },
        "statuses": {
          "type": "array",
          "description": "The resource status information.",
          "items": {
            "$ref": "#/definitions/ResourceStatus"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "type"
          ]
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Gets the provisioning state.",
          "readOnly": true
        }
      }
    },
    "VirtualNetworksList": {
      "type": "object",
      "description": "List of VirtualNetworks.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The VirtualNetwork items on this page",
          "items": {
            "$ref": "#/definitions/VirtualNetwork"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "VirtualSCSIController": {
      "type": "object",
      "description": "This data object type contains the properties of a SCSI controller device attached to a virtual machine that is reported by the controller.",
      "properties": {
        "type": {
          "$ref": "#/definitions/SCSIControllerType",
          "description": "Gets or sets the controller type."
        },
        "controllerKey": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the key of the controller."
        },
        "busNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the bus number of the controller."
        },
        "scsiCtlrUnitNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the SCSI controller unit number."
        },
        "sharing": {
          "$ref": "#/definitions/VirtualSCSISharing",
          "description": "Gets or sets the sharing mode."
        }
      }
    },
    "VirtualSCSISharing": {
      "type": "string",
      "description": "Defines the sharing mode for sharing the SCSI bus.",
      "enum": [
        "noSharing",
        "physicalSharing",
        "virtualSharing"
      ],
      "x-ms-enum": {
        "name": "VirtualSCSISharing",
        "modelAsString": true,
        "values": [
          {
            "name": "noSharing",
            "value": "noSharing"
          },
          {
            "name": "physicalSharing",
            "value": "physicalSharing"
          },
          {
            "name": "virtualSharing",
            "value": "virtualSharing"
          }
        ]
      }
    },
    "VmInstanceHybridIdentityMetadata": {
      "type": "object",
      "description": "Defines the HybridIdentityMetadata.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VmInstanceHybridIdentityMetadataProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "VmInstanceHybridIdentityMetadataList": {
      "type": "object",
      "description": "List of HybridIdentityMetadata.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The VmInstanceHybridIdentityMetadata items on this page",
          "items": {
            "$ref": "#/definitions/VmInstanceHybridIdentityMetadata"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "VmInstanceHybridIdentityMetadataProperties": {
      "type": "object",
      "description": "Describes the properties of Hybrid Identity Metadata for a Virtual Machine.",
      "properties": {
        "resourceUid": {
          "type": "string",
          "description": "The unique identifier for the resource."
        },
        "publicKey": {
          "type": "string",
          "description": "Gets or sets the Public Key."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Gets the provisioning state.",
          "readOnly": true
        }
      }
    },
    "WindowsConfiguration": {
      "type": "object",
      "description": "Specifies the Windows Configuration settings for the virtual machine.",
      "properties": {
        "fullName": {
          "type": "string",
          "description": "Sets full name of the owner of the vm."
        },
        "orgName": {
          "type": "string",
          "description": "Sets org name to which the owner of the vm belongs."
        },
        "domainName": {
          "type": "string",
          "description": "Sets domain name that vm should join."
        },
        "domainUsername": {
          "type": "string",
          "description": "Sets domain username."
        },
        "domainUserPassword": {
          "type": "string",
          "format": "password",
          "description": "Sets domain user password.",
          "x-ms-mutability": [
            "update",
            "create"
          ],
          "x-ms-secret": true
        },
        "workGroupName": {
          "type": "string",
          "description": "Sets work group name that vm should join."
        },
        "productId": {
          "type": "string",
          "description": "Sets product id of the vm."
        },
        "autoLogon": {
          "type": "boolean",
          "description": "Sets a value indicating whether auto logon is enabled."
        },
        "autoLogonCount": {
          "type": "integer",
          "format": "int32",
          "description": "Sets auto logon count."
        },
        "timeZone": {
          "type": "string",
          "description": "Specifies the time zone of the virtual machine. e.g. \"Pacific Standard Time\". Time zone name correspond to time zones listed at Microsoft Time Zone name values(https://learn.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11))."
        },
        "firstLogonCommands": {
          "type": "array",
          "description": "Sets first logon commands",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "parameters": {
    "Azure.ResourceManager.ResourceUriParameter": {
      "name": "resourceUri",
      "in": "path",
      "description": "The fully qualified Azure Resource manager identifier of the resource.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true
    }
  }
}
