{
  "swagger": "2.0",
  "info": {
    "title": "ContainerServiceClient",
    "description": "The Container Service Client.",
    "version": "2017-08-31"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/managedClusters": {
      "get": {
        "tags": [
          "ManagedClusters"
        ],
        "operationId": "ManagedClusters_List",
        "summary": "Gets a list of managed clusters in the specified subscription.",
        "description": "Gets a list of managed clusters in the specified subscription. The operation returns properties of each managed cluster.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ManagedClusterListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters": {
      "get": {
        "tags": [
          "ManagedClusters"
        ],
        "operationId": "ManagedClusters_ListByResourceGroup",
        "summary": "Lists managed clusters in the specified subscription and resource group.",
        "description": "Lists managed clusters in the specified subscription and resource group. The operation returns properties of each managed cluster.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ManagedClusterListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/upgradeProfiles/default": {
      "get": {
        "tags": [
          "ManagedClusters"
        ],
        "operationId": "ManagedClusters_GetUpgradeProfile",
        "summary": "Gets upgrade profile for a managed cluster.",
        "description": "Gets the details of the upgrade profile for a managed cluster with a specified resource group and name.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "name": "resourceName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the managed cluster resource."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ManagedClusterUpgradeProfile"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}": {
      "get": {
        "tags": [
          "ManagedClusters"
        ],
        "operationId": "ManagedClusters_Get",
        "summary": "Gets a managed cluster.",
        "description": "Gets the details of the managed cluster with a specified resource group and name.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "name": "resourceName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the managed cluster resource."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ManagedClusters"
        ],
        "operationId": "ManagedClusters_CreateOrUpdate",
        "summary": "Creates or updates a managed cluster.",
        "description": "Creates or updates a managed cluster with the specified configuration for agents and Kubernetes version.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "name": "resourceName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the managed cluster resource."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            },
            "description": "Parameters supplied to the Create or Update a Managed Cluster operation."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ManagedCluster"
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "ManagedClusters"
        ],
        "operationId": "ManagedClusters_Delete",
        "summary": "Deletes a managed cluster.",
        "description": "Deletes the managed cluster with a specified resource group and name.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
          },
          {
            "name": "resourceName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the managed cluster resource."
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          }
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "Resource": {
      "description": "The Resource model definition.",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Resource Id"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Resource name"
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "Resource type"
        },
        "location": {
          "type": "string",
          "description": "Resource location",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags"
        }
      },
      "required": [
        "location"
      ],
      "x-ms-azure-resource": true
    },
    "ContainerServiceOSDisk": {
      "type": "integer",
      "format": "int32",
      "maximum": 1023,
      "minimum": 0,
      "description": "OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified."
    },
    "ContainerServiceStorageProfile": {
      "type": "string",
      "x-ms-enum": {
        "name": "ContainerServiceStorageProfileTypes",
        "modelAsString": true
      },
      "enum": [
        "StorageAccount",
        "ManagedDisks"
      ],
      "description": "Storage profile specifies what kind of storage used. Choose from StorageAccount and ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice."
    },
    "ContainerServiceVnetSubnetID": {
      "type": "string",
      "description": "VNet SubnetID specifies the vnet's subnet identifier. If you specify either master VNet Subnet, or agent VNet Subnet, you need to specify both. And they have to be in the same VNet."
    },
    "ContainerServiceVMSize": {
      "type": "string",
      "x-ms-enum": {
        "name": "ContainerServiceVMSizeTypes",
        "modelAsString": true
      },
      "description": "Size of agent VMs.",
      "enum": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A10",
        "Standard_A11",
        "Standard_A1_v2",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D1",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D16_v3",
        "Standard_D16s_v3",
        "Standard_D1_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D2_v3",
        "Standard_D2s_v3",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D4_v3",
        "Standard_D4s_v3",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_D8_v3",
        "Standard_D8s_v3",
        "Standard_DS1",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS1_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_E16_v3",
        "Standard_E16s_v3",
        "Standard_E2_v3",
        "Standard_E2s_v3",
        "Standard_E32_v3",
        "Standard_E32s_v3",
        "Standard_E4_v3",
        "Standard_E4s_v3",
        "Standard_E64_v3",
        "Standard_E64s_v3",
        "Standard_E8_v3",
        "Standard_E8s_v3",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_M128s",
        "Standard_M64ms",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ]
    },
    "KeyVaultSecretRef": {
      "properties": {
        "vaultID": {
          "type": "string",
          "description": "Key vault identifier."
        },
        "secretName": {
          "type": "string",
          "description": "The secret name."
        },
        "version": {
          "type": "string",
          "description": "The secret version."
        }
      },
      "description": "Reference to a secret stored in Azure Key Vault.",
      "required": [
        "vaultID",
        "secretName"
      ]
    },
    "ContainerServiceServicePrincipalProfile": {
      "properties": {
        "clientId": {
          "type": "string",
          "description": "The ID for the service principal."
        },
        "secret": {
          "type": "string",
          "description": "The secret password associated with the service principal in plain text."
        },
        "keyVaultSecretRef": {
          "$ref": "#/definitions/KeyVaultSecretRef",
          "description": "Reference to a secret stored in Azure Key Vault."
        }
      },
      "description": "Information about a service principal identity for the cluster to use for manipulating Azure APIs. Either secret or keyVaultSecretRef must be specified.",
      "required": [
        "clientId"
      ]
    },
    "ContainerServiceMasterProfile": {
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "enum": [
            1,
            3,
            5
          ],
          "x-ms-enum": {
            "name": "Count",
            "modelAsString": false
          },
          "description": "Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1.",
          "default": 1
        },
        "dnsPrefix": {
          "type": "string",
          "description": "DNS prefix to be used to create the FQDN for the master pool."
        },
        "vmSize": {
          "$ref": "#/definitions/ContainerServiceVMSize",
          "description": "Size of agent VMs."
        },
        "osDiskSizeGB": {
          "$ref": "#/definitions/ContainerServiceOSDisk",
          "description": "OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified."
        },
        "vnetSubnetID": {
          "$ref": "#/definitions/ContainerServiceVnetSubnetID",
          "description": "VNet SubnetID specifies the vnet's subnet identifier. If you specify either master VNet Subnet, or agent VNet Subnet, you need to specify both. And they have to be in the same VNet."
        },
        "firstConsecutiveStaticIP": {
          "type": "string",
          "description": "FirstConsecutiveStaticIP used to specify the first static ip of masters.",
          "default": "10.240.255.5"
        },
        "storageProfile": {
          "$ref": "#/definitions/ContainerServiceStorageProfile",
          "description": "Storage profile specifies what kind of storage used. Choose from StorageAccount and ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice."
        },
        "fqdn": {
          "readOnly": true,
          "type": "string",
          "description": "FDQN for the master pool."
        }
      },
      "required": [
        "dnsPrefix",
        "vmSize"
      ],
      "description": "Profile for the container service master."
    },
    "ContainerServiceAgentPoolProfile": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of the agent pool profile in the context of the subscription and resource group."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "description": "Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. ",
          "default": 1
        },
        "vmSize": {
          "$ref": "#/definitions/ContainerServiceVMSize",
          "description": "Size of agent VMs."
        },
        "osDiskSizeGB": {
          "$ref": "#/definitions/ContainerServiceOSDisk",
          "description": "OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified."
        },
        "dnsPrefix": {
          "type": "string",
          "description": "DNS prefix to be used to create the FQDN for the agent pool."
        },
        "fqdn": {
          "readOnly": true,
          "type": "string",
          "description": "FDQN for the agent pool."
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
          },
          "description": "Ports number array used to expose on this agent pool. The default opened ports are different based on your choice of orchestrator."
        },
        "storageProfile": {
          "$ref": "#/definitions/ContainerServiceStorageProfile",
          "description": "Storage profile specifies what kind of storage used. Choose from StorageAccount and ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice."
        },
        "vnetSubnetID": {
          "$ref": "#/definitions/ContainerServiceVnetSubnetID",
          "description": "VNet SubnetID specifies the vnet's subnet identifier. If you specify either master VNet Subnet, or agent VNet Subnet, you need to specify both. And they have to be in the same VNet."
        },
        "osType": {
          "$ref": "#/definitions/OSType",
          "description": "OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux."
        }
      },
      "required": [
        "name",
        "vmSize"
      ],
      "description": "Profile for the container service agent pool."
    },
    "ContainerServiceWindowsProfile": {
      "properties": {
        "adminUsername": {
          "type": "string",
          "description": "The administrator username to use for Windows VMs.",
          "pattern": "^[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$"
        },
        "adminPassword": {
          "type": "string",
          "description": "The administrator password to use for Windows VMs.",
          "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\\^&\\*\\(\\)])[a-zA-Z\\d!@#$%\\^&\\*\\(\\)]{12,123}$"
        }
      },
      "required": [
        "adminUsername",
        "adminPassword"
      ],
      "description": "Profile for Windows VMs in the container service cluster."
    },
    "ContainerServiceLinuxProfile": {
      "properties": {
        "adminUsername": {
          "type": "string",
          "description": "The administrator username to use for Linux VMs.",
          "pattern": "^[a-z][a-z0-9_-]*$"
        },
        "ssh": {
          "$ref": "#/definitions/ContainerServiceSshConfiguration",
          "description": "SSH configuration for Linux-based VMs running on Azure."
        }
      },
      "required": [
        "adminUsername",
        "ssh"
      ],
      "description": "Profile for Linux VMs in the container service cluster."
    },
    "ContainerServiceSshConfiguration": {
      "properties": {
        "publicKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerServiceSshPublicKey"
          },
          "description": "The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified."
        }
      },
      "description": "SSH configuration for Linux-based VMs running on Azure.",
      "required": [
        "publicKeys"
      ]
    },
    "ContainerServiceSshPublicKey": {
      "properties": {
        "keyData": {
          "type": "string",
          "description": "Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers."
        }
      },
      "required": [
        "keyData"
      ],
      "description": "Contains information about SSH certificate public key data."
    },
    "ContainerServiceDiagnosticsProfile": {
      "properties": {
        "vmDiagnostics": {
          "$ref": "#/definitions/ContainerServiceVMDiagnostics",
          "description": "Profile for diagnostics on the container service VMs."
        }
      },
      "description": "Profile for diagnostics on the container service cluster.",
      "required": [
        "vmDiagnostics"
      ]
    },
    "ContainerServiceVMDiagnostics": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether the VM diagnostic agent is provisioned on the VM."
        },
        "storageUri": {
          "readOnly": true,
          "type": "string",
          "description": "The URI of the storage account where diagnostics are stored."
        }
      },
      "description": "Profile for diagnostics on the container service VMs.",
      "required": [
        "enabled"
      ]
    },
    "ManagedClusterListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManagedCluster"
          },
          "description": "The list of managed clusters."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of managed cluster results."
        }
      },
      "description": "The response from the List Managed Clusters operation."
    },
    "ManagedCluster": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "properties": {
            "properties": {
              "description": "Properties of a managed cluster.",
              "$ref": "#/definitions/ManagedClusterProperties",
              "x-ms-client-flatten": false
            }
          }
        }
      ],
      "description": "Managed cluster."
    },
    "ManagedClusterProperties": {
      "properties": {
        "provisioningState": {
          "readOnly": true,
          "type": "string",
          "description": "The current deployment or provisioning state, which only appears in the response."
        },
        "dnsPrefix": {
          "type": "string",
          "description": "DNS prefix specified when creating the managed cluster."
        },
        "fqdn": {
          "readOnly": true,
          "type": "string",
          "description": "FDQN for the master pool."
        },
        "kubernetesVersion": {
          "type": "string",
          "description": "Version of Kubernetes specified when creating the managed cluster."
        },
        "accessProfiles": {
          "type": "object",
          "properties": {
            "clusterAdmin": {
              "$ref": "#/definitions/AccessProfile",
              "description": "An access profile with administrative privileges to the cluster."
            },
            "clusterUser": {
              "$ref": "#/definitions/AccessProfile",
              "description": "An access profile with user-level privileges to the cluster."
            }
          },
          "description": "Access profiles for the managed cluster."
        },
        "agentPoolProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerServiceAgentPoolProfile"
          },
          "description": "Properties of the agent pool."
        },
        "linuxProfile": {
          "$ref": "#/definitions/ContainerServiceLinuxProfile",
          "description": "Profile for Linux VMs in the container service cluster."
        },
        "servicePrincipalProfile": {
          "$ref": "#/definitions/ContainerServiceServicePrincipalProfile",
          "description": "Information about a service principal identity for the cluster to use for manipulating Azure APIs. Either secret or keyVaultSecretRef must be specified."
        }
      },
      "description": "Properties of the managed cluster."
    },
    "AccessProfile": {
      "type": "object",
      "properties": {
        "kubeConfig": {
          "type": "string",
          "description": "Base64-encoded Kubernetes configuration file."
        }
      },
      "description": "Profile for enabling a user to access a managed cluster."
    },
    "OrchestratorProfile": {
      "properties": {
        "orchestratorType": {
          "type": "string",
          "description": "Orchestrator type."
        },
        "orchestratorVersion": {
          "type": "string",
          "description": "Orchestrator version (major, minor, patch)."
        }
      },
      "required": [
        "orchestratorType",
        "orchestratorVersion"
      ],
      "description": "Contains information about orchestrator."
    },
    "ManagedClusterPoolUpgradeProfile": {
      "properties": {
        "kubernetesVersion": {
          "type": "string",
          "description": "Kubernetes version (major, minor, patch)."
        },
        "name": {
          "type": "string",
          "description": "Pool name."
        },
        "osType": {
          "$ref": "#/definitions/OSType",
          "enum": [
            "Linux",
            "Windows"
          ],
          "x-ms-enum": {
            "name": "ContainerServiceOSTypes",
            "modelAsString": true
          },
          "description": "OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux."
        },
        "upgrades": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of orchestrator types and versions available for upgrade."
        }
      },
      "required": [
        "kubernetesVersion",
        "osType"
      ],
      "description": "The list of available upgrade versions."
    },
    "ManagedClusterUpgradeProfileProperties": {
      "properties": {
        "controlPlaneProfile": {
          "$ref": "#/definitions/ManagedClusterPoolUpgradeProfile",
          "description": "The list of available upgrade versions for the control plane."
        },
        "agentPoolProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManagedClusterPoolUpgradeProfile"
          },
          "description": "The list of available upgrade versions for agent pools."
        }
      },
      "required": [
        "controlPlaneProfile",
        "agentPoolProfiles"
      ],
      "description": "Control plane and agent pool upgrade profiles."
    },
    "ManagedClusterUpgradeProfile": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Id of upgrade profile."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Name of upgrade profile."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "Type of upgrade profile."
        },
        "properties": {
          "$ref": "#/definitions/ManagedClusterUpgradeProfileProperties",
          "description": "Properties of upgrade profile.",
          "x-ms-client-flatten": false
        }
      },
      "required": [
        "properties"
      ],
      "description": "The list of available upgrades for compute pools."
    },
    "OSType": {
      "type": "string",
      "default": "Linux",
      "enum": [
        "Linux",
        "Windows"
      ],
      "x-ms-enum": {
        "name": "OSType",
        "modelAsString": true
      },
      "description": "OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux."
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Client Api Version."
    }
  }
}
