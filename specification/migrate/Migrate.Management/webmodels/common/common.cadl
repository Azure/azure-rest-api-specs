using Cadl.Http;

@doc("inner error")
model InnerError {
  @doc("code string ")
  code: string;

  @doc("inner error")
  innererror: InnerError;
}

@doc("Class for site agent properties.")
model SiteAgentProperties {
  @doc("Gets the ID of the agent.")
  @visibility("read")
  id?: string;

  @doc("Gets the version of the agent.")
  @visibility("read")
  version?: string;

  @doc("Gets the last heartbeat time of the agent in UTC.")
  @visibility("read")
  lastHeartBeatUtc?: zonedDateTime;

  @doc("Gets or sets the key vault URI.")
  keyVaultUri?: string;

  @doc("Gets or sets the key vault ARM Id.")
  keyVaultId?: string;
}

// enum HealthErrorDetailsSource {
//   "RefreshFabricLayout",
//   "RefreshFabricLayoutGuest",
//   "RefreshFabricLayoutDependencyMap",
//}

@knownValues(HealthErrorDetailsSource)
scalar MicrosoftAzureFDSWebRoleHealthErrorDetailsSource extends string;

enum HealthErrorDetailsSource {
  RefreshFabricLayout,
  RefreshFabricLayoutGuest,
  RefreshFabricLayoutDependencyMap,
}

@doc("Data related to a machine's SQL discovery.")
model SqlDiscovery {
  @doc("Gets or sets number of SQL servers successfully discovered by SQL agent.")
  successfullyDiscoveredServerCount: int64;

  @doc("Gets or sets total number of SQL servers.")
  totalServerCount: int64;

  @doc("Gets or sets the run as account ID with which SQL Metadata worked successfully")
  sqlMetadataHydratedRunAsAccountId: string;

  @doc("Gets or sets the discovery pipe used for fetching SQL Server's metadata from registry.")
  sqlMetadataDiscoveryPipe: string;

  @doc("Gets or sets status of partner discovery.")
  discoveryScopeStatus: DiscoveryScopeStatus;
}

@doc("Data related to a machine's WebApps discovery.")
model WebAppDiscovery {
  @doc("Gets or sets number of successfully discovered web servers..")
  totalWebServerCount: int64;

  @doc("Gets or sets number of successfully discovered web applications.")
  totalWebApplicationCount: int64;

  @doc("Gets or sets status of partner discovery.")
  discoveryScopeStatus: DiscoveryScopeStatus;
}

@doc("Data related to a machine's Oracle discovery.")
model OracleDiscovery {
  @doc("Gets or sets number of successfully discovered instances.")
  totalInstanceCount: int64;

  @doc("Gets or sets number of successfully discovered databases.")
  totalDatabaseCount: int64;

  @doc("Gets or sets status of partner discovery.")
  discoveryScopeStatus: DiscoveryScopeStatus;
}

@doc("Data related to a machine's spring boot discovery.")
model SpringBootDiscovery {
  @doc("Gets or sets number of successfully discovered instances.")
  totalInstanceCount: int64;

  @doc("Gets or sets number of successfully discovered applications.")
  totalApplicationCount: int64;

  @doc("Gets or sets status of partner discovery.")
  discoveryScopeStatus: DiscoveryScopeStatus;
}

@doc("hyperv cluster")
model HypervCluster {
  @doc("Gets or sets the type of the operating system.")
  osType?: string;

  @doc("Gets or sets the Name of the operating system.")
  osName?: string;

  @doc("Gets or sets the Version of the operating system.")
  osVersion?: string;

  @doc("Gets or sets the Architecture of the operating system.")
  osArchitecture?: string;
}

enum DependencyMapDiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}

enum HealthErrorDetailsDiscoveryScope {
  "AppsAndRoles",
  "DependencyMap",
  "StaticData",
  "SQLServerConnectionInfo",
}

@doc("Error contract returned when some exception occurs in Rest API.")
model HealthErrorDetails {
  @doc("Gets the error message.")
  @visibility("read")
  message?: string;

  @doc("Gets the message parameters.")
  @visibility("read")
  messageParameters?: Record<string>;

  @doc("Gets the appliance name.")
  @visibility("read")
  applianceName?: string;

  @doc("Gets the error ID.")
  @visibility("read")
  id?: int32;

  @doc("Gets the error name.")
  @visibility("read")
  code?: string;

  @doc("Gets the possible causes of error.")
  @visibility("read")
  possibleCauses?: string;

  @doc("Gets the recommended action to resolve error.")
  @visibility("read")
  recommendedAction?: string;

  @doc("Gets the error severity.")
  @visibility("read")
  severity?: string;

  @doc("Gets the error summary message.")
  @visibility("read")
  summaryMessage?: string;

  @doc("Gets the error source.")
  @visibility("read")
  source?: HealthErrorDetailsSource;

  @doc("Gets the time stamp when the error was updated.")
  @visibility("read")
  updatedTimeStamp?: zonedDateTime;

  @doc("Gets run as account id used while performing discovery             of entity.")
  @visibility("read")
  runAsAccountId?: string;

  @doc("Gets discovery scope for which             error is encountered.")
  @visibility("read")
  discoveryScope?: HealthErrorDetailsDiscoveryScope;
}

@doc("Contains data related dependency map discovery scope.")
model DependencyMapDiscovery {
  @doc("Gets discovery scope status.")
  @visibility("read")
  discoveryScopeStatus?: DependencyMapDiscoveryScopeStatus;

  @doc("Gets errors for discovery scope.")
  @visibility("read")
  errors?: HealthErrorDetails[];

  @doc("""
Gets the run as account ID with which feature worked successfully.
           
It is discovered by the agent from the list of credentials.
""")
  @visibility("read")
  hydratedRunAsAccountId?: string;
}

@doc("Contains data related static data discovery scope.")
model StaticDiscovery {
  @doc("Gets discovery scope status.")
  @visibility("read")
  discoveryScopeStatus?: StaticDiscoveryScopeStatus;

  @doc("Gets errors for discovery scope.")
  @visibility("read")
  errors?: HealthErrorDetails[];

  @doc("""
Gets the run as account ID with which feature worked successfully.
           
It is discovered by the agent from the list of credentials.
""")
  @visibility("read")
  hydratedRunAsAccountId?: string;
}

enum SQLDiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}

enum SQLDiscoverySqlMetadataDiscoveryPipe {
  "Unknown",
  "VMware",
  "PowerShell",
  "SSH",
  "CIM",
  "Other",
}

enum OracleDiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}


@doc("Second level object returned as part of Machine REST resource.")
model OperatingSystem {
  @doc("Gets or sets the type of the operating system.")
  osType?: string;

  @doc("Gets or sets the Name of the operating system.")
  osName?: string;

  @doc("Gets or sets the Version of the operating system.")
  osVersion?: string;

  @doc("Gets or sets the Architecture of the operating system.")
  osArchitecture?: string;
}
enum StaticDiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}

#suppress "@azure-tools/cadl-azure-core/casing-style"
@doc("Contains data related SQL discovery.")
model SQLDiscovery {
  @doc(" successfully Discovered ServerCount")
  successfullyDiscoveredServerCount?: int32;

  @doc("total Server Count")
  totalServerCount?: int32;

  @doc("sql Metadata Hydrated RunAsAccountId")
  sqlMetadataHydratedRunAsAccountId?: string;

  @doc("sql Metadata DiscoveryPipe")
  sqlMetadataDiscoveryPipe?: SQLDiscoverySqlMetadataDiscoveryPipe;

  @doc("discovery Scope Status")
  discoveryScopeStatus?: SQLDiscoveryScopeStatus;
}

enum ApplicationDiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}

@doc("Contains data related application and roles discovery scope.")
model ApplicationDiscovery {
  // @doc("Gets discovery scope status.")
  // @visibility("read")
  // "discoveryScopeStatus"?: ApplicationDiscoveryScopeStatus;
  @doc("Gets errors for discovery scope.")
  @visibility("read")
  errors?: HealthErrorDetails[];

  @doc("""
Gets the run as account ID with which feature worked successfully.
           
It is discovered by the agent from the list of credentials.
""")
  @visibility("read")
  hydratedRunAsAccountId?: string;
}

#suppress "@azure-tools/cadl-azure-core/casing-style"
@doc("Second level object.  Data related to a machine's operating system.             Serialized and stored as part of Machine Rest object. ")
model GuestOSDetails {
  @doc("Gets or sets the type of the operating system.")
  osType?: string;

  @doc("Gets or sets the Name of the operating system.")
  osName?: string;

  @doc("Gets or sets the Version of the operating system.")
  osVersion?: string;

  @doc("Gets or sets the Architecture of the operating system.")
  osArchitecture?: string;
}

@doc("Dependency  Map ServiceMap Extensions Scope Map Request")
model DependencyMapServiceMapExtensionsScopeMapRequest {
  @doc("start time")
  startTime?: zonedDateTime;

  @doc("end time")
  endTime?: zonedDateTime;

  @doc("optional filters")
  filters?: DependencyMapServiceMapExtensionsDependencyMapRequestFilters;
}

@doc("DependencyMap Service Map Extensions Dependency Map Request Filters")
model DependencyMapServiceMapExtensionsDependencyMapRequestFilters {
  @doc("array of machine ids")
  machineIds?: string[];

  @doc("array of process Ids")
  processIds?: string[];
}
@doc("DependencyMap ServiceMap Extensions SingleMachine DetailedMap Request")
model DependencyMapServiceMapExtensionsSingleMachineDetailedMapRequest
  extends DependencyMapServiceMapExtensionsScopeMapRequest {
  @doc("id of machine")
  machineId?: string;
}

@doc("DependencyMap ServiceMap Extensions Client GroupMembers Request")
model DependencyMapServiceMapExtensionsClientGroupMembersRequest
  extends DependencyMapServiceMapExtensionsScopeMapRequest {
  @doc("id of machine")
  machineId?: string;

  @doc("process group name ")
  processGroupName?: string;

  @doc("name of process")
  processName?: string;
}

@doc("DependencyMap ServiceMap Extensions ServerGroup Members Request")
model DependencyMapServiceMapExtensionsServerGroupMembersRequest
  extends DependencyMapServiceMapExtensionsScopeMapRequest {
  @doc("port of server")
  serverPort?: int32;
}

@doc("""
Defines class that represents input to enable or disable DMP on machine
      
      for cosmos entity operation.
""")
model UpdateMachineDepMapStatus {
  @OpenAPI.extension("x-ms-identifiers", [])
  @doc("Gets or sets the machine collection.")
  machines?: UpdateMachineDepMapStatusDependencyMapMachineInput[];
}

@doc("Machine class.")
model UpdateMachineDepMapStatusDependencyMapMachineInput {
  @doc("Gets or sets the ARM id of the machine.")
  machineId?: string;

  @doc("""
Gets or sets a value indicating whether
            dependency mapping is to
be enabled or not.
""")
  isDependencyMapToBeEnabled?: boolean;
}

@doc("DependencyMap ServiceMap Extensions ExportDependencies Request")
model DependencyMapServiceMapExtensionsExportDependenciesRequest {
  @doc("start time")
  startTime?: zonedDateTime;

  @doc("end time")
  endTime?: zonedDateTime;
}

@doc("The body of export machine errors request.")
model VersionedV202001ExportMachineErrorsRequest {
  @doc("Gets or sets the properties.")
  properties?: VersionedV202001ExportMachineErrorsRequestExportMachineErrorsProperties;
}

@doc("The Properties class for export machine errors request body.")
model VersionedV202001ExportMachineErrorsRequestExportMachineErrorsProperties {
  @doc("Gets or sets the discovery scope.")
  discoveryScope?: VersionedV202001ExportMachineErrorsRequestExportMachineErrorsPropertiesDiscoveryScope;
}

enum VersionedV202001ExportMachineErrorsRequestExportMachineErrorsPropertiesDiscoveryScopeKnownValues {
  "AppsAndRoles",
  "DependencyMap",
  "StaticData",
  "SQLServerConnectionInfo",
}

@knownValues(
  VersionedV202001ExportMachineErrorsRequestExportMachineErrorsPropertiesDiscoveryScopeKnownValues
)
scalar VersionedV202001ExportMachineErrorsRequestExportMachineErrorsPropertiesDiscoveryScope
  extends string;

enum MicrosoftAzureMigratePrivateEndpointModelsPrivateEndpointConnectionPropertiesV2ProvisioningStateKnownValues {
  "Accepted",
  "InProgress",
  "Succeeded",
  "Failed",
}

@knownValues(
  MicrosoftAzureMigratePrivateEndpointModelsPrivateEndpointConnectionPropertiesV2ProvisioningStateKnownValues
)
scalar MicrosoftAzureMigratePrivateEndpointModelsPrivateEndpointConnectionPropertiesV2ProvisioningState
  extends string;

enum MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceConnectionStateStatusKnownValues {
  "Approved",
  "Pending",
  "Rejected",
  "Disconnected",
}

@knownValues(
  MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceConnectionStateStatusKnownValues
)
scalar MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceConnectionStateStatus
  extends string;

@doc("Class for site properties.")
model MasterSiteProperties {
  @doc("Gets or sets the state of public network access.")
  publicNetworkAccess?: V202007MasterSitePropertiesPublicNetworkAccess;

  @doc("""
Gets or sets a value indicating whether multiple sites per site type are
allowed.
""")
  allowMultipleSites?: boolean;

  @doc("""
Gets or sets the sites that are a part of Master Site.
            The key
should contain the Site ARM name.
""")
  sites?: string[];

  @doc("Gets or sets a value for customer storage account ARM id.")
  customerStorageAccountArmId?: string;

  @doc("Gets the private endpoint connections.")
  @visibility("read")
  privateEndpointConnections?: PendpointConnection[];

  @doc("Gets the nested sites under Master Site.")
  @visibility("read")
  nestedSites?: string[];

  @doc("provisioning state enum")
  @visibility("read")
  provisioningState?: ProvisioningState;
}

@doc("REST model used to encapsulate the user visible state of a PrivateEndpoint.")
model PendpointConnection {
  @doc("Relative URL to get this Sites.")
  @visibility("read")
  id?: string;

  @doc("Gets the name of the resource.")
  @visibility("read")
  name?: string;

  @doc("Gets the resource type.")
  @visibility("read")
  type?: string;

  @doc("Gets the tag for optimistic concurrency control.")
  @visibility("read")
  eTag?: string;

  @doc("Gets the properties of the object.")
  @visibility("read")
  properties?: MicrosoftAzureMigratePrivateEndpointModelsPrivateEndpointConnectionPropertiesV2;
}

@doc("PrivateEndpointConnectionPropertiesV2")
model MicrosoftAzureMigratePrivateEndpointModelsPrivateEndpointConnectionPropertiesV2 {
  @visibility("read")
  @doc("array of group ids")
  groupIds?: string[];

  @doc("provisioning state enum")
  @visibility("read")
  provisioningState?: ProvisioningState;

  @doc("private endpoints")
  @visibility("read")
  privateEndpoint?: MicrosoftAzureMigratePrivateEndpointModelsResourceId;

  @doc("private endpoints connection state")
  privateLinkServiceConnectionState?: MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceConnectionState;
}

@doc("PrivateEndpointModelsResourceId")
model MicrosoftAzureMigratePrivateEndpointModelsResourceId {
  @doc("id name")
  @visibility("read")
  id?: string;
}

@doc("Service Connection State")
model MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceConnectionState {
  @doc("state status")
  status?: MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceConnectionStateStatus;

  @doc("description string")
  description?: string;

  @doc("actions required")
  actionsRequired?: string;
}

enum V202007MasterSitePropertiesPublicNetworkAccess {
  "NotSpecified",
  "Enabled",
  "Disabled",
}

@knownValues(V202007MasterSitePropertiesPublicNetworkAccess)
scalar MicrosoftAzureFDSWebRoleV202007MasterSitePropertiesPublicNetworkAccess
  extends string;

#suppress "@azure-tools/cadl-azure-core/casing-style"
#suppress "@azure-tools/cadl-azure-core/documentation-required"
model MicrosoftAzureMigratePrivateEndpointBodyPrivateEndpointConnectionProxyRequestBody {
  remotePrivateEndpoint?: MicrosoftAzureMigratePrivateEndpointModelsPrivateEndpointDetails;
}

#suppress "@azure-tools/cadl-azure-core/documentation-required"
#suppress "@azure-tools/cadl-azure-core/casing-style"
@doc("ARM async operation status response model.")
model IArmAsyncOperationStatus {
  @doc("""
  Gets the status of the operation. ARM expects the terminal status to be one
  of
              Succeeded/ Failed/ Canceled. All other values imply that the
  operation is still running.
  """)
  @visibility("read")
  status?: string;
}
#suppress "@azure-tools/cadl-azure-core/documentation-required"
model MicrosoftAzureMigratePrivateEndpointModelsPrivateEndpointDetails {
  id?: string;

  @OpenAPI.extension("x-ms-identifiers", [])
  manualPrivateLinkServiceConnections?: MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceConnection[];

  @OpenAPI.extension("x-ms-identifiers", [])
  privateLinkServiceConnections?: MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceConnection[];
  privateLinkServiceProxies?: MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceProxy[];
  connectionDetails?: MicrosoftAzureMigratePrivateEndpointModelsIpConfiguration[];
}
#suppress "@azure-tools/cadl-azure-core/documentation-required"
model MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceConnection {
  name?: string;
  groupIds?: string[];
  requestMessage?: string;
}

#suppress "@azure-tools/cadl-azure-core/documentation-required"
#suppress "@azure-tools/cadl-azure-core/casing-style"
model MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceProxy {
  id?: string;

  @OpenAPI.extension("x-ms-identifiers", [])
  groupConnectivityInformation?: MicrosoftAzureMigratePrivateEndpointModelsGroupConnectivityInformation[];
  remotePrivateEndpointConnection?: MicrosoftAzureMigratePrivateEndpointModelsResourceId;
  remotePrivateLinkServiceConnectionState?: MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkServiceConnectionState;
}

#suppress "@azure-tools/cadl-azure-core/documentation-required"
model MicrosoftAzureMigratePrivateEndpointModelsIpConfiguration {
  id?: string;
  privateIpAddress?: string;
  linkIdentifier?: string;
  groupId?: string;
  memberName?: string;
}
#suppress "@azure-tools/cadl-azure-core/documentation-required"
model MicrosoftAzureMigratePrivateEndpointModelsGroupConnectivityInformation {
  groupId?: string;
  memberName?: string;
  customerVisibleFqdns?: string[];
  internalFqdn?: string;
  redirectMapId?: string;
  privateLinkServiceArmRegion?: string;
}
#suppress "@azure-tools/cadl-azure-core/documentation-required"
model MicrosoftAzureMigratePrivateEndpointModelsPrivateLinkResourceProperties {
  requiredMembers?: string[];
  requiredZoneNames?: string[];
  groupId?: string;

  @doc("provisioning state enum")
  @visibility("read")
  provisioningState?: ProvisioningState;
}

@doc("Discovery Scope.")
enum DiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}

@doc("Error contract returned when some exception occurs in Rest API.")
model ErrorDetails {
  @doc("Gets the error code.")
  @visibility("read")
  code?: string;

  @doc("Gets the error message.")
  @visibility("read")
  message?: string;

  @doc("Gets the possible causes of error.")
  @visibility("read")
  possibleCauses?: string;

  @doc("Gets the recommended action to resolve error.")
  @visibility("read")
  recommendedAction?: string;

  @doc("Gets the error severity.")
  @visibility("read")
  severity?: string;

  @doc("Gets a value indicating whether the error originated from a agent or not.")
  @visibility("read")
  isAgentReportedError?: boolean;

  @doc("Gets the agent error code.")
  @visibility("read")
  agentErrorCode?: string;

  @doc("Gets the error message from the agent.")
  @visibility("read")
  agentErrorMessage?: string;

  @doc("Gets possible causes for the agent error.")
  @visibility("read")
  agentErrorPossibleCauses?: string;

  @doc("Gets the recommended action for the agent error.")
  @visibility("read")
  agentErrorRecommendedAction?: string;
}

@doc("The list of Machine MetaData.")
model MachineMetadataList {
  @doc("The list of Machine MetaData.")
  value: MachineMetadata[];
}

@doc("The properties of Machine MetaData")
model MachineMetadata { //TODO
  @doc("arm id of the machine.")
  id: string;

  @doc("value representing state of dependency mapping (enabled/disabled).")
  dependencyMapping: string;

  @doc("machine tags")
  tags: Record<string>;
}

@doc("The status of the current operation.")
enum ProvisioningState {
  Succeeded,
  Failed,
  Canceled,
  Provisioning,
  Updating,
  Deleting,
  Accepted,
}

@doc("Error contract returned when some exception occurs in Rest API.")
model SiteHealthErrorDetails {
  @doc("Gets the error message.")
  @visibility("read")
  message?: string;

  @doc("Gets the message parameters.")
  @visibility("read")
  messageParameters?: Record<string>;

  @doc("Gets the appliance name.")
  @visibility("read")
  applianceName?: string;

  @doc("Gets the error ID.")
  @visibility("read")
  id?: int32;

  @doc("Gets the error name.")
  @visibility("read")
  code?: string;

  @doc("Gets the possible causes of error.")
  @visibility("read")
  possibleCauses?: string;

  @doc("Gets the recommended action to resolve error.")
  @visibility("read")
  recommendedAction?: string;

  @doc("Gets the error severity.")
  @visibility("read")
  severity?: string;

  @doc("Gets the error summary message.")
  @visibility("read")
  summaryMessage?: string;

  @doc("Gets the error source.")
  @visibility("read")
  source?: HealthErrorDetailsSource;

  @doc("Gets the time stamp when the error was updated.")
  @visibility("read")
  updatedTimeStamp?: zonedDateTime;

  @doc("Gets run as account id used while performing discovery             of entity.")
  @visibility("read")
  runAsAccountId?: string;

  @doc("Gets discovery scope for which             error is encountered.")
  @visibility("read")
  discoveryScope?: HealthErrorDetailsDiscoveryScope;
}

@doc("Collection of SiteHealthSummary.")
model SiteHealthSummaryCollection {
  @doc("Gets the list of SiteHealthSummary.")
  @visibility("read")
  @OpenAPI.extension("x-ms-identifiers", ["applianceName"])
  value?: SiteHealthSummary[];

  @doc("Gets the value of next link.")
  @visibility("read")
  nextLink?: string;
}

enum LayoutUpdateSources {
  "RefreshFabricLayout",
  "RefreshFabricLayoutGuest",
  "RefreshFabricLayoutDependencyMap",
}

@doc("The properties of ServerSiteResource.")
model SiteHealthSummary {
  @doc("Appliance Name.")
  applianceName: string;

  @doc("Gets the error message.")
  errorMessage: string;

  @doc("Gets the summary message.")
  summaryMessage: string;

  @doc("Gets the error Id.")
  errorId: int64;

  @doc("Gets the error code.")
  errorCode: string;

  @doc("Gets or sets the count of affected objects.")
  affectedObjectsCount: int64;

  @doc("Gets or sets the hit count of the error.")
  hitCount: int64;

  @doc("Gets the severity of error..")
  severity: string;

  @doc("Gets the remediation guidance.")
  remediationGuidance: string;

  @doc("Gets the affected resource type.")
  affectedResourceType: string;

  @doc("Gets or sets the affected resources.")
  affectedResources: string[];

  @doc("RM ID of migration hub solution for SDS.")
  fabricLayoutUpdateSources: LayoutUpdateSources[];
}

@doc("Class for site properties.")
model SiteSpnProperties {
  @doc("""
Gets or sets the tenant Id for the service principal with which the
on-premise
            management/data plane components would communicate with
our Azure services.
""")
  tenantId?: string;

  @doc("""
Gets or sets the application/client Id for the service principal with which
the
            on-premise management/data plane components would communicate
with our Azure 
            services.
""")
  applicationId?: string;

  @doc("""
Gets or sets the object Id of the service principal with which the on-premise

           management/data plane components would communicate with our Azure
services.
""")
  objectId?: string;

  @doc("Gets or sets the intended audience for the service principal.")
  audience?: string;

  @doc("""
Gets or sets the AAD Authority URL which was used to request the token for
the
            service principal.
""")
  aadAuthority?: string;

  @doc("Gets or sets the raw certificate data for building certificate expiry flows.")
  rawCertData?: string;
}

@doc("Hyper-V site usage.")
model SiteUsageResponse {
  @doc("Gets or sets the number of machines discovered in the site.")
  machineCount: int32; //TODO

  @doc("Gets or sets the number of run as accounts in the site.")
  runAsAccountCount: int32; //TODO

  @doc("Gets or sets the number of hosts part of the site.")
  hostCount: int32;

  @doc("Gets or sets the number of clusters part of the site.")
  clusterCount: int32;

  @doc("The status of the last operation.")
  provisioningState?: ProvisioningState;
}
