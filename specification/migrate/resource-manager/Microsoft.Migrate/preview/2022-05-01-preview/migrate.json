{
  "swagger": "2.0",
  "info": {
    "title": "Azure Migrate Engine APIs",
    "description": "A first party Azure service for migrating data centre workloads.",
    "version": "2022-05-01-preview"
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/deployedResources/{deployedResourceName}": {
      "get": {
        "tags": [
          "DeployedResource"
        ],
        "summary": "Gets the deployed resource.",
        "description": "Gets the details of the deployed resource.",
        "operationId": "DeployedResource_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deployedResourceName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns DeployedResource Model on success.",
            "schema": {
              "$ref": "#/definitions/DeployedResourceModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "DeployedResource_Get": {
            "$ref": "./examples/DeployedResource_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/deployedResources": {
      "get": {
        "tags": [
          "DeployedResource"
        ],
        "summary": "Lists the deployed resources.",
        "description": "Gets the list of deployed resources in the given migrateDataCenter.",
        "operationId": "DeployedResource_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns DeployedResource Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/DeployedResourceModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "DeployedResource_List": {
            "$ref": "./examples/DeployedResource_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/migrateAgents/{agentName}": {
      "get": {
        "tags": [
          "MigrateAgent"
        ],
        "summary": "Gets the MigrateAgent.",
        "description": "Gets the details of the migrateDataCenter agent.",
        "operationId": "MigrateAgent_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "agentName",
            "description": "MigrateAgent name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns MigrateAgent Model on success.",
            "schema": {
              "$ref": "#/definitions/MigrateAgentModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "MigrateAgent_Get": {
            "$ref": "./examples/MigrateAgent_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "MigrateAgent"
        ],
        "summary": "Puts the MigrateAgent.",
        "description": "Creates the migrateDataCenter agent.",
        "operationId": "MigrateAgent_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "agentName",
            "description": "MigrateAgent name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "MigrateAgent model.",
            "schema": {
              "$ref": "#/definitions/MigrateAgentModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MigrateAgentModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MigrateAgentModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "MigrateAgent_Create": {
            "$ref": "./examples/MigrateAgent_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "MigrateAgent"
        ],
        "summary": "Updates the MigrateAgent.",
        "description": "Updates the migrateDataCenter agent.",
        "operationId": "MigrateAgent_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "agentName",
            "description": "MigrateAgent name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "MigrateAgent model.",
            "schema": {
              "$ref": "#/definitions/MigrateAgentModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MigrateAgentModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "MigrateAgent_Update": {
            "$ref": "./examples/MigrateAgent_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "MigrateAgent"
        ],
        "summary": "Deletes the MigrateAgent.",
        "description": "Deletes the migrateDataCenter agent.",
        "operationId": "MigrateAgent_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter Name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "agentName",
            "description": "MigrateAgent Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on deletion.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "MigrateAgent_Delete": {
            "$ref": "./examples/MigrateAgent_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/migrateAgents": {
      "get": {
        "tags": [
          "MigrateAgent"
        ],
        "summary": "Lists the MigrateAgents.",
        "description": "Gets the list of migrateDataCenter agents in the given migrateDataCenter.",
        "operationId": "MigrateAgent_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns MigrateAgent Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/MigrateAgentModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "MigrateAgent_List": {
            "$ref": "./examples/MigrateAgent_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/migrateAgents/{agentName}/refresh": {
      "post": {
        "tags": [
          "MigrateAgent"
        ],
        "summary": "Refreshes the MigrateAgent.",
        "description": "Refreshes the migrateDataCenter agent.",
        "operationId": "MigrateAgent_Refresh",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "agentName",
            "description": "MigrateAgent name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on refresh.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "MigrateAgent_Refresh": {
            "$ref": "./examples/MigrateAgent_Refresh.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/migrateAgents/{agentName}/operations/{operationId}": {
      "get": {
        "tags": [
          "MigrateAgent"
        ],
        "summary": "Gets the MigrateAgent operation status.",
        "description": "Tracks the results of an asynchronous operation on the migrateDataCenter agent.",
        "operationId": "MigrateAgentOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "agentName",
            "description": "MigrateAgent name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "MigrateAgentOperationStatus_Get": {
            "$ref": "./examples/MigrateAgentOperationStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}": {
      "get": {
        "tags": [
          "MigrateDataCenter"
        ],
        "summary": "Gets the migrate data center.",
        "description": "Gets the details of the migrate data center.",
        "operationId": "MigrateDataCenter_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "Migrate data center name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns MigrateDataCenter Model on success.",
            "schema": {
              "$ref": "#/definitions/MigrateDataCenterModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "MigrateDataCenter_Get": {
            "$ref": "./examples/MigrateDataCenter_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "MigrateDataCenter"
        ],
        "summary": "Puts the migrateDataCenter.",
        "description": "Creates the migrateDataCenter.",
        "operationId": "MigrateDataCenter_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "MigrateDataCenter properties.",
            "schema": {
              "$ref": "#/definitions/MigrateDataCenterModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MigrateDataCenterModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MigrateDataCenterModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "MigrateDataCenter_Create": {
            "$ref": "./examples/MigrateDataCenter_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "MigrateDataCenter"
        ],
        "summary": "Updates the migrateDataCenter.",
        "description": "Performs update on the migrateDataCenter.",
        "operationId": "MigrateDataCenter_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "MigrateDataCenter properties.",
            "schema": {
              "$ref": "#/definitions/MigrateDataCenterModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MigrateDataCenterModel"
            }
          },
          "202": {
            "description": "Returns success on update.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "MigrateDataCenter_Update": {
            "$ref": "./examples/MigrateDataCenter_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "MigrateDataCenter"
        ],
        "summary": "Deletes the migrateDataCenter.",
        "description": "Removes the migrateDataCenter.",
        "operationId": "MigrateDataCenter_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter Name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on deletion.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "MigrateDataCenter_Delete": {
            "$ref": "./examples/MigrateDataCenter_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Migrate/migrateDataCenters": {
      "get": {
        "tags": [
          "MigrateDataCenter"
        ],
        "summary": "Lists the migrateDataCenters.",
        "description": "Gets the list of migrateDataCenters in the given subscription.",
        "operationId": "MigrateDataCenter_ListBySubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Continuation token from the previous call.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns MigrateDataCenter Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/MigrateDataCenterModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "MigrateDataCenter_ListBySubscription": {
            "$ref": "./examples/MigrateDataCenter_ListBySubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters": {
      "get": {
        "tags": [
          "MigrateDataCenter"
        ],
        "summary": "Lists the migrateDataCenters.",
        "description": "Gets the list of migrateDataCenters in the given subscription and resource group.",
        "operationId": "MigrateDataCenter_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Continuation token from the previous call.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns MigrateDataCenter Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/MigrateDataCenterModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "MigrateDataCenter_List": {
            "$ref": "./examples/MigrateDataCenter_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/statistics": {
      "get": {
        "tags": [
          "MigrateDataCenter"
        ],
        "summary": "Gets the migrateDataCenter statistics.",
        "description": "Gets the statistics for the migrateDataCenter.",
        "operationId": "MigrateDataCenterStatistics_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns MigrateDataCenterStatistics Model on success.",
            "schema": {
              "$ref": "#/definitions/MigrateDataCenterStatisticsModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "MigrateDataCenterStatistics_Get": {
            "$ref": "./examples/MigrateDataCenterStatistics_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/operations/{operationId}": {
      "get": {
        "tags": [
          "MigrateDataCenter"
        ],
        "summary": "Gets the migrateDataCenter operation status.",
        "description": "Tracks the results of an asynchronous operation on the migrateDataCenter.",
        "operationId": "MigrateDataCenterOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "OperationType",
            "description": "The operation type.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "MigrateDataCenterOperationStatus_Get": {
            "$ref": "./examples/MigrateDataCenterOperationStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/jobs/{workflowName}": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Gets the workflow.",
        "description": "Gets the details of the job.",
        "operationId": "Workflow_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workflowName",
            "description": "Workflow name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Workflow Model on success.",
            "schema": {
              "$ref": "#/definitions/WorkflowModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "Workflow_Get": {
            "$ref": "./examples/Workflow_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/jobs": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Lists the workflows.",
        "description": "Gets the list of jobs in the given migrateDataCenter.",
        "operationId": "Workflow_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "Filter string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Continuation token.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Workflow Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/WorkflowModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Workflow_List": {
            "$ref": "./examples/Workflow_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/jobs/{workflowName}/operations/{operationId}": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Gets the workflow operation status.",
        "description": "Tracks the results of an asynchronous operation on the job.",
        "operationId": "WorkflowOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workflowName",
            "description": "Workflow name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "WorkflowOperationStatus_Get": {
            "$ref": "./examples/WorkflowOperationStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadDeployments/{workloadDeploymentName}": {
      "get": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Gets the workload deployment.",
        "description": "Gets the details of the workload deployment.",
        "operationId": "WorkloadDeployment_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns WorkloadDeployment Model on success.",
            "schema": {
              "$ref": "#/definitions/WorkloadDeploymentModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "WorkloadDeployment_Get": {
            "$ref": "./examples/WorkloadDeployment_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Puts the workload deployment.",
        "description": "Creates the workload deployment.",
        "operationId": "WorkloadDeployment_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Workload deployment model.",
            "schema": {
              "$ref": "#/definitions/WorkloadDeploymentModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkloadDeploymentModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkloadDeploymentModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadDeployment_Create": {
            "$ref": "./examples/WorkloadDeployment_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Updates the workload deployment.",
        "description": "Performs update on the workload deployment.",
        "operationId": "WorkloadDeployment_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Workload deployment model.",
            "schema": {
              "$ref": "#/definitions/WorkloadDeploymentModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkloadDeploymentModel"
            }
          },
          "202": {
            "description": "Success",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadDeployment_Update": {
            "$ref": "./examples/WorkloadDeployment_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Deletes the workload deployment.",
        "description": "Removes the workload deployment.",
        "operationId": "WorkloadDeployment_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "forceDelete",
            "description": "A flag indicating whether to do force delete or not.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Success",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadDeployment_Delete": {
            "$ref": "./examples/WorkloadDeployment_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadDeployments": {
      "get": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Lists the workload deployments.",
        "description": "Gets the list of workload deployments in the given migrateDataCenter.",
        "operationId": "WorkloadDeployment_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns WorkloadDeployment Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/WorkloadDeploymentModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "WorkloadDeployment_List": {
            "$ref": "./examples/WorkloadDeployment_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadDeployments/{workloadDeploymentName}/getSecrets": {
      "post": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Gets the workload deployment secrets.",
        "description": "Gets the secrets of the workload deployment.",
        "operationId": "WorkloadDeployment_GetSecretConfigurations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns WorkloadDeployment Model on success.",
            "schema": {
              "$ref": "#/definitions/WorkloadDeploymentModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "WorkloadDeployment_GetSecretConfigurations": {
            "$ref": "./examples/WorkloadDeployment_GetSecretConfigurations.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadDeployments/{workloadDeploymentName}/buildContainerImage": {
      "post": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Build container image.",
        "description": "Performs the build container image action on the workload deployment.",
        "operationId": "WorkloadDeployment_BuildContainerImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Build container image model.",
            "schema": {
              "$ref": "#/definitions/BuildContainerImageModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadDeployment_BuildContainerImage": {
            "$ref": "./examples/WorkloadDeployment_BuildContainerImage.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadDeployments/{workloadDeploymentName}/testMigrate": {
      "post": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Performs test migrate.",
        "description": "Performs the test migrate on the workload deployment.",
        "operationId": "WorkloadDeployment_TestMigrate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Test migrate model.",
            "schema": {
              "$ref": "#/definitions/TestMigrateModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadDeployment_TestMigrate": {
            "$ref": "./examples/WorkloadDeployment_TestMigrate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadDeployments/{workloadDeploymentName}/testMigrateCleanup": {
      "post": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Performs test migrate cleanup.",
        "description": "Performs the test migrate cleanup on the workload deployment.",
        "operationId": "WorkloadDeployment_TestMigrateCleanup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Test migrate cleanup model.",
            "schema": {
              "$ref": "#/definitions/TestMigrateCleanupModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadDeployment_TestMigrateCleanup": {
            "$ref": "./examples/WorkloadDeployment_TestMigrateCleanup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadDeployments/{workloadDeploymentName}/migrate": {
      "post": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Performs migrate.",
        "description": "Performs migrate on the workload deployment.",
        "operationId": "WorkloadDeployment_Migrate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Migrate model.",
            "schema": {
              "$ref": "#/definitions/MigrateModel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadDeployment_Migrate": {
            "$ref": "./examples/WorkloadDeployment_Migrate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadDeployments/{workloadDeploymentName}/completeMigration": {
      "post": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Performs complete migrate.",
        "description": "Performs the complete migrate on the workload deployment.",
        "operationId": "WorkloadDeployment_MigrateComplete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Workload deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadDeployment_MigrateComplete": {
            "$ref": "./examples/WorkloadDeployment_MigrateComplete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadDeployments/{workloadDeploymentName}/operations/{operationId}": {
      "get": {
        "tags": [
          "WorkloadDeployment"
        ],
        "summary": "Gets the workload deployment operation status.",
        "description": "Tracks the results of an asynchronous operation on the workload deployment.",
        "operationId": "WorkloadDeploymentOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadDeploymentName",
            "description": "Protected Item name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "WorkloadDeploymentOperationStatus_Get": {
            "$ref": "./examples/WorkloadDeploymentOperationStatus_Get.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadInstances/{workloadInstanceName}": {
      "get": {
        "tags": [
          "WorkloadInstance"
        ],
        "summary": "Gets the workload instance.",
        "description": "Gets the details of the workload instance.",
        "operationId": "WorkloadInstance_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadInstanceName",
            "description": "Workload instance name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Workload instance Model on success.",
            "schema": {
              "$ref": "#/definitions/WorkloadInstanceModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "WorkloadInstance_Get": {
            "$ref": "./examples/WorkloadInstance_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "WorkloadInstance"
        ],
        "summary": "Puts the workload instance.",
        "description": "Creates the workload instance in the given migrateDataCenter.",
        "operationId": "WorkloadInstance_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadInstanceName",
            "description": "Workload instance name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Workload instance model.",
            "schema": {
              "$ref": "#/definitions/WorkloadInstanceModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkloadInstanceModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkloadInstanceModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          },
          "202": {
            "description": "Returns success on creation.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadInstance_Create": {
            "$ref": "./examples/WorkloadInstance_Create.json"
          }
        }
      },
      "patch": {
        "tags": [
          "WorkloadInstance"
        ],
        "summary": "Updates the workload instance.",
        "description": "Updates the workload instance in the given migrateDataCenter.",
        "operationId": "WorkloadInstance_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadInstanceName",
            "description": "Workload instance name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Workload instance model.",
            "schema": {
              "$ref": "#/definitions/WorkloadInstanceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkloadInstanceModel"
            }
          },
          "202": {
            "description": "Success",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadInstance_Update": {
            "$ref": "./examples/WorkloadInstance_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "WorkloadInstance"
        ],
        "summary": "Deletes the workload instance.",
        "description": "Deletes the workload instance in the given migrateDataCenter.",
        "operationId": "WorkloadInstance_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter Name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadInstanceName",
            "description": "Workload instance name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Returns success on deletion.",
            "headers": {
              "Azure-AsyncOperation": {
                "description": "Tracking URL for long running operation.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WorkloadInstance_Delete": {
            "$ref": "./examples/WorkloadInstance_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadInstances": {
      "get": {
        "tags": [
          "WorkloadInstance"
        ],
        "summary": "Lists the workload instances.",
        "description": "Gets the list of workload instances in the given migrateDataCenter.",
        "operationId": "WorkloadInstance_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Workload instance Model Collection on success.",
            "schema": {
              "$ref": "#/definitions/WorkloadInstanceModelCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "WorkloadInstance_List": {
            "$ref": "./examples/WorkloadInstance_List.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateDataCenters/{migrateDataCenterName}/workloadInstances/{workloadInstanceName}/operations/{operationId}": {
      "get": {
        "tags": [
          "WorkloadInstance"
        ],
        "summary": "Gets the workload instance operation status.",
        "description": "Tracks the results of an asynchronous operation on the workload instance.",
        "operationId": "WorkloadInstanceOperationStatus_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "in": "path",
            "name": "migrateDataCenterName",
            "description": "MigrateDataCenter name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workloadInstanceName",
            "description": "Workload instance name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation Id.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OperationStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ArmError"
            }
          }
        },
        "x-ms-examples": {
          "WorkloadInstanceOperationStatus_Get": {
            "$ref": "./examples/WorkloadInstanceOperationStatus_Get.json"
          }
        }
      }
    }
  },
  "definitions": {
    "ACRProperties": {
      "description": "Class for ACR Properties.",
      "type": "object",
      "properties": {
        "registryName": {
          "description": "Gets or sets the azure container registry name.",
          "type": "string"
        },
        "tenantId": {
          "description": "Gets or sets the tenant id.",
          "type": "string"
        },
        "subscriptionId": {
          "description": "Gets or sets the subscription id of the resource.",
          "type": "string"
        },
        "resourceGroup": {
          "description": "Gets or sets the resource group of the resource.",
          "type": "string"
        }
      }
    },
    "AKSDeploymentProperties": {
      "description": "Class for AKSDeployment Properties.",
      "type": "object",
      "properties": {
        "aksClusterName": {
          "description": "Gets or sets the AKS cluster name.",
          "type": "string"
        },
        "tenantId": {
          "description": "Gets or sets the tenant id.",
          "type": "string"
        },
        "subscriptionId": {
          "description": "Gets or sets the subscription id of the resource.",
          "type": "string"
        },
        "resourceGroup": {
          "description": "Gets or sets the resource group of the resource.",
          "type": "string"
        }
      }
    },
    "AKSDeploymentSpecification": {
      "description": "AKS Deployment Specification.",
      "type": "object",
      "properties": {
        "kubernetesObjectsYaml": {
          "description": "Gets or sets the Merged Deployment and service Yaml.",
          "type": "string"
        },
        "replicaCount": {
          "description": "Gets or sets the replica count to be created in AKS.",
          "type": "string"
        },
        "loadBalancerType": {
          "description": "Gets or sets the load balancer type.",
          "enum": [
            "Private",
            "Public"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LoadBalancerType",
            "modelAsString": true
          }
        }
      }
    },
    "ApacheTomcatAKSWorkloadDeployment": {
      "description": "ApacheTomcat web application.",
      "type": "object",
      "properties": {
        "clusterProperties": {
          "$ref": "#/definitions/AKSDeploymentProperties"
        },
        "deploymentSpec": {
          "$ref": "#/definitions/AKSDeploymentSpecification"
        },
        "monitoringProperties": {
          "$ref": "#/definitions/AppInsightMonitoringProperties"
        },
        "deploymentHistory": {
          "description": "Gets or sets the deployment history.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployedResourcesProperties"
          },
          "readOnly": true
        },
        "deploymentNamePrefix": {
          "description": "Gets or sets the deployment name prefix.",
          "type": "string"
        },
        "automationArtifactProperties": {
          "$ref": "#/definitions/AutomationArtifact"
        },
        "directories": {
          "description": "Gets or sets application directories.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApplicationDirectory"
          }
        },
        "configurations": {
          "description": "Gets or sets application configuration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApplicationConfiguration"
          }
        },
        "containerImageProperties": {
          "$ref": "#/definitions/ContainerImageProperties"
        },
        "buildContainerImages": {
          "description": "Gets or sets the build container images.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerImageProperties"
          }
        },
        "bindings": {
          "description": "Gets or sets the bindings for the application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Binding"
          }
        },
        "requests": {
          "$ref": "#/definitions/ResourceRequirements"
        },
        "limits": {
          "$ref": "#/definitions/ResourceRequirements"
        },
        "targetPlatformIdentity": {
          "description": "Gets or sets the target platform managed identity.",
          "type": "string"
        }
      }
    },
    "ApacheTomcatAKSWorkloadDeploymentModelCustomProperties": {
      "description": "ApacheTomcat workload instance model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkloadDeploymentModelCustomProperties"
        }
      ],
      "properties": {
        "apacheTomcatAksWorkloadDeploymentProperties": {
          "$ref": "#/definitions/ApacheTomcatAKSWorkloadDeployment"
        }
      }
    },
    "ApacheTomcatWebApplication": {
      "description": "ApacheTomcat web application.",
      "type": "object",
      "properties": {
        "applicationId": {
          "description": "Gets the web application id.",
          "type": "string",
          "readOnly": true
        },
        "applicationName": {
          "description": "Gets the web application name.",
          "type": "string",
          "readOnly": true
        },
        "webServerId": {
          "description": "Gets the web server id.",
          "type": "string",
          "readOnly": true
        },
        "webServerName": {
          "description": "Gets the web server name.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "Gets the display name.",
          "type": "string",
          "readOnly": true
        },
        "directories": {
          "description": "Gets or sets application directories.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApplicationDirectory"
          }
        },
        "configurations": {
          "description": "Gets or sets application configuration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApplicationConfiguration"
          }
        },
        "path": {
          "$ref": "#/definitions/DirectoryPath"
        },
        "bindings": {
          "description": "Gets or sets the bindings for the application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Binding"
          }
        },
        "primaryFramework": {
          "$ref": "#/definitions/WebApplicationFramework"
        },
        "discoveredFrameworks": {
          "description": "Gets or sets the discovered frameworks of application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApplicationFramework"
          }
        },
        "requests": {
          "$ref": "#/definitions/ResourceRequirements"
        },
        "limits": {
          "$ref": "#/definitions/ResourceRequirements"
        }
      }
    },
    "ApacheTomcatWorkloadInstanceModelCustomProperties": {
      "description": "ApacheTomcat workload instance model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkloadInstanceModelCustomProperties"
        }
      ],
      "properties": {
        "apacheTomcatWebApplication": {
          "$ref": "#/definitions/ApacheTomcatWebApplication"
        }
      }
    },
    "AppInsightMonitoringProperties": {
      "description": "Class for app insight monitoring properties.",
      "type": "object",
      "properties": {
        "subscriptionId": {
          "description": "Gets or sets the subscription id of the resource.",
          "type": "string"
        },
        "resourceGroup": {
          "description": "Gets or sets the resource group of the resource.",
          "type": "string"
        },
        "appInsightsName": {
          "description": "Gets or sets the app insights name.",
          "type": "string"
        },
        "region": {
          "description": "Gets or sets the region.",
          "type": "string"
        },
        "isEnabled": {
          "description": "Gets or sets a value indicating whether monitoring is enabled.",
          "type": "boolean"
        },
        "secretStoreDetails": {
          "$ref": "#/definitions/SecretStoreDetails"
        }
      }
    },
    "ArmError": {
      "description": "ARM error.",
      "type": "object",
      "properties": {
        "Error": {
          "$ref": "#/definitions/ArmErrorInfo"
        }
      }
    },
    "ArmErrorInfo": {
      "description": "Arm error information.",
      "type": "object",
      "properties": {
        "Code": {
          "description": "Gets or sets the error code returned by the service.",
          "type": "string"
        },
        "Message": {
          "description": "Gets or sets error Message returned by the service.",
          "type": "string"
        }
      }
    },
    "AutomationArtifact": {
      "description": "Class for automation artifact.",
      "type": "object",
      "properties": {
        "artifacts": {
          "description": "Gets or sets the artifacts.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AzureFileShareHydrationProfile": {
      "description": "Azure file share profile for hydration of application folders not mounted on\r\nthe container file system.",
      "type": "object",
      "properties": {
        "azureFileShareName": {
          "description": "Gets or sets the name of the azure file share.",
          "type": "string"
        },
        "azureFileShareSubscriptionId": {
          "description": "Gets or sets the subscription id of the azure file share.",
          "type": "string"
        },
        "azureFileShareResourceGroup": {
          "description": "Gets or sets the name of the azure file share resource group.",
          "type": "string"
        },
        "azureFileShareStorageAccount": {
          "description": "Gets or sets the name of the azure file share storage account.",
          "type": "string"
        }
      }
    },
    "Binding": {
      "description": "Binding for a web application.",
      "type": "object",
      "properties": {
        "port": {
          "description": "Gets or sets the application port.",
          "type": "string"
        },
        "portMapping": {
          "$ref": "#/definitions/PortMapping"
        },
        "cert": {
          "$ref": "#/definitions/Cert"
        },
        "hostName": {
          "description": "Gets or sets the binding host name.",
          "type": "string"
        },
        "protocol": {
          "description": "Gets or sets the protocol.",
          "type": "string"
        },
        "ipAddress": {
          "description": "Gets or sets the IP Address.",
          "type": "string"
        }
      }
    },
    "BuildContainerImageModel": {
      "description": "BuildContainerImage model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ContainerImageProperties"
        }
      }
    },
    "Cert": {
      "description": "WebApplication certificate.",
      "type": "object",
      "properties": {
        "certNeeded": {
          "description": "Gets or sets a value indicating whether certificate is needed or not.",
          "type": "boolean"
        },
        "certProvided": {
          "description": "Gets or sets a value indicating whether certificate is provided or not.",
          "type": "boolean"
        },
        "secretStore": {
          "description": "Gets or sets the type of secret store for the certificate.",
          "enum": [
            "None",
            "KubeSecret",
            "KeyVaultSecret",
            "AppServiceAppSettings"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SecretStoreType",
            "modelAsString": true
          }
        }
      }
    },
    "ContainerImageProperties": {
      "description": "Class for container image properties.",
      "type": "object",
      "properties": {
        "dockerfile": {
          "description": "Gets or sets the dockerfile for the container image.",
          "type": "string"
        },
        "registryProperties": {
          "$ref": "#/definitions/ACRProperties"
        },
        "imageTag": {
          "description": "Gets or sets the container image tag.",
          "type": "string"
        },
        "imageName": {
          "description": "Gets or sets the container image name.",
          "type": "string"
        }
      }
    },
    "DeployedResourceModel": {
      "description": "DeployedResource model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DeployedResourceModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "DeployedResourceModelCollection": {
      "description": "DeployedResource model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of deployedResources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployedResourceModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "DeployedResourceModelProperties": {
      "description": "DeployedResource properties.",
      "type": "object",
      "properties": {
        "deploymentDetails": {
          "description": "Gets or sets the deployment details.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "workloadDeploymentId": {
          "description": "Gets or sets the workload deployment id.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "Gets or sets the name of deployed resources.",
          "type": "string",
          "readOnly": true
        },
        "context": {
          "description": "Gets or sets the context of deployed resources.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Gets or sets the status of deployed resources.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of deployed resources.",
          "type": "string",
          "readOnly": true
        },
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        }
      }
    },
    "DeployedResourcesProperties": {
      "description": "Class for deployed resource properties.",
      "type": "object",
      "properties": {
        "deployedResourceId": {
          "description": "Gets or sets the deployed resource id.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "Gets or sets the name of deployed resources.",
          "type": "string",
          "readOnly": true
        },
        "context": {
          "description": "Gets or sets the context of deployed resources.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Gets or sets the status of deployed resources.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of deployed resources.",
          "type": "string",
          "readOnly": true
        },
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        }
      }
    },
    "DirectoryPath": {
      "description": "Second level entity for virtual directories.",
      "type": "object",
      "properties": {
        "virtual": {
          "description": "Gets or sets the virtual path for the directory.",
          "type": "string"
        },
        "physical": {
          "description": "Gets or sets the physical path of the directory on the web server.",
          "type": "string"
        }
      }
    },
    "ErrorModel": {
      "description": "Error model.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Gets or sets the error code.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the error type.",
          "type": "string",
          "readOnly": true
        },
        "severity": {
          "description": "Gets or sets the error severity.",
          "type": "string",
          "readOnly": true
        },
        "creationTime": {
          "format": "date-time",
          "description": "Gets or sets the creation time of error.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "Gets or sets the error message.",
          "type": "string",
          "readOnly": true
        },
        "causes": {
          "description": "Gets or sets the possible causes of error.",
          "type": "string",
          "readOnly": true
        },
        "recommendation": {
          "description": "Gets or sets the recommended action to resolve error.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "HealthErrorModel": {
      "description": "Health error model.",
      "type": "object",
      "properties": {
        "affectedResourceType": {
          "description": "Gets or sets the type of affected resource type.",
          "type": "string"
        },
        "affectedResourceCorrelationIds": {
          "description": "Gets or sets the list of affected resource correlation Ids. This can be used to\r\nuniquely identify the count of items affected by a specific category and severity\r\nas well as count of item affected by an specific issue.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "childErrors": {
          "description": "Gets or sets a list of child health errors associated with this error.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InnerHealthErrorModel"
          }
        },
        "code": {
          "description": "Gets or sets the error code.",
          "type": "string",
          "readOnly": true
        },
        "healthCategory": {
          "description": "Gets or sets the health category.",
          "type": "string",
          "readOnly": true
        },
        "category": {
          "description": "Gets or sets the error category.",
          "type": "string",
          "readOnly": true
        },
        "severity": {
          "description": "Gets or sets the error severity.",
          "type": "string",
          "readOnly": true
        },
        "source": {
          "description": "Gets or sets the error source.",
          "type": "string",
          "readOnly": true
        },
        "creationTime": {
          "format": "date-time",
          "description": "Gets or sets the error creation time.",
          "type": "string",
          "readOnly": true
        },
        "isCustomerResolvable": {
          "description": "Gets or sets a value indicating whether the error is customer resolvable.",
          "type": "boolean",
          "readOnly": true
        },
        "summary": {
          "description": "Gets or sets the error summary.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "Gets or sets the error message.",
          "type": "string",
          "readOnly": true
        },
        "causes": {
          "description": "Gets or sets possible causes of the error.",
          "type": "string",
          "readOnly": true
        },
        "recommendation": {
          "description": "Gets or sets recommended action to resolve the error.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IdentityModel": {
      "description": "Identity model.",
      "type": "object",
      "properties": {
        "tenantId": {
          "description": "Gets or sets the tenant Id of the SPN with which MigrateAgent communicates to service.",
          "type": "string"
        },
        "applicationId": {
          "description": "Gets or sets the client/application Id of the SPN with which MigrateAgent communicates to\r\nservice.",
          "type": "string"
        },
        "objectId": {
          "description": "Gets or sets the object Id of the SPN with which MigrateAgent communicates to service.",
          "type": "string"
        },
        "audience": {
          "description": "Gets or sets the audience of the SPN with which MigrateAgent communicates to service.",
          "type": "string"
        },
        "aadAuthority": {
          "description": "Gets or sets the authority of the SPN with which MigrateAgent communicates to service.",
          "type": "string"
        }
      }
    },
    "IISAKSWorkloadDeployment": {
      "description": "IIS AKS workload deployment.",
      "type": "object",
      "properties": {
        "clusterProperties": {
          "$ref": "#/definitions/AKSDeploymentProperties"
        },
        "deploymentSpec": {
          "$ref": "#/definitions/AKSDeploymentSpecification"
        },
        "monitoringProperties": {
          "$ref": "#/definitions/AppInsightMonitoringProperties"
        },
        "deploymentHistory": {
          "description": "Gets or sets the deployment history.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployedResourcesProperties"
          },
          "readOnly": true
        },
        "deploymentNamePrefix": {
          "description": "Gets or sets the deployment name prefix.",
          "type": "string"
        },
        "automationArtifactProperties": {
          "$ref": "#/definitions/AutomationArtifact"
        },
        "directories": {
          "description": "Gets or sets application directories.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApplicationDirectory"
          }
        },
        "configurations": {
          "description": "Gets or sets application configuration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApplicationConfiguration"
          }
        },
        "containerImageProperties": {
          "$ref": "#/definitions/ContainerImageProperties"
        },
        "buildContainerImages": {
          "description": "Gets or sets the build container images.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerImageProperties"
          }
        },
        "bindings": {
          "description": "Gets or sets the bindings for the application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Binding"
          }
        },
        "requests": {
          "$ref": "#/definitions/ResourceRequirements"
        },
        "limits": {
          "$ref": "#/definitions/ResourceRequirements"
        },
        "targetPlatformIdentity": {
          "description": "Gets or sets the target platform managed identity.",
          "type": "string"
        }
      }
    },
    "IISAKSWorkloadDeploymentModelCustomProperties": {
      "description": "IIS workload instance model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkloadDeploymentModelCustomProperties"
        }
      ],
      "properties": {
        "iisAksWorkloadDeploymentProperties": {
          "$ref": "#/definitions/IISAKSWorkloadDeployment"
        }
      }
    },
    "IISApplicationDetails": {
      "description": "IISApplication details.",
      "type": "object",
      "properties": {
        "applicationPoolName": {
          "description": "Gets or sets the application pool name.",
          "type": "string"
        },
        "managedPipelineMode": {
          "description": "Gets or sets the managed pipeline mode.",
          "type": "string"
        },
        "runtimeVersion": {
          "description": "Gets or sets the runtime version.",
          "type": "string"
        },
        "enable32BitApiOnWin64": {
          "description": "Gets or sets a value indicating whether 32 bit applications are allowed to run on 64 bit.",
          "type": "boolean"
        },
        "path": {
          "$ref": "#/definitions/DirectoryPath"
        },
        "directories": {
          "description": "Gets or sets the list of directories.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DirectoryPath"
          }
        }
      }
    },
    "IISVirtualApplicationDetails": {
      "description": "IIS virtual application details.",
      "type": "object",
      "properties": {
        "isVirtualDirectory": {
          "description": "Gets a value indicating whether the application corresponds to a directory.",
          "type": "boolean",
          "readOnly": true
        },
        "path": {
          "$ref": "#/definitions/DirectoryPath"
        },
        "directories": {
          "description": "Gets or sets the list of directories.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DirectoryPath"
          }
        }
      }
    },
    "IISWebApplication": {
      "description": "IISWeb application.",
      "type": "object",
      "properties": {
        "applications": {
          "description": "Gets or sets the list of applications for the IIS web site.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IISApplicationDetails"
          }
        },
        "virtualApplications": {
          "description": "Gets or sets the list of application units for the web site.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IISVirtualApplicationDetails"
          }
        },
        "iisWebServer": {
          "$ref": "#/definitions/IISWebServer"
        },
        "applicationId": {
          "description": "Gets the web application id.",
          "type": "string",
          "readOnly": true
        },
        "applicationName": {
          "description": "Gets the web application name.",
          "type": "string",
          "readOnly": true
        },
        "webServerId": {
          "description": "Gets the web server id.",
          "type": "string",
          "readOnly": true
        },
        "webServerName": {
          "description": "Gets the web server name.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "Gets the display name.",
          "type": "string",
          "readOnly": true
        },
        "directories": {
          "description": "Gets or sets application directories.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApplicationDirectory"
          }
        },
        "configurations": {
          "description": "Gets or sets application configuration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApplicationConfiguration"
          }
        },
        "path": {
          "$ref": "#/definitions/DirectoryPath"
        },
        "bindings": {
          "description": "Gets or sets the bindings for the application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Binding"
          }
        },
        "primaryFramework": {
          "$ref": "#/definitions/WebApplicationFramework"
        },
        "discoveredFrameworks": {
          "description": "Gets or sets the discovered frameworks of application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApplicationFramework"
          }
        },
        "requests": {
          "$ref": "#/definitions/ResourceRequirements"
        },
        "limits": {
          "$ref": "#/definitions/ResourceRequirements"
        }
      }
    },
    "IISWebServer": {
      "description": "IISWeb server.",
      "type": "object",
      "properties": {
        "serverId": {
          "description": "Gets the web server id.",
          "type": "string",
          "readOnly": true
        },
        "serverName": {
          "description": "Gets the web server name.",
          "type": "string",
          "readOnly": true
        },
        "rootConfigurationLocation": {
          "description": "Gets the server root configuration location.",
          "type": "string",
          "readOnly": true
        },
        "version": {
          "description": "Gets the server version.",
          "type": "string",
          "readOnly": true
        },
        "machines": {
          "description": "Gets the list of machines.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "webApplications": {
          "description": "Gets the list of web applications.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "displayName": {
          "description": "Gets the display name.",
          "type": "string",
          "readOnly": true
        },
        "serverFqdn": {
          "description": "Gets the server FQDN.",
          "type": "string",
          "readOnly": true
        },
        "runAsAccountId": {
          "description": "Gets the run as account id.",
          "type": "string",
          "readOnly": true
        },
        "operatingSystemDetails": {
          "$ref": "#/definitions/OperatingSystemDetails"
        }
      }
    },
    "IISWorkloadInstanceModelCustomProperties": {
      "description": "IIS workload instance model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkloadInstanceModelCustomProperties"
        }
      ],
      "properties": {
        "iisWebApplication": {
          "$ref": "#/definitions/IISWebApplication"
        }
      }
    },
    "InnerHealthErrorModel": {
      "description": "Inner health error model.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Gets or sets the error code.",
          "type": "string",
          "readOnly": true
        },
        "healthCategory": {
          "description": "Gets or sets the health category.",
          "type": "string",
          "readOnly": true
        },
        "category": {
          "description": "Gets or sets the error category.",
          "type": "string",
          "readOnly": true
        },
        "severity": {
          "description": "Gets or sets the error severity.",
          "type": "string",
          "readOnly": true
        },
        "source": {
          "description": "Gets or sets the error source.",
          "type": "string",
          "readOnly": true
        },
        "creationTime": {
          "format": "date-time",
          "description": "Gets or sets the error creation time.",
          "type": "string",
          "readOnly": true
        },
        "isCustomerResolvable": {
          "description": "Gets or sets a value indicating whether the error is customer resolvable.",
          "type": "boolean",
          "readOnly": true
        },
        "summary": {
          "description": "Gets or sets the error summary.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "Gets or sets the error message.",
          "type": "string",
          "readOnly": true
        },
        "causes": {
          "description": "Gets or sets possible causes of the error.",
          "type": "string",
          "readOnly": true
        },
        "recommendation": {
          "description": "Gets or sets recommended action to resolve the error.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "MigrateAgentModel": {
      "description": "MigrateAgent model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MigrateAgentModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "MigrateAgentModelCollection": {
      "description": "MigrateAgent model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of agents.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MigrateAgentModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "MigrateAgentModelCustomProperties": {
      "description": "MigrateAgent model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "type": "string"
        }
      },
      "discriminator": "instanceType"
    },
    "MigrateAgentModelProperties": {
      "description": "MigrateAgent model properties.",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "Gets or sets the MigrateAgent correlation Id.",
          "type": "string",
          "readOnly": true
        },
        "machineId": {
          "description": "Gets or sets the machine Id where MigrateAgent is running.",
          "type": "string"
        },
        "machineName": {
          "description": "Gets or sets the machine name where MigrateAgent is running.",
          "type": "string"
        },
        "authenticationIdentity": {
          "$ref": "#/definitions/IdentityModel"
        },
        "isResponsive": {
          "description": "Gets or sets a value indicating whether MigrateAgent is responsive.",
          "type": "boolean",
          "readOnly": true
        },
        "lastHeartbeat": {
          "format": "date-time",
          "description": "Gets or sets the time when last heartbeat was sent by the MigrateAgent.",
          "type": "string",
          "readOnly": true
        },
        "versionNumber": {
          "description": "Gets or sets the MigrateAgent version.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Gets or sets the provisioning state of the MigrateAgent.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/MigrateAgentModelCustomProperties"
        }
      }
    },
    "MigrateDataCenterModel": {
      "description": "MigrateDataCenter model.",
      "type": "object",
      "properties": {
        "location": {
          "description": "Gets or sets the location of the migrateDataCenter.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/MigrateDataCenterModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "MigrateDataCenterModelCollection": {
      "description": "MigrateDataCenter model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of migrateDataCenters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MigrateDataCenterModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "MigrateDataCenterModelProperties": {
      "description": "MigrateDataCenter properties.",
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Gets or sets the provisioning state of the migrateDataCenter.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "serviceResourceId": {
          "description": "Gets or sets the service resource Id.",
          "type": "string",
          "readOnly": true
        },
        "serviceEndpoint": {
          "description": "Gets or sets the service endpoint.",
          "type": "string",
          "readOnly": true
        },
        "migrationConfiguration": {
          "$ref": "#/definitions/MigrationConfiguration"
        }
      }
    },
    "MigrateDataCenterStatisticsModel": {
      "description": "MigrateDataCenter statistics model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MigrateDataCenterStatisticsModelProperties"
        }
      }
    },
    "MigrateDataCenterStatisticsModelProperties": {
      "description": "MigrateDataCenter statistics properties.",
      "type": "object",
      "properties": {
        "workloadDeploymentStatistics": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkloadDeploymentStatisticsModel"
            }
          ],
          "readOnly": true
        },
        "jobStatistics": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowStatisticsModel"
            }
          ],
          "readOnly": true
        },
        "workloadStatistics": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkloadInstanceStatisticsModel"
            }
          ],
          "readOnly": true
        },
        "migrateDataCenterErrors": {
          "description": "Gets or sets the list of migrateDataCenter health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        }
      }
    },
    "MigrateModel": {
      "description": "Migrate model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MigrateModelProperties"
        }
      }
    },
    "MigrateModelCustomProperties": {
      "description": "Migrate model custom properties.",
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "type": "string"
        }
      }
    },
    "MigrateModelProperties": {
      "description": "Migrate model properties.",
      "type": "object",
      "properties": {
        "customProperties": {
          "$ref": "#/definitions/MigrateModelCustomProperties"
        }
      }
    },
    "MigrateWorkflowModelCustomProperties": {
      "description": "Migrate workflow model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowModelCustomProperties"
        }
      ],
      "properties": {
        "workloadDeploymentDetails": {
          "description": "Gets or sets the failed over workload deployment details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MigrateWorkloadDeploymentProperties"
          },
          "readOnly": true
        }
      }
    },
    "MigrateWorkloadDeploymentProperties": {
      "description": "Migrate properties of the workload deployment.",
      "type": "object",
      "properties": {
        "workloadDeploymentName": {
          "description": "Gets or sets the workload deployment name.",
          "type": "string",
          "readOnly": true
        },
        "vmName": {
          "description": "Gets or sets the VM name.",
          "type": "string",
          "readOnly": true
        },
        "testVmName": {
          "description": "Gets or sets the test VM name.",
          "type": "string",
          "readOnly": true
        },
        "recoveryPointId": {
          "description": "Gets or sets the recovery point Id.",
          "type": "string",
          "readOnly": true
        },
        "recoveryPointTime": {
          "format": "date-time",
          "description": "Gets or sets the recovery point time.",
          "type": "string",
          "readOnly": true
        },
        "networkName": {
          "description": "Gets or sets the network name.",
          "type": "string",
          "readOnly": true
        },
        "subnet": {
          "description": "Gets or sets the network subnet.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "MigrationConfiguration": {
      "description": "MigrateDataCenter properties.",
      "type": "object",
      "properties": {
        "storageAccountResourceId": {
          "description": "Gets or sets the storage account resource Id.",
          "type": "string"
        },
        "keyVaultResourceId": {
          "description": "Gets or sets the key vault resource Id.",
          "type": "string"
        },
        "migrationSolutionResourceId": {
          "description": "Gets or sets the migration solution resource Id.",
          "type": "string"
        },
        "linkedAgents": {
          "description": "Gets or sets the link agents.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "OperatingSystemDetails": {
      "type": "object",
      "properties": {
        "OS": {
          "enum": [
            "Windows",
            "Linux"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "OperatingSystemType",
            "modelAsString": true
          }
        },
        "OSName": {
          "type": "string"
        },
        "OSVersion": {
          "type": "string"
        }
      }
    },
    "OperationStatus": {
      "description": "Defines the operation status.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the Id.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the operation name.",
          "type": "string"
        },
        "status": {
          "description": "Gets or sets the status of the operation. ARM expects the terminal status to be one of\r\nSucceeded/ Failed/ Canceled. All other values imply that the operation is still running.",
          "type": "string"
        },
        "startTime": {
          "description": "Gets or sets the start time.",
          "type": "string"
        },
        "endTime": {
          "description": "Gets or sets the end time.",
          "type": "string"
        }
      }
    },
    "PortMapping": {
      "description": "WebApplication port mapping.",
      "type": "object",
      "properties": {
        "internalPort": {
          "format": "int32",
          "description": "Gets or sets the Internal Port.",
          "type": "integer"
        },
        "externalPort": {
          "format": "int32",
          "description": "Gets or sets the External Port.",
          "type": "integer"
        }
      }
    },
    "ResourceRequirements": {
      "description": "Resource Requirements.",
      "type": "object",
      "properties": {
        "cpu": {
          "description": "Gets or sets the Cpu requirement.",
          "type": "string"
        },
        "memory": {
          "description": "Gets or sets the Memory requirement.",
          "type": "string"
        }
      }
    },
    "SecretStoreDetails": {
      "type": "object",
      "properties": {
        "secretStore": {
          "enum": [
            "None",
            "KubeSecret",
            "KeyVaultSecret",
            "AppServiceAppSettings"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SecretStoreType",
            "modelAsString": true
          }
        },
        "secretStoreProperties": {
          "$ref": "#/definitions/SecretStoreProperties"
        }
      }
    },
    "SecretStoreProperties": {
      "type": "object",
      "properties": {
        "secretStoreId": {
          "type": "string"
        }
      }
    },
    "SystemDataModel": {
      "description": "System data required to be defined for Azure resources.",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "Gets or sets identity that created the resource.",
          "type": "string"
        },
        "createdByType": {
          "description": "Gets or sets the type of identity that created the resource: user, application,\r\nmanagedIdentity.",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "Gets or sets the timestamp of resource creation (UTC).",
          "type": "string"
        },
        "lastModifiedBy": {
          "description": "Gets or sets the identity that last modified the resource.",
          "type": "string"
        },
        "lastModifiedByType": {
          "description": "Gets or sets the type of identity that last modified the resource: user, application,\r\nmanagedIdentity.",
          "type": "string"
        },
        "lastModifiedAt": {
          "format": "date-time",
          "description": "Gets or sets the timestamp of resource last modification (UTC).",
          "type": "string"
        }
      }
    },
    "TargetStorageProfile": {
      "description": "Storage profile for the directory on the target container.",
      "type": "object",
      "properties": {
        "storageAccessType": {
          "description": "Gets or sets the target storage access type.",
          "enum": [
            "Shared",
            "Exclusive"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TargetStorageAccessType",
            "modelAsString": true
          }
        },
        "storageProjectionType": {
          "description": "Gets or sets the target projection type.",
          "enum": [
            "ContainerFileSystem",
            "PersistentVolume"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TargetStorageProjectionType",
            "modelAsString": true
          }
        },
        "hydrationStorageProviderType": {
          "description": "Gets or sets the storage provider type on the target.\r\nApplicable when StorageProjectionType is not ContainerFileSystem.",
          "enum": [
            "AzureFileShare"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TargetHydrationStorageProviderType",
            "modelAsString": true
          }
        },
        "persistentVolumeId": {
          "description": "Gets or sets the target persistent volume id.\r\nApplicable when StorageProjectionType is PersistentVolume and on using an\r\nexisting PersistentVolume.",
          "type": "string"
        },
        "targetName": {
          "description": "Gets or sets the name of the projected volume on the target environment.",
          "type": "string"
        },
        "targetSize": {
          "description": "Gets or sets the storage size on the target.\r\nApplicable when StorageProjectionType is PersistentVolume and on creating a new\r\nPersistentVolume.",
          "type": "string"
        },
        "azureFileShareProfile": {
          "$ref": "#/definitions/AzureFileShareHydrationProfile"
        }
      }
    },
    "TaskModel": {
      "description": "Task model.",
      "type": "object",
      "properties": {
        "taskName": {
          "description": "Gets or sets the task name.",
          "type": "string",
          "readOnly": true
        },
        "state": {
          "description": "Gets or sets the task state.",
          "enum": [
            "Pending",
            "Started",
            "Succeeded",
            "Failed",
            "Cancelled",
            "Skipped"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "TaskState",
            "modelAsString": true
          }
        },
        "startTime": {
          "format": "date-time",
          "description": "Gets or sets the start time.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Gets or sets the end time.",
          "type": "string",
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/TaskModelCustomProperties"
        }
      }
    },
    "TaskModelCustomProperties": {
      "description": "Task model custom properties.",
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "type": "string"
        }
      }
    },
    "TestMigrateCleanupModel": {
      "description": "Test migrate cleanup model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/TestMigrateCleanupModelProperties"
        }
      }
    },
    "TestMigrateCleanupModelProperties": {
      "description": "Test migrate cleanup model properties.",
      "type": "object",
      "properties": {
        "comments": {
          "description": "Gets or sets the test migrate cleanup comments.",
          "maxLength": 1024,
          "type": "string"
        }
      }
    },
    "TestMigrateCleanupWorkflowModelCustomProperties": {
      "description": "Test migrate cleanup workflow model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowModelCustomProperties"
        }
      ],
      "properties": {
        "comments": {
          "description": "Gets or sets the test migrate cleanup comments.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TestMigrateModel": {
      "description": "Test migrate model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/TestMigrateModelProperties"
        }
      }
    },
    "TestMigrateModelProperties": {
      "description": "Test migrate model properties.",
      "type": "object",
      "properties": {
        "customProperties": {
          "$ref": "#/definitions/WorkloadDeploymentModelCustomProperties"
        }
      }
    },
    "TestMigrateWorkflowModelCustomProperties": {
      "description": "Test migrate workflow model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowModelCustomProperties"
        }
      ],
      "properties": {
        "workloadDeploymentDetails": {
          "description": "Gets or sets the test VM details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MigrateWorkloadDeploymentProperties"
          },
          "readOnly": true
        }
      }
    },
    "VMwareMigrateAgentModelCustomProperties": {
      "description": "VMware MigrateAgent model custom properties.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/MigrateAgentModelCustomProperties"
        }
      ],
      "properties": {
        "biosId": {
          "description": "Gets or sets the BIOS Id of the MigrateAgent machine.",
          "type": "string"
        }
      }
    },
    "WebApplicationConfiguration": {
      "description": "Class for web application configurations.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the configuration name.",
          "type": "string"
        },
        "filePath": {
          "description": "Gets or sets the configuration file path.",
          "type": "string"
        },
        "section": {
          "description": "Gets or sets the configuration section in the file.",
          "type": "string"
        },
        "type": {
          "description": "Gets or sets the configuration type.",
          "enum": [
            "IISConnectionString",
            "IISAuthentication",
            "ApacheTomcatContextResource"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ConfigurationType",
            "modelAsString": true
          }
        },
        "isDeploymentTimeEditable": {
          "description": "Gets or sets a value indicating whether the configuration is edited or not by the user.",
          "type": "boolean"
        },
        "value": {
          "description": "Gets or sets the configuration value.",
          "type": "string"
        },
        "identifier": {
          "description": "Gets or sets the identifier for the configuration.",
          "type": "string"
        },
        "secretStoreDetails": {
          "$ref": "#/definitions/SecretStoreDetails"
        }
      }
    },
    "WebApplicationDirectory": {
      "description": "WebApplication directory structure.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets the unique id corresponding to the application directory.",
          "type": "string",
          "readOnly": true
        },
        "isEditable": {
          "description": "Gets or sets a value indicating whether the directory object is editable.\r\nTrue when the directory is added as an optional directory, false when discovery is done\r\nmanually.",
          "type": "boolean"
        },
        "sourcePaths": {
          "description": "Gets or sets the paths of the directory on the source machine.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sourceSize": {
          "description": "Gets or sets the size of the directory on the source machine.",
          "type": "string"
        },
        "storageProfile": {
          "$ref": "#/definitions/TargetStorageProfile"
        }
      }
    },
    "WebApplicationFramework": {
      "description": "Framework specific data for a web application.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets Name of the framework.",
          "type": "string"
        },
        "version": {
          "description": "Gets or sets Version of the framework.",
          "type": "string"
        }
      }
    },
    "WorkflowModel": {
      "description": "Workflow model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/WorkflowModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "WorkflowModelCollection": {
      "description": "Workflow model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of workflows.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "WorkflowModelCustomProperties": {
      "description": "Workflow model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "type": "string"
        },
        "affectedObjectDetails": {
          "description": "Gets or sets any custom properties of the affected object.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "discriminator": "instanceType"
    },
    "WorkflowModelProperties": {
      "description": "Workflow model properties.",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Gets or sets the friendly display name.",
          "type": "string",
          "readOnly": true
        },
        "state": {
          "description": "Gets or sets the workflow state.",
          "enum": [
            "Pending",
            "Started",
            "Cancelling",
            "Succeeded",
            "Failed",
            "Cancelled",
            "CompletedWithInformation",
            "CompletedWithWarnings",
            "CompletedWithErrors"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WorkflowState",
            "modelAsString": true
          }
        },
        "startTime": {
          "format": "date-time",
          "description": "Gets or sets the start time.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Gets or sets the end time.",
          "type": "string",
          "readOnly": true
        },
        "objectId": {
          "description": "Gets or sets the affected object Id.",
          "type": "string",
          "readOnly": true
        },
        "objectName": {
          "description": "Gets or sets the affected object name.",
          "type": "string",
          "readOnly": true
        },
        "objectInternalId": {
          "description": "Gets or sets the affected object internal Id.",
          "type": "string",
          "readOnly": true
        },
        "objectInternalName": {
          "description": "Gets or sets the affected object internal name.",
          "type": "string",
          "readOnly": true
        },
        "objectType": {
          "description": "Gets or sets the object type.",
          "enum": [
            "MigrateDataCenter",
            "MigrateAgent",
            "WorkloadInstance",
            "WorkloadDeployment"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WorkflowObjectType",
            "modelAsString": true
          }
        },
        "workloadInstanceProviderId": {
          "description": "Gets or sets the workload instance provider.",
          "type": "string",
          "readOnly": true
        },
        "workloadDeploymentProviderId": {
          "description": "Gets or sets the workload deployment provider.",
          "type": "string",
          "readOnly": true
        },
        "allowedActions": {
          "description": "Gets or sets the list of allowed actions on the workflow.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "activityId": {
          "description": "Gets or sets the workflow activity id.",
          "type": "string",
          "readOnly": true
        },
        "tasks": {
          "description": "Gets or sets the list of tasks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskModel"
          },
          "readOnly": true
        },
        "errors": {
          "description": "Gets or sets the list of errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorModel"
          },
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/WorkflowModelCustomProperties"
        }
      }
    },
    "WorkflowStatisticsModel": {
      "description": "Workflow statistics.",
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "Gets or sets the resource count.",
          "type": "integer",
          "readOnly": true
        },
        "categorizedCounts": {
          "description": "Gets or sets the categorized resource counts.",
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          },
          "readOnly": true
        }
      }
    },
    "WorkloadDeploymentModel": {
      "description": "Workload deployment model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/WorkloadDeploymentModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "WorkloadDeploymentModelCollection": {
      "description": "Workload deployment model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of workload deployments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadDeploymentModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "WorkloadDeploymentModelCustomProperties": {
      "description": "Workload deployment model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "enum": [
            "IISAKSWorkloadDeployment",
            "ApacheTomcatAKSWorkloadDeployment"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WorkloadDeploymentType",
            "modelAsString": true
          }
        }
      },
      "discriminator": "instanceType"
    },
    "WorkloadDeploymentModelProperties": {
      "description": "Workload deployment model properties.",
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Gets or sets the provisioning state of the workload deployment.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "status": {
          "description": "Gets or sets the workload deployment status.",
          "enum": [
            "InitialReplication",
            "ImageBuildPending",
            "ReadyToTestMigrate",
            "TestMigrating",
            "CleanUpPending",
            "ReadyToMigrate",
            "Migrating",
            "Migrated"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WorkloadStatus",
            "modelAsString": true
          }
        },
        "replicationState": {
          "description": "Gets or sets the workload replication state.",
          "enum": [
            "NotReplicatedStatesBegin",
            "EnablingReplication",
            "EnablingFailed",
            "DisablingReplication",
            "MarkedForDeletion",
            "DisablingFailed",
            "NotReplicatedStatesEnd",
            "InitialReplicationStatesBegin",
            "InitialReplicationInProgress",
            "InitialReplicationCompleted",
            "InitialReplicationFailed",
            "InitialReplicationStatesEnd",
            "ReplicatedStatesBegin",
            "Replicated",
            "ReplicatedStatesEnd"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ReplicationState",
            "modelAsString": true
          }
        },
        "replicationStateDescription": {
          "description": "Gets or sets the workload replication state description.",
          "type": "string",
          "readOnly": true
        },
        "testMigrateState": {
          "description": "Gets or sets the test migrate state.",
          "enum": [
            "None",
            "TestMigrateTransitionStatesBegin",
            "TestMigrateInitiated",
            "TestMigrateCompleting",
            "TestMigrateCompleted",
            "TestMigrateFailed",
            "TestMigrateCompletionFailed",
            "TestMigrateCleanupInitiated",
            "TestMigrateCleanupCompleting",
            "MarkedForDeletion",
            "TestMigrateTransitionStatesEnd"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "TestMigrateState",
            "modelAsString": true
          }
        },
        "testMigrateStateDescription": {
          "description": "Gets or sets the Test migrate state description.",
          "type": "string",
          "readOnly": true
        },
        "migrateState": {
          "description": "Gets or sets the migrate state.",
          "enum": [
            "None",
            "MigrateTransitionStatesBegin",
            "MigrateInitiated",
            "MigrateCompleting",
            "MigrateCompleted",
            "MigrateFailed",
            "MigrateCompletionFailed",
            "MigrateTransitionStatesEnd",
            "CommitMigrateStatesBegin",
            "CommitMigrateInProgressOnPrimary",
            "CommitMigrateInProgressOnRecovery",
            "CommitMigrateCompleted",
            "CommitMigrateFailedOnPrimary",
            "CommitMigrateFailedOnRecovery",
            "CommitMigrateStatesEnd",
            "CancelMigrateStatesBegin",
            "CancelMigrateInProgressOnPrimary",
            "CancelMigrateInProgressOnRecovery",
            "CancelMigrateFailedOnPrimary",
            "CancelMigrateFailedOnRecovery",
            "CancelMigrateStatesEnd",
            "ChangeRecoveryPointStatesBegin",
            "ChangeRecoveryPointInitiated",
            "ChangeRecoveryPointCompleted",
            "ChangeRecoveryPointFailed",
            "ChangeRecoveryPointStatesEnd"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "MigrateState",
            "modelAsString": true
          }
        },
        "migrateStateDescription": {
          "description": "Gets or sets the migrate state description.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "Gets or sets the display name.",
          "type": "string"
        },
        "targetPlatform": {
          "description": "Gets or sets the deployment target platform.",
          "enum": [
            "AzureKubernetesService",
            "AzureAppServiceContainer",
            "AzureAppServiceNative"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WorkloadDeploymentTarget",
            "modelAsString": true
          }
        },
        "workloadInstanceProperties": {
          "$ref": "#/definitions/WorkloadInstanceProperties"
        },
        "correlationId": {
          "description": "Gets or sets the workload deployment correlation Id.",
          "type": "string",
          "readOnly": true
        },
        "lastSuccessfulReplicationCycleTime": {
          "format": "date-time",
          "description": "Gets or sets the Last successful replication cycle time.",
          "type": "string",
          "readOnly": true
        },
        "lastSuccessfulMigrateTime": {
          "format": "date-time",
          "description": "Gets or sets the Last successful unplanned migrate time.",
          "type": "string",
          "readOnly": true
        },
        "lastSuccessfulTestMigrateTime": {
          "format": "date-time",
          "description": "Gets or sets the Last successful test migrate time.",
          "type": "string",
          "readOnly": true
        },
        "currentJob": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkloadJobProperties"
            }
          ],
          "readOnly": true
        },
        "allowedOperations": {
          "description": "Gets or sets the allowed scenarios on the workload deployment.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "lastFailedEnableReplicationJob": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkloadJobProperties"
            }
          ],
          "readOnly": true
        },
        "lastTestMigrateJob": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkloadJobProperties"
            }
          ],
          "readOnly": true
        },
        "replicationHealth": {
          "description": "Gets or sets workload deployment replication health.",
          "enum": [
            "Normal",
            "Warning",
            "Critical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "HealthStatus",
            "modelAsString": true
          }
        },
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/WorkloadDeploymentModelCustomProperties"
        }
      }
    },
    "WorkloadDeploymentStatisticsModel": {
      "description": "Workload deployment statistics.",
      "type": "object",
      "properties": {
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        },
        "count": {
          "format": "int64",
          "description": "Gets or sets the resource count.",
          "type": "integer",
          "readOnly": true
        },
        "categorizedCounts": {
          "description": "Gets or sets the categorized resource counts.",
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          },
          "readOnly": true
        }
      }
    },
    "WorkloadInstanceModel": {
      "description": "Workload instance model.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/WorkloadInstanceModelProperties"
        },
        "id": {
          "description": "Gets or sets the Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Gets or sets the type of the resource.",
          "type": "string",
          "readOnly": true
        },
        "systemData": {
          "allOf": [
            {
              "$ref": "#/definitions/SystemDataModel"
            }
          ],
          "readOnly": true
        },
        "tags": {
          "description": "Gets or sets the resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "WorkloadInstanceModelCollection": {
      "description": "Workload instance model collection.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the list of workload instances.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadInstanceModel"
          }
        },
        "nextLink": {
          "description": "Gets or sets the value of next link.",
          "type": "string"
        }
      }
    },
    "WorkloadInstanceModelCustomProperties": {
      "description": "Workload instance model custom properties.",
      "required": [
        "instanceType"
      ],
      "type": "object",
      "properties": {
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "enum": [
            "IISWorkload",
            "ApacheTomcatWorkload"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WorkloadType",
            "modelAsString": true
          }
        }
      },
      "discriminator": "instanceType"
    },
    "WorkloadInstanceModelProperties": {
      "description": "Workload instance model properties.",
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Gets or sets the provisioning state of the workload instance.",
          "enum": [
            "Canceled",
            "Creating",
            "Deleting",
            "Deleted",
            "Failed",
            "Succeeded",
            "Updating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "migrateAgentId": {
          "description": "Gets or sets the migrate agent id associated with the workload instance.",
          "type": "string"
        },
        "displayName": {
          "description": "Gets or sets the display name.",
          "type": "string"
        },
        "replicationHealth": {
          "description": "Gets or sets the replication health of the workload instance.",
          "enum": [
            "Normal",
            "Warning",
            "Critical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "HealthStatus",
            "modelAsString": true
          }
        },
        "replicationState": {
          "description": "Gets or sets the replication state of the workload instance.",
          "enum": [
            "NotReplicatedStatesBegin",
            "EnablingReplication",
            "EnablingFailed",
            "DisablingReplication",
            "MarkedForDeletion",
            "DisablingFailed",
            "NotReplicatedStatesEnd",
            "InitialReplicationStatesBegin",
            "InitialReplicationInProgress",
            "InitialReplicationCompleted",
            "InitialReplicationFailed",
            "InitialReplicationStatesEnd",
            "ReplicatedStatesBegin",
            "Replicated",
            "ReplicatedStatesEnd"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ReplicationState",
            "modelAsString": true
          }
        },
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        },
        "currentJob": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkloadJobProperties"
            }
          ],
          "readOnly": true
        },
        "allowedOperations": {
          "description": "Gets or sets the allowed scenarios on the workload instance.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "customProperties": {
          "$ref": "#/definitions/WorkloadInstanceModelCustomProperties"
        }
      }
    },
    "WorkloadInstanceProperties": {
      "description": "Workload instance properties.",
      "type": "object",
      "properties": {
        "workloadInstanceId": {
          "description": "Gets or sets the workload instance id.",
          "type": "string"
        },
        "instanceType": {
          "description": "Gets or sets the instance type.",
          "enum": [
            "IISWorkload",
            "ApacheTomcatWorkload"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WorkloadType",
            "modelAsString": true
          }
        },
        "displayName": {
          "description": "Gets or sets the display name.",
          "type": "string"
        },
        "replicationState": {
          "description": "Gets or sets the replication state of the workload instance.",
          "enum": [
            "NotReplicatedStatesBegin",
            "EnablingReplication",
            "EnablingFailed",
            "DisablingReplication",
            "MarkedForDeletion",
            "DisablingFailed",
            "NotReplicatedStatesEnd",
            "InitialReplicationStatesBegin",
            "InitialReplicationInProgress",
            "InitialReplicationCompleted",
            "InitialReplicationFailed",
            "InitialReplicationStatesEnd",
            "ReplicatedStatesBegin",
            "Replicated",
            "ReplicatedStatesEnd"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ReplicationState",
            "modelAsString": true
          }
        },
        "replicationHealth": {
          "description": "Gets or sets the replication health of the workload instance.",
          "enum": [
            "Normal",
            "Warning",
            "Critical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "HealthStatus",
            "modelAsString": true
          }
        },
        "healthErrors": {
          "description": "Gets or sets the list of health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        }
      }
    },
    "WorkloadInstanceStatisticsModel": {
      "description": "Workload instance statistics model.",
      "type": "object",
      "properties": {
        "workloadInstanceErrors": {
          "description": "Gets or sets the list of workload instance health errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthErrorModel"
          },
          "readOnly": true
        }
      }
    },
    "WorkloadJobProperties": {
      "description": "Workload job properties.",
      "type": "object",
      "properties": {
        "scenarioName": {
          "description": "Gets or sets workload scenario name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Gets or sets workflow Id.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Gets or sets workflow name.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "Gets or sets the workflow friendly display name.",
          "type": "string",
          "readOnly": true
        },
        "state": {
          "description": "Gets or sets workflow state.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Gets or sets start time of the workflow.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Gets or sets end time of the workflow.",
          "type": "string",
          "readOnly": true
        }
      }
    }
  },
  "parameters": {
    "subscriptionId": {
      "in": "path",
      "name": "subscriptionId",
      "description": "The Subscription ID.",
      "required": true,
      "type": "string"
    },
    "resourceGroupName": {
      "in": "path",
      "name": "resourceGroupName",
      "description": "Resource group name.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "api-version": {
      "in": "query",
      "name": "api-version",
      "description": "Client Api Version.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "description": "Azure Active Directory OAuth2 Flow"
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "tags": [
    {
      "name": "DeployedResource",
      "description": "Deployed resources controller."
    },
    {
      "name": "MigrateAgent",
      "description": "MigrateAgent Controller."
    },
    {
      "name": "MigrateDataCenter",
      "description": "MigrateDataCenter Controller."
    },
    {
      "name": "Workflow",
      "description": "Workflow controller."
    },
    {
      "name": "WorkloadDeployment",
      "description": "Workload deployments controller."
    },
    {
      "name": "WorkloadInstance",
      "description": "Workload instance controller."
    }
  ]
}

