// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armmobilepacketcore

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// NrfDeploymentsClient contains the methods for the Microsoft.MobilePacketCore namespace.
// Don't use this type directly, use NewNrfDeploymentsClient() instead.
type NrfDeploymentsClient struct {
	internal *arm.Client
}

// NewNrfDeploymentsClient creates a new instance of NrfDeploymentsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNrfDeploymentsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*NrfDeploymentsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NrfDeploymentsClient{
		internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a NrfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nrfDeploymentName - The name of the NrfDeployment
//   - resource - Resource create parameters.
//   - options - NrfDeploymentsClientCreateOrUpdateOptions contains the optional parameters for the NrfDeploymentsClient.CreateOrUpdate
//     method.
func (client *NrfDeploymentsClient) CreateOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, nrfDeploymentName string, resource NrfDeploymentResource, options *NrfDeploymentsClientCreateOrUpdateOptions) (NrfDeploymentsClientCreateOrUpdateResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NrfDeploymentsClient.CreateOrUpdate")
	req, err := client.createOrUpdateCreateRequest(ctx, subscriptionID, resourceGroupName, nrfDeploymentName, resource, options)
	if err != nil {
		return NrfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NrfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return NrfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *NrfDeploymentsClient) createOrUpdateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, nrfDeploymentName string, resource NrfDeploymentResource, options *NrfDeploymentsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/nrfDeployments/{nrfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nrfDeploymentName == "" {
		return nil, errors.New("parameter nrfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nrfDeploymentName}", url.PathEscape(nrfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *NrfDeploymentsClient) createOrUpdateHandleResponse(resp *http.Response) (NrfDeploymentsClientCreateOrUpdateResponse, error) {
	result := NrfDeploymentsClientCreateOrUpdateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return NrfDeploymentsClientCreateOrUpdateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.NrfDeploymentResource); err != nil {
		return NrfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Delete a NrfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nrfDeploymentName - The name of the NrfDeployment
//   - options - NrfDeploymentsClientDeleteOptions contains the optional parameters for the NrfDeploymentsClient.Delete method.
func (client *NrfDeploymentsClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, nrfDeploymentName string, options *NrfDeploymentsClientDeleteOptions) (*runtime.Poller[NrfDeploymentsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, nrfDeploymentName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[NrfDeploymentsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[NrfDeploymentsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a NrfDeploymentResource
func (client *NrfDeploymentsClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, nrfDeploymentName string, options *NrfDeploymentsClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NrfDeploymentsClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, nrfDeploymentName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *NrfDeploymentsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, nrfDeploymentName string, options *NrfDeploymentsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/nrfDeployments/{nrfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nrfDeploymentName == "" {
		return nil, errors.New("parameter nrfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nrfDeploymentName}", url.PathEscape(nrfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a NrfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nrfDeploymentName - The name of the NrfDeployment
//   - options - NrfDeploymentsClientGetOptions contains the optional parameters for the NrfDeploymentsClient.Get method.
func (client *NrfDeploymentsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, nrfDeploymentName string, options *NrfDeploymentsClientGetOptions) (NrfDeploymentsClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NrfDeploymentsClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, nrfDeploymentName, options)
	if err != nil {
		return NrfDeploymentsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NrfDeploymentsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NrfDeploymentsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *NrfDeploymentsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, nrfDeploymentName string, options *NrfDeploymentsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/nrfDeployments/{nrfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nrfDeploymentName == "" {
		return nil, errors.New("parameter nrfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nrfDeploymentName}", url.PathEscape(nrfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *NrfDeploymentsClient) getHandleResponse(resp *http.Response) (NrfDeploymentsClientGetResponse, error) {
	result := NrfDeploymentsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NrfDeploymentResource); err != nil {
		return NrfDeploymentsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List all Network Repository Function Deployments by Resource Group.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - NrfDeploymentsClientListByResourceGroupOptions contains the optional parameters for the NrfDeploymentsClient.NewListByResourceGroupPager
//     method.
func (client *NrfDeploymentsClient) NewListByResourceGroupPager(subscriptionID string, resourceGroupName string, options *NrfDeploymentsClientListByResourceGroupOptions) *runtime.Pager[NrfDeploymentsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[NrfDeploymentsClientListByResourceGroupResponse]{
		More: func(page NrfDeploymentsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NrfDeploymentsClientListByResourceGroupResponse) (NrfDeploymentsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NrfDeploymentsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return NrfDeploymentsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *NrfDeploymentsClient) listByResourceGroupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *NrfDeploymentsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/nrfDeployments"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *NrfDeploymentsClient) listByResourceGroupHandleResponse(resp *http.Response) (NrfDeploymentsClientListByResourceGroupResponse, error) {
	result := NrfDeploymentsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NrfDeploymentResourceListResult); err != nil {
		return NrfDeploymentsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List all Network Repository Function Deployments by Subscription ID.
//   - subscriptionID - The ID of the target subscription.
//   - options - NrfDeploymentsClientListBySubscriptionOptions contains the optional parameters for the NrfDeploymentsClient.NewListBySubscriptionPager
//     method.
func (client *NrfDeploymentsClient) NewListBySubscriptionPager(subscriptionID string, options *NrfDeploymentsClientListBySubscriptionOptions) *runtime.Pager[NrfDeploymentsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[NrfDeploymentsClientListBySubscriptionResponse]{
		More: func(page NrfDeploymentsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NrfDeploymentsClientListBySubscriptionResponse) (NrfDeploymentsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NrfDeploymentsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return NrfDeploymentsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *NrfDeploymentsClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *NrfDeploymentsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MobilePacketCore/nrfDeployments"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *NrfDeploymentsClient) listBySubscriptionHandleResponse(resp *http.Response) (NrfDeploymentsClientListBySubscriptionResponse, error) {
	result := NrfDeploymentsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NrfDeploymentResourceListResult); err != nil {
		return NrfDeploymentsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// UpdateTags - Update a NrfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nrfDeploymentName - The name of the NrfDeployment
//   - properties - The resource properties to be updated.
//   - options - NrfDeploymentsClientUpdateTagsOptions contains the optional parameters for the NrfDeploymentsClient.UpdateTags
//     method.
func (client *NrfDeploymentsClient) UpdateTags(ctx context.Context, subscriptionID string, resourceGroupName string, nrfDeploymentName string, properties NrfDeploymentResourceTagsUpdate, options *NrfDeploymentsClientUpdateTagsOptions) (NrfDeploymentsClientUpdateTagsResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NrfDeploymentsClient.UpdateTags")
	req, err := client.updateTagsCreateRequest(ctx, subscriptionID, resourceGroupName, nrfDeploymentName, properties, options)
	if err != nil {
		return NrfDeploymentsClientUpdateTagsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NrfDeploymentsClientUpdateTagsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NrfDeploymentsClientUpdateTagsResponse{}, err
	}
	resp, err := client.updateTagsHandleResponse(httpResp)
	return resp, err
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *NrfDeploymentsClient) updateTagsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, nrfDeploymentName string, properties NrfDeploymentResourceTagsUpdate, options *NrfDeploymentsClientUpdateTagsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/nrfDeployments/{nrfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nrfDeploymentName == "" {
		return nil, errors.New("parameter nrfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nrfDeploymentName}", url.PathEscape(nrfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *NrfDeploymentsClient) updateTagsHandleResponse(resp *http.Response) (NrfDeploymentsClientUpdateTagsResponse, error) {
	result := NrfDeploymentsClientUpdateTagsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NrfDeploymentResource); err != nil {
		return NrfDeploymentsClientUpdateTagsResponse{}, err
	}
	return result, nil
}
