// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armmobilepacketcore

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// UpfDeploymentsClient contains the methods for the Microsoft.MobilePacketCore namespace.
// Don't use this type directly, use NewUpfDeploymentsClient() instead.
type UpfDeploymentsClient struct {
	internal *arm.Client
}

// NewUpfDeploymentsClient creates a new instance of UpfDeploymentsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewUpfDeploymentsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*UpfDeploymentsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &UpfDeploymentsClient{
		internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a UpfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - upfDeploymentName - The name of the UpfDeployment
//   - resource - Resource create parameters.
//   - options - UpfDeploymentsClientCreateOrUpdateOptions contains the optional parameters for the UpfDeploymentsClient.CreateOrUpdate
//     method.
func (client *UpfDeploymentsClient) CreateOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, upfDeploymentName string, resource UpfDeploymentResource, options *UpfDeploymentsClientCreateOrUpdateOptions) (UpfDeploymentsClientCreateOrUpdateResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "UpfDeploymentsClient.CreateOrUpdate")
	req, err := client.createOrUpdateCreateRequest(ctx, subscriptionID, resourceGroupName, upfDeploymentName, resource, options)
	if err != nil {
		return UpfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UpfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return UpfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *UpfDeploymentsClient) createOrUpdateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, upfDeploymentName string, resource UpfDeploymentResource, options *UpfDeploymentsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/upfDeployments/{upfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if upfDeploymentName == "" {
		return nil, errors.New("parameter upfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{upfDeploymentName}", url.PathEscape(upfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *UpfDeploymentsClient) createOrUpdateHandleResponse(resp *http.Response) (UpfDeploymentsClientCreateOrUpdateResponse, error) {
	result := UpfDeploymentsClientCreateOrUpdateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return UpfDeploymentsClientCreateOrUpdateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.UpfDeploymentResource); err != nil {
		return UpfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Delete a UpfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - upfDeploymentName - The name of the UpfDeployment
//   - options - UpfDeploymentsClientDeleteOptions contains the optional parameters for the UpfDeploymentsClient.Delete method.
func (client *UpfDeploymentsClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, upfDeploymentName string, options *UpfDeploymentsClientDeleteOptions) (*runtime.Poller[UpfDeploymentsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, upfDeploymentName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[UpfDeploymentsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[UpfDeploymentsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a UpfDeploymentResource
func (client *UpfDeploymentsClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, upfDeploymentName string, options *UpfDeploymentsClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "UpfDeploymentsClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, upfDeploymentName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *UpfDeploymentsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, upfDeploymentName string, options *UpfDeploymentsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/upfDeployments/{upfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if upfDeploymentName == "" {
		return nil, errors.New("parameter upfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{upfDeploymentName}", url.PathEscape(upfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a UpfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - upfDeploymentName - The name of the UpfDeployment
//   - options - UpfDeploymentsClientGetOptions contains the optional parameters for the UpfDeploymentsClient.Get method.
func (client *UpfDeploymentsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, upfDeploymentName string, options *UpfDeploymentsClientGetOptions) (UpfDeploymentsClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "UpfDeploymentsClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, upfDeploymentName, options)
	if err != nil {
		return UpfDeploymentsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UpfDeploymentsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return UpfDeploymentsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *UpfDeploymentsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, upfDeploymentName string, options *UpfDeploymentsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/upfDeployments/{upfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if upfDeploymentName == "" {
		return nil, errors.New("parameter upfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{upfDeploymentName}", url.PathEscape(upfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *UpfDeploymentsClient) getHandleResponse(resp *http.Response) (UpfDeploymentsClientGetResponse, error) {
	result := UpfDeploymentsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UpfDeploymentResource); err != nil {
		return UpfDeploymentsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List all User Plane Function Deployments by Resource ID.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - UpfDeploymentsClientListByResourceGroupOptions contains the optional parameters for the UpfDeploymentsClient.NewListByResourceGroupPager
//     method.
func (client *UpfDeploymentsClient) NewListByResourceGroupPager(subscriptionID string, resourceGroupName string, options *UpfDeploymentsClientListByResourceGroupOptions) *runtime.Pager[UpfDeploymentsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[UpfDeploymentsClientListByResourceGroupResponse]{
		More: func(page UpfDeploymentsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *UpfDeploymentsClientListByResourceGroupResponse) (UpfDeploymentsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "UpfDeploymentsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return UpfDeploymentsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *UpfDeploymentsClient) listByResourceGroupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *UpfDeploymentsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/upfDeployments"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *UpfDeploymentsClient) listByResourceGroupHandleResponse(resp *http.Response) (UpfDeploymentsClientListByResourceGroupResponse, error) {
	result := UpfDeploymentsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UpfDeploymentResourceListResult); err != nil {
		return UpfDeploymentsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List all User Plane Function Deployments by Subscription ID.
//   - subscriptionID - The ID of the target subscription.
//   - options - UpfDeploymentsClientListBySubscriptionOptions contains the optional parameters for the UpfDeploymentsClient.NewListBySubscriptionPager
//     method.
func (client *UpfDeploymentsClient) NewListBySubscriptionPager(subscriptionID string, options *UpfDeploymentsClientListBySubscriptionOptions) *runtime.Pager[UpfDeploymentsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[UpfDeploymentsClientListBySubscriptionResponse]{
		More: func(page UpfDeploymentsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *UpfDeploymentsClientListBySubscriptionResponse) (UpfDeploymentsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "UpfDeploymentsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return UpfDeploymentsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *UpfDeploymentsClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *UpfDeploymentsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MobilePacketCore/upfDeployments"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *UpfDeploymentsClient) listBySubscriptionHandleResponse(resp *http.Response) (UpfDeploymentsClientListBySubscriptionResponse, error) {
	result := UpfDeploymentsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UpfDeploymentResourceListResult); err != nil {
		return UpfDeploymentsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// UpdateTags - Update a UpfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - upfDeploymentName - The name of the UpfDeployment
//   - properties - The resource properties to be updated.
//   - options - UpfDeploymentsClientUpdateTagsOptions contains the optional parameters for the UpfDeploymentsClient.UpdateTags
//     method.
func (client *UpfDeploymentsClient) UpdateTags(ctx context.Context, subscriptionID string, resourceGroupName string, upfDeploymentName string, properties UpfDeploymentResourceTagsUpdate, options *UpfDeploymentsClientUpdateTagsOptions) (UpfDeploymentsClientUpdateTagsResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "UpfDeploymentsClient.UpdateTags")
	req, err := client.updateTagsCreateRequest(ctx, subscriptionID, resourceGroupName, upfDeploymentName, properties, options)
	if err != nil {
		return UpfDeploymentsClientUpdateTagsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UpfDeploymentsClientUpdateTagsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return UpfDeploymentsClientUpdateTagsResponse{}, err
	}
	resp, err := client.updateTagsHandleResponse(httpResp)
	return resp, err
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *UpfDeploymentsClient) updateTagsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, upfDeploymentName string, properties UpfDeploymentResourceTagsUpdate, options *UpfDeploymentsClientUpdateTagsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/upfDeployments/{upfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if upfDeploymentName == "" {
		return nil, errors.New("parameter upfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{upfDeploymentName}", url.PathEscape(upfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *UpfDeploymentsClient) updateTagsHandleResponse(resp *http.Response) (UpfDeploymentsClientUpdateTagsResponse, error) {
	result := UpfDeploymentsClientUpdateTagsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UpfDeploymentResource); err != nil {
		return UpfDeploymentsClientUpdateTagsResponse{}, err
	}
	return result, nil
}
