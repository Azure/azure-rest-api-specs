// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armmobilepacketcore

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SmfDeploymentsClient contains the methods for the Microsoft.MobilePacketCore namespace.
// Don't use this type directly, use NewSmfDeploymentsClient() instead.
type SmfDeploymentsClient struct {
	internal *arm.Client
}

// NewSmfDeploymentsClient creates a new instance of SmfDeploymentsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSmfDeploymentsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SmfDeploymentsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SmfDeploymentsClient{
		internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a SmfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - smfDeploymentName - The name of the SmfDeployment
//   - resource - Resource create parameters.
//   - options - SmfDeploymentsClientCreateOrUpdateOptions contains the optional parameters for the SmfDeploymentsClient.CreateOrUpdate
//     method.
func (client *SmfDeploymentsClient) CreateOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, smfDeploymentName string, resource SmfDeploymentResource, options *SmfDeploymentsClientCreateOrUpdateOptions) (SmfDeploymentsClientCreateOrUpdateResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SmfDeploymentsClient.CreateOrUpdate")
	req, err := client.createOrUpdateCreateRequest(ctx, subscriptionID, resourceGroupName, smfDeploymentName, resource, options)
	if err != nil {
		return SmfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SmfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SmfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SmfDeploymentsClient) createOrUpdateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, smfDeploymentName string, resource SmfDeploymentResource, options *SmfDeploymentsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/smfDeployments/{smfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if smfDeploymentName == "" {
		return nil, errors.New("parameter smfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{smfDeploymentName}", url.PathEscape(smfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *SmfDeploymentsClient) createOrUpdateHandleResponse(resp *http.Response) (SmfDeploymentsClientCreateOrUpdateResponse, error) {
	result := SmfDeploymentsClientCreateOrUpdateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return SmfDeploymentsClientCreateOrUpdateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.SmfDeploymentResource); err != nil {
		return SmfDeploymentsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Delete a SmfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - smfDeploymentName - The name of the SmfDeployment
//   - options - SmfDeploymentsClientDeleteOptions contains the optional parameters for the SmfDeploymentsClient.Delete method.
func (client *SmfDeploymentsClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, smfDeploymentName string, options *SmfDeploymentsClientDeleteOptions) (*runtime.Poller[SmfDeploymentsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, smfDeploymentName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[SmfDeploymentsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[SmfDeploymentsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a SmfDeploymentResource
func (client *SmfDeploymentsClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, smfDeploymentName string, options *SmfDeploymentsClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SmfDeploymentsClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, smfDeploymentName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SmfDeploymentsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, smfDeploymentName string, options *SmfDeploymentsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/smfDeployments/{smfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if smfDeploymentName == "" {
		return nil, errors.New("parameter smfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{smfDeploymentName}", url.PathEscape(smfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a SmfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - smfDeploymentName - The name of the SmfDeployment
//   - options - SmfDeploymentsClientGetOptions contains the optional parameters for the SmfDeploymentsClient.Get method.
func (client *SmfDeploymentsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, smfDeploymentName string, options *SmfDeploymentsClientGetOptions) (SmfDeploymentsClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SmfDeploymentsClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, smfDeploymentName, options)
	if err != nil {
		return SmfDeploymentsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SmfDeploymentsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SmfDeploymentsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SmfDeploymentsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, smfDeploymentName string, options *SmfDeploymentsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/smfDeployments/{smfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if smfDeploymentName == "" {
		return nil, errors.New("parameter smfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{smfDeploymentName}", url.PathEscape(smfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SmfDeploymentsClient) getHandleResponse(resp *http.Response) (SmfDeploymentsClientGetResponse, error) {
	result := SmfDeploymentsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SmfDeploymentResource); err != nil {
		return SmfDeploymentsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List all Session Management Function Deployments by Resource Group.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - SmfDeploymentsClientListByResourceGroupOptions contains the optional parameters for the SmfDeploymentsClient.NewListByResourceGroupPager
//     method.
func (client *SmfDeploymentsClient) NewListByResourceGroupPager(subscriptionID string, resourceGroupName string, options *SmfDeploymentsClientListByResourceGroupOptions) *runtime.Pager[SmfDeploymentsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[SmfDeploymentsClientListByResourceGroupResponse]{
		More: func(page SmfDeploymentsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SmfDeploymentsClientListByResourceGroupResponse) (SmfDeploymentsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SmfDeploymentsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return SmfDeploymentsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *SmfDeploymentsClient) listByResourceGroupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *SmfDeploymentsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/smfDeployments"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *SmfDeploymentsClient) listByResourceGroupHandleResponse(resp *http.Response) (SmfDeploymentsClientListByResourceGroupResponse, error) {
	result := SmfDeploymentsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SmfDeploymentResourceListResult); err != nil {
		return SmfDeploymentsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List all Session Management Function Deployments by Subscription ID.
//   - subscriptionID - The ID of the target subscription.
//   - options - SmfDeploymentsClientListBySubscriptionOptions contains the optional parameters for the SmfDeploymentsClient.NewListBySubscriptionPager
//     method.
func (client *SmfDeploymentsClient) NewListBySubscriptionPager(subscriptionID string, options *SmfDeploymentsClientListBySubscriptionOptions) *runtime.Pager[SmfDeploymentsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[SmfDeploymentsClientListBySubscriptionResponse]{
		More: func(page SmfDeploymentsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SmfDeploymentsClientListBySubscriptionResponse) (SmfDeploymentsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SmfDeploymentsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return SmfDeploymentsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *SmfDeploymentsClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *SmfDeploymentsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MobilePacketCore/smfDeployments"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *SmfDeploymentsClient) listBySubscriptionHandleResponse(resp *http.Response) (SmfDeploymentsClientListBySubscriptionResponse, error) {
	result := SmfDeploymentsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SmfDeploymentResourceListResult); err != nil {
		return SmfDeploymentsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// UpdateTags - Update a SmfDeploymentResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - smfDeploymentName - The name of the SmfDeployment
//   - properties - The resource properties to be updated.
//   - options - SmfDeploymentsClientUpdateTagsOptions contains the optional parameters for the SmfDeploymentsClient.UpdateTags
//     method.
func (client *SmfDeploymentsClient) UpdateTags(ctx context.Context, subscriptionID string, resourceGroupName string, smfDeploymentName string, properties SmfDeploymentResourceTagsUpdate, options *SmfDeploymentsClientUpdateTagsOptions) (SmfDeploymentsClientUpdateTagsResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SmfDeploymentsClient.UpdateTags")
	req, err := client.updateTagsCreateRequest(ctx, subscriptionID, resourceGroupName, smfDeploymentName, properties, options)
	if err != nil {
		return SmfDeploymentsClientUpdateTagsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SmfDeploymentsClientUpdateTagsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SmfDeploymentsClientUpdateTagsResponse{}, err
	}
	resp, err := client.updateTagsHandleResponse(httpResp)
	return resp, err
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *SmfDeploymentsClient) updateTagsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, smfDeploymentName string, properties SmfDeploymentResourceTagsUpdate, options *SmfDeploymentsClientUpdateTagsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobilePacketCore/smfDeployments/{smfDeploymentName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if smfDeploymentName == "" {
		return nil, errors.New("parameter smfDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{smfDeploymentName}", url.PathEscape(smfDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *SmfDeploymentsClient) updateTagsHandleResponse(resp *http.Response) (SmfDeploymentsClientUpdateTagsResponse, error) {
	result := SmfDeploymentsClientUpdateTagsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SmfDeploymentResource); err != nil {
		return SmfDeploymentsClientUpdateTagsResponse{}, err
	}
	return result, nil
}
