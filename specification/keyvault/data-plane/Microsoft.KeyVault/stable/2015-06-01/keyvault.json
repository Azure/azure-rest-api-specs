{
  "swagger": "2.0",
  "info": {
    "title": "KeyVaultClient",
    "description": "Performs cryptographic key operations and vault operations against the Key Vault service.",
    "version": "2015-06-01"
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{vaultBaseUrl}",
    "useSchemePrefix": false,
    "positionInOperation": "first",
    "parameters": [
      {
        "name": "vaultBaseUrl",
        "description": "The vault name, e.g. https://myvault.vault.azure.net",
        "required": true,
        "type": "string",
        "in": "path",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/keys/{key-name}/create": {
      "post": {
        "tags": [
          "Keys"
        ],
        "operationId": "CreateKey",
        "description": "Creates a new, named, key in the specified vault.",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-zA-Z-]+$",
            "description": "The name of the key"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/KeyCreateParameters"
            },
            "description": "The parameters to create key."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A key bundle containing the result of the create request",
            "schema": {
              "$ref": "#/definitions/KeyBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/keys/{key-name}": {
      "put": {
        "tags": [
          "Keys"
        ],
        "operationId": "ImportKey",
        "description": "Imports a key into the specified vault",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-zA-Z-]+$",
            "description": "The name of the key"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/KeyImportParameters"
            },
            "description": "The parameters to import key."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Imported key bundle to the vault",
            "schema": {
              "$ref": "#/definitions/KeyBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Keys"
        ],
        "operationId": "DeleteKey",
        "description": "Deletes the specified key",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The public part of the deleted key",
            "schema": {
              "$ref": "#/definitions/KeyBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/keys/{key-name}/{key-version}": {
      "patch": {
        "tags": [
          "Keys"
        ],
        "operationId": "UpdateKey",
        "description": "Updates the Key Attributes associated with the specified key",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "name": "key-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the key"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/KeyUpdateParameters"
            },
            "description": "The parameters to update key."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated key",
            "schema": {
              "$ref": "#/definitions/KeyBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Keys"
        ],
        "operationId": "GetKey",
        "description": "Retrieves the public portion of a key plus its attributes",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "name": "key-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the key"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Key bundle of the key and its attributes",
            "schema": {
              "$ref": "#/definitions/KeyBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/keys/{key-name}/versions": {
      "get": {
        "tags": [
          "Keys"
        ],
        "operationId": "GetKeyVersions",
        "description": "List the versions of the specified key",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "name": "maxresults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25,
            "description": "Maximum number of results to return in a page. If not specified the service will return up to 25 results."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A response message containing a list of keys along with a link to the next page of keys",
            "schema": {
              "$ref": "#/definitions/KeyListResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/keys": {
      "get": {
        "tags": [
          "Keys"
        ],
        "operationId": "GetKeys",
        "description": "List keys in the specified vault",
        "parameters": [
          {
            "name": "maxresults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25,
            "description": "Maximum number of results to return in a page. If not specified the service will return up to 25 results."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A response message containing a list of keys in the vault along with a link to the next page of keys",
            "schema": {
              "$ref": "#/definitions/KeyListResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/keys/{key-name}/backup": {
      "post": {
        "tags": [
          "Keys"
        ],
        "operationId": "BackupKey",
        "description": "Requests that a backup of the specified key be downloaded to the client.",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The backup blob containing the backed up key",
            "schema": {
              "$ref": "#/definitions/BackupKeyResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/keys/restore": {
      "post": {
        "tags": [
          "Keys"
        ],
        "operationId": "RestoreKey",
        "description": "Restores the backup key in to a vault",
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/KeyRestoreParameters"
            },
            "description": "The parameters to restore key"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Restored key bundle in the vault",
            "schema": {
              "$ref": "#/definitions/KeyBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/keys/{key-name}/{key-version}/encrypt": {
      "post": {
        "tags": [
          "Keys"
        ],
        "operationId": "encrypt",
        "description": "Encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault.",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "name": "key-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the key"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/KeyOperationsParameters"
            },
            "description": "The parameters for key operations."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The encryption result",
            "schema": {
              "$ref": "#/definitions/KeyOperationResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/keys/{key-name}/{key-version}/decrypt": {
      "post": {
        "tags": [
          "Keys"
        ],
        "operationId": "decrypt",
        "description": "Decrypts a single block of encrypted data",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "name": "key-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the key"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/KeyOperationsParameters"
            },
            "description": "The parameters for key operations."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The decryption result",
            "schema": {
              "$ref": "#/definitions/KeyOperationResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/keys/{key-name}/{key-version}/sign": {
      "post": {
        "tags": [
          "Keys"
        ],
        "operationId": "sign",
        "description": "Creates a signature from a digest using the specified key in the vault",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "name": "key-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the key"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/KeySignParameters"
            },
            "description": "The parameters for key operations."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The signature value",
            "schema": {
              "$ref": "#/definitions/KeyOperationResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/keys/{key-name}/{key-version}/verify": {
      "post": {
        "tags": [
          "Keys"
        ],
        "operationId": "verify",
        "description": "Verifies a signature using the specified key",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "name": "key-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the key"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/KeyVerifyParameters"
            },
            "description": "The parameters for key operations."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The verification result",
            "schema": {
              "$ref": "#/definitions/KeyVerifyResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/keys/{key-name}/{key-version}/wrapkey": {
      "post": {
        "tags": [
          "Keys"
        ],
        "operationId": "wrapKey",
        "description": "Wraps a symmetric key using the specified key",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "name": "key-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the key"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/KeyOperationsParameters"
            },
            "description": "The parameters for key operations."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The wrapped symmetric key",
            "schema": {
              "$ref": "#/definitions/KeyOperationResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/keys/{key-name}/{key-version}/unwrapkey": {
      "post": {
        "tags": [
          "Keys"
        ],
        "operationId": "unwrapKey",
        "description": "Unwraps a symmetric key using the specified key in the vault that has initially been used for wrapping the key.",
        "parameters": [
          {
            "name": "key-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the key"
          },
          {
            "name": "key-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the key"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/KeyOperationsParameters"
            },
            "description": "The parameters for key operations."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The unwrapped symmetric key",
            "schema": {
              "$ref": "#/definitions/KeyOperationResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/secrets/{secret-name}": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "operationId": "SetSecret",
        "description": "Sets a secret in the specified vault.",
        "parameters": [
          {
            "name": "secret-name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-zA-Z-]+$",
            "description": "The name of the secret in the given vault"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/SecretSetParameters"
            },
            "description": "The parameters for secret set"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A secret bundle containing the result of the secret set request",
            "schema": {
              "$ref": "#/definitions/SecretBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Secrets"
        ],
        "operationId": "DeleteSecret",
        "description": "Deletes a secret from the specified vault.",
        "parameters": [
          {
            "name": "secret-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the secret in the given vault"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted secret",
            "schema": {
              "$ref": "#/definitions/SecretBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/secrets/{secret-name}/{secret-version}": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "operationId": "UpdateSecret",
        "description": "Updates the attributes associated with the specified secret",
        "parameters": [
          {
            "name": "secret-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the secret in the given vault"
          },
          {
            "name": "secret-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the secret"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/SecretUpdateParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated secret",
            "schema": {
              "$ref": "#/definitions/SecretBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Secrets"
        ],
        "operationId": "GetSecret",
        "description": "Gets a secret.",
        "parameters": [
          {
            "name": "secret-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the secret in the given vault"
          },
          {
            "name": "secret-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the secret"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved secret",
            "schema": {
              "$ref": "#/definitions/SecretBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/secrets": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "operationId": "GetSecrets",
        "description": "List secrets in the specified vault",
        "parameters": [
          {
            "name": "maxresults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25,
            "description": "Maximum number of results to return in a page. If not specified the service will return up to 25 results."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A response message containing a list of secrets in the vault along with a link to the next page of secrets",
            "schema": {
              "$ref": "#/definitions/SecretListResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/secrets/{secret-name}/versions": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "operationId": "GetSecretVersions",
        "description": "List the versions of the specified secret",
        "parameters": [
          {
            "name": "secret-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the secret in the given vault"
          },
          {
            "name": "maxresults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25,
            "description": "Maximum number of results to return in a page. If not specified the service will return up to 25 results."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A response message containing a list of secrets along with a link to the next page of secrets",
            "schema": {
              "$ref": "#/definitions/SecretListResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/certificates": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "GetCertificates",
        "description": "List certificates in the specified vault",
        "parameters": [
          {
            "name": "maxresults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25,
            "description": "Maximum number of results to return in a page. If not specified the service will return up to 25 results."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A response message containing a list of certificates in the vault along with a link to the next page of certificates",
            "schema": {
              "$ref": "#/definitions/CertificateListResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/certificates/{certificate-name}": {
      "delete": {
        "tags": [
          "Certificates"
        ],
        "operationId": "DeleteCertificate",
        "description": "Deletes a certificate from the specified vault.",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the certificate in the given vault"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted certificate",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/certificates/contacts": {
      "put": {
        "tags": [
          "Certificates"
        ],
        "operationId": "SetCertificateContacts",
        "description": "Sets the certificate contacts for the specified vault.",
        "parameters": [
          {
            "name": "contacts",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contacts"
            },
            "description": "The contacts for the vault certificates."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The contacts for the vault certificates.",
            "schema": {
              "$ref": "#/definitions/Contacts"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "GetCertificateContacts",
        "description": "Gets the certificate contacts for the specified vault.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The contacts for the vault certificates.",
            "schema": {
              "$ref": "#/definitions/Contacts"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Certificates"
        ],
        "operationId": "DeleteCertificateContacts",
        "description": "Deletes the certificate contacts for the specified vault.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The contacts for the vault certificates.",
            "schema": {
              "$ref": "#/definitions/Contacts"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/certificates/issuers": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "GetCertificateIssuers",
        "description": "List certificate issuers for the specified vault.",
        "parameters": [
          {
            "name": "maxresults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25,
            "description": "Maximum number of results to return in a page. If not specified the service will return up to 25 results."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A response message containing a list of certificates issuers in the vault along with a link to the next page of certificate issuers",
            "schema": {
              "$ref": "#/definitions/CertificateIssuerListResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/certificates/issuers/{issuer-name}": {
      "put": {
        "tags": [
          "Certificates"
        ],
        "operationId": "SetCertificateIssuer",
        "description": "Sets the specified certificate issuer.",
        "parameters": [
          {
            "name": "issuer-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the issuer."
          },
          {
            "name": "parameter",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/CertificateIssuerSetParameters"
            },
            "description": "Certificate issuer set parameter."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The issuer for the vault certificates.",
            "schema": {
              "$ref": "#/definitions/IssuerBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Certificates"
        ],
        "operationId": "UpdateCertificateIssuer",
        "description": "Updates the specified certificate issuer.",
        "parameters": [
          {
            "name": "issuer-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the issuer."
          },
          {
            "name": "parameter",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/CertificateIssuerUpdateParameters"
            },
            "description": "Certificate issuer update parameter."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The issuer for the vault certificates.",
            "schema": {
              "$ref": "#/definitions/IssuerBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "GetCertificateIssuer",
        "description": "Gets the specified certificate issuer.",
        "parameters": [
          {
            "name": "issuer-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the issuer."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The issuer for the vault certificates.",
            "schema": {
              "$ref": "#/definitions/IssuerBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Certificates"
        ],
        "operationId": "DeleteCertificateIssuer",
        "description": "Deletes the specified certificate issuer.",
        "parameters": [
          {
            "name": "issuer-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the issuer."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The issuer for the vault certificates.",
            "schema": {
              "$ref": "#/definitions/IssuerBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/certificates/{certificate-name}/create": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "operationId": "CreateCertificate",
        "description": "Creates a new certificate version. If this is the first version, the certificate resource is created.",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-zA-Z-]+$",
            "description": "The name of the certificate"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/CertificateCreateParameters"
            },
            "description": "The parameters to create certificate."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Created certificate bundle to the vault",
            "schema": {
              "$ref": "#/definitions/CertificateOperation"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/certificates/{certificate-name}/import": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "operationId": "ImportCertificate",
        "description": "Imports a certificate into the specified vault",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-zA-Z-]+$",
            "description": "The name of the certificate"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/CertificateImportParameters"
            },
            "description": "The parameters to import certificate."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Imported certificate bundle to the vault",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/certificates/{certificate-name}/versions": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "GetCertificateVersions",
        "description": "List the versions of a certificate.",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the certificate"
          },
          {
            "name": "maxresults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25,
            "description": "Maximum number of results to return in a page. If not specified the service will return up to 25 results."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A response message containing a list of certificates in the vault along with a link to the next page of keys",
            "schema": {
              "$ref": "#/definitions/CertificateListResult"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/certificates/{certificate-name}/policy": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "GetCertificatePolicy",
        "description": "Gets the policy for a certificate.",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the certificate in the given vault."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The certificate policy",
            "schema": {
              "$ref": "#/definitions/CertificatePolicy"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Certificates"
        ],
        "operationId": "UpdateCertificatePolicy",
        "description": "Updates the policy for a certificate. Set appropriate members in the certificatePolicy that must be updated. Leave others as null.",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the certificate in the given vault."
          },
          {
            "name": "certificatePolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificatePolicy"
            },
            "description": "The policy for the certificate."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The certificate policy",
            "schema": {
              "$ref": "#/definitions/CertificatePolicy"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/certificates/{certificate-name}/{certificate-version}": {
      "patch": {
        "tags": [
          "Certificates"
        ],
        "operationId": "UpdateCertificate",
        "description": "Updates the attributes associated with the specified certificate",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the certificate in the given vault"
          },
          {
            "name": "certificate-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the certificate"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/CertificateUpdateParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated certificate",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "GetCertificate",
        "description": "Gets a Certificate.",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the certificate in the given vault"
          },
          {
            "name": "certificate-version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version of the certificate"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved certificate",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/certificates/{certificate-name}/pending": {
      "patch": {
        "tags": [
          "Certificates"
        ],
        "operationId": "UpdateCertificateOperation",
        "description": "Updates a certificate operation.",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the certificate"
          },
          {
            "name": "certificateOperation",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/CertificateOperationUpdateParameter"
            },
            "description": "The certificate operation response."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A message containing the certificate operation response.",
            "schema": {
              "$ref": "#/definitions/CertificateOperation"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "GetCertificateOperation",
        "description": "Gets the certificate operation response.",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the certificate"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The certificate operation response.",
            "schema": {
              "$ref": "#/definitions/CertificateOperation"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Certificates"
        ],
        "operationId": "DeleteCertificateOperation",
        "description": "Deletes the certificate operation.",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the certificate"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A message containing the certificate operation response.",
            "schema": {
              "$ref": "#/definitions/CertificateOperation"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    },
    "/certificates/{certificate-name}/pending/merge": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "operationId": "MergeCertificate",
        "description": "Merges a certificate or a certificate chain with a key pair existing on the server.",
        "parameters": [
          {
            "name": "certificate-name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the certificate"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/CertificateMergeParameters"
            },
            "description": "The parameters to merge certificate."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Merged certificate bundle to the vault",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "Default Response. It will be deserialized as per the Error definition specified in the schema. Exception will be thrown.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Attributes": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Determines whether the object is enabled"
        },
        "nbf": {
          "x-ms-client-name": "NotBefore",
          "type": "integer",
          "format": "unixtime",
          "description": "Not before date in seconds since 1970-01-01T00:00:00Z"
        },
        "exp": {
          "x-ms-client-name": "Expires",
          "type": "integer",
          "format": "unixtime",
          "description": "Expiry date in seconds since 1970-01-01T00:00:00Z"
        },
        "created": {
          "type": "integer",
          "format": "unixtime",
          "readOnly": true,
          "description": "Creation time in seconds since 1970-01-01T00:00:00Z"
        },
        "updated": {
          "type": "integer",
          "format": "unixtime",
          "readOnly": true,
          "description": "Last updated time in seconds since 1970-01-01T00:00:00Z"
        }
      },
      "description": "The object attributes managed by the KeyVault service"
    },
    "JsonWebKey": {
      "properties": {
        "kid": {
          "type": "string",
          "description": "Key Identifier"
        },
        "kty": {
          "type": "string",
          "description": "Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet, usually RSA",
          "enum": [
            "EC",
            "RSA",
            "RSA-HSM",
            "oct"
          ],
          "x-ms-enum": {
            "name": "JsonWebKeyType",
            "modelAsString": true
          }
        },
        "key_ops": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Supported Key Operations"
          }
        },
        "n": {
          "type": "string",
          "format": "base64url",
          "description": "RSA modulus"
        },
        "e": {
          "type": "string",
          "format": "base64url",
          "description": "RSA public exponent"
        },
        "d": {
          "type": "string",
          "format": "base64url",
          "description": "RSA private exponent"
        },
        "dp": {
          "x-ms-client-name": "DP",
          "type": "string",
          "format": "base64url",
          "description": "RSA Private Key Parameter"
        },
        "dq": {
          "x-ms-client-name": "DQ",
          "type": "string",
          "format": "base64url",
          "description": "RSA Private Key Parameter"
        },
        "qi": {
          "x-ms-client-name": "QI",
          "type": "string",
          "format": "base64url",
          "description": "RSA Private Key Parameter"
        },
        "p": {
          "type": "string",
          "format": "base64url",
          "description": "RSA secret prime"
        },
        "q": {
          "type": "string",
          "format": "base64url",
          "description": "RSA secret prime, with p < q"
        },
        "k": {
          "type": "string",
          "format": "base64url",
          "description": "Symmetric key"
        },
        "key_hsm": {
          "x-ms-client-name": "t",
          "type": "string",
          "format": "base64url",
          "description": "HSM Token, used with Bring Your Own Key"
        }
      },
      "description": "As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18"
    },
    "KeyAttributes": {
      "allOf": [
        {
          "$ref": "#/definitions/Attributes"
        }
      ],
      "description": "The attributes of a key managed by the KeyVault service"
    },
    "KeyBundle": {
      "properties": {
        "key": {
          "$ref": "#/definitions/JsonWebKey",
          "description": "The Json web key"
        },
        "attributes": {
          "$ref": "#/definitions/KeyAttributes",
          "description": "The key management attributes"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        },
        "managed": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if the key's lifetime is managed by key vault i.e. if this is a key backing a certificate, then managed will be true."
        }
      },
      "description": "A KeyBundle consisting of a WebKey plus its Attributes"
    },
    "KeyItem": {
      "properties": {
        "kid": {
          "type": "string",
          "description": "Key Identifier"
        },
        "attributes": {
          "$ref": "#/definitions/KeyAttributes",
          "description": "The key management attributes"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        },
        "managed": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if the key's lifetime is managed by key vault i.e. if this is a key backing a certificate, then managed will be true."
        }
      },
      "description": "The key item containing key metadata"
    },
    "SecretBundle": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The secret value "
        },
        "id": {
          "type": "string",
          "description": "The secret id"
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the secret"
        },
        "attributes": {
          "$ref": "#/definitions/SecretAttributes",
          "description": "The secret management attributes"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        },
        "kid": {
          "type": "string",
          "readOnly": true,
          "description": "If this is a secret backing a KV certificate, then this field specifies the corresponding key backing the KV certificate."
        },
        "managed": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if the secret's lifetime is managed by key vault i.e. if this is a secret backing a certificate, then managed will be true."
        }
      },
      "description": "A Secret consisting of a value, id and its attributes."
    },
    "SecretItem": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Secret Identifier"
        },
        "attributes": {
          "$ref": "#/definitions/SecretAttributes",
          "description": "The secret management attributes"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        },
        "contentType": {
          "type": "string",
          "description": "Type of the secret value such as a password"
        },
        "managed": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if the secret's lifetime is managed by key vault i.e. if this is a key backing a certificate, then managed will be true."
        }
      },
      "description": "The secret item containing secret metadata"
    },
    "SecretAttributes": {
      "allOf": [
        {
          "$ref": "#/definitions/Attributes"
        }
      ],
      "description": "The secret management attributes"
    },
    "CertificateAttributes": {
      "allOf": [
        {
          "$ref": "#/definitions/Attributes"
        }
      ],
      "description": "The certificate management attributes"
    },
    "CertificateItem": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Certificate Identifier"
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The certificate management attributes"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        },
        "x5t": {
          "x-ms-client-name": "X509Thumbprint",
          "type": "string",
          "format": "base64url",
          "description": "Thumbprint of the certificate."
        }
      },
      "description": "The certificate item containing certificate metadata"
    },
    "CertificateIssuerItem": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Certificate Identifier"
        },
        "provider": {
          "type": "string",
          "description": "The issuer provider."
        }
      },
      "description": "The certificate issuer item containing certificate issuer metadata"
    },
    "CertificateBundle": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The certificate id",
          "readOnly": true
        },
        "kid": {
          "type": "string",
          "description": "The key id",
          "readOnly": true
        },
        "sid": {
          "type": "string",
          "description": "The secret id",
          "readOnly": true
        },
        "x5t": {
          "x-ms-client-name": "X509Thumbprint",
          "type": "string",
          "format": "base64url",
          "description": "Thumbprint of the certificate.",
          "readOnly": true
        },
        "policy": {
          "$ref": "#/definitions/CertificatePolicy",
          "description": "The management policy.",
          "readOnly": true
        },
        "cer": {
          "type": "string",
          "format": "byte",
          "description": "CER contents of x509 certificate."
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the secret"
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The certificate attributes."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        }
      },
      "description": "A certificate bundle consists of a certificate (X509) plus its attributes."
    },
    "CertificateOperation": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The certificate id",
          "readOnly": true
        },
        "issuer": {
          "x-ms-client-name": "IssuerParameters",
          "$ref": "#/definitions/IssuerParameters",
          "description": "Parameters for the issuer of the X509 component of a certificate."
        },
        "csr": {
          "type": "string",
          "format": "byte",
          "description": "The Certificate Signing Request (CSR) that is being used in the certificate operation."
        },
        "cancellation_requested": {
          "type": "boolean",
          "description": "Indicates if cancellation was requested on the certificate operation."
        },
        "status": {
          "type": "string",
          "description": "Status of the certificate operation."
        },
        "status_details": {
          "type": "string",
          "description": "The status details of the certificate operation."
        },
        "error": {
          "$ref": "#/definitions/Error",
          "description": "Error encountered, if any, during the certificate operation."
        },
        "target": {
          "type": "string",
          "description": "Location which contains the result of the certificate operation."
        },
        "request_id": {
          "type": "string",
          "description": "Identifier for the certificate operation."
        }
      },
      "description": "A certificate operation is returned in case of async requests."
    },
    "CertificatePolicy": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The certificate id",
          "readOnly": true
        },
        "key_props": {
          "x-ms-client-name": "KeyProperties",
          "$ref": "#/definitions/KeyProperties",
          "description": "Properties of the key backing a certificate."
        },
        "secret_props": {
          "x-ms-client-name": "SecretProperties",
          "$ref": "#/definitions/SecretProperties",
          "description": "Properties of the secret backing a certificate."
        },
        "x509_props": {
          "x-ms-client-name": "X509CertificateProperties",
          "$ref": "#/definitions/X509CertificateProperties",
          "description": "Properties of the X509 component of a certificate."
        },
        "lifetime_actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LifetimeAction"
          },
          "description": "Actions that will be performed by Key Vault over the lifetime of a certificate."
        },
        "issuer": {
          "x-ms-client-name": "IssuerParameters",
          "$ref": "#/definitions/IssuerParameters",
          "description": "Parameters for the issuer of the X509 component of a certificate."
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The certificate attributes."
        }
      },
      "description": "Management policy for a certificate."
    },
    "KeyProperties": {
      "properties": {
        "exportable": {
          "type": "boolean",
          "description": "Indicates if the private key can be exported."
        },
        "kty": {
          "x-ms-client-name": "keyType",
          "type": "string",
          "description": "The key type."
        },
        "key_size": {
          "type": "integer",
          "format": "int32",
          "description": "The key size in bits. e.g. 2048."
        },
        "reuse_key": {
          "type": "boolean",
          "description": "Indicates if the same key pair will be used on certificate renewal."
        }
      },
      "description": "Properties of the key pair backing a certificate."
    },
    "SecretProperties": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The media type (MIME type)."
        }
      },
      "description": "Properties of the key backing a certificate."
    },
    "X509CertificateProperties": {
      "properties": {
        "subject": {
          "type": "string",
          "description": "The subject name. Should be a valid X509 Distinguished Name."
        },
        "ekus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The enhanced key usage."
        },
        "sans": {
          "x-ms-client-name": "SubjectAlternativeNames",
          "$ref": "#/definitions/SubjectAlternativeNames",
          "description": "The subject alternative names."
        },
        "key_usage": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "digitalSignature",
              "nonRepudiation",
              "keyEncipherment",
              "dataEncipherment",
              "keyAgreement",
              "keyCertSign",
              "cRLSign",
              "encipherOnly",
              "decipherOnly"
            ],
            "x-ms-enum": {
              "name": "KeyUsageType",
              "modelAsString": true
            }
          },
          "description": "List of key usages."
        },
        "validity_months": {
          "x-ms-client-name": "ValidityInMonths",
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "description": "The duration that the certificate is valid in months."
        }
      },
      "description": "Properties of the X509 component of a certificate."
    },
    "IssuerParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the referenced issuer object or reserved names e.g. 'Self', 'Unknown'."
        },
        "cty": {
          "x-ms-client-name": "CertificateType",
          "type": "string",
          "description": "Type of certificate to be requested from the issuer provider."
        }
      },
      "description": "Parameters for the issuer of the X509 component of a certificate."
    },
    "LifetimeAction": {
      "properties": {
        "trigger": {
          "$ref": "#/definitions/Trigger",
          "description": "The condition that will execute the action."
        },
        "action": {
          "$ref": "#/definitions/Action",
          "description": "The action that will be executed."
        }
      },
      "description": "Action and its trigger that will be performed by Key Vault over the lifetime of a certificate."
    },
    "Action": {
      "properties": {
        "action_type": {
          "type": "string",
          "description": "The type of the action.",
          "enum": [
            "EmailContacts",
            "AutoRenew"
          ],
          "x-ms-enum": {
            "name": "ActionType",
            "modelAsString": false
          }
        }
      },
      "description": "The action that will be executed."
    },
    "Trigger": {
      "properties": {
        "lifetime_percentage": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 99,
          "description": "Percentage of lifetime as which to trigger. Value should be between 1 and 99."
        },
        "days_before_expiry": {
          "type": "integer",
          "format": "int32",
          "description": "Days before expiry."
        }
      },
      "description": "A condition to be satisfied for an action to be executed."
    },
    "SubjectAlternativeNames": {
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Email addresses."
        },
        "dns_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Domain names."
        },
        "upns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "User principal names."
        }
      },
      "description": "The subject alternate names of a X509 object."
    },
    "IssuerBundle": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier for the issuer object.",
          "readOnly": true
        },
        "provider": {
          "type": "string",
          "description": "The issuer provider."
        },
        "credentials": {
          "$ref": "#/definitions/IssuerCredentials",
          "description": "The credentials to be used for the issuer."
        },
        "org_details": {
          "x-ms-client-name": "OrganizationDetails",
          "$ref": "#/definitions/OrganizationDetails",
          "description": "Details of the organization as provided to the issuer."
        },
        "attributes": {
          "$ref": "#/definitions/IssuerAttributes",
          "description": "Attributes of the issuer object."
        }
      },
      "description": "The issuer for Key Vault certificate"
    },
    "IssuerAttributes": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Determines whether the issuer is enabled"
        },
        "created": {
          "type": "integer",
          "format": "unixtime",
          "readOnly": true,
          "description": "Creation time in seconds since 1970-01-01T00:00:00Z"
        },
        "updated": {
          "type": "integer",
          "format": "unixtime",
          "readOnly": true,
          "description": "Last updated time in seconds since 1970-01-01T00:00:00Z"
        }
      },
      "description": "The attributes of an issuer managed by the KeyVault service"
    },
    "IssuerCredentials": {
      "properties": {
        "account_id": {
          "type": "string",
          "description": "The user name/account name/account id."
        },
        "pwd": {
          "x-ms-client-name": "Password",
          "type": "string",
          "description": "The password/secret/account key."
        }
      },
      "description": "The credentials to be used for the certificate issuer."
    },
    "OrganizationDetails": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the organization."
        },
        "admin_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdministratorDetails"
          },
          "description": "Details of the organization administrator."
        }
      },
      "description": "Details of the organization of the certificate issuer."
    },
    "AdministratorDetails": {
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First name."
        },
        "last_name": {
          "type": "string",
          "description": "Last name."
        },
        "email": {
          "x-ms-client-name": "EmailAddress",
          "type": "string",
          "description": "Email address."
        },
        "phone": {
          "type": "string",
          "description": "Phone number."
        }
      },
      "description": "Details of the organization administrator of the certificate issuer"
    },
    "Contacts": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier for the contacts collection.",
          "readOnly": true
        },
        "contacts": {
          "x-ms-client-name": "ContactList",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          },
          "description": "The contact list for the vault certificates."
        }
      },
      "description": "The contacts for the vault certificates."
    },
    "Contact": {
      "properties": {
        "email": {
          "x-ms-client-name": "EmailAddress",
          "type": "string",
          "description": "Email address."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "phone": {
          "type": "string",
          "description": "Phone number."
        }
      },
      "description": "The contact information for the vault certificates."
    },
    "KeyCreateParameters": {
      "properties": {
        "kty": {
          "type": "string",
          "minLength": 1,
          "description": "The type of key to create. Valid key types, see JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM, Octet",
          "enum": [
            "EC",
            "RSA",
            "RSA-HSM",
            "oct"
          ],
          "x-ms-enum": {
            "name": "JsonWebKeyType",
            "modelAsString": true
          }
        },
        "key_size": {
          "type": "integer",
          "format": "int32",
          "description": "The key size in bits. e.g. 1024 or 2048."
        },
        "key_ops": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "JSON web key operations. For more information, see JsonWebKeyOperation.",
            "enum": [
              "encrypt",
              "decrypt",
              "sign",
              "verify",
              "wrapKey",
              "unwrapKey"
            ],
            "x-ms-enum": {
              "name": "JsonWebKeyOperation",
              "modelAsString": true
            }
          }
        },
        "attributes": {
          "x-ms-client-name": "keyAttributes",
          "$ref": "#/definitions/KeyAttributes"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        }
      },
      "description": "The key create parameters",
      "required": [
        "kty"
      ]
    },
    "KeyImportParameters": {
      "properties": {
        "Hsm": {
          "type": "boolean",
          "description": "Whether to import as a hardware key (HSM) or software key"
        },
        "key": {
          "$ref": "#/definitions/JsonWebKey",
          "description": "The Json web key"
        },
        "attributes": {
          "x-ms-client-name": "keyAttributes",
          "$ref": "#/definitions/KeyAttributes",
          "description": "The key management attributes"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        }
      },
      "description": "The key import parameters",
      "required": [
        "key"
      ]
    },
    "KeyOperationsParameters": {
      "properties": {
        "alg": {
          "x-ms-client-name": "algorithm",
          "type": "string",
          "minLength": 1,
          "description": "algorithm identifier",
          "enum": [
            "RSA-OAEP",
            "RSA-OAEP-256",
            "RSA1_5"
          ],
          "x-ms-enum": {
            "name": "JsonWebKeyEncryptionAlgorithm",
            "modelAsString": true
          }
        },
        "value": {
          "type": "string",
          "format": "base64url"
        }
      },
      "description": "The key operations parameters",
      "required": [
        "alg",
        "value"
      ]
    },
    "KeySignParameters": {
      "properties": {
        "alg": {
          "x-ms-client-name": "algorithm",
          "type": "string",
          "minLength": 1,
          "description": "The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm.",
          "enum": [
            "PS256",
            "PS384",
            "PS512",
            "RS256",
            "RS384",
            "RS512",
            "RSNULL"
          ],
          "x-ms-enum": {
            "name": "JsonWebKeySignatureAlgorithm",
            "modelAsString": true
          }
        },
        "value": {
          "type": "string",
          "format": "base64url"
        }
      },
      "description": "The key operations parameters",
      "required": [
        "alg",
        "value"
      ]
    },
    "KeyVerifyParameters": {
      "properties": {
        "alg": {
          "x-ms-client-name": "algorithm",
          "type": "string",
          "minLength": 1,
          "description": "The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm.",
          "enum": [
            "PS256",
            "PS384",
            "PS512",
            "RS256",
            "RS384",
            "RS512",
            "RSNULL"
          ],
          "x-ms-enum": {
            "name": "JsonWebKeySignatureAlgorithm",
            "modelAsString": true
          }
        },
        "digest": {
          "type": "string",
          "format": "base64url",
          "description": "The digest used for signing"
        },
        "value": {
          "x-ms-client-name": "signature",
          "type": "string",
          "format": "base64url",
          "description": "The signature to be verified"
        }
      },
      "description": "The key verify parameters",
      "required": [
        "alg",
        "digest",
        "value"
      ]
    },
    "KeyUpdateParameters": {
      "properties": {
        "key_ops": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "encrypt",
              "decrypt",
              "sign",
              "verify",
              "wrapKey",
              "unwrapKey"
            ],
            "x-ms-enum": {
              "name": "JsonWebKeyOperation",
              "modelAsString": true
            }
          },
          "description": "Json web key operations. For more information on possible key operations, see JsonWebKeyOperation."
        },
        "attributes": {
          "x-ms-client-name": "keyAttributes",
          "$ref": "#/definitions/KeyAttributes"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        }
      },
      "description": "The key update parameters"
    },
    "KeyRestoreParameters": {
      "properties": {
        "value": {
          "type": "string",
          "x-ms-client-name": "keyBundleBackup",
          "format": "base64url",
          "description": "the backup blob associated with a key bundle"
        }
      },
      "description": "The key restore parameters",
      "required": [
        "value"
      ]
    },
    "SecretSetParameters": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the secret"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        },
        "contentType": {
          "type": "string",
          "description": "Type of the secret value such as a password"
        },
        "attributes": {
          "x-ms-client-name": "secretAttributes",
          "$ref": "#/definitions/SecretAttributes",
          "description": "The secret management attributes"
        }
      },
      "description": "The secret set parameters",
      "required": [
        "value"
      ]
    },
    "SecretUpdateParameters": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Type of the secret value such as a password"
        },
        "attributes": {
          "x-ms-client-name": "secretAttributes",
          "$ref": "#/definitions/SecretAttributes",
          "description": "The secret management attributes"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        }
      },
      "description": "The secret update parameters"
    },
    "CertificateCreateParameters": {
      "properties": {
        "policy": {
          "x-ms-client-name": "CertificatePolicy",
          "$ref": "#/definitions/CertificatePolicy",
          "description": "The management policy for the certificate"
        },
        "attributes": {
          "x-ms-client-name": "CertificateAttributes",
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The attributes of the certificate (optional)"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        }
      },
      "description": "The certificate create parameters"
    },
    "CertificateImportParameters": {
      "properties": {
        "value": {
          "x-ms-client-name": "base64EncodedCertificate",
          "type": "string",
          "description": "Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key."
        },
        "pwd": {
          "x-ms-client-name": "password",
          "type": "string",
          "description": "If the private key in base64EncodedCertificate is encrypted, the password used for encryption"
        },
        "policy": {
          "x-ms-client-name": "CertificatePolicy",
          "$ref": "#/definitions/CertificatePolicy",
          "description": "The management policy for the certificate"
        },
        "attributes": {
          "x-ms-client-name": "CertificateAttributes",
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The attributes of the certificate (optional)"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        }
      },
      "description": "The certificate import parameters",
      "required": [
        "value"
      ]
    },
    "CertificateUpdateParameters": {
      "properties": {
        "policy": {
          "x-ms-client-name": "CertificatePolicy",
          "$ref": "#/definitions/CertificatePolicy",
          "description": "The management policy for the certificate"
        },
        "attributes": {
          "x-ms-client-name": "CertificateAttributes",
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The attributes of the certificate (optional)"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        }
      },
      "description": "The certificate update parameters"
    },
    "CertificateMergeParameters": {
      "properties": {
        "x5c": {
          "x-ms-client-name": "x509Certificates",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The certificate or the certificate chain to merge"
        },
        "attributes": {
          "x-ms-client-name": "CertificateAttributes",
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The attributes of the certificate (optional)"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application-specific metadata in the form of key-value pairs"
        }
      },
      "description": "The certificate merge parameters",
      "required": [
        "x5c"
      ]
    },
    "CertificateIssuerSetParameters": {
      "properties": {
        "provider": {
          "type": "string",
          "description": "The issuer provider."
        },
        "credentials": {
          "$ref": "#/definitions/IssuerCredentials",
          "description": "The credentials to be used for the issuer."
        },
        "org_details": {
          "x-ms-client-name": "OrganizationDetails",
          "$ref": "#/definitions/OrganizationDetails",
          "description": "Details of the organization as provided to the issuer."
        },
        "attributes": {
          "$ref": "#/definitions/IssuerAttributes",
          "description": "Attributes of the issuer object."
        }
      },
      "description": "The certificate issuer set parameters.",
      "required": [
        "provider"
      ]
    },
    "CertificateIssuerUpdateParameters": {
      "properties": {
        "provider": {
          "type": "string",
          "description": "The issuer provider."
        },
        "credentials": {
          "$ref": "#/definitions/IssuerCredentials",
          "description": "The credentials to be used for the issuer."
        },
        "org_details": {
          "x-ms-client-name": "OrganizationDetails",
          "$ref": "#/definitions/OrganizationDetails",
          "description": "Details of the organization as provided to the issuer."
        },
        "attributes": {
          "$ref": "#/definitions/IssuerAttributes",
          "description": "Attributes of the issuer object."
        }
      },
      "description": "The certificate issuer update parameters."
    },
    "CertificateOperationUpdateParameter": {
      "properties": {
        "cancellation_requested": {
          "type": "boolean",
          "description": "Indicates if cancellation was requested on the certificate operation."
        }
      },
      "description": "The certificate operation update parameters.",
      "required": [
        "cancellation_requested"
      ]
    },
    "KeyOperationResult": {
      "properties": {
        "kid": {
          "type": "string",
          "description": "Key identifier",
          "readOnly": true
        },
        "value": {
          "x-ms-client-name": "result",
          "type": "string",
          "format": "base64url",
          "readOnly": true
        }
      },
      "description": "The key operation result"
    },
    "KeyVerifyResult": {
      "properties": {
        "value": {
          "type": "boolean",
          "readOnly": true,
          "description": "true if the signature is verified, false otherwise."
        }
      },
      "description": "The key verify result"
    },
    "KeyListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyItem"
          },
          "readOnly": true,
          "description": "A response message containing a list of keys in the vault along with a link to the next page of keys"
        },
        "nextLink": {
          "type": "string",
          "readOnly": true,
          "description": "The URL to get the next set of keys."
        }
      },
      "description": "The key list result"
    },
    "SecretListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretItem"
          },
          "readOnly": true,
          "description": "A response message containing a list of secrets in the vault along with a link to the next page of secrets"
        },
        "nextLink": {
          "type": "string",
          "readOnly": true,
          "description": "The URL to get the next set of secrets."
        }
      },
      "description": "The secret list result"
    },
    "CertificateListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateItem"
          },
          "readOnly": true,
          "description": "A response message containing a list of certificates in the vault along with a link to the next page of certificates"
        },
        "nextLink": {
          "type": "string",
          "readOnly": true,
          "description": "The URL to get the next set of certificates."
        }
      },
      "description": "The certificate list result"
    },
    "CertificateIssuerListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateIssuerItem"
          },
          "readOnly": true,
          "description": "A response message containing a list of certificate issuers in the vault along with a link to the next page of certificate issuers"
        },
        "nextLink": {
          "type": "string",
          "readOnly": true,
          "description": "The URL to get the next set of certificate issuers."
        }
      },
      "description": "The certificate issuer list result"
    },
    "BackupKeyResult": {
      "properties": {
        "value": {
          "type": "string",
          "format": "base64url",
          "readOnly": true,
          "description": "The backup blob containing the backed up key"
        }
      },
      "description": "The backup key result, containing the backup blob"
    },
    "PendingCertificateSigningRequestResult": {
      "properties": {
        "value": {
          "type": "string",
          "readOnly": true,
          "description": "The pending certificate signing request as Base64 encoded string."
        }
      },
      "description": "The pending certificate signing request result"
    },
    "KeyVaultError": {
      "properties": {
        "error": {
          "readOnly": true,
          "$ref": "#/definitions/Error"
        }
      },
      "description": "the key vault error exception"
    },
    "Error": {
      "properties": {
        "code": {
          "type": "string",
          "readOnly": true,
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "readOnly": true,
          "description": "The error message."
        }
      },
      "description": "The key vault server error"
    }
  },
  "parameters": {
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Client Api Version."
    }
  }
}
