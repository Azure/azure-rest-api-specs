{
  "swagger": "2.0",
  "info": {
    "title": "Key Vault",
    "version": "7.5",
    "description": "The key vault client performs cryptographic key operations and vault operations\nagainst the Key Vault service.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{vaultBaseUrl}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "vaultBaseUrl",
        "in": "path",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://vault.azure.net/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "https://vault.azure.net/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/certificates": {
      "get": {
        "operationId": "GetCertificates",
        "summary": "List certificates in a specified key vault",
        "description": "The GetCertificates operation returns the set of certificates resources in the\nspecified key vault. This operation requires the certificates/list permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "maxresults",
            "in": "query",
            "description": "Maximum number of results to return in a page. If not specified the service\nwill return up to 25 results.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25
          },
          {
            "name": "includePending",
            "in": "query",
            "description": "Specifies whether to include certificates which are not completely provisioned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedCertificateItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetCertificates": {
            "$ref": "./examples/GetCertificates-example.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/certificates/{certificateName}": {
      "delete": {
        "operationId": "DeleteCertificate",
        "summary": "Deletes a certificate from a specified key vault.",
        "description": "Deletes all versions of a certificate object along with its associated policy.\nDelete certificate cannot be used to remove individual versions of a\ncertificate object. This operation requires the certificates/delete permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeletedCertificateBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DeleteCertificate": {
            "$ref": "./examples/DeleteCertificate-example.json"
          }
        }
      }
    },
    "/certificates/{certificateName}/{certificateVersion}": {
      "get": {
        "operationId": "GetCertificate",
        "summary": "Gets information about a certificate.",
        "description": "Gets information about a specific certificate. This operation requires the\ncertificates/get permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate in the given vault.",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificateVersion",
            "in": "path",
            "description": "The version of the certificate. This URI fragment is optional. If not\nspecified, the latest version of the certificate is returned.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetCertificate": {
            "$ref": "./examples/GetCertificate-example.json"
          }
        }
      },
      "patch": {
        "operationId": "UpdateCertificate",
        "summary": "Updates the specified attributes associated with the given certificate.",
        "description": "The UpdateCertificate operation applies the specified update on the given\ncertificate; the only elements updated are the certificate's attributes. This\noperation requires the certificates/update permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate in the given key vault.",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificateVersion",
            "in": "path",
            "description": "The version of the certificate.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The parameters for certificate update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "UpdateCertificate": {
            "$ref": "./examples/UpdateCertificate-example.json"
          }
        }
      }
    },
    "/certificates/{certificateName}/backup": {
      "post": {
        "operationId": "BackupCertificate",
        "summary": "Backs up the specified certificate.",
        "description": "Requests that a backup of the specified certificate be downloaded to the\nclient. All versions of the certificate will be downloaded. This operation\nrequires the certificates/backup permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/BackupCertificateResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "BackupCertificate": {
            "$ref": "./examples/BackupCertificate-example.json"
          }
        }
      }
    },
    "/certificates/{certificateName}/create": {
      "post": {
        "operationId": "CreateCertificate",
        "summary": "Creates a new certificate.",
        "description": "If this is the first version, the certificate resource is created. This\noperation requires the certificates/create permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate. The value you provide may be copied globally for\nthe purpose of running the service. The value provided should not include\npersonally identifiable or sensitive information.",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-zA-Z-]+$"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The parameters to create a certificate.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateCreateParameters"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "$ref": "#/definitions/CertificateOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "CreateCertificate": {
            "$ref": "./examples/CreateCertificate-example.json"
          }
        }
      }
    },
    "/certificates/{certificateName}/import": {
      "post": {
        "operationId": "ImportCertificate",
        "summary": "Imports a certificate into a specified key vault.",
        "description": "Imports an existing valid certificate, containing a private key, into Azure Key\nVault. This operation requires the certificates/import permission. The\ncertificate to be imported can be in either PFX or PEM format. If the\ncertificate is in PEM format the PEM file must contain the key as well as x509\ncertificates. Key Vault will only accept a key in PKCS#8 format.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate. The value you provide may be copied globally for\nthe purpose of running the service. The value provided should not include\npersonally identifiable or sensitive information.",
            "required": true,
            "type": "string",
            "pattern": "^[0-9a-zA-Z-]+$"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The parameters to import the certificate.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateImportParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "ImportCertificate": {
            "$ref": "./examples/ImportCertificate-example.json"
          }
        }
      }
    },
    "/certificates/{certificateName}/pending": {
      "get": {
        "operationId": "GetCertificateOperation",
        "summary": "Gets the creation operation of a certificate.",
        "description": "Gets the creation operation associated with a specified certificate. This\noperation requires the certificates/get permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificateOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetCertificateOperation": {
            "$ref": "./examples/GetCertificateOperation-example.json"
          }
        }
      },
      "patch": {
        "operationId": "UpdateCertificateOperation",
        "summary": "Updates a certificate operation.",
        "description": "Updates a certificate creation operation that is already in progress. This\noperation requires the certificates/update permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate.",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificateOperation",
            "in": "body",
            "description": "The certificate operation response.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateOperationUpdateParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificateOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "UpdateCertificateOperation": {
            "$ref": "./examples/UpdateCertificateOperation-example.json"
          }
        }
      },
      "delete": {
        "operationId": "DeleteCertificateOperation",
        "summary": "Deletes the creation operation for a specific certificate.",
        "description": "Deletes the creation operation for a specified certificate that is in the\nprocess of being created. The certificate is no longer created. This operation\nrequires the certificates/update permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificateOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DeleteCertificateOperation": {
            "$ref": "./examples/DeleteCertificateOperation-example.json"
          }
        }
      }
    },
    "/certificates/{certificateName}/pending/merge": {
      "post": {
        "operationId": "MergeCertificate",
        "summary": "Merges a certificate or a certificate chain with a key pair existing on the\nserver.",
        "description": "The MergeCertificate operation performs the merging of a certificate or\ncertificate chain with a key pair currently available in the service. This\noperation requires the certificates/create permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The parameters to merge certificate.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateMergeParameters"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "MergeCertificate": {
            "$ref": "./examples/MergeCertificate-example.json"
          }
        }
      }
    },
    "/certificates/{certificateName}/policy": {
      "get": {
        "operationId": "GetCertificatePolicy",
        "summary": "Lists the policy for a certificate.",
        "description": "The GetCertificatePolicy operation returns the specified certificate policy\nresources in the specified key vault. This operation requires the\ncertificates/get permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate in a given key vault.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificatePolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetCertificatePolicy": {
            "$ref": "./examples/GetCertificatePolicy-example.json"
          }
        }
      },
      "patch": {
        "operationId": "UpdateCertificatePolicy",
        "summary": "Updates the policy for a certificate.",
        "description": "Set specified members in the certificate policy. Leave others as null. This\noperation requires the certificates/update permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate in the given vault.",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificatePolicy",
            "in": "body",
            "description": "The policy for the certificate.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificatePolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificatePolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "UpdateCertificatePolicy": {
            "$ref": "./examples/UpdateCertificatePolicy-example.json"
          }
        }
      }
    },
    "/certificates/{certificateName}/versions": {
      "get": {
        "operationId": "GetCertificateVersions",
        "summary": "List the versions of a certificate.",
        "description": "The GetCertificateVersions operation returns the versions of a certificate in\nthe specified key vault. This operation requires the certificates/list\npermission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate.",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxresults",
            "in": "query",
            "description": "Maximum number of results to return in a page. If not specified the service\nwill return up to 25 results.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificateListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetCertificateVersions": {
            "$ref": "./examples/GetCertificateVersions-example.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/certificates/contacts": {
      "get": {
        "operationId": "GetCertificateContacts",
        "summary": "Lists the certificate contacts for a specified key vault.",
        "description": "The GetCertificateContacts operation returns the set of certificate contact\nresources in the specified key vault. This operation requires the\ncertificates/managecontacts permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Contacts"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetCertificateContacts": {
            "$ref": "./examples/GetCertificateContacts-example.json"
          }
        }
      },
      "put": {
        "operationId": "SetCertificateContacts",
        "summary": "Sets the certificate contacts for the specified key vault.",
        "description": "Sets the certificate contacts for the specified key vault. This operation\nrequires the certificates/managecontacts permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "contacts",
            "in": "body",
            "description": "The contacts for the key vault certificate.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contacts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Contacts"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "SetCertificateContacts": {
            "$ref": "./examples/SetCertificateContacts-example.json"
          }
        }
      },
      "delete": {
        "operationId": "DeleteCertificateContacts",
        "summary": "Deletes the certificate contacts for a specified key vault.",
        "description": "Deletes the certificate contacts for a specified key vault certificate. This\noperation requires the certificates/managecontacts permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Contacts"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DeleteCertificateContacts": {
            "$ref": "./examples/DeleteCertificateContacts-example.json"
          }
        }
      }
    },
    "/certificates/issuers": {
      "get": {
        "operationId": "GetCertificateIssuers",
        "summary": "List certificate issuers for a specified key vault.",
        "description": "The GetCertificateIssuers operation returns the set of certificate issuer\nresources in the specified key vault. This operation requires the\ncertificates/manageissuers/getissuers permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "maxresults",
            "in": "query",
            "description": "Maximum number of results to return in a page. If not specified the service\nwill return up to 25 results.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedCertificateIssuerItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetCertificateIssuers": {
            "$ref": "./examples/GetCertificateIssuers-example.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/certificates/issuers/{issuerName}": {
      "get": {
        "operationId": "GetCertificateIssuer",
        "summary": "Lists the specified certificate issuer.",
        "description": "The GetCertificateIssuer operation returns the specified certificate issuer\nresources in the specified key vault. This operation requires the\ncertificates/manageissuers/getissuers permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "issuerName",
            "in": "path",
            "description": "The name of the issuer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/IssuerBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetCertificateIssuer": {
            "$ref": "./examples/GetCertificateIssuer-example.json"
          }
        }
      },
      "put": {
        "operationId": "SetCertificateIssuer",
        "summary": "Sets the specified certificate issuer.",
        "description": "The SetCertificateIssuer operation adds or updates the specified certificate\nissuer. This operation requires the certificates/setissuers permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "issuerName",
            "in": "path",
            "description": "The name of the issuer. The value you provide may be copied globally for the\npurpose of running the service. The value provided should not include\npersonally identifiable or sensitive information.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameter",
            "in": "body",
            "description": "Certificate issuer set parameter.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateIssuerSetParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/IssuerBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "SetCertificateIssuer": {
            "$ref": "./examples/SetCertificateIssuer-example.json"
          }
        }
      },
      "patch": {
        "operationId": "UpdateCertificateIssuer",
        "summary": "Updates the specified certificate issuer.",
        "description": "The UpdateCertificateIssuer operation performs an update on the specified\ncertificate issuer entity. This operation requires the certificates/setissuers\npermission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "issuerName",
            "in": "path",
            "description": "The name of the issuer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameter",
            "in": "body",
            "description": "Certificate issuer update parameter.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateIssuerUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/IssuerBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "UpdateCertificateIssuer": {
            "$ref": "./examples/UpdateCertificateIssuer-example.json"
          }
        }
      },
      "delete": {
        "operationId": "DeleteCertificateIssuer",
        "summary": "Deletes the specified certificate issuer.",
        "description": "The DeleteCertificateIssuer operation permanently removes the specified\ncertificate issuer from the vault. This operation requires the\ncertificates/manageissuers/deleteissuers permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "issuerName",
            "in": "path",
            "description": "The name of the issuer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/IssuerBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DeleteCertificateIssuer": {
            "$ref": "./examples/DeleteCertificateIssuer-example.json"
          }
        }
      }
    },
    "/certificates/restore": {
      "post": {
        "operationId": "RestoreCertificate",
        "summary": "Restores a backed up certificate to a vault.",
        "description": "Restores a backed up certificate, and all its versions, to a vault. This\noperation requires the certificates/restore permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The parameters to restore the certificate.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateRestoreParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "RestoreCertificate": {
            "$ref": "./examples/RestoreCertificate-example.json"
          }
        }
      }
    },
    "/deletedcertificates": {
      "get": {
        "operationId": "GetDeletedCertificates",
        "summary": "Lists the deleted certificates in the specified vault currently available for\nrecovery.",
        "description": "The GetDeletedCertificates operation retrieves the certificates in the current\nvault which are in a deleted state and ready for recovery or purging. This\noperation includes deletion-specific information. This operation requires the\ncertificates/get/list permission. This operation can only be enabled on\nsoft-delete enabled vaults.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "maxresults",
            "in": "query",
            "description": "Maximum number of results to return in a page. If not specified the service\nwill return up to 25 results.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 25
          },
          {
            "name": "includePending",
            "in": "query",
            "description": "Specifies whether to include certificates which are not completely provisioned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDeletedCertificateItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetDeletedCertificates": {
            "$ref": "./examples/GetDeletedCertificates-example.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/deletedcertificates/{certificateName}": {
      "get": {
        "operationId": "GetDeletedCertificate",
        "summary": "Retrieves information about the specified deleted certificate.",
        "description": "The GetDeletedCertificate operation retrieves the deleted certificate\ninformation plus its attributes, such as retention interval, scheduled\npermanent deletion and the current deletion recovery level. This operation\nrequires the certificates/get permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeletedCertificateBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetDeletedCertificate": {
            "$ref": "./examples/GetDeletedCertificate-example.json"
          }
        }
      },
      "delete": {
        "operationId": "PurgeDeletedCertificate",
        "summary": "Permanently deletes the specified deleted certificate.",
        "description": "The PurgeDeletedCertificate operation performs an irreversible deletion of the\nspecified certificate, without possibility for recovery. The operation is not\navailable if the recovery level does not specify 'Purgeable'. This operation\nrequires the certificate/purge permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "PurgeDeletedCertificate": {
            "$ref": "./examples/PurgeDeletedCertificate-example.json"
          }
        }
      }
    },
    "/deletedcertificates/{certificateName}/recover": {
      "post": {
        "operationId": "RecoverDeletedCertificate",
        "summary": "Recovers the deleted certificate back to its current version under\n/certificates.",
        "description": "The RecoverDeletedCertificate operation performs the reversal of the Delete\noperation. The operation is applicable in vaults enabled for soft-delete, and\nmust be issued during the retention interval (available in the deleted\ncertificate's attributes). This operation requires the certificates/recover\npermission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the deleted certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CertificateBundle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "RecoverDeletedCertificate": {
            "$ref": "./examples/RecoverDeletedCertificate-example.json"
          }
        }
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "object",
      "description": "The action that will be executed.",
      "properties": {
        "action_type": {
          "$ref": "#/definitions/ActionType",
          "description": "The type of the action.",
          "x-ms-client-name": "actionType"
        }
      }
    },
    "ActionType": {
      "type": "string",
      "description": "The type of the action.",
      "enum": [
        "EmailContacts",
        "AutoRenew"
      ],
      "x-ms-enum": {
        "name": "ActionType",
        "modelAsString": true,
        "values": [
          {
            "name": "EmailContacts",
            "value": "EmailContacts",
            "description": "A certificate policy that will email certificate contacts."
          },
          {
            "name": "AutoRenew",
            "value": "AutoRenew",
            "description": "A certificate policy that will auto-renew a certificate."
          }
        ]
      }
    },
    "AdministratorDetails": {
      "type": "object",
      "description": "Details of the organization administrator of the certificate issuer.",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First name.",
          "x-ms-client-name": "firstName"
        },
        "last_name": {
          "type": "string",
          "description": "Last name.",
          "x-ms-client-name": "lastName"
        },
        "email": {
          "type": "string",
          "description": "Email address.",
          "x-ms-client-name": "emailAddress"
        },
        "phone": {
          "type": "string",
          "description": "Phone number."
        }
      }
    },
    "Attributes": {
      "type": "object",
      "description": "The object attributes managed by the KeyVault service.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Determines whether the object is enabled."
        },
        "nbf": {
          "type": "integer",
          "format": "unixtime",
          "description": "Not before date in UTC.",
          "x-ms-client-name": "notBefore"
        },
        "expires": {
          "type": "integer",
          "format": "unixtime",
          "description": "Expiry date in UTC."
        },
        "created": {
          "type": "integer",
          "format": "unixtime",
          "description": "Creation time in UTC.",
          "readOnly": true
        },
        "updated": {
          "type": "integer",
          "format": "unixtime",
          "description": "Last updated time in UTC.",
          "readOnly": true
        }
      }
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "BackupCertificateResult": {
      "type": "object",
      "description": "The backup certificate result, containing the backup blob.",
      "properties": {
        "value": {
          "type": "string",
          "format": "byte",
          "description": "The backup blob containing the backed up certificate."
        }
      }
    },
    "CertificateAttributes": {
      "type": "object",
      "description": "The certificate management attributes.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Determines whether the object is enabled."
        },
        "nbf": {
          "type": "integer",
          "format": "unixtime",
          "description": "Not before date in UTC.",
          "x-ms-client-name": "notBefore"
        },
        "expires": {
          "type": "integer",
          "format": "unixtime",
          "description": "Expiry date in UTC."
        },
        "created": {
          "type": "integer",
          "format": "unixtime",
          "description": "Creation time in UTC.",
          "readOnly": true
        },
        "updated": {
          "type": "integer",
          "format": "unixtime",
          "description": "Last updated time in UTC.",
          "readOnly": true
        },
        "recoverableDays": {
          "type": "integer",
          "format": "int32",
          "description": "softDelete data retention days. Value should be >=7 and <=90 when softDelete\nenabled, otherwise 0.",
          "readOnly": true
        },
        "recoveryLevel": {
          "$ref": "#/definitions/DeletionRecoveryLevel",
          "description": "Reflects the deletion recovery level currently in effect for certificates in\nthe current vault. If it contains 'Purgeable', the certificate can be\npermanently deleted by a privileged user; otherwise, only the system can purge\nthe certificate, at the end of the retention interval.",
          "readOnly": true
        }
      }
    },
    "CertificateBundle": {
      "type": "object",
      "description": "A certificate bundle consists of a certificate (X509) plus its attributes.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The certificate id.",
          "readOnly": true
        },
        "kid": {
          "type": "string",
          "description": "The key id.",
          "readOnly": true
        },
        "sid": {
          "type": "string",
          "description": "The secret id.",
          "readOnly": true
        },
        "x5t": {
          "type": "string",
          "format": "byte",
          "description": "Thumbprint of the certificate.",
          "readOnly": true,
          "x-ms-client-name": "x509Thumbprint"
        },
        "policy": {
          "$ref": "#/definitions/CertificatePolicy",
          "description": "The management policy.",
          "readOnly": true
        },
        "cer": {
          "type": "string",
          "format": "byte",
          "description": "CER contents of x509 certificate."
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the secret. eg. 'application/x-pem-file' or\n'application/x-pkcs12',"
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The certificate attributes."
        },
        "tags": {
          "type": "object",
          "description": "Application specific metadata in the form of key-value pairs",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CertificateCreateParameters": {
      "type": "object",
      "description": "The certificate create parameters.",
      "properties": {
        "policy": {
          "$ref": "#/definitions/CertificatePolicy",
          "description": "The management policy for the certificate.",
          "x-ms-client-name": "certificatePolicy"
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The attributes of the certificate (optional).",
          "x-ms-client-name": "certificateAttributes"
        },
        "tags": {
          "type": "object",
          "description": "Application specific metadata in the form of key-value pairs.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CertificateImportParameters": {
      "type": "object",
      "description": "The certificate import parameters.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Base64 encoded representation of the certificate object to import. This\ncertificate needs to contain the private key.",
          "x-ms-client-name": "base64EncodedCertificate"
        },
        "pwd": {
          "type": "string",
          "description": "If the private key in base64EncodedCertificate is encrypted, the password used\nfor encryption.",
          "x-ms-client-name": "password"
        },
        "policy": {
          "$ref": "#/definitions/CertificatePolicy",
          "description": "The management policy for the certificate.",
          "x-ms-client-name": "certificatePolicy"
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The attributes of the certificate (optional).",
          "x-ms-client-name": "certificateAttributes"
        },
        "tags": {
          "type": "object",
          "description": "Application specific metadata in the form of key-value pairs.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "CertificateIssuerItem": {
      "type": "object",
      "description": "The certificate issuer item containing certificate issuer metadata.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Certificate Identifier.",
          "readOnly": true
        },
        "provider": {
          "type": "string",
          "description": "The issuer provider."
        }
      },
      "required": [
        "id"
      ]
    },
    "CertificateIssuerListResult": {
      "type": "object",
      "description": "The certificate issuer list result.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The CertificateIssuerItem items on this page",
          "items": {
            "$ref": "#/definitions/CertificateIssuerItem"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "CertificateIssuerSetParameters": {
      "type": "object",
      "description": "The certificate issuer set parameters.",
      "properties": {
        "provider": {
          "type": "string",
          "description": "The issuer provider."
        },
        "credentials": {
          "$ref": "#/definitions/IssuerCredentials",
          "description": "The credentials to be used for the issuer."
        },
        "org_details": {
          "$ref": "#/definitions/OrganizationDetails",
          "description": "Details of the organization as provided to the issuer.",
          "x-ms-client-name": "organizationDetails"
        },
        "attributes": {
          "$ref": "#/definitions/IssuerAttributes",
          "description": "Attributes of the issuer object."
        }
      },
      "required": [
        "provider"
      ]
    },
    "CertificateIssuerUpdateParameters": {
      "type": "object",
      "description": "The certificate issuer update parameters.",
      "properties": {
        "provider": {
          "type": "string",
          "description": "The issuer provider."
        },
        "credentials": {
          "$ref": "#/definitions/IssuerCredentials",
          "description": "The credentials to be used for the issuer."
        },
        "org_details": {
          "$ref": "#/definitions/OrganizationDetails",
          "description": "Details of the organization as provided to the issuer.",
          "x-ms-client-name": "organizationDetails"
        },
        "attributes": {
          "$ref": "#/definitions/IssuerAttributes",
          "description": "Attributes of the issuer object."
        }
      }
    },
    "CertificateItem": {
      "type": "object",
      "description": "The certificate item containing certificate metadata.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Certificate identifier.",
          "readOnly": true
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The certificate management attributes."
        },
        "tags": {
          "type": "object",
          "description": "Application specific metadata in the form of key-value pairs.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "x5t": {
          "type": "string",
          "format": "byte",
          "description": "Thumbprint of the certificate.",
          "x-ms-client-name": "x509Thumbprint"
        }
      },
      "required": [
        "id"
      ]
    },
    "CertificateListResult": {
      "type": "object",
      "description": "The certificate list result.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The CertificateItem items on this page",
          "items": {
            "$ref": "#/definitions/CertificateItem"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "CertificateMergeParameters": {
      "type": "object",
      "description": "The certificate merge parameters",
      "properties": {
        "x5c": {
          "type": "array",
          "description": "The certificate or the certificate chain to merge.",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "x-ms-client-name": "x509Certificates"
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The attributes of the certificate (optional).",
          "x-ms-client-name": "certificateAttributes"
        },
        "tags": {
          "type": "object",
          "description": "Application specific metadata in the form of key-value pairs.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "x5c"
      ]
    },
    "CertificateOperation": {
      "type": "object",
      "description": "A certificate operation is returned in case of asynchronous requests.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The certificate id.",
          "readOnly": true
        },
        "issuer": {
          "$ref": "#/definitions/IssuerParameters",
          "description": "Parameters for the issuer of the X509 component of a certificate.",
          "x-ms-client-name": "issuerParameters"
        },
        "csr": {
          "type": "string",
          "format": "byte",
          "description": "The certificate signing request (CSR) that is being used in the certificate\noperation."
        },
        "cancellation_requested": {
          "type": "boolean",
          "description": "Indicates if cancellation was requested on the certificate operation.",
          "x-ms-client-name": "cancellationRequested"
        },
        "status": {
          "type": "string",
          "description": "Status of the certificate operation."
        },
        "status_details": {
          "type": "string",
          "description": "The status details of the certificate operation.",
          "x-ms-client-name": "statusDetails"
        },
        "error": {
          "$ref": "#/definitions/Error",
          "description": "Error encountered, if any, during the certificate operation."
        },
        "target": {
          "type": "string",
          "description": "Location which contains the result of the certificate operation."
        },
        "request_id": {
          "type": "string",
          "description": "Identifier for the certificate operation.",
          "x-ms-client-name": "requestId"
        }
      }
    },
    "CertificateOperationUpdateParameter": {
      "type": "object",
      "description": "The certificate operation update parameters.",
      "properties": {
        "cancellation_requested": {
          "type": "boolean",
          "description": "Indicates if cancellation was requested on the certificate operation.",
          "x-ms-client-name": "cancellationRequested"
        }
      }
    },
    "CertificatePolicy": {
      "type": "object",
      "description": "Management policy for a certificate.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The certificate id.",
          "readOnly": true
        },
        "key_props": {
          "$ref": "#/definitions/KeyProperties",
          "description": "Properties of the key backing a certificate.",
          "x-ms-client-name": "keyProperties"
        },
        "secret_props": {
          "$ref": "#/definitions/SecretProperties",
          "description": "Properties of the secret backing a certificate.",
          "x-ms-client-name": "secretProperties"
        },
        "x509_props": {
          "$ref": "#/definitions/X509CertificateProperties",
          "description": "Properties of the X509 component of a certificate.",
          "x-ms-client-name": "x509CertificateProperties"
        },
        "lifetime_actions": {
          "type": "array",
          "description": "Actions that will be performed by Key Vault over the lifetime of a certificate.",
          "items": {
            "$ref": "#/definitions/LifetimeAction"
          },
          "x-ms-client-name": "lifetimeActions",
          "x-ms-identifiers": []
        },
        "issuer": {
          "$ref": "#/definitions/IssuerParameters",
          "description": "Parameters for the issuer of the X509 component of a certificate.",
          "x-ms-client-name": "issuerParameters"
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The certificate attributes."
        }
      }
    },
    "CertificateRestoreParameters": {
      "type": "object",
      "description": "The certificate restore parameters.",
      "properties": {
        "value": {
          "type": "string",
          "format": "byte",
          "description": "The backup blob associated with a certificate bundle.",
          "x-ms-client-name": "certificateBundleBackup"
        }
      },
      "required": [
        "value"
      ]
    },
    "CertificateUpdateParameters": {
      "type": "object",
      "description": "The certificate update parameters.",
      "properties": {
        "policy": {
          "$ref": "#/definitions/CertificatePolicy",
          "description": "The management policy for the certificate.",
          "x-ms-client-name": "certificatePolicy"
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The attributes of the certificate (optional).",
          "x-ms-client-name": "certificateAttributes"
        },
        "tags": {
          "type": "object",
          "description": "Application specific metadata in the form of key-value pairs.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Contact": {
      "type": "object",
      "description": "The contact information for the vault certificates.",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address.",
          "x-ms-client-name": "emailAddress"
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "phone": {
          "type": "string",
          "description": "Phone number."
        }
      }
    },
    "Contacts": {
      "type": "object",
      "description": "The contacts for the vault certificates.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier for the contacts collection.",
          "readOnly": true
        },
        "contacts": {
          "type": "array",
          "description": "The contact list for the vault certificates.",
          "items": {
            "$ref": "#/definitions/Contact"
          },
          "x-ms-client-name": "contactList",
          "x-ms-identifiers": []
        }
      }
    },
    "DeletedCertificateBundle": {
      "type": "object",
      "description": "A Deleted Certificate consisting of its previous id, attributes and its tags,\nas well as information on when it will be purged.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The certificate id.",
          "readOnly": true
        },
        "kid": {
          "type": "string",
          "description": "The key id.",
          "readOnly": true
        },
        "sid": {
          "type": "string",
          "description": "The secret id.",
          "readOnly": true
        },
        "x5t": {
          "type": "string",
          "format": "byte",
          "description": "Thumbprint of the certificate.",
          "readOnly": true,
          "x-ms-client-name": "x509Thumbprint"
        },
        "policy": {
          "$ref": "#/definitions/CertificatePolicy",
          "description": "The management policy.",
          "readOnly": true
        },
        "cer": {
          "type": "string",
          "format": "byte",
          "description": "CER contents of x509 certificate."
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the secret. eg. 'application/x-pem-file' or\n'application/x-pkcs12',"
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The certificate attributes."
        },
        "tags": {
          "type": "object",
          "description": "Application specific metadata in the form of key-value pairs",
          "additionalProperties": {
            "type": "string"
          }
        },
        "recoveryId": {
          "type": "string",
          "description": "The url of the recovery object, used to identify and recover the deleted\ncertificate."
        },
        "scheduledPurgeDate": {
          "type": "integer",
          "format": "unixtime",
          "description": "The time when the certificate is scheduled to be purged, in UTC",
          "readOnly": true
        },
        "deletedDate": {
          "type": "integer",
          "format": "unixtime",
          "description": "The time when the certificate was deleted, in UTC",
          "readOnly": true
        }
      }
    },
    "DeletedCertificateItem": {
      "type": "object",
      "description": "The deleted certificate item containing metadata about the deleted certificate.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Certificate identifier.",
          "readOnly": true
        },
        "attributes": {
          "$ref": "#/definitions/CertificateAttributes",
          "description": "The certificate management attributes."
        },
        "tags": {
          "type": "object",
          "description": "Application specific metadata in the form of key-value pairs.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "x5t": {
          "type": "string",
          "format": "byte",
          "description": "Thumbprint of the certificate.",
          "x-ms-client-name": "x509Thumbprint"
        },
        "recoveryId": {
          "type": "string",
          "description": "The url of the recovery object, used to identify and recover the deleted\ncertificate."
        },
        "scheduledPurgeDate": {
          "type": "integer",
          "format": "unixtime",
          "description": "The time when the certificate is scheduled to be purged, in UTC",
          "readOnly": true
        },
        "deletedDate": {
          "type": "integer",
          "format": "unixtime",
          "description": "The time when the certificate was deleted, in UTC",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "recoveryId"
      ]
    },
    "DeletedCertificateListResult": {
      "type": "object",
      "description": "A list of certificates that have been deleted in this vault.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DeletedCertificateItem items on this page",
          "items": {
            "$ref": "#/definitions/DeletedCertificateItem"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DeletionRecoveryLevel": {
      "type": "string",
      "description": "Reflects the deletion recovery level currently in effect for certificates in\nthe current vault. If it contains 'Purgeable', the certificate can be\npermanently deleted by a privileged user; otherwise, only the system can purge\nthe certificate, at the end of the retention interval.",
      "enum": [
        "Purgeable",
        "Recoverable+Purgeable",
        "Recoverable",
        "Recoverable+ProtectedSubscription",
        "CustomizedRecoverable+Purgeable",
        "CustomizedRecoverable",
        "CustomizedRecoverable+ProtectedSubscription"
      ],
      "x-ms-enum": {
        "name": "DeletionRecoveryLevel",
        "modelAsString": true,
        "values": [
          {
            "name": "Purgeable",
            "value": "Purgeable",
            "description": "Denotes a vault state in which deletion is an irreversible operation, without\nthe possibility for recovery. This level corresponds to no protection being\navailable against a Delete operation; the data is irretrievably lost upon\naccepting a Delete operation at the entity level or higher (vault, resource\ngroup, subscription etc.)"
          },
          {
            "name": "Recoverable_Purgeable",
            "value": "Recoverable+Purgeable",
            "description": "Denotes a vault state in which deletion is recoverable, and which also permits\nimmediate and permanent deletion (i.e. purge). This level guarantees the\nrecoverability of the deleted entity during the retention interval (90 days),\nunless a Purge operation is requested, or the subscription is cancelled. System\nwil permanently delete it after 90 days, if not recovered"
          },
          {
            "name": "Recoverable",
            "value": "Recoverable",
            "description": "Denotes a vault state in which deletion is recoverable without the possibility\nfor immediate and permanent deletion (i.e. purge). This level guarantees the\nrecoverability of the deleted entity during the retention interval(90 days) and\nwhile the subscription is still available. System wil permanently delete it\nafter 90 days, if not recovered"
          },
          {
            "name": "Recoverable_ProtectedSubscription",
            "value": "Recoverable+ProtectedSubscription",
            "description": "Denotes a vault and subscription state in which deletion is recoverable within\nretention interval (90 days), immediate and permanent deletion (i.e. purge) is\nnot permitted, and in which the subscription itself  cannot be permanently\ncanceled. System wil permanently delete it after 90 days, if not recovered"
          },
          {
            "name": "CustomizedRecoverable_Purgeable",
            "value": "CustomizedRecoverable+Purgeable",
            "description": "Denotes a vault state in which deletion is recoverable, and which also permits\nimmediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays\n< 90). This level guarantees the recoverability of the deleted entity during\nthe retention interval, unless a Purge operation is requested, or the\nsubscription is cancelled."
          },
          {
            "name": "CustomizedRecoverable",
            "value": "CustomizedRecoverable",
            "description": "Denotes a vault state in which deletion is recoverable without the possibility\nfor immediate and permanent deletion (i.e. purge when 7<=\nSoftDeleteRetentionInDays < 90).This level guarantees the recoverability of the\ndeleted entity during the retention interval and while the subscription is\nstill available."
          },
          {
            "name": "CustomizedRecoverable_ProtectedSubscription",
            "value": "CustomizedRecoverable+ProtectedSubscription",
            "description": "Denotes a vault and subscription state in which deletion is recoverable,\nimmediate and permanent deletion (i.e. purge) is not permitted, and in which\nthe subscription itself cannot be permanently canceled when 7<=\nSoftDeleteRetentionInDays < 90. This level guarantees the recoverability of the\ndeleted entity during the retention interval, and also reflects the fact that\nthe subscription itself cannot be cancelled."
          }
        ]
      }
    },
    "Error": {
      "type": "object",
      "description": "The key vault server error.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "The error message.",
          "readOnly": true
        },
        "innererror": {
          "$ref": "#/definitions/Error",
          "description": "The key vault server error.",
          "readOnly": true,
          "x-ms-client-name": "innerError"
        }
      }
    },
    "IssuerAttributes": {
      "type": "object",
      "description": "The attributes of an issuer managed by the Key Vault service.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Determines whether the issuer is enabled."
        },
        "created": {
          "type": "integer",
          "format": "unixtime",
          "description": "Creation time in UTC.",
          "readOnly": true
        },
        "updated": {
          "type": "integer",
          "format": "unixtime",
          "description": "Last updated time in UTC.",
          "readOnly": true
        }
      }
    },
    "IssuerBundle": {
      "type": "object",
      "description": "The issuer for Key Vault certificate.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier for the issuer object.",
          "readOnly": true
        },
        "provider": {
          "type": "string",
          "description": "The issuer provider."
        },
        "credentials": {
          "$ref": "#/definitions/IssuerCredentials",
          "description": "The credentials to be used for the issuer."
        },
        "org_details": {
          "$ref": "#/definitions/OrganizationDetails",
          "description": "Details of the organization as provided to the issuer.",
          "x-ms-client-name": "organizationDetails"
        },
        "attributes": {
          "$ref": "#/definitions/IssuerAttributes",
          "description": "Attributes of the issuer object."
        }
      }
    },
    "IssuerCredentials": {
      "type": "object",
      "description": "The credentials to be used for the certificate issuer.",
      "properties": {
        "account_id": {
          "type": "string",
          "description": "The user name/account name/account id.",
          "x-ms-client-name": "accountId"
        },
        "pwd": {
          "type": "string",
          "description": "The password/secret/account key.",
          "x-ms-client-name": "password"
        }
      }
    },
    "IssuerParameters": {
      "type": "object",
      "description": "Parameters for the issuer of the X509 component of a certificate.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the referenced issuer object or reserved names; for example, 'Self' or\n'Unknown'."
        },
        "cty": {
          "type": "string",
          "description": "Certificate type as supported by the provider (optional); for example 'OV-SSL',\n'EV-SSL'",
          "x-ms-client-name": "certificateType"
        },
        "cert_transparency": {
          "type": "boolean",
          "description": "Indicates if the certificates generated under this policy should be published\nto certificate transparency logs.",
          "x-ms-client-name": "certificateTransparency"
        }
      }
    },
    "JsonWebKeyCurveName": {
      "type": "string",
      "description": "Elliptic curve name. For valid values, see JsonWebKeyCurveName.",
      "enum": [
        "P-256",
        "P-384",
        "P-521",
        "P-256K"
      ],
      "x-ms-enum": {
        "name": "JsonWebKeyCurveName",
        "modelAsString": true,
        "values": [
          {
            "name": "P_256",
            "value": "P-256",
            "description": "The NIST P-256 elliptic curve, AKA SECG curve SECP256R1."
          },
          {
            "name": "P_384",
            "value": "P-384",
            "description": "The NIST P-384 elliptic curve, AKA SECG curve SECP384R1."
          },
          {
            "name": "P_521",
            "value": "P-521",
            "description": "The NIST P-521 elliptic curve, AKA SECG curve SECP521R1."
          },
          {
            "name": "P_256K",
            "value": "P-256K",
            "description": "The SECG SECP256K1 elliptic curve."
          }
        ]
      }
    },
    "JsonWebKeyType": {
      "type": "string",
      "description": "The type of key pair to be used for the certificate.",
      "enum": [
        "EC",
        "EC-HSM",
        "RSA",
        "RSA-HSM",
        "oct",
        "oct-HSM"
      ],
      "x-ms-enum": {
        "name": "JsonWebKeyType",
        "modelAsString": true,
        "values": [
          {
            "name": "EC",
            "value": "EC",
            "description": "Elliptic Curve."
          },
          {
            "name": "EC_HSM",
            "value": "EC-HSM",
            "description": "Elliptic Curve with a private key which is not exportable from the HSM."
          },
          {
            "name": "RSA",
            "value": "RSA",
            "description": "RSA (https://tools.ietf.org/html/rfc3447)."
          },
          {
            "name": "RSA_HSM",
            "value": "RSA-HSM",
            "description": "RSA with a private key which is not exportable from the HSM."
          },
          {
            "name": "oct",
            "value": "oct",
            "description": "Octet sequence (used to represent symmetric keys)."
          },
          {
            "name": "oct_HSM",
            "value": "oct-HSM",
            "description": "Octet sequence with a private key which is not exportable from the HSM."
          }
        ]
      }
    },
    "KeyProperties": {
      "type": "object",
      "description": "Properties of the key pair backing a certificate.",
      "properties": {
        "exportable": {
          "type": "boolean",
          "description": "Indicates if the private key can be exported. Release policy must be provided\nwhen creating the first version of an exportable key."
        },
        "kty": {
          "$ref": "#/definitions/JsonWebKeyType",
          "description": "The type of key pair to be used for the certificate.",
          "x-ms-client-name": "keyType"
        },
        "key_size": {
          "type": "integer",
          "format": "int32",
          "description": "The key size in bits. For example: 2048, 3072, or 4096 for RSA.",
          "x-ms-client-name": "keySize"
        },
        "reuse_key": {
          "type": "boolean",
          "description": "Indicates if the same key pair will be used on certificate renewal.",
          "x-ms-client-name": "reuseKey"
        },
        "crv": {
          "$ref": "#/definitions/JsonWebKeyCurveName",
          "description": "Elliptic curve name. For valid values, see JsonWebKeyCurveName.",
          "x-ms-client-name": "curve"
        }
      }
    },
    "KeyUsageType": {
      "type": "string",
      "description": "Supported usages of a certificate key.",
      "enum": [
        "digitalSignature",
        "nonRepudiation",
        "keyEncipherment",
        "dataEncipherment",
        "keyAgreement",
        "keyCertSign",
        "cRLSign",
        "encipherOnly",
        "decipherOnly"
      ],
      "x-ms-enum": {
        "name": "KeyUsageType",
        "modelAsString": true,
        "values": [
          {
            "name": "digitalSignature",
            "value": "digitalSignature",
            "description": "Indicates that the certificate key can be used as a digital signature."
          },
          {
            "name": "nonRepudiation",
            "value": "nonRepudiation",
            "description": "Indicates that the certificate key can be used for authentication."
          },
          {
            "name": "keyEncipherment",
            "value": "keyEncipherment",
            "description": "Indicates that the certificate key can be used for key encryption."
          },
          {
            "name": "dataEncipherment",
            "value": "dataEncipherment",
            "description": "Indicates that the certificate key can be used for data encryption."
          },
          {
            "name": "keyAgreement",
            "value": "keyAgreement",
            "description": "Indicates that the certificate key can be used to determine key agreement, such as a key created using the Diffie-Hellman key agreement algorithm."
          },
          {
            "name": "keyCertSign",
            "value": "keyCertSign",
            "description": "Indicates that the certificate key can be used to sign certificates."
          },
          {
            "name": "cRLSign",
            "value": "cRLSign",
            "description": "Indicates that the certificate key can be used to sign a certificate revocation list."
          },
          {
            "name": "encipherOnly",
            "value": "encipherOnly",
            "description": "Indicates that the certificate key can be used for encryption only."
          },
          {
            "name": "decipherOnly",
            "value": "decipherOnly",
            "description": "Indicates that the certificate key can be used for decryption only."
          }
        ]
      }
    },
    "KeyVaultError": {
      "type": "object",
      "description": "The key vault error exception.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error",
          "description": "The key vault server error.",
          "readOnly": true
        }
      }
    },
    "LifetimeAction": {
      "type": "object",
      "description": "Action and its trigger that will be performed by Key Vault over the lifetime of\na certificate.",
      "properties": {
        "trigger": {
          "$ref": "#/definitions/Trigger",
          "description": "The condition that will execute the action."
        },
        "action": {
          "$ref": "#/definitions/Action",
          "description": "The action that will be executed."
        }
      }
    },
    "OrganizationDetails": {
      "type": "object",
      "description": "Details of the organization of the certificate issuer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the organization."
        },
        "admin_details": {
          "type": "array",
          "description": "Details of the organization administrator.",
          "items": {
            "$ref": "#/definitions/AdministratorDetails"
          },
          "x-ms-client-name": "adminDetails",
          "x-ms-identifiers": []
        }
      }
    },
    "PagedCertificateIssuerItem": {
      "type": "object",
      "description": "Paged collection of CertificateIssuerItem items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The CertificateIssuerItem items on this page",
          "items": {
            "$ref": "#/definitions/CertificateIssuerItem"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedCertificateItem": {
      "type": "object",
      "description": "Paged collection of CertificateItem items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The CertificateItem items on this page",
          "items": {
            "$ref": "#/definitions/CertificateItem"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDeletedCertificateItem": {
      "type": "object",
      "description": "Paged collection of DeletedCertificateItem items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DeletedCertificateItem items on this page",
          "items": {
            "$ref": "#/definitions/DeletedCertificateItem"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PendingCertificateSigningRequestResult": {
      "type": "object",
      "description": "The pending certificate signing request result.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The pending certificate signing request as Base64 encoded string.",
          "readOnly": true
        }
      }
    },
    "SecretProperties": {
      "type": "object",
      "description": "Properties of the key backing a certificate.",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The media type (MIME type)."
        }
      }
    },
    "SubjectAlternativeNames": {
      "type": "object",
      "description": "The subject alternate names of a X509 object.",
      "properties": {
        "emails": {
          "type": "array",
          "description": "Email addresses.",
          "items": {
            "type": "string"
          }
        },
        "dns_names": {
          "type": "array",
          "description": "Domain names.",
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "dnsNames"
        },
        "upns": {
          "type": "array",
          "description": "User principal names.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Trigger": {
      "type": "object",
      "description": "A condition to be satisfied for an action to be executed.",
      "properties": {
        "lifetime_percentage": {
          "type": "integer",
          "format": "int32",
          "description": "Percentage of lifetime at which to trigger. Value should be between 1 and 99.",
          "minimum": 1,
          "maximum": 99,
          "x-ms-client-name": "lifetimePercentage"
        },
        "days_before_expiry": {
          "type": "integer",
          "format": "int32",
          "description": "Days before expiry to attempt renewal. Value should be between 1 and\nvalidity_in_months multiplied by 27. If validity_in_months is 36, then value\nshould be between 1 and 972 (36 * 27).",
          "x-ms-client-name": "daysBeforeExpiry"
        }
      }
    },
    "X509CertificateProperties": {
      "type": "object",
      "description": "Properties of the X509 component of a certificate.",
      "properties": {
        "subject": {
          "type": "string",
          "description": "The subject name. Should be a valid X509 distinguished Name."
        },
        "ekus": {
          "type": "array",
          "description": "The enhanced key usage.",
          "items": {
            "type": "string"
          }
        },
        "sans": {
          "$ref": "#/definitions/SubjectAlternativeNames",
          "description": "The subject alternative names.",
          "x-ms-client-name": "subjectAlternativeNames"
        },
        "key_usage": {
          "type": "array",
          "description": "Defines how the certificate's key may be used.",
          "items": {
            "$ref": "#/definitions/KeyUsageType"
          },
          "x-ms-client-name": "keyUsage"
        },
        "validity_months": {
          "type": "integer",
          "format": "int32",
          "description": "The duration that the certificate is valid in months.",
          "x-ms-client-name": "validityInMonths"
        }
      }
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    }
  }
}
