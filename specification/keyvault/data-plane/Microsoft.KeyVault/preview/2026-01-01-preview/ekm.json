{
  "swagger": "2.0",
  "info": {
    "title": "KeyVaultClient",
    "version": "2026-01-01-preview",
    "description": "The key Vault client performs cryptographic key operations and vault operations against the Key Vault service.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{vaultBaseUrl}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "vaultBaseUrl",
        "in": "path",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://vault.azure.net/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "https://vault.azure.net/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/ekm": {
      "get": {
        "operationId": "GetEkmConnection",
        "summary": "Gets the EKM connection.",
        "description": "The External Key Manager (EKM) Get operation returns EKM connection. This operation requires ekm/read permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EkmConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-examples": {
          "Get EKM connection": {
            "$ref": "./examples/GetEkmConnection-example.json"
          }
        }
      },
      "patch": {
        "operationId": "UpdateEkmConnection",
        "summary": "Updates the EKM connection.",
        "description": "The External Key Manager (EKM) updates the existing EKM connection. If the EKM connection does not exist, this operation fails. This operation requires ekm/write permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "ekmConnection",
            "in": "body",
            "description": "The ekmConnection to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EkmConnectionUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EkmConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-examples": {
          "Update EKM connection": {
            "$ref": "./examples/UpdateEkmConnection-example.json"
          }
        }
      },
      "delete": {
        "operationId": "DeleteEkmConnection",
        "summary": "Deletes the EKM connection.",
        "description": "The External Key Manager (EKM) deletes the existing EKM connection. If the EKM connection does not already exists, this operation fails. This operation requires ekm/delete permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EkmConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-examples": {
          "Delete EKM connection": {
            "$ref": "./examples/DeleteEkmConnection-example.json"
          }
        }
      }
    },
    "/ekm/certificate": {
      "get": {
        "operationId": "GetEkmCertificate",
        "summary": "Gets the EKM proxy client certificate.",
        "description": "The External Key Manager (EKM) Certificate Get operation returns Proxy client certificate. This operation requires ekm/read permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EkmProxyClientCertificateInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-examples": {
          "Get EKM proxy client certificate": {
            "$ref": "./examples/GetEkmCertificate-example.json"
          }
        }
      }
    },
    "/ekm/check": {
      "post": {
        "operationId": "CheckEkmConnection",
        "summary": "Checks the connectivity and authentication with the EKM proxy.",
        "description": "The External Key Manager (EKM) Check operation checks the connectivity and authentication with the EKM proxy. This operation requires ekm/read permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EkmProxyInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-examples": {
          "Check EKM connection": {
            "$ref": "./examples/CheckEkmConnection-example.json"
          }
        }
      }
    },
    "/ekm/create": {
      "post": {
        "operationId": "CreateEkmConnection",
        "summary": "Creates the EKM connection.",
        "description": "The External Key Manager (EKM) sets up the EKM connection. If the EKM connection already exists, this operation fails. This operation requires ekm/write permission.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "ekmConnection",
            "in": "body",
            "description": "The ekmConnection to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EkmConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EkmConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/KeyVaultError"
            }
          }
        },
        "x-ms-examples": {
          "Create EKM connection": {
            "$ref": "./examples/CreateEkmConnection-example.json"
          }
        }
      }
    }
  },
  "definitions": {
    "EkmConnection": {
      "type": "object",
      "description": "A EkmConnection model object.",
      "properties": {
        "host": {
          "type": "string",
          "description": "EKM proxy FQDN (Fully Qualified Domain Name). Only allowed characters are a-z, A-Z, 0-9, hyphen (-), dot (.), and colon (:)."
        },
        "path_prefix": {
          "type": "string",
          "description": "Optional path prefix for the EKM proxy (if any).",
          "x-ms-client-name": "pathPrefix"
        },
        "server_ca_certificates": {
          "type": "array",
          "description": "The root CA certificate chain that issued the proxy server's certificate. An array of certificates in the certificate chain, each in DER format and base64url encoded.",
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "serverCaCertificates"
        },
        "server_subject_common_name": {
          "type": "string",
          "description": "The subject common name of the server certificate of EKM Proxy.",
          "x-ms-client-name": "serverSubjectCommonName"
        }
      },
      "required": [
        "host",
        "server_ca_certificates"
      ]
    },
    "EkmConnectionUpdate": {
      "type": "object",
      "description": "A EkmConnection model object.",
      "properties": {
        "host": {
          "type": "string",
          "description": "EKM proxy FQDN (Fully Qualified Domain Name). Only allowed characters are a-z, A-Z, 0-9, hyphen (-), dot (.), and colon (:)."
        },
        "path_prefix": {
          "type": "string",
          "description": "Optional path prefix for the EKM proxy (if any).",
          "x-ms-client-name": "pathPrefix"
        },
        "server_ca_certificates": {
          "type": "array",
          "description": "The root CA certificate chain that issued the proxy server's certificate. An array of certificates in the certificate chain, each in DER format and base64url encoded.",
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "serverCaCertificates"
        },
        "server_subject_common_name": {
          "type": "string",
          "description": "The subject common name of the server certificate of EKM Proxy.",
          "x-ms-client-name": "serverSubjectCommonName"
        }
      }
    },
    "EkmProxyClientCertificateInfo": {
      "type": "object",
      "description": "EKM proxy client certificate information.",
      "properties": {
        "ca_certificates": {
          "type": "array",
          "description": "The client root CA certificate chain to authenticate to the EKM proxy. An array of certificates in the certificate chain, each in DER format and base64url encoded.",
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "caCertificates"
        },
        "subject_common_name": {
          "type": "string",
          "description": "The subject common name of the client certificate used to authenticate to the EKM proxy.",
          "x-ms-client-name": "subjectCommonName"
        }
      },
      "required": [
        "ca_certificates",
        "subject_common_name"
      ]
    },
    "EkmProxyInfo": {
      "type": "object",
      "description": "EKM proxy information.",
      "properties": {
        "api_version": {
          "type": "string",
          "description": "The highest version of proxy interface API supported by the EKM Proxy.",
          "x-ms-client-name": "apiVersion"
        },
        "proxy_vendor": {
          "type": "string",
          "description": "The name of the proxy vendor.",
          "x-ms-client-name": "proxyVendor"
        },
        "proxy_name": {
          "type": "string",
          "description": "The name of the proxy product and its version.",
          "x-ms-client-name": "proxyName"
        },
        "ekm_vendor": {
          "type": "string",
          "description": "The name of the EKM vendor.",
          "x-ms-client-name": "ekmVendor"
        },
        "ekm_product": {
          "type": "string",
          "description": "The name of the EKM product and its version.",
          "x-ms-client-name": "ekmProduct"
        }
      },
      "required": [
        "api_version",
        "proxy_vendor",
        "proxy_name",
        "ekm_vendor",
        "ekm_product"
      ]
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "The error message.",
          "readOnly": true
        },
        "innererror": {
          "$ref": "#/definitions/Error",
          "description": "The key vault server error.",
          "readOnly": true,
          "x-ms-client-name": "innerError"
        }
      },
      "x-nullable": true
    },
    "KeyVaultError": {
      "type": "object",
      "description": "The key vault error exception.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error",
          "description": "The key vault server error.",
          "readOnly": true
        }
      }
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    }
  }
}
