{
  "swagger": "2.0",
  "info": {
    "title": "Content Moderator Client",
    "version": "1.0",
    "description": "You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.\r\n\r\nWhen using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB. \r\nText can be at most 1024 characters long. \r\nIf the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.\r\n\r\nThis API is currently available in:\r\n\r\n* West US - westus.api.cognitive.microsoft.com\r\n* East US 2 - eastus2.api.cognitive.microsoft.com\r\n* West Central US - westcentralus.api.cognitive.microsoft.com\r\n* West Europe - westeurope.api.cognitive.microsoft.com\r\n* Southeast Asia - southeastasia.api.cognitive.microsoft.com ."
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{baseUrl}",
    "parameters": [
      {
        "$ref": "#/parameters/baseUrl"
      }
    ]
  },
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "paths": {
    "/contentmoderator/moderate/v1.0/ProcessImage/FindFaces": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_FindFaces",
        "description": "Returns the list of faces found.",
        "parameters": [
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }

        ],
        "consumes": [
          "application/json",
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/bmp",
          "image/tiff"
        ],
        "responses": {
          "200": {
            "description": "The list of faces found.",
            "schema": {
              "$ref": "#/definitions/FoundFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/OCR": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_OCR",
        "description": "Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.",
        "parameters": [
          {
            "$ref": "#/parameters/language"
          },
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/enhanced"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json",
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/bmp",
          "image/tiff"
        ],
        "responses": {
          "200": {
            "description": "The text found and list of candidate text details.",
            "schema": {
              "$ref": "#/definitions/OCR"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }

        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/Evaluate": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_Evaluate",
        "description": "Returns probabilities of the image containing racy or adult content.",
        "parameters": [
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json",
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/bmp",
          "image/tiff"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Evaluate"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/Match": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_Match",
        "description": "Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this</a> API. \r\n\r\nReturns ID and tags of matching image.<br/>\r\n<br/>\r\nNote: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.",
        "parameters": [
          {
            "$ref": "#/parameters/listIdQueryParameter"
          },
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }

        ],
        "consumes": [
          "application/json",
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/bmp",
          "image/tiff"
        ],
        "responses": {
          "200": {
            "description": "Supported values for tags are:\r\n<ul>\r\n<li>101: Nudity</li>\r\n<li>102: Sexual Content</li>\r\n<li>201: Alcohol</li>\r\n<li>202: Tobacco</li>\r\n<li>203: Drugs</li>\r\n<li>301: Child Exploitation</li>\r\n<li>401: Violence</li>\r\n<li>402: Weapons</li>\r\n<li>403: Gore</li>\r\n<li>501: Profanity</li>\r\n<li>502: Vulgarity</li>\r\n</ul>.",
            "schema": {
              "$ref": "#/definitions/MatchResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessText/Screen/": {
      "post": {
        "tags": [
          "TextModeration"
        ],
        "summary": "Detect profanity and match against custom and shared blacklists",
        "description": "Detects profanity in more than 100 languages and match against custom and shared blacklists.",
        "operationId": "TextModeration_ScreenText",

        "parameters": [
          {
            "$ref": "#/parameters/language"
          },
          {
            "$ref": "#/parameters/autocorrect"
          },
          {
            "$ref": "#/parameters/PII"
          },
          {
            "$ref": "#/parameters/listIdQueryParameter"
          },
          {
            "$ref": "#/parameters/classify"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "x-ms-client-name": "textContentType",
            "type": "string",
            "in": "header",
            "enum": [
              "text/plain",
              "text/html",
              "text/xml",
              "text/markdown"
            ]
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "$ref": "#/parameters/textContent"
          }
        ],
        "consumes": [
          "text/plain",
          "text/html",
          "text/xml",
          "text/markdown"
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/Screen"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect Language request": {
            "$ref": "./examples/ScreenTextResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessText/DetectLanguage": {
      "post": {
        "tags": [
          "TextModeration"
        ],
        "operationId": "TextModeration_DetectLanguage",
        "description": "This operation will detect the language of given input content. Returns the <a href=\"http://www-01.sil.org/iso639-3/codes.asp\">ISO 639-3 code</a> for the predominant language comprising the submitted text. Over 110 languages supported.",
        "parameters": [
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "x-ms-client-name": "textContentType",
            "type": "string",
            "in": "header",
            "enum": [
              "text/plain",
              "text/html",
              "text/xml",
              "text/markdown"
            ]
          },
          {
            "$ref": "#/parameters/textContent"
          }
        ],
        "consumes": [
          "text/plain",
          "text/html",
          "text/xml",
          "text/markdown"
        ],
        "responses": {
          "200": {
            "description": "The detected language result.",
            "schema": {
              "$ref": "#/definitions/DetectedLanguage"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect Language request": {
            "$ref": "./examples/DetectLanguageResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/imagelists/{listId}": {
      "get": {
        "tags": [
          "ListManagementImageLists"
        ],
        "operationId": "ListManagementImageLists_GetDetails",
        "description": "Returns the details of the image list with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "$ref": "#/parameters/listId"
          }

        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get List Id Details request": {
            "$ref": "./examples/GetImageListIdDetailsResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "tags": [
          "ListManagementImageLists"
        ],
        "operationId": "ListManagementImageLists_Delete",
        "description": "Deletes image list with the list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete Imagelist request": {
            "$ref": "./examples/DeleteImageListResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "tags": [
          "ListManagementImageLists"
        ],
        "operationId": "ListManagementImageLists_Update",
        "description": "Updates an image list with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/body"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update Imagelist request": {
            "$ref": "./examples/UpdateImageListResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/imagelists": {
      "post": {
        "tags": [
          "ListManagementImageLists"
        ],
        "operationId": "ListManagementImageLists_Create",
        "description": "Creates an image list.",
        "parameters": [
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/body"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create Imagelist request": {
            "$ref": "./examples/CreateImageListResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "get": {
        "tags": [
          "ListManagementImageLists"
        ],
        "operationId": "ListManagementImageLists_GetAllImageLists",
        "description": "Gets all the Image Lists.",
        "parameters": [
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageLists"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get All Imagelists request": {
            "$ref": "./examples/GetImageListsResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/imagelists/{listId}/RefreshIndex": {
      "post": {
        "tags": [
          "ListManagementImageLists"
        ],
        "operationId": "ListManagementImageLists_RefreshIndex",
        "description": "Refreshes the index of the list with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RefreshIndex"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Refresh Image Index request": {
            "$ref": "./examples/RefreshImageIndexResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/termlists/{listId}": {
      "get": {
        "tags": [
          "ListManagementTermLists"
        ],
        "operationId": "ListManagementTermLists_GetDetails",
        "description": "Returns list Id details of the term list with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TermList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get Term ListId Details request": {
            "$ref": "./examples/GetTermListIdDetailsResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "tags": [
          "ListManagementTermLists"
        ],
        "operationId": "ListManagementTermLists_Delete",
        "description": "Deletes term list with the list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete Termlist request": {
            "$ref": "./examples/DeleteTermListResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "tags": [
          "ListManagementTermLists"
        ],
        "operationId": "ListManagementTermLists_Update",
        "description": "Updates an Term List.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/body"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TermList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update Termlist request": {
            "$ref": "./examples/UpdateTermListResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/termlists": {
      "post": {
        "tags": [
          "ListManagementTermLists"
        ],
        "operationId": "ListManagementTermLists_Create",
        "description": "Creates a Term List",
        "parameters": [
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/body"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TermList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create Termlist request": {
            "$ref": "./examples/CreateTermListResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "get": {
        "tags": [
          "ListManagementTermLists"
        ],
        "operationId": "ListManagementTermLists_GetAllTermLists",
        "description": "gets all the Term Lists",
        "parameters": [
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TermLists"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get All Termlists request": {
            "$ref": "./examples/GetTermListsResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/termlists/{listId}/RefreshIndex": {
      "post": {
        "tags": [
          "ListManagementTermLists"
        ],
        "operationId": "ListManagementTermLists_RefreshIndex",
        "description": "Refreshes the index of the list with list Id equal to list ID passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RefreshIndex"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Refresh Term Index request": {
            "$ref": "./examples/RefreshTermIndexResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/imagelists/{listId}/images": {
      "post": {
        "tags": [
          "ListManagementImage"
        ],
        "operationId": "ListManagementImage_AddImage",
        "description": "Add an image to the list with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/label"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }

        ],
        "consumes": [
          "application/json",
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/bmp",
          "image/tiff"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add Image request": {
            "$ref": "./examples/AddImageResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "tags": [
          "ListManagementImage"
        ],
        "operationId": "ListManagementImage_DeleteAllImages",
        "description": "Deletes all images from the list with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete All Images request": {
            "$ref": "./examples/DeleteAllImagesResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "get": {
        "tags": [
          "ListManagementImage"
        ],
        "operationId": "ListManagementImage_GetAllImageIds",
        "description": "Gets all image Ids from the list with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageIds"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get All Image Ids request": {
            "$ref": "./examples/GetAllImageIdsResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/imagelists/{listId}/images/{ImageId}": {
      "delete": {
        "tags": [
          "ListManagementImage"
        ],
        "operationId": "ListManagementImage_DeleteImage",
        "description": "Deletes an image from the list with list Id and image Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/ImageId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete Image request": {
            "$ref": "./examples/DeleteImageResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}": {
      "post": {
        "tags": [
          "ListManagementTerm"
        ],
        "operationId": "ListManagementTerm_AddTerm",
        "description": "Add a term to the term list with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/term"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }

        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {

            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add Term request": {
            "$ref": "./examples/AddTermResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "tags": [
          "ListManagementTerm"
        ],
        "operationId": "ListManagementTerm_DeleteTerm",
        "description": "Deletes a term from the list with list Id equal to the list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/term"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }

        },
        "x-ms-examples": {
          "Delete Term request": {
            "$ref": "./examples/DeleteTermResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/termlists/{listId}/terms": {
      "get": {
        "tags": [
          "ListManagementTerm"
        ],
        "operationId": "ListManagementTerm_GetAllTerms",
        "description": "Gets all terms from the list with list Id equal to the list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The pagination start index.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The max limit.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Terms"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get All Terms request": {
            "$ref": "./examples/GetAllTermsResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "tags": [
          "ListManagementTerm"
        ],
        "operationId": "ListManagementTerm_DeleteAllTerms",
        "description": "Deletes all terms from the list with list Id equal to the list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete AllTerms request": {
            "$ref": "./examples/DeleteAllTermsResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_GetReview",
        "description": "Returns review details for the review Id passed.",
        "parameters": [
          {
            "name": "teamName",
            "in": "path",
            "description": "Your Team Name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "Id of the review.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get Review request": {
            "$ref": "./examples/GetReviewResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_GetJobDetails",
        "description": "Get the Job Details for a Job Id.",
        "parameters": [
          {
            "name": "teamName",
            "in": "path",
            "description": "Your Team Name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "JobId",
            "in": "path",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get Job Details request": {
            "$ref": "./examples/GetJobDetailsResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_CreateReviews",
        "description": "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
        "parameters": [
          {
            "name": "UrlContentType",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/teamName"
          },
          {
            "$ref": "#/parameters/subTeam"
          },
          {
            "name": "createReviewBody",
            "description": "Body for create reviews API",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "description": "Schema of the body.",
              "items": {
                "required": [
                  "Content",
                  "ContentId",
                  "Type"
                ],
                "type": "object",
                "description": "Schema items of the body.",
                "properties": {
                  "Type": {
                    "description": "Type of the content.",
                    "enum": [
                      "Image",
                      "Text"
                    ],
                    "type": "string"
                  },
                  "Content": {
                    "description": "Content to review.",
                    "type": "string"
                  },
                  "ContentId": {
                    "description": "Content Identifier.",
                    "type": "string"
                  },
                  "CallbackEndpoint": {
                    "description": "Optional CallbackEndpoint.",
                    "type": "string"
                  },
                  "Metadata": {
                    "description": "Optional metadata details.",
                    "type": "array",
                    "items": {
                      "required": [
                        "Key",
                        "Value"
                      ],
                      "type": "object",
                      "properties": {
                        "Key": {
                          "description": "Your key parameter.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "Your value parameter.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReviewList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create Review request": {
            "$ref": "./examples/CreateReviewResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]

      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/jobs": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_CreateJob",
        "description": "A job Id will be returned for the content posted on this endpoint. \r\n\r\nOnce the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.\r\n\r\n<h3>CallBack Schemas </h3>\r\n\r\n<p>\r\n<h4>Job Completion CallBack Sample</h4><br/>\r\n\r\n{<br/>\r\n  \"JobId\": \"<Job Id>,<br/>\r\n  \"ReviewId\": \"<Review Id, if the Job resulted in a Review to be created>\",<br/>\r\n  \"WorkFlowId\": \"default\",<br/>\r\n  \"Status\": \"<This will be one of Complete, InProgress, Error>\",<br/>\r\n  \"ContentType\": \"Image\",<br/>\r\n  \"ContentId\": \"<This is the ContentId that was specified on input>\",<br/>\r\n  \"CallBackType\": \"Job\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>\r\n<p>\r\n<h4>Review Completion CallBack Sample</h4><br/>\r\n\r\n{\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
        "parameters": [
          {
            "$ref": "#/parameters/teamName"
          },
          {
            "$ref": "#/parameters/ContentType"
          },
          {
            "$ref": "#/parameters/ContentId"
          },
          {
            "$ref": "#/parameters/WorkflowName"
          },
          {
            "$ref": "#/parameters/CallBackEndpoint"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "x-ms-client-name": "jobContentType",
            "type": "string",
            "in": "header",
            "enum": [
              "application/json",
              "image/jpeg"
            ]
          },
          {
            "name": "Content",
            "description": "Content to evaluate.",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "contentValue"
              ],
              "type": "object",
              "properties": {
                "contentValue": {
                  "description": "Content to evaluate for a job.",
                  "type": "string"
                }
              }
            },
            "x-examples": {
              "application/json": "{\n  \"ContentValue\": \"<Replace with you Image Url>\"\n}"
            }
          }
        ],
        "consumes": [
          "application/json",
          "image/jpeg"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JobId"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create Job request": {
            "$ref": "./examples/CreateJobResource.JSON"
          }
        },
        "produces": [
          "application/json",
          "text/json"
        ]
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_AddVideoFrame",
        "description": "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
        "parameters": [

          {
            "$ref": "#/parameters/teamName"
          },
          {
            "name": "reviewId",
            "description": "Id of the review.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timescale",
            "description": "Timescale of the video you are adding frames to.",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ]

      },
      "get": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_GetVideoFrames",
        "description": "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
        "parameters": [

          {
            "$ref": "#/parameters/teamName"
          },
          {
            "$ref": "#/parameters/reviewId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "startSeed",
            "in": "query",
            "description": "Time stamp of the frame from where you want to start fetching the frames.",
            "type": "integer"
          },
          {
            "name": "noOfRecords",
            "in": "query",
            "description": "Number of frames to fetch.",
            "type": "integer"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Get frames filtered by tags.",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Frames"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get Frames Request": {
            "$ref": "./examples/GetFramesResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]

      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_PublishVideoReview",
        "description": "Publish video review to make it available for review.",
        "parameters": [
          {
            "$ref": "#/parameters/teamName"
          },
          {
            "$ref": "#/parameters/reviewId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "publish video request": {
            "$ref": "./examples/PublishVideoReviewResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult": {
      "put": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_AddVideoTranscriptModerationResult",
        "description": "This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.",
        "parameters": [
          {

            "name": "Content-Type",
            "description": "The content type.",
            "x-ms-client-name": "ContentType",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/teamName"
          },
          {
            "$ref": "#/parameters/reviewId"
          },
          {
            "$ref": "#/parameters/transcriptModerationBody"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Transcript moderation result request": {
            "$ref": "./examples/TranscriptModerationResult.JSON"
          }
        },
        "produces": [
          "application/json"
        ]

      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript": {
      "put": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_AddVideoTranscript",
        "description": "This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.",
        "parameters": [
          {
            "$ref": "#/parameters/teamName"
          },
          {
            "$ref": "#/parameters/reviewId"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "x-ms-client-name": "ContentType",
            "type": "string",
            "in": "header",
            "enum": [
              "text/plain"
            ]
          },
          {
            "$ref": "#/parameters/transcriptFile"
          }
        ],
        "consumes": [
          "text/plain"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add transcript request": {
            "$ref": "./examples/AddVideoTranscriptResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    }

  },
  "x-ms-paths": {
    "/contentmoderator/moderate/v1.0/ProcessImage/FindFaces?overload=stream": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_FindFacesFileInput",
        "description": "Returns the list of faces found.",
        "parameters": [
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
            
          },
          {
            "$ref": "#/parameters/ImageStreamParameter"
          }
        ],
        "consumes": [
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/bmp",
          "image/tiff"
        ],
        "responses": {
          "200": {
            "description": "The list of faces found.",
            "schema": {
              "$ref": "#/definitions/FoundFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/FindFaces?overload=url": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_FindFacesUrlInput",
        "description": "Returns the list of faces found.",
        "parameters": [
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/ImageUrlParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The list of faces found.",
            "schema": {
              "$ref": "#/definitions/FoundFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Find Faces request": {
            "$ref": "./examples/FindFacesResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/OCR?overload=url": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_OCRUrlInput",
        "description": "Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.",
        "parameters": [
          {
            "$ref": "#/parameters/language"
          },
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/enhanced"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/ImageUrlParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The found text and list of candidate text.",
            "schema": {
              "$ref": "#/definitions/OCR"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Image OCR request": {
            "$ref": "./examples/OCRResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/OCR?overload=stream": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_OCRFileInput",
        "description": "Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.",
        "parameters": [
          {
            "$ref": "#/parameters/language"
          },
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/enhanced"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
            
          },
          {
            "$ref": "#/parameters/ImageStreamParameter"
          }
        ],
        "consumes": [
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/bmp",
          "image/tiff"
        ],
        "responses": {
          "200": {
            "description": "The found text and list of candidate text.",
            "schema": {
              "$ref": "#/definitions/OCR"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }

        },
        
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/Evaluate?overload=stream": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_EvaluateFileInput",
        "description": "Returns probabilities of the image containing racy or adult content.",
        "parameters": [
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/ImageStreamParameter"
          }
        ],
        "consumes": [
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/bmp",
          "image/tiff"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Evaluate"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/Evaluate?overload=url": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_EvaluateUrlInput",
        "description": "Returns probabilities of the image containing racy or adult content.",
        "parameters": [
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/ImageUrlParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Evaluate"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Evaluate Image request": {
            "$ref": "./examples/EvaluateImageResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/Match?overload=url": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_MatchUrlInput",
        "description": "Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this</a> API. \r\n\r\nReturns ID and tags of matching image.<br/>\r\n<br/>\r\nNote: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.",
        "parameters": [
          {
            "$ref": "#/parameters/listIdQueryParameter"
          },
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/ImageUrlParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Supported values for tags are:\r\n<ul>\r\n<li>101: Nudity</li>\r\n<li>102: Sexual Content</li>\r\n<li>201: Alcohol</li>\r\n<li>202: Tobacco</li>\r\n<li>203: Drugs</li>\r\n<li>301: Child Exploitation</li>\r\n<li>401: Violence</li>\r\n<li>402: Weapons</li>\r\n<li>403: Gore</li>\r\n<li>501: Profanity</li>\r\n<li>502: Vulgarity</li>\r\n</ul>.",
            "schema": {
              "$ref": "#/definitions/MatchResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Match Image request": {
            "$ref": "./examples/MatchImageResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/Match?overload=stream": {
      "post": {
        "tags": [
          "ImageModeration"
        ],
        "operationId": "ImageModeration_MatchFileInput",
        "description": "Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this</a> API. \r\n\r\nReturns ID and tags of matching image.<br/>\r\n<br/>\r\nNote: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.",
        "parameters": [
          {
            "$ref": "#/parameters/listIdQueryParameter"
          },
          {
            "$ref": "#/parameters/CacheImage"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
            
          },
          {
            "$ref": "#/parameters/ImageStreamParameter"
          }
        ],
        "consumes": [
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/bmp",
          "image/tiff"
        ],
        "responses": {
          "200": {
            "description": "Supported values for tags are:\r\n<ul>\r\n<li>101: Nudity</li>\r\n<li>102: Sexual Content</li>\r\n<li>201: Alcohol</li>\r\n<li>202: Tobacco</li>\r\n<li>203: Drugs</li>\r\n<li>301: Child Exploitation</li>\r\n<li>401: Violence</li>\r\n<li>402: Weapons</li>\r\n<li>403: Gore</li>\r\n<li>501: Profanity</li>\r\n<li>502: Vulgarity</li>\r\n</ul>.",
            "schema": {
              "$ref": "#/definitions/MatchResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/imagelists/{listId}/images?overload=url": {
      "post": {
        "tags": [
          "ListManagementImage"
        ],
        "operationId": "ListManagementImage_AddImageUrlInput",
        "description": "Add an image to the list with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/label"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/ImageUrlParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add Image request": {
            "$ref": "./examples/AddImageResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/lists/v1.0/imagelists/{listId}/images?overload=stream": {
      "post": {
        "tags": [
          "ListManagementImage"
        ],
        "operationId": "ListManagementImage_AddImageFileInput",
        "description": "Add an image to the list with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/listId"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/label"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          },
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
           
          },
          {
            "$ref": "#/parameters/ImageStreamParameter"
          }
        ],
        "consumes": [
          "image/gif",
          "image/jpeg",
          "image/png",
          "image/bmp",
          "image/tiff"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        
        "produces": [
          "application/json"
        ]
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews?overload=video": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_CreateVideoReviews",
        "description": "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
        "parameters": [
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/teamName"
          },
          {
            "$ref": "#/parameters/subTeam"
          },
          {
            "$ref": "#/parameters/CreateVideoReviewsBody"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReviewList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create video review request": {
            "$ref": "./examples/CreateVideoReviewResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]

      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames?overload=url": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_AddVideoFrameUrl",
        "description": "Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.",
        "parameters": [
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "$ref": "#/parameters/teamName"
          },
          {
            "$ref": "#/parameters/reviewId"
          },
          {
            "$ref": "#/parameters/timescale"
          },
          {
            "$ref": "#/parameters/videoFrameBody"
          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add video frame url input request": {
            "$ref": "./examples/AddFrameResource.JSON"
          }
        },
        "produces": [
          "application/json"
        ]

      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames?overload=stream": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "operationId": "Reviews_AddVideoFrameStream",
        "description": "Use this method to add frames for a video review.Timescale: This parameter is a factor which is used to convert the timestamp on a frame into milliseconds. Timescale is provided in the output of the Content Moderator video media processor on the Azure Media Services platform.Timescale in the Video Moderation output is Ticks/Second.",
        "parameters": [
          {
            "name": "Content-Type",
            "description": "The content type.",
            "required": true,
            "type": "string",
            "in": "header"
          },
          {
            "name": "teamName",
            "description": "Your team name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "reviewId",
            "description": "Id of the review.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timescale",
            "description": "Timescale of the video .",
            "in": "query",
            "required": false,
            "type": "integer"
          },

          {
            "name": "frameImageZip",
            "description": "Zip file containing frame images.",
            "in": "formData",
            "required": true,
            "type": "file"

          },
          {
            "name": "frameMetadata",
            "description": "Metadata of the frame.",
            "in": "formData",
            "required": true,
            "type": "string"

          },
          {
            "$ref": "#/parameters/ocpApimSubscriptionKeyParameter"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
       
        "produces": [
          "application/json"
        ]

      }
    }
    
  },
  "definitions": {
    "Frames": {
      "description": "The response for a Get Frames request.",
      "properties": {
        "reviewId": {
          "description": "Id of the review.",
          "type": "string"
        },
        "videoFrames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Frame"
          }
        }
      }
    },
    "Frame": {
      "description": "Video frame property details.",
      "properties": {
        "timestamp": {
          "description": "Timestamp of the frame.",
          "type": "string"
        },
        "frameImage": {
          "description": "Frame image.",
          "type": "string"
        },
        "metadata": {
          "description": "Array of KeyValue.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          }
        },
        "reviewerResultTags": {
          "description": "Reviewer result tags.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
        
      }
    },
    "Screen": {
      "description": "The response for a Screen text request.",
      "properties": {
        "originalText": {
          "description": "The original text.",
          "type": "string"
        },
        "normalizedText": {
          "description": "The normalized text.",
          "type": "string"
        },
        "autoCorrectedText": {
          "description": "The autocorrected text",
          "type": "string"
        },
        "misrepresentation": {
          "description": "The misrepresentation text.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification": {
          "description": "The classification details of the text.",
          "$ref": "#/definitions/Classification"
        },
        "status": {
          "description": "The evaluate status.",
          "$ref": "#/definitions/Status"
        },
        "pii": {
          "description": "Personal Identifier Information details.",
          "$ref": "#/definitions/PII"
        },
        "language": {
          "description": "Language of the input text content.",
          "type": "string"
        },
        "terms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DetectedTerms"
          }
        },
        "trackingId": {
          "description": "Unique Content Moderator transaction Id.",
          "type": "string"
        }
      }
    },
    "Classification": {
      "description": "The classification details of the text.",
      "properties": {
        "adultScore": {
          "description": "The adult score.",
          "type": "number"
        },
        "racyScore": {
          "description": "The racy score.",
          "type": "number"
        },
        "offensiveScore": {
          "description": "The offensive score.",
          "type": "number"
        },
        "reviewRecommended": {
          "description": "The review recommended flag.",
          "type": "boolean"
        }
      }
    },
    "PII": {
      "description": "Personal Identifier Information details.",
      "properties": {
        "email": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Email"
          }

        },
        "ipa": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPA"

          }
        },
        "phone": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Phone"
          }
        },
        "address": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        }
      }
    },
    "Email": {
      "description": "Email Address details.",
      "properties": {
        "detected": {
          "description": "Detected Email Address from the input text content.",
          "type": "string"
        },
        "subType": {
          "description": "Subtype of the detected Email Address.",
          "type": "string"
        },
        "text": {
          "description": "Email Address in the input text content.",
          "type": "string"
        },
        "index": {
          "description": "Index(Location) of the Email address in the input text content.",
          "type": "number"
        }
      }
    },
    "IPA": {
      "description": "IP Address details.",
      "properties": {
        "subType": {
          "description": "Subtype of the detected IP Address.",
          "type": "string"
        },
        "text": {
          "description": "Detected IP Address.",
          "type": "string"
        },
        "index": {
          "description": "Index(Location) of the IP Address in the input text content.",
          "type": "number"
        }
      }
    },
    "Phone": {
      "description": "Phone Property details.",
      "properties": {
        "countryCode": {
          "description": "CountryCode of the detected Phone number.",
          "type": "string"
        },
        "text": {
          "description": "Detected Phone number.",
          "type": "string"
        },
        "index": {
          "description": "Index(Location) of the Phone number in the input text content.",
          "type": "number"
        }
      }
    },
    "Address": {
      "description": "Address details.",
      "properties": {
        "text": {
          "description": "Detected Address.",
          "type": "string"
        },
        "index": {
          "description": "Index(Location) of the Address in the input text content.",
          "type": "number"
        }
      }

    },
    "DetectedTerms": {
      "description": "Detected Terms details.",
      "properties": {
        "index": {
          "description": "Index(Location) of the detected profanity term in the input text content.",
          "type": "number"
        },
        "originalIndex": {
          "description": "Original Index(Location) of the detected profanity term in the input text content.",
          "type": "number"
        },
        "listId": {
          "description": "Matched Terms list Id.",
          "type": "number"
        },
        "term": {
          "description": "Detected profanity term.",
          "type": "string"
        }
      }

    },
    "FoundFaces": {
      "description": "Request object the contains found faces.",
      "properties": {
        "status": {
          "description": "The evaluate status",
          "$ref": "#/definitions/Status"
        },
        "trackingId": {
          "description": "The tracking id.",
          "type": "string"
        },
        "cacheId": {
          "description": "The cache id.",
          "type": "string"
        },
        "result": {
          "description": "True if result was found.",
          "type": "boolean"
        },
        "count": {
          "description": "Number of faces found.",
          "type": "integer"
        },
        "advancedInfo": {
          "description": "The advanced info.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          }
        },
        "faces": {
          "description": "The list of faces.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Face"
          }
        }
      }
    },
    "Face": {
      "description": "Coordinates to the found face.",
      "properties": {
        "bottom": {
          "description": "The bottom coordinate.",
          "type": "integer"
        },
        "left": {
          "description": "The left coordinate.",
          "type": "integer"
        },
        "right": {
          "description": "The right coordinate.",
          "type": "integer"
        },
        "top": {
          "description": "The top coordinate.",
          "type": "integer"
        }
      }
    },
    "OCR": {
      "description": "Contains the text found in image for the language specified.",
      "properties": {
        "status": {
          "description": "The evaluate status",
          "$ref": "#/definitions/Status"
        },
        "metadata": {
          "description": "Array of KeyValue.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          }
        },
        "trackingId": {
          "description": "The tracking id.",
          "type": "string"
        },
        "cacheId": {
          "description": "The cache id.",
          "type": "string"
        },
        "language": {
          "description": "The ISO 639-3 code.",
          "type": "string"
        },
        "text": {
          "description": "The found text.",
          "type": "string"
        },
        "candidates": {
          "description": "The list of candidate text.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Candidate"
          }
        }
      }
    },
    "KeyValuePair": {
      "description": "The key value pair object properties.",
      "properties": {
        "key": {
          "description": "The key parameter.",
          "type": "string"
        },
        "value": {
          "description": "The value parameter.",
          "type": "string"
        }
      }
    },
    "Candidate": {
      "description": "OCR candidate text.",
      "properties": {
        "text": {
          "description": "The text found.",
          "type": "string"
        },
        "confidence": {
          "description": "The confidence level.",
          "type": "number"
        }
      }
    },
    "Evaluate": {
      "description": "Evaluate response object.",
      "properties": {
        "cacheID": {
          "description": "The cache id.",
          "type": "string"
        },
        "result": {
          "description": "Evaluate result.",
          "type": "boolean"
        },
        "trackingId": {
          "description": "The tracking id.",
          "type": "string"
        },
        "adultClassificationScore": {
          "description": "The adult classification score.",
          "type": "number"
        },
        "isImageAdultClassified": {
          "description": "Indicates if an image is classified as adult.",
          "type": "boolean"
        },
        "racyClassificationScore": {
          "description": "The racy classication score.",
          "type": "number"
        },
        "isImageRacyClassified": {
          "description": "Indicates if the image is classified as racy.",
          "type": "boolean"
        },
        "advancedInfo": {
          "description": "The advanced info.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          }
        },
        "status": {
          "description": "The evaluate status",
          "$ref": "#/definitions/Status"
        }
      }
    },
    "MatchResponse": {
      "description": "The response for a Match request.",
      "properties": {
        "trackingId": {
          "description": "The tracking id.",
          "type": "string"
        },
        "cacheID": {
          "description": "The cache id.",
          "type": "string"
        },
        "isMatch": {
          "description": "Indicates if there is a match.",
          "type": "boolean"
        },
        "matches": {
          "description": "The match details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Match"
          }
        },
        "status": {
          "description": "The evaluate status",
          "$ref": "#/definitions/Status"
        }
      }
    },
    "Match": {
      "description": "The match details.",
      "properties": {
        "score": {
          "description": "Confidence score of the image match.",
          "type": "number"
        },
        "matchId": {
          "description": "The match id.",
          "type": "number"
        },
        "source": {
          "description": "The source.",
          "type": "string"
        },
        "tags": {
          "description": "The tags for match details.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "label": {
          "description": "The label.",
          "type": "string"
        }
      }
    },
    "Tag": {
      "description": "Tag details.",
      "properties": {
        "key": {
          "description": "The key parameter.",
          "type": "string"
        },
        "value": {
          "description": "The value parameter.",
          "type": "string"
        }
      }
    },
    "DetectedLanguage": {
      "description": "Detect language result.",
      "properties": {
        "detectedLanguage": {
          "description": "The detected language.",
          "type": "string"
        },
        "status": {
          "description": "The detect language status",
          "$ref": "#/definitions/Status"
        },
        "trackingId": {
          "description": "The tracking id.",
          "type": "string"
        }
      }
    },
    "ImageList": {
      "description": "Image List Properties.",
      "properties": {
        "id": {
          "description": "Image List Id.",
          "type": "number"
        },
        "name": {
          "description": "Image List Name.",
          "type": "string"
        },
        "description": {
          "description": "Description for image list.",
          "type": "string"
        },
        "metadata": {
          "description": "Image List Metadata.",
          "type": "object",

          "properties": {
            "key One": {
              "description": "Optional Key value pair to describe your list.",
              "type": "string"
            },
            "key Two": {
              "description": "Optional Key value pair to describe your list.",
              "type": "string"
            }
          }

        }
      }
    },
    "TermList": {
      "description": "Term List  Properties.",
      "properties": {
        "id": {
          "description": "Term list Id.",
          "type": "number"
        },
        "name": {
          "description": "Term list name.",
          "type": "string"
        },
        "description": {
          "description": "Description for term list.",
          "type": "string"
        },
        "metadata": {
          "description": "Term list metadata.",
          "type": "object",
          "properties": {
            "key One": {
              "description": "Optional Key value pair to describe your list.",
              "type": "string"
            },
            "key Two": {
              "description": "Optional Key value pair to describe your list.",
              "type": "string"
            }
          }
        }
      }
    },
    "ImageLists": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ImageList"
      }
    },
    "TermLists": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TermList"
      }
    },
    "RefreshIndex": {
      "description": "Refresh Index Response.",
      "properties": {
        "contentSourceId": {
          "description": "Content source Id.",
          "type": "string"
        },
        "isUpdateSuccess": {
          "description": "Update success status.",
          "type": "boolean"
        },
        "advancedInfo": {
          "description": "Advanced info list.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key One": {
                "description": "Key parameter to describe advanced info.",
                "type": "string"
              },
              "key Two": {
                "description": "Key parameter to describe advanced info.",
                "type": "string"
              }
            }
          }
        },
        "status": {
          "description": "Refresh index status.",
          "$ref": "#/definitions/Status"
        },
        "trackingId": {
          "description": "Tracking Id.",
          "type": "string"
        }
      }
    },
    "Image": {
      "description": "Image Properties.",
      "properties": {

        "contentId": {
          "description": "Content Id.",
          "type": "string"
        },
        "additionalInfo": {
          "description": "Advanced info list.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "description": "Key parameter.",
                "type": "string"
              },
              "value": {
                "description": "Value parameter.",
                "type": "string"
              }
            }
          }
        },
        "status": {
          "description": "Status details.",
          "$ref": "#/definitions/Status"
        },
        "trackingId": {
          "description": "Tracking Id.",
          "type": "string"
        }
      }

    },
    "Status": {
      "description": "Status properties.",
      "properties": {
        "code": {
          "description": "Status code.",
          "type": "number"
        },
        "description": {
          "description": "Status description.",
          "type": "string"
        },
        "exception": {
          "description": "Exception status.",
          "type": "string"
        }
      }
    },
    "ImageIds": {
      "description": "Image Id properties.",
      "properties": {
        "contentSource": {
          "description": "Source of the content.",
          "type": "string"
        },
        "contentIds": {
          "description": "Id of the contents.",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "status": {
          "description": "Get Image status.",
          "type": "object",
          "$ref": "#/definitions/Status"
        },
        "trackingId": {
          "description": "Tracking Id.",
          "type": "string"
        }
      }
    },
    "Terms": {
      "description": "Terms properties.",
      "properties": {
        "data": {
          "description": "Term data details.",
          "$ref": "#/definitions/TermsData"
        },
        "paging": {
          "description": "Paging details.",
          "properties": {
            "Total": {
              "description": "Total details.",
              "type": "number"
            },
            "Limit": {
              "description": "Limit details.",
              "type": "number"
            },
            "Offset": {
              "description": "Offset details.",
              "type": "number"
            },
            "Returned": {
              "description": "Returned text details.",
              "type": "number"
            }
          }
        }
      }
    },
    "TermsData": {
      "description": "All term Id response properties.",
      "properties": {
        "language": {
          "description": "Language of the terms.",
          "type": "string"
        },
        "terms": {
          "description": "List of terms.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/termsInList"
          }
        },
        "status": {
          "description": "Term Status.",
          "type": "object",
          "$ref": "#/definitions/Status"
        },
        "trackingId": {
          "description": "Tracking Id.",
          "type": "string"
        }
      }
    },
    "termsInList": {
      "description": "Terms in list Id passed.",
      "properties": {
        "term": {
          "description": "Added term details.",
          "type": "string"
        }
      }
    },
    "Review": {
      "description": "The Review object.",
      "properties": {
        "reviewId": {
          "description": "Id of the review.",
          "type": "string"
        },
        "subTeam": {
          "description": "Name of the subteam.",
          "type": "string"
        },
        "status": {
          "description": "The status string (<Pending, Complete>).",
          "type": "string"
        },
        "reviewerResultTags": {
          "description": "Array of KeyValue with Reviewer set Tags.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          }
        },
        "createdBy": {
          "description": "The reviewer name.",
          "type": "string"
        },
        "metadata": {
          "description": "Array of KeyValue.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          }
        },
        "type": {
          "description": "The type of content.",
          "type": "string"
        },
        "content": {
          "description": "The content value.",
          "type": "string"
        },
        "contentId": {
          "description": "Id of the content.",
          "type": "string"
        },
        "callbackEndpoint": {
          "description": "The callback endpoint.",
          "type": "string"
        }
      }
    },
    "Job": {
      "description": "The Job object.",
      "properties": {
        "id": {
          "description": "The job id.",
          "type": "string"
        },
        "teamName": {
          "description": "The team name associated with the job.",
          "type": "string"
        },
        "status": {
          "description": "The status string (<Pending, Failed, Completed>).",
          "type": "string"
        },
        "workflowId": {
          "description": "The Id of the workflow.",
          "type": "string"
        },
        "type": {
          "description": "Type of the content.",
          "type": "string"
        },
        "callBackEndpoint": {
          "description": "The callback endpoint.",
          "type": "string"
        },
        "reviewId": {
          "description": "Review Id if one is created.",
          "type": "string"
        },
        "resultMetaData": {
          "description": "Array of KeyValue pairs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          }
        },
        "jobExecutionReport": {
          "description": "Job execution report- Array of KeyValue pairs object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/jobExecutionReportDetails"
          }
        }
      }
    },
    "jobExecutionReportDetails": {
      "description": "Job Execution Report Values.",
      "properties": {
        "ts": {
          "description": "Time details.",
          "type": "string"
        },
        "msg": {
          "description": "Message details.",
          "type": "string"
        }
      }
    },
    "ReviewList": {
      "description": "The list of review ids.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "JobListResult": {
      "description": "The list of job ids.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The job id."
        }
      }
    },
    "JobId": {
      "properties": {
        "jobId": {
          "description": "Id of the created job.",
          "type": "string"
        }
      }
    },
    "APIError": {
      "type": "object",
      "description": "Error information returned by the API",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "Error body.",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "timescale": {
      "name": "timescale",
      "description": "Timescale of the video.",
      "in": "query",
      "required": false,
      "type": "integer",
      "x-ms-parameter-location": "method"

    },
    "CallBackEndpoint": {
      "name": "CallBackEndpoint",
      "in": "query",
      "description": "Callback endpoint for posting the create job result.",
      "type": "string",
      "x-ms-parameter-location": "method"

    },
    "WorkflowName": {
      "name": "WorkflowName",
      "in": "query",
      "description": "Workflow Name that you want to invoke.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ContentType": {
      "name": "ContentType",
      "in": "query",
      "description": "Image, Text or Video.",
      "required": true,
      "type": "string",
      "enum": [
        "Image",
        "Text",
        "Video"
      ],
      "x-ms-parameter-location": "method"
    },
    "ContentId": {
      "name": "ContentId",
      "in": "query",
      "description": "Id/Name to identify the content submitted.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "subTeam": {
      "name": "subTeam",
      "description": "SubTeam of your team, you want to assign the created review to.",
      "in": "query",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "transcriptFile": {
      "name": "VTT file",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "format": "file"
      },
      "description": "Transcript file of the video.",
      "x-ms-parameter-location": "method"
    },
    "teamName": {
      "name": "teamName",
      "description": "Your team name.",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "reviewId": {
      "name": "reviewId",
      "description": "Id of the review.",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "CacheImage": {
      "name": "CacheImage",
      "in": "query",
      "description": "Whether to retain the submitted image for future use; defaults to false if omitted.",
      "type": "boolean",
      "x-ms-parameter-location": "method"
    },
    "enhanced": {
      "name": "enhanced",
      "in": "query",
      "description": "When set to True, the image goes through additional processing to come with additional candidates.\n\nimage/tiff is not supported when enhanced is set to true\n\nNote: This impacts the response time.",
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "ImageId": {
      "name": "ImageId",
      "in": "path",
      "description": "Id of the image.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "listIdQueryParameter": {
      "name": "listId",
      "in": "query",
      "description": "The list Id.",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "autocorrect": {
      "name": "autocorrect",
      "in": "query",
      "required": false,
      "description": "Autocorrect text.",
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "PII": {
      "name": "PII",
      "in": "query",
      "description": "Detect personal identifiable information.",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "classify": {
      "name": "classify",
      "description": "Classify input.",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "textContent": {
      "name": "Text Content",
      "description": "Content to screen.",
      "in": "body",
      "required": true,
      "schema": {
        "format": "binary",
        "type": "string"
      },
      "x-ms-parameter-location": "method"
    },
    "term": {
      "name": "term",
      "in": "path",
      "description": "Term to be deleted",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "label": {
      "name": "label",
      "in": "query",
      "description": "The image label.",
      "type": "string",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "language": {
      "name": "language",
      "in": "query",
      "description": "Language of the terms.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "transcriptModerationBody": {
      "name": "transcriptModerationBody",
      "description": "Body for add video transcript moderation result API",
      "in": "body",
      "required": true,
      "schema": {
        "type": "array",
        "description": "Schema of the body.",
        "items": {
          "required": [
            "Timestamp",
            "Terms"
          ],
          "type": "object",
          "description": "Schema items of the body.",
          "properties": {
            "Timestamp": {
              "description": "Timestamp of the image.",
              "type": "string"
            },
            "Terms": {
              "description": "Optional metadata details.",
              "type": "array",
              "items": {
                "required": [
                  "Index",
                  "Term"
                ],
                "type": "object",
                "properties": {
                  "Index": {
                    "description": "Index of the word",
                    "type": "integer"
                  },
                  "Term": {
                    "description": "Detected word.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-ms-parameter-location": "method"
    },
    "CreateVideoReviewsBody": {
      "name": "CreateVideoReviewsBody",
      "description": "Body for create reviews API",
      "in": "body",
      "required": true,
      "schema": {
        "type": "array",
        "description": "Schema of the body.",
        "items": {
          "required": [
            "Content",
            "ContentId",
            "Type",
            "Status"
          ],
          "type": "object",
          "description": "Schema items of the body.",
          "properties": {
            "VideoFrames": {
              "description": "Optional metadata details.",
              "type": "array",
              "items": {
                "required": [
                  "Id",
                  "Timestamp",
                  "FrameImage"

                ],
                "type": "object",
                "properties": {
                  "Id": {
                    "description": "Id of the frame.",
                    "type": "string"
                  },
                  "Timestamp": {
                    "description": "Timestamp of the frame.",
                    "type": "integer"
                  },
                  "FrameImage": {
                    "description": "Frame image Url.",
                    "type": "string"
                  },
                  "ReviewerResultTags": {
                    "type": "array",
                    "items": {
                      "required": [
                        "Key",
                        "Value"
                      ],
                      "type": "object",
                      "properties": {
                        "Key": {
                          "description": "Your key parameter.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "Your value parameter.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "Metadata": {
                    "description": "Optional metadata details.",
                    "type": "array",
                    "items": {
                      "required": [
                        "Key",
                        "Value"
                      ],
                      "type": "object",
                      "properties": {
                        "Key": {
                          "description": "Your key parameter.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "Your value parameter.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }

            },
            "Metadata": {
              "description": "Optional metadata details.",
              "type": "array",
              "items": {
                "required": [
                  "Key",
                  "Value"
                ],
                "type": "object",
                "properties": {
                  "Key": {
                    "description": "Your key parameter.",
                    "type": "string"
                  },
                  "Value": {
                    "description": "Your value parameter.",
                    "type": "string"
                  }
                }
              }
            },
            "Type": {
              "description": "Type of the content.",
              "enum": [
                "Video"
              ],
              "type": "string"
            },
            "Content": {
              "description": "Video content url to review.",
              "type": "string"
            },
            "ContentId": {
              "description": "Content Identifier.",
              "type": "string"
            },
            "Status": {
              "description": "Status of the video(Complete,Unpublished,Pending)",
              "type": "string",
              "enum": [
                "Complete",
                "Unpublished",
                "Pending"
              ]
            },
            "Timescale": {
              "description": "Timescale of the video.",
              "type": "integer"
            },
            "CallbackEndpoint": {
              "description": "Optional CallbackEndpoint.",
              "type": "string"
            }


          }
        }
      },
      "x-ms-parameter-location": "method"
    },
    "body": {
      "name": "body",
      "in": "body",
      "description": "Schema of the body.",
      "required": true,
      "schema": {
        "type": "object",

        "properties": {

          "name": {
            "description": "Name of the list.",
            "type": "string"
          },
          "description": {
            "description": "Description of the list.",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata of the list.",
            "type": "object",

            "properties": {
              "key One": {
                "description": "Optional key value pair to describe your list.",
                "type": "string"
              },
              "key Two": {
                "description": "Optional key value pair to describe your list.",
                "type": "string"
              }
            }

          }
        }

      },
      "x-ms-parameter-location": "method"
    },
    "tag": {
      "name": "tag",
      "in": "query",
      "description": "Tag for the image.",
      "type": "integer",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "listId": {
      "name": "listId",
      "in": "path",
      "description": "List Id of the image list.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"

    },
    "ImageUrlParameter": {
      "name": "ImageUrl",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "properties": {
          "dataRepresentation": {
            "type": "string",
            "default": "URL"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "x-ms-parameter-location": "method",
      "description": "The image url."
    },
    "videoFrameBody": {
      "name": "videoFrameBody",
      "description": "Body for add video frames API",
      "in": "body",
      "required": true,
      "schema": {
        "type": "array",
        "description": "Schema of the body.",
        "items": {
          "required": [
            "Timestamp",
            "frameImage"
          ],
          "type": "object",
          "description": "Schema items of the body.",
          "properties": {
            "Timestamp": {
              "description": "Timestamp of the frame.",
              "type": "string"
            },
            "frameImage": {
              "description": "Content to review.",
              "type": "string"
            },
            "ReviewerResultTags": {
              "type": "array",
              "items": {
                "required": [
                  "Key",
                  "Value"
                ],
                "type": "object",
                "properties": {
                  "Key": {
                    "description": "Your key parameter.",
                    "type": "string"
                  },
                  "Value": {
                    "description": "Your value parameter.",
                    "type": "string"
                  }
                }
              }
            },
            "Metadata": {
              "description": "Optional metadata details.",
              "type": "array",
              "items": {
                "required": [
                  "Key",
                  "Value"
                ],
                "type": "object",
                "properties": {
                  "Key": {
                    "description": "Your key parameter.",
                    "type": "string"
                  },
                  "Value": {
                    "description": "Your value parameter.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-ms-parameter-location": "method"
    },
    "ImageStreamParameter": {
      "name": "ImageStream",
      "required": true,
      "in": "body",
      "schema": {
        "type": "object",
        "format": "file"
      },
      "description": "The image file.",
      "x-ms-parameter-location": "method"
    },
    "ocpApimSubscriptionKeyParameter": {
      "name": "Ocp-Apim-Subscription-Key",
      "description": "The subscription key in header",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "header"
    },
    "baseUrl": {
      "name": "baseUrl",
      "description": "Supported Azure regions for Content Moderator endpoints",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true,
      "x-ms-enum": {
        "name": "azureRegionBaseUrl",
        "modelAsString": true
      },
      "enum": [
        "westus.api.cognitive.microsoft.com",
        "westus2.api.cognitive.microsoft.com",
        "eastus.api.cognitive.microsoft.com",
        "eastus2.api.cognitive.microsoft.com",
        "westcentralus.api.cognitive.microsoft.com",
        "southcentralus.api.cognitive.microsoft.com",
        "westeurope.api.cognitive.microsoft.com",
        "northeurope.api.cognitive.microsoft.com",
        "southeastasia.api.cognitive.microsoft.com",
        "eastasia.api.cognitive.microsoft.com",
        "australiaeast.api.cognitive.microsoft.com",
        "brazilsouth.api.cognitive.microsoft.com",
        "contentmoderatortest.azure-api.net"
      ]
    }

  }
} 