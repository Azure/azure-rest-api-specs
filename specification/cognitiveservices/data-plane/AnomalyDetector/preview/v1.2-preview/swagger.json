{
  "swagger": "2.0",
  "basePath": "/",
  "paths": {
    "/multivariate/models": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "List Multivariate Models",
        "operationId": "get_model_train_or_list_api",
        "parameters": [
          {
            "type": "int",
            "default": 0,
            "name": "$skip",
            "in": "query"
          },
          {
            "type": "int",
            "default": 10,
            "name": "$top",
            "in": "query"
          }
        ],
        "tags": [
          "MultivariateAnomalyDetection"
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "headers": {
              "Location": {
                "description": "{endpoint}/anomalydetector/multivariate/v1.0/models/{modelId}",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "operationId": "TrainMultivariateModelAsync",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ModelInfo"
            }
          }
        ],
        "tags": [
          "MultivariateAnomalyDetection"
        ]
      }
    },
    "/multivariate/models/{model_id}": {
      "parameters": [
        {
          "name": "model_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "operationId": "GetMultivariateModel",
        "tags": [
          "MultivariateAnomalyDetection"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "description": "delete model",
        "operationId": "DeleteMultivariateModel",
        "tags": [
          "MultivariateAnomalyDetection"
        ]
      }
    },
    "/multivariate/models/{model_id}/detect": {
      "parameters": [
        {
          "name": "model_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "headers": {
              "Location": {
                "description": "{endpoint}/anomalydetector/v1.0-preview/results/{result_id}",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "operationId": "DetectAnomaly",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DetectionRequest"
            }
          }
        ],
        "tags": [
          "MultivariateAnomalyDetection"
        ]
      }
    },
    "/multivariate/models/{model_id}/export": {
      "parameters": [
        {
          "name": "model_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Export a model package successfully.",
            "headers": {
              "content-type": {
                "description": "application/zip",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Export Multivariate Anomaly Detection Model as Zip file",
        "description": "Export multivariate anomaly detection model based on modelId",
        "operationId": "ExportModel",
        "produces": [
          "application/zip"
        ],
        "tags": [
          "MultivariateAnomalyDetection"
        ]
      }
    },
    "/multivariate/models/{model_id}/last/detect": {
      "parameters": [
        {
          "name": "model_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LastDetectionResult"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "operationId": "LastDetectAnomaly",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LastDetectionRequest"
            }
          }
        ],
        "tags": [
          "MultivariateAnomalyDetection"
        ]
      }
    },
    "/multivariate/ping": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "operationId": "get_ping",
        "tags": [
          "MultivariateAnomalyDetection"
        ]
      }
    },
    "/multivariate/results/{result_id}": {
      "parameters": [
        {
          "name": "result_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Get Multivariate Anomaly Detection Result by Result Id.",
            "schema": {
              "$ref": "#/definitions/DetectionResult"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get Multivariate Anomaly Detection Result",
        "description": "Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api",
        "operationId": "GetDetectionResult",
        "tags": [
          "MultivariateAnomalyDetection"
        ]
      }
    }
  },
  "info": {
    "title": "Multivariate Anomaly Detection API",
    "version": "1.0-preview",
    "description": "Multivariate Time-Series Anomaly Detection API"
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "in": "header",
      "name": "apim-subscription-id"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    }
  ],
  "tags": [
    {
      "name": "MultivariateAnomalyDetection"
    }
  ],
  "definitions": {
    "ModelInfo": {
      "required": [
        "endTime",
        "source",
        "startTime"
      ],
      "properties": {
        "slidingWindow": {
          "type": "integer",
          "description": "An optional field, indicating how many previous points will be used to compute the anomaly score of the subsequent point.",
          "example": 20
        },
        "alignPolicy": {
          "description": "An optional field, indicating the manner to align multiple variables.",
          "allOf": [
            {
              "$ref": "#/definitions/AlignPolicy"
            }
          ]
        },
        "source": {
          "type": "string",
          "description": "Source link to the input variables. Each variable should be a csv file with two columns, `timestamp` and `value`. By default, the file name of the variable will be used as its variable name.",
          "example": "https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.zip?sp=rl&st=2020-12-04T06:03:47Z&se=2022-12-05T06:03:00Z&sv=2019-12-12&sr=b&sig=AZTbvZ7fcp3MdqGY%2FvGHJXJjUgjS4DneCGl7U5omq5c%3D "
        },
        "startTime": {
          "type": "string",
          "description": "A required field, indicating the start time of training data. Should be date-time.",
          "example": "2019-04-01T00:00:00Z"
        },
        "endTime": {
          "type": "string",
          "description": "A required field, indicating the end time of training data. Should be date-time.",
          "example": "2019-04-02T00:00:00Z"
        },
        "displayName": {
          "type": "string",
          "description": "An optional field. The name of the model whose maximum length is 24.",
          "example": "DevOps-MultiAD",
          "maxLength": 24
        },
        "status": {
          "type": "string",
          "description": "Model status. One of CREATED, RUNNING, READY, and FAILED.",
          "example": "CREATED",
          "enum": [
            "CREATED",
            "RUNNING",
            "READY",
            "DELETED",
            "FAILED"
          ]
        },
        "errors": {
          "type": "array",
          "description": "Error messages when failed to create a model.",
          "items": {
            "$ref": "#/definitions/ErrorResponse"
          }
        },
        "diagnosticsInfo": {
          "description": "Diagnostics Information for inspecting model/variable states.",
          "allOf": [
            {
              "$ref": "#/definitions/DiagnosticsInfo"
            }
          ]
        }
      },
      "type": "object"
    },
    "AlignPolicy": {
      "properties": {
        "alignMode": {
          "type": "string",
          "description": "An optional field, indicating how we align different variables to the same time-range. Either Inner or Outer. ",
          "example": "Outer",
          "enum": [
            "Inner",
            "Outer"
          ]
        },
        "fillNAMethod": {
          "type": "string",
          "description": "An optional field, indicating how missing values will be filled. One of Previous, Subsequent, Linear, Zero, Fix, and NotFill. Cannot be set to NotFill, when the alignMode is Outer.",
          "example": "Linear",
          "enum": [
            "Previous",
            "Subsequent",
            "Linear",
            "Zero",
            "Fixed",
            "NotFill"
          ]
        },
        "paddingValue": {
          "type": "number",
          "description": "An optional field. Required when fillNAMethod is Fix."
        }
      },
      "type": "object"
    },
    "ErrorResponse": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The message explaining the error reported by the service."
        }
      },
      "type": "object"
    },
    "DiagnosticsInfo": {
      "properties": {
        "modelState": {
          "$ref": "#/definitions/ModelState"
        },
        "variableStates": {
          "type": "array",
          "example": [
            {
              "variable": "ad_input",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "ad_ontimer_output",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "ad_output",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "ad_series_init",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "cpu",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "data_in_speed",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "data_out_speed",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "flink_last_ckpt_duration",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "ingestion",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            }
          ],
          "items": {
            "$ref": "#/definitions/VariableState"
          }
        }
      },
      "type": "object"
    },
    "ModelState": {
      "properties": {
        "epochIds": {
          "type": "array",
          "description": "Epoch id",
          "example": [
            10,
            20,
            30,
            40,
            50,
            60,
            70,
            80,
            90,
            100
          ],
          "items": {
            "type": "integer"
          }
        },
        "trainLosses": {
          "type": "array",
          "example": [
            0.6291328072547913,
            0.1671326905488968,
            0.12354248017072678,
            0.102596640586853,
            0.0958492755889892,
            0.09069952368736267,
            0.0868601649999618,
            0.0860302299261093,
            0.08287354558706284,
            0.0823553800582885
          ],
          "items": {
            "type": "number"
          }
        },
        "validationLosses": {
          "type": "array",
          "example": [
            0.9573427438735962,
            0.3182229995727539,
            0.3402646481990814,
            0.2765348851680755,
            0.2574014365673065,
            0.269286036491394,
            0.2637230455875397,
            0.2590833008289337,
            0.2597166895866394,
            0.2597350180149078
          ],
          "items": {
            "type": "number"
          }
        },
        "latenciesInSeconds": {
          "type": "array",
          "example": [
            0.3398594856262207,
            0.3659665584564209,
            0.3736064434051513,
            0.3513407707214355,
            0.3370304107666015,
            0.3187627792358398,
            0.3283309936523437,
            0.3503587245941162,
            0.3080024719238281,
            0.3327946662902832
          ],
          "items": {
            "type": "number"
          }
        }
      },
      "type": "object"
    },
    "VariableState": {
      "properties": {
        "variable": {
          "type": "string",
          "description": "Variable name."
        },
        "filledNARatio": {
          "type": "number",
          "description": "Proportion of NaN values filled of the variable.",
          "minimum": 0,
          "maximum": 1
        },
        "effectiveCount": {
          "type": "integer",
          "description": "Number of effective points counted."
        },
        "startTime": {
          "type": "string",
          "description": "Start time of the variable."
        },
        "endTime": {
          "type": "string",
          "description": "End time of the variable."
        },
        "errors": {
          "type": "array",
          "description": "Error messages when failed to parse the variable.",
          "items": {
            "$ref": "#/definitions/ErrorResponse"
          }
        }
      },
      "type": "object"
    },
    "ModelList": {
      "required": [
        "currentCount",
        "maxCount",
        "models"
      ],
      "properties": {
        "models": {
          "type": "array",
          "description": "List of models",
          "items": {
            "$ref": "#/definitions/ModelSnapshot"
          }
        },
        "currentCount": {
          "type": "integer",
          "description": "Current count of trained multivariate models.",
          "example": 10
        },
        "maxCount": {
          "type": "integer",
          "description": "Max number of models that can be trained for this subscription.",
          "example": 20
        },
        "nextLink": {
          "type": "string",
          "description": "The link to fetch more models."
        }
      },
      "type": "object"
    },
    "ModelSnapshot": {
      "required": [
        "createdTime",
        "lastUpdatedTime",
        "modelId",
        "status",
        "variablesCount"
      ],
      "properties": {
        "modelId": {
          "type": "string",
          "description": "Model identifier.",
          "example": "45aad126-aafd-11ea-b8fb-d89ef3400c5f"
        },
        "createdTime": {
          "type": "string",
          "description": "Date and time (UTC) when the model was created.",
          "example": "2020-06-30T00:00:00Z"
        },
        "lastUpdatedTime": {
          "type": "string",
          "description": "Date and time (UTC) when the model was last updated.",
          "example": "2020-06-30T00:00:00Z"
        },
        "status": {
          "type": "string",
          "example": "CREATED",
          "enum": [
            "CREATED",
            "RUNNING",
            "READY",
            "DELETED",
            "FAILED"
          ]
        },
        "displayName": {
          "type": "string",
          "example": "DevOps-Test"
        },
        "variablesCount": {
          "type": "integer",
          "description": "Total number of variables.",
          "example": 18
        }
      },
      "type": "object"
    },
    "Model": {
      "required": [
        "createdTime",
        "lastUpdatedTime",
        "modelId"
      ],
      "properties": {
        "modelId": {
          "type": "string",
          "description": "Model identifier",
          "example": "45aad126-aafd-11ea-b8fb-d89ef3400c5f"
        },
        "createdTime": {
          "type": "string",
          "description": "Date and time (UTC) when the model was created.",
          "example": "2020-06-30T00:00:00Z"
        },
        "lastUpdatedTime": {
          "type": "string",
          "description": "Date and time (UTC) when the model was last updated.",
          "example": "2020-06-30T00:00:00Z"
        },
        "modelInfo": {
          "description": "Training Status of the model.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelInfo"
            }
          ]
        }
      },
      "type": "object"
    },
    "DetectionRequest": {
      "required": [
        "endTime",
        "source",
        "startTime"
      ],
      "properties": {
        "source": {
          "type": "string",
          "description": "Source link to the input variables. Each variable should be a csv with two columns, `timestamp` and `value`. The file name of the variable will be used as its name. The variables used in detection should be exactly the same with those used in the training phase.",
          "example": "https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.zip?sp=rl&st=2020-12-04T06:03:47Z&se=2022-12-05T06:03:00Z&sv=2019-12-12&sr=b&sig=AZTbvZ7fcp3MdqGY%2FvGHJXJjUgjS4DneCGl7U5omq5c%3D "
        },
        "startTime": {
          "type": "string",
          "description": "A required field, indicating the start time of data for detection. Should be date-time.",
          "example": "2019-04-01T00:15:00Z"
        },
        "endTime": {
          "type": "string",
          "description": "A required field, indicating the end time of data for detection. Should be date-time.",
          "example": "2019-04-01T00:40:00Z"
        }
      },
      "type": "object"
    },
    "LastDetectionRequest": {
      "required": [
        "length",
        "variables"
      ],
      "properties": {
        "variables": {
          "type": "array",
          "description": "variables",
          "items": {
            "$ref": "#/definitions/VariableValues"
          }
        },
        "length": {
          "type": "integer",
          "description": "length",
          "example": 2
        }
      },
      "type": "object"
    },
    "VariableValues": {
      "required": [
        "name",
        "timestamps",
        "values"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "variable name",
          "example": "variable_1"
        },
        "timestamps": {
          "type": "array",
          "description": "timestamps",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "type": "array",
          "description": "values",
          "items": {
            "type": "number"
          }
        }
      },
      "type": "object"
    },
    "LastDetectionResult": {
      "required": [
        "results"
      ],
      "properties": {
        "variableStates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableState"
          }
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnomalyValue"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorResponse"
          }
        }
      },
      "type": "object"
    },
    "AnomalyValue": {
      "required": [
        "isAnomaly",
        "score",
        "severity"
      ],
      "properties": {
        "contributors": {
          "type": "array",
          "description": "Contributors show potential root causes if an anomaly has been detected at the current timestamp.",
          "items": {
            "$ref": "#/definitions/AnomalyContributor"
          }
        },
        "isAnomaly": {
          "type": "boolean",
          "description": "True if an anomaly is detected at the current timestamp.",
          "example": true
        },
        "severity": {
          "type": "number",
          "description": "Indicates the significance of the anomaly. The higher the severity, the more significant the anomaly.",
          "example": 0.8,
          "minimum": 0,
          "maximum": 1
        },
        "score": {
          "type": "number",
          "description": "Raw score from the model.",
          "example": 0.3,
          "minimum": 0,
          "maximum": 2
        },
        "interpretation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnomalyInterpretation"
          }
        }
      },
      "type": "object"
    },
    "AnomalyContributor": {
      "properties": {
        "contributionScore": {
          "type": "number",
          "description": "Percentage of contributions to the anomaly. The higher the contribution score, the more likely to be the root cause. ",
          "example": 0.6,
          "minimum": 0,
          "maximum": 2
        },
        "variable": {
          "type": "string",
          "description": "Name of the variable.",
          "example": "Variable_1"
        }
      },
      "type": "object"
    },
    "AnomalyInterpretation": {
      "properties": {
        "variable": {
          "type": "string"
        },
        "contributionScore": {
          "type": "number"
        },
        "correlationChanges": {
          "$ref": "#/definitions/CorrelationChanges"
        }
      },
      "type": "object"
    },
    "CorrelationChanges": {
      "properties": {
        "changedVariables": {
          "type": "array",
          "description": "correlated variables",
          "items": {
            "type": "string"
          }
        },
        "changedValues": {
          "type": "array",
          "description": "changes in correlation",
          "items": {
            "type": "number"
          }
        }
      },
      "type": "object"
    },
    "DetectionResult": {
      "required": [
        "resultId",
        "results",
        "summary"
      ],
      "properties": {
        "resultId": {
          "type": "string",
          "example": "45aad126-aafd-11ea-b8fb-d89ef3400c5f"
        },
        "summary": {
          "description": "Multivariate anomaly detection status.",
          "allOf": [
            {
              "$ref": "#/definitions/DetectionResultSummary"
            }
          ]
        },
        "results": {
          "type": "array",
          "description": "Detection result for each timestamp.",
          "items": {
            "$ref": "#/definitions/AnomalyState"
          }
        }
      },
      "type": "object"
    },
    "DetectionResultSummary": {
      "required": [
        "setupInfo",
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of detection results. One of CREATED, RUNNING, READY, and FAILED.",
          "example": "READY",
          "enum": [
            "CREATED",
            "RUNNING",
            "READY",
            "FAILED"
          ]
        },
        "errors": {
          "type": "array",
          "description": "Error message when detection is failed.",
          "items": {
            "$ref": "#/definitions/ErrorResponse"
          }
        },
        "variableStates": {
          "type": "array",
          "example": [
            {
              "variable": "ad_input",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "ad_ontimer_output",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "ad_output",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "ad_series_init",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "cpu",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "data_in_speed",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "data_out_speed",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "flink_last_ckpt_duration",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            },
            {
              "variable": "ingestion",
              "filledNARatio": 0,
              "effectiveCount": 26,
              "startTime": "2019-04-01T00:00:00Z",
              "endTime": "2019-04-01T00:25:00Z",
              "errors": []
            }
          ],
          "items": {
            "$ref": "#/definitions/VariableState"
          }
        },
        "setupInfo": {
          "description": "Detection request.",
          "allOf": [
            {
              "$ref": "#/definitions/DetectionRequest"
            }
          ]
        }
      },
      "type": "object"
    },
    "AnomalyState": {
      "required": [
        "timestamp"
      ],
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "timestamp",
          "example": "2020-01-01T00:00:00Z"
        },
        "value": {
          "$ref": "#/definitions/AnomalyValue"
        },
        "errors": {
          "type": "array",
          "description": "Error message for the current timestamp",
          "items": {
            "$ref": "#/definitions/ErrorResponse"
          }
        }
      },
      "type": "object"
    }
  },
  "responses": {
    "ParseError": {
      "description": "When a mask can't be parsed"
    },
    "MaskError": {
      "description": "When any error occurs on mask"
    }
  }
}
