{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Anomaly Detector Client",
    "description": "The Anomaly Detector API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis."
  },
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}/anomalydetector/v1.0",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  },
  "paths": {
    "/timeseries/{timeSeriesId}/entire/detect": {
      "post": {
        "summary": "Detect anomalies for the entire time range",
        "description": "This operation will detect anomalies between begin and end time range, points between begin and end will be detected together with the same model",
        "operationId": "TimeSeries_Entire_Detect_Post",
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Begin and end is required in the request. Advanced model parameters (period, sensitivity, maxAnomalyRatio) can also be set in the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnomalyDetectionRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/AnomalyDetectionResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect anomalies for all points in time range example": {
            "$ref": "./examples/EntireDetectOfTimeRange.json"
          }
        }
      }
    },
    "/timeseries/{timeSeriesId}/last/detect": {
      "post": {
        "summary": "Detect anomaly status of the latest points that hasn't been detected before in the given time range",
        "description": "This operation can be used in streaming monitoring scenario, when user would like to monitor a time series, the user only need to provide a time range, last detect API will check where last detection ends and will return detection results between last detection and the end time",
        "operationId": "TimeSeries_Last_Detect_Post",
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Begin and end is required in the request. Advanced model parameters (period, sensitivity, maxAnomalyRatio) can also be set in the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnomalyDetectionRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/AnomalyDetectionResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect anomaly status of the latest points in time range example": {
            "$ref": "./examples/LastDetectOfTimeRange.json"
          }
        }
      }
    },
    "/timeseries/{timeSeriesId}/label": {
      "post": {
        "summary": "Label API is used for users to label detection status of a certain time stamp of a time series",
        "description": "This operation is used for users to label Anomaly or ChangePoint states of a certain time stamp, these label will be used for regenerate detection model",
        "operationId": "TimeSeries_Label_Post",
        "parameters": [
          {
            "$ref": "#/parameters/timeSeriesId"
          },
          {
            "name": "body",
            "in": "body",
            "description": "In Label request, user can set Anomaly|ChangePoint state (true, false, unknown) for a time range",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LabelRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect anomaly status of the latest points in time range example": {
            "$ref": "./examples/Label.json"
          }
        }
      }
    }
  },
  
  "definitions": {
    "AnomalyDetectionRequest": {
      "type": "object",
      "required": [
        "begin",
        "end"
      ],
      "properties": {
        "begin" : {
          "type": "string",
          "format": "date-time",
          "description": "begin of a detection time range"
        },
        "end" : {
          "type": "string",
          "format": "date-time",
          "description": "end of a detection time range"
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically."
        },
        "maxAnomalyRatio": {
          "type": "number",
          "format": "float",
          "description": "Optional argument, advanced model parameter, max anomaly ratio in a time series."
        },
        "sensitivity": {
          "type": "integer",
          "format": "int32",
          "description": "Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted."
        }
      }
    },
    "AnomalyDetectionResponse": {
      "type": "object",
      "required": [
        "timestamps",
        "values",
        "expectedValues",
        "isAnomaly",
        "isNegativeAnomaly",
        "isPositiveAnomaly",
        "lowerMargins",
        "upperMargins",
        "period"
      ],
      "properties": {
        "period": {
          "type": "integer",
          "format": "int32",
          "description": "Frequency extracted from the series, zero means no recurrent pattern has been found."
        },
        "timestamps": {
          "type": "array",
          "description": "timestamps contain timestamp for each point in the range.",
          "items": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          }
        },
        "values": {
          "type": "array",
          "description": "values contain value for each point in the range. The index of the array is consistent with timestamps array.",
          "items": {
            "type": "number",
            "format": "float",
            "x-nullable": false
          }
        },
        "expectedValues": {
          "type": "array",
          "description": "ExpectedValues contain expected value for each point in the range. The index of the array is consistent with timestamps array.",
          "items": {
            "type": "number",
            "format": "float",
            "x-nullable": false
          }
        },
        "upperMargins": {
          "type": "array",
          "description": "UpperMargins contain upper margin of each point in the range. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side. The index of the array is consistent with timestamps.",
          "items": {
            "type": "number",
            "format": "float",
            "x-nullable": false
          }
        },
        "lowerMargins": {
          "type": "array",
          "description": "LowerMargins contain lower margin of each point in the range. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with timestamps.",
          "items": {
            "type": "number",
            "format": "float",
            "x-nullable": false
          }
        },
        "isAnomaly": {
          "type": "array",
          "description": "IsAnomaly contain anomaly properties each point in the range. True means an anomaly either negative or positive has been detected. The index of the array is consistent with timestamps.",
          "items": {
            "type": "boolean",
            "x-nullable": false
          }
        },
        "isNegativeAnomaly": {
          "type": "array",
          "description": "IsNegativeAnomaly contain anomaly status in negative direction in the range. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with timestamps.",
          "items": {
            "type": "boolean",
            "x-nullable": false
          }
        },
        "isPositiveAnomaly": {
          "type": "array",
          "description": "IsPositiveAnomaly contain anomaly status in positive direction in the range. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with timestamps.",
          "items": {
            "type": "boolean",
            "x-nullable": false
          }
        }
      }
    },
    "LabelType": {
      "type": "string",
      "description": "Label type, can only be changePoint or Anomaly",
      "x-nullable": false,
      "x-ms-enum": {
        "name": "LabelType",
        "modelAsString": false
      },
      "enum": [
        "changePoint",
        "Anomaly"
      ]
    },
    "LabelValue": {
      "type": "string",
      "description": "Value of a label, can be true, false",
      "x-nullable": false,
      "x-ms-enum": {
        "name": "LabelValue",
        "modelAsString": false
      },
      "enum": [
        "true",
        "false"
      ]
    },
    "LabelRequest": {
      "type": "object",
      "required": [
        "type",
        "begin",
        "end",
        "value"
      ],
      "properties": {
        "begin" : {
          "type": "string",
          "format": "date-time",
          "description": "begin of a detection time range"
        },
        "end" : {
          "type": "string",
          "format": "date-time",
          "description": "end of a detection time range"
        },
        "type": {
          "$ref": "#/definitions/LabelType"
        },
        "value": {
          "$ref": "#/definitions/LabelValue"
        }
      }
    }
  },
  "parameters": {
    "Endpoint": {
      "name": "Endpoint",
      "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    },
    "timeseriesId": {
      "name": "timeseriesId",
      "description": "",
      "x-ms-parameter-location": "method",
      "required": true,
      "type": "string",
      "in": "path",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "timeseriesGroupId": {
      "name": "timeseriesGroupId",
      "description": "",
      "x-ms-parameter-location": "method",
      "required": true,
      "type": "string",
      "in": "path",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    }
  }
}
