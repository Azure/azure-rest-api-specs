{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Anomaly Detector Client",
    "description": "The Anomaly Detector API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis."
  },
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [{
    "apiKeyHeader": []
  }],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}/anomalydetector/v1.0",
    "useSchemePrefix": false,
    "parameters": [{
      "$ref": "#/parameters/Endpoint"
    }]
  },
  "paths": {
    "/timeseries/entire/detect": {
      "post": {
        "summary": "Detect anomalies for the entire series in batch.",
        "description": "This operation generates a model using an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give user an overall status of the time series.",
        "operationId": "EntireDetect",
        "parameters": [{
          "name": "body",
          "in": "body",
          "description": "Time series points and period if needed. Advanced model parameters can also be set in the request.",
          "required": true,
          "schema": {
            "$ref": "#/definitions/Request"
          }
        }],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/EntireDetectResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Find anomalies for the entire series in batch example": {
            "$ref": "./examples/EntireDetect.json"
          }
        }
      }
    },
    "/timeseries/last/detect": {
      "post": {
        "summary": "Detect anomaly status of the latest point in time series.",
        "description": "This operation generates a model using points before the latest one. With this method, only historical points are used to determine whether the target point is an anomaly. The latest point detecting operation matches the scenario of real-time monitoring of business metrics.",
        "operationId": "LastDetect",
        "parameters": [{
          "name": "body",
          "in": "body",
          "description": "Time series points and period if needed. Advanced model parameters can also be set in the request.",
          "required": true,
          "schema": {
            "$ref": "#/definitions/Request"
          }
        }],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/LastDetectResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect anomaly status of the latest point in time series example": {
            "$ref": "./examples/LastDetect.json"
          }
        }
      }
    },
    "/timeseriesgroups/{timeseriesGroupId}/inconsistency/detect": {
      "post": {
        "summary": "Detect inconsistent time series from a group of similiar time series",
        "description": " This operation helps detect the inconsistent series among a group series with similiar trend.",
        "operationId": "DetectInconsistency",
        "parameters": [{
            "name": "body",
            "in": "body",
            "description": "Start time and end time is necessary, and a parameter called epsilon is needed to tune the result. Epsilon should be within 0 and 1.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetectInconsistencyRequest"
            }
          },
          {
            "$ref": "#/parameters/timeseriesGroupId"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/DetectInconsistencyResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect anomaly status of the latest point in time series example": {
            "$ref": "./examples/DetectInconsistency.json"
          }
        }
      }
    },
    "/timeseriesgroups/{timeseriesGroupId}/query": {
      "post": {
        "summary": "Query time series properties from a group of similiar time series",
        "description": " This operation helps query properties of one group, for example the inconsistent series among a group series with similiar trend.",
        "operationId": "QueryTimeSeriesGroup",
        "parameters": [{
            "name": "body",
            "in": "body",
            "description": "Start time and end time is necessary",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryTimeSeriesGroupRequest"
            }
          },
          {
            "$ref": "#/parameters/timeseriesGroupId"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/QueryTimeSeriesGroupResponse"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect anomaly status of the latest point in time series example": {
            "$ref": "./examples/QueryTimeSeriesGroup.json"
          }
        }
      }
    },
    "definitions": {
      "APIError": {
        "type": "object",
        "description": "Error information returned by the API.",
        "properties": {
          "code": {
            "description": "The error code.",
            "enum": [
              "InvalidCustomInterval",
              "BadArgument",
              "InvalidGranularity",
              "InvalidPeriod",
              "InvalidModelArgument",
              "InvalidSeries"
            ],
            "x-ms-enum": {
              "name": "AnomalyDetectorErrorCodes",
              "modelAsString": true
            }
          },
          "message": {
            "description": "A message explaining the error reported by the service.",
            "type": "string"
          }
        }
      },
      "Request": {
        "type": "object",
        "required": [
          "granularity",
          "series"
        ],
        "properties": {
          "series": {
            "type": "array",
            "description": "Time series data points. Points should be sorted by timestamp in ascending order to match the anomaly detection result. If the data is not sorted correctly or there is duplicated timestamp, the API will not work. In such case, an error message will be returned.",
            "items": {
              "$ref": "#/definitions/Point"
            }
          },
          "granularity": {
            "type": "string",
            "description": "Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid.",
            "x-ms-enum": {
              "name": "Granularity",
              "modelAsString": false
            },
            "enum": [
              "yearly",
              "monthly",
              "weekly",
              "daily",
              "hourly",
              "minutely"
            ]
          },
          "customInterval": {
            "type": "integer",
            "format": "int32",
            "description": "Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}."
          },
          "period": {
            "type": "integer",
            "format": "int32",
            "description": "Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically."
          },
          "maxAnomalyRatio": {
            "type": "number",
            "format": "float",
            "description": "Optional argument, advanced model parameter, max anomaly ratio in a time series."
          },
          "sensitivity": {
            "type": "integer",
            "format": "int32",
            "description": "Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted."
          }
        }
      },
      "Point": {
        "type": "object",
        "required": [
          "timestamp",
          "value"
        ],
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of a data point (ISO8601 format)."
          },
          "value": {
            "type": "number",
            "format": "float",
            "description": "The measurement of that point, should be float."
          }
        }
      },
      "EntireDetectResponse": {
        "type": "object",
        "required": [
          "expectedValues",
          "isAnomaly",
          "isNegativeAnomaly",
          "isPositiveAnomaly",
          "lowerMargins",
          "period",
          "upperMargins"
        ],
        "properties": {
          "period": {
            "type": "integer",
            "format": "int32",
            "description": "Frequency extracted from the series, zero means no recurrent pattern has been found."
          },
          "expectedValues": {
            "type": "array",
            "description": "ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series.",
            "items": {
              "type": "number",
              "format": "float",
              "x-nullable": false
            }
          },
          "upperMargins": {
            "type": "array",
            "description": "UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series.",
            "items": {
              "type": "number",
              "format": "float",
              "x-nullable": false
            }
          },
          "lowerMargins": {
            "type": "array",
            "description": "LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series.",
            "items": {
              "type": "number",
              "format": "float",
              "x-nullable": false
            }
          },
          "isAnomaly": {
            "type": "array",
            "description": "IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.",
            "items": {
              "type": "boolean",
              "x-nullable": false
            }
          },
          "isNegativeAnomaly": {
            "type": "array",
            "description": "IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series.",
            "items": {
              "type": "boolean",
              "x-nullable": false
            }
          },
          "isPositiveAnomaly": {
            "type": "array",
            "description": "IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series.",
            "items": {
              "type": "boolean",
              "x-nullable": false
            }
          }
        }
      },
      "LastDetectResponse": {
        "type": "object",
        "required": [
          "expectedValue",
          "isAnomaly",
          "isNegativeAnomaly",
          "isPositiveAnomaly",
          "lowerMargin",
          "period",
          "upperMargin",
          "suggestedWindow"
        ],
        "properties": {
          "period": {
            "type": "integer",
            "format": "int32",
            "description": "Frequency extracted from the series, zero means no recurrent pattern has been found."
          },
          "suggestedWindow": {
            "type": "integer",
            "format": "int32",
            "description": "Suggested input series points needed for detecting the latest point."
          },
          "expectedValue": {
            "type": "number",
            "format": "float",
            "description": "Expected value of the latest point."
          },
          "upperMargin": {
            "type": "number",
            "format": "float",
            "description": "Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting marginScale value, anomaly status of latest point can be changed."
          },
          "lowerMargin": {
            "type": "number",
            "format": "float",
            "description": "Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. "
          },
          "isAnomaly": {
            "type": "boolean",
            "description": "Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction."
          },
          "isNegativeAnomaly": {
            "type": "boolean",
            "description": "Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one."
          },
          "isPositiveAnomaly": {
            "type": "boolean",
            "description": "Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one."
          }
        }
      },
      "DetectInconsistencyRequest": {
        "type": "object",
        "required": [
          "epsilon",
          "startTimeInclusive",
          "endtTimeInclusive"
        ],
        "properties": {
          "epsilon": {
            "type": "number",
            "format": "float",
            "description": "Parameters to get inconsistentcy result. Smaller epislon mean greater sensistivity."
          },
          "startTimeInclusive": {
            "type": "string",
            "format": "date-time",
            "description": "Start time of the time series group (ISO8601 format)."
          },
          "endtTimeInclusive": {
            "type": "string",
            "format": "date-time",
            "description": "End time of the time series group (ISO8601 format)."
          }
        }
      },
      "DetectInconsistencyResponse": {
        "type": "object",
        "required": [
          "inconsistency",
          "score"
        ],
        "properties": {
          "inconsistency": {
            "type": "array",
            "format": "string",
            "description": "IDs of the inconsistent series."
          },
          "score": {
            "type": "array",
            "format": "float",
            "description": "Severities of the inconsistent series."
          }
        }
      },
      "QueryTimeSeriesGroupRequest": {
        "type": "object",
        "required": [
          "startTimeInclusive",
          "endTimeInclusive"
        ],
        "properties": {
          "startTimeInclusive": {
            "type": "array",
            "format": "date-time",
            "description": "start time of the time series group."
          },
          "endTimeInclusive": {
            "type": "array",
            "format": "date-time",
            "description": "end time of the time series group."
          }
        }
      },
      "QueryTimeSeriesGroupResponse": {
        "type": "array",
        "required": [
          "TimeSeries"
        ],
        "properties": {
          "TimeSeries": {
            "type": "object",
            "description": "Time Series related values"
          }
        }
      },
      "TimeSeries": {
        "type": "object",
        "required": [
          "Columns",
          "Ids",
          "Points"
        ],
        "properties": {
          "Columns": {
            "type": "array",
            "format": "string",
            "description": "definition of value of the time series."
          },
          "ID": {
            "type": "object",
            "items": {
              "$ref": "#/definitions/ID"
            },
            "description": "end time of the time series group."
          },
          "Points": {
            "type": "array",
            "format": "object",
            "description": "end time of the time series group."
          }
        }
      },
      "ID": {
        "type": "object",
        "required": [
          "dimensions",
          "metricGuid",
          "seriesId"
        ],
        "properties": {
          "dimensions": {
            "type": "object",
            "description": "dimensions of the time series."
          },
          "metricGuid": {
            "type": "string",
            "description": "the measurement where the time series is recorded."
          },
          "seriesId": {
            "type": "string",
            "description": "Id of the time series."
          }
        }
      }
    },
    "parameters": {
      "Endpoint": {
        "name": "Endpoint",
        "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).",
        "x-ms-parameter-location": "client",
        "required": true,
        "type": "string",
        "in": "path",
        "x-ms-skip-url-encoding": true
      },
      "timeseriesGroupId": {
        "name": "timeseriesGroupId",
        "description": "Supported Cognitive Services time series group (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).",
        "x-ms-parameter-location": "client",
        "required": true,
        "type": "string",
        "in": "path",
        "x-ms-skip-url-encoding": true
      }
    }
  }