{
  "swagger": "2.0",
  "info": {
    "title": "Computer Vision Client",
    "description": "The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to extract text using Read OCR, caption an image using descriptive natural language, detect objects, people, and more.",
    "version": "2024-03-01-preview"
  },
  "paths": {
    "/retrieval/indexes/{indexName}": {
      "put": {
        "tags": [
          "IngestionApi"
        ],
        "summary": "Creates an index for the documents to be ingested.",
        "description": "This method creates an index, which can then be used to ingest documents.\r\nAn index needs to be created before ingestion can be performed.",
        "operationId": "CreateIndex",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexName",
            "description": "The name of the index to be created.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request body containing the metadata that could be used for searching.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateIngestionIndexRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GetIngestionIndexResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateIndex_MaximumSet_Gen": {
            "$ref": "./examples/Retrieval_CreateIndex.json"
          }
        }
      },
      "get": {
        "tags": [
          "IngestionApi"
        ],
        "summary": "Retrieves the index.",
        "description": "Retrieves the index with the specified name.",
        "operationId": "GetIndex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexName",
            "description": "The name of the index to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetIngestionIndexResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetIndex_MaximumSet_Gen": {
            "$ref": "./examples/Retrieval_GetIndex.json"
          }
        }
      },
      "patch": {
        "tags": [
          "IngestionApi"
        ],
        "summary": "Updates an index.",
        "description": "Updates an index with the specified name.",
        "operationId": "UpdateIndex",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexName",
            "description": "The name of the index to be updated.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request body containing the updates to be applied to the index.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateIngestionIndexRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetIngestionIndexResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "UpdateIndex_MaximumSet_Gen": {
            "$ref": "./examples/Retrieval_UpdateIndex.json"
          }
        }
      },
      "delete": {
        "tags": [
          "IngestionApi"
        ],
        "summary": "Deletes an index.",
        "description": "Deletes an index and all its associated ingestion documents.",
        "operationId": "DeleteIndex",
        "parameters": [
          {
            "in": "path",
            "name": "indexName",
            "description": "The name of the index to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-ms-examples": {
          "DeleteIndex_MaximumSet_Gen": {
            "$ref": "./examples/Retrieval_DeleteIndex.json"
          }
        }
      }
    },
    "/retrieval/indexes": {
      "get": {
        "tags": [
          "IngestionApi"
        ],
        "summary": "Retrieves all indexes.",
        "description": "Retrieves a list of all indexes across all ingestions.",
        "operationId": "ListIndexes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$skip",
            "description": "Number of datasets to be skipped.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Number of datasets to be returned after skipping.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "maximum": 30,
            "minimum": 1
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetIngestionIndexResponseModelCollectionApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListIndexes_MaximumSet_Gen": {
            "$ref": "./examples/Retrieval_ListIndexes.json"
          }
        }
      }
    },
    "/retrieval/indexes/{indexName}/ingestions/{ingestionName}": {
      "put": {
        "tags": [
          "IngestionApi"
        ],
        "summary": "Creates an ingestion for a specific index and ingestion name.",
        "description": "It can have one of the three modes (add, update or remove).\r\nAdd mode will create an ingestion and process the document.\r\nUpdate mode will update the metadata only. In order to reprocess the document, the ingestion needs to be deleted and recreated.",
        "operationId": "CreateIngestion",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexName",
            "description": "The name of the index to which the ingestion is to be created.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ingestionName",
            "description": "The name of the ingestion to be created.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request body containing the ingestion request to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateIngestionRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/IngestionResponse"
            }
          }
        },
        "x-ms-examples": {
          "CreateIngestion_MaximumSet_Gen": {
            "$ref": "./examples/Retrieval_CreateIngestion.json"
          }
        }
      },
      "get": {
        "tags": [
          "IngestionApi"
        ],
        "summary": "Gets the ingestion status.",
        "description": "Gets the ingestion status for the specified index and ingestion name.",
        "operationId": "GetIngestion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexName",
            "description": "The name of the index for which the ingestion status to be checked.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ingestionName",
            "description": "The name of the ingestion to be retrieved.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "query",
            "name": "detailLevel",
            "description": "A level to indicate detail level per document ingestion status.",
            "type": "string",
            "enum": [
              "none",
              "failed",
              "succeeded",
              "all"
            ]
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IngestionResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "GetIngestion_MaximumSet_Gen": {
            "$ref": "./examples/Retrieval_GetIngestion.json"
          }
        }
      }
    },
    "/retrieval/indexes/{indexName}/ingestions": {
      "get": {
        "tags": [
          "IngestionApi"
        ],
        "summary": "Retrieves all ingestions.",
        "description": "Retrieves all ingestions for the specific index.",
        "operationId": "ListIngestions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexName",
            "description": "The name of the index for which to retrieve the ingestions.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IngestionResponseModelCollectionApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListIngestions_MaximumSet_Gen": {
            "$ref": "./examples/Retrieval_ListIngestions.json"
          }
        }
      }
    },
    "/retrieval/indexes/{indexName}/documents": {
      "get": {
        "tags": [
          "IngestionApi"
        ],
        "summary": "Retrieves all documents.",
        "description": "Retrieves all documents for the specific index.",
        "operationId": "ListDocuments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexName",
            "description": "The name of the index for which to retrieve the documents.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "Number of datasets to be skipped.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Number of datasets to be returned after skipping.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "maximum": 30,
            "minimum": 1
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IngestionDocumentResponseModelCollectionApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ListDocuments_MaximumSet_Gen": {
            "$ref": "./examples/Retrieval_ListDocuments.json"
          }
        }
      }
    },
    "/retrieval/indexes/{indexName}:queryByText": {
      "post": {
        "tags": [
          "SearchApi"
        ],
        "summary": "Performs a text-based search.",
        "description": "Performs a text-based search on the specified index.",
        "operationId": "SearchByText",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexName",
            "description": "The name of the index to search.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request body containing the query and other parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchQueryTextRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchResultDocumentModelCollectionApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchByText_MaximumSet_Gen": {
            "$ref": "./examples/Retrieval_SearchByText.json"
          }
        }
      }
    },
    "/imageanalysis:segment": {
      "post": {
        "tags": [
          "Operations"
        ],
        "summary": "Analyze the input image. The request either contains an image stream with any content type ['image/*', 'application/octet-stream'], or a JSON payload which includes a url property to be used to retrieve the image stream. An image stream of content type 'image/png' is returned, where the pixel values depend on the analysis mode. The returned image has the same dimensions as the input image for modes: foregroundMatting. The returned image has the same aspect ratio and same dimensions as the input image up to a limit of 16 megapixels for modes: backgroundRemoval.",
        "operationId": "ImageAnalysis_Segment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "image/png",
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "mode",
            "description": "The analysis mode requested.",
            "type": "string",
            "enum": [
              "backgroundRemoval",
              "foregroundMatting"
            ],
            "x-ms-enum": {
              "name": "SegmentationMode",
              "modelAsString": true
            }
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "A JSON document with a URL pointing to the image that is to be analyzed.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Segment_BackgroundRemoval_FromImageUrl": {
            "$ref": "./examples/Segment_BackgroundRemoval_FromImageUrl.json"
          },
          "Segment_ForegroundMatting_FromImageUrl": {
            "$ref": "./examples/Segment_ForegroundMatting_FromImageUrl.json"
          }
        }
      }
    },
    "/retrieval:vectorizeText": {
      "post": {
        "tags": [
          "ImageRetrieval"
        ],
        "summary": "Return vector from a text.",
        "operationId": "ImageRetrieval_VectorizeText",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "model-version",
            "description": "Model version.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request of VectorizeText.",
            "schema": {
              "$ref": "#/definitions/VectorizeTextRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SingleVectorResultApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ImageRetrieval_VectorizeText": {
            "$ref": "./examples/ImageRetrieval_VectorizeText.json"
          }
        }
      }
    },
    "/retrieval:vectorizeImage": {
      "post": {
        "tags": [
          "ImageRetrieval"
        ],
        "summary": "Return vector from an image.",
        "operationId": "ImageRetrieval_VectorizeImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "model-version",
            "description": "Model version.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "A JSON document with a URL pointing to the image that is to be analyzed.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SingleVectorResultApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ImageRetrieval_VectorizeImage": {
            "$ref": "./examples/ImageRetrieval_VectorizeImage.json"
          }
        }
      }
    },
    "/imagecomposition:stitch": {
      "post": {
        "tags": [
          "Operations"
        ],
        "summary": "Run the image stitching operation against a sequence of images.",
        "operationId": "ImageComposition_Stitch",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "image/jpeg",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Input images urls that pass into image stitching operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageStitchingRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ImageComposition_Stitch": {
            "$ref": "./examples/ImageComposition_Stitch.json"
          }
        }
      }
    },
    "/imagecomposition:rectify": {
      "post": {
        "tags": [
          "Operations"
        ],
        "summary": "Run the image rectification operation against an image with 4 control points provided in the parameter.",
        "operationId": "ImageComposition_Rectify",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "image/jpeg",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Input image url and control points that are passed into rectification operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageRectificationRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ImageComposition_Rectify": {
            "$ref": "./examples/ImageComposition_Rectify.json"
          }
        }
      }
    },
    "/planogramcompliance:match": {
      "post": {
        "tags": [
          "Operations"
        ],
        "summary": "Run the planogram matching operation against a planogram and a product understanding result.",
        "operationId": "PlanogramCompliance_Match",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Input to pass into the planogram matching operation.",
            "schema": {
              "$ref": "#/definitions/PlanogramMatchingRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PlanogramMatchingResultApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "PlanogramCompliance_Match": {
            "$ref": "./examples/PlanogramCompliance_Match.json"
          }
        }
      }
    },
    "/productrecognition/{modelName}/runs/{runName}": {
      "put": {
        "tags": [
          "Operations"
        ],
        "summary": "Run the product recognition against a model with an image.",
        "operationId": "ProductRecognition_Create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "modelName",
            "description": "The name of the model to run product recognition with.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "path",
            "name": "runName",
            "description": "The name of the product recognition run.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProductRecognitionApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ProductRecognition_Create": {
            "$ref": "./examples/ProductRecognition_Create.json"
          }
        }
      },
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "Get information about a specific product recognition run.",
        "operationId": "ProductRecognition_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "modelName",
            "description": "The name of the model the product recognition run belongs to.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "path",
            "name": "runName",
            "description": "The name of the product recognition run.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductRecognitionApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ProductRecognition_Get": {
            "$ref": "./examples/ProductRecognition_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Operations"
        ],
        "summary": "Delete a product recognition run. A product recognition run can be deleted if it is in the 'Succeeded' or 'Failed' states.\r\n            \r\nStatus codes returned:\r\n- 204: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 404: A product recognition run with the specified name was not found.",
        "operationId": "ProductRecognition_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "modelName",
            "description": "The name of the model to delete the product recognition run for.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "path",
            "name": "runName",
            "description": "The name of the product recognition run.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ProductRecognition_Delete": {
            "$ref": "./examples/ProductRecognition_Delete.json"
          }
        }
      }
    },
    "/productrecognition/{modelName}/runs": {
      "get": {
        "tags": [
          "Operations"
        ],
        "summary": "List all product recognition run of a model.",
        "operationId": "ProductRecognition_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "modelName",
            "description": "The name of the model the product recognition runs belongs to.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of product recognition runs to be skipped.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "top",
            "description": "Number of product recognition runs to be returned after skipping. The maximum allowed value is 30.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "maximum": 30,
            "minimum": 1
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductRecognitionApiModelCollectionApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ProductRecognition_List": {
            "$ref": "./examples/ProductRecognition_List.json"
          }
        }
      }
    },
    "/imageanalysis:analyze": {
      "post": {
        "tags": [
          "Operations"
        ],
        "summary": "Analyze the input image. The request either contains image stream with any content type ['image/*', 'application/octet-stream'], or a JSON payload which includes an url property to be used to retrieve the image stream.",
        "operationId": "ImageAnalysis_Analyze",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "features",
            "description": "The visual features requested: tags, objects, caption, denseCaptions, read, smartCrops, people. This parameter needs to be specified if the parameter \"model-name\" is not specified.",
            "type": "array",
            "items": {
              "enum": [
                "tags",
                "caption",
                "denseCaptions",
                "objects",
                "read",
                "smartCrops",
                "people"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "VisualFeature",
                "modelAsString": true
              }
            },
            "collectionFormat": "csv"
          },
          {
            "in": "query",
            "name": "model-name",
            "description": "The name of the custom trained model. This parameter needs to be specified if the parameter \"features\" is not specified.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The desired language for output generation. If this parameter is not specified, the default value is \"en\". See https://aka.ms/cv-languages for a list of supported languages.",
            "type": "string",
            "default": "en"
          },
          {
            "in": "query",
            "name": "smartcrops-aspect-ratios",
            "description": "A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive). Multiple values should be comma-separated. If this parameter is not specified, the service will return one crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gender-neutral-caption",
            "description": "Boolean flag for enabling gender-neutral captioning for caption and denseCaptions features. If this parameter is not specified, the default value is \"false\".",
            "type": "boolean",
            "default": false
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "A JSON document with a URL pointing to the image that is to be analyzed.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ImageAnalysisResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "AnalyzeImage_CustomModel": {
            "$ref": "./examples/AnalyzeImage_CustomModel.json"
          }
        }
      }
    },
    "/datasets/{name}": {
      "put": {
        "tags": [
          "Datasets"
        ],
        "summary": "Register a new dataset.\r\n            \r\nStatus codes returned:\r\n- 201: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 409: A dataset with the specified name already exists.",
        "operationId": "Datasets_Register",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "A name that can be used to uniquely identify the dataset after it has been registered.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties for the dataset, such as the list of URIs to the annotation files.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dataset"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Dataset"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "RegisterDataset_ImageClassification": {
            "$ref": "./examples/RegisterDataset_ImageClassification.json"
          }
        }
      },
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Get information about a specific dataset.\r\n            \r\nStatus codes returned:\r\n- 200: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 404: A dataset with the specified name was not found.",
        "operationId": "Datasets_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The name of the dataset to get.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Dataset"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_Get": {
            "$ref": "./examples/Datasets_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Datasets"
        ],
        "summary": "Update the properties of an existing dataset.\r\n            \r\nStatus codes returned:\r\n- 200: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 404: A dataset with the specified name was not found.\r\n- 412: An If-Match header was provided, but the given ETag did not match the current ETag value.",
        "operationId": "Datasets_Update",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The name of the dataset to update.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "header",
            "name": "If-Match",
            "description": "Optional ETag for the dataset to update.<br />\r\nIf an ETag is provided, then the dataset will be updated only if its current ETag value matches the given ETag.\r\nIf the ETag values don't match, then the update operation will fail with status code 412 (Precondition Failed).\r\nThis indicates that the dataset has been updated since the last time information for the dataset was obtained.<br />\r\nIf an ETag is not provided or its value is '*', then the dataset will always be updated regardless of the current ETag value.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties to update on the existing dataset.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dataset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Dataset"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_Update": {
            "$ref": "./examples/Datasets_Update.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Datasets"
        ],
        "summary": "Unregister a dataset.\r\n            \r\nStatus codes returned:\r\n- 204: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 404: A dataset with the specified name was not found.\r\n- 412: An If-Match header was provided, but the given ETag did not match the current ETag value.",
        "operationId": "Datasets_Unregister",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The name of the dataset to unregister.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "header",
            "name": "If-Match",
            "description": "Optional ETag for the dataset to unregister.<br />\r\nIf an ETag is provided, then the dataset will be unregistered only if its current ETag value matches the given ETag.\r\nIf the ETag values don't match, then the unregister operation will fail with status code 412 (Precondition Failed).\r\nThis indicates that the dataset has been updated since the last time information for the dataset was obtained.<br />\r\nIf an ETag is not provided or its value is '*', then the dataset will always be unregistered regardless of the current ETag value.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_Unregister": {
            "$ref": "./examples/Datasets_Unregister.json"
          }
        }
      }
    },
    "/datasets": {
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Get a list of datasets that have been registered.\r\n            \r\nStatus codes returned:\r\n- 200: Operation completed successfully.\r\n- 400: The request was malformed.",
        "operationId": "Datasets_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of datasets to be skipped.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "top",
            "description": "Number of datasets to be returned after skipping. The maximum allowed value is 30.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "maximum": 30,
            "minimum": 1
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DatasetApiModelCollectionApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Datasets_List": {
            "$ref": "./examples/Datasets_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/models/{name}": {
      "put": {
        "tags": [
          "Models"
        ],
        "summary": "Start training a custom model.\r\n            \r\nStatus codes returned:\r\n- 201: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 409: A model with the specified name already exists.",
        "operationId": "Models_Create",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "A name that can be used to uniquely identify the model after it has been created.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties for the model, such as the name of the dataset to use to train the model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Model"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Models_Create": {
            "$ref": "./examples/Models_Create.json"
          }
        }
      },
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get information about a specific model.\r\n            \r\nStatus codes returned:\r\n- 200: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 404: A model with the specified name was not found.",
        "operationId": "Models_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The name of the model to get.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Models_Get": {
            "$ref": "./examples/Models_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete a custom model. A model can be deleted if it is in one of the 'Succeeded', 'Failed', or 'Canceled' states.\r\nIf a model is in the 'NotStarted' or 'Training' state, cancel training and wait for cancellation to finish before deleting the model.\r\n            \r\nStatus codes returned:\r\n- 204: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 404: A model with the specified name was not found.",
        "operationId": "Models_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The name of the model to delete.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Models_Delete": {
            "$ref": "./examples/Models_Delete.json"
          }
        }
      }
    },
    "/models": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get a list of the available models.\r\n            \r\nStatus codes returned:\r\n- 200: Operation completed successfully.\r\n- 400: The request was malformed.",
        "operationId": "Models_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of models to be skipped.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "top",
            "description": "Number of models to be returned after skipping. The maximum allowed value is 30.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "maximum": 30,
            "minimum": 1
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelApiModelCollectionApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Models_List": {
            "$ref": "./examples/Models_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/models/{name}:cancel": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Cancel model training.\r\n            \r\nStatus codes returned:\r\n- 202: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 404: A model with the specified name was not found.",
        "operationId": "Models_CancelTraining",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The name of the model to cancel training.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Models_CancelTraining": {
            "$ref": "./examples/Models_CancelTraining.json"
          }
        }
      }
    },
    "/models/{name}/evaluations/{evaluationName}": {
      "put": {
        "tags": [
          "Models"
        ],
        "summary": "Evaluate an existing model.\r\n            \r\nStatus codes returned:\r\n- 201: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 409: An evaluation with the specified name already exists.",
        "operationId": "ModelEvaluations_Create",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The name of the model to evaluate.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "path",
            "name": "evaluationName",
            "description": "A name that can be used to uniquely identify the evaluation after it has been created.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties for the evaluation, such as the name of the dataset to use to test the model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelEvaluation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ModelEvaluation"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ModelEvaluations_Create": {
            "$ref": "./examples/ModelEvaluations_Create.json"
          }
        }
      },
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get information about a specific model evaluation.\r\n            \r\nStatus codes returned:\r\n- 200: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 404: A model  evaluation with the specified name was not found.",
        "operationId": "ModelEvaluations_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The name of the model to get the evaluation for.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "path",
            "name": "evaluationName",
            "description": "The name of the model evaluation to get.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelEvaluation"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ModelEvaluations_Get": {
            "$ref": "./examples/ModelEvaluations_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete a model evaluation. A model evaluation can be deleted if it is in the 'Succeeded' or 'Failed' states.\r\n            \r\nStatus codes returned:\r\n- 204: Operation completed successfully.\r\n- 400: The request was malformed.\r\n- 404: A model evaluation with the specified name was not found.",
        "operationId": "ModelEvaluations_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The name of the model to delete the evaluation for.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "path",
            "name": "evaluationName",
            "description": "The name of the model evaluation to delete.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ModelEvaluations_Delete": {
            "$ref": "./examples/ModelEvaluations_Delete.json"
          }
        }
      }
    },
    "/models/{name}/evaluations": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get a list of the available evaluations for a model.\r\n            \r\nStatus codes returned:\r\n- 200: Operation completed successfully.\r\n- 400: The request was malformed.",
        "operationId": "ModelEvaluations_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The name of the model to get evaluations for.",
            "required": true,
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of evaluations to be skipped.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "maximum": 2147483647,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "top",
            "description": "Number of evaluations to be returned after skipping. The maximum allowed value is 30.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "maximum": 30,
            "minimum": 1
          },
          {
            "$ref": "#/parameters/ApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelEvaluationApiModelCollectionApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ModelEvaluations_List": {
            "$ref": "./examples/ModelEvaluations_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "CreateIngestionIndexRequest": {
      "description": "Represents the create ingestion index request model for the JSON document.",
      "type": "object",
      "properties": {
        "metadataSchema": {
          "$ref": "#/definitions/MetadataSchema"
        },
        "features": {
          "description": "Gets or sets the list of features for the document. Default is \"vision\".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Feature"
          }
        },
        "userData": {
          "description": "Gets or sets the user data for the document.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "CreateIngestionRequest": {
      "description": "Represents the create ingestion request model for the JSON document.",
      "type": "object",
      "properties": {
        "videos": {
          "description": "Gets or sets the list of video document ingestion requests in the JSON document.",
          "maxItems": 100,
          "type": "array",
          "items": {
            "$ref": "#/definitions/IngestionDocumentRequest"
          }
        },
        "moderation": {
          "description": "Gets or sets the moderation flag, indicating if the content should be moderated.",
          "type": "boolean"
        },
        "documentAuthenticationKind": {
          "description": "Gets or sets the authentication kind that is be used for downloading the documents.",
          "enum": [
            "none",
            "managedIdentity"
          ],
          "type": "string"
        },
        "speechTranscriptionLanguage": {
          "description": "Gets or sets the language to be used in speech transcription.",
          "type": "string"
        }
      }
    },
    "DatetimeFilter": {
      "description": "Represents a datetime filter to apply on a search query.",
      "required": [
        "fieldName"
      ],
      "type": "object",
      "properties": {
        "fieldName": {
          "description": "Gets or sets the name of the field to filter on.",
          "maxLength": 36,
          "minLength": 1,
          "type": "string"
        },
        "startTime": {
          "description": "Gets or sets the start time of the range to filter on.",
          "type": "string"
        },
        "endTime": {
          "description": "Gets or sets the end time of the range to filter on.",
          "type": "string"
        }
      }
    },
    "Feature": {
      "description": "Represents a feature in the index.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name of the feature.",
          "enum": [
            "vision",
            "speech",
            "ocr"
          ],
          "type": "string"
        },
        "modelVersion": {
          "description": "Gets or sets the model version of the feature.",
          "type": "string"
        },
        "domain": {
          "description": "Gets or sets the model domain of the feature.",
          "enum": [
            "generic",
            "medical",
            "surveillance",
            "egocentric"
          ],
          "type": "string"
        }
      }
    },
    "GetIngestionIndexResponse": {
      "description": "Represents the get ingestion index response model for the JSON document.",
      "required": [
        "createdDateTime",
        "eTag",
        "lastModifiedDateTime"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the index name property.",
          "type": "string"
        },
        "metadataSchema": {
          "$ref": "#/definitions/MetadataSchema"
        },
        "userData": {
          "description": "Gets or sets the user data for the document.",
          "type": "object",
          "additionalProperties": {}
        },
        "features": {
          "description": "Gets or sets the list of features in the index.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Feature"
          }
        },
        "eTag": {
          "description": "Gets or sets the etag.",
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Gets or sets the created date and time property.",
          "type": "string"
        },
        "lastModifiedDateTime": {
          "format": "date-time",
          "description": "Gets or sets the last modified date and time property.",
          "type": "string"
        }
      }
    },
    "GetIngestionIndexResponseModelCollectionApiModel": {
      "description": "Contains an array of results that may be paginated.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The array of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetIngestionIndexResponse"
          }
        },
        "nextLink": {
          "description": "A link to the next set of paginated results, if there are more results available; not present otherwise.",
          "type": "string"
        }
      }
    },
    "IngestionDocumentRequest": {
      "description": "Represents a document ingestion request in the JSON document.",
      "required": [
        "documentUrl",
        "mode"
      ],
      "type": "object",
      "properties": {
        "mode": {
          "description": "Gets or sets the mode of the ingestion for document.",
          "enum": [
            "add",
            "update",
            "remove"
          ],
          "type": "string"
        },
        "documentId": {
          "description": "Gets or sets the document ID.",
          "type": "string"
        },
        "documentUrl": {
          "format": "uri",
          "description": "Gets or sets the document URL. Shared access signature (SAS), if any, will be removed from the URL.",
          "type": "string"
        },
        "metadata": {
          "description": "Gets or sets the metadata for the document as a dictionary of name-value pairs.",
          "type": "object",
          "additionalProperties": {}
        },
        "userData": {
          "description": "Gets or sets the user data for the document.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "IngestionDocumentResponse": {
      "description": "Represents an ingestion document response object in the JSON document.",
      "type": "object",
      "properties": {
        "documentId": {
          "description": "Gets or sets the document ID.",
          "type": "string"
        },
        "documentUrl": {
          "format": "uri",
          "description": "Gets or sets the document URL. Shared access signature (SAS), if any, will be removed from the URL.",
          "type": "string"
        },
        "metadata": {
          "description": "Gets or sets the key-value pairs of metadata.",
          "type": "object",
          "additionalProperties": {}
        },
        "error": {
          "$ref": "#/definitions/ErrorResponseDetails"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Gets or sets the created date and time of the document.",
          "type": "string"
        },
        "lastModifiedDateTime": {
          "format": "date-time",
          "description": "Gets or sets the last modified date and time of the document.",
          "type": "string"
        },
        "userData": {
          "description": "Gets or sets the user data for the document.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "IngestionDocumentResponseModelCollectionApiModel": {
      "description": "Contains an array of results that may be paginated.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The array of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IngestionDocumentResponse"
          }
        },
        "nextLink": {
          "description": "A link to the next set of paginated results, if there are more results available; not present otherwise.",
          "type": "string"
        }
      }
    },
    "IngestionErrorDetails": {
      "description": "Represents the ingestion error information for each document.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "Error message.",
          "type": "string"
        },
        "innerError": {
          "$ref": "#/definitions/IngestionInnerErrorDetails"
        }
      }
    },
    "IngestionInnerErrorDetails": {
      "description": "Represents the ingestion inner-error information for each document.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "Error message.",
          "type": "string"
        },
        "innerError": {
          "$ref": "#/definitions/IngestionInnerErrorDetails"
        }
      }
    },
    "IngestionResponse": {
      "description": "Represents the ingestion response model for the JSON document.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name of the ingestion.",
          "type": "string"
        },
        "state": {
          "description": "Gets or sets the state of the ingestion.",
          "enum": [
            "notStarted",
            "running",
            "completed",
            "failed",
            "partiallySucceeded"
          ],
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/ErrorResponseDetails"
        },
        "batchName": {
          "description": "The name of the batch associated with this ingestion.",
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Gets or sets the created date and time of the ingestion.",
          "type": "string"
        },
        "lastModifiedDateTime": {
          "format": "date-time",
          "description": "Gets or sets the last modified date and time of the ingestion.",
          "type": "string"
        },
        "fileStatusDetails": {
          "description": "The list of ingestion statuses for each document.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IngestionStatusDetails"
          }
        }
      }
    },
    "IngestionResponseModelCollectionApiModel": {
      "description": "Contains an array of results that may be paginated.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The array of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IngestionResponse"
          }
        },
        "nextLink": {
          "description": "A link to the next set of paginated results, if there are more results available; not present otherwise.",
          "type": "string"
        }
      }
    },
    "IngestionStatusDetails": {
      "description": "Represents the ingestion status detail for each document.",
      "required": [
        "documentId",
        "lastUpdateTime",
        "succeeded"
      ],
      "type": "object",
      "properties": {
        "lastUpdateTime": {
          "format": "date-time",
          "description": "Status update time of the batch chunk.",
          "type": "string"
        },
        "documentId": {
          "description": "The document ID.",
          "type": "string"
        },
        "documentUrl": {
          "format": "uri",
          "description": "The url of the document.",
          "type": "string"
        },
        "succeeded": {
          "description": "A flag to indicate if inference was successful.",
          "type": "boolean"
        },
        "error": {
          "$ref": "#/definitions/IngestionErrorDetails"
        }
      }
    },
    "MetadataSchema": {
      "description": "Represents the metadata schema for the document.",
      "required": [
        "fields"
      ],
      "type": "object",
      "properties": {
        "fields": {
          "description": "Gets or sets the list of fields in the metadata schema.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataSchemaField"
          }
        }
      }
    },
    "MetadataSchemaField": {
      "description": "Represents a field in the metadata schema.",
      "required": [
        "filterable",
        "name",
        "searchable",
        "type"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name of the field.",
          "maxLength": 36,
          "minLength": 1,
          "type": "string"
        },
        "searchable": {
          "description": "Gets or sets a value indicating whether the field is searchable.",
          "type": "boolean"
        },
        "filterable": {
          "description": "Gets or sets a value indicating whether the field is filterable.",
          "type": "boolean"
        },
        "type": {
          "description": "Gets or sets the type of the field. It could be string or datetime.",
          "enum": [
            "string",
            "datetime"
          ],
          "type": "string"
        }
      }
    },
    "SearchFilters": {
      "description": "Represents the filters to apply on a search query.",
      "type": "object",
      "properties": {
        "stringFilters": {
          "description": "Gets or sets the string filters to apply on the search query.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StringFilter"
          }
        },
        "datetimeFilters": {
          "description": "Gets or sets the datetime filters to apply on the search query.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatetimeFilter"
          }
        },
        "featureFilters": {
          "description": "Gets or sets the feature filters to apply on the search query.",
          "type": "array",
          "items": {
            "enum": [
              "vision",
              "speech",
              "ocr"
            ],
            "type": "string"
          }
        }
      }
    },
    "SearchQueryTextRequest": {
      "description": "Represents a search query request model for text-based search.",
      "required": [
        "disableMetadataSearch",
        "queryText",
        "skip"
      ],
      "type": "object",
      "properties": {
        "queryText": {
          "description": "Gets or sets the query text.",
          "minLength": 1,
          "type": "string"
        },
        "filters": {
          "$ref": "#/definitions/SearchFilters"
        },
        "moderation": {
          "description": "Gets or sets a boolean value indicating whether the moderation is enabled or disabled.",
          "type": "boolean"
        },
        "top": {
          "format": "int32",
          "description": "Gets or sets the number of results to retrieve.",
          "minimum": 1,
          "type": "integer"
        },
        "skip": {
          "format": "int32",
          "description": "Gets or sets the number of results to skip.",
          "minimum": 0,
          "type": "integer"
        },
        "additionalIndexNames": {
          "description": "Gets or sets the additional index names to include in the search query.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disableMetadataSearch": {
          "description": "Gets or sets a boolean value indicating whether metadata is disabled in the search or not.",
          "type": "boolean"
        }
      }
    },
    "SearchResultDocument": {
      "description": "Represents a search query response.",
      "required": [
        "confidence"
      ],
      "type": "object",
      "properties": {
        "documentId": {
          "description": "Gets or sets the ID of the document.",
          "type": "string"
        },
        "documentKind": {
          "description": "Gets or sets the kind of the document.",
          "type": "string"
        },
        "start": {
          "description": "Gets or sets the start time of the document. This property is only applicable for video documents.",
          "type": "string"
        },
        "end": {
          "description": "Gets or sets the end time of the document. This property is only applicable for video documents.",
          "type": "string"
        },
        "best": {
          "description": "Gets or sets the timestamp of the document with highest relevance score. This property is only applicable for video documents.",
          "type": "string"
        },
        "confidence": {
          "format": "double",
          "description": "Gets or sets the confidence score of the document.",
          "type": "number"
        },
        "additionalMetadata": {
          "description": "Gets or sets the additional metadata related to search.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "SearchResultDocumentModelCollectionApiModel": {
      "description": "Contains an array of results that may be paginated.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The array of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultDocument"
          }
        },
        "nextLink": {
          "description": "A link to the next set of paginated results, if there are more results available; not present otherwise.",
          "type": "string"
        }
      }
    },
    "StringFilter": {
      "description": "Represents a string filter to apply on a search query.",
      "required": [
        "fieldName",
        "values"
      ],
      "type": "object",
      "properties": {
        "fieldName": {
          "description": "Gets or sets the name of the field to filter on.",
          "maxLength": 36,
          "minLength": 1,
          "type": "string"
        },
        "values": {
          "description": "Gets or sets the values to filter on.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateIngestionIndexRequest": {
      "description": "Represents the update ingestion index request model for the JSON document.",
      "type": "object",
      "properties": {
        "metadataSchema": {
          "$ref": "#/definitions/MetadataSchema"
        },
        "userData": {
          "description": "Gets or sets the user data for the document.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "AdultMatch": {
      "description": "An object describing adult content match.",
      "required": [
        "confidence",
        "isMatch"
      ],
      "type": "object",
      "properties": {
        "isMatch": {
          "description": "A value indicating if the image is matched adult content.",
          "type": "boolean"
        },
        "confidence": {
          "format": "double",
          "description": "A value indicating the confidence level of matched adult content.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "AdultResult": {
      "description": "An object describing whether the image contains adult-oriented content and/or is racy.",
      "required": [
        "adult",
        "gore",
        "racy"
      ],
      "type": "object",
      "properties": {
        "adult": {
          "$ref": "#/definitions/AdultMatch"
        },
        "racy": {
          "$ref": "#/definitions/AdultMatch"
        },
        "gore": {
          "$ref": "#/definitions/AdultMatch"
        }
      }
    },
    "BoundingBox": {
      "description": "A bounding box for an area inside an image.",
      "required": [
        "h",
        "w",
        "x",
        "y"
      ],
      "type": "object",
      "properties": {
        "x": {
          "format": "int32",
          "description": "Left-coordinate of the top left point of the area, in pixels.",
          "minimum": 0,
          "type": "integer"
        },
        "y": {
          "format": "int32",
          "description": "Top-coordinate of the top left point of the area, in pixels.",
          "minimum": 0,
          "type": "integer"
        },
        "w": {
          "format": "int32",
          "description": "Width measured from the top-left point of the area, in pixels.",
          "minimum": 1,
          "type": "integer"
        },
        "h": {
          "format": "int32",
          "description": "Height measured from the top-left point of the area, in pixels.",
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "CaptionResult": {
      "description": "A brief description of what the image depicts.",
      "required": [
        "confidence",
        "text"
      ],
      "type": "object",
      "properties": {
        "text": {
          "description": "The text of the caption.",
          "minLength": 1,
          "type": "string"
        },
        "confidence": {
          "format": "double",
          "description": "The level of confidence the service has in the caption.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "CropRegion": {
      "description": "A region identified for smart cropping. There will be one region returned for each requested aspect ratio.",
      "required": [
        "aspectRatio",
        "boundingBox"
      ],
      "type": "object",
      "properties": {
        "aspectRatio": {
          "format": "double",
          "description": "The aspect ratio of the crop region.",
          "type": "number"
        },
        "boundingBox": {
          "$ref": "#/definitions/BoundingBox"
        }
      }
    },
    "DenseCaption": {
      "description": "A brief description of what the image depicts.",
      "required": [
        "confidence",
        "text"
      ],
      "type": "object",
      "properties": {
        "text": {
          "description": "The text of the caption.",
          "minLength": 1,
          "type": "string"
        },
        "confidence": {
          "format": "double",
          "description": "The level of confidence the service has in the caption.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        },
        "boundingBox": {
          "$ref": "#/definitions/BoundingBox"
        }
      }
    },
    "DenseCaptionsResult": {
      "description": "A list of captions.",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "description": "A list of captions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DenseCaption"
          }
        }
      }
    },
    "Description": {
      "description": "A brief description of what the image depicts.",
      "required": [
        "confidence",
        "text"
      ],
      "type": "object",
      "properties": {
        "text": {
          "description": "The text of the caption.",
          "minLength": 1,
          "type": "string"
        },
        "confidence": {
          "format": "double",
          "description": "The level of confidence the service has in the caption.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "DescriptionResult": {
      "description": "A list of descriptions sorted by confidence level.",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "description": "A list of descriptions sorted by confidence level.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Description"
          }
        }
      }
    },
    "DetectedObject": {
      "description": "Describes a detected object in an image.",
      "required": [
        "boundingBox",
        "tags"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the detected object.",
          "minLength": 1,
          "type": "string"
        },
        "boundingBox": {
          "$ref": "#/definitions/BoundingBox"
        },
        "tags": {
          "description": "Classification confidences of the detected object.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "DetectedPerson": {
      "description": "A person detected in an image.",
      "required": [
        "boundingBox",
        "confidence"
      ],
      "type": "object",
      "properties": {
        "boundingBox": {
          "$ref": "#/definitions/BoundingBox"
        },
        "confidence": {
          "format": "double",
          "description": "Confidence score of having observed the person in the image, as a value ranging from 0 to 1.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "DocumentLanguage": {
      "description": "An object representing the detected language for a given text span.",
      "required": [
        "confidence",
        "languageCode",
        "spans"
      ],
      "type": "object",
      "properties": {
        "spans": {
          "description": "Location of the text elements in the concatenated content the language applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        },
        "languageCode": {
          "description": "Detected language. Value may an ISO 639-1 language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"zh-Hans\").",
          "minLength": 1,
          "type": "string"
        },
        "confidence": {
          "format": "double",
          "description": "Confidence of correctly identifying the language.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "DocumentLine": {
      "description": "A content line object consisting of an adjacent sequence of content elements, such as words and selection marks.",
      "required": [
        "boundingBox",
        "content",
        "spans"
      ],
      "type": "object",
      "properties": {
        "content": {
          "description": "Concatenated content of the contained elements in reading order.",
          "minLength": 1,
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of the line.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "spans": {
          "description": "Location of the line in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        }
      }
    },
    "DocumentPage": {
      "description": "The content and layout elements extracted from a page from the input.",
      "required": [
        "angle",
        "height",
        "lines",
        "pageNumber",
        "spans",
        "width",
        "words"
      ],
      "type": "object",
      "properties": {
        "height": {
          "format": "double",
          "description": "The height of the image/PDF in pixels/inches, respectively.",
          "type": "number"
        },
        "width": {
          "format": "double",
          "description": "The width of the image/PDF in pixels/inches, respectively.",
          "type": "number"
        },
        "angle": {
          "format": "double",
          "description": "The general orientation of the content in clockwise direction, measured in degrees between (-180, 180].",
          "type": "number"
        },
        "pageNumber": {
          "format": "int32",
          "description": "1-based page number in the input document.",
          "type": "integer"
        },
        "words": {
          "description": "Extracted words from the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentWord"
          }
        },
        "spans": {
          "description": "Location of the page in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        },
        "lines": {
          "description": "Extracted lines from the page, potentially containing both textual and visual elements.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentLine"
          }
        }
      }
    },
    "DocumentSpan": {
      "description": "Contiguous region of the concatenated content property, specified as an offset and length.",
      "required": [
        "length",
        "offset"
      ],
      "type": "object",
      "properties": {
        "offset": {
          "format": "int32",
          "description": "Zero-based index of the content represented by the span.",
          "type": "integer"
        },
        "length": {
          "format": "int32",
          "description": "Number of characters in the content represented by the span.",
          "type": "integer"
        }
      }
    },
    "DocumentStyle": {
      "description": "An object representing observed text styles.",
      "required": [
        "spans"
      ],
      "type": "object",
      "properties": {
        "isHandwritten": {
          "description": "Is content handwritten or not.",
          "type": "boolean"
        },
        "spans": {
          "description": "Location of the text elements in the concatenated content the style applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        },
        "confidence": {
          "format": "double",
          "description": "Confidence of correctly identifying the style.",
          "type": "number"
        }
      }
    },
    "DocumentWord": {
      "description": "A word object consisting of a contiguous sequence of characters. For non-space delimited languages,\r\nsuch as Chinese, Japanese, and Korean, each character is represented as its own word.",
      "required": [
        "boundingBox",
        "confidence",
        "content",
        "span"
      ],
      "type": "object",
      "properties": {
        "content": {
          "description": "Text content of the word.",
          "minLength": 1,
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of the word.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "confidence": {
          "format": "double",
          "description": "Confidence of correctly extracting the word.",
          "type": "number"
        },
        "span": {
          "$ref": "#/definitions/DocumentSpan"
        }
      }
    },
    "ErrorResponse": {
      "description": "Response returned when an error occurs.",
      "required": [
        "error"
      ],
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorResponseDetails"
        }
      }
    },
    "ErrorResponseDetails": {
      "description": "Error info.",
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "Error message.",
          "type": "string"
        },
        "target": {
          "description": "Target of the error.",
          "type": "string"
        },
        "details": {
          "description": "List of detailed errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorResponseDetails"
          }
        },
        "innererror": {
          "$ref": "#/definitions/ErrorResponseInnerError"
        }
      }
    },
    "ErrorResponseInnerError": {
      "description": "Detailed error.",
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "Error message.",
          "type": "string"
        },
        "innererror": {
          "$ref": "#/definitions/ErrorResponseInnerError"
        }
      }
    },
    "FixtureApiModel": {
      "description": "Describes a fixture in a planogram.",
      "required": [
        "h",
        "id",
        "w",
        "x",
        "y"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the fixture.",
          "minLength": 1,
          "type": "string"
        },
        "w": {
          "format": "double",
          "description": "Width of the fixture.",
          "type": "number"
        },
        "h": {
          "format": "double",
          "description": "Height of the fixture.",
          "type": "number"
        },
        "x": {
          "format": "double",
          "description": "Left offset from the origin, in unit of in inches or centimeters.",
          "minimum": 0,
          "type": "number"
        },
        "y": {
          "format": "double",
          "description": "Top offset from the origin, in unit of in inches or centimeters.",
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "ImageAnalysisResult": {
      "description": "Describe the combined results of different types of image analysis.",
      "required": [
        "metadata",
        "modelVersion"
      ],
      "type": "object",
      "properties": {
        "customModelResult": {
          "$ref": "#/definitions/ImagePredictionResult"
        },
        "captionResult": {
          "$ref": "#/definitions/CaptionResult"
        },
        "objectsResult": {
          "$ref": "#/definitions/ObjectsResult"
        },
        "readResult": {
          "$ref": "#/definitions/ReadResult"
        },
        "denseCaptionsResult": {
          "$ref": "#/definitions/DenseCaptionsResult"
        },
        "modelVersion": {
          "description": "Model Version.",
          "minLength": 1,
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/ImageMetadataApiModel"
        },
        "tagsResult": {
          "$ref": "#/definitions/TagsResult"
        },
        "adultResult": {
          "$ref": "#/definitions/AdultResult"
        },
        "smartCropsResult": {
          "$ref": "#/definitions/SmartCropsResult"
        },
        "peopleResult": {
          "$ref": "#/definitions/PeopleResult"
        }
      }
    },
    "ImageMetadataApiModel": {
      "description": "The image metadata information such as height and width.",
      "required": [
        "height",
        "width"
      ],
      "type": "object",
      "properties": {
        "width": {
          "format": "int32",
          "description": "The width of the image in pixels.",
          "minimum": 1,
          "type": "integer"
        },
        "height": {
          "format": "int32",
          "description": "The height of the image in pixels.",
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "ImagePredictionResult": {
      "description": "Describes the prediction result of an image.",
      "type": "object",
      "properties": {
        "tagsResult": {
          "$ref": "#/definitions/TagsResult"
        },
        "objectsResult": {
          "$ref": "#/definitions/ObjectsResult"
        }
      }
    },
    "ImageRectificationControlPointsApiModel": {
      "description": "Four corner control points for rectification. The origin is at top-left.",
      "required": [
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight"
      ],
      "type": "object",
      "properties": {
        "topLeft": {
          "$ref": "#/definitions/NormalizedCoordinateApiModel"
        },
        "topRight": {
          "$ref": "#/definitions/NormalizedCoordinateApiModel"
        },
        "bottomLeft": {
          "$ref": "#/definitions/NormalizedCoordinateApiModel"
        },
        "bottomRight": {
          "$ref": "#/definitions/NormalizedCoordinateApiModel"
        }
      }
    },
    "ImageRectificationRequestApiModel": {
      "description": "Image rectification input.",
      "required": [
        "controlPoints",
        "url"
      ],
      "type": "object",
      "properties": {
        "url": {
          "format": "uri",
          "description": "Source image blob URL.",
          "type": "string"
        },
        "controlPoints": {
          "$ref": "#/definitions/ImageRectificationControlPointsApiModel"
        }
      }
    },
    "ImageStitchingRequestApiModel": {
      "description": "Image stitching input.",
      "required": [
        "images"
      ],
      "type": "object",
      "properties": {
        "images": {
          "description": "Source images to stitch.",
          "maxItems": 20,
          "minItems": 2,
          "type": "array",
          "items": {
            "format": "uri",
            "type": "string"
          }
        }
      }
    },
    "ImageUrl": {
      "description": "A JSON document with a URL pointing to the image that is to be analyzed.",
      "required": [
        "url"
      ],
      "type": "object",
      "properties": {
        "url": {
          "description": "Publicly reachable URL of an image.",
          "type": "string"
        }
      }
    },
    "NormalizedCoordinateApiModel": {
      "description": "Normalized XY-coordinate.",
      "required": [
        "x",
        "y"
      ],
      "type": "object",
      "properties": {
        "x": {
          "format": "double",
          "description": "Horizontal coordinate.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        },
        "y": {
          "format": "double",
          "description": "Vertical coordinate.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "ObjectsResult": {
      "description": "Describes detected objects in an image.",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "description": "An array of detected objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DetectedObject"
          }
        }
      }
    },
    "PeopleResult": {
      "description": "An object describing whether the image contains people.",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "description": "An array of detected people.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DetectedPerson"
          }
        }
      }
    },
    "PlanogramApiModel": {
      "description": "Describes the planogram for planogram matching operations.",
      "required": [
        "fixtures",
        "height",
        "positions",
        "products",
        "width"
      ],
      "type": "object",
      "properties": {
        "width": {
          "format": "double",
          "description": "Width of the planogram.",
          "type": "number"
        },
        "height": {
          "format": "double",
          "description": "Height of the planogram.",
          "type": "number"
        },
        "products": {
          "description": "List of products in the planogram.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductApiModel"
          }
        },
        "fixtures": {
          "description": "List of fixtures in the planogram.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/FixtureApiModel"
          }
        },
        "positions": {
          "description": "List of positions in the planogram.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PositionApiModel"
          }
        }
      }
    },
    "PlanogramMatchingRequestApiModel": {
      "description": "Input to pass into the planogram matching operation.",
      "required": [
        "detectedProducts",
        "planogram"
      ],
      "type": "object",
      "properties": {
        "detectedProducts": {
          "$ref": "#/definitions/ProductRecognitionResultApiModel"
        },
        "planogram": {
          "$ref": "#/definitions/PlanogramApiModel"
        }
      }
    },
    "PlanogramMatchingResultApiModel": {
      "description": "Results from the planogram matching operation.",
      "required": [
        "matchingResultPerPosition"
      ],
      "type": "object",
      "properties": {
        "matchingResultPerPosition": {
          "description": "The matched detected object information for each planogram position.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PositionMatchingResultApiModel"
          }
        }
      }
    },
    "PositionApiModel": {
      "description": "Describes a product position in a planogram.",
      "required": [
        "fixtureId",
        "id",
        "productId",
        "x",
        "y"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the position.",
          "minLength": 1,
          "type": "string"
        },
        "productId": {
          "description": "Id of the product.",
          "minLength": 1,
          "type": "string"
        },
        "fixtureId": {
          "description": "Id of the fixture that the product is on.",
          "minLength": 1,
          "type": "string"
        },
        "x": {
          "format": "double",
          "description": "Left offset from the origin, in unit of in inches or centimeters.",
          "minimum": 0,
          "type": "number"
        },
        "y": {
          "format": "double",
          "description": "Top offset from the origin, in unit of in inches or centimeters.",
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "PositionMatchingResultApiModel": {
      "description": "Paired planogram position ID and corresponding detected object from product understanding result.",
      "required": [
        "detectedObject",
        "positionId"
      ],
      "type": "object",
      "properties": {
        "positionId": {
          "description": "The position ID from the planogram matched to the corresponding detected object.",
          "minLength": 1,
          "type": "string"
        },
        "detectedObject": {
          "$ref": "#/definitions/DetectedObject"
        }
      }
    },
    "ProductApiModel": {
      "description": "Describes a product in the planogram.",
      "required": [
        "h",
        "id",
        "name",
        "w"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the product.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the product.",
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "w": {
          "format": "double",
          "description": "Width of the product.",
          "type": "number"
        },
        "h": {
          "format": "double",
          "description": "Height of the fixture.",
          "type": "number"
        }
      }
    },
    "ProductRecognitionApiModel": {
      "required": [
        "createdDateTime",
        "modelName",
        "result",
        "runName",
        "status",
        "updatedDateTime"
      ],
      "type": "object",
      "properties": {
        "runName": {
          "description": "Read only. The name that is used to uniquely identify the product recognition run.",
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$",
          "type": "string"
        },
        "modelName": {
          "description": "Read only. The model to run product recognition against.",
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$",
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Read only. The date and time when the product recognition run was first created, in UTC.",
          "type": "string"
        },
        "updatedDateTime": {
          "format": "date-time",
          "description": "Read only. The date and time when the product recognition run was last updated, in UTC.",
          "type": "string"
        },
        "status": {
          "description": "Read only. The current state of the product recognition run.",
          "enum": [
            "notStarted",
            "running",
            "succeeded",
            "failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ProductRecognitionState",
            "modelAsString": true
          }
        },
        "error": {
          "$ref": "#/definitions/ErrorResponseDetails"
        },
        "result": {
          "$ref": "#/definitions/ProductRecognitionResultApiModel"
        }
      }
    },
    "ProductRecognitionApiModelCollectionApiModel": {
      "description": "Contains an array of results that may be paginated.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The array of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRecognitionApiModel"
          }
        },
        "nextLink": {
          "description": "A link to the next set of paginated results, if there are more results available; not present otherwise.",
          "type": "string"
        }
      }
    },
    "ProductRecognitionResultApiModel": {
      "description": "Results from the product understanding operation.",
      "required": [
        "gaps",
        "imageMetadata",
        "products"
      ],
      "type": "object",
      "properties": {
        "imageMetadata": {
          "$ref": "#/definitions/ImageMetadataApiModel"
        },
        "products": {
          "description": "Products detected in the image.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DetectedObject"
          }
        },
        "gaps": {
          "description": "Gaps detected in the image.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DetectedObject"
          }
        }
      }
    },
    "ReadResult": {
      "description": "The results of an Read operation.",
      "required": [
        "content",
        "pages",
        "stringIndexType"
      ],
      "type": "object",
      "properties": {
        "stringIndexType": {
          "description": "The method used to compute string offset and length, possible values include: 'textElements', 'unicodeCodePoint', 'utf16CodeUnit' etc.",
          "minLength": 1,
          "type": "string"
        },
        "content": {
          "description": "Concatenate string representation of all textual and visual elements in reading order.",
          "minLength": 1,
          "type": "string"
        },
        "pages": {
          "description": "A list of analyzed pages.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentPage"
          }
        },
        "styles": {
          "description": "Extracted font styles.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentStyle"
          }
        }
      }
    },
    "SingleVectorResultApiModel": {
      "description": "Results of image vectorization.",
      "type": "object",
      "properties": {
        "vector": {
          "description": "Vector of the image.",
          "type": "array",
          "items": {
            "format": "float",
            "type": "number"
          }
        },
        "modelVersion": {
          "description": "Model version.",
          "type": "string"
        }
      }
    },
    "SmartCropsResult": {
      "description": "Smart cropping result.",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "description": "Recommended regions for cropping the image.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CropRegion"
          }
        }
      }
    },
    "Tag": {
      "description": "An entity observation in the image, along with the confidence score.",
      "required": [
        "confidence",
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the entity.",
          "minLength": 1,
          "type": "string"
        },
        "confidence": {
          "format": "double",
          "description": "The level of confidence that the entity was observed.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "TagsResult": {
      "description": "A list of tags with confidence level.",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "description": "A list of tags with confidence level.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "VectorizeTextRequestApiModel": {
      "description": "Model for VectorizeText request.",
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "text": {
          "description": "Text for vectorization.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "Dataset": {
      "description": "Describes a dataset, which represents a set of images and annotations that can be used for training or testing a model.",
      "type": "object",
      "properties": {
        "annotationKind": {
          "description": "The kind of annotations contained in the annotation files.\r\nFor example, \"ImageClassification\" to specify that the annotation file contain object labels for training or testing a multiclass image classification model.",
          "enum": [
            "imageClassification",
            "imageObjectDetection"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AnnotationKind",
            "modelAsString": true
          }
        },
        "annotationFileUris": {
          "description": "List of absolute URIs to annotation files, each of which must be stored as a blob in an Azure Storage blob container.\r\nEach file must follow the COCO format for the specified AnnotationKind, with each image path being an absolute URI to a blob in a blob container.\r\nThe Computer Vision resource must have permission to read the annotation files and all referenced image files.\r\nThis can be done by turning on System managed identities for the Computer Vision resource, then assigning the identity to a role that has permission to read from the blob container containing the annotation and image files.",
          "maxItems": 10,
          "type": "array",
          "items": {
            "format": "uri",
            "type": "string"
          }
        },
        "customProperties": {
          "description": "Dictionary of arbitrary key-value pairs for use by the application. A maximum of 10 key-value pairs are allowed.",
          "maxLength": 10,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Read only. The name that is used to uniquely identify the dataset.",
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$",
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Read only. The date and time when the dataset was first registered, in UTC.",
          "type": "string"
        },
        "updatedDateTime": {
          "format": "date-time",
          "description": "Read only. The date and time when the dataset was last updated, in UTC.",
          "type": "string"
        },
        "eTag": {
          "description": "Read only. The latest ETag for the dataset. May be used with the 'If-Match' header when updating or deleting a dataset.",
          "type": "string"
        },
        "authentication": {
          "$ref": "#/definitions/StorageAuthenticationSettingsApiModel"
        }
      }
    },
    "DatasetApiModelCollectionApiModel": {
      "description": "Contains an array of results that may be paginated.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The array of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dataset"
          }
        },
        "nextLink": {
          "description": "A link to the next set of paginated results, if there are more results available; not present otherwise.",
          "type": "string"
        }
      }
    },
    "Model": {
      "description": "Describes a training run for training a custom model.",
      "required": [
        "trainingParameters"
      ],
      "type": "object",
      "properties": {
        "trainingParameters": {
          "$ref": "#/definitions/TrainingParameters"
        },
        "name": {
          "description": "Read only. The name that is used to uniquely identify the training run.",
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$",
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Read only. The date and time when the training run was first created, in UTC.",
          "type": "string"
        },
        "updatedDateTime": {
          "format": "date-time",
          "description": "Read only. The date and time when the training run was last updated, in UTC.",
          "type": "string"
        },
        "status": {
          "description": "Read only. The current state of the training run.",
          "enum": [
            "notStarted",
            "training",
            "succeeded",
            "failed",
            "cancelling",
            "cancelled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ModelState",
            "modelAsString": true
          }
        },
        "trainingCostInMinutes": {
          "format": "int32",
          "description": "Read only. Actual training cost consumed, in minutes. Present only if the training run as completed.",
          "type": "integer",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/ErrorResponseDetails"
        },
        "modelPerformance": {
          "$ref": "#/definitions/ModelPerformance"
        },
        "evaluationParameters": {
          "$ref": "#/definitions/ModelEvaluationParameters"
        }
      }
    },
    "ModelApiModelCollectionApiModel": {
      "description": "Contains an array of results that may be paginated.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The array of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          }
        },
        "nextLink": {
          "description": "A link to the next set of paginated results, if there are more results available; not present otherwise.",
          "type": "string"
        }
      }
    },
    "ModelEvaluation": {
      "description": "Describes an evaluation run for evaluating the accuracy of a model using a test set.",
      "required": [
        "evaluationParameters"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Read only. The name that is used to uniquely identify the evaluation run.",
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$",
          "type": "string"
        },
        "modelName": {
          "description": "Read only. The model to evaluate.",
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$",
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Read only. The date and time when the evaluation run was first created, in UTC.",
          "type": "string"
        },
        "updatedDateTime": {
          "format": "date-time",
          "description": "Read only. The date and time when the evaluation run was last updated, in UTC.",
          "type": "string"
        },
        "status": {
          "description": "Read only. The current state of the evaluation run.",
          "enum": [
            "notStarted",
            "running",
            "succeeded",
            "failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ModelEvaluationState",
            "modelAsString": true
          }
        },
        "evaluationParameters": {
          "$ref": "#/definitions/ModelEvaluationParameters"
        },
        "error": {
          "$ref": "#/definitions/ErrorResponseDetails"
        },
        "modelPerformance": {
          "$ref": "#/definitions/ModelPerformance"
        }
      }
    },
    "ModelEvaluationApiModelCollectionApiModel": {
      "description": "Contains an array of results that may be paginated.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The array of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelEvaluation"
          }
        },
        "nextLink": {
          "description": "A link to the next set of paginated results, if there are more results available; not present otherwise.",
          "type": "string"
        }
      }
    },
    "ModelEvaluationParameters": {
      "description": "Parameters for specifying how a model is evaluated.",
      "type": "object",
      "properties": {
        "testDatasetName": {
          "description": "The dataset name used for testing.",
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$",
          "type": "string"
        }
      }
    },
    "ModelPerformance": {
      "description": "Performance metrics for a custom trained model.",
      "required": [
        "tagPerformance"
      ],
      "type": "object",
      "properties": {
        "accuracyTop1": {
          "format": "double",
          "description": "Read only. For multiclass classification models. The proportion of test samples where the ground truth class matches the predicted class.",
          "type": "number",
          "readOnly": true
        },
        "accuracyTop5": {
          "format": "double",
          "description": "Read only. For multiclass classification models. The proportion of test samples where the ground truth class is in the top five predicted classes.",
          "type": "number",
          "readOnly": true
        },
        "averagePrecision": {
          "format": "double",
          "description": "Read only. A measure of the model performance, it summarizes the precision and recall at different confidence thresholds.",
          "type": "number",
          "readOnly": true
        },
        "calibrationECE": {
          "format": "double",
          "description": "Read only. For multiclass classification models. Expected calibration error.",
          "type": "number",
          "readOnly": true
        },
        "meanAveragePrecision30": {
          "format": "double",
          "description": "Read only. For object detection models. Mean average precision at a threshold of 30%.",
          "type": "number",
          "readOnly": true
        },
        "meanAveragePrecision50": {
          "format": "double",
          "description": "Read only. For object detection models. Mean average precision at a threshold of 50%.",
          "type": "number",
          "readOnly": true
        },
        "meanAveragePrecision75": {
          "format": "double",
          "description": "Read only. For object detection models. Mean average precision at a threshold of 75%.",
          "type": "number",
          "readOnly": true
        },
        "tagPerformance": {
          "description": "Read only. Performance metrics for each tag recognized by the model.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ModelTagPerformance"
          }
        }
      }
    },
    "ModelTagPerformance": {
      "description": "Performance metrics for each tag recognized by a custom trained model.",
      "type": "object",
      "properties": {
        "accuracy": {
          "format": "double",
          "description": "Read only. For multiclass models. Tag accuracy.",
          "type": "number",
          "readOnly": true
        },
        "averagePrecision50": {
          "format": "double",
          "description": "Read only. For object detection models. Average precision at a threshold of 50%.",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "StorageAuthenticationSettingsApiModel": {
      "description": "Describes the storage authentication settings.",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "description": "The storage authentication kind.",
          "enum": [
            "none",
            "managedIdentity",
            "sas"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "StorageAuthenticationKind",
            "modelAsString": true
          }
        },
        "sasToken": {
          "description": "Optional. The sas token to access container. Only needed when Kind = Sas.",
          "type": "string"
        }
      }
    },
    "TrainingParameters": {
      "description": "Parameters for specifying how a training run trains a custom model.",
      "required": [
        "timeBudgetInHours",
        "trainingDatasetName"
      ],
      "type": "object",
      "properties": {
        "trainingDatasetName": {
          "description": "The dataset name used for training.",
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$",
          "type": "string"
        },
        "timeBudgetInHours": {
          "format": "int32",
          "description": "Time budget for training, in hours. The minimum allowed value is 1, and the maximum allowed value is 336 hours for GenericClassifier, 1344 hours for GenericDetector.\r\nThis is the maximum amount of compute time that will be spent to train the model.",
          "maximum": 1344,
          "minimum": 1,
          "type": "integer"
        },
        "modelKind": {
          "description": "Model kind.",
          "enum": [
            "Product-Recognizer",
            "Generic-Classifier",
            "Generic-Detector"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ModelKind",
            "modelAsString": true
          }
        }
      }
    }
  },
  "parameters": {
    "ApiVersion": {
      "in": "query",
      "name": "api-version",
      "description": "Requested API version.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "client"
    }
  },
  "x-ms-paths": {
    "/imageanalysis:segment?overload=stream": {
      "post": {
        "tags": [
          "Operations"
        ],
        "summary": "Analyze the input image. The request either contains an image stream with any content type ['image/*', 'application/octet-stream'], or a JSON payload which includes a url property to be used to retrieve the image stream. An image stream of content type 'image/png' is returned, where the pixel values depend on the analysis mode. The returned image has the same dimensions as the input image for modes: foregroundMatting. The returned image has the same aspect ratio and same dimensions as the input image up to a limit of 16 megapixels for modes: backgroundRemoval.",
        "operationId": "ImageAnalysis_SegmentFromImageStream",
        "consumes": [
          "application/octet-stream",
          "image/jpeg",
          "image/gif",
          "image/tiff",
          "image/bmp",
          "image/png"
        ],
        "produces": [
          "image/png",
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "mode",
            "description": "The analysis mode requested.",
            "type": "string",
            "enum": [
              "backgroundRemoval",
              "foregroundMatting"
            ],
            "x-ms-enum": {
              "name": "SegmentationMode",
              "modelAsString": true
            }
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "An image stream.",
            "required": true,
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "Segment_BackgroundRemoval_FromImageStream": {
            "$ref": "./examples/Segment_BackgroundRemoval_FromImageStream.json"
          },
          "Segment_ForegroundMatting_FromImageStream": {
            "$ref": "./examples/Segment_ForegroundMatting_FromImageStream.json"
          }
        }
      }
    },
    "/retrieval:vectorizeImage?overload=stream": {
      "post": {
        "tags": [
          "ImageRetrieval"
        ],
        "summary": "Return vector from an image.",
        "operationId": "ImageRetrieval_VectorizeImageFromImageStream",
        "consumes": [
          "application/octet-stream",
          "image/jpeg",
          "image/gif",
          "image/tiff",
          "image/bmp",
          "image/png"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "model-version",
            "description": "Model version.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "An image stream.",
            "required": true,
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SingleVectorResultApiModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ImageRetrieval_VectorizeImageFromImageStream": {
            "$ref": "./examples/ImageRetrieval_VectorizeImageFromImageStream.json"
          }
        }
      }
    },
    "/imageanalysis:analyze?overload=stream": {
      "post": {
        "tags": [
          "Operations"
        ],
        "summary": "Analyze the input image. The request either contains image stream with any content type ['image/*', 'application/octet-stream'], or a JSON payload which includes an url property to be used to retrieve the image stream.",
        "operationId": "ImageAnalysis_AnalyzeFromImageStream",
        "consumes": [
          "application/octet-stream",
          "image/jpeg",
          "image/gif",
          "image/tiff",
          "image/bmp",
          "image/png"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "features",
            "description": "The visual features requested: tags, objects, caption, denseCaptions, read, smartCrops, people. This parameter needs to be specified if the parameter \"model-name\" is not specified.",
            "type": "array",
            "items": {
              "enum": [
                "tags",
                "caption",
                "denseCaptions",
                "objects",
                "read",
                "smartCrops",
                "people"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "VisualFeature",
                "modelAsString": true
              }
            },
            "collectionFormat": "csv"
          },
          {
            "in": "query",
            "name": "model-name",
            "description": "The name of the custom trained model. This parameter needs to be specified if the parameter \"features\" is not specified.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The desired language for output generation. If this parameter is not specified, the default value is \"en\". See https://aka.ms/cv-languages for a list of supported languages.",
            "type": "string",
            "default": "en"
          },
          {
            "in": "query",
            "name": "smartcrops-aspect-ratios",
            "description": "A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive). Multiple values should be comma-separated. If this parameter is not specified, the service will return one crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gender-neutral-caption",
            "description": "Boolean flag for enabling gender-neutral captioning for caption and denseCaptions features. If this parameter is not specified, the default value is \"false\".",
            "type": "boolean",
            "default": false
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "in": "body",
            "name": "body",
            "description": "An image stream.",
            "required": true,
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ImageAnalysisResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "AnalyzeImageFromImageStream_CustomModel": {
            "$ref": "./examples/AnalyzeImageFromImageStream_CustomModel.json"
          }
        }
      }
    }
  }
}
