{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Face Client",
    "description": "An API for face detection, verification, and identification."
  },
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}/face/v1.0",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  },
  "paths": {
    "/findsimilars": {
      "post": {
        "description": "Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a large face list.",
        "operationId": "Face_FindSimilar",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body for Find Similar.",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/FindSimilarRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of the most similar faces represented in faceId if the input parameter is faceIds or persistedFaceId if the input parameter is faceListId.",
            "schema": {
              "$ref": "#/definitions/SimilarFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Find similar results example": {
            "$ref": "./examples/FindSimilar.json"
          }
        }
      }
    },
    "/group": {
      "post": {
        "description": "Divide candidate faces into groups based on face similarity.",
        "operationId": "Face_Group",
        "parameters": [
          {
            "name": "body",
            "description": "Request body for grouping.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/GroupRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns one or more groups of similar faces (rank by group size) and a messyGroup.",
            "schema": {
              "$ref": "#/definitions/GroupResult"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Group example": {
            "$ref": "./examples/Group.json"
          }
        }
      }
    },
    "/identify": {
      "post": {
        "description": "1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.",
        "operationId": "Face_Identify",
        "parameters": [
          {
            "name": "body",
            "description": "Request body for identify operation.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/IdentifyRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the identified candidate person(s) for each query face.",
            "schema": {
              "$ref": "#/definitions/IdentifyResults"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Identiy example": {
            "$ref": "./examples/Identify.json"
          }
        }
      }
    },
    "/verify": {
      "post": {
        "description": "Verify whether two faces belong to a same person or whether one face belongs to a person.",
        "operationId": "Face_VerifyFaceToFace",
        "parameters": [
          {
            "name": "body",
            "description": "Request body for face to face verification.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/VerifyFaceToFaceRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the verification result.",
            "schema": {
              "$ref": "#/definitions/VerifyResult"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Verify faces example": {
            "$ref": "./examples/VerifyFaceToFace.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons": {
      "post": {
        "description": "Create a new person in a specified person group.",
        "operationId": "PersonGroupPerson_Create",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "name": "body",
            "description": "Request body for creating new person.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new personId created.",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new person for person group example": {
            "$ref": "./examples/CreateNewPersonGroupPerson.json"
          }
        }
      },
      "get": {
        "description": "List all persons in a person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).",
        "operationId": "PersonGroupPerson_List",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "name": "start",
            "description": "Starting person id to return (used to list a range of persons).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "description": "Number of persons to return starting with the person id indicated by the 'start' parameter.",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person information that belong to the person group.",
            "schema": {
              "$ref": "#/definitions/Persons"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List persons in person group": {
            "$ref": "./examples/ListPersonGroupPersons.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}": {
      "delete": {
        "description": "Delete an existing person from a person group. All stored person data, and face features in the person entry will be deleted.",
        "operationId": "PersonGroupPerson_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete an existing person example": {
            "$ref": "./examples/DeletePersonGroupPerson.json"
          }
        }
      },
      "get": {
        "description": "Retrieve a person's information, including registered persisted faces, name and userData.",
        "operationId": "PersonGroupPerson_Get",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person's information.",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get person example": {
            "$ref": "./examples/GetPersonGroupPerson.json"
          }
        }
      },
      "patch": {
        "description": "Update name or userData of a person.",
        "operationId": "PersonGroupPerson_Update",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "name": "body",
            "description": "Request body for person update operation.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update person example": {
            "$ref": "./examples/UpdatePersonGroupPerson.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete a face from a person. Relative feature for the persisted face will also be deleted.",
        "operationId": "PersonGroupPerson_DeleteFace",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete face from person example": {
            "$ref": "./examples/DeletePersonGroupPersonFace.json"
          }
        }
      },
      "get": {
        "description": "Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging personGroupId).",
        "operationId": "PersonGroupPerson_GetFace",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get persisted face example": {
            "$ref": "./examples/GetPersonGroupPersistedFace.json"
          }
        }
      },
      "patch": {
        "description": "Update a person persisted face's userData field.",
        "operationId": "PersonGroupPerson_UpdateFace",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          },
          {
            "name": "body",
            "description": "Request body for updating persisted face.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/UpdateFaceRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update person face example": {
            "$ref": "./examples/UpdatePersonGroupPersonFace.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}": {
      "put": {
        "description": "Create a new person group with specified personGroupId, name and user-provided userData.",
        "operationId": "PersonGroup_Create",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "name": "body",
            "description": "Request body for creating new person group.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new person group example": {
            "$ref": "./examples/CreateNewPersonGroup.json"
          }
        }
      },
      "delete": {
        "description": "Delete an existing person group. Persisted face features of all people in the person group will also be deleted.",
        "operationId": "PersonGroup_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete a person group example": {
            "$ref": "./examples/DeletePersonGroup.json"
          }
        }
      },
      "get": {
        "description": "Retrieve the information of a person group, including its name and userData.",
        "operationId": "PersonGroup_Get",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person group's information.",
            "schema": {
              "$ref": "#/definitions/PersonGroup"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Get person group example": {
            "$ref": "./examples/GetPersonGroup.json"
          }
        }
      },
      "patch": {
        "description": "Update an existing person group's display name and userData. The properties which does not appear in request body will not be updated.",
        "operationId": "PersonGroup_Update",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "name": "body",
            "description": "Request body for updating person group.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update person group example": {
            "$ref": "./examples/UpdatePersonGroup.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/training": {
      "get": {
        "description": "Retrieve the training status of a person group (completed or ongoing).",
        "operationId": "PersonGroup_GetTrainingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person group's training status.",
            "schema": {
              "$ref": "#/definitions/TrainingStatus"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Get person group's training status example": {
            "$ref": "./examples/GetPersonGroupTrainingStatus.json"
          }
        }
      }
    },
    "/persongroups": {
      "get": {
        "description": "List person groups and their information.",
        "operationId": "PersonGroup_List",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "List person groups from the least personGroupId greater than the \"start\".",
            "type": "string",
            "maxLength": 64
          },
          {
            "name": "top",
            "in": "query",
            "required": false,
            "description": "The number of person groups to list.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person groups and their information.",
            "schema": {
              "$ref": "#/definitions/PersonGroups"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List person groups example": {
            "$ref": "./examples/ListPersonGroups.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/train": {
      "post": {
        "description": "Queue a person group training task, the training task may not be started immediately.",
        "operationId": "PersonGroup_Train",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "The training task was queued successfully."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Queue person group training": {
            "$ref": "./examples/QueuePersonGroupTraining.json"
          }
        }
      }
    },
    "/facelists/{faceListId}": {
      "put": {
        "description": "Create an empty face list. Up to 64 face lists are allowed to exist in one subscription.",
        "operationId": "FaceList_Create",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "name": "body",
            "description": "Request body for creating a face list.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new face list example": {
            "$ref": "./examples/CreateNewFaceList.json"
          }
        }
      },
      "get": {
        "description": "Retrieve a face list's information.",
        "operationId": "FaceList_Get",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the face list's information.",
            "schema": {
              "$ref": "#/definitions/FaceList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get Face list example": {
            "$ref": "./examples/GetFaceList.json"
          }
        }
      },
      "patch": {
        "description": "Update information of a face list.",
        "operationId": "FaceList_Update",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "name": "body",
            "description": "Request body for updating a face list.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update face list example": {
            "$ref": "./examples/UpdateFaceList.json"
          }
        }
      },
      "delete": {
        "description": "Delete an existing face list according to faceListId. Persisted face images in the face list will also be deleted.",
        "operationId": "FaceList_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete face list example": {
            "$ref": "./examples/DeleteFaceList.json"
          }
        }
      }
    },
    "/facelists": {
      "get": {
        "description": "Retrieve information about all existing face lists. Only faceListId, name and userData will be returned.",
        "operationId": "FaceList_List",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful call returns an array of faceList.",
            "schema": {
              "$ref": "#/definitions/FaceLists"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "List Face lists example": {
            "$ref": "./examples/ListFaceLists.json"
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete an existing face from a face list (given by a persisitedFaceId and a faceListId). Persisted image related to the face will also be deleted.",
        "operationId": "FaceList_DeleteFace",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete face in face list example": {
            "$ref": "./examples/DeleteFaceListFace.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedfaces": {
      "post": {
        "description": "Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.",
        "operationId": "PersonGroupPerson_AddFaceFromUrl",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageUrl"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add Person face example": {
            "$ref": "./examples/AddPersonGroupPersonFaceFromUrl.json"
          }
        }
      }
    },
    "/detect": {
      "post": {
        "description": "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.",
        "operationId": "Face_DetectWithUrl",
        "parameters": [
          {
            "name": "returnFaceId",
            "in": "query",
            "description": "A value indicating whether the operation should return faceIds of detected faces.",
            "type": "boolean",
            "default": true
          },
          {
            "name": "returnFaceLandmarks",
            "in": "query",
            "description": "A value indicating whether the operation should return landmarks of the detected faces.",
            "type": "boolean",
            "default": false
          },
          {
            "$ref": "#/parameters/returnFaceAttributes"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageUrl"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of face entries ranked by face rectangle size in descending order. An empty response indicates no faces detected.",
            "schema": {
              "$ref": "#/definitions/DetectedFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect with url example": {
            "$ref": "./examples/DetectWithUrl.json"
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedfaces": {
      "post": {
        "description": "Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.",
        "operationId": "FaceList_AddFaceFromUrl",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageUrl"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create face list face example": {
            "$ref": "./examples/AddFaceListFaceFromUrl.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons": {
      "post": {
        "description": "Create a new person in a specified large person group.",
        "operationId": "LargePersonGroupPerson_Create",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "name": "body",
            "description": "Request body for creating new person.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new personId created.",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new person for large person group example": {
            "$ref": "./examples/CreateNewLargePersonGroupPerson.json"
          }
        }
      },
      "get": {
        "description": "List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).",
        "operationId": "LargePersonGroupPerson_List",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "name": "start",
            "description": "Starting person id to return (used to list a range of persons).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "description": "Number of persons to return starting with the person id indicated by the 'start' parameter.",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person information that belong to the large person group.",
            "schema": {
              "$ref": "#/definitions/Persons"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List persons in person group": {
            "$ref": "./examples/ListLargePersonGroupPersons.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}": {
      "delete": {
        "description": "Delete an existing person from a large person group. All stored person data, and face features in the person entry will be deleted.",
        "operationId": "LargePersonGroupPerson_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete an existing person example": {
            "$ref": "./examples/DeleteLargePersonGroupPerson.json"
          }
        }
      },
      "get": {
        "description": "Retrieve a person's information, including registered persisted faces, name and userData.",
        "operationId": "LargePersonGroupPerson_Get",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person's information.",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get person example": {
            "$ref": "./examples/GetLargePersonGroupPerson.json"
          }
        }
      },
      "patch": {
        "description": "Update name or userData of a person.",
        "operationId": "LargePersonGroupPerson_Update",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "name": "body",
            "description": "Request body for person update operation.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update person example": {
            "$ref": "./examples/UpdateLargePersonGroupPerson.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete a face from a person. Relative feature for the persisted face will also be deleted.",
        "operationId": "LargePersonGroupPerson_DeleteFace",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete face from person example": {
            "$ref": "./examples/DeleteLargePersonGroupPersonFace.json"
          }
        }
      },
      "get": {
        "description": "Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging largePersonGroupId).",
        "operationId": "LargePersonGroupPerson_GetFace",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get persisted face example": {
            "$ref": "./examples/GetLargePersonGroupPersistedFace.json"
          }
        }
      },
      "patch": {
        "description": "Update a person persisted face's userData field.",
        "operationId": "LargePersonGroupPerson_UpdateFace",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          },
          {
            "name": "body",
            "description": "Request body for updating persisted face.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/UpdateFaceRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update person face example": {
            "$ref": "./examples/UpdateLargePersonGroupPersonFace.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}": {
      "put": {
        "description": "Create a new large person group with specified largePersonGroupId, name and user-provided userData.",
        "operationId": "LargePersonGroup_Create",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "name": "body",
            "description": "Request body for creating new large person group.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new large person group example": {
            "$ref": "./examples/CreateNewLargePersonGroup.json"
          }
        }
      },
      "delete": {
        "description": "Delete an existing large person group. Persisted face features of all people in the large person group will also be deleted.",
        "operationId": "LargePersonGroup_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete a large person group example": {
            "$ref": "./examples/DeleteLargePersonGroup.json"
          }
        }
      },
      "get": {
        "description": "Retrieve the information of a large person group, including its name and userData.",
        "operationId": "LargePersonGroup_Get",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large person group's information.",
            "schema": {
              "$ref": "#/definitions/LargePersonGroup"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Get large person group example": {
            "$ref": "./examples/GetLargePersonGroup.json"
          }
        }
      },
      "patch": {
        "description": "Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.",
        "operationId": "LargePersonGroup_Update",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "name": "body",
            "description": "Request body for updating large person group.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update large person group example": {
            "$ref": "./examples/UpdateLargePersonGroup.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/training": {
      "get": {
        "description": "Retrieve the training status of a large person group (completed or ongoing).",
        "operationId": "LargePersonGroup_GetTrainingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large person group's training status.",
            "schema": {
              "$ref": "#/definitions/TrainingStatus"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Get large person group's training status example": {
            "$ref": "./examples/GetLargePersonGroupTrainingStatus.json"
          }
        }
      }
    },
    "/largepersongroups": {
      "get": {
        "description": "List large person groups and their information.",
        "operationId": "LargePersonGroup_List",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "List large person groups from the least largePersonGroupId greater than the \"start\".",
            "type": "string",
            "maxLength": 64
          },
          {
            "name": "top",
            "in": "query",
            "required": false,
            "description": "The number of large person groups to list.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of large person groups and their information.",
            "schema": {
              "$ref": "#/definitions/LargePersonGroups"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List large person groups example": {
            "$ref": "./examples/ListLargePersonGroups.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/train": {
      "post": {
        "description": "Queue a large person group training task, the training task may not be started immediately.",
        "operationId": "LargePersonGroup_Train",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "The training task was queued successfully."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Queue large person group training": {
            "$ref": "./examples/QueueLargePersonGroupTraining.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces": {
      "post": {
        "description": "Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.",
        "operationId": "LargePersonGroupPerson_AddFaceFromUrl",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageUrl"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add Person face example": {
            "$ref": "./examples/AddLargePersonGroupPersonFaceFromUrl.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}": {
      "put": {
        "description": "Create an empty large face list. Up to 64 large face lists are allowed to exist in one subscription.",
        "operationId": "LargeFaceList_Create",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "name": "body",
            "description": "Request body for creating a large face list.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create new large face list example": {
            "$ref": "./examples/CreateNewLargeFaceList.json"
          }
        }
      },
      "get": {
        "description": "Retrieve a large face list's information.",
        "operationId": "LargeFaceList_Get",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large face list's information.",
            "schema": {
              "$ref": "#/definitions/LargeFaceList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get large face list example": {
            "$ref": "./examples/GetLargeFaceList.json"
          }
        }
      },
      "patch": {
        "description": "Update information of a large face list.",
        "operationId": "LargeFaceList_Update",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "name": "body",
            "description": "Request body for updating a large face list.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/NameAndUserDataContract"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update large face list example": {
            "$ref": "./examples/UpdateLargeFaceList.json"
          }
        }
      },
      "delete": {
        "description": "Delete an existing large face list according to faceListId. Persisted face images in the large face list will also be deleted.",
        "operationId": "LargeFaceList_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete large face list example": {
            "$ref": "./examples/DeleteLargeFaceList.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/training": {
      "get": {
        "description": "Retrieve the training status of a large face list (completed or ongoing).",
        "operationId": "LargeFaceList_GetTrainingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large face list's training status.",
            "schema": {
              "$ref": "#/definitions/TrainingStatus"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Get large face list's training status example": {
            "$ref": "./examples/GetLargeFaceListTrainingStatus.json"
          }
        }
      }
    },
    "/largefacelists": {
      "get": {
        "description": "Retrieve information about all existing large face lists. Only largeFaceListId, name and userData will be returned.",
        "operationId": "LargeFaceList_List",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful call returns an array of largeFaceList.",
            "schema": {
              "$ref": "#/definitions/LargeFaceLists"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "List large face lists example": {
            "$ref": "./examples/ListLargeFaceLists.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/train": {
      "post": {
        "description": "Queue a large face list training task, the training task may not be started immediately.",
        "operationId": "LargeFaceList_Train",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "The training task was queued successfully."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Queue large face list training": {
            "$ref": "./examples/QueueLargeFaceListTraining.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete an existing face from a large face list (given by a persisitedFaceId and a largeFaceListId). Persisted image related to the face will also be deleted.",
        "operationId": "LargeFaceList_DeleteFace",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Delete face in large face list example": {
            "$ref": "./examples/DeleteLargeFaceListFace.json"
          }
        }
      },
      "get": {
        "description": "Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).",
        "operationId": "LargeFaceList_GetFace",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Get persisted face example": {
            "$ref": "./examples/GetLargeFaceListPersistedFace.json"
          }
        }
      },
      "patch": {
        "description": "Update a persisted face's userData field.",
        "operationId": "LargeFaceList_UpdateFace",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "$ref": "#/parameters/persistedFaceId"
          },
          {
            "name": "body",
            "description": "Request body for updating persisted face.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/UpdateFaceRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Update face example": {
            "$ref": "./examples/UpdateLargeFaceListFace.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces": {
      "post": {
        "description": "Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.",
        "operationId": "LargeFaceList_AddFaceFromUrl",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageUrl"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Create large face list face example": {
            "$ref": "./examples/AddLargeFaceListFaceFromUrl.json"
          }
        }
      },
      "get": {
        "description": "List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).",
        "operationId": "LargeFaceList_ListFaces",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "name": "start",
            "description": "Starting face id to return (used to list a range of faces).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "description": "Number of faces to return starting with the face id indicated by the 'start' parameter.",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of face information that belong to the large face list.",
            "schema": {
              "$ref": "#/definitions/PersistedFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "List faces in large face list": {
            "$ref": "./examples/ListLargeFaceListFaces.json"
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/verify?overload=person": {
      "post": {
        "description": "Verify whether two faces belong to a same person. Compares a face Id with a Person Id",
        "operationId": "Face_VerifyFaceToPerson",
        "parameters": [
          {
            "name": "body",
            "description": "Request body for face to person verification.",
            "in": "body",
            "required": true,
            "x-ms-client-flatten": true,
            "schema": {
              "$ref": "#/definitions/VerifyFaceToPersonRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the verification result.",
            "schema": {
              "$ref": "#/definitions/VerifyResult"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Verify face to person example": {
            "$ref": "./examples/VerifyFaceToPerson.json"
          }
        }
      }
    },
    "/detect?overload=stream": {
      "post": {
        "description": "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.",
        "operationId": "Face_DetectWithStream",
        "parameters": [
          {
            "name": "returnFaceId",
            "in": "query",
            "description": "A value indicating whether the operation should return faceIds of detected faces.",
            "type": "boolean",
            "default": true
          },
          {
            "name": "returnFaceLandmarks",
            "in": "query",
            "description": "A value indicating whether the operation should return landmarks of the detected faces.",
            "type": "boolean",
            "default": false
          },
          {
            "$ref": "#/parameters/returnFaceAttributes"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageStream"
          }
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of face entries ranked by face rectangle size in descending order. An empty response indicates no faces detected.",
            "schema": {
              "$ref": "#/definitions/DetectedFaces"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Detect with stream example": {
            "$ref": "./examples/DetectWithStream.json"
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedfaces?overload=stream": {
      "post": {
        "description": "Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.",
        "operationId": "PersonGroupPerson_AddFaceFromStream",
        "parameters": [
          {
            "$ref": "#/parameters/personGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageStream"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add face to person with stream example": {
            "$ref": "./examples/AddPersonGroupPersonFaceFromStream.json"
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedfaces?overload=stream": {
      "post": {
        "description": "Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.",
        "operationId": "FaceList_AddFaceFromStream",
        "parameters": [
          {
            "$ref": "#/parameters/faceListId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageStream"
          }
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Add face to face list from stream example": {
            "$ref": "./examples/AddFaceListFaceFromStream.json"
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces?overload=stream": {
      "post": {
        "description": "Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.",
        "operationId": "LargePersonGroupPerson_AddFaceFromStream",
        "parameters": [
          {
            "$ref": "#/parameters/largePersonGroupId"
          },
          {
            "$ref": "#/parameters/personId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageStream"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-ms-examples": {
          "Add face to person with stream example": {
            "$ref": "./examples/AddLargePersonGroupPersonFaceFromStream.json"
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces?overload=stream": {
      "post": {
        "description": "Add a face to a large face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.",
        "operationId": "LargeFaceList_AddFaceFromStream",
        "parameters": [
          {
            "$ref": "#/parameters/largeFaceListId"
          },
          {
            "$ref": "#/parameters/faceUserData"
          },
          {
            "$ref": "#/parameters/targetFace"
          },
          {
            "$ref": "../../../Common/Parameters.json#/parameters/ImageStream"
          }
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.",
            "schema": {
              "$ref": "#/definitions/PersistedFace"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "Add face to large face list from stream example": {
            "$ref": "./examples/AddLargeFaceListFaceFromStream.json"
          }
        }
      }
    }
  },
  "definitions": {
    "APIError": {
      "type": "object",
      "description": "Error information returned by the API",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "Error body.",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "DetectedFaces": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DetectedFace"
      }
    },
    "DetectedFace": {
      "type": "object",
      "required": [
        "faceRectangle"
      ],
      "description": "Detected Face object.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid"
        },
        "faceRectangle": {
          "$ref": "#/definitions/FaceRectangle"
        },
        "faceLandmarks": {
          "$ref": "#/definitions/FaceLandmarks"
        },
        "faceAttributes": {
          "$ref": "#/definitions/FaceAttributes"
        }
      }
    },
    "FaceRectangle": {
      "type": "object",
      "required": [
        "width",
        "height",
        "left",
        "top"
      ],
      "description": "A rectangle within which a face can be found",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "The width of the rectangle, in pixels."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the rectangle, in pixels."
        },
        "left": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the left edge if the image to the left edge of the rectangle, in pixels."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the top edge if the image to the top edge of the rectangle, in pixels."
        }
      }
    },
    "Coordinate": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "description": "Coordinates within an image",
      "properties": {
        "x": {
          "type": "number",
          "description": "The horizontal component, in pixels."
        },
        "y": {
          "type": "number",
          "description": "The vertical component, in pixels."
        }
      }
    },
    "FaceLandmarks": {
      "type": "object",
      "description": "A collection of 27-point face landmarks pointing to the important positions of face components.",
      "properties": {
        "pupilLeft": {
          "$ref": "#/definitions/Coordinate"
        },
        "pupilRight": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseTip": {
          "$ref": "#/definitions/Coordinate"
        },
        "mouthLeft": {
          "$ref": "#/definitions/Coordinate"
        },
        "mouthRight": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowLeftOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowLeftInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftBottom": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeLeftInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowRightInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyebrowRightOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightInner": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightBottom": {
          "$ref": "#/definitions/Coordinate"
        },
        "eyeRightOuter": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRootLeft": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRootRight": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseLeftAlarTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRightAlarTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseLeftAlarOutTip": {
          "$ref": "#/definitions/Coordinate"
        },
        "noseRightAlarOutTip": {
          "$ref": "#/definitions/Coordinate"
        },
        "upperLipTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "upperLipBottom": {
          "$ref": "#/definitions/Coordinate"
        },
        "underLipTop": {
          "$ref": "#/definitions/Coordinate"
        },
        "underLipBottom": {
          "$ref": "#/definitions/Coordinate"
        }
      }
    },
    "FaceAttributes": {
      "type": "object",
      "description": "Face Attributes",
      "properties": {
        "age": {
          "type": "number",
          "description": "Age in years"
        },
        "gender": {
          "type": "string",
          "description": "Possible gender of the face.",
          "x-ms-enum": {
            "name": "Gender",
            "modelAsString": false
          },
          "enum": [
            "male",
            "female",
            "genderless"
          ]
        },
        "smile": {
          "description": "Smile intensity, a number between [0,1] ",
          "$ref": "#/definitions/Level"
        },
        "facialHair": {
          "description": "Properties describing facial hair attributes.",
          "$ref": "#/definitions/FacialHair"
        },
        "glasses": {
          "type": "string",
          "description": "Glasses type if any of the face.",
          "x-ms-enum": {
            "name": "GlassesType",
            "modelAsString": false
          },
          "enum": [
            "noGlasses",
            "readingGlasses",
            "sunglasses",
            "swimmingGoggles"
          ]
        },
        "headPose": {
          "description": "Properties indicating head pose of the face.",
          "$ref": "#/definitions/HeadPose"
        },
        "emotion": {
          "description": "Properties describing facial emotion in form of confidence ranging from 0 to 1.",
          "$ref": "#/definitions/Emotion"
        },
        "hair": {
          "description": "Properties describing hair attributes.",
          "$ref": "#/definitions/Hair"
        },
        "makeup": {
          "description": "Properties describing present makeups on a given face.",
          "$ref": "#/definitions/Makeup"
        },
        "occlusion": {
          "description": "Properties describing occlusions on a given face.",
          "$ref": "#/definitions/Occlusion"
        },
        "accessories": {
          "description": "Properties describing any accessories on a given face.",
          "$ref": "#/definitions/Accessories"
        },
        "blur": {
          "description": "Properties describing any presence of blur within the image.",
          "$ref": "#/definitions/Blur"
        },
        "exposure": {
          "description": "Properties describing exposure level of the image.",
          "$ref": "#/definitions/Exposure"
        },
        "noise": {
          "description": "Properties describing noise level of the image.",
          "$ref": "#/definitions/Noise"
        }
      }
    },
    "FacialHair": {
      "type": "object",
      "description": "Properties describing facial hair attributes.",
      "properties": {
        "moustache": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "beard": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "sideburns": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "HeadPose": {
      "type": "object",
      "description": "Properties indicating head pose of the face.",
      "properties": {
        "roll": {
          "type": "number",
          "x-nullable": false
        },
        "yaw": {
          "type": "number",
          "x-nullable": false
        },
        "pitch": {
          "type": "number",
          "x-nullable": false
        }
      }
    },
    "Emotion": {
      "type": "object",
      "description": "Properties describing facial emotion in form of confidence ranging from 0 to 1.",
      "properties": {
        "anger": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "contempt": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "disgust": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "fear": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "happiness": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "neutral": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "sadness": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "surprise": {
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "Hair": {
      "type": "object",
      "description": "Properties describing hair attributes.",
      "properties": {
        "bald": {
          "description": "A number describing confidence level of whether the person is bald.",
          "x-nullable": false,
          "$ref": "#/definitions/Confidence"
        },
        "invisible": {
          "type": "boolean",
          "description": "A boolean value describing whether the hair is visible in the image.",
          "x-nullable": false
        },
        "hairColor": {
          "description": "An array of candidate colors and confidence level in the presence of each.",
          "$ref": "#/definitions/HairColors"
        }
      }
    },
    "HairColors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/HairColor"
      }
    },
    "HairColor": {
      "type": "object",
      "description": "Hair color and associated confidence",
      "properties": {
        "color": {
          "type": "string",
          "description": "Name of the hair color.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "HairColorType",
            "modelAsString": false
          },
          "enum": [
            "unknown",
            "white",
            "gray",
            "blond",
            "brown",
            "red",
            "black",
            "other"
          ]
        },
        "confidence": {
          "x-nullable": false,
          "description": "Confidence level of the color",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "Makeup": {
      "type": "object",
      "description": "Properties describing present makeups on a given face.",
      "properties": {
        "eyeMakeup": {
          "type": "boolean",
          "description": "A boolean value describing whether eye makeup is present on a face.",
          "x-nullable": false
        },
        "lipMakeup": {
          "type": "boolean",
          "description": "A boolean value describing whether lip makeup is present on a face.",
          "x-nullable": false
        }
      }
    },
    "Occlusion": {
      "type": "object",
      "description": "Properties describing occlusions on a given face.",
      "properties": {
        "foreheadOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether forehead is occluded.",
          "x-nullable": false
        },
        "eyeOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether eyes are occluded.",
          "x-nullable": false
        },
        "mouthOccluded": {
          "type": "boolean",
          "description": "A boolean value indicating whether the mouth is occluded.",
          "x-nullable": false
        }
      }
    },
    "Accessories": {
      "type": "array",
      "description": "Properties describing any accessories on a given face.",
      "items": {
        "$ref": "#/definitions/Accessory"
      }
    },
    "Accessory": {
      "type": "object",
      "description": "Accessory item and corresponding confidence level.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of an accessory",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "AccessoryType",
            "modelAsString": false
          },
          "enum": [
            "headWear",
            "glasses",
            "mask"
          ]
        },
        "confidence": {
          "x-nullable": false,
          "description": "Confidence level of an accessory",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "Blur": {
      "type": "object",
      "description": "Properties describing any presence of blur within the image.",
      "properties": {
        "blurLevel": {
          "type": "string",
          "description": "An enum value indicating level of blurriness.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "BlurLevel",
            "modelAsString": false
          },
          "enum": [
            "Low",
            "Medium",
            "High"
          ]
        },
        "value": {
          "description": "A number indicating level of blurriness ranging from 0 to 1.",
          "x-nullable": false,
          "$ref": "#/definitions/Level"
        }
      }
    },
    "Exposure": {
      "type": "object",
      "description": "Properties describing exposure level of the image.",
      "properties": {
        "exposureLevel": {
          "type": "string",
          "description": "An enum value indicating level of exposure.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "ExposureLevel",
            "modelAsString": false
          },
          "enum": [
            "UnderExposure",
            "GoodExposure",
            "OverExposure"
          ]
        },
        "value": {
          "description": "A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure.",
          "x-nullable": false,
          "$ref": "#/definitions/Level"
        }
      }
    },
    "Noise": {
      "type": "object",
      "description": "Properties describing noise level of the image.",
      "properties": {
        "noiseLevel": {
          "type": "string",
          "description": "An enum value indicating level of noise.",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "NoiseLevel",
            "modelAsString": false
          },
          "enum": [
            "Low",
            "Medium",
            "High"
          ]
        },
        "value": {
          "description": "A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3, 0.7) is medium noise level. [0.7, 1] is high noise level.",
          "x-nullable": false,
          "$ref": "#/definitions/Level"
        }
      }
    },
    "FindSimilarRequest": {
      "type": "object",
      "required": [
        "faceId"
      ],
      "description": "Request body for find similar operation.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call"
        },
        "faceListId": {
          "type": "string",
          "description": "An existing user-specified unique candidate face list, created in Face List - Create a Face List. Face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time。",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "largeFaceListId": {
          "type": "string",
          "description": "An existing user-specified unique candidate large face list, created in LargeFaceList - Create. Large face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "faceIds": {
          "type": "array",
          "description": "An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.",
          "maxItems": 1000,
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "maxNumOfCandidatesReturned": {
          "type": "integer",
          "description": "The number of top similar faces returned. The valid range is [1, 1000].",
          "default": 20,
          "minimum": 1,
          "maximum": 1000
        },
        "mode": {
          "type": "string",
          "description": "Similar face searching mode. It can be \"matchPerson\" or \"matchFace\".",
          "default": "matchPerson",
          "x-nullable": false,
          "x-ms-enum": {
            "name": "FindSimilarMatchMode",
            "modelAsString": false
          },
          "enum": [
            "matchPerson",
            "matchFace"
          ]
        }
      }
    },
    "SimilarFaces": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SimilarFace"
      }
    },
    "SimilarFace": {
      "type": "object",
      "required": [
        "confidence"
      ],
      "description": "Response body for find similar face operation.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of candidate face when find by faceIds. faceId is created by Face - Detect and will expire 24 hours after the detection call"
        },
        "persistedFaceId": {
          "type": "string",
          "format": "uuid",
          "description": "PersistedFaceId of candidate face when find by faceListId. persistedFaceId in face list is persisted and will not expire. As showed in below response"
        },
        "confidence": {
          "description": "Similarity confidence of the candidate face. The higher confidence, the more similar. Range between [0,1].",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "GroupRequest": {
      "type": "object",
      "required": [
        "faceIds"
      ],
      "description": "Request body for group request.",
      "properties": {
        "faceIds": {
          "type": "array",
          "description": "Array of candidate faceId created by Face - Detect. The maximum is 1000 faces",
          "maxItems": 1000,
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      }
    },
    "GroupResult": {
      "type": "object",
      "required": [
        "groups"
      ],
      "description": "An array of face groups based on face similarity.",
      "properties": {
        "groups": {
          "type": "array",
          "description": "A partition of the original faces based on face similarity. Groups are ranked by number of faces",
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            }
          }
        },
        "messyGroup": {
          "type": "array",
          "description": "Face ids array of faces that cannot find any similar faces from original faces.",
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      }
    },
    "IdentifyRequest": {
      "type": "object",
      "required": [
        "faceIds"
      ],
      "description": "Request body for identify face operation.",
      "properties": {
        "faceIds": {
          "type": "array",
          "description": "Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].",
          "maxItems": 10,
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        },
        "personGroupId": {
          "description": "PersonGroupId of the target person group, created by PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "largePersonGroupId": {
          "description": "LargePersonGroupId of the target large person group, created by LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "maxNumOfCandidatesReturned": {
          "type": "integer",
          "description": "The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).",
          "default": 1,
          "minimum": 1,
          "maximum": 5
        },
        "confidenceThreshold": {
          "description": "Confidence threshold of identification, used to judge whether one face belong to one person. The range of confidenceThreshold is [0, 1] (default specified by algorithm).",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "IdentifyResults": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/IdentifyResult"
      }
    },
    "IdentifyResult": {
      "type": "object",
      "required": [
        "faceId",
        "candidates"
      ],
      "description": "Response body for identify face operation.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the query face"
        },
        "candidates": {
          "type": "array",
          "description": "Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array.",
          "items": {
            "$ref": "#/definitions/IdentifyCandidate"
          }
        }
      }
    },
    "IdentifyCandidate": {
      "type": "object",
      "required": [
        "personId",
        "confidence"
      ],
      "description": "All possible faces that may qualify.",
      "properties": {
        "personId": {
          "type": "string",
          "format": "uuid",
          "description": "Id of candidate"
        },
        "confidence": {
          "description": "Confidence threshold of identification, used to judge whether one face belong to one person. The range of confidenceThreshold is [0, 1] (default specified by algorithm).",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "VerifyFaceToPersonRequest": {
      "type": "object",
      "required": [
        "faceId",
        "personId"
      ],
      "description": "Request body for face to person verification.",
      "properties": {
        "faceId": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the face, comes from Face - Detect"
        },
        "personGroupId": {
          "description": "Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "largePersonGroupId": {
          "description": "Using existing largePersonGroupId and personId for fast loading a specified person. largePersonGroupId is created in LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "personId": {
          "type": "string",
          "format": "uuid",
          "description": "Specify a certain person in a person group or a large person group. personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create."
        }
      }
    },
    "VerifyFaceToFaceRequest": {
      "type": "object",
      "required": [
        "faceId1",
        "faceId2"
      ],
      "description": "Request body for face to face verification.",
      "properties": {
        "faceId1": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the first face, comes from Face - Detect"
        },
        "faceId2": {
          "type": "string",
          "format": "uuid",
          "description": "FaceId of the second face, comes from Face - Detect"
        }
      }
    },
    "VerifyResult": {
      "type": "object",
      "required": [
        "isIdentical",
        "confidence"
      ],
      "description": "Result of the verify operation.",
      "properties": {
        "isIdentical": {
          "type": "boolean",
          "description": "True if the two faces belong to the same person or the face belongs to the person, otherwise false."
        },
        "confidence": {
          "description": "A number indicates the similarity confidence of whether two faces belong to the same person, or whether the face belongs to the person. By default, isIdentical is set to True if similarity confidence is greater than or equal to 0.5. This is useful for advanced users to override \"isIdentical\" and fine-tune the result on their own data.",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "FaceList": {
      "description": "Face list object.",
      "type": "object",
      "required": [
        "faceListId"
      ],
      "properties": {
        "faceListId": {
          "type": "string",
          "description": "FaceListId of the target face list.",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        },
        "persistedFaces": {
          "description": "Persisted faces within the face list.",
          "$ref": "#/definitions/PersistedFaces"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "FaceLists": {
      "type": "array",
      "description": "An array of face list results, with fields of faceListId, name and userData",
      "items": {
        "$ref": "#/definitions/FaceList"
      }
    },
    "PersonGroup": {
      "type": "object",
      "required": [
        "personGroupId"
      ],
      "description": "Person group object.",
      "properties": {
        "personGroupId": {
          "description": "PersonGroupId of the target person group.",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "PersonGroups": {
      "type": "array",
      "description": "An array of person groups.",
      "items": {
        "$ref": "#/definitions/PersonGroup"
      }
    },
    "Person": {
      "type": "object",
      "required": [
        "personId"
      ],
      "description": "Person object.",
      "properties": {
        "personId": {
          "type": "string",
          "format": "uuid",
          "description": "PersonId of the target face list."
        },
        "persistedFaceIds": {
          "type": "array",
          "description": "PersistedFaceIds of registered faces in the person. These persistedFaceIds are returned from Person - Add a Person Face, and will not expire.",
          "items": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "Persons": {
      "type": "array",
      "description": "An array of Persons.",
      "items": {
        "$ref": "#/definitions/Person"
      }
    },
    "PersistedFace": {
      "type": "object",
      "required": [
        "persistedFaceId"
      ],
      "description": "PersonFace object.",
      "properties": {
        "persistedFaceId": {
          "type": "string",
          "format": "uuid",
          "description": "The persistedFaceId of the target face, which is persisted and will not expire. Different from faceId created by Face - Detect and will expire in 24 hours after the detection call."
        },
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB.",
          "maxLength": 1024
        }
      }
    },
    "PersistedFaces": {
      "type": "array",
      "description": "An array of persisted faces within the face list or large face list.",
      "items": {
        "$ref": "#/definitions/PersistedFace"
      }
    },
    "LargeFaceList": {
      "description": "Large face list object.",
      "type": "object",
      "required": [
        "largeFaceListId"
      ],
      "properties": {
        "largeFaceListId": {
          "type": "string",
          "description": "LargeFaceListId of the target large face list.",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "LargeFaceLists": {
      "type": "array",
      "description": "An array of large face list results, with fields of largeFaceListId, name and userData",
      "items": {
        "$ref": "#/definitions/LargeFaceList"
      }
    },
    "LargePersonGroup": {
      "type": "object",
      "required": [
        "largePersonGroupId"
      ],
      "description": "Large person group object.",
      "properties": {
        "largePersonGroupId": {
          "description": "LargePersonGroupId of the target large person groups",
          "type": "string",
          "maxLength": 64,
          "pattern": "^[a-z0-9-_]+$"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NameAndUserDataContract"
        }
      ]
    },
    "LargePersonGroups": {
      "type": "array",
      "description": "An array of large person groups.",
      "items": {
        "$ref": "#/definitions/LargePersonGroup"
      }
    },
    "UpdateFaceRequest": {
      "type": "object",
      "description": "Request to update face data.",
      "properties": {
        "userData": {
          "type": "string",
          "description": "User-provided data attached to the face. The size limit is 1KB.",
          "maxLength": 1024
        }
      }
    },
    "TrainingStatus": {
      "type": "object",
      "required": [
        "status",
        "createdDateTime"
      ],
      "description": "Training status object.",
      "properties": {
        "status": {
          "type": "string",
          "description": "Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status is notstarted. If the training is ongoing, the status is running. Status succeed means this person group or large person group is ready for Face - Identify, or this large face list is ready for Face - Find Similar. Status failed is often caused by no person or no persisted face exist in the person group or large person group, or no persisted face exist in the large face list.",
          "x-ms-enum": {
            "name": "TrainingStatusType",
            "modelAsString": false
          },
          "enum": [
            "nonstarted",
            "running",
            "succeeded",
            "failed"
          ]
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the created time of the person group, large person group or large face list.",
          "x-ms-client-name": "created"
        },
        "lastActionDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the last modify time of the person group, large person group or large face list, could be null value when the group is not successfully trained.",
          "x-ms-client-name": "lastAction"
        },
        "lastSuccessfulTrainingDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "A combined UTC date and time string that describes the last successful training time of the person group, large person group or large face list.",
          "x-ms-client-name": "lastSuccessfulTraining"
        },
        "message": {
          "type": "string",
          "description": "Show failure message when training failed (omitted when training succeed)."
        }
      }
    },
    "Confidence": {
      "description": "A number ranging from 0 to 1 indicating a level of confidence associated with a property.",
      "type": "number",
      "minimum": 0,
      "maximum": 1
    },
    "Level": {
      "description": "A number ranging from 0 to 1 indicating the intensity level associated with a property.",
      "type": "number",
      "minimum": 0,
      "maximum": 1
    },
    "NameAndUserDataContract": {
      "type": "object",
      "description": "A combination of user defined name and user specified data for the person, largePersonGroup/personGroup, and largeFaceList/faceList.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User defined name, maximum length is 128.",
          "maxLength": 128
        },
        "userData": {
          "type": "string",
          "description": "User specified data. Length should not exceed 16KB.",
          "maxLength": 16384
        }
      }
    }
  },
  "parameters": {
    "returnFaceAttributes": {
      "name": "returnFaceAttributes",
      "in": "query",
      "description": "Analyze and return the one or more specified face attributes in the comma-separated string like \"returnFaceAttributes=age,gender\". Supported face attributes include age, gender, headPose, smile, facialHair, glasses and emotion. Note that each face attribute analysis has additional computational and time cost.",
      "type": "array",
      "x-ms-parameter-location": "method",
      "required": false,
      "collectionFormat": "csv",
      "items": {
        "type": "string",
        "x-nullable": false,
        "x-ms-enum": {
          "name": "FaceAttributeType",
          "modelAsString": false
        },
        "enum": [
          "age",
          "gender",
          "headPose",
          "smile",
          "facialHair",
          "glasses",
          "emotion",
          "hair",
          "makeup",
          "occlusion",
          "accessories",
          "blur",
          "exposure",
          "noise"
        ]
      }
    },
    "targetFace": {
      "name": "targetFace",
      "in": "query",
      "description": "A face rectangle to specify the target face to be added to a person in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.",
      "type": "array",
      "x-ms-parameter-location": "method",
      "required": false,
      "collectionFormat": "csv",
      "items": {
        "type": "integer",
        "format": "int32",
        "x-nullable": false,
        "maxItems": 4,
        "minItems": 4
      }
    },
    "faceUserData": {
      "name": "userData",
      "in": "query",
      "description": "User-specified data about the face for any purpose. The maximum length is 1KB.",
      "type": "string",
      "maxLength": 1024,
      "x-ms-parameter-location": "method",
      "required": false,
      "collectionFormat": "csv"
    },
    "faceListId": {
      "name": "faceListId",
      "in": "path",
      "description": "Id referencing a particular face list.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "personGroupId": {
      "name": "personGroupId",
      "in": "path",
      "description": "Id referencing a particular person group.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "largeFaceListId": {
      "name": "largeFaceListId",
      "in": "path",
      "description": "Id referencing a particular large face list.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "largePersonGroupId": {
      "name": "largePersonGroupId",
      "in": "path",
      "description": "Id referencing a particular large person group.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv",
      "maxLength": 64,
      "pattern": "^[a-z0-9-_]+$"
    },
    "personId": {
      "name": "personId",
      "in": "path",
      "description": "Id referencing a particular person.",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv"
    },
    "persistedFaceId": {
      "name": "persistedFaceId",
      "in": "path",
      "description": "Id referencing a particular persistedFaceId of an existing face.",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "collectionFormat": "csv"
    },
    "Endpoint": {
      "name": "Endpoint",
      "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    }
  }
}