{
  "swagger": "2.0",
  "info": {
    "version": "v3.2-preview.2",
    "contact": {
      "name": "Microsoft Cognitive Services",
      "url": "https://azure.microsoft.com/en-us/services/cognitive-services/text-analytics/",
      "email": "mlapi@microsoft.com"
    },
    "title": "Text Analytics Client",
    "description": "The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview"
  },
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}/{ServicePrefix}/v3.2-preview.1",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  },
  "paths": {
    "/entities/recognition/general": {
      "post": {
        "summary": "Named Entity Recognition",
        "description": "The API returns a list of general named entities in a given document. For the list of supported entity types, check <a href=\"https://aka.ms/taner\">Supported Entity Types in Text Analytics API</a>. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages.",
        "operationId": "EntitiesRecognitionGeneral",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ModelVersion"
          },
          {
            "$ref": "#/parameters/ShowStats"
          },
          {
            "$ref": "#/parameters/MultiLanguageInput"
          },
          {
            "$ref": "#/parameters/StringIndexType"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call results in a list of recognized entities returned for each valid document.",
            "schema": {
              "$ref": "#/definitions/EntitiesResult"
            }
          },
          "default": {
            "description": "Error Response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Entities request": {
            "$ref": ".//examples//SuccessfulEntitiesRequest.json"
          }
        },
        "deprecated": false
      }
    },
    "/entities/recognition/pii": {
      "post": {
        "summary": "Entities containing personal information",
        "description": "The API returns a list of entities with personal information (\\\"SSN\\\", \\\"Bank Account\\\" etc) in the document. For the list of supported entity types, check <a href=\"https://aka.ms/tanerpii\">Supported Entity Types in Text Analytics API</a>. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages.\n",
        "operationId": "EntitiesRecognitionPii",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ModelVersion"
          },
          {
            "$ref": "#/parameters/ShowStats"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "(Optional) if set to 'PHI', response will contain only PHI entities.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/MultiLanguageInput"
          },
          {
            "$ref": "#/parameters/StringIndexType"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call results in a list of entities containing personal information returned for each valid document",
            "schema": {
              "$ref": "#/definitions/PiiEntitiesResult"
            }
          },
          "default": {
            "description": "Error Response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Entity PII request": {
            "$ref": ".//examples//SuccessfulEntityPIIRequest.json"
          }
        },
        "deprecated": false
      }
    },
    "/entities/linking": {
      "post": {
        "summary": "Linked entities from a well-known knowledge base",
        "description": "The API returns a list of recognized entities with links to a well-known knowledge base. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages.",
        "operationId": "EntitiesLinking",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ModelVersion"
          },
          {
            "$ref": "#/parameters/ShowStats"
          },
          {
            "$ref": "#/parameters/MultiLanguageInput"
          },
          {
            "$ref": "#/parameters/StringIndexType"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call results in a list of recognized entities with links to a well-known knowledge base returned for each valid document",
            "schema": {
              "$ref": "#/definitions/EntityLinkingResult"
            }
          },
          "default": {
            "description": "Error Response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Entity Linking request": {
            "$ref": ".//examples//SuccessfulEntityLinkingRequest.json"
          }
        },
        "deprecated": false
      }
    },
    "/keyPhrases": {
      "post": {
        "summary": "Key Phrases",
        "description": "The API returns a list of strings denoting the key phrases in the input text. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages.",
        "operationId": "KeyPhrases",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ModelVersion"
          },
          {
            "$ref": "#/parameters/ShowStats"
          },
          {
            "$ref": "#/parameters/MultiLanguageInput"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response results in 0 or more key phrases identified in each valid document",
            "schema": {
              "$ref": "#/definitions/KeyPhraseResult"
            }
          },
          "default": {
            "description": "Error Response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Key Phrase request": {
            "$ref": ".//examples//SuccessfulKeyPhrasesRequest.json"
          }
        },
        "deprecated": false
      }
    },
    "/languages": {
      "post": {
        "summary": "Detect Language",
        "description": "The API returns the detected language and a numeric score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages.",
        "operationId": "Languages",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ModelVersion"
          },
          {
            "$ref": "#/parameters/ShowStats"
          },
          {
            "$ref": "#/parameters/LanguageInput"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call results in the detected language with the highest probability for each valid document",
            "schema": {
              "$ref": "#/definitions/LanguageResult"
            }
          },
          "default": {
            "description": "Error Response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Detect Language request": {
            "$ref": ".//examples//SuccessfulLanguagesRequest.json"
          }
        },
        "deprecated": false
      }
    },
    "/sentiment": {
      "post": {
        "summary": "Sentiment",
        "description": "The API returns a detailed sentiment analysis for the input text. The analysis is done in multiple levels of granularity, start from the a document level, down to sentence and key terms (aspects) and opinions.",
        "operationId": "Sentiment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ModelVersion"
          },
          {
            "$ref": "#/parameters/ShowStats"
          },
          {
            "name": "opinionMining",
            "in": "query",
            "description": "(Optional) if set to true, response will contain input and document level statistics including aspect-based sentiment analysis results.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/MultiLanguageInput"
          },
          {
            "$ref": "#/parameters/StringIndexType"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call results in a document sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral)",
            "schema": {
              "$ref": "#/definitions/SentimentResponse"
            }
          },
          "default": {
            "description": "Error Response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Sentiment request": {
            "$ref": ".//examples//SuccessfulSentimentRequest.json"
          }
        },
        "deprecated": false
      }
    },
    "/qna/{kbId}/generateanswer": {
      "post": {
        "tags": [
          "Knowledgebases"
        ],
        "summary": "GenerateAnswer call to query knowledgebase (QnA Maker Managed).",
        "operationId": "Knowledgebase_GenerateAnswer",
        "parameters": [
          {
            "$ref": "#/parameters/KbId"
          },
          {
            "$ref": "#/parameters/GenerateAnswerPayload"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "GenerateAnswer call response.",
            "schema": {
              "$ref": "#/definitions/QnASearchResultList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/QAErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful query": {
            "$ref": "./examples/SuccessfulGenAns.json"
          }
        }
      }
    }
  },
  "definitions": {
  "QnA": {
    "type": "object",
    "description": "Q-A object.",
    "additionalProperties": false,
    "required": [
      "answer",
      "questions"
    ],
    "properties": {
      "id": {
        "type": "integer",
        "description": "Unique id for the Q-A.",
        "format": "int32"
      },
      "answer": {
        "type": "string",
        "description": "Answer text",
        "maxLength": 25000,
        "minLength": 1
      },
      "source": {
        "type": "string",
        "description": "Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs",
        "maxLength": 300
      },
      "questions": {
        "type": "array",
        "description": "List of questions associated with the answer.",
        "maxLength": 100,
        "minLength": 1,
        "items": {
          "type": "string"
        }
      },
      "metadata": {
        "type": "array",
        "description": "List of metadata associated with the answer.",
        "maxLength": 10,
        "items": {
          "$ref": "#/definitions/Metadata"
        }
      },
      "context": {
        "description": "Context of a QnA",
        "allOf": [
          {
            "$ref": "#/definitions/Context"
          }
        ]
      },
      "lastUpdatedTimestamp": {
        "type": "string",
        "description": "Timestamp when the QnA was last updated.",
        "maxLength": 300
      }
    }
  },
  "Context": {
    "type": "object",
    "description": "Context associated with Qna.",
    "properties": {
      "isContextOnly": {
        "type": "boolean",
        "description": "To mark if a prompt is relevant only with a previous question or not.\ntrue - Do not include this QnA as search result for queries without context\nfalse - ignores context and includes this QnA in search result"
      },
      "prompts": {
        "type": "array",
        "description": "List of prompts associated with the answer.",
        "maxItems": 20,
        "items": {
          "$ref": "#/definitions/Prompt"
        }
      }
    }
  },
  "Prompt": {
    "type": "object",
    "description": "Prompt for an answer.",
    "properties": {
      "displayOrder": {
        "type": "integer",
        "description": "Index of the prompt - used in ordering of the prompts",
        "format": "int32"
      },
      "qnaId": {
        "type": "integer",
        "description": "Qna id corresponding to the prompt - if QnaId is present, QnA object is ignored.",
        "format": "int32"
      },
      "qna": {
        "description": "QnA - Either QnaId or QnA needs to be present in a Prompt object",
        "allOf": [
          {
            "$ref": "#/definitions/QnA"
          }
        ]
      },
      "displayText": {
        "type": "string",
        "description": "Text displayed to represent a follow up question prompt",
        "maxLength": 200
      }
    }
  },
  "Metadata": {
    "type": "object",
    "description": "Name - value pair of metadata.",
    "additionalProperties": false,
    "required": [
      "name",
      "value"
    ],
    "properties": {
      "name": {
        "type": "string",
        "description": "Metadata name.",
        "maxLength": 100,
        "minLength": 1
      },
      "value": {
        "type": "string",
        "description": "Metadata value.",
        "maxLength": 500,
        "minLength": 1
      }
    }
  },
  "QAErrorResponse": {
    "type": "object",
    "description": "Error response. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
    "additionalProperties": false,
    "properties": {
      "error": {
        "description": "The error object.",
        "allOf": [
          {
            "$ref": "#/definitions/Error"
          }
        ]
      }
    }
  },
  "Error": {
    "type": "object",
    "description": "The error object. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
    "additionalProperties": false,
    "required": [
      "code"
    ],
    "properties": {
      "code": {
        "description": "One of a server-defined set of error codes.",
        "$ref": "#/definitions/ErrorCode"
      },
      "message": {
        "type": "string",
        "description": "A human-readable representation of the error."
      },
      "target": {
        "type": "string",
        "description": "The target of the error."
      },
      "details": {
        "type": "array",
        "description": "An array of details about specific errors that led to this reported error.",
        "items": {
          "$ref": "#/definitions/Error"
        }
      },
      "innerError": {
        "description": "An object containing more specific information than the current object about the error.",
        "$ref": "#/definitions/InnerErrorModel"
      }
    }
  },
  "ErrorCode": {
    "type": "string",
    "description": "Human readable error code.",
    "x-ms-enum": {
      "name": "ErrorCodeType",
      "modelAsString": true
    },
    "enum": [
      "BadArgument",
      "Forbidden",
      "NotFound",
      "KbNotFound",
      "Unauthorized",
      "Unspecified",
      "EndpointKeysError",
      "QuotaExceeded",
      "QnaRuntimeError",
      "SKULimitExceeded",
      "OperationNotFound",
      "ServiceError",
      "ValidationFailure",
      "ExtractionFailure"
    ]
  },
  "InnerErrorModel": {
    "type": "object",
    "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
    "additionalProperties": false,
    "properties": {
      "code": {
        "type": "string",
        "description": "A more specific error code than was provided by the containing error."
      },
      "innerError": {
        "description": "An object containing more specific information than the current object about the error.",
        "$ref": "#/definitions/InnerErrorModel"
      }
    }
  },
  "Query": {
    "type": "object",
    "description": "POST body schema to query the knowledgebase.",
    "additionalProperties": false,
    "properties": {
      "qnaId": {
        "type": "string",
        "description": "Exact qnaId to fetch from the knowledgebase, this field takes priority over question."
      },
      "question": {
        "type": "string",
        "description": "User question to query against the knowledge base."
      },
      "top": {
        "type": "integer",
        "description": "Max number of answers to be returned for the question.",
        "format": "int32"
      },
      "userId": {
        "type": "string",
        "description": "Unique identifier for the user."
      },
      "isTest": {
        "type": "boolean",
        "description": "Query against the test index."
      },
      "scoreThreshold": {
        "type": "number",
        "description": "Minimum threshold score for answers."
      },
      "context": {
        "description": "Context object with previous QnA's information.",
        "allOf": [
          {
            "$ref": "#/definitions/QContext"
          }
        ]
      },
      "rankerType": {
        "type": "string",
        "description": "Optional field. Set to 'QuestionOnly' for using a question only Ranker."
      },
      "strictFilters": {
        "type": "array",
        "description": "Find QnAs that are associated with the given list of metadata.",
        "items": {
          "$ref": "#/definitions/Metadata"
        }
      },
      "strictFiltersCompoundOperationType": {
        "type": "string",
        "description": "Optional field. Set to 'OR' for using OR operation for strict filters.",
        "x-ms-enum": {
          "name": "StrictFiltersCompoundOperationType",
          "modelAsString": true
        },
        "enum": [
          "AND",
          "OR"
        ]
      },
      "answerSpanRequest": {
        "description": "To configure Answer span prediction feature.",
        "allOf": [
          {
            "$ref": "#/definitions/AnswerSpanRequest"
          }
        ]
      }
    }
  },
  "QContext": {
    "type": "object",
    "description": "Context object with previous QnA's information.",
    "additionalProperties": false,
    "properties": {
      "previousQnaId": {
        "type": "integer",
        "description": "Previous QnA Id - qnaId of the top result."
      },
      "previousUserQuery": {
        "type": "string",
        "description": "Previous user query."
      }
    }
  },
  "QnASearchResultList": {
    "type": "object",
    "description": "Represents List of Question Answers.",
    "additionalProperties": false,
    "properties": {
      "answers": {
        "type": "array",
        "description": "Represents Search Result list.",
        "items": {
          "$ref": "#/definitions/QnASearchResult"
        }
      }
    }
  },
  "QnASearchResult": {
    "type": "object",
    "description": "Represents Search Result.",
    "additionalProperties": false,
    "properties": {
      "questions": {
        "type": "array",
        "description": "List of questions.",
        "items": {
          "type": "string"
        }
      },
      "answer": {
        "type": "string",
        "description": "Answer."
      },
      "score": {
        "type": "number",
        "description": "Search result score."
      },
      "id": {
        "type": "integer",
        "description": "Id of the QnA result.",
        "format": "int32"
      },
      "source": {
        "type": "string",
        "description": "Source of QnA result."
      },
      "metadata": {
        "type": "array",
        "description": "List of metadata.",
        "items": {
          "$ref": "#/definitions/Metadata"
        }
      },
      "context": {
        "type": "object",
        "description": "Context object of the QnA",
        "allOf": [
          {
            "$ref": "#/definitions/Context"
          }
        ]
      },
      "answerSpan": {
        "type": "object",
        "description": "Answer span object of QnA with respect to user's question.",
        "allOf": [
          {
            "$ref": "#/definitions/AnswerSpanResponse"
          }
        ]
      }
    }
  },
  "FeedbackRecords": {
    "type": "object",
    "description": "Active learning feedback records.",
    "additionalProperties": false,
    "properties": {
      "feedbackRecords": {
        "type": "array",
        "description": "List of feedback records.",
        "maxLength": 1000,
        "items": {
          "$ref": "#/definitions/FeedbackRecord"
        }
      }
    }
  },
  "FeedbackRecord": {
    "type": "object",
    "description": "Active learning feedback record.",
    "additionalProperties": false,
    "properties": {
      "userId": {
        "type": "string",
        "description": "Unique identifier for the user."
      },
      "userQuestion": {
        "type": "string",
        "description": "The suggested question being provided as feedback.",
        "maxLength": 1000
      },
      "qnaId": {
        "type": "integer",
        "description": "The qnaId for which the suggested question is provided as feedback.",
        "format": "int32"
      }
    }
  },
  "AnswerSpanRequest": {
    "type": "object",
    "description": "To configure Answer span prediction feature.",
    "additionalProperties": false,
    "properties": {
      "enable": {
        "type": "boolean",
        "description": "Enable or Disable Answer Span prediction."
      },
      "scoreThreshold": {
        "type": "number",
        "format": "double",
        "description": "Minimum threshold score required to include an answer span."
      },
      "topAnswersWithSpan": {
        "type": "integer",
        "description": "Number of Top answers to be considered for span prediction.",
        "format": "int32",
        "maximum": 10,
        "minimum": 1
      }
    }
  },
  "AnswerSpanResponse": {
    "type": "object",
    "description": "Answer span object of QnA.",
    "additionalProperties": false,
    "properties": {
      "text": {
        "type": "string",
        "description": "Predicted text of answer span."
      },
      "score": {
        "type": "number",
        "description": "Predicted score of answer span.",
        "format": "double"
      },
      "startIndex": {
        "type": "integer",
        "description": "Start index of answer span in answer.",
        "format": "int32"
      },
      "endIndex": {
        "type": "integer",
        "description": "End index of answer span in answer.",
        "format": "int32"
      }
    }
  },
    "MultiLanguageBatchInput": {
      "type": "object",
      "required": [
        "documents"
      ],
      "properties": {
        "documents": {
          "type": "array",
          "description": "The set of documents to process as part of this batch.",
          "items": {
            "$ref": "#/definitions/MultiLanguageInput"
          }
        }
      },
      "description": "Contains a set of input documents to be analyzed by the service."
    },
    "MultiLanguageInput": {
      "type": "object",
      "required": [
        "id",
        "text"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique, non-empty document identifier."
        },
        "text": {
          "type": "string",
          "description": "The input text to process."
        },
        "language": {
          "type": "string",
          "description": "(Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\" for English as default."
        }
      },
      "description": "Contains an input document to be analyzed by the service."
    },
    "DocumentError": {
      "type": "object",
      "required": [
        "id",
        "error"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Document Id."
        },
        "error": {
          "type": "object",
          "description": "Document Error.",
          "$ref": "#/definitions/TextAnalyticsError"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "object",
          "description": "Document Error.",
          "$ref": "#/definitions/TextAnalyticsError"
        }
      }
    },
    "TextAnalyticsError": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "InvalidRequest",
            "InvalidArgument",
            "InternalServerError",
            "ServiceUnavailable"
          ],
          "x-ms-enum": {
            "name": "ErrorCodeValue",
            "modelAsString": true
          },
          "description": "Error code."
        },
        "message": {
          "type": "string",
          "description": "Error message."
        },
        "target": {
          "type": "string",
          "description": "Error target."
        },
        "innererror": {
          "$ref": "#/definitions/InnerError",
          "description": "Inner error contains more specific information."
        },
        "details": {
          "type": "array",
          "description": "Details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/TextAnalyticsError"
          }
        }
      }
    },
    "TextAnalyticsWarning": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "LongWordsInDocument",
            "DocumentTruncated"
          ],
          "x-ms-enum": {
            "name": "WarningCodeValue",
            "modelAsString": true
          },
          "description": "Error code."
        },
        "message": {
          "type": "string",
          "description": "Warning message."
        },
        "targetRef": {
          "type": "string",
          "description": "A JSON pointer reference indicating the target object."
        }
      }
    },
    "InnerError": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "InvalidParameterValue",
            "InvalidRequestBodyFormat",
            "EmptyRequest",
            "MissingInputRecords",
            "InvalidDocument",
            "ModelVersionIncorrect",
            "InvalidDocumentBatch",
            "UnsupportedLanguageCode",
            "InvalidCountryHint"
          ],
          "x-ms-enum": {
            "name": "InnerErrorCodeValue",
            "modelAsString": true
          },
          "description": "Error code."
        },
        "message": {
          "type": "string",
          "description": "Error message."
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Error details."
        },
        "target": {
          "type": "string",
          "description": "Error target."
        },
        "innererror": {
          "$ref": "#/definitions/InnerError",
          "description": "Inner error contains more specific information."
        }
      }
    },
    "SentimentResponse": {
      "type": "object",
      "required": [
        "documents",
        "errors",
        "modelVersion"
      ],
      "properties": {
        "documents": {
          "type": "array",
          "description": "Sentiment analysis per document.",
          "items": {
            "$ref": "#/definitions/DocumentSentiment"
          }
        },
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        },
        "modelVersion": {
          "type": "string",
          "description": "This field indicates which model is used for scoring."
        }
      }
    },
    "DocumentSentiment": {
      "type": "object",
      "required": [
        "id",
        "sentiment",
        "confidenceScores",
        "sentences",
        "warnings"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "sentiment": {
          "type": "string",
          "description": "Predicted sentiment for document (Negative, Neutral, Positive, or Mixed).",
          "enum": [
            "positive",
            "neutral",
            "negative",
            "mixed"
          ],
          "x-ms-enum": {
            "name": "DocumentSentimentValue",
            "modelAsString": false
          }
        },
        "statistics": {
          "$ref": "#/definitions/DocumentStatistics"
        },
        "confidenceScores": {
          "description": "Document level sentiment confidence scores between 0 and 1 for each sentiment class.",
          "$ref": "#/definitions/SentimentConfidenceScorePerLabel"
        },
        "sentences": {
          "type": "array",
          "description": "Sentence level sentiment analysis.",
          "items": {
            "$ref": "#/definitions/SentenceSentiment"
          }
        },
        "warnings": {
          "type": "array",
          "description": "Warnings encountered while processing document.",
          "items": {
            "$ref": "#/definitions/TextAnalyticsWarning"
          }
        }
      }
    },
    "RequestStatistics": {
      "type": "object",
      "required": [
        "documentsCount",
        "validDocumentsCount",
        "erroneousDocumentsCount",
        "transactionsCount"
      ],
      "properties": {
        "documentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of documents submitted in the request."
        },
        "validDocumentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of valid documents. This excludes empty, over-size limit or non-supported languages documents."
        },
        "erroneousDocumentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of invalid documents. This includes empty, over-size limit or non-supported languages documents."
        },
        "transactionsCount": {
          "type": "integer",
          "format": "int64",
          "description": "Number of transactions for the request."
        }
      },
      "description": "if showStats=true was specified in the request this field will contain information about the request payload."
    },
    "DocumentStatistics": {
      "type": "object",
      "required": [
        "charactersCount",
        "transactionsCount"
      ],
      "properties": {
        "charactersCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of text elements recognized in the document."
        },
        "transactionsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of transactions for the document."
        }
      },
      "description": "if showStats=true was specified in the request this field will contain information about the document payload."
    },
    "SentimentConfidenceScorePerLabel": {
      "type": "object",
      "required": [
        "positive",
        "neutral",
        "negative"
      ],
      "properties": {
        "positive": {
          "type": "number",
          "format": "double"
        },
        "neutral": {
          "type": "number",
          "format": "double"
        },
        "negative": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative."
    },
    "SentenceSentiment": {
      "type": "object",
      "required": [
        "text",
        "sentiment",
        "confidenceScores",
        "offset",
        "length"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "The sentence text."
        },
        "sentiment": {
          "type": "string",
          "description": "The predicted Sentiment for the sentence.",
          "enum": [
            "positive",
            "neutral",
            "negative"
          ],
          "x-ms-enum": {
            "name": "SentenceSentimentValue",
            "modelAsString": false
          }
        },
        "confidenceScores": {
          "description": "The sentiment confidence score between 0 and 1 for the sentence for all classes.",
          "$ref": "#/definitions/SentimentConfidenceScorePerLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The sentence offset from the start of the document."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the sentence."
        },
        "aspects": {
          "type": "array",
          "description": "The array of aspect object for the sentence.",
          "items": {
            "$ref": "#/definitions/SentenceAspect"
          }
        },
        "opinions": {
          "type": "array",
          "description": "The array of opinion object for the sentence.",
          "items": {
            "$ref": "#/definitions/SentenceOpinion"
          }
        }
      }
    },
    "SentenceAspect": {
      "type": "object",
      "required": [
        "confidenceScores",
        "length",
        "offset",
        "relations",
        "sentiment",
        "text"
      ],
      "properties": {
        "sentiment": {
          "type": "string",
          "enum": [
            "positive",
            "mixed",
            "negative"
          ],
          "x-ms-enum": {
            "name": "TokenSentimentValue",
            "modelAsString": false
          },
          "description": "Aspect level sentiment for the aspect in the sentence."
        },
        "confidenceScores": {
          "description": "Aspect level sentiment confidence scores for the aspect in the sentence.",
          "$ref": "#/definitions/AspectConfidenceScoreLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The aspect offset from the start of the sentence."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the aspect."
        },
        "text": {
          "type": "string",
          "description": "The aspect text detected."
        },
        "relations": {
          "type": "array",
          "description": "The array of either opinion or aspect object which is related to the aspect.",
          "items": {
            "$ref": "#/definitions/AspectRelation"
          }
        }
      }
    },
    "SentenceOpinion": {
      "type": "object",
      "required": [
        "confidenceScores",
        "isNegated",
        "length",
        "offset",
        "sentiment",
        "text"
      ],
      "properties": {
        "sentiment": {
          "type": "string",
          "enum": [
            "positive",
            "mixed",
            "negative"
          ],
          "x-ms-enum": {
            "name": "TokenSentimentValue",
            "modelAsString": false
          },
          "description": "Opinion level sentiment for the aspect in the sentence."
        },
        "confidenceScores": {
          "description": "Opinion level sentiment confidence scores for the aspect in the sentence.",
          "$ref": "#/definitions/AspectConfidenceScoreLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The opinion offset from the start of the sentence."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the opinion."
        },
        "text": {
          "type": "string",
          "description": "The aspect text detected."
        },
        "isNegated": {
          "type": "boolean",
          "description": "The indicator representing if the opinion is negated."
        }
      }
    },
    "AspectRelation": {
      "type": "object",
      "required": [
        "ref",
        "relationType"
      ],
      "properties": {
        "relationType": {
          "type": "string",
          "enum": [
            "opinion",
            "aspect"
          ],
          "x-ms-enum": {
            "name": "AspectRelationType",
            "modelAsString": false
          },
          "description": "The type related to the aspect."
        },
        "ref": {
          "type": "string",
          "description": "The JSON pointer indicating the linked object."
        }
      }
    },
    "AspectConfidenceScoreLabel": {
      "type": "object",
      "required": [
        "negative",
        "positive"
      ],
      "properties": {
        "positive": {
          "type": "number",
          "format": "double"
        },
        "negative": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Represents the confidence scores across all sentiment classes: positive, neutral, negative."
    },
    "EntitiesResult": {
      "type": "object",
      "required": [
        "documents",
        "errors",
        "modelVersion"
      ],
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/DocumentEntities"
          }
        },
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        },
        "modelVersion": {
          "type": "string",
          "description": "This field indicates which model is used for scoring."
        }
      }
    },
    "PiiEntitiesResult": {
      "type": "object",
      "required": [
        "documents",
        "errors",
        "modelVersion"
      ],
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/PiiDocumentEntities"
          }
        },
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        },
        "modelVersion": {
          "type": "string",
          "description": "This field indicates which model is used for scoring."
        }
      }
    },
    "DocumentEntities": {
      "type": "object",
      "required": [
        "id",
        "entities",
        "warnings"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "entities": {
          "type": "array",
          "description": "Recognized entities in the document.",
          "items": {
            "$ref": "#/definitions/Entity"
          }
        },
        "warnings": {
          "type": "array",
          "description": "Warnings encountered while processing document.",
          "items": {
            "$ref": "#/definitions/TextAnalyticsWarning"
          }
        },
        "statistics": {
          "description": "if showStats=true was specified in the request this field will contain information about the document payload.",
          "$ref": "#/definitions/DocumentStatistics"
        }
      }
    },
    "PiiDocumentEntities": {
      "type": "object",
      "required": [
        "id",
        "entities",
        "warnings"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "entities": {
          "type": "array",
          "description": "Recognized entities in the document.",
          "items": {
            "$ref": "#/definitions/Entity"
          }
        },
        "warnings": {
          "type": "array",
          "description": "Warnings encountered while processing document.",
          "items": {
            "$ref": "#/definitions/TextAnalyticsWarning"
          }
        },
        "statistics": {
          "description": "if showStats=true was specified in the request this field will contain information about the document payload.",
          "$ref": "#/definitions/DocumentStatistics"
        },
        "redactedText": {
          "type": "string",
          "description": "Returns redacted text."
        }
      }
    },
    "Entity": {
      "type": "object",
      "required": [
        "text",
        "category",
        "offset",
        "length",
        "confidenceScore"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "category": {
          "type": "string",
          "description": "Entity type, such as Person/Location/Org/SSN etc"
        },
        "subcategory": {
          "type": "string",
          "description": "Entity sub type, such as Age/Year/TimeRange etc"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity text."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity text."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the extracted entity."
        }
      }
    },
    "EntityLinkingResult": {
      "type": "object",
      "required": [
        "documents",
        "errors",
        "modelVersion"
      ],
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/DocumentLinkedEntities"
          }
        },
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        },
        "modelVersion": {
          "type": "string",
          "description": "This field indicates which model is used for scoring."
        }
      }
    },
    "DocumentLinkedEntities": {
      "type": "object",
      "required": [
        "id",
        "entities",
        "warnings"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "entities": {
          "type": "array",
          "description": "Recognized well-known entities in the document.",
          "items": {
            "$ref": "#/definitions/LinkedEntity"
          }
        },
        "warnings": {
          "type": "array",
          "description": "Warnings encountered while processing document.",
          "items": {
            "$ref": "#/definitions/TextAnalyticsWarning"
          }
        },
        "statistics": {
          "description": "if showStats=true was specified in the request this field will contain information about the document payload.",
          "$ref": "#/definitions/DocumentStatistics"
        }
      }
    },
    "LinkedEntity": {
      "type": "object",
      "required": [
        "name",
        "matches",
        "language",
        "url",
        "dataSource"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Entity Linking formal name."
        },
        "matches": {
          "type": "array",
          "description": "List of instances this entity appears in the text.",
          "items": {
            "$ref": "#/definitions/Match"
          }
        },
        "language": {
          "type": "string",
          "description": "Language used in the data source."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the recognized entity from the data source."
        },
        "url": {
          "type": "string",
          "description": "URL for the entity's page from the data source."
        },
        "dataSource": {
          "type": "string",
          "description": "Data source used to extract entity linking, such as Wiki/Bing etc."
        },
        "bingId": {
          "type": "string",
          "description": "Bing unique identifier of the recognized entity. Use in conjunction with the Bing Entity Search API to fetch additional relevant information."
        }
      }
    },
    "Match": {
      "type": "object",
      "required": [
        "confidenceScore",
        "text",
        "offset",
        "length"
      ],
      "properties": {
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "If a well-known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned."
        },
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity match text."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity match text."
        }
      }
    },
    "KeyPhraseResult": {
      "type": "object",
      "required": [
        "documents",
        "errors",
        "modelVersion"
      ],
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/DocumentKeyPhrases"
          }
        },
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        },
        "modelVersion": {
          "type": "string",
          "description": "This field indicates which model is used for scoring."
        }
      }
    },
    "DocumentKeyPhrases": {
      "type": "object",
      "required": [
        "id",
        "keyPhrases",
        "warnings"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "keyPhrases": {
          "type": "array",
          "description": "A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document.",
          "items": {
            "type": "string"
          }
        },
        "warnings": {
          "type": "array",
          "description": "Warnings encountered while processing document.",
          "items": {
            "$ref": "#/definitions/TextAnalyticsWarning"
          }
        },
        "statistics": {
          "description": "if showStats=true was specified in the request this field will contain information about the document payload.",
          "$ref": "#/definitions/DocumentStatistics"
        }
      }
    },
    "LanguageBatchInput": {
      "type": "object",
      "required": [
        "documents"
      ],
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageInput"
          }
        }
      }
    },
    "LanguageInput": {
      "type": "object",
      "required": [
        "id",
        "text"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "text": {
          "type": "string"
        },
        "countryHint": {
          "type": "string"
        }
      }
    },
    "LanguageResult": {
      "type": "object",
      "required": [
        "documents",
        "errors",
        "modelVersion"
      ],
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/DocumentLanguage"
          }
        },
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        },
        "modelVersion": {
          "type": "string",
          "description": "This field indicates which model is used for scoring."
        }
      }
    },
    "DocumentLanguage": {
      "type": "object",
      "required": [
        "id",
        "detectedLanguage",
        "warnings"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "detectedLanguage": {
          "description": "Detected Language.",
          "$ref": "#/definitions/DetectedLanguage"
        },
        "warnings": {
          "type": "array",
          "description": "Warnings encountered while processing document.",
          "items": {
            "$ref": "#/definitions/TextAnalyticsWarning"
          }
        },
        "statistics": {
          "description": "if showStats=true was specified in the request this field will contain information about the document payload.",
          "$ref": "#/definitions/DocumentStatistics"
        }
      }
    },
    "DetectedLanguage": {
      "type": "object",
      "required": [
        "name",
        "iso6391Name",
        "confidenceScore"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Long name of a detected language (e.g. English, French)."
        },
        "iso6391Name": {
          "type": "string",
          "description": "A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr)."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true."
        }
      }
    }
  },
  "parameters": {
    "Endpoint": {
      "name": "Endpoint",
      "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    },
    "ServicePrefix": {
      "name": "ServicePrefix",
      "description": "Supported sub service prefixes through this cognitive service.",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    },
    "StringIndexType": {
      "name": "stringIndexType",
      "in": "query",
      "type": "string",
      "description": "(Optional) Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets",
      "default": "TextElements_v8",
      "enum": [
        "TextElements_v8",
        "UnicodeCodePoint",
        "Utf16CodeUnit"
      ],
      "x-ms-enum": {
        "name": "StringIndexType",
        "modelAsString": true,
        "values": [
          {
            "value": "TextElements_v8",
            "description": "Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo."
          },
          {
            "value": "UnicodeCodePoint",
            "description": "Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python."
          },
          {
            "value": "Utf16CodeUnit",
            "description": "Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "ShowStats": {
      "name": "showStats",
      "in": "query",
      "description": "(Optional) if set to true, response will contain request and document level statistics.",
      "type": "boolean",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "ModelVersion": {
      "name": "model-version",
      "in": "query",
      "description": "(Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. ",
      "type": "string",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "MultiLanguageInput": {
      "in": "body",
      "name": "input",
      "description": "Collection of documents to analyze.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/MultiLanguageBatchInput"
      },
      "x-ms-parameter-location": "method"
    },
    "LanguageInput": {
      "in": "body",
      "name": "input",
      "description": "Collection of documents to analyze for language endpoint.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/LanguageBatchInput"
      },
      "x-ms-parameter-location": "method"
    },
    "KbId": {
      "type": "string",
      "name": "kbId",
      "in": "path",
      "required": true,
      "x-nullable": false,
      "description": "Knowledgebase id.",
      "x-ms-parameter-location": "method"
    },
    "GenerateAnswerPayload": {
      "name": "generateAnswerPayload",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Query"
      },
      "x-nullable": true,
      "description": "Post body of the request.",
      "x-ms-parameter-location": "method"
    }
  }
}
