{
  "openapi": "3.0.0",
  "info": {
    "title": "Azure OpenAI API version 2025-04-01-preview",
    "description": "APIs for fine-tuning and managing deployments of OpenAI models.",
    "version": "2025-04-01-preview"
  },
  "paths": {
    "/batches": {
      "get": {
        "tags": [
          "Batch:"
        ],
        "summary": "Gets a list of all batches owned by the Azure OpenAI resource.",
        "operationId": "Batch_List",
        "parameters": [
          {
            "in": "query",
            "name": "after",
            "description": "Identifier for the last event from the previous pagination request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Number of batches to retrieve. Defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The OData expression to describe the filtering conditions.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$orderby",
            "description": "The OData expression to describe the sorting order.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchesList"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting all batches owned by this account.": {
            "$ref": "./examples/get_batches.json"
          }
        }
      },
      "post": {
        "tags": [
          "Batch:"
        ],
        "summary": "Creates and executes a batch from an uploaded file of requests.\r\nResponse includes details of the enqueued job including job status.\r\nThe ID of the result file is added to the response once complete.",
        "operationId": "Batch_Create",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchCreateRequest"
              }
            }
          },
          "description": "The specification of the batch to create and execute.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "The batch has been successfully created.",
            "headers": {
              "deployment-enqueued-tokens": {
                "description": "Sum of enqueued tokens of all jobs that target to the deployment.",
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "deployment-maximum-enqueued-tokens": {
                "description": "Maximum enqueued tokens of the deployment.",
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Batch"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Creating a batch.": {
            "$ref": "./examples/post_batch.json"
          }
        }
      }
    },
    "/batches/{batch-id}": {
      "get": {
        "tags": [
          "Batch:"
        ],
        "summary": "Gets details for a single batch specified by the given batch-id.",
        "operationId": "Batch_Get",
        "parameters": [
          {
            "in": "path",
            "name": "batch-id",
            "description": "The identifier of the batch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Batch"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting a batch.": {
            "$ref": "./examples/get_batch.json"
          }
        }
      }
    },
    "/batches/{batch-id}/cancel": {
      "post": {
        "tags": [
          "Batch:"
        ],
        "summary": "Cancels the processing of the batch specified by the given batch-id.",
        "operationId": "Batch_Cancel",
        "parameters": [
          {
            "in": "path",
            "name": "batch-id",
            "description": "The identifier of the batch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The batch has been successfully canceled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Batch"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Canceling a batch.": {
            "$ref": "./examples/cancel_batch.json"
          }
        }
      }
    },
    "/chat/completions": {
      "get": {
        "tags": [
          "StoredCompletion:"
        ],
        "summary": "Gets list of stored completions.",
        "operationId": "StoredCompletion_List",
        "parameters": [
          {
            "in": "query",
            "name": "metadata",
            "description": "Filter by the (key, value) pair in stored completion.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "model",
            "description": "Filter by model name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Identifier for the last stored completion from the previous pagination request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Number of stored completions to retrieve. Defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order of the results by created time (ascending or descending). Default to desc.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredCompletionList"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Gets list of stored completions.": {
            "$ref": "./examples/get_stored_completion_list.json"
          }
        }
      }
    },
    "/chat/completions/{stored-completion-id}": {
      "get": {
        "tags": [
          "StoredCompletion:"
        ],
        "summary": "Gets stored completion by the given stored completion id.",
        "operationId": "StoredCompletion_Get",
        "parameters": [
          {
            "in": "path",
            "name": "stored-completion-id",
            "description": "The identifier of the stored completion.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredCompletionResponse"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Gets stored completion by the given stored completion id.": {
            "$ref": "./examples/get_stored_completion.json"
          }
        }
      },
      "post": {
        "tags": [
          "StoredCompletion:"
        ],
        "summary": "Update stored completion by the given stored completion id.",
        "operationId": "StoredCompletion_Update",
        "parameters": [
          {
            "in": "path",
            "name": "stored-completion-id",
            "description": "The identifier of the stored completion.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStoredCompletionRequest"
              }
            }
          },
          "description": "Arbitrary key-value pairs for additional information.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredCompletion"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Update stored completion by the given stored completion id.": {
            "$ref": "./examples/update_stored_completion.json"
          }
        }
      },
      "delete": {
        "tags": [
          "StoredCompletion:"
        ],
        "summary": "Delete stored completion by the given stored completion id.",
        "operationId": "StoredCompletion_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "stored-completion-id",
            "description": "The identifier of the stored completion.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The stored completion was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredCompletionDelete"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete stored completion by the given stored completion id.": {
            "$ref": "./examples/delete_stored_completion.json"
          }
        }
      }
    },
    "/chat/completions/{stored-completion-id}/messages": {
      "get": {
        "tags": [
          "StoredCompletion:"
        ],
        "summary": "Gets stored completion messages by the given stored completion id.",
        "operationId": "StoredCompletion_GetMessages",
        "parameters": [
          {
            "in": "path",
            "name": "stored-completion-id",
            "description": "The identifier of the stored completion.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Identifier for the last stored completion message from the previous pagination request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Number of stored completions messages to retrieve. Defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order of the results by message index (ascending or descending). Default to asc.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredCompletionMessages"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Gets stored completion messages by the given stored completion id.": {
            "$ref": "./examples/get_stored_completion_messages.json"
          }
        }
      }
    },
    "/evals": {
      "get": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "List evaluations for a project.",
        "operationId": "Evaluation_GetList",
        "parameters": [
          {
            "description": "Identifier for the last eval from the previous pagination request.",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of evals to retrieve.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "Sort order for evals by timestamp. Use `asc` for ascending order or `desc` for descending order.",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "description": "Evals can be ordered by creation time or last updated time. Use `created_at` for creation time or `updated_at` for last updated time.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "default": "created_at"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of evals",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EvalList"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting all the evaluations owned by this account.": {
            "$ref": "./examples/get_evaluation_list.json"
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Create the structure of an evaluation that can be used to test a model's performance.\nAn evaluation is a set of testing criteria and a datasource. After creating an evaluation, you can run it on different models and model parameters. We support several types of graders and datasources. ",
        "operationId": "Evaluation_Create",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Eval"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "The evaluation has been created successfully.": {
            "$ref": "./examples/post_evaluation.json"
          }
        }
      }
    },
    "/evals/{eval-id}": {
      "delete": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Delete an evaluation.",
        "operationId": "Evaluation_Delete",
        "parameters": [
          {
            "description": "The ID of the evaluation to delete.",
            "in": "path",
            "name": "eval-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the evaluation.",
            "content": {
              "*/*": {
                "schema": {
                  "properties": {
                    "deleted": {
                      "example": true,
                      "type": "boolean"
                    },
                    "eval_id": {
                      "example": "eval_abc123",
                      "type": "string"
                    },
                    "object": {
                      "example": "eval.deleted",
                      "type": "string"
                    }
                  },
                  "required": [
                    "object",
                    "deleted",
                    "eval_id"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation not found.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Deletes an evaluation.": {
            "$ref": "./examples/delete_evaluation.json"
          }
        }
      },
      "get": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Get an evaluation by ID.",
        "operationId": "Evaluation_Get",
        "parameters": [
          {
            "description": "The ID of the evaluation to retrieve.",
            "in": "path",
            "name": "eval-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The evaluation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Eval"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting the evaluation.": {
            "$ref": "./examples/get_evaluation.json"
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Update certain properties of an evaluation.",
        "operationId": "Evaluation_Update",
        "parameters": [
          {
            "description": "The ID of the evaluation to update.",
            "in": "path",
            "name": "eval-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated evaluation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Eval"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Deletes an evaluation.": {
            "$ref": "./examples/update_evaluation.json"
          }
        }
      }
    },
    "/evals/{eval-id}/runs": {
      "get": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Get a list of runs for an evaluation.",
        "operationId": "Evaluation_GetRunList",
        "parameters": [
          {
            "description": "The ID of the evaluation to retrieve runs for.",
            "in": "path",
            "name": "eval-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Identifier for the last run from the previous pagination request.",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of runs to retrieve.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "description": "Filter runs by status. Use \"queued\" | \"in_progress\" | \"failed\"  | \"completed\" | \"canceled\".",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "queued",
                "in_progress",
                "completed",
                "canceled",
                "failed"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of runs for the evaluation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EvalRunList"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting all evaluation runs under the given evaluation.": {
            "$ref": "./examples/get_evaluation_run_list.json"
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Create a new evaluation run. This is the endpoint that will kick off grading.",
        "operationId": "Evaluation_CreateRun",
        "parameters": [
          {
            "description": "The ID of the evaluation to create a run for.",
            "in": "path",
            "name": "eval-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a run for the evaluation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EvalRun"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (for example, missing eval object)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Creating an evaluation run.": {
            "$ref": "./examples/post_evaluation_run.json"
          }
        }
      }
    },
    "/evals/{eval-id}/runs/{run-id}": {
      "delete": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Delete an eval run.",
        "operationId": "Evaluation_DeleteRun",
        "parameters": [
          {
            "description": "The ID of the evaluation to delete the run from.",
            "in": "path",
            "name": "eval-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the run to delete.",
            "in": "path",
            "name": "run-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the eval run",
            "content": {
              "*/*": {
                "schema": {
                  "properties": {
                    "deleted": {
                      "example": true,
                      "type": "boolean"
                    },
                    "object": {
                      "example": "eval.run.deleted",
                      "type": "string"
                    },
                    "run_id": {
                      "example": "evalrun_677469f564d48190807532a852da3afb",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Run not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Deletes evaluation run.": {
            "$ref": "./examples/delete_evaluation_run.json"
          }
        }
      },
      "get": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Get an evaluation run by ID.",
        "operationId": "Evaluation_GetRun",
        "parameters": [
          {
            "description": "The ID of the evaluation to retrieve runs for.",
            "in": "path",
            "name": "eval-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the run to retrieve.",
            "in": "path",
            "name": "run-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The evaluation run",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EvalRun"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting an evaluation run.": {
            "$ref": "./examples/get_evaluation_run.json"
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Cancel an ongoing evaluation run.",
        "operationId": "Evaluation_CancelRun",
        "parameters": [
          {
            "description": "The ID of the evaluation whose run you want to cancel.",
            "in": "path",
            "name": "eval-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the run to cancel.",
            "in": "path",
            "name": "run-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The canceled eval run object",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EvalRun"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Canceling evaluation run.": {
            "$ref": "./examples/post_cancel_evaluation_run.json"
          }
        }
      }
    },
    "/evals/{eval-id}/runs/{run-id}/output_items": {
      "get": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Get a list of output items for an evaluation run.",
        "operationId": "Evaluation_GetRunOutputItems",
        "parameters": [
          {
            "description": "The ID of the evaluation to retrieve runs for.",
            "in": "path",
            "name": "eval-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the run to retrieve output items for.",
            "in": "path",
            "name": "run-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Identifier for the last output item from the previous pagination request.",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of output items to retrieve.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "description": "Filter output items by status. Use `failed` to filter by failed output items or `pass` to filter by passed output items.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "fail",
                "pass"
              ]
            }
          },
          {
            "description": "Sort order for output items by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of output items for the evaluation run",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EvalRunOutputItemList"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting data item outputs for this evaluation run.": {
            "$ref": "./examples/get_evaluation_run_output_items_list.json"
          }
        }
      }
    },
    "/evals/{eval-id}/runs/{run-id}/output_items/{output-item-id}": {
      "get": {
        "tags": [
          "Evaluation:"
        ],
        "summary": "Get an evaluation run output item by ID.",
        "operationId": "Evaluation_GetRunOutputItem",
        "parameters": [
          {
            "description": "The ID of the evaluation to retrieve runs for.",
            "in": "path",
            "name": "eval-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the run to retrieve.",
            "in": "path",
            "name": "run-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the output item to retrieve.",
            "in": "path",
            "name": "output-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The evaluation run output item",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EvalRunOutputItem"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting single data item output for this evaluation run.": {
            "$ref": "./examples/get_evaluation_run_output_items.json"
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "Files:"
        ],
        "summary": "Gets a list of all files owned by the Azure OpenAI resource.\r\nThese include user uploaded content like files with purpose \"fine-tune\" for training or validation of fine-tunes models\r\nas well as files that are generated by the service such as \"fine-tune-results\" which contains various metrics for the corresponding fine-tune job.",
        "operationId": "Files_List",
        "parameters": [
          {
            "in": "query",
            "name": "purpose",
            "description": "Only return files with the given purpose.",
            "x-ms-enum": {
              "name": "Purpose",
              "modelAsString": true,
              "values": [
                {
                  "value": "fine-tune",
                  "description": "This file contains training data for a fine tune job."
                },
                {
                  "value": "fine-tune-results",
                  "description": "This file contains the results of a fine tune job."
                },
                {
                  "value": "assistants",
                  "description": "This file contains data to be used in assistants."
                },
                {
                  "value": "assistants_output",
                  "description": "This file contains the results of an assistant."
                },
                {
                  "value": "batch",
                  "description": "This file contains the input data for a batch."
                },
                {
                  "value": "batch_output",
                  "description": "This file contains the results of a batch."
                },
                {
                  "value": "evals",
                  "description": "User uploaded files for use in Evals."
                },
                {
                  "value": "evals_output",
                  "description": "This file contains outputs from eval runs."
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "fine-tune",
                "fine-tune-results",
                "assistants",
                "assistants_output",
                "batch",
                "batch_output",
                "evals",
                "evals_output"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileList"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting all files owned by this account.": {
            "$ref": "./examples/get_files.json"
          }
        }
      },
      "post": {
        "tags": [
          "Files:"
        ],
        "summary": "Creates a new file entity by uploading data from a local machine. Uploaded files can, for example, be used for training or evaluating fine-tuned models.",
        "operationId": "Files_Upload",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "purpose": {
                    "description": "The intended purpose of the uploaded documents. Use \"fine-tune\" for fine-tuning. This allows us to validate the format of the uploaded file.",
                    "type": "string",
                    "enum": [
                      "fine-tune",
                      "fine-tune-results",
                      "assistants",
                      "assistants_output",
                      "batch",
                      "batch_output",
                      "evals",
                      "evals_output"
                    ],
                    "x-ms-enum": {
                      "name": "Purpose",
                      "modelAsString": true,
                      "values": [
                        {
                          "value": "fine-tune",
                          "description": "This file contains training data for a fine tune job."
                        },
                        {
                          "value": "fine-tune-results",
                          "description": "This file contains the results of a fine tune job."
                        },
                        {
                          "value": "assistants",
                          "description": "This file contains data to be used in assistants."
                        },
                        {
                          "value": "assistants_output",
                          "description": "This file contains the results of an assistant."
                        },
                        {
                          "value": "batch",
                          "description": "This file contains the input data for a batch."
                        },
                        {
                          "value": "batch_output",
                          "description": "This file contains the results of a batch."
                        },
                        {
                          "value": "evals",
                          "description": "User uploaded files for use in Evals."
                        },
                        {
                          "value": "evals_output",
                          "description": "This file contains outputs from eval runs."
                        }
                      ]
                    }
                  },
                  "file": {
                    "description": "Gets or sets the file to upload into Azure OpenAI.",
                    "type": "string",
                    "format": "binary"
                  },
                  "expires_after.anchor": {
                    "description": "Defines the anchor relative to what time the absolute expiration should be generated from.",
                    "type": "string",
                    "enum": [
                      "created_at"
                    ],
                    "x-ms-enum": {
                      "name": "FileExpiryAnchor",
                      "modelAsString": true,
                      "values": [
                        {
                          "value": "created_at",
                          "description": "Defines the expiration anchor to be created_at time."
                        }
                      ]
                    }
                  },
                  "expires_after.seconds": {
                    "description": "Gets the relative expiration time in seconds.\r\nRange: [1209600 - 2592000].",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 1209600,
                    "maximum": 2592000
                  }
                },
                "required": [
                  "purpose",
                  "file"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The file has been successfully created.",
            "headers": {
              "Location": {
                "description": "The location of the newly created item.",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Upload a file.": {
            "$ref": "./examples/upload_file.json"
          }
        }
      }
    },
    "/files/import": {
      "post": {
        "tags": [
          "Files:"
        ],
        "summary": "Creates a new file entity by importing data from a provided url. Uploaded files can, for example, be used for training or evaluating fine-tuned models.",
        "operationId": "Files_Import",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileImport"
              }
            }
          },
          "description": "The definition of the file to create including its purpose, the file name and the url of the file location.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "The file has been successfully created.",
            "headers": {
              "Location": {
                "description": "The location of the newly created item.",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Importing a file with a blob url as source.": {
            "$ref": "./examples/import_file.json"
          }
        }
      }
    },
    "/files/{file-id}": {
      "get": {
        "tags": [
          "Files:"
        ],
        "summary": "Gets details for a single file specified by the given file-id including status, size, purpose, etc.",
        "operationId": "Files_Get",
        "parameters": [
          {
            "in": "path",
            "name": "file-id",
            "description": "The identifier of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting a file.": {
            "$ref": "./examples/get_file.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Files:"
        ],
        "summary": "Deletes the file with the given file-id.\r\nDeletion is also allowed if a file was used, e.g., as training file in a fine-tune job.",
        "operationId": "Files_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "file-id",
            "description": "The identifier of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The file was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDelete"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Deleting a file.": {
            "$ref": "./examples/delete_file.json"
          }
        }
      }
    },
    "/files/{file-id}/content": {
      "get": {
        "tags": [
          "Files:"
        ],
        "summary": "Gets the content of the file specified by the given file-id.\r\nFiles can be user uploaded content or generated by the service like result metrics of a fine-tune job.",
        "operationId": "Files_GetContent",
        "parameters": [
          {
            "in": "path",
            "name": "file-id",
            "description": "The identifier of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting the file content.": {
            "$ref": "./examples/get_file_content.json"
          }
        }
      }
    },
    "/fine_tuning/jobs": {
      "get": {
        "tags": [
          "Fine-tuning:"
        ],
        "summary": "Gets a list of all fine-tune jobs owned by the Azure OpenAI resource.\r\nThe details that are returned for each fine-tune job contain besides its identifier\r\nthe base model, training and validation files, hyper parameters, time stamps, status and events.\r\nEvents are created when the job status changes, e.g. running or complete, and when results are uploaded.",
        "operationId": "FineTuning_List",
        "parameters": [
          {
            "in": "query",
            "name": "after",
            "description": "Identifier for the last event from the previous pagination request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Number of events to retrieve. Defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJobList"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting all fine tuning jobs owned by this account.": {
            "$ref": "./examples/get_finetuning_jobs.json"
          }
        }
      },
      "post": {
        "tags": [
          "Fine-tuning:"
        ],
        "summary": "Creates a job that fine-tunes a specified model from a given training file.\r\nResponse includes details of the enqueued job including job status and hyper parameters.\r\nThe name of the fine-tuned model is added to the response once complete.",
        "operationId": "FineTuning_Create",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FineTuningJobCreation"
              }
            }
          },
          "description": "The specification of the fine-tuned model to create.\r\nRequired parameters are the base model and the training file to use.\r\nOptionally a validation file can be specified to compute validation metrics during training.\r\nHyper parameters will be set to default values or can be optionally specified.\r\nThese include batch size, learning rate multiplier, number of epochs and others.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "The fine tune has been successfully created.",
            "headers": {
              "Location": {
                "description": "The location of the newly created item.",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Creating a fine tuning job.": {
            "$ref": "./examples/post_finetuning_job.json"
          }
        }
      }
    },
    "/fine_tuning/jobs/{fine-tuning-job-id}": {
      "get": {
        "tags": [
          "Fine-tuning:"
        ],
        "summary": "Gets details for a single fine-tune job specified by the given fine-tune-id.\r\nThe details contain the base model, training and validation files, hyper parameters, time stamps, status and events.\r\nEvents are created when the job status changes, e.g. running or complete, and when results are uploaded.",
        "operationId": "FineTuning_Get",
        "parameters": [
          {
            "in": "path",
            "name": "fine-tuning-job-id",
            "description": "The identifier of the fine-tune job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting a fine tuning job.": {
            "$ref": "./examples/get_finetuning_job.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Fine-tuning:"
        ],
        "summary": "Deletes the fine-tune job specified by the given fine-tune-id.",
        "operationId": "FineTuning_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "fine-tuning-job-id",
            "description": "The identifier of the fine-tune job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The fine tune was successfully deleted."
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Deleting a fine tuning job.": {
            "$ref": "./examples/delete_finetuning_job.json"
          }
        }
      }
    },
    "/fine_tuning/jobs/{fine-tuning-job-id}/cancel": {
      "post": {
        "tags": [
          "Fine-tuning:"
        ],
        "summary": "Cancels the processing of the fine-tune job specified by the given fine-tune-id.",
        "operationId": "FineTuning_Cancel",
        "parameters": [
          {
            "in": "path",
            "name": "fine-tuning-job-id",
            "description": "The identifier of the fine-tune job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The fine tune has been successfully canceled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Canceling a fine tuning job.": {
            "$ref": "./examples/cancel_finetuning_job.json"
          }
        }
      }
    },
    "/fine_tuning/jobs/{fine-tuning-job-id}/checkpoints": {
      "get": {
        "tags": [
          "Fine-tuning:"
        ],
        "summary": "Gets the checkpoints for the fine-tune job specified by the given fine-tune-id.\r\nCheckpoints are created at the end of successful epochs during training.",
        "operationId": "FineTuning_GetCheckpoints",
        "parameters": [
          {
            "in": "path",
            "name": "fine-tuning-job-id",
            "description": "The identifier of the fine-tune job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Identifier for the last checkpoint ID from the previous pagination request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Number of checkpoints to retrieve. Defaults to 10.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJobCheckpointList"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting checkpoints of a fine tuning job.": {
            "$ref": "./examples/get_finetuning_job_checkpoints.json"
          }
        }
      }
    },
    "/fine_tuning/jobs/{fine-tuning-job-id}/events": {
      "get": {
        "tags": [
          "Fine-tuning:"
        ],
        "summary": "Gets the events for the fine-tune job specified by the given fine-tune-id.\r\nEvents are created when the job status changes, e.g. running or complete, and when results are uploaded.",
        "operationId": "FineTuning_GetEvents",
        "parameters": [
          {
            "in": "path",
            "name": "fine-tuning-job-id",
            "description": "The identifier of the fine-tune job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Identifier for the last event from the previous pagination request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Number of events to retrieve. Defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJobEventList"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting events of a fine tuning job.": {
            "$ref": "./examples/get_finetuning_job_events.json"
          }
        }
      }
    },
    "/fine_tuning/jobs/{fine-tuning-job-id}/pause": {
      "post": {
        "tags": [
          "Fine-tuning:"
        ],
        "summary": "Pausing the processing of the fine-tune job specified by the given fine-tune-id.",
        "operationId": "FineTuning_Pause",
        "parameters": [
          {
            "in": "path",
            "name": "fine-tuning-job-id",
            "description": "The identifier of the fine-tune job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The fine tune has been successfully paused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Pausing a fine tuning job.": {
            "$ref": "./examples/pause_finetuning_job.json"
          }
        }
      }
    },
    "/fine_tuning/jobs/{fine-tuning-job-id}/resume": {
      "post": {
        "tags": [
          "Fine-tuning:"
        ],
        "summary": "Resumes the processing of the fine-tune job specified by the given fine-tune-id.",
        "operationId": "FineTuning_Resume",
        "parameters": [
          {
            "in": "path",
            "name": "fine-tuning-job-id",
            "description": "The identifier of the fine-tune job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The fine tune has been successfully resumed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Resuming a fine tuning job.": {
            "$ref": "./examples/resume_finetuning_job.json"
          }
        }
      }
    },
    "/ingestion/jobs": {
      "get": {
        "tags": [
          "Ingestion:"
        ],
        "summary": "Lists the ingestion jobs.",
        "operationId": "IngestionJobs_List",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          },
          {
            "in": "header",
            "name": "mgmt-user-token",
            "description": "The token used to access the workspace (needed only for user compute jobs).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestionJobList"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "List all ingestion jobs": {
            "$ref": "./examples/list_ingestion_jobs.json"
          }
        }
      }
    },
    "/ingestion/jobs/{job-id}": {
      "put": {
        "tags": [
          "Ingestion:"
        ],
        "summary": "Creates an ingestion job with the specified job id.",
        "operationId": "IngestionJobs_Create",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          },
          {
            "in": "path",
            "name": "job-id",
            "required": true,
            "description": "The id of the job that will be created.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "mgmt-user-token",
            "description": "The token used to access the workspace (needed only for user compute jobs).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "aml-user-token",
            "description": "The token used to access the resources within the job in the workspace (needed only for user compute jobs).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestionJob"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestionJob"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a system-compute ingestion job": {
            "$ref": "./examples/put_ingestion_job_sc.json"
          },
          "Create a user-compute ingestion job": {
            "$ref": "./examples/put_ingestion_job_uc.json"
          }
        }
      },
      "get": {
        "tags": [
          "Ingestion:"
        ],
        "summary": "Gets the details of the specified job id.",
        "operationId": "IngestionJobs_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          },
          {
            "in": "path",
            "name": "job-id",
            "required": true,
            "description": "The id of the job.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestionJob"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get ingestion job": {
            "$ref": "./examples/get_ingestion_job.json"
          }
        }
      }
    },
    "/ingestion/jobs/{job-id}/runs": {
      "get": {
        "tags": [
          "Ingestion:"
        ],
        "summary": "Lists the runs of the specified job id.",
        "operationId": "IngestionJobRuns_List",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          },
          {
            "in": "path",
            "name": "job-id",
            "required": true,
            "description": "The id of the job.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "mgmt-user-token",
            "description": "The token used to access the workspace (needed only for user compute jobs).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestionJobRunList"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "List ingestion job runs": {
            "$ref": "./examples/list_ingestion_job_runs.json"
          }
        }
      }
    },
    "/ingestion/jobs/{job-id}/runs/{run-id}": {
      "get": {
        "tags": [
          "Ingestion:"
        ],
        "summary": "Gets the details of the specified run id as part of the specified job id.",
        "operationId": "IngestionJobRuns_Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          },
          {
            "in": "path",
            "name": "job-id",
            "required": true,
            "description": "The id of the job.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "run-id",
            "required": true,
            "description": "The id of the run.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "mgmt-user-token",
            "description": "The token used to access the workspace (needed only for user compute jobs).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestionJobRun"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get ingestion job runs": {
            "$ref": "./examples/get_ingestion_job_run.json"
          }
        }
      }
    },
    "/models": {
      "get": {
        "tags": [
          "Models:"
        ],
        "summary": "Gets a list of all models that are accessible by the Azure OpenAI resource.\r\nThese include base models as well as all successfully completed fine-tuned models owned by the Azure OpenAI resource.",
        "operationId": "Models_List",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelList"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting all models owned by account.": {
            "$ref": "./examples/get_models.json"
          }
        }
      }
    },
    "/models/{model-id}": {
      "get": {
        "tags": [
          "Models:"
        ],
        "summary": "Gets details for the model specified by the given modelId.",
        "operationId": "Models_Get",
        "parameters": [
          {
            "in": "path",
            "name": "model-id",
            "description": "The identifier of the model.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Getting a base model.": {
            "$ref": "./examples/get_model_base.json"
          },
          "Getting a fine-tuned model.": {
            "$ref": "./examples/get_model_finetune.json"
          }
        }
      }
    },
    "/uploads": {
      "post": {
        "tags": [
          "UploadFile:"
        ],
        "summary": "An intermediate Upload object is created, allowing you to add Parts to it. Currently, an Upload size can be a maximum of 9 GB in total and will expire two hours after being created.\r\nAfter the Upload is completed a File object will be generated, containing all the uploaded parts. This File object can then be used across our platform just like any other file.",
        "operationId": "UploadFile_Start",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileStartBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileStartBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileStartBody"
              }
            }
          },
          "description": "The definition of the file to create including its purpose and the location on the local machine.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "The upload has been successfully created.",
            "headers": {
              "Location": {
                "description": "The location of the newly created item.",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResource"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Start a large file upload operation.": {
            "$ref": "./examples/upload_file_start.json"
          }
        }
      }
    },
    "/uploads/{upload-id}/cancel": {
      "post": {
        "tags": [
          "UploadFile:"
        ],
        "summary": "Cancels the Upload, and will lead to all uploaded parts to be deleted asynchronously.\r\nNo Parts may be added after an Upload is cancelled.",
        "operationId": "UploadFile_Cancel",
        "parameters": [
          {
            "in": "path",
            "name": "upload-id",
            "description": "The identifier of the upload.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResource"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Cancel a large file upload operation.": {
            "$ref": "./examples/upload_file_cancel.json"
          }
        }
      }
    },
    "/uploads/{upload-id}/complete": {
      "post": {
        "tags": [
          "UploadFile:"
        ],
        "summary": "This completes the Upload, and the returned Upload object contains a nested File object that is ready for use across the platform.\r\nYou can define the order of the Parts by providing an ordered list of Part IDs.\r\nThe total number of bytes uploaded must match the size originally specified when creating the Upload object.\r\nAfter this operation no additional Parts can be added once the Upload is completed.",
        "operationId": "UploadFile_Complete",
        "parameters": [
          {
            "in": "path",
            "name": "upload-id",
            "description": "The identifier of the upload.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileCompleteBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileCompleteBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileCompleteBody"
              }
            }
          },
          "description": "The definition of the file to create including its purpose and the location on the local machine.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResource"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Complete and validate a large file upload operation.": {
            "$ref": "./examples/upload_file_complete.json"
          }
        }
      }
    },
    "/uploads/{upload-id}/parts": {
      "post": {
        "tags": [
          "UploadFile:"
        ],
        "summary": "Adds a Part to an Upload object, where each Part represents a segment of the file you are uploading.\r\nEach Part can be up to the standard size limit for file upload, based on the File Purpose. You can continue adding Parts until reaching the Upload size limit of 9 GB.",
        "operationId": "UploadFile_Part",
        "parameters": [
          {
            "in": "path",
            "name": "upload-id",
            "description": "The identifier of the upload.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionQueryParameter"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadPartResource"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Upload a part of large file upload operation.": {
            "$ref": "./examples/upload_file_part.json"
          }
        }
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "OAuth2Auth": [
        "https://cognitiveservices.azure.com/.default"
      ]
    }
  ],
  "servers": [
    {
      "url": "{endpoint}/openai",
      "variables": {
        "endpoint": {
          "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://aoairesource.openai.azure.com. Replace \"aoairesource\" with your Azure OpenAI account name).",
          "format": "url",
          "x-ms-skip-url-encoding": true,
          "x-ms-parameter-location": "client",
          "default": "none"
        }
      }
    }
  ],
  "components": {
    "parameters": {
      "endpoint": {
        "in": "path",
        "name": "endpoint",
        "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://aoairesource.openai.azure.com. Replace \"aoairesource\" with your Azure OpenAI account name).",
        "required": true,
        "x-ms-skip-url-encoding": true,
        "x-ms-parameter-location": "client",
        "schema": {
          "type": "string",
          "format": "url"
        }
      },
      "apiVersionQueryParameter": {
        "in": "query",
        "name": "api-version",
        "description": "The requested API version.",
        "required": true,
        "x-ms-client-default": "2025-04-01-preview",
        "x-ms-parameter-location": "client",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "description": "API key authentication",
        "type": "apiKey",
        "name": "api-key",
        "in": "header"
      },
      "OAuth2Auth": {
        "description": "OAuth2 authentication",
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
            "scopes": {
              "https://cognitiveservices.azure.com/.default": ""
            }
          }
        }
      }
    },
    "schemas": {
      "AzureAISearchIndex": {
        "description": "Azure AI Search Index.",
        "required": [
          "connectionId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/TargetIndex"
          },
          {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "The id of the connection pointing to the Azure AI Search Index."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "AzureAISearch"
      },
      "BaseConnection": {
        "title": "BaseConnection",
        "description": "A connection to a resource.",
        "type": "object",
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/ConnectionType"
          }
        },
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "Batch": {
        "title": "Batch",
        "description": "Defines the values of a batch.",
        "required": [
          "id",
          "input_file_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The identity of this item.",
            "type": "string"
          },
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "endpoint": {
            "description": "The API endpoint used by the batch.",
            "type": "string",
            "readOnly": true
          },
          "errors": {
            "$ref": "#/components/schemas/BatchErrors"
          },
          "input_file_id": {
            "description": "The ID of the input file for the batch.",
            "minLength": 1,
            "type": "string"
          },
          "input_blob": {
            "description": "The blob url containing the input file for the batch.",
            "type": "string"
          },
          "completion_window": {
            "description": "The time frame within which the batch should be processed.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/BatchStatus"
          },
          "output_file_id": {
            "description": "The ID of the file containing outputs of successfully executed requests.",
            "type": "string"
          },
          "output_blob": {
            "description": "The blob url containing outputs of successfully executed requests.",
            "type": "string"
          },
          "error_file_id": {
            "description": "The ID of the file containing outputs of requests with errors.",
            "type": "string"
          },
          "error_blob": {
            "description": "The blob url containing outputs of requests with errors.",
            "type": "string"
          },
          "created_at": {
            "format": "unixtime",
            "description": "A timestamp when this batch was created (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "in_progress_at": {
            "format": "unixtime",
            "description": "A timestamp when this batch started progressing (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "expires_at": {
            "format": "unixtime",
            "description": "A timestamp when this batch will expire (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "finalizing_at": {
            "format": "unixtime",
            "description": "A timestamp when this batch started finalizing (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "completed_at": {
            "format": "unixtime",
            "description": "A timestamp when this batch was completed (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "failed_at": {
            "format": "unixtime",
            "description": "A timestamp when this batch failed (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "expired_at": {
            "format": "unixtime",
            "description": "A timestamp when this batch expired (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "cancelling_at": {
            "format": "unixtime",
            "description": "A timestamp when this batch started cancelling (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "cancelled_at": {
            "format": "unixtime",
            "description": "A timestamp when this batch was cancelled (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "request_counts": {
            "$ref": "#/components/schemas/BatchRequestCounts"
          },
          "metadata": {
            "description": "A set of key-value pairs that can be attached to the batch. This can be useful for storing additional infomration about the batch in a structured format.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BatchCreateRequest": {
        "title": "BatchCreateRequest",
        "description": "Defines the request to create a batch.",
        "required": [
          "endpoint",
          "completion_window"
        ],
        "type": "object",
        "properties": {
          "input_file_id": {
            "description": "The ID if the input file for the batch.",
            "minLength": 1,
            "type": "string"
          },
          "input_blob": {
            "description": "The url of an Azure Storage blob to use as input for the batch.",
            "type": "string"
          },
          "output_folder": {
            "$ref": "#/components/schemas/BatchOutputReference"
          },
          "endpoint": {
            "description": "The API endpoint used by the batch.",
            "type": "string"
          },
          "completion_window": {
            "description": "The time frame within which the batch should be processed.",
            "type": "string"
          },
          "metadata": {
            "description": "A set of key-value pairs that can be attached to the batch. This can be useful for storing additional infomration about the batch in a structured format.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "output_expires_after": {
            "$ref": "#/components/schemas/FileExpiresAfter"
          }
        }
      },
      "BatchErrorData": {
        "title": "BatchErrorData",
        "description": "Error information for a failure in batch.",
        "type": "object",
        "properties": {
          "code": {
            "description": "An error code identifying the error type.",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error.",
            "type": "string"
          },
          "param": {
            "description": "The name of the parameter that caused the error, if applicable (can be null).",
            "type": "string"
          },
          "line": {
            "description": "The line number of the input file where the error occurred, if applicable (can be null).",
            "type": "string"
          }
        }
      },
      "BatchErrors": {
        "title": "BatchErrors",
        "description": "For batches that have failed, this will contain more information on the cause of the failures.",
        "type": "object",
        "properties": {
          "object": {
            "description": "The type of the errors object. This is always 'list'.",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/BatchErrorData"
          }
        }
      },
      "BatchRequestCounts": {
        "title": "BatchRequestCounts",
        "description": "The request counts for different statuses within the batch.",
        "type": "object",
        "properties": {
          "total": {
            "description": "The total number of requests in the batch.",
            "type": "integer"
          },
          "completed": {
            "description": "The number of requests in the batch that have been completed successfully.",
            "type": "integer"
          },
          "failed": {
            "description": "The number of requests in the batch that have failed.",
            "type": "integer"
          }
        }
      },
      "BatchOutputReference": {
        "title": "BatchOutputReference",
        "description": "The Azure Storage folder to store output.",
        "type": "object",
        "properties": {
          "url": {
            "description": "The url of the Azure Storage folder where the batch output would be saved.",
            "type": "string"
          },
          "delimiter": {
            "description": "Optional. The delimiter used in the folder path, by default /.",
            "type": "string"
          }
        }
      },
      "BatchStatus": {
        "title": "BatchStatus",
        "description": "The status of a batch.",
        "enum": [
          "validating",
          "failed",
          "in_progress",
          "finalizing",
          "completed",
          "expired",
          "cancelling",
          "cancelled"
        ],
        "type": "string",
        "readOnly": true,
        "x-ms-enum": {
          "name": "BatchStatus",
          "modelAsString": true,
          "values": [
            {
              "value": "validating",
              "description": "The input file is being validated before the batch can begin."
            },
            {
              "value": "failed",
              "description": "The input file has failed the validation process."
            },
            {
              "value": "in_progress",
              "description": "The input file was successfully validated and the batch is currently being executed."
            },
            {
              "value": "finalizing",
              "description": "The batch has completed and the results are being prepared."
            },
            {
              "value": "completed",
              "description": "The batch has been completed and the results are ready."
            },
            {
              "value": "expired",
              "description": "The batch was not able to complete within the 24-hour time window."
            },
            {
              "value": "cancelling",
              "description": "Cancellation of the batch has been initiated."
            },
            {
              "value": "cancelled",
              "description": "The batch was cancelled."
            }
          ]
        }
      },
      "BatchesList": {
        "title": "BatchList",
        "description": "Represents a list of batches.",
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "data": {
            "description": "The list of items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Batch"
            }
          },
          "first_id": {
            "description": "The id of the first batch in the list of batches returned.",
            "type": "string"
          },
          "last_id": {
            "description": "The id of the last batch in the list of batches returned.",
            "type": "string"
          },
          "has_more": {
            "description": "A value indicating whether the list contains more elements than returned.",
            "type": "boolean"
          }
        }
      },
      "Capabilities": {
        "title": "Capabilities",
        "description": "The capabilities of a base or fine tune model.",
        "required": [
          "chat_completion",
          "completion",
          "embeddings",
          "fine_tune",
          "inference"
        ],
        "type": "object",
        "properties": {
          "fine_tune": {
            "description": "A value indicating whether a model can be used for fine tuning.",
            "type": "boolean"
          },
          "inference": {
            "description": "A value indicating whether a model can be deployed.",
            "type": "boolean"
          },
          "completion": {
            "description": "A value indicating whether a model supports completion.",
            "type": "boolean"
          },
          "chat_completion": {
            "description": "A value indicating whether a model supports chat completion.",
            "type": "boolean"
          },
          "embeddings": {
            "description": "A value indicating whether a model supports embeddings.",
            "type": "boolean"
          }
        }
      },
      "Choice": {
        "title": "Choice",
        "type": "object",
        "properties": {
          "index": {
            "format": "int32",
            "description": "The index of the choice in the list of choices.",
            "type": "integer"
          },
          "message": {
            "$ref": "#/components/schemas/ChoiceMessage"
          },
          "finish_reason": {
            "description": "The reason the model stopped generating tokens.",
            "type": "string"
          },
          "logprobs": {
            "title": "Dictionary`2",
            "description": "Log probability information for the choice.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Logprob"
            }
          }
        }
      },
      "ChoiceMessage": {
        "title": "ChoiceMessage",
        "type": "object",
        "properties": {
          "content": {
            "description": "The contents of the message.",
            "type": "string"
          },
          "role": {
            "description": "The role of the entity that is creating the message.",
            "type": "string"
          },
          "tool_calls": {
            "description": "A list of the relevant tool calls.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            }
          }
        }
      },
      "ChunkingSettings": {
        "type": "object",
        "title": "ChunkingSettings",
        "description": "Chunking settings",
        "properties": {
          "maxChunkSizeInTokens": {
            "type": "integer"
          }
        }
      },
      "CompletionAction": {
        "type": "string",
        "description": "The completion action.",
        "enum": [
          "cleanUpTempAssets",
          "keepAllAssets"
        ],
        "x-ms-enum": {
          "name": "IngestionJobCompletionAction",
          "modelAsString": true,
          "values": [
            {
              "name": "keepAllAssets",
              "value": "keepAllAssets",
              "description": "Will not clean up any of the intermediate assets created during the ingestion process."
            },
            {
              "name": "cleanUpTempAssets",
              "value": "cleanUpTempAssets",
              "description": "Will clean up intermediate assets created during the ingestion process."
            }
          ]
        }
      },
      "ComputeType": {
        "type": "string",
        "description": "The compute type.",
        "enum": [
          "ServerlessCompute",
          "CustomCompute"
        ],
        "x-ms-enum": {
          "name": "ComputeType",
          "modelAsString": true,
          "values": [
            {
              "name": "ServerlessCompute",
              "value": "ServerlessCompute",
              "description": "Serverless user compute."
            },
            {
              "name": "CustomCompute",
              "value": "CustomCompute",
              "description": "Custom user compute."
            }
          ]
        }
      },
      "ConnectionStringConnection": {
        "description": "Connection string connection.",
        "required": [
          "connectionString"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseConnection"
          },
          {
            "type": "object",
            "properties": {
              "connectionString": {
                "type": "string",
                "description": "Connection string"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "ConnectionString"
      },
      "ConnectionType": {
        "type": "string",
        "description": "The connection type.",
        "enum": [
          "EndpointWithKey",
          "ConnectionString",
          "EndpointWithManagedIdentity",
          "WorkspaceConnection",
          "RelativeConnection"
        ],
        "x-ms-enum": {
          "name": "ConnectionType",
          "modelAsString": true,
          "values": [
            {
              "name": "EndpointWithKey",
              "value": "EndpointWithKey",
              "description": "Endpoint and key connection."
            },
            {
              "name": "ConnectionString",
              "value": "ConnectionString",
              "description": "Connection string."
            },
            {
              "name": "EndpointWithManagedIdentity",
              "value": "EndpointWithManagedIdentity",
              "description": "Endpoint and managed identity."
            },
            {
              "name": "WorkspaceConnection",
              "value": "WorkspaceConnection",
              "description": "AML Workspace connection."
            },
            {
              "name": "RelativeConnection",
              "value": "RelativeConnection",
              "description": "Relative deployment"
            }
          ]
        }
      },
      "CosmosDBIndex": {
        "description": "CosmosDB Index.",
        "required": [
          "connectionId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/TargetIndex"
          },
          {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "The id of the connection pointing to the cosmos DB."
              },
              "collectionName": {
                "type": "string",
                "description": "The name of the cosmos DB collection."
              },
              "databaseName": {
                "type": "string",
                "description": "The name of the cosmos DB database."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "CosmosDB"
      },
      "CrawlingSettings": {
        "type": "object",
        "title": "CrawlingSettings",
        "description": "Crawling settings",
        "properties": {
          "maxCrawlDepth": {
            "type": "integer"
          },
          "maxCrawlTimeInMins": {
            "type": "integer"
          },
          "maxDownloadTimeInMins": {
            "type": "integer"
          },
          "maxFileSize": {
            "type": "integer"
          },
          "maxRedirects": {
            "type": "integer"
          },
          "maxFiles": {
            "type": "integer"
          }
        }
      },
      "CreateEvalCompletionsRunDataSource": {
        "description": "A CompletionsRunDataSource object describing a model sampling configuration.",
        "type": "object",
        "properties": {
          "input_messages": {
            "type": "object",
            "discriminator": {
              "propertyName": "type"
            },
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of input messages. Either `template` or `item_reference`.",
                "enum": [
                  "template",
                  "item_reference"
                ]
              },
              "template": {
                "type": "array",
                "description": "A list of chat messages forming the prompt or context. May include variable references to the 'item' namespace, e.g., {{item.name}}.",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "The content of the message."
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the message (e.g., 'system', 'assistant', 'user')."
                    }
                  },
                  "required": [
                    "role",
                    "content"
                  ]
                }
              },
              "item_reference": {
                "type": "string",
                "description": "A reference to a variable in the 'item' namespace, e.g., 'item.name'."
              }
            }
          },
          "model": {
            "type": "string",
            "description": "The name of the model to use for generating completions (e.g., 'o3-mini')."
          },
          "sampling_params": {
            "type": "object",
            "properties": {
              "max_completion_tokens": {
                "type": "integer",
                "description": "The maximum number of tokens in the generated output."
              },
              "seed": {
                "type": "integer",
                "description": "A seed value to initialize the randomness, during sampling.",
                "default": 42
              },
              "temperature": {
                "type": "number",
                "description": "A higher temperature increases randomness in the outputs.",
                "default": 1
              },
              "top_p": {
                "type": "number",
                "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.",
                "default": 1
              }
            }
          },
          "source": {
            "type": "object",
            "discriminator": {
              "propertyName": "type"
            },
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of source. Can be one of `EvalJsonlFileContentSource`, `EvalJsonlFileIdSource`, or `EvalStoredCompletionsSource`.",
                "enum": [
                  "EvalJsonlFileContentSource",
                  "EvalJsonlFileIdSource",
                  "EvalStoredCompletionsSource"
                ]
              }
            }
          },
          "type": {
            "type": "string",
            "description": "The type of run data source. Always `completions`.",
            "enum": [
              "completions"
            ],
            "default": "completions"
          }
        },
        "required": [
          "type",
          "source"
        ]
      },
      "CreateEvalCustomDataSourceConfig": {
        "description": "A CustomDataSourceConfig object that defines the schema for the data source used for the evaluation runs. This schema is used to define the shape of the data that will be: - Used to define your testing criteria and - What data is required when creating a run",
        "properties": {
          "include_sample_schema": {
            "default": false,
            "description": "Whether the eval should expect you to populate the sample namespace (ie, by generating responses off of your data source)",
            "type": "boolean"
          },
          "item_schema": {
            "additionalProperties": true,
            "description": "The json schema for each row in the data source.",
            "type": "object"
          },
          "type": {
            "default": "custom",
            "description": "The type of data source. Always `custom`.",
            "enum": [
              "custom"
            ],
            "type": "string"
          }
        },
        "required": [
          "item_schema",
          "type"
        ],
        "title": "CustomDataSourceConfig",
        "type": "object"
      },
      "CreateEvalItem": {
        "description": "A chat message that makes up the prompt or context. May include variable references to the \"item\" namespace, ie {{item.name}}.",
        "allOf": [
          {
            "properties": {
              "content": {
                "description": "The content of the message.",
                "type": "string"
              },
              "role": {
                "description": "The role of the message (e.g. \"system\", \"assistant\", \"user\").",
                "type": "string"
              }
            },
            "required": [
              "role",
              "content"
            ],
            "title": "SimpleInputMessage",
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/EvalItem"
          }
        ],
        "title": "CreateEvalItem",
        "type": "object"
      },
      "CreateEvalJsonlRunDataSource": {
        "description": "A JsonlRunDataSource object with that specifies a JSONL file that matches the eval",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalJsonlFileContentSource"
              },
              {
                "$ref": "#/components/schemas/EvalJsonlFileIdSource"
              }
            ]
          },
          "type": {
            "default": "jsonl",
            "description": "The type of data source. Always `jsonl`.",
            "enum": [
              "jsonl"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "source"
        ],
        "title": "JsonlRunDataSource",
        "type": "object"
      },
      "CreateEvalLabelModelGrader": {
        "description": "A LabelModelGrader object which uses a model to assign labels to each item in the evaluation.",
        "properties": {
          "input": {
            "description": "A list of chat messages forming the prompt or context. May include variable references to the \"item\" namespace, ie {{item.name}}.",
            "items": {
              "$ref": "#/components/schemas/CreateEvalItem"
            },
            "type": "array"
          },
          "labels": {
            "description": "The labels to classify to each item in the evaluation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "model": {
            "description": "The model to use for the evaluation. Must support structured outputs.",
            "type": "string"
          },
          "name": {
            "description": "The name of the grader.",
            "type": "string"
          },
          "passing_labels": {
            "description": "The labels that indicate a passing result. Must be a subset of labels.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "The object type, which is always `label_model`.",
            "enum": [
              "label_model"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "model",
          "input",
          "passing_labels",
          "labels",
          "name"
        ],
        "title": "LabelModelGrader",
        "type": "object"
      },
      "CreateEvalLogsDataSourceConfig": {
        "description": "A data source config which specifies the metadata property of your stored completions query. This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.",
        "properties": {
          "metadata": {
            "additionalProperties": true,
            "description": "Metadata filters for the logs data source.",
            "example": "{\n  \"use_case\": \"customer_support_agent\"\n}\n",
            "type": "object"
          },
          "type": {
            "default": "logs",
            "description": "The type of data source. Always `logs`.",
            "enum": [
              "logs"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "LogsDataSourceConfig",
        "type": "object"
      },
      "CreateEvalRequest": {
        "properties": {
          "data_source_config": {
            "description": "The configuration for the data source used for the evaluation runs.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateEvalCustomDataSourceConfig"
              },
              {
                "$ref": "#/components/schemas/CreateEvalLogsDataSourceConfig"
              }
            ],
            "type": "object"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "name": {
            "description": "The name of the evaluation.",
            "type": "string"
          },
          "testing_criteria": {
            "description": "A list of graders for all eval runs in this group.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreateEvalLabelModelGrader"
                },
                {
                  "$ref": "#/components/schemas/EvalStringCheckGrader"
                },
                {
                  "$ref": "#/components/schemas/EvalTextSimilarityGrader"
                },
                {
                  "$ref": "#/components/schemas/EvalScoreModelGrader"
                }
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "data_source_config",
          "testing_criteria"
        ],
        "title": "CreateEvalRequest",
        "type": "object"
      },
      "CreateEvalRunRequest": {
        "properties": {
          "data_source": {
            "description": "Details about the run's data source.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateEvalJsonlRunDataSource"
              },
              {
                "$ref": "#/components/schemas/CreateEvalCompletionsRunDataSource"
              }
            ],
            "type": "object"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "name": {
            "description": "The name of the run.",
            "type": "string"
          }
        },
        "required": [
          "data_source"
        ],
        "title": "CreateEvalRunRequest",
        "type": "object"
      },
      "CreateEvalStoredCompletionsRunDataSource": {
        "description": "A StoredCompletionsRunDataSource configuration describing a set of filters",
        "properties": {
          "created_after": {
            "description": "An optional Unix timestamp to filter items created after this time.",
            "type": "integer"
          },
          "created_before": {
            "description": "An optional Unix timestamp to filter items created before this time.",
            "type": "integer"
          },
          "limit": {
            "description": "An optional maximum number of items to return.",
            "type": "integer"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "model": {
            "description": "An optional model to filter by (e.g., 'gpt-4o').",
            "type": "string"
          },
          "type": {
            "default": "stored_completions",
            "description": "The type of data source. Always `stored_completions`.",
            "enum": [
              "stored_completions"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "StoredCompletionsRunDataSource",
        "type": "object"
      },
      "CustomCompute": {
        "description": "Custom compute.",
        "required": [
          "computeId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/JobCompute"
          },
          {
            "type": "object",
            "properties": {
              "computeId": {
                "type": "string",
                "description": "Id of the custom compute"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "CustomCompute"
      },
      "DeploymentConnection": {
        "description": "Relative deployment connection.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseConnection"
          }
        ],
        "x-ms-discriminator-value": "RelativeConnection"
      },
      "Deprecation": {
        "title": "Deprecation",
        "description": "Defines the dates of deprecation for the different use cases of a model.\r\nUsually base models support 1 year of fine tuning after creation. Inference is typically supported 2 years after creation of base or\r\nfine tuned models. The exact dates are specified in the properties.",
        "required": [
          "inference"
        ],
        "type": "object",
        "properties": {
          "fine_tune": {
            "format": "unixtime",
            "description": "The end date of fine tune support of this model. Will be `null` for fine tune models.",
            "type": "integer"
          },
          "inference": {
            "format": "unixtime",
            "description": "The end date of inference support of this model.",
            "type": "integer"
          }
        }
      },
      "DpoHyperparamsRequest": {
        "title": "DpoHyperparamsRequest",
        "description": "Hyperparameters for DPO method of finetuning",
        "type": "object",
        "properties": {
          "n_epochs": {
            "format": "int32",
            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.",
            "type": "integer"
          },
          "batch_size": {
            "format": "int32",
            "description": "The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.\r\nIn general, we've found that larger batch sizes tend to work better for larger datasets.\r\nThe default value as well as the maximum value for this property are specific to a base model.",
            "type": "integer"
          },
          "learning_rate_multiplier": {
            "format": "double",
            "description": "The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pre-training multiplied by this value.\r\nLarger learning rates tend to perform better with larger batch sizes.\r\nWe recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results.",
            "type": "number"
          },
          "beta": {
            "format": "double",
            "description": "Dpo beta value.",
            "type": "number"
          },
          "l2_multiplier": {
            "format": "double",
            "description": "L2 regularization multiplier",
            "type": "number"
          }
        }
      },
      "DpoMethod": {
        "title": "DpoMethod",
        "description": "Request for DPO method finetuning",
        "required": [
          "dpo",
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FineTuneMethod"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/FineTuningMethodType"
          },
          "dpo": {
            "$ref": "#/components/schemas/DpoMethodConfigRequest"
          }
        }
      },
      "DpoMethodConfigRequest": {
        "title": "DpoMethodConfigRequest",
        "description": "Configuration for dpo finetuning method. Includes DPO specific hyperparameters",
        "type": "object",
        "properties": {
          "hyperparameters": {
            "$ref": "#/components/schemas/DpoHyperparamsRequest"
          }
        }
      },
      "DpoMethodRequest": {
        "title": "DpoMethodRequest",
        "description": "Request for DPO method finetuning",
        "required": [
          "dpo",
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FineTuneMethodRequest"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/FineTuningMethodType"
          },
          "dpo": {
            "$ref": "#/components/schemas/DpoMethodConfigRequest"
          }
        }
      },
      "EndpointKeyConnection": {
        "description": "Endpoint key connection.",
        "required": [
          "endpoint",
          "key"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseConnection"
          },
          {
            "type": "object",
            "properties": {
              "endpoint": {
                "type": "string",
                "description": "Endpoint"
              },
              "key": {
                "type": "string",
                "description": "Key"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "EndpointWithKey"
      },
      "EndpointMIConnection": {
        "description": "Endpoint Managed Identity connection.",
        "required": [
          "endpoint"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseConnection"
          },
          {
            "type": "object",
            "properties": {
              "endpoint": {
                "type": "string",
                "description": "Endpoint"
              },
              "resourceId": {
                "type": "string",
                "description": "Resource Id"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "EndpointWithManagedIdentity"
      },
      "Error": {
        "title": "Error",
        "description": "Error content as defined in the Microsoft REST guidelines\r\n(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "message": {
            "description": "The message of this error.",
            "minLength": 1,
            "type": "string"
          },
          "target": {
            "description": "The location where the error happened if available.",
            "type": "string"
          },
          "details": {
            "description": "The error details if available.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "innererror": {
            "$ref": "#/components/schemas/InnerError"
          }
        }
      },
      "ErrorCode": {
        "title": "ErrorCode",
        "description": "Error codes as defined in the Microsoft REST guidelines\r\n(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).",
        "enum": [
          "conflict",
          "invalidPayload",
          "forbidden",
          "notFound",
          "unexpectedEntityState",
          "itemDoesAlreadyExist",
          "serviceUnavailable",
          "internalFailure",
          "quotaExceeded",
          "jsonlValidationFailed",
          "fileImportFailed",
          "tooManyRequests",
          "unauthorized",
          "contentFilter"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ErrorCode",
          "modelAsString": true,
          "values": [
            {
              "value": "conflict",
              "description": "The requested operation conflicts with the current resource state."
            },
            {
              "value": "invalidPayload",
              "description": "The request data is invalid for this operation."
            },
            {
              "value": "forbidden",
              "description": "The operation is forbidden for the current user/api key."
            },
            {
              "value": "notFound",
              "description": "The resource is not found."
            },
            {
              "value": "unexpectedEntityState",
              "description": "The operation cannot be executed in the current resource's state."
            },
            {
              "value": "itemDoesAlreadyExist",
              "description": "The item does already exist."
            },
            {
              "value": "serviceUnavailable",
              "description": "The service is currently not available."
            },
            {
              "value": "internalFailure",
              "description": "Internal error. Please retry."
            },
            {
              "value": "quotaExceeded",
              "description": "Quota exceeded."
            },
            {
              "value": "jsonlValidationFailed",
              "description": "Validation of jsonl data failed."
            },
            {
              "value": "fileImportFailed",
              "description": "Import of file failed."
            },
            {
              "value": "tooManyRequests",
              "description": "Too many requests. Please retry later"
            },
            {
              "value": "unauthorized",
              "description": "The current user/api key is not authorized for the operation."
            },
            {
              "value": "contentFilter",
              "description": "Image generation failed as a result of our safety system."
            }
          ]
        }
      },
      "ErrorResponse": {
        "title": "ErrorResponse",
        "description": "Error response as defined in the Microsoft REST guidelines\r\n(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).",
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "Eval": {
        "description": "An Eval object with a data source config and testing criteria.\nAn Eval represents a task to be done for your LLM integration.\nLike:\n - Improve the quality of my chatbot\n - See how well my chatbot handles customer support\n - Check if o3-mini is better at my usecase than gpt-4o\n",
        "properties": {
          "created_at": {
            "description": "The Unix timestamp (in seconds) for when the eval was created.",
            "type": "integer"
          },
          "data_source_config": {
            "description": "Configuration of data sources used in runs of the evaluation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalCustomDataSourceConfig"
              },
              {
                "$ref": "#/components/schemas/EvalStoredCompletionsDataSourceConfig"
              }
            ],
            "type": "object"
          },
          "id": {
            "description": "Unique identifier for the evaluation.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "name": {
            "description": "The name of the evaluation.",
            "example": "Chatbot effectiveness Evaluation",
            "type": "string"
          },
          "object": {
            "default": "eval",
            "description": "The object type.",
            "enum": [
              "eval"
            ],
            "type": "string"
          },
          "testing_criteria": {
            "description": "A list of testing criteria.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EvalLabelModelGrader"
                },
                {
                  "$ref": "#/components/schemas/EvalStringCheckGrader"
                },
                {
                  "$ref": "#/components/schemas/EvalTextSimilarityGrader"
                },
                {
                  "$ref": "#/components/schemas/EvalScoreModelGrader"
                }
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "data_source_config",
          "object",
          "testing_criteria",
          "name",
          "created_at",
          "metadata"
        ],
        "title": "Eval",
        "type": "object"
      },
      "EvalApiError": {
        "description": "An object representing an error response from the Eval API.",
        "properties": {
          "code": {
            "description": "The error code.",
            "type": "string"
          },
          "message": {
            "description": "The error message.",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "EvalApiError",
        "type": "object"
      },
      "EvalCustomDataSourceConfig": {
        "description": "A CustomDataSourceConfig which specifies the schema of your `item` and optionally `sample` namespaces. The response schema defines the shape of the data that will be: - Used to define your testing criteria and - What data is required when creating a run",
        "properties": {
          "schema": {
            "additionalProperties": true,
            "description": "The json schema for the run data source items. Learn how to build JSON schemas [here](https://json-schema.org/).",
            "example": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"item\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"label\": {\"type\": \"string\"},\n      },\n      \"required\": [\"label\"]\n    }\n  },\n  \"required\": [\"item\"]\n}\n",
            "type": "object"
          },
          "type": {
            "default": "custom",
            "description": "The type of data source. Always `custom`.",
            "enum": [
              "custom"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "schema"
        ],
        "title": "CustomDataSourceConfig",
        "type": "object"
      },
      "EvalFileRunDataSource": {
        "description": "A FileRunDataSource configuration with a file id",
        "properties": {
          "file_id": {
            "description": "The identifier of the file.",
            "type": "string"
          },
          "type": {
            "default": "file",
            "description": "The type of data source. Always `file`.",
            "enum": [
              "file"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "file_id"
        ],
        "title": "FileRunDataSource",
        "type": "object"
      },
      "EvalItem": {
        "description": "A message input to the model with a role indicating instruction following hierarchy. Instructions given with the `developer` or `system` role take precedence over instructions given with the `user` role. Messages with the `assistant` role are presumed to have been generated by the model in previous interactions.",
        "properties": {
          "content": {
            "description": "Text inputs to the model - can contain template strings.",
            "allOf": [
              {
                "description": "A text input to the model.",
                "title": "Text input",
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/InputTextContent"
              },
              {
                "description": "A text output from the model.",
                "properties": {
                  "text": {
                    "description": "The text output from the model.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the output text. Always `output_text`.",
                    "enum": [
                      "output_text"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "text"
                ],
                "title": "Output text",
                "type": "object"
              }
            ]
          },
          "role": {
            "description": "The role of the message input. One of `user`, `assistant`, `system`, or `developer`.",
            "enum": [
              "user",
              "assistant",
              "system",
              "developer"
            ],
            "type": "string"
          },
          "type": {
            "description": "The type of the message input. Always `message`.",
            "enum": [
              "message"
            ],
            "type": "string"
          }
        },
        "required": [
          "role",
          "content"
        ],
        "title": "Eval message object",
        "type": "object"
      },
      "EvalJsonlFileContentSource": {
        "properties": {
          "content": {
            "description": "The content of the jsonl file.",
            "items": {
              "properties": {
                "item": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "sample": {
                  "additionalProperties": true,
                  "type": "object"
                }
              },
              "required": [
                "item"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "type": {
            "default": "file_content",
            "description": "The type of jsonl source. Always `file_content`.",
            "enum": [
              "file_content"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "content"
        ],
        "title": "EvalJsonlFileContentSource",
        "type": "object"
      },
      "EvalJsonlFileIdSource": {
        "properties": {
          "id": {
            "description": "The identifier of the file.",
            "type": "string"
          },
          "type": {
            "default": "file_id",
            "description": "The type of jsonl source. Always `file_id`.",
            "enum": [
              "file_id"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "title": "EvalJsonlFileIdSource",
        "type": "object"
      },
      "EvalLabelModelGrader": {
        "description": "A LabelModelGrader object which uses a model to assign labels to each item in the evaluation.",
        "properties": {
          "input": {
            "items": {
              "$ref": "#/components/schemas/EvalItem"
            },
            "type": "array"
          },
          "labels": {
            "description": "The labels to assign to each item in the evaluation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "model": {
            "description": "The model to use for the evaluation. Must support structured outputs.",
            "type": "string"
          },
          "name": {
            "description": "The name of the grader.",
            "type": "string"
          },
          "passing_labels": {
            "description": "The labels that indicate a passing result. Must be a subset of labels.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "The object type, which is always `label_model`.",
            "enum": [
              "label_model"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "model",
          "input",
          "passing_labels",
          "labels",
          "name"
        ],
        "title": "LabelModelGrader",
        "type": "object"
      },
      "EvalList": {
        "description": "An object representing a list of evals.",
        "properties": {
          "data": {
            "description": "An array of eval objects.",
            "items": {
              "$ref": "#/components/schemas/Eval"
            },
            "type": "array"
          },
          "first_id": {
            "description": "The identifier of the first eval in the data array.",
            "type": "string"
          },
          "has_more": {
            "description": "Indicates whether there are more evals available.",
            "type": "boolean"
          },
          "last_id": {
            "description": "The identifier of the last eval in the data array.",
            "type": "string"
          },
          "object": {
            "default": "list",
            "description": "The type of this object. It is always set to \"list\".",
            "enum": [
              "list"
            ],
            "type": "string"
          }
        },
        "required": [
          "object",
          "data",
          "first_id",
          "last_id",
          "has_more"
        ],
        "title": "EvalList",
        "type": "object"
      },
      "EvalRun": {
        "description": "A schema representing an evaluation run.",
        "properties": {
          "created_at": {
            "description": "Unix timestamp (in seconds) when the evaluation run was created.",
            "type": "integer"
          },
          "data_source": {
            "description": "Information about the run's data source.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateEvalJsonlRunDataSource"
              },
              {
                "$ref": "#/components/schemas/CreateEvalCompletionsRunDataSource"
              }
            ],
            "type": "object"
          },
          "error": {
            "$ref": "#/components/schemas/EvalApiError"
          },
          "eval_id": {
            "description": "The identifier of the associated evaluation.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the evaluation run.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "model": {
            "description": "The model that is evaluated, if applicable.",
            "type": "string"
          },
          "name": {
            "description": "The name of the evaluation run.",
            "type": "string"
          },
          "object": {
            "default": "eval.run",
            "description": "The type of the object. Always \"eval.run\".",
            "enum": [
              "eval.run"
            ],
            "type": "string"
          },
          "per_model_usage": {
            "description": "Usage statistics for each model during the evaluation run.",
            "items": {
              "properties": {
                "cached_tokens": {
                  "description": "The number of tokens retrieved from cache.",
                  "type": "integer"
                },
                "completion_tokens": {
                  "description": "The number of completion tokens generated.",
                  "type": "integer"
                },
                "invocation_count": {
                  "description": "The number of invocations.",
                  "type": "integer"
                },
                "model_name": {
                  "description": "The name of the model.",
                  "type": "string"
                },
                "prompt_tokens": {
                  "description": "The number of prompt tokens used.",
                  "type": "integer"
                },
                "total_tokens": {
                  "description": "The total number of tokens used.",
                  "type": "integer"
                }
              },
              "required": [
                "model_name",
                "invocation_count",
                "prompt_tokens",
                "completion_tokens",
                "total_tokens",
                "cached_tokens"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "per_testing_criteria_results": {
            "description": "Results per testing criteria applied during the evaluation run.",
            "items": {
              "properties": {
                "failed": {
                  "description": "Number of tests failed for this criteria.",
                  "type": "integer"
                },
                "passed": {
                  "description": "Number of tests passed for this criteria.",
                  "type": "integer"
                },
                "testing_criteria": {
                  "description": "A description of the testing criteria.",
                  "type": "string"
                }
              },
              "required": [
                "testing_criteria",
                "passed",
                "failed"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "report_url": {
            "description": "The URL to the rendered evaluation run report on the UI dashboard.",
            "type": "string"
          },
          "result_counts": {
            "description": "Counters summarizing the outcomes of the evaluation run.",
            "properties": {
              "errored": {
                "description": "Number of output items that resulted in an error.",
                "type": "integer"
              },
              "failed": {
                "description": "Number of output items that failed to pass the evaluation.",
                "type": "integer"
              },
              "passed": {
                "description": "Number of output items that passed the evaluation.",
                "type": "integer"
              },
              "total": {
                "description": "Total number of executed output items.",
                "type": "integer"
              }
            },
            "required": [
              "total",
              "errored",
              "failed",
              "passed"
            ],
            "type": "object"
          },
          "status": {
            "description": "The status of the evaluation run.",
            "type": "string"
          }
        },
        "required": [
          "object",
          "id",
          "eval_id",
          "status",
          "model",
          "name",
          "created_at",
          "report_url",
          "result_counts",
          "per_model_usage",
          "per_testing_criteria_results",
          "data_source",
          "metadata",
          "error"
        ],
        "title": "EvalRun",
        "type": "object"
      },
      "EvalRunList": {
        "description": "An object representing a list of runs for an evaluation.",
        "properties": {
          "data": {
            "description": "An array of eval run objects.",
            "items": {
              "$ref": "#/components/schemas/EvalRun"
            },
            "type": "array"
          },
          "first_id": {
            "description": "The identifier of the first eval run in the data array.",
            "type": "string"
          },
          "has_more": {
            "description": "Indicates whether there are more evals available.",
            "type": "boolean"
          },
          "last_id": {
            "description": "The identifier of the last eval run in the data array.",
            "type": "string"
          },
          "object": {
            "default": "list",
            "description": "The type of this object. It is always set to \"list\".",
            "enum": [
              "list"
            ],
            "type": "string"
          }
        },
        "required": [
          "object",
          "data",
          "first_id",
          "last_id",
          "has_more"
        ],
        "title": "EvalRunList",
        "type": "object"
      },
      "EvalRunOutputItem": {
        "description": "A schema representing an evaluation run output item.",
        "properties": {
          "created_at": {
            "description": "Unix timestamp (in seconds) when the evaluation run was created.",
            "type": "integer"
          },
          "datasource_item": {
            "additionalProperties": true,
            "description": "Details of the input data source item.",
            "type": "object"
          },
          "datasource_item_id": {
            "description": "The identifier for the data source item.",
            "type": "integer"
          },
          "eval_id": {
            "description": "The identifier of the evaluation group.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the evaluation run output item.",
            "type": "string"
          },
          "object": {
            "default": "eval.run.output_item",
            "description": "The type of the object. Always \"eval.run.output_item\".",
            "enum": [
              "eval.run.output_item"
            ],
            "type": "string"
          },
          "results": {
            "description": "A list of results from the evaluation run.",
            "items": {
              "additionalProperties": true,
              "description": "A result object.",
              "type": "object"
            },
            "type": "array"
          },
          "run_id": {
            "description": "The identifier of the evaluation run associated with this output item.",
            "type": "string"
          },
          "sample": {
            "description": "A sample containing the input and output of the evaluation run.",
            "properties": {
              "error": {
                "$ref": "#/components/schemas/EvalApiError"
              },
              "finish_reason": {
                "description": "The reason why the sample generation was finished.",
                "type": "string"
              },
              "input": {
                "description": "An array of input messages.",
                "items": {
                  "description": "An input message.",
                  "properties": {
                    "content": {
                      "description": "The content of the message.",
                      "type": "string"
                    },
                    "role": {
                      "description": "The role of the message sender (e.g., system, user, developer).",
                      "type": "string"
                    }
                  },
                  "required": [
                    "role",
                    "content"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "max_completion_tokens": {
                "description": "The maximum number of tokens allowed for completion.",
                "type": "integer"
              },
              "model": {
                "description": "The model used for generating the sample.",
                "type": "string"
              },
              "output": {
                "description": "An array of output messages.",
                "items": {
                  "properties": {
                    "content": {
                      "description": "The content of the message.",
                      "type": "string"
                    },
                    "role": {
                      "description": "The role of the message (e.g. \"system\", \"assistant\", \"user\").",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "seed": {
                "description": "The seed used for generating the sample.",
                "type": "integer"
              },
              "temperature": {
                "description": "The sampling temperature used.",
                "type": "number"
              },
              "top_p": {
                "description": "The top_p value used for sampling.",
                "type": "number"
              },
              "usage": {
                "description": "Token usage details for the sample.",
                "properties": {
                  "cached_tokens": {
                    "description": "The number of tokens retrieved from cache.",
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "The number of completion tokens generated.",
                    "type": "integer"
                  },
                  "prompt_tokens": {
                    "description": "The number of prompt tokens used.",
                    "type": "integer"
                  },
                  "total_tokens": {
                    "description": "The total number of tokens used.",
                    "type": "integer"
                  }
                },
                "required": [
                  "total_tokens",
                  "completion_tokens",
                  "prompt_tokens",
                  "cached_tokens"
                ],
                "type": "object"
              }
            },
            "required": [
              "input",
              "output",
              "finish_reason",
              "model",
              "usage",
              "error",
              "temperature",
              "max_completion_tokens",
              "top_p",
              "seed"
            ],
            "type": "object"
          },
          "status": {
            "description": "The status of the evaluation run.",
            "type": "string"
          }
        },
        "required": [
          "object",
          "id",
          "run_id",
          "eval_id",
          "created_at",
          "status",
          "datasource_item_id",
          "datasource_item",
          "results",
          "sample"
        ],
        "title": "EvalRunOutputItem",
        "type": "object"
      },
      "EvalRunOutputItemList": {
        "description": "An object representing a list of output items for an evaluation run.",
        "properties": {
          "data": {
            "description": "An array of eval run output item objects.",
            "items": {
              "$ref": "#/components/schemas/EvalRunOutputItem"
            },
            "type": "array"
          },
          "first_id": {
            "description": "The identifier of the first eval run output item in the data array.",
            "type": "string"
          },
          "has_more": {
            "description": "Indicates whether there are more eval run output items available.",
            "type": "boolean"
          },
          "last_id": {
            "description": "The identifier of the last eval run output item in the data array.",
            "type": "string"
          },
          "object": {
            "default": "list",
            "description": "The type of this object. It is always set to \"list\".",
            "enum": [
              "list"
            ],
            "type": "string"
          }
        },
        "required": [
          "object",
          "data",
          "first_id",
          "last_id",
          "has_more"
        ],
        "title": "EvalRunOutputItemList",
        "type": "object"
      },
      "EvalScoreModelGrader": {
        "description": "A ScoreModelGrader object that uses a model to assign a score to the input.",
        "properties": {
          "input": {
            "description": "The input text. This may include template strings.",
            "items": {
              "$ref": "#/components/schemas/EvalItem"
            },
            "type": "array"
          },
          "model": {
            "description": "The model to use for the evaluation.",
            "type": "string"
          },
          "name": {
            "description": "The name of the grader.",
            "type": "string"
          },
          "pass_threshold": {
            "description": "The threshold for the score.",
            "type": "number"
          },
          "range": {
            "description": "The range of the score. Defaults to `[0, 1]`.",
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "sampling_params": {
            "description": "The sampling parameters for the model.",
            "type": "object"
          },
          "type": {
            "description": "The object type, which is always `score_model`.",
            "enum": [
              "score_model"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "input",
          "model"
        ],
        "title": "ScoreModelGrader",
        "type": "object"
      },
      "EvalStoredCompletionsDataSourceConfig": {
        "description": "A StoredCompletionsDataSourceConfig which specifies the metadata property of your stored completions query. This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The schema returned by this data source config is used to defined what variables are available in your evals. `item` and `sample` are both defined when using this data source config. ",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "schema": {
            "additionalProperties": true,
            "description": "The json schema for the run data source items. Learn how to build JSON schemas [here](https://json-schema.org/).",
            "type": "object"
          },
          "type": {
            "default": "stored_completions",
            "description": "The type of data source. Always `stored_completions`.",
            "enum": [
              "stored_completions"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "schema"
        ],
        "title": "StoredCompletionsDataSourceConfig",
        "type": "object"
      },
      "EvalStoredCompletionsSource": {
        "description": "A StoredCompletionsRunDataSource configuration describing a set of filters",
        "properties": {
          "created_after": {
            "description": "An optional Unix timestamp to filter items created after this time.",
            "type": "integer"
          },
          "created_before": {
            "description": "An optional Unix timestamp to filter items created before this time.",
            "type": "integer"
          },
          "limit": {
            "description": "An optional maximum number of items to return.",
            "type": "integer"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "model": {
            "description": "An optional model to filter by (e.g., 'gpt-4o').",
            "type": "string"
          },
          "type": {
            "default": "stored_completions",
            "description": "The type of source. Always `stored_completions`.",
            "enum": [
              "stored_completions"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "StoredCompletionsRunDataSource",
        "type": "object"
      },
      "EvalStringCheckGrader": {
        "description": "A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.",
        "properties": {
          "input": {
            "description": "The input text. This may include template strings.",
            "type": "string"
          },
          "name": {
            "description": "The name of the grader.",
            "type": "string"
          },
          "operation": {
            "description": "The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.",
            "enum": [
              "eq",
              "ne",
              "like",
              "ilike"
            ],
            "type": "string"
          },
          "reference": {
            "description": "The reference text. This may include template strings.",
            "type": "string"
          },
          "type": {
            "description": "The object type, which is always `string_check`.",
            "enum": [
              "string_check"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "input",
          "reference",
          "operation"
        ],
        "title": "StringCheckGrader",
        "type": "object"
      },
      "EvalTextSimilarityGrader": {
        "description": "A TextSimilarityGrader object which grades text based on similarity metrics.",
        "properties": {
          "evaluation_metric": {
            "description": "The evaluation metric to use. One of `fuzzy_match`, `bleu`, `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, or `rouge_l`.",
            "enum": [
              "fuzzy_match",
              "bleu",
              "gleu",
              "meteor",
              "rouge_1",
              "rouge_2",
              "rouge_3",
              "rouge_4",
              "rouge_5",
              "rouge_l"
            ],
            "type": "string"
          },
          "input": {
            "description": "The text being graded.",
            "type": "string"
          },
          "name": {
            "description": "The name of the grader.",
            "type": "string"
          },
          "pass_threshold": {
            "description": "A float score where a value greater than or equal indicates a passing grade.",
            "type": "number"
          },
          "reference": {
            "description": "The text being graded against.",
            "type": "string"
          },
          "type": {
            "default": "text_similarity",
            "description": "The type of grader.",
            "enum": [
              "text_similarity"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "input",
          "reference",
          "pass_threshold",
          "evaluation_metric"
        ],
        "title": "TextSimilarityGrader",
        "type": "object"
      },
      "EventType": {
        "title": "EventType",
        "description": "Defines the severity of a content filter result.",
        "enum": [
          "message",
          "metrics"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "EventType",
          "modelAsString": true,
          "values": [
            {
              "value": "message",
              "description": "Event only contains human readable messages."
            },
            {
              "value": "metrics",
              "description": "Event contains metrics."
            }
          ]
        }
      },
      "File": {
        "title": "File",
        "description": "A file is a document usable for training and validation. It can also be a service generated document with result details.",
        "required": [
          "filename",
          "purpose"
        ],
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "created_at": {
            "format": "unixtime",
            "description": "A timestamp when this job or item was created (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "id": {
            "description": "The identity of this item.",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/FileState"
          },
          "bytes": {
            "format": "int64",
            "description": "The size of this file when available (can be null). File sizes larger than 2^53-1 are not supported to ensure compatibility\r\nwith JavaScript integers.",
            "type": "integer",
            "readOnly": true
          },
          "purpose": {
            "$ref": "#/components/schemas/Purpose"
          },
          "filename": {
            "description": "The name of the file.",
            "minLength": 1,
            "type": "string"
          },
          "expires_at": {
            "format": "int32",
            "description": "A unix timestamp (the number of seconds that have elapsed since January 1, 1970) when the file is expired.",
            "type": "integer",
            "readOnly": true
          },
          "status_details": {
            "description": "The error message with details in case processing of this file failed.\r\nDeprecated.",
            "type": "string",
            "readOnly": true
          }
        },
        "readOnly": true
      },
      "FileCreate": {
        "title": "FileCreate",
        "description": "Defines a document to import from an external content url to be usable with Azure OpenAI.",
        "required": [
          "content_url",
          "purpose"
        ],
        "type": "object",
        "properties": {
          "purpose": {
            "$ref": "#/components/schemas/Purpose"
          },
          "content_url": {
            "format": "url",
            "description": "The url to download the document from (can be SAS url of a blob or any other external url accessible with a GET request).",
            "type": "string"
          }
        }
      },
      "FileDelete": {
        "title": "FileDelete",
        "description": "Defines the response for File Delete.",
        "required": [
          "deleted",
          "id",
          "object"
        ],
        "type": "object",
        "properties": {
          "object": {
            "description": "If the file was deleted.",
            "minLength": 1,
            "type": "string"
          },
          "deleted": {
            "description": "A value indicating whether gets if the file was deleted.",
            "type": "boolean"
          },
          "id": {
            "description": "The file-id that was deleted.",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "FileDetails": {
        "title": "FileDetails",
        "description": "A file detail is a document used by batch service to fetch file blob details.",
        "required": [
          "filename",
          "purpose"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The identity of this item.",
            "type": "string",
            "readOnly": true
          },
          "filename": {
            "description": "The name of the file.",
            "minLength": 1,
            "type": "string"
          },
          "path": {
            "description": "The  the relative path to the file within the container.",
            "type": "string",
            "readOnly": true
          },
          "storage_account_uri": {
            "format": "url",
            "description": "The storage account url of this file.",
            "type": "string",
            "readOnly": true
          },
          "storage_container_name": {
            "description": "The Storage Container Name of this file blob.",
            "type": "string",
            "readOnly": true
          },
          "purpose": {
            "$ref": "#/components/schemas/Purpose"
          }
        }
      },
      "FileExpiresAfter": {
        "title": "FileExpiresAfter",
        "description": "Defines a expiration for the file.",
        "type": "object",
        "properties": {
          "anchor": {
            "$ref": "#/components/schemas/FileExpiryAnchor"
          },
          "seconds": {
            "format": "int64",
            "description": "The relative expiration time in seconds.\r\nRange: [1209600 - 2592000].",
            "maximum": 2592000,
            "minimum": 1209600,
            "type": "integer"
          }
        }
      },
      "FileExpiryAnchor": {
        "title": "FileExpiryAnchor",
        "description": "Defines the anchor relative to what time the absolute expiration should be generated from.",
        "enum": [
          "created_at"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "FileExpiryAnchor",
          "modelAsString": true,
          "values": [
            {
              "value": "created_at",
              "description": "Defines the expiration anchor to be created_at time."
            }
          ]
        }
      },
      "FileImport": {
        "title": "FileImport",
        "description": "Defines a document to import from an external content url to be usable with Azure OpenAI.",
        "required": [
          "content_url",
          "filename",
          "purpose"
        ],
        "type": "object",
        "properties": {
          "purpose": {
            "$ref": "#/components/schemas/Purpose"
          },
          "filename": {
            "description": "The name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.\r\nIf the `purpose` is set to \"fine-tune\", each line is a JSON record with \"prompt\" and \"completion\" fields representing your training examples.",
            "minLength": 1,
            "type": "string"
          },
          "content_url": {
            "format": "url",
            "description": "The url to download the document from (can be SAS url of a blob or any other external url accessible with a GET request).",
            "type": "string"
          },
          "expires_after": {
            "$ref": "#/components/schemas/FileExpiresAfter"
          }
        }
      },
      "FileList": {
        "title": "FileList",
        "description": "Represents a list of files.",
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "data": {
            "description": "The list of items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          }
        }
      },
      "FileState": {
        "title": "FileState",
        "description": "The state of a file.",
        "enum": [
          "uploaded",
          "pending",
          "running",
          "processed",
          "error",
          "deleting",
          "deleted"
        ],
        "type": "string",
        "readOnly": true,
        "x-ms-enum": {
          "name": "FileState",
          "modelAsString": true,
          "values": [
            {
              "value": "uploaded",
              "description": "The file has been uploaded but it's not yet processed. This state is not returned by Azure OpenAI and exposed only for compatibility. It can be categorized as an inactive state."
            },
            {
              "value": "pending",
              "description": "The operation was created and is not queued to be processed in the future. It can be categorized as an inactive state."
            },
            {
              "value": "running",
              "description": "The operation has started to be processed. It can be categorized as an active state."
            },
            {
              "value": "processed",
              "description": "The operation has successfully be processed and is ready for consumption. It can be categorized as a terminal state."
            },
            {
              "value": "error",
              "description": "The operation has completed processing with a failure and cannot be further consumed. It can be categorized as a terminal state."
            },
            {
              "value": "deleting",
              "description": "The entity is ni the process to be deleted. This state is not returned by Azure OpenAI and exposed only for compatibility. It can be categorized as an active state."
            },
            {
              "value": "deleted",
              "description": "The entity has been deleted but may still be referenced by other entities predating the deletion. It can be categorized as a terminal state."
            }
          ]
        }
      },
      "FineTuneMethod": {
        "title": "FineTuneMethod",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/FineTuningMethodType"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "FineTuneMethodRequest": {
        "title": "FineTuneMethodRequest",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/FineTuningMethodType"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "FineTuningHyperParameters": {
        "title": "FineTuningHyperParameters",
        "description": "The hyper parameter settings used in a fine tune job.",
        "type": "object",
        "properties": {
          "n_epochs": {
            "format": "int32",
            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.",
            "type": "integer"
          },
          "batch_size": {
            "format": "int32",
            "description": "The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.\r\nIn general, we've found that larger batch sizes tend to work better for larger datasets.\r\nThe default value as well as the maximum value for this property are specific to a base model.",
            "type": "integer"
          },
          "learning_rate_multiplier": {
            "format": "double",
            "description": "The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pre-training multiplied by this value.\r\nLarger learning rates tend to perform better with larger batch sizes.\r\nWe recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results.",
            "type": "number"
          }
        }
      },
      "FineTuningJob": {
        "title": "FineTuningJob",
        "description": "Defines the values of a fine tune job.",
        "required": [
          "model",
          "training_file"
        ],
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "created_at": {
            "format": "unixtime",
            "description": "A timestamp when this job or item was created (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "id": {
            "description": "The identity of this item.",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/FineTuningState"
          },
          "model": {
            "description": "The identifier (model-id) of the base model used for the fine-tune.",
            "minLength": 1,
            "type": "string"
          },
          "fine_tuned_model": {
            "description": "The identifier (model-id) of the resulting fine tuned model. This property is only populated for successfully completed fine-tune runs.\r\nUse this identifier to create a deployment for inferencing.",
            "type": "string"
          },
          "training_file": {
            "description": "The file which is used for training.",
            "minLength": 1,
            "type": "string"
          },
          "validation_file": {
            "description": "The file which is used to evaluate the fine tuned model during training.",
            "type": "string"
          },
          "result_files": {
            "description": "The result file identities (file-id) containing training and evaluation metrics in csv format.\r\nThe file is only available for successfully completed fine-tune runs.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "finished_at": {
            "format": "int32",
            "description": "A timestamp when this job or item has finished successfully (in unix epochs).",
            "type": "integer"
          },
          "organisation_id": {
            "description": "The organisation id of this fine tune job. Unused on Azure OpenAI; compatibility for OpenAI only.",
            "type": "string"
          },
          "trained_tokens": {
            "format": "int32",
            "description": "The total number of billable tokens processed by this fine tuning job.",
            "type": "integer",
            "readOnly": true
          },
          "error": {
            "$ref": "#/components/schemas/FineTuningJobError"
          },
          "estimated_finish": {
            "format": "int32",
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.",
            "type": "integer"
          },
          "hyperparameters": {
            "$ref": "#/components/schemas/FineTuningHyperParameters"
          },
          "suffix": {
            "description": "The suffix used to identify the fine-tuned model. The suffix can contain up to 40 characters (a-z, A-Z, 0-9,- and _) that will be added to your fine-tuned model name.",
            "type": "string"
          },
          "seed": {
            "format": "int32",
            "description": "The seed used for the finetuning job.",
            "type": "integer"
          },
          "integrations": {
            "description": "A list configurations for integrations supporting the fine-tuning job.\r\nThere are many integrations planned, so make sure to check and act on the integration type.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WandBIntegrationRequestWrapper"
            }
          },
          "method": {
            "title": "FineTuneMethod",
            "description": "A configuration for finetuning method for the finetuning job. Currently 'dpo' and 'supervised' methods are supported.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SupervisedMethod"
              }
            ]
          }
        }
      },
      "FineTuningJobCheckpoint": {
        "title": "FineTuningJobCheckpoint",
        "required": [
          "created_at",
          "fine_tuned_model_checkpoint",
          "fine_tuning_job_id",
          "metrics",
          "step_number"
        ],
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "id": {
            "description": "The identity of this checkpoint.",
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "format": "unixtime",
            "description": "The Unix timestamp (in seconds) for when the checkpoint was created.",
            "type": "integer"
          },
          "fine_tuned_model_checkpoint": {
            "description": "The name of the fine-tuned checkpoint model that is created.",
            "minLength": 1,
            "type": "string"
          },
          "step_number": {
            "format": "int32",
            "description": "The step number that the checkpoint was created at.",
            "type": "integer"
          },
          "metrics": {
            "title": "Dictionary`2",
            "description": "The metrics at the step number during the fine-tuning job.",
            "type": "object",
            "additionalProperties": {
              "format": "double",
              "type": "number"
            }
          },
          "fine_tuning_job_id": {
            "description": "The name of the fine-tuning job that this checkpoint was created from..",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "FineTuningJobCheckpointList": {
        "title": "FineTuningJobCheckpointList",
        "description": "Represents a list of checkpoints.",
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "data": {
            "description": "The list of items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTuningJobCheckpoint"
            }
          },
          "has_more": {
            "description": "A value indicating whether the list contains more elements than returned.",
            "type": "boolean"
          }
        }
      },
      "FineTuningJobCreation": {
        "title": "FineTuningJobCreation",
        "description": "Defines the values of a fine tune job.",
        "required": [
          "model",
          "training_file"
        ],
        "type": "object",
        "properties": {
          "model": {
            "description": "The identifier (model-id) of the base model used for this fine-tune.",
            "minLength": 1,
            "type": "string"
          },
          "training_file": {
            "description": "The file identity (file-id) that is used for training this fine tuned model.",
            "minLength": 1,
            "type": "string"
          },
          "validation_file": {
            "description": "The file identity (file-id) that is used to evaluate the fine tuned model during training.",
            "type": "string"
          },
          "hyperparameters": {
            "$ref": "#/components/schemas/FineTuningHyperParameters"
          },
          "suffix": {
            "description": "The suffix used to identify the fine-tuned model. The suffix can contain up to 40 characters (a-z, A-Z, 0-9,- and _) that will be added to your fine-tuned model name.",
            "type": "string"
          },
          "seed": {
            "format": "int32",
            "description": "The seed used for the finetuning job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you.",
            "type": "integer"
          },
          "integrations": {
            "description": "A list configurations for integrations supporting the fine-tuning job.\r\nThere are many integrations planned, so make sure to check and act on the integration type.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WandBIntegrationRequestWrapper"
            }
          },
          "method": {
            "title": "FineTuneMethodRequest",
            "description": "A configuration for finetuning method for the finetuning job. Currently 'dpo' and 'supervised' methods are supported.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SupervisedMethodRequest"
              }
            ]
          }
        }
      },
      "FineTuningJobError": {
        "title": "FineTuningJobError",
        "description": "For fine-tuning jobs that have failed, this will contain more information on the cause of the failure.",
        "type": "object",
        "properties": {
          "code": {
            "description": "The machine-readable error code..",
            "type": "string"
          },
          "message": {
            "description": "The human-readable error message.",
            "type": "string"
          },
          "param": {
            "description": "The parameter that was invalid, usually training_file or validation_file. This field will be null if the failure was not parameter-specific.",
            "type": "string"
          }
        }
      },
      "FineTuningJobEvent": {
        "title": "FineTuningJobEvent",
        "required": [
          "created_at",
          "level",
          "message",
          "type"
        ],
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "id": {
            "description": "The identity of this event.",
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "format": "unixtime",
            "description": "A timestamp when this event was created (in unix epochs).",
            "type": "integer"
          },
          "level": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "message": {
            "description": "The message describing the event. This can be a change of state, e.g., enqueued, started, failed or completed, or other events like uploaded results.",
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "data": {
            "description": "Machine readable data of this event."
          }
        }
      },
      "FineTuningJobEventList": {
        "title": "FineTuningJobEventList",
        "description": "Represents a list of events.",
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "data": {
            "description": "The list of items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTuningJobEvent"
            }
          },
          "has_more": {
            "description": "A value indicating whether the list contains more elements than returned.",
            "type": "boolean"
          }
        }
      },
      "FineTuningJobList": {
        "title": "FineTuningJobList",
        "description": "Represents a list of fine tunes.",
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "data": {
            "description": "The list of items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTuningJob"
            }
          },
          "has_more": {
            "description": "A value indicating whether the list contains more elements than returned.",
            "type": "boolean"
          }
        }
      },
      "FineTuningMethodType": {
        "title": "FineTuningMethodType",
        "enum": [
          "dpo",
          "supervised"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "FineTuningMethodType",
          "modelAsString": true,
          "values": [
            {
              "value": "dpo",
              "description": "Finetunes using Dpo algorithm"
            },
            {
              "value": "supervised",
              "description": "Finetunes using Supervised algorithm"
            }
          ]
        }
      },
      "FineTuningState": {
        "title": "FineTuningState",
        "description": "The state of a finetunes object or fine tuning job.",
        "enum": [
          "created",
          "pending",
          "running",
          "pausing",
          "paused",
          "resuming",
          "succeeded",
          "cancelled",
          "failed"
        ],
        "type": "string",
        "readOnly": true,
        "x-ms-enum": {
          "name": "FineTuningState",
          "modelAsString": true,
          "values": [
            {
              "value": "created",
              "description": "The operation was created. This state is not returned by Azure OpenAI and exposed only for compatibility. It can be categorized as an inactive state."
            },
            {
              "value": "pending",
              "description": "The operation is not yet queued to be processed in the future. It can be categorized as an inactive state."
            },
            {
              "value": "running",
              "description": "The operation has started to be processed. It can be categorized as an active state."
            },
            {
              "value": "pausing",
              "description": "The operation has started to be pause. It can be categorized as an active state."
            },
            {
              "value": "paused",
              "description": "The operation has paused. It can be categorized as an inactive state."
            },
            {
              "value": "resuming",
              "description": "The operation has started to be processed. It can be categorized as an active state."
            },
            {
              "value": "succeeded",
              "description": "The operation has successfully be processed and is ready for consumption. It can be categorized as a terminal state."
            },
            {
              "value": "cancelled",
              "description": "The operation has been cancelled and is incomplete. It can be categorized as a terminal state."
            },
            {
              "value": "failed",
              "description": "The operation has completed processing with a failure and cannot be further consumed. It can be categorized as a terminal state."
            }
          ]
        }
      },
      "FunctionCallFunction": {
        "title": "FunctionCallFunction",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the function.",
            "type": "string"
          },
          "arguments": {
            "description": "The arguments that the model expects you to pass to the function.",
            "type": "string"
          }
        }
      },
      "FunctionDefinition": {
        "title": "FunctionDefinition",
        "type": "object",
        "properties": {
          "parameters": {
            "description": "The parameters the functions accepts, described as a JSON Schema object."
          },
          "description": {
            "description": "A description of what the function does, used by the model to\r\nchoose when and how to call the function.",
            "type": "string"
          },
          "name": {
            "description": "The name of the function to be called.",
            "type": "string"
          }
        }
      },
      "GenericEmbeddingSettings": {
        "title": "ConnectionEmbeddingSettings",
        "description": "Connection Embedding Settings",
        "type": "object",
        "properties": {
          "connection": {
            "$ref": "#/components/schemas/BaseConnection"
          },
          "deploymentName": {
            "type": "string"
          },
          "modelName": {
            "type": "string"
          }
        }
      },
      "IngestionError": {
        "title": "IngestionError",
        "description": "The details of the ingestion error",
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "innerErrors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IngestionJob": {
        "title": "IngestionJob",
        "description": "Represents the details of a job.",
        "type": "object",
        "required": [
          "kind"
        ],
        "discriminator": {
          "propertyName": "kind"
        },
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/IngestionJobType"
          },
          "jobId": {
            "type": "string"
          }
        }
      },
      "IngestionJobList": {
        "title": "IngestionJobList",
        "description": "Represents a list of ingestion jobs.",
        "type": "object",
        "properties": {
          "nextLink": {
            "description": "The link to the next page.",
            "type": "string"
          },
          "value": {
            "description": "The list of items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngestionJob"
            }
          }
        }
      },
      "IngestionJobProgress": {
        "title": "IngestionJobProgress",
        "type": "object",
        "required": [
          "stageProgress"
        ],
        "properties": {
          "stageProgress": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngestionJobStageProgress"
            }
          }
        }
      },
      "IngestionJobRun": {
        "title": "IngestionJobRun",
        "description": "The details of a job run",
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "runId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/OperationState"
          },
          "error": {
            "$ref": "#/components/schemas/IngestionError"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "progress": {
            "$ref": "#/components/schemas/IngestionJobProgress"
          }
        }
      },
      "IngestionJobRunList": {
        "title": "IngestionJobRunList",
        "description": "Represents a list of ingestion job runs.",
        "type": "object",
        "properties": {
          "nextLink": {
            "description": "The link to the next page.",
            "type": "string"
          },
          "value": {
            "description": "The list of items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngestionJobRun"
            }
          }
        }
      },
      "IngestionJobStageProgress": {
        "title": "IngestionJobStageProgress",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "processedItems": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "$ref": "#/components/schemas/OperationState"
          },
          "subStageProgress": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngestionJobStageProgress"
            }
          }
        }
      },
      "IngestionJobSystemCompute": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IngestionJob"
          },
          {
            "type": "object",
            "properties": {
              "searchServiceConnection": {
                "$ref": "#/components/schemas/BaseConnection"
              },
              "datasource": {
                "$ref": "#/components/schemas/SystemComputeDatasource"
              },
              "completionAction": {
                "$ref": "#/components/schemas/CompletionAction"
              },
              "dataRefreshIntervalInHours": {
                "type": "integer"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "SystemCompute"
      },
      "IngestionJobType": {
        "title": "IngestionJobType",
        "type": "string",
        "description": "The job type.",
        "enum": [
          "SystemCompute",
          "UserCompute"
        ],
        "x-ms-enum": {
          "name": "IngestionJobType",
          "modelAsString": true,
          "values": [
            {
              "name": "SystemCompute",
              "value": "SystemCompute",
              "description": "Jobs that run on service owned resources."
            },
            {
              "name": "UserCompute",
              "value": "UserCompute",
              "description": "Jobs that run on user owned workspace."
            }
          ]
        }
      },
      "IngestionJobUserCompute": {
        "type": "object",
        "required": [
          "workspaceId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/IngestionJob"
          },
          {
            "type": "object",
            "properties": {
              "workspaceId": {
                "type": "string"
              },
              "compute": {
                "$ref": "#/components/schemas/JobCompute"
              },
              "target": {
                "$ref": "#/components/schemas/TargetIndex"
              },
              "datasource": {
                "$ref": "#/components/schemas/UserComputeDatasource"
              },
              "dataRefreshIntervalInHours": {
                "type": "integer"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "UserCompute"
      },
      "InnerError": {
        "title": "InnerError",
        "description": "Inner error as defined in the Microsoft REST guidelines\r\n(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/InnerErrorCode"
          },
          "innererror": {
            "$ref": "#/components/schemas/InnerError"
          }
        }
      },
      "InnerErrorCode": {
        "title": "InnerErrorCode",
        "description": "Inner error codes as defined in the Microsoft REST guidelines\r\n(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).",
        "enum": [
          "invalidPayload"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "InnerErrorCode",
          "modelAsString": true,
          "values": [
            {
              "value": "invalidPayload",
              "description": "The request data is invalid for this operation."
            }
          ]
        }
      },
      "InputMessage": {
        "title": "InputMessage",
        "type": "object",
        "properties": {
          "id": {
            "description": "The identity of message.",
            "type": "string"
          },
          "role": {
            "description": "The role of the entity that is creating the message.",
            "type": "string"
          },
          "content": {
            "description": "The contents of the message.",
            "type": "string"
          },
          "name": {
            "description": "An optional name for the participant.\r\nProvides the model information to differentiate between participants of the same role.",
            "type": "string"
          }
        }
      },
      "InputTextContent": {
        "title": "InputTextContent",
        "description": "A text input to the model.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "input_text"
            ],
            "description": "The type of the input item. Always `input_text`.",
            "default": "input_text"
          },
          "text": {
            "type": "string",
            "description": "The text input to the model."
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "IntegrationTypes": {
        "title": "IntegrationTypes",
        "description": "List of Fine Tune integrations available.",
        "enum": [
          "wandb"
        ],
        "type": "string"
      },
      "JobCompute": {
        "title": "JobCompute",
        "description": "The compute settings of the job.",
        "type": "object",
        "discriminator": {
          "propertyName": "kind"
        },
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/ComputeType"
          }
        }
      },
      "LifeCycleStatus": {
        "title": "LifeCycleStatus",
        "description": "The life cycle status of a model.\r\nNote: A model can be promoted from \"preview\" to \"generally-available\", but never from \"generally-available\" to \"preview\".",
        "enum": [
          "preview",
          "generally-available",
          "deprecating",
          "deprecated"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "LifeCycleStatus",
          "modelAsString": true,
          "values": [
            {
              "value": "preview",
              "description": "Model is in preview and covered by the service preview terms."
            },
            {
              "value": "generally-available",
              "description": "Model is generally available."
            },
            {
              "value": "deprecating",
              "description": "Model is in the process of deprecation and will not be supported long term."
            },
            {
              "value": "deprecated",
              "description": "Model is in a deprecated state and is no longer supported."
            }
          ]
        }
      },
      "LogLevel": {
        "title": "LogLevel",
        "description": "The verbosity level of an event.",
        "enum": [
          "info",
          "warning",
          "error"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "LogLevel",
          "modelAsString": true,
          "values": [
            {
              "value": "info",
              "description": "This event is for information only."
            },
            {
              "value": "warning",
              "description": "This event represents a mitigated issue."
            },
            {
              "value": "error",
              "description": "This message represents a non recoverable issue."
            }
          ]
        }
      },
      "Logprob": {
        "title": "Logprob",
        "type": "object",
        "properties": {
          "token": {
            "description": "The token.",
            "type": "string"
          },
          "logprob": {
            "format": "float",
            "description": "The log probability of this token, if it is within the top 20 most likely tokens.\r\nOtherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
            "type": "number"
          }
        }
      },
      "Metadata": {
        "type": "object",
        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard. Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "Model": {
        "title": "Model",
        "description": "A model is either a base model or the result of a successful fine tune job.",
        "required": [
          "capabilities",
          "deprecation",
          "lifecycle_status"
        ],
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "created_at": {
            "format": "unixtime",
            "description": "A timestamp when this job or item was created (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "id": {
            "description": "The identity of this item.",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/FineTuningState"
          },
          "model": {
            "description": "The base model identity (model-id) if this is a fine tune model; otherwise `null`.",
            "type": "string"
          },
          "fine_tune": {
            "description": "The fine tune job identity (fine-tune-id) if this is a fine tune model; otherwise `null`.",
            "type": "string"
          },
          "capabilities": {
            "$ref": "#/components/schemas/Capabilities"
          },
          "lifecycle_status": {
            "$ref": "#/components/schemas/LifeCycleStatus"
          },
          "deprecation": {
            "$ref": "#/components/schemas/Deprecation"
          }
        }
      },
      "ModelList": {
        "title": "ModelList",
        "description": "Represents a list of models.",
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "data": {
            "description": "The list of items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Model"
            }
          }
        }
      },
      "OperationState": {
        "title": "OperationState",
        "description": "The state of a job or item.",
        "enum": [
          "notRunning",
          "running",
          "succeeded",
          "failed"
        ],
        "type": "string",
        "readOnly": true,
        "x-ms-enum": {
          "name": "OperationState",
          "modelAsString": true,
          "values": [
            {
              "value": "notRunning",
              "description": "The operation is not yet queued to be processed in the future."
            },
            {
              "value": "running",
              "description": "The operation has started to be processed."
            },
            {
              "value": "succeeded",
              "description": "The operation has successfully be processed and is ready for consumption."
            },
            {
              "value": "failed",
              "description": "The operation has completed processing with a failure and cannot be further consumed."
            }
          ]
        }
      },
      "Order": {
        "title": "Order",
        "description": "Defines the purpose of a file.",
        "enum": [
          "desc",
          "asc"
        ],
        "type": "string"
      },
      "OrderByOrder": {
        "title": "OrderByOrder",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string"
      },
      "PineconeIndex": {
        "description": "Pinecone Index.",
        "required": [
          "connectionId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/TargetIndex"
          },
          {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "The id of the connection pointing to the pinecone."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "Pinecone"
      },
      "Purpose": {
        "title": "Purpose",
        "description": "The intended purpose of the uploaded documents. Use \"fine-tune\" for fine-tuning. This allows us to validate the format of the uploaded file.",
        "enum": [
          "fine-tune",
          "fine-tune-results",
          "assistants",
          "assistants_output",
          "batch",
          "batch_output",
          "evals",
          "evals_output"
        ],
        "type": "string",
        "readOnly": true,
        "x-ms-enum": {
          "name": "Purpose",
          "modelAsString": true,
          "values": [
            {
              "value": "fine-tune",
              "description": "This file contains training data for a fine tune job."
            },
            {
              "value": "fine-tune-results",
              "description": "This file contains the results of a fine tune job."
            },
            {
              "value": "assistants",
              "description": "This file contains data to be used in assistants."
            },
            {
              "value": "assistants_output",
              "description": "This file contains the results of an assistant."
            },
            {
              "value": "batch",
              "description": "This file contains the input data for a batch."
            },
            {
              "value": "batch_output",
              "description": "This file contains the results of a batch."
            },
            {
              "value": "evals",
              "description": "User uploaded files for use in Evals."
            },
            {
              "value": "evals_output",
              "description": "This file contains outputs from eval runs."
            }
          ]
        }
      },
      "ServerlessCompute": {
        "description": "Serverless compute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/JobCompute"
          },
          {
            "type": "object",
            "properties": {
              "sku": {
                "type": "string",
                "description": "SKU Level"
              },
              "instanceCount": {
                "type": "integer",
                "description": "The count of instances to run the job on."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "ServerlessCompute"
      },
      "StoredCompletion": {
        "title": "StoredCompletion",
        "type": "object",
        "properties": {
          "id": {
            "description": "The identity of stored completion.",
            "type": "string"
          },
          "model": {
            "description": "ID of the model to use.",
            "type": "string"
          },
          "created": {
            "format": "int64",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
            "type": "integer"
          },
          "request_id": {
            "description": "An unique identifier for the OpenAI API request. Please include this request ID when contacting support.",
            "type": "string"
          },
          "tool_choice": {
            "description": "Controls which (if any) tool is called by the model.",
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/Usage"
          },
          "seed": {
            "format": "int64",
            "description": "If specified, our system will make a best effort to sample\r\ndeterministically, such that repeated requests with the same `seed`\r\nand parameters should return the same result.\r\n            \r\nDeterminism is not guaranteed, and you should refer to the\r\n`system_fingerprint` response parameter to monitor changes in the\r\nbackend.",
            "type": "integer"
          },
          "top_p": {
            "format": "float",
            "description": "An alternative to sampling with temperature, called nucleus sampling,\r\nwhere the model considers the results of the tokens with top_p probability mass.\r\nSo 0.1 means only the tokens comprising the top 10% probability mass are considered.\r\n            \r\nWe generally recommend altering this or `temperature` but not both.",
            "type": "number"
          },
          "temperature": {
            "format": "float",
            "description": "What sampling temperature to use, between 0 and 2. Higher values\r\nlike 0.8 will make the output more random, while lower values like\r\n0.2 will make it more focused and deterministic.\r\n            \r\nWe generally recommend altering this or `top_p` but not both.",
            "type": "number"
          },
          "presence_penalty": {
            "format": "float",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on\r\nwhether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
            "type": "number"
          },
          "frequency_penalty": {
            "format": "float",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on\r\ntheir existing frequency in the text so far, decreasing the model's\r\nlikelihood to repeat the same line verbatim.",
            "type": "number"
          },
          "system_fingerprint": {
            "description": "This fingerprint represents the backend configuration that the model runs with.\r\n            \r\nCan be used in conjunction with the `seed` request parameter to\r\nunderstand when backend changes have been made that might impact determinism.",
            "type": "string"
          },
          "input_user": {
            "description": "The input user for this request.",
            "type": "string"
          },
          "service_tier": {
            "description": "Specifies the latency tier to use for processing the request.",
            "type": "string"
          },
          "tools": {
            "description": "A list of tools the model may call. Currently, only functions are\r\nsupported as a tool. Use this to provide a list of functions the\r\nmodel may generate JSON inputs for. A max of 128 functions are supported.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          },
          "metadata": {
            "title": "Dictionary`2",
            "description": "Arbitrary key-value pairs for additional information.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "choices": {
            "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Choice"
            }
          }
        }
      },
      "StoredCompletionDelete": {
        "title": "StoredCompletionDelete",
        "required": [
          "object"
        ],
        "type": "object",
        "properties": {
          "object": {
            "description": "If the stored completion was deleted.",
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "description": "The stored completion id that was deleted.",
            "type": "string"
          },
          "deleted": {
            "description": "A value indicating whether gets if the stored completion was deleted.",
            "type": "boolean"
          }
        }
      },
      "StoredCompletionList": {
        "title": "StoredCompletionList",
        "type": "object",
        "properties": {
          "object": {
            "description": "The object type, which is always `list`",
            "type": "string"
          },
          "data": {
            "description": "The list of retrieved objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoredCompletion"
            }
          },
          "total": {
            "format": "int64",
            "description": "Total number of items.",
            "type": "integer"
          },
          "first_id": {
            "description": "The first id in the retrieved `list`",
            "type": "string"
          },
          "last_id": {
            "description": "The last id in the retrieved `list`",
            "type": "string"
          },
          "has_more": {
            "description": "The `has_more` property is used for pagination to indicate there are additional results.",
            "type": "boolean"
          }
        }
      },
      "StoredCompletionMessages": {
        "title": "StoredCompletionMessages",
        "type": "object",
        "properties": {
          "object": {
            "description": "The object type, which is always `list`",
            "type": "string"
          },
          "data": {
            "description": "The list of retrieved objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputMessage"
            }
          },
          "total": {
            "format": "int64",
            "description": "Total number of items.",
            "type": "integer"
          },
          "first_id": {
            "description": "The first id in the retrieved `list`",
            "type": "string"
          },
          "last_id": {
            "description": "The last id in the retrieved `list`",
            "type": "string"
          },
          "has_more": {
            "description": "The `has_more` property is used for pagination to indicate there are additional results.",
            "type": "boolean"
          }
        }
      },
      "StoredCompletionResponse": {
        "title": "StoredCompletionResponse",
        "type": "object",
        "properties": {
          "id": {
            "description": "The identity of stored completion.",
            "type": "string"
          },
          "model": {
            "description": "ID of the model to use.",
            "type": "string"
          },
          "created": {
            "format": "int64",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
            "type": "integer"
          },
          "request_id": {
            "description": "An unique identifier for the OpenAI API request. Please include this request ID when contacting support.",
            "type": "string"
          },
          "tool_choice": {
            "description": "Controls which (if any) tool is called by the model.",
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/Usage"
          },
          "seed": {
            "format": "int64",
            "description": "If specified, our system will make a best effort to sample\r\ndeterministically, such that repeated requests with the same `seed`\r\nand parameters should return the same result.\r\n            \r\nDeterminism is not guaranteed, and you should refer to the\r\n`system_fingerprint` response parameter to monitor changes in the\r\nbackend.",
            "type": "integer"
          },
          "top_p": {
            "format": "float",
            "description": "An alternative to sampling with temperature, called nucleus sampling,\r\nwhere the model considers the results of the tokens with top_p probability mass.\r\nSo 0.1 means only the tokens comprising the top 10% probability mass are considered.\r\n            \r\nWe generally recommend altering this or `temperature` but not both.",
            "type": "number"
          },
          "temperature": {
            "format": "float",
            "description": "What sampling temperature to use, between 0 and 2. Higher values\r\nlike 0.8 will make the output more random, while lower values like\r\n0.2 will make it more focused and deterministic.\r\n            \r\nWe generally recommend altering this or `top_p` but not both.",
            "type": "number"
          },
          "presence_penalty": {
            "format": "float",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on\r\nwhether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
            "type": "number"
          },
          "frequency_penalty": {
            "format": "float",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on\r\ntheir existing frequency in the text so far, decreasing the model's\r\nlikelihood to repeat the same line verbatim.",
            "type": "number"
          },
          "system_fingerprint": {
            "description": "This fingerprint represents the backend configuration that the model runs with.\r\n            \r\nCan be used in conjunction with the `seed` request parameter to\r\nunderstand when backend changes have been made that might impact determinism.",
            "type": "string"
          },
          "input_user": {
            "description": "The input user for this request.",
            "type": "string"
          },
          "service_tier": {
            "description": "Specifies the latency tier to use for processing the request.",
            "type": "string"
          },
          "tools": {
            "description": "A list of tools the model may call. Currently, only functions are\r\nsupported as a tool. Use this to provide a list of functions the\r\nmodel may generate JSON inputs for. A max of 128 functions are supported.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          },
          "metadata": {
            "title": "Dictionary`2",
            "description": "Arbitrary key-value pairs for additional information.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "choices": {
            "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Choice"
            }
          },
          "object": {
            "description": "The type of this object.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "SupervisedMethod": {
        "title": "SupervisedMethod",
        "description": "Method used for supervised finetuning",
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FineTuneMethod"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/FineTuningMethodType"
          }
        }
      },
      "SupervisedMethodRequest": {
        "title": "SupervisedMethodRequest",
        "description": "Method used for supervised finetuning",
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FineTuneMethodRequest"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/FineTuningMethodType"
          }
        }
      },
      "SystemComputeDatasource": {
        "title": "SystemComputeDatasource",
        "type": "object",
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/SystemComputeDatasourceType"
          }
        },
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "SystemComputeDatasourceType": {
        "type": "string",
        "description": "The datasource type.",
        "enum": [
          "Storage",
          "Urls"
        ],
        "x-ms-enum": {
          "name": "SystemComputeDatasourceType",
          "modelAsString": true,
          "values": [
            {
              "name": "Storage",
              "value": "Storage",
              "description": "Azure Storage Account."
            },
            {
              "name": "Urls",
              "value": "Urls",
              "description": "URLs."
            }
          ]
        }
      },
      "SystemComputeStorage": {
        "title": "SystemComputeStorage",
        "description": "Storage account",
        "required": [
          "connection",
          "containerName",
          "embeddings"
        ],
        "x-ms-discriminator-value": "Storage",
        "allOf": [
          {
            "$ref": "#/components/schemas/SystemComputeDatasource"
          },
          {
            "type": "object",
            "properties": {
              "connection": {
                "$ref": "#/components/schemas/BaseConnection"
              },
              "containerName": {
                "type": "string",
                "description": "container name"
              },
              "chunking": {
                "$ref": "#/components/schemas/ChunkingSettings"
              },
              "embeddings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GenericEmbeddingSettings"
                }
              }
            }
          }
        ]
      },
      "SystemComputeUrl": {
        "title": "SystemComputeUrl",
        "description": "Urls",
        "required": [
          "urls",
          "connection",
          "containerName",
          "embeddings"
        ],
        "x-ms-discriminator-value": "Urls",
        "allOf": [
          {
            "$ref": "#/components/schemas/SystemComputeDatasource"
          },
          {
            "type": "object",
            "properties": {
              "urls": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "connection": {
                "$ref": "#/components/schemas/BaseConnection"
              },
              "containerName": {
                "type": "string",
                "description": "container name"
              },
              "crawling": {
                "$ref": "#/components/schemas/CrawlingSettings"
              },
              "chunking": {
                "$ref": "#/components/schemas/ChunkingSettings"
              },
              "embeddings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GenericEmbeddingSettings"
                }
              }
            }
          }
        ]
      },
      "TargetIndex": {
        "title": "TargetIndex",
        "description": "Information about the index to be created.",
        "type": "object",
        "discriminator": {
          "propertyName": "kind"
        },
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/TargetType"
          }
        }
      },
      "TargetType": {
        "type": "string",
        "description": "The target type.",
        "enum": [
          "AzureAISearch",
          "CosmosDB",
          "Pinecone"
        ],
        "x-ms-enum": {
          "name": "TargetType",
          "modelAsString": true,
          "values": [
            {
              "name": "AzureAISearch",
              "value": "AzureAISearch",
              "description": "Azure AI Search Index."
            },
            {
              "name": "CosmosDB",
              "value": "CosmosDB",
              "description": "CosmosDB Index."
            },
            {
              "name": "Pinecone",
              "value": "Pinecone",
              "description": "Pinecone Index."
            }
          ]
        }
      },
      "Tool": {
        "title": "Tool",
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of tool call. This is always going to be `function` for this type of tool call.",
            "type": "string"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionDefinition"
          }
        }
      },
      "ToolCall": {
        "title": "ToolCall",
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of tool call the output is required for. For now, this is always `function`.",
            "type": "string"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionCallFunction"
          },
          "id": {
            "description": "The ID of the tool call.",
            "type": "string"
          }
        }
      },
      "TypeDiscriminator": {
        "title": "TypeDiscriminator",
        "description": "Defines the type of an object.",
        "enum": [
          "list",
          "fine_tuning.job",
          "file",
          "fine_tuning.job.event",
          "fine_tuning.job.checkpoint",
          "model",
          "upload",
          "upload.part",
          "batch",
          "wandb"
        ],
        "type": "string",
        "readOnly": true,
        "x-ms-enum": {
          "name": "TypeDiscriminator",
          "modelAsString": true,
          "values": [
            {
              "value": "list",
              "description": "This object represents a list of other objects."
            },
            {
              "value": "fine_tuning.job",
              "description": "This object represents a fine tune job."
            },
            {
              "value": "file",
              "description": "This object represents a file."
            },
            {
              "value": "fine_tuning.job.event",
              "description": "This object represents an event of a fine tuning job."
            },
            {
              "value": "fine_tuning.job.checkpoint",
              "description": "This object represents a checkpoint of a fine tuning job."
            },
            {
              "value": "model",
              "description": "This object represents a model (can be a base model or fine tune job result)."
            },
            {
              "value": "upload",
              "description": "This object represents a file upload."
            },
            {
              "value": "upload.part",
              "description": "This object represents part of a file upload."
            },
            {
              "value": "batch",
              "description": "This object represents a batch."
            },
            {
              "value": "wandb",
              "description": "This object represents the Weights and Biases Integration configuration."
            }
          ]
        }
      },
      "UpdateStoredCompletionRequest": {
        "title": "UpdateStoredCompletionRequest",
        "type": "object",
        "properties": {
          "metadata": {
            "title": "Dictionary`2",
            "description": "Arbitrary key-value pairs for additional information.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UploadFileCompleteBody": {
        "title": "UploadFileCompleteBody",
        "required": [
          "part_ids"
        ],
        "type": "object",
        "properties": {
          "part_ids": {
            "title": "IList`1",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "md5": {
            "type": "string"
          }
        }
      },
      "UploadFileStartBody": {
        "title": "UploadFileStartBody",
        "required": [
          "bytes",
          "filename",
          "mime_type",
          "purpose"
        ],
        "type": "object",
        "properties": {
          "purpose": {
            "$ref": "#/components/schemas/Purpose"
          },
          "filename": {
            "minLength": 1,
            "type": "string"
          },
          "bytes": {
            "format": "int64",
            "type": "integer"
          },
          "mime_type": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "UploadPartResource": {
        "title": "UploadPartResource",
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "created_at": {
            "format": "unixtime",
            "description": "A timestamp when this job or item was created (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "id": {
            "description": "The identity of this item.",
            "type": "string",
            "readOnly": true
          },
          "upload_id": {
            "type": "string",
            "readOnly": true
          },
          "azure_block_id": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "UploadResource": {
        "title": "UploadResource",
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/TypeDiscriminator"
          },
          "created_at": {
            "format": "unixtime",
            "description": "A timestamp when this job or item was created (in unix epochs).",
            "type": "integer",
            "readOnly": true
          },
          "id": {
            "description": "The identity of this item.",
            "type": "string",
            "readOnly": true
          },
          "bytes": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "filename": {
            "type": "string",
            "readOnly": true
          },
          "purpose": {
            "$ref": "#/components/schemas/Purpose"
          },
          "status": {
            "$ref": "#/components/schemas/UploadStatus"
          },
          "expires_at": {
            "format": "unixtime",
            "type": "integer",
            "readOnly": true
          },
          "file": {
            "$ref": "#/components/schemas/File"
          }
        }
      },
      "UploadStatus": {
        "title": "UploadStatus",
        "enum": [
          "pending",
          "expired",
          "completed",
          "cancelled"
        ],
        "type": "string",
        "readOnly": true
      },
      "Usage": {
        "title": "Usage",
        "type": "object",
        "properties": {
          "total_tokens": {
            "format": "int32",
            "description": "Total number of tokens used in the request (prompt + completion).",
            "type": "integer"
          },
          "completion_tokens": {
            "format": "int32",
            "description": "Number of tokens in the generated completion.",
            "type": "integer"
          },
          "prompt_tokens": {
            "format": "int32",
            "description": "Number of tokens in the prompt.",
            "type": "integer"
          }
        }
      },
      "UserComputeDataset": {
        "type": "object",
        "title": "UserComputeStorage",
        "description": "Storage account",
        "required": [
          "datasetId",
          "datasetType"
        ],
        "x-ms-discriminator-value": "Dataset",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserComputeDatasource"
          },
          {
            "type": "object",
            "properties": {
              "datasetId": {
                "type": "string"
              },
              "datasetType": {
                "type": "string"
              },
              "chunking": {
                "$ref": "#/components/schemas/ChunkingSettings"
              },
              "embeddings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkspaceConnectionEmbeddingSettings"
                }
              }
            }
          }
        ]
      },
      "UserComputeDatasource": {
        "title": "UserComputeDatasource",
        "type": "object",
        "discriminator": {
          "propertyName": "kind"
        },
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/UserComputeDatasourceType"
          }
        }
      },
      "UserComputeDatasourceType": {
        "type": "string",
        "description": "The datasource type.",
        "enum": [
          "Dataset",
          "Urls"
        ],
        "x-ms-enum": {
          "name": "UserComputeDatasourceType",
          "modelAsString": true,
          "values": [
            {
              "name": "Dataset",
              "value": "Dataset",
              "description": "Workspace Dataset."
            },
            {
              "name": "Urls",
              "value": "Urls",
              "description": "URLs."
            }
          ]
        }
      },
      "UserComputeUrl": {
        "type": "object",
        "title": "UserComputeUrl",
        "description": "Urls",
        "required": [
          "urls",
          "embeddings"
        ],
        "x-ms-discriminator-value": "Urls",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserComputeDatasource"
          },
          {
            "type": "object",
            "properties": {
              "urls": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "crawling": {
                "$ref": "#/components/schemas/CrawlingSettings"
              },
              "chunking": {
                "$ref": "#/components/schemas/ChunkingSettings"
              },
              "embeddings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkspaceConnectionEmbeddingSettings"
                }
              }
            }
          }
        ]
      },
      "WandBIntegrationRequest": {
        "title": "WandBIntegrationRequest",
        "required": [
          "project"
        ],
        "type": "object",
        "properties": {
          "project": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "entity": {
            "type": "string",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "WandBIntegrationRequestWrapper": {
        "title": "WandBIntegrationRequestWrapper",
        "required": [
          "type",
          "wandb"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/IntegrationTypes"
          },
          "wandb": {
            "$ref": "#/components/schemas/WandBIntegrationRequest"
          }
        }
      },
      "WorkspaceConnection": {
        "description": "AML Workspace connection.",
        "required": [
          "connectionId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseConnection"
          },
          {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "ConnectionId"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "WorkspaceConnection"
      },
      "WorkspaceConnectionEmbeddingSettings": {
        "title": "WorkspaceConnectionEmbeddingSettings",
        "description": "Connection id to the embedding model",
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "string"
          },
          "deploymentName": {
            "type": "string"
          },
          "modelName": {
            "type": "string"
          }
        }
      }
    }
  }
}
