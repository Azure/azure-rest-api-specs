openapi: 3.0.0
info:
  title: Azure OpenAI Service API
  description: Azure OpenAI APIs for completions and search
  version: '2024-06-01'
servers:
  - url: https://{endpoint}/openai
    variables:
      endpoint:
        default: your-resource-name.openai.azure.com
security:
  - bearer:
      - api.read
  - apiKey: []
paths:
  /deployments/{deployment-id}/completions:
    post:
      summary: Creates a completion for the provided prompt, parameters and chosen model.
      operationId: Completions_Create
      parameters:
        - in: path
          name: deployment-id
          required: true
          schema:
            type: string
            example: davinci
            description: Deployment id of the model which was deployed.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: 2024-06-01
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  description: |-
                    The prompt(s) to generate completions for, encoded as a string or array of strings.
                    Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. Maximum allowed size of string list is 2048.
                  oneOf:
                    - type: string
                      default: ''
                      example: This is a test.
                      nullable: true
                    - type: array
                      items:
                        type: string
                        default: ''
                        example: This is a test.
                        nullable: false
                      description: Array size minimum of 1 and maximum of 2048
                max_tokens:
                  description: The token count of your prompt plus max_tokens cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096). Has minimum of 0.
                  type: integer
                  default: 16
                  example: 16
                  nullable: true
                temperature:
                  description: |-
                    What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.
                    We generally recommend altering this or top_p but not both.
                  type: number
                  default: 1
                  example: 1
                  nullable: true
                top_p:
                  description: |-
                    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
                    We generally recommend altering this or temperature but not both.
                  type: number
                  default: 1
                  example: 1
                  nullable: true
                logit_bias:
                  description: Defaults to null. Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. As an example, you can pass {"50256" &#58; -100} to prevent the <|endoftext|> token from being generated.
                  type: object
                  nullable: false
                user:
                  description: A unique identifier representing your end-user, which can help monitoring and detecting abuse
                  type: string
                  nullable: false
                'n':
                  description: |-
                    How many completions to generate for each prompt. Minimum of 1 and maximum of 128 allowed.
                    Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.
                  type: integer
                  default: 1
                  example: 1
                  nullable: true
                stream:
                  description: 'Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.'
                  type: boolean
                  nullable: true
                  default: false
                logprobs:
                  description: |-
                    Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.
                    Minimum of 0 and maximum of 5 allowed.
                  type: integer
                  default: null
                  nullable: true
                suffix:
                  type: string
                  nullable: true
                  description: The suffix that comes after a completion of inserted text.
                echo:
                  description: Echo back the prompt in addition to the completion
                  type: boolean
                  default: false
                  nullable: true
                stop:
                  description: Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
                  oneOf:
                    - type: string
                      default: <|endoftext|>
                      example: |+
                      nullable: true
                    - type: array
                      items:
                        type: string
                        example: |+
                        nullable: false
                      description: Array minimum size of 1 and maximum of 4
                completion_config:
                  type: string
                  nullable: true
                presence_penalty:
                  description: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
                  type: number
                  default: 0
                frequency_penalty:
                  description: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
                  type: number
                  default: 0
                best_of:
                  description: |-
                    Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
                    When used with n, best_of controls the number of candidate completions and n specifies how many to return - best_of must be greater than n.
                    Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop. Has maximum value of 128.
                  type: integer
            example:
              prompt: |-
                Negate the following sentence.The price for bubblegum increased on thursday.
                 Negated Sentence:
              max_tokens: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  object:
                    type: string
                  created:
                    type: integer
                  model:
                    type: string
                  prompt_filter_results:
                    $ref: '#/components/schemas/promptFilterResults'
                  choices:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                        index:
                          type: integer
                        logprobs:
                          type: object
                          properties:
                            tokens:
                              type: array
                              items:
                                type: string
                            token_logprobs:
                              type: array
                              items:
                                type: number
                            top_logprobs:
                              type: array
                              items:
                                type: object
                                additionalProperties:
                                  type: number
                            text_offset:
                              type: array
                              items:
                                type: integer
                          nullable: true
                        finish_reason:
                          type: string
                        content_filter_results:
                          $ref: '#/components/schemas/contentFilterChoiceResults'
                  usage:
                    type: object
                    properties:
                      completion_tokens:
                        type: number
                        format: int32
                      prompt_tokens:
                        type: number
                        format: int32
                      total_tokens:
                        type: number
                        format: int32
                    required:
                      - prompt_tokens
                      - total_tokens
                      - completion_tokens
                required:
                  - id
                  - object
                  - created
                  - model
                  - choices
              example:
                model: davinci
                object: text_completion
                id: cmpl-4509KAos68kxOqpE2uYGw81j6m7uo
                created: 1637097562
                choices:
                  - index: 0
                    text: The price for bubblegum decreased on thursday.
                    logprobs: null
                    finish_reason: stop
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
        default:
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
  /deployments/{deployment-id}/embeddings:
    post:
      summary: Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
      operationId: embeddings_create
      parameters:
        - in: path
          name: deployment-id
          required: true
          schema:
            type: string
            example: ada-search-index-v1
          description: The deployment id of the model which was deployed.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: '2024-06-01'
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              properties:
                input:
                  description: |-
                    Input text to get embeddings for, encoded as a string. To get embeddings for multiple inputs in a single request, pass an array of strings. Each input must not exceed 2048 tokens in length.
                    Unless you are embedding code, we suggest replacing newlines (\n) in your input with a single space, as we have observed inferior results when newlines are present.
                  oneOf:
                    - type: string
                      default: ''
                      example: This is a test.
                      nullable: true
                    - type: array
                      minItems: 1
                      maxItems: 2048
                      items:
                        type: string
                        minLength: 1
                        example: This is a test.
                        nullable: false
                user:
                  description: A unique identifier representing your end-user, which can help monitoring and detecting abuse.
                  type: string
                  nullable: false
                input_type:
                  description: input type of embedding search to use
                  type: string
                  example: query
                encoding_format:
                  description: The format to return the embeddings in. Can be either `float` or `base64`. Defaults to `float`.
                  type: string
                  example: base64
                  nullable: true
                dimensions:
                  description: The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
                  type: integer
                  example: 1
                  nullable: true
              required:
                - input
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                  model:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        object:
                          type: string
                        embedding:
                          type: array
                          items:
                            type: number
                      required:
                        - index
                        - object
                        - embedding
                  usage:
                    type: object
                    properties:
                      prompt_tokens:
                        type: integer
                      total_tokens:
                        type: integer
                    required:
                      - prompt_tokens
                      - total_tokens
                required:
                  - object
                  - model
                  - data
                  - usage
      x-ms-examples:
        Create a embeddings.:
          $ref: ./examples/embeddings.yaml
  /deployments/{deployment-id}/chat/completions:
    post:
      summary: Creates a completion for the chat message
      operationId: ChatCompletions_Create
      parameters:
        - in: path
          name: deployment-id
          required: true
          schema:
            type: string
            description: Deployment id of the model which was deployed.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: '2024-06-01'
            description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createChatCompletionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createChatCompletionResponse'
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
        default:
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
      x-ms-examples:
        Create a chat completion.:
          $ref: ./examples/chat_completions.yaml
        Creates a completion based on Azure Search data and system-assigned managed identity.:
          $ref: ./examples/chat_completions_azure_search_minimum.yaml
        Creates a completion based on Azure Search vector data, previous assistant message and user-assigned managed identity.:
          $ref: ./examples/chat_completions_azure_search_advanced.yaml
        Creates a completion for the provided Azure Cosmos DB.:
          $ref: ./examples/chat_completions_cosmos_db.yaml
  /deployments/{deployment-id}/audio/transcriptions:
    post:
      summary: Transcribes audio into the input language.
      operationId: Transcriptions_Create
      parameters:
        - in: path
          name: deployment-id
          required: true
          schema:
            type: string
            example: whisper
            description: Deployment id of the whisper model.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: '2024-06-01'
            description: api version
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/createTranscriptionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/audioResponse'
                  - $ref: '#/components/schemas/audioVerboseResponse'
            text/plain:
              schema:
                type: string
                description: Transcribed text in the output format (when response_format was one of text, vtt or srt).
      x-ms-examples:
        Create an audio transcription with json response format.:
          $ref: ./examples/audio_transcription_object.yaml
        Create an audio transcription with text response format.:
          $ref: ./examples/audio_transcription_text.yaml
  /deployments/{deployment-id}/audio/translations:
    post:
      summary: Transcribes and translates input audio into English text.
      operationId: Translations_Create
      parameters:
        - in: path
          name: deployment-id
          required: true
          schema:
            type: string
            example: whisper
            description: Deployment id of the whisper model which was deployed.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: '2024-06-01'
            description: api version
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/createTranslationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/audioResponse'
                  - $ref: '#/components/schemas/audioVerboseResponse'
            text/plain:
              schema:
                type: string
                description: Transcribed text in the output format (when response_format was one of text, vtt or srt).
      x-ms-examples:
        Create an audio translation with json response format.:
          $ref: ./examples/audio_translation_object.yaml
        Create an audio translation with text response format.:
          $ref: ./examples/audio_translation_text.yaml
  /deployments/{deployment-id}/images/generations:
    post:
      summary: Generates a batch of images from a text caption on a given DALLE model deployment
      operationId: ImageGenerations_Create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/imageGenerationsRequest'
      parameters:
        - in: path
          name: deployment-id
          required: true
          schema:
            type: string
            example: dalle-deployment
            description: Deployment id of the dalle model which was deployed.
        - in: query
          name: api-version
          required: true
          schema:
            type: string
            example: '2024-06-01'
            description: api version
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateImagesResponse'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dalleErrorResponse'
      x-ms-examples:
        Create an image.:
          $ref: ./examples/image_generation.yaml
components:
  schemas:
    errorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/error'
    errorBase:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    error:
      type: object
      allOf:
        - $ref: '#/components/schemas/errorBase'
      properties:
        param:
          type: string
        type:
          type: string
        inner_error:
          $ref: '#/components/schemas/innerError'
    innerError:
      description: Inner error with additional details.
      type: object
      properties:
        code:
          $ref: '#/components/schemas/innerErrorCode'
        content_filter_results:
          $ref: '#/components/schemas/contentFilterPromptResults'
    innerErrorCode:
      description: Error codes for the inner error object.
      enum:
        - ResponsibleAIPolicyViolation
      type: string
      x-ms-enum:
        name: InnerErrorCode
        modelAsString: true
        values:
          - value: ResponsibleAIPolicyViolation
            description: The prompt violated one of more content filter rules.
    dalleErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/dalleError'
    dalleError:
      type: object
      allOf:
        - $ref: '#/components/schemas/errorBase'
      properties:
        param:
          type: string
        type:
          type: string
        inner_error:
          $ref: '#/components/schemas/dalleInnerError'
    dalleInnerError:
      description: Inner error with additional details.
      type: object
      properties:
        code:
          $ref: '#/components/schemas/innerErrorCode'
        content_filter_results:
          $ref: '#/components/schemas/dalleFilterResults'
        revised_prompt:
          type: string
          description: The prompt that was used to generate the image, if there was any revision to the prompt.
    contentFilterResultBase:
      type: object
      properties:
        filtered:
          type: boolean
      required:
        - filtered
    contentFilterSeverityResult:
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultBase'
        - properties:
            severity:
              type: string
              enum:
                - safe
                - low
                - medium
                - high
              x-ms-enum:
                name: ContentFilterSeverity
                modelAsString: true
                values:
                  - value: safe
                    description: General content or related content in generic or non-harmful contexts.
                  - value: low
                    description: Harmful content at a low intensity and risk level.
                  - value: medium
                    description: Harmful content at a medium intensity and risk level.
                  - value: high
                    description: Harmful content at a high intensity and risk level.
      required:
        - severity
        - filtered
    contentFilterDetectedResult:
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultBase'
        - properties:
            detected:
              type: boolean
      required:
        - detected
        - filtered
    contentFilterDetectedWithCitationResult:
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterDetectedResult'
        - properties:
            citation:
              type: object
              properties:
                URL:
                  type: string
                license:
                  type: string
      required:
        - detected
        - filtered
    contentFilterResultsBase:
      type: object
      description: Information about the content filtering results.
      properties:
        sexual:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        violence:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        hate:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        self_harm:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        profanity:
          $ref: '#/components/schemas/contentFilterDetectedResult'
        error:
          $ref: '#/components/schemas/errorBase'
    contentFilterPromptResults:
      type: object
      description: Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.
      allOf:
        - $ref: '#/components/schemas/contentFilterResultsBase'
        - properties:
            jailbreak:
              $ref: '#/components/schemas/contentFilterDetectedResult'
    contentFilterChoiceResults:
      type: object
      description: Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about third party text and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.
      allOf:
        - $ref: '#/components/schemas/contentFilterResultsBase'
        - properties:
            protected_material_text:
              $ref: '#/components/schemas/contentFilterDetectedResult'
        - properties:
            protected_material_code:
              $ref: '#/components/schemas/contentFilterDetectedWithCitationResult'
    promptFilterResult:
      type: object
      description: Content filtering results for a single prompt in the request.
      properties:
        prompt_index:
          type: integer
        content_filter_results:
          $ref: '#/components/schemas/contentFilterPromptResults'
    promptFilterResults:
      type: array
      description: Content filtering results for zero or more prompts in the request. In a streaming request, results for different prompts may arrive at different times or in different orders.
      items:
        $ref: '#/components/schemas/promptFilterResult'
    dalleContentFilterResults:
      type: object
      description: Information about the content filtering results.
      properties:
        sexual:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        violence:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        hate:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        self_harm:
          $ref: '#/components/schemas/contentFilterSeverityResult'
    dalleFilterResults:
      type: object
      description: Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.
      allOf:
        - $ref: '#/components/schemas/dalleContentFilterResults'
        - properties:
            profanity:
              $ref: '#/components/schemas/contentFilterDetectedResult'
            jailbreak:
              $ref: '#/components/schemas/contentFilterDetectedResult'
    chatCompletionsRequestCommon:
      type: object
      properties:
        temperature:
          description: |-
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            We generally recommend altering this or `top_p` but not both.
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
        top_p:
          description: |-
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            We generally recommend altering this or `temperature` but not both.
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
        stream:
          description: 'If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.'
          type: boolean
          nullable: true
          default: false
        stop:
          description: Up to 4 sequences where the API will stop generating further tokens.
          oneOf:
            - type: string
              nullable: true
            - type: array
              items:
                type: string
                nullable: false
              minItems: 1
              maxItems: 4
              description: Array minimum size of 1 and maximum of 4
          default: null
        max_tokens:
          description: The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
          type: integer
          default: 4096
        presence_penalty:
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
          type: number
          default: 0
          minimum: -2
          maximum: 2
        frequency_penalty:
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
          type: number
          default: 0
          minimum: -2
          maximum: 2
        logit_bias:
          description: Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
          type: object
          nullable: true
        user:
          description: A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.
          type: string
          example: user-1234
          nullable: false
    createChatCompletionRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/chatCompletionsRequestCommon'
        - properties:
            messages:
              description: A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/chatCompletionRequestMessage'
            data_sources:
              type: array
              description: |2-
                  The configuration entries for Azure OpenAI chat extensions that use them.
                  This additional specification is only compatible with Azure OpenAI.
              items:
                $ref: '#/components/schemas/azureChatExtensionConfiguration'
            'n':
              type: integer
              minimum: 1
              maximum: 128
              default: 1
              example: 1
              nullable: true
              description: How many chat completion choices to generate for each input message.
            seed:
              type: integer
              minimum: -9223372036854775808
              maximum: 9223372036854775807
              default: 0
              example: 1
              nullable: true
              description: If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
            logprobs:
              description: Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. This option is currently not available on the `gpt-4-vision-preview` model.
              type: boolean
              default: false
              nullable: true
            top_logprobs:
              description: An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
              type: integer
              minimum: 0
              maximum: 5
              nullable: true
            response_format:
              type: object
              description: An object specifying the format that the model must output. Used to enable JSON mode.
              properties:
                type:
                  $ref: '#/components/schemas/chatCompletionResponseFormat'
            tools:
              description: A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/chatCompletionTool'
            tool_choice:
              $ref: '#/components/schemas/chatCompletionToolChoiceOption'
            functions:
              description: Deprecated in favor of `tools`. A list of functions the model may generate JSON inputs for.
              type: array
              minItems: 1
              maxItems: 128
              items:
                $ref: '#/components/schemas/chatCompletionFunction'
            function_call:
              description: Deprecated in favor of `tool_choice`. Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name":\ "my_function"}` forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.
              oneOf:
                - type: string
                  enum:
                    - none
                    - auto
                  description: '`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.'
                - type: object
                  description: 'Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.'
                  properties:
                    name:
                      type: string
                      description: The name of the function to call.
                  required:
                    - name
      required:
        - messages
    chatCompletionResponseFormat:
      type: string
      enum:
        - text
        - json_object
      default: text
      example: json_object
      nullable: true
      description: Setting to `json_object` enables JSON mode. This guarantees that the message the model generates is valid JSON.
      x-ms-enum:
        name: ChatCompletionResponseFormat
        modelAsString: true
        values:
          - value: text
            description: Response format is a plain text string.
          - value: json_object
            description: Response format is a JSON object.
    chatCompletionFunction:
      type: object
      properties:
        name:
          type: string
          description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
        description:
          type: string
          description: The description of what the function does.
        parameters:
          $ref: '#/components/schemas/chatCompletionFunctionParameters'
      required:
        - name
    chatCompletionFunctionParameters:
      type: object
      description: The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
      additionalProperties: true
    chatCompletionRequestMessage:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/chatCompletionRequestMessageRole'
      discriminator:
        propertyName: role
        mapping:
          system: '#/components/schemas/chatCompletionRequestMessageSystem'
          user: '#/components/schemas/chatCompletionRequestMessageUser'
          assistant: '#/components/schemas/chatCompletionRequestMessageAssistant'
          tool: '#/components/schemas/chatCompletionRequestMessageTool'
          function: '#/components/schemas/chatCompletionRequestMessageFunction'
      required:
        - role
    chatCompletionRequestMessageRole:
      type: string
      enum:
        - system
        - user
        - assistant
        - tool
        - function
      description: The role of the messages author.
      x-ms-enum:
        name: ChatCompletionRequestMessageRole
        modelAsString: true
        values:
          - value: system
            description: The message author role is system.
          - value: user
            description: The message author role is user.
          - value: assistant
            description: The message author role is assistant.
          - value: tool
            description: The message author role is tool.
          - value: function
            description: Deprecated. The message author role is function.
    chatCompletionRequestMessageSystem:
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            content:
              type: string
              description: The contents of the message.
              nullable: true
      required:
        - content
    chatCompletionRequestMessageUser:
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            content:
              oneOf:
                - type: string
                  description: The contents of the message.
                - type: array
                  description: An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.
                  minimum: 1
                  items:
                    $ref: '#/components/schemas/chatCompletionRequestMessageContentPart'
              nullable: true
      required:
        - content
    chatCompletionRequestMessageContentPart:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/chatCompletionRequestMessageContentPartType'
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/chatCompletionRequestMessageContentPartText'
          image_url: '#/components/schemas/chatCompletionRequestMessageContentPartImage'
      required:
        - type
    chatCompletionRequestMessageContentPartType:
      type: string
      enum:
        - text
        - image_url
      description: The type of the content part.
      x-ms-enum:
        name: ChatCompletionRequestMessageContentPartType
        modelAsString: true
        values:
          - value: text
            description: The content part type is text.
          - value: image_url
            description: The content part type is image_url.
    chatCompletionRequestMessageContentPartText:
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessageContentPart'
        - type: object
          properties:
            text:
              type: string
              description: The text content.
      required:
        - text
    chatCompletionRequestMessageContentPartImage:
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessageContentPart'
        - type: object
          properties:
            url:
              type: string
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
            detail:
              $ref: '#/components/schemas/imageDetailLevel'
      required:
        - url
    imageDetailLevel:
      type: string
      description: Specifies the detail level of the image.
      enum:
        - auto
        - low
        - high
      default: auto
      x-ms-enum:
        name: ImageDetailLevel
        modelAsString: true
        values:
          - value: auto
            description: The image detail level is auto.
          - value: low
            description: The image detail level is low.
          - value: high
            description: The image detail level is high.
    chatCompletionRequestMessageAssistant:
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            content:
              type: string
              description: The contents of the message.
              nullable: true
            tool_calls:
              type: array
              description: The tool calls generated by the model, such as function calls.
              items:
                $ref: '#/components/schemas/chatCompletionMessageToolCall'
            context:
              $ref: '#/components/schemas/azureChatExtensionsMessageContext'
      required:
        - content
    azureChatExtensionConfiguration:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/azureChatExtensionType'
      description: |2-
          A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat
          completions request that should use Azure OpenAI chat extensions to augment the response behavior.
          The use of this configuration is compatible only with Azure OpenAI.
      discriminator:
        propertyName: type
        mapping:
          azure_search: '#/components/schemas/azureSearchChatExtensionConfiguration'
          azure_cosmos_db: '#/components/schemas/azureCosmosDBChatExtensionConfiguration'
    azureChatExtensionType:
      type: string
      description: |2-
          A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat
          completions request that should use Azure OpenAI chat extensions to augment the response behavior.
          The use of this configuration is compatible only with Azure OpenAI.
      enum:
        - azure_search
        - azure_cosmos_db
      x-ms-enum:
        name: AzureChatExtensionType
        modelAsString: true
        values:
          - name: azureSearch
            value: azure_search
            description: Represents the use of Azure Search as an Azure OpenAI chat extension.
          - name: azureCosmosDB
            value: azure_cosmos_db
            description: Represents the use of Azure Cosmos DB as an Azure OpenAI chat extension.
    azureSearchChatExtensionConfiguration:
      required:
        - parameters
      description: |-
        A specific representation of configurable options for Azure Search when using it as an Azure OpenAI chat
        extension.
      allOf:
        - $ref: '#/components/schemas/azureChatExtensionConfiguration'
        - properties:
            parameters:
              $ref: '#/components/schemas/azureSearchChatExtensionParameters'
      x-ms-discriminator-value: azure_search
    azureSearchChatExtensionParameters:
      required:
        - authentication
        - endpoint
        - index_name
      type: object
      properties:
        authentication:
          oneOf:
            - $ref: '#/components/schemas/onYourDataApiKeyAuthenticationOptions'
            - $ref: '#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions'
            - $ref: '#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions'
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5
          minimum: 1
          type: integer
          description: The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.
          format: int32
        role_information:
          type: string
          description: Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit.
        endpoint:
          type: string
          description: The absolute endpoint path for the Azure Search resource to use.
          format: uri
        index_name:
          type: string
          description: The name of the index to use as available in the referenced Azure Search resource.
        fields_mapping:
          $ref: '#/components/schemas/azureSearchIndexFieldMappingOptions'
        query_type:
          $ref: '#/components/schemas/azureSearchQueryType'
        semantic_configuration:
          type: string
          description: The additional semantic configuration for the query.
        filter:
          type: string
          description: Search filter.
        embedding_dependency:
          oneOf:
            - $ref: '#/components/schemas/onYourDataEndpointVectorizationSource'
            - $ref: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
      description: Parameters for Azure Search when used as an Azure OpenAI chat extension.
    azureSearchIndexFieldMappingOptions:
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          description: The names of index fields that should be treated as content.
          items:
            type: string
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          description: The names of fields that represent vector data.
          items:
            type: string
      description: Optional settings to control how fields are processed when using a configured Azure Search resource.
    azureSearchQueryType:
      type: string
      description: The type of Azure Search retrieval query that should be executed when using it as an Azure OpenAI chat extension.
      enum:
        - simple
        - semantic
        - vector
        - vector_simple_hybrid
        - vector_semantic_hybrid
      x-ms-enum:
        name: azureSearchQueryType
        modelAsString: true
        values:
          - name: simple
            value: simple
            description: Represents the default, simple query parser.
          - name: semantic
            value: semantic
            description: Represents the semantic query parser for advanced semantic modeling.
          - name: vector
            value: vector
            description: Represents vector search over computed data.
          - name: vectorSimpleHybrid
            value: vector_simple_hybrid
            description: Represents a combination of the simple query strategy with vector data.
          - name: vectorSemanticHybrid
            value: vector_semantic_hybrid
            description: Represents a combination of semantic search and vector data querying.
    azureCosmosDBChatExtensionConfiguration:
      required:
        - parameters
      description: |-
        A specific representation of configurable options for Azure Cosmos DB when using it as an Azure OpenAI chat
        extension.
      allOf:
        - $ref: '#/components/schemas/azureChatExtensionConfiguration'
        - properties:
            parameters:
              $ref: '#/components/schemas/azureCosmosDBChatExtensionParameters'
      x-ms-discriminator-value: azure_cosmos_db
    azureCosmosDBChatExtensionParameters:
      required:
        - authentication
        - container_name
        - database_name
        - embedding_dependency
        - fields_mapping
        - index_name
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/onYourDataConnectionStringAuthenticationOptions'
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5
          minimum: 1
          type: integer
          description: The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.
          format: int32
        role_information:
          type: string
          description: Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit.
        database_name:
          type: string
          description: The MongoDB vCore database name to use with Azure Cosmos DB.
        container_name:
          type: string
          description: The name of the Azure Cosmos DB resource container.
        index_name:
          type: string
          description: The MongoDB vCore index name to use with Azure Cosmos DB.
        fields_mapping:
          $ref: '#/components/schemas/azureCosmosDBFieldMappingOptions'
        embedding_dependency:
          oneOf:
            - $ref: '#/components/schemas/onYourDataEndpointVectorizationSource'
            - $ref: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
      description: |-
        Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Azure Cosmos DB for
        MongoDB vCore.
    azureCosmosDBFieldMappingOptions:
      required:
        - content_fields
        - vector_fields
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          description: The names of index fields that should be treated as content.
          items:
            type: string
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          description: The names of fields that represent vector data.
          items:
            type: string
      description: Optional settings to control how fields are processed when using a configured Azure Cosmos DB resource.
    onYourDataAuthenticationOptions:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/onYourDataAuthenticationType'
      description: The authentication options for Azure OpenAI On Your Data.
      discriminator:
        propertyName: type
        mapping:
          api_key: '#/components/schemas/onYourDataApiKeyAuthenticationOptions'
          connection_string: '#/components/schemas/onYourDataConnectionStringAuthenticationOptions'
          system_assigned_managed_identity: '#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions'
          user_assigned_managed_identity: '#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions'
    onYourDataAuthenticationType:
      type: string
      description: The authentication types supported with Azure OpenAI On Your Data.
      enum:
        - api_key
        - connection_string
        - system_assigned_managed_identity
        - user_assigned_managed_identity
      x-ms-enum:
        name: OnYourDataAuthenticationType
        modelAsString: true
        values:
          - name: apiKey
            value: api_key
            description: Authentication via API key.
          - name: connectionString
            value: connection_string
            description: Authentication via connection string.
          - name: systemAssignedManagedIdentity
            value: system_assigned_managed_identity
            description: Authentication via system-assigned managed identity.
          - name: userAssignedManagedIdentity
            value: user_assigned_managed_identity
            description: Authentication via user-assigned managed identity.
    onYourDataApiKeyAuthenticationOptions:
      required:
        - key
      description: The authentication options for Azure OpenAI On Your Data when using an API key.
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            key:
              type: string
              description: The API key to use for authentication.
      x-ms-discriminator-value: api_key
    onYourDataConnectionStringAuthenticationOptions:
      required:
        - connection_string
      description: The authentication options for Azure OpenAI On Your Data when using a connection string.
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            connection_string:
              type: string
              description: The connection string to use for authentication.
      x-ms-discriminator-value: connection_string
    onYourDataSystemAssignedManagedIdentityAuthenticationOptions:
      description: The authentication options for Azure OpenAI On Your Data when using a system-assigned managed identity.
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
      x-ms-discriminator-value: system_assigned_managed_identity
    onYourDataUserAssignedManagedIdentityAuthenticationOptions:
      required:
        - managed_identity_resource_id
      description: The authentication options for Azure OpenAI On Your Data when using a user-assigned managed identity.
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            managed_identity_resource_id:
              type: string
              description: The resource ID of the user-assigned managed identity to use for authentication.
      x-ms-discriminator-value: user_assigned_managed_identity
    onYourDataVectorizationSource:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/onYourDataVectorizationSourceType'
      description: An abstract representation of a vectorization source for Azure OpenAI On Your Data with vector search.
      discriminator:
        propertyName: type
        mapping:
          endpoint: '#/components/schemas/onYourDataEndpointVectorizationSource'
          deployment_name: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
    onYourDataVectorizationSourceType:
      type: string
      description: |-
        Represents the available sources Azure OpenAI On Your Data can use to configure vectorization of data for use with
        vector search.
      enum:
        - endpoint
        - deployment_name
      x-ms-enum:
        name: OnYourDataVectorizationSourceType
        modelAsString: true
        values:
          - name: endpoint
            value: endpoint
            description: Represents vectorization performed by public service calls to an Azure OpenAI embedding model.
          - name: deploymentName
            value: deployment_name
            description: |-
              Represents an Ada model deployment name to use. This model deployment must be in the same Azure OpenAI resource, but
              On Your Data will use this model deployment via an internal call rather than a public one, which enables vector
              search even in private networks.
    onYourDataDeploymentNameVectorizationSource:
      required:
        - deployment_name
      description: |-
        The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based
        on an internal embeddings model deployment name in the same Azure OpenAI resource.
      allOf:
        - $ref: '#/components/schemas/onYourDataVectorizationSource'
        - properties:
            deployment_name:
              type: string
              description: Specifies the name of the model deployment to use for vectorization. This model deployment must be in the same Azure OpenAI resource, but On Your Data will use this model deployment via an internal call rather than a public one, which enables vector search even in private networks.
      x-ms-discriminator-value: deployment_name
    onYourDataEndpointVectorizationSource:
      required:
        - authentication
        - endpoint
      description: |-
        The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based
        on a public Azure OpenAI endpoint call for embeddings.
      allOf:
        - $ref: '#/components/schemas/onYourDataVectorizationSource'
        - properties:
            authentication:
              $ref: '#/components/schemas/onYourDataApiKeyAuthenticationOptions'
            endpoint:
              type: string
              description: Specifies the endpoint to use for vectorization. This endpoint must be in the same Azure OpenAI resource, but On Your Data will use this endpoint via an internal call rather than a public one, which enables vector search even in private networks.
              format: uri
      x-ms-discriminator-value: endpoint
    azureChatExtensionsMessageContext:
      type: object
      properties:
        citations:
          type: array
          description: The data source retrieval result, used to generate the assistant message in the response.
          items:
            $ref: '#/components/schemas/citation'
          x-ms-identifiers: []
        intent:
          type: string
          description: The detected intent from the chat history, used to pass to the next turn to carry over the context.
      description: |2-
          A representation of the additional context information available when Azure OpenAI chat extensions are involved
          in the generation of a corresponding chat completions response. This context information is only populated when
          using an Azure OpenAI request configured to use a matching extension.
    citation:
      required:
        - content
      type: object
      properties:
        content:
          type: string
          description: The content of the citation.
        title:
          type: string
          description: The title of the citation.
        url:
          type: string
          description: The URL of the citation.
        filepath:
          type: string
          description: The file path of the citation.
        chunk_id:
          type: string
          description: The chunk ID of the citation.
      description: citation information for a chat completions response message.
    chatCompletionMessageToolCall:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          $ref: '#/components/schemas/toolCallType'
        function:
          type: object
          description: The function that the model called.
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
          required:
            - name
            - arguments
      required:
        - id
        - type
        - function
    toolCallType:
      type: string
      enum:
        - function
      description: The type of the tool call, in this case `function`.
      x-ms-enum:
        name: ToolCallType
        modelAsString: true
        values:
          - value: function
            description: The tool call type is function.
    chatCompletionRequestMessageTool:
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          nullable: true
          properties:
            tool_call_id:
              type: string
              description: Tool call that this message is responding to.
            content:
              type: string
              description: The contents of the message.
              nullable: true
      required:
        - tool_call_id
        - content
    chatCompletionRequestMessageFunction:
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          description: Deprecated. Message that represents a function.
          nullable: true
          properties:
            role:
              type: string
              enum:
                - function
              description: The role of the messages author, in this case `function`.
            name:
              type: string
              description: The contents of the message.
            content:
              type: string
              description: The contents of the message.
              nullable: true
      required:
        - function_call_id
        - content
    createChatCompletionResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/chatCompletionsResponseCommon'
        - properties:
            prompt_filter_results:
              $ref: '#/components/schemas/promptFilterResults'
            choices:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/chatCompletionChoiceCommon'
                  - properties:
                      message:
                        $ref: '#/components/schemas/chatCompletionResponseMessage'
                      content_filter_results:
                        $ref: '#/components/schemas/contentFilterChoiceResults'
                      logprobs:
                        $ref: '#/components/schemas/chatCompletionChoiceLogProbs'
      required:
        - id
        - object
        - created
        - model
        - choices
    chatCompletionChoiceLogProbs:
      description: Log probability information for the choice.
      type: object
      nullable: true
      properties:
        content:
          description: A list of message content tokens with log probability information.
          type: array
          items:
            $ref: '#/components/schemas/chatCompletionTokenLogprob'
          nullable: true
      required:
        - content
    chatCompletionTokenLogprob:
      type: object
      properties:
        token:
          description: The token.
          type: string
        logprob:
          description: The log probability of this token.
          type: number
        bytes:
          description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
          type: array
          items:
            type: integer
          nullable: true
        top_logprobs:
          description: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
          type: array
          items:
            type: object
            properties:
              token:
                description: The token.
                type: string
              logprob:
                description: The log probability of this token.
                type: number
              bytes:
                description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                type: array
                items:
                  type: integer
                nullable: true
            required:
              - token
              - logprob
              - bytes
      required:
        - token
        - logprob
        - bytes
        - top_logprobs

    chatCompletionResponseMessage:
      type: object
      description: A chat completion message generated by the model.
      properties:
        role:
          $ref: '#/components/schemas/chatCompletionResponseMessageRole'
        content:
          type: string
          description: The contents of the message.
          nullable: true
        tool_calls:
          type: array
          description: The tool calls generated by the model, such as function calls.
          items:
            $ref: '#/components/schemas/chatCompletionMessageToolCall'
        function_call:
          $ref: '#/components/schemas/chatCompletionFunctionCall'
        context:
          $ref: '#/components/schemas/azureChatExtensionsMessageContext'
    chatCompletionResponseMessageRole:
      type: string
      enum:
        - assistant
      description: The role of the author of the response message.
    chatCompletionToolChoiceOption:
      description: 'Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.'
      oneOf:
        - type: string
          description: '`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.'
          enum:
            - none
            - auto
            - required
        - $ref: '#/components/schemas/chatCompletionNamedToolChoice'
    chatCompletionNamedToolChoice:
      type: object
      description: Specifies a tool the model should use. Use to force the model to call a specific function.
      properties:
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
          required:
            - name
    chatCompletionFunctionCall:
      type: object
      description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
      properties:
        name:
          type: string
          description: The name of the function to call.
        arguments:
          type: string
          description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
      required:
        - name
        - arguments
    chatCompletionsResponseCommon:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        object:
          $ref: '#/components/schemas/chatCompletionResponseObject'
        created:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) of when the chat completion was created.
        model:
          type: string
          description: The model used for the chat completion.
        usage:
          $ref: '#/components/schemas/completionUsage'
        system_fingerprint:
          type: string
          description: Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
      required:
        - id
        - object
        - created
        - model
    chatCompletionResponseObject:
      type: string
      description: The object type.
      enum:
        - chat.completion
      x-ms-enum:
        name: ChatCompletionResponseObject
        modelAsString: true
        values:
          - value: chat.completion
            description: The object type is chat completion.
    completionUsage:
      type: object
      description: Usage statistics for the completion request.
      properties:
        prompt_tokens:
          type: integer
          description: Number of tokens in the prompt.
        completion_tokens:
          type: integer
          description: Number of tokens in the generated completion.
        total_tokens:
          type: integer
          description: Total number of tokens used in the request (prompt + completion).
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
    chatCompletionTool:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/chatCompletionToolType'
        function:
          type: object
          properties:
            description:
              type: string
              description: A description of what the function does, used by the model to choose when and how to call the function.
            name:
              type: string
              description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            parameters:
              $ref: '#/components/schemas/chatCompletionFunctionParameters'
          required:
            - name
            - parameters
      required:
        - type
        - function
    chatCompletionToolType:
      type: string
      enum:
        - function
      description: The type of the tool. Currently, only `function` is supported.
      x-ms-enum:
        name: ChatCompletionToolType
        modelAsString: true
        values:
          - value: function
            description: The tool type is function.
    chatCompletionChoiceCommon:
      type: object
      properties:
        index:
          type: integer
        finish_reason:
          type: string
    createTranslationRequest:
      type: object
      description: Translation request.
      properties:
        file:
          type: string
          description: The audio file to translate.
          format: binary
        prompt:
          type: string
          description: An optional text to guide the model's style or continue a previous audio segment. The prompt should be in English.
        response_format:
          $ref: '#/components/schemas/audioResponseFormat'
        temperature:
          type: number
          default: 0
          description: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.
      required:
        - file
    audioResponse:
      description: Translation or transcription response when response_format was json
      type: object
      properties:
        text:
          type: string
          description: Translated or transcribed text.
      required:
        - text
    audioVerboseResponse:
      description: Translation or transcription response when response_format was verbose_json
      type: object
      allOf:
        - $ref: '#/components/schemas/audioResponse'
        - properties:
            task:
              type: string
              description: Type of audio task.
              enum:
                - transcribe
                - translate
              x-ms-enum:
                modelAsString: true
            language:
              type: string
              description: Language.
            duration:
              type: number
              description: Duration.
            segments:
              type: array
              items:
                $ref: '#/components/schemas/audioSegment'
      required:
        - text
    audioResponseFormat:
      title: AudioResponseFormat
      description: Defines the format of the output.
      enum:
        - json
        - text
        - srt
        - verbose_json
        - vtt
      type: string
      x-ms-enum:
        modelAsString: true
    createTranscriptionRequest:
      type: object
      description: Transcription request.
      properties:
        file:
          type: string
          description: The audio file object to transcribe.
          format: binary
        prompt:
          type: string
          description: An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language.
        response_format:
          $ref: '#/components/schemas/audioResponseFormat'
        temperature:
          type: number
          default: 0
          description: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.
        language:
          type: string
          description: The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency.
      required:
        - file
    audioSegment:
      type: object
      description: Transcription or translation segment.
      properties:
        id:
          type: integer
          description: Segment identifier.
        seek:
          type: number
          description: Offset of the segment.
        start:
          type: number
          description: Segment start offset.
        end:
          type: number
          description: Segment end offset.
        text:
          type: string
          description: Segment text.
        tokens:
          type: array
          items:
            type: number
            nullable: false
          description: Tokens of the text.
        temperature:
          type: number
          description: Temperature.
        avg_logprob:
          type: number
          description: Average log probability.
        compression_ratio:
          type: number
          description: Compression ratio.
        no_speech_prob:
          type: number
          description: Probability of 'no speech'.
    imageQuality:
      description: The quality of the image that will be generated.
      type: string
      enum:
        - standard
        - hd
      default: standard
      x-ms-enum:
        name: Quality
        modelAsString: true
        values:
          - value: standard
            description: Standard quality creates images with standard quality.
            name: Standard
          - value: hd
            description: HD quality creates images with finer details and greater consistency across the image.
            name: HD
    imagesResponseFormat:
      description: The format in which the generated images are returned.
      type: string
      enum:
        - url
        - b64_json
      default: url
      x-ms-enum:
        name: ImagesResponseFormat
        modelAsString: true
        values:
          - value: url
            description: The URL that provides temporary access to download the generated images.
            name: Url
          - value: b64_json
            description: The generated images are returned as base64 encoded string.
            name: Base64Json
    imageSize:
      description: The size of the generated images.
      type: string
      enum:
        - 1792x1024
        - 1024x1792
        - 1024x1024
      default: 1024x1024
      x-ms-enum:
        name: Size
        modelAsString: true
        values:
          - value: 1792x1024
            description: The desired size of the generated image is 1792x1024 pixels.
            name: Size1792x1024
          - value: 1024x1792
            description: The desired size of the generated image is 1024x1792 pixels.
            name: Size1024x1792
          - value: 1024x1024
            description: The desired size of the generated image is 1024x1024 pixels.
            name: Size1024x1024
    imageStyle:
      description: The style of the generated images.
      type: string
      enum:
        - vivid
        - natural
      default: vivid
      x-ms-enum:
        name: Style
        modelAsString: true
        values:
          - value: vivid
            description: Vivid creates images that are hyper-realistic and dramatic.
            name: Vivid
          - value: natural
            description: Natural creates images that are more natural and less hyper-realistic.
            name: Natural
    imageGenerationsRequest:
      type: object
      properties:
        prompt:
          description: A text description of the desired image(s). The maximum length is 4000 characters.
          type: string
          format: string
          example: a corgi in a field
          minLength: 1
        'n':
          description: The number of images to generate.
          type: integer
          minimum: 1
          maximum: 1
          default: 1
        size:
          $ref: '#/components/schemas/imageSize'
        response_format:
          $ref: '#/components/schemas/imagesResponseFormat'
        user:
          description: A unique identifier representing your end-user, which can help to monitor and detect abuse.
          type: string
          format: string
          example: user123456
        quality:
          $ref: '#/components/schemas/imageQuality'
        style:
          $ref: '#/components/schemas/imageStyle'
      required:
        - prompt
    generateImagesResponse:
      type: object
      properties:
        created:
          type: integer
          format: unixtime
          description: The unix timestamp when the operation was created.
          example: '1676540381'
        data:
          type: array
          description: The result data of the operation, if successful
          items:
            $ref: '#/components/schemas/imageResult'
      required:
        - created
        - data
    imageResult:
      type: object
      description: The image url or encoded image if successful, and an error otherwise.
      properties:
        url:
          type: string
          description: The image url.
          example: https://www.contoso.com
        b64_json:
          type: string
          description: The base64 encoded image
        content_filter_results:
          $ref: '#/components/schemas/dalleContentFilterResults'
        revised_prompt:
          type: string
          description: The prompt that was used to generate the image, if there was any revision to the prompt.
        prompt_filter_results:
          $ref: '#/components/schemas/dalleFilterResults'
  securitySchemes:
    bearer:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
          scopes: {}
      x-tokenInfoFunc: api.middleware.auth.bearer_auth
      x-scopeValidateFunc: api.middleware.auth.validate_scopes
    apiKey:
      type: apiKey
      name: api-key
      in: header
