{
    "openapi": "3.0.0",
    "info": {
        "title": "Azure OpenAI Service API",
        "description": "Azure OpenAI APIs for completions and search",
        "version": "2023-08-01-preview"
    },
    "paths": {
        "/deployments/{deployment_id}/extensions/chat/completions": {
            "post": {
                "summary": "Using extensions to creates a completion for the chat messages.",
                "operationId": "ExtensionsChatCompletions_Create",
                "parameters": [
                    {
                        "in": "path",
                        "name": "deployment_id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Deployment id of the model which was deployed."
                        }
                    },
                    {
                        "in": "query",
                        "name": "api-version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2023-06-01-preview",
                            "description": "api version"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/extensionsChatCompletionsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/extensionsChatCompletionsResponse"
                                }
                            }
                        },
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Service unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/feedback": {
            "post": {
                "summary": "Accept feedback about user experiences with the Chat Completions Extensions Playground.",
                "operationId": "Feedback",
                "parameters": [
                    {
                        "in": "query",
                        "name": "api-version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2023-03-31-preview",
                            "description": "api version"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/feedbackRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "default": {
                        "description": "Service unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "errorResponse": {
                "type": "object",
                "x-model-path": "api.schema._2023_06-01_preview.models.ErrorResponse",
                "properties": {
                    "error": {
                        "$ref": "#/components/schemas/error"
                    }
                }
            },
            "errorBase": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "error": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/errorBase"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "param": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "inner_error": {
                        "$ref": "#/components/schemas/innerError"
                    }
                }
            },
            "innerError": {
                "description": "Inner error with additional details.",
                "type": "object",
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/innerErrorCode"
                    },
                    "content_filter_results": {
                        "$ref": "#/components/schemas/contentFilterResults"
                    }
                }
            },
            "innerErrorCode": {
                "description": "Error codes for the inner error object.",
                "enum": [
                    "ResponsibleAIPolicyViolation"
                ],
                "type": "string",
                "x-ms-enum": {
                    "name": "InnerErrorCode",
                    "modelAsString": true,
                    "values": [
                        {
                            "value": "ResponsibleAIPolicyViolation",
                            "description": "The prompt violated one of more content filter rules."
                        }
                    ]
                }
            },
            "contentFilterResult": {
                "type": "object",
                "properties": {
                    "severity": {
                        "type": "string",
                        "enum": [
                            "safe",
                            "low",
                            "medium",
                            "high"
                        ],
                        "x-ms-enum": {
                            "name": "ContentFilterSeverity",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "safe",
                                    "description": "General content or related content in generic or non-harmful contexts."
                                },
                                {
                                    "value": "low",
                                    "description": "Harmful content at a low intensity and risk level."
                                },
                                {
                                    "value": "medium",
                                    "description": "Harmful content at a medium intensity and risk level."
                                },
                                {
                                    "value": "high",
                                    "description": "Harmful content at a high intensity and risk level."
                                }
                            ]
                        }
                    },
                    "filtered": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "severity",
                    "filtered"
                ]
            },
            "contentFilterResults": {
                "type": "object",
                "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not.",
                "properties": {
                    "sexual": {
                        "$ref": "#/components/schemas/contentFilterResult"
                    },
                    "violence": {
                        "$ref": "#/components/schemas/contentFilterResult"
                    },
                    "hate": {
                        "$ref": "#/components/schemas/contentFilterResult"
                    },
                    "self_harm": {
                        "$ref": "#/components/schemas/contentFilterResult"
                    },
                    "error": {
                        "$ref": "#/components/schemas/errorBase"
                    }
                }
            },
            "chatCompletionsRequestCommon": {
                "type": "object",
                "properties": {
                    "temperature": {
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 2,
                        "default": 1,
                        "example": 1,
                        "nullable": true
                    },
                    "top_p": {
                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or `temperature` but not both.",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1,
                        "example": 1,
                        "nullable": true
                    },
                    "stream": {
                        "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.",
                        "type": "boolean",
                        "nullable": true,
                        "default": false
                    },
                    "stop": {
                        "description": "Up to 4 sequences where the API will stop generating further tokens.",
                        "oneOf": [
                            {
                                "type": "string",
                                "nullable": true
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "nullable": false
                                },
                                "minItems": 1,
                                "maxItems": 4,
                                "description": "Array minimum size of 1 and maximum of 4"
                            }
                        ],
                        "nullable": true,
                        "default": null
                    },
                    "max_tokens": {
                        "description": "The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).",
                        "type": "integer",
                        "default": 4096
                    },
                    "presence_penalty": {
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
                        "type": "number",
                        "default": 0,
                        "minimum": -2,
                        "maximum": 2
                    },
                    "frequency_penalty": {
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
                        "type": "number",
                        "default": 0,
                        "minimum": -2,
                        "maximum": 2
                    },
                    "logit_bias": {
                        "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
                        "type": "object",
                        "nullable": true
                    },
                    "user": {
                        "description": "A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.",
                        "type": "string",
                        "example": "user-1234",
                        "nullable": false
                    }
                }
            },
            "extensionsChatCompletionsRequest": {
                "type": "object",
                "description": "Request for the chat completions using extensions",
                "x-model-path": "api.schema._2023_06_01_preview.models.ExtensionsChatCompletionsRequest",
                "required": [
                    "messages",
                    "dataSources"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/chatCompletionsRequestCommon"
                    },
                    {
                        "properties": {
                            "messages": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/message"
                                }
                            },
                            "dataSources": {
                                "type": "array",
                                "description": "The data sources to be used for the Azure OpenAI on your data feature.",
                                "items": {
                                    "oneOf": [
                                        { "$ref": "#/components/schemas/acsDataSource"},
                                        { "$ref": "#/components/schemas/elasticsearchDataSource"}
                                    ],
                                    "discriminator": {
                                        "propertyName": "type",
                                        "mapping": {
                                            "AzureCognitiveSearch": "#/components/schemas/acsDataSource",
                                            "Elasticsearch": "#/components/schemas/elasticsearchDataSource"
                                        }
                                    }
                                },
                                "minItems": 1,
                                "maxItems": 1
                            }
                        }
                    }
                ],
                "example": {
                    "dataSources": [
                        {
                            "type": "AzureCognitiveSearch",
                            "parameters": {
                                "endpoint": "https://mysearchexample.search.windows.net",
                                "key": "***(admin key)",
                                "indexName": "my-chunk-index",
                                "fieldsMapping": {
                                    "titleField": "productName",
                                    "urlField": "productUrl",
                                    "filepathField": "productFilePath",
                                    "contentFields": [
                                        "productDescription"
                                    ],
                                    "contentFieldsSeparator": "\n"
                                },
                                "topNDocuments": 5,
                                "queryType": "semantic",
                                "semanticConfiguration": "defaultConfiguration",
                                "inScope": true,
                                "roleInformation": "roleInformation"
                            }
                        }
                    ],
                    "messages": [
                        {
                            "role": "user",
                            "content": "Where can I find a hiking place in Seattle?"
                        }
                    ],
                    "temperature": 0.9
                }
            },
            "dataSource": {
                "type": "object",
                "description": "The data source to be used for the Azure OpenAI on your data feature.",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The data source type."
                    }
                },
                "required": [
                    "type"
                ]
            },
            "acsDataSource": {
                "allOf": [
                    { "$ref": "#/components/schemas/dataSource" },
                    { 
                        "properties": {
                            "parameters": {
                                "$ref": "#/components/schemas/acsDataSourceParameters"
                            }
                        }
                    }
                ]
            },
            "acsDataSourceParameters": {
                "type": "object",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "format": "endpoint"
                    },
                    "key": {
                        "type": "string"
                    },
                    "indexName": {
                        "type": "string"
                    },
                    "fieldsMapping": {
                        "$ref": "#/components/schemas/acsDataSourceFieldMapping"
                    },
                    "topNDocuments": {
                        "type": "integer",
                        "default": 5
                    },
                    "queryType": {
                        "type": "string",
                        "enum": [
                            "simple",
                            "semantic",
                            "vector",
                            "vectorSimpleHybrid",
                            "vectorSemanticHybrid"
                        ],
                        "default": "simple"
                    },
                    "semanticConfiguration": {
                        "type": "string"
                    },
                    "inScope": {
                        "type": "boolean",
                        "default": true
                    },
                    "roleInformation": {
                        "type": "string"
                    },
                    "embeddingEndpoint": {
                        "type": "string",
                        "format": "endpoint"
                    },
                    "embeddingKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "endpoint",
                    "key",
                    "indexName"
                ]
            },
            "acsDataSourceFieldMapping": {
                "type": "object",
                "properties": {
                    "titleField": {
                        "type": "string"
                    },
                    "urlField": {
                        "type": "string"
                    },
                    "filepathField": {
                        "type": "string"
                    },
                    "contentFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "contentFieldsSeparator": {
                        "type": "string",
                        "default": "\n"
                    },
                    "vectorFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "nullable": true
            },
            "elasticsearchDataSource": {
                "allOf": [
                    { "$ref": "#/components/schemas/dataSource"}
                ]
            },
            "message": {
                "type": "object",
                "description": "A chat message.",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the message in the conversation."
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "system",
                            "user",
                            "assistant",
                            "tool"
                        ],
                        "description": "The role of the author of this message."
                    },
                    "recipient": {
                        "type": "string",
                        "example": "Contoso.productsUsingGET",
                        "description": "The recipient of the message in the format of <namespace>.<operation>. Present if and only if the recipient is tool."
                    },
                    "content": {
                        "type": "string",
                        "description": "The contents of the message"
                    },
                    "end_turn": {
                        "type": "boolean",
                        "description": "Whether the message ends the turn."
                    }
                },
                "required": [
                    "role",
                    "content"
                ]
            },
            "chatCompletionsResponseCommon": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "object": {
                        "type": "string"
                    },
                    "created": {
                        "type": "integer",
                        "format": "unixtime"
                    },
                    "model": {
                        "type": "string"
                    },
                    "usage": {
                        "type": "object",
                        "properties": {
                            "prompt_tokens": {
                                "type": "integer"
                            },
                            "completion_tokens": {
                                "type": "integer"
                            },
                            "total_tokens": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "prompt_tokens",
                            "completion_tokens",
                            "total_tokens"
                        ]
                    }
                },
                "required": [
                    "id",
                    "object",
                    "created",
                    "model"
                ]
            },
            "chatCompletionChoiceCommon": {
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer"
                    },
                    "finish_reason": {
                        "type": "string"
                    }
                }
            },
            "extensionsChatCompletionChoice": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/chatCompletionChoiceCommon"
                  },
                  {
                    "properties": {
                      "message": {
                        "description": "The message returned by the service.",
                        "$ref": "#/components/schemas/message"
                      }
                    }
                  }
                ]
              },
            "extensionsChatCompletionsResponse": {
                "type": "object",
                "description": "The response of the extensions chat completions.",
                "x-model-path": "api.schema._2023_08-01_preview.models.extensionsChatCompletionsResponse",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/chatCompletionsResponseCommon"
                    },
                    {
                        "properties": {
                            "choices": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/extensionsChatCompletionChoice"
                                }
                            }
                        }
                    }
                ],
                "example": {
                    "id": "1",
                    "object": "extensions.chat.completion",
                    "created": 1679201802,
                    "model": "gpt-3.5-turbo-0301",
                    "choices": [
                        {
                            "index": 0,
                            "finish_reason": "stop",
                            "message": {
                                "role": "assistant",
                                "content": "Seattle is a great place for hiking! Here are some of the best hiking places in Seattle according to Contoso Traveler [doc1] and West Coast Traveler, Snow Lake, Mount Si, and Mount Tenerife [doc2]. I hope this helps! Let me know if you need more information.",
                                "end_turn": true,
                                "context": {
                                    "messages": [
                                      {
                                        "role": "tool",
                                        "content": "{\"citations\":[{\"filepath\":\"ContosoTraveler.pdf\",\"content\":\"This is the content of the citation 1\"},{\"filepath\":\"WestCoastTraveler.html\",\"content\":\"This is the content of the citation 2\"},{\"content\":\"This is the content of the citation 3 without filepath\"}],\"intent\":\"hiking place in seattle\"}",
                                        "end_turn": false
                                      }
                                    ]
                                  }                                
                            }   
                        }
                    ]
                }
            },
            "feedbackRequest": {
                "oneOf": [
                    { "$ref": "#/components/schemas/feedbackPositive"},
                    { "$ref": "#/components/schemas/feedbackNegative"}
                ],
                "discriminator": {
                    "propertyName": "rating",
                    "mapping": {
                        "ThumbsUp": "#/components/schemas/feedbackPositive",
                        "ThumbsDown": "#/components/schemas/feedbackNegative"
                    }
                }
            },
            "feedbackRating": {
                "type": "string",
                "enum": [
                    "ThumbsUp",
                    "ThumbsDown"
                ]
            },
            "feedbackType": {
                "type": "string",
                "enum": [
                    "UnhelpfulResponse",
                    "HurtfulResponse"
                ]
            },
            "feedbackUnhelpfulSubtype": {
                "type": "string",
                "enum": [
                    "MissingCitation",
                    "WrongCitation",
                    "ResponseOutOfDomain",
                    "InaccurateIrrelevant",
                    "Other"
                ]
            },
            "feedbackHurtfulSubtype": {
                "type": "string",
                "enum": [
                    "HateSpeech",
                    "Violent",
                    "Sexual",
                    "Manipulative"
                ]
            },
            "feedbackCommon": {
                "required": [
                    "message_id",
                    "rating"
                ],
                "properties": {
                    "message_id": {
                        "type": "string",
                        "default": "",
                        "title": "The message_id Schema"
                    },
                    "rating": {
                        "$ref": "#/components/schemas/feedbackRating"
                    }
                }
            },
            "feedbackPositive": {
                "allOf": [
                    {"$ref": "#/components/schemas/feedbackCommon"}
                ]
            },
            "feedbackNegative": {
                "oneOf": [
                    {"$ref": "#/components/schemas/feedbackUnhelpful"},
                    {"$ref": "#/components/schemas/feedbackHurtful"}
                ],
                "discriminator": {
                    "propertyName": "feedback_type",
                    "mapping": {
                        "UnhelpfulResponse": "#/components/schemas/feedbackUnhelpful",
                        "HurtfulResponse": "#/components/schemas/feedbackHurtful"
                    }
                }
            },
            "feedbackUnhelpful": {
                "allOf": [
                    {"$ref": "#/components/schemas/feedbackCommon"},
                    {
                        "properties": {
                            "feedback_type": {
                                "$ref": "#/components/schemas/feedbackType"
                            },
                            "feedback_subtype": {
                                "$ref": "#/components/schemas/feedbackUnhelpfulSubtype"
                            }
                        },
                        "required": [
                            "feedback_type",
                            "feedback_subtype"
                        ]
                    }
                ]
            },
            "feedbackHurtful": {
                "allOf": [
                    {"$ref": "#/components/schemas/feedbackCommon"},
                    {
                        "properties": {
                            "feedback_type": {
                                "$ref": "#/components/schemas/feedbackType"
                            },
                            "feedback_subtype": {
                                "$ref": "#/components/schemas/feedbackHurtfulSubtype"
                            }
                        },
                        "required": [
                            "feedback_type",
                            "feedback_subtype"
                        ]
                    }
                ]
            }
        },
        "securitySchemes": {
            "bearer": {
                "type": "oauth2",
                "flows": {
                    "implicit": {
                        "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
                        "scopes": {}
                    }
                },
                "x-tokenInfoFunc": "api.middleware.auth.bearer_auth",
                "x-scopeValidateFunc": "api.middleware.auth.validate_scopes"
            },
            "apiKey": {
                "type": "apiKey",
                "name": "api-key",
                "in": "header"
            }
        }
    }
}