{
  "swagger": "2.0",
  "info": {
    "title": "ContentSafety Service",
    "version": "2024-04-15-preview",
    "description": "Analyze harmful content",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/contentsafety",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "Supported Cognitive Services endpoints (protocol and hostname, for example:\nhttps://<resource-name>.cognitiveservices.azure.com).",
        "required": true,
        "type": "string"
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "OAuth2Auth": [
        "https://cognitiveservices.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    },
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "application",
      "scopes": {
        "https://cognitiveservices.azure.com/.default": ""
      },
      "tokenUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/token"
    }
  },
  "tags": [],
  "paths": {
    "/image/incidents": {
      "get": {
        "operationId": "ImageIncidents_ListIncidents",
        "summary": "Get All Image Incidents",
        "description": "Get all incidents details.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedImageIncident"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/image/incidents/{incidentName}": {
      "get": {
        "operationId": "ImageIncidents_GetIncidents",
        "summary": "Get Image Incident By incidentName",
        "description": "Returns image incident details.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ImageIncident"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "ImageIncidents_CreateOrUpdateIncident",
        "summary": "Create Or Update Image Incident",
        "description": "Updates a image incident. If the image incident does not exist, a new image incident will be created.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageIncidentCreateOrUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ImageIncident"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/ImageIncident"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "ImageIncidents_DeleteIncident",
        "summary": "Delete Image Incident By incidentName",
        "description": "Deletes a image incident.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/image/incidents/{incidentName}:addIncidentSamples": {
      "post": {
        "operationId": "ImageIncidents_AddIncidentSamples",
        "summary": "Add ImageIncidentSamples To Incident",
        "description": "Add imageIncidentSamples to an incident. You can add at most 100 imageIncidentSamples in one request.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddImageIncidentSamplesOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddImageIncidentSamplesResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/image/incidents/{incidentName}:removeIncidentSamples": {
      "post": {
        "operationId": "ImageIncidents_RemoveIncidentSamples",
        "summary": "Remove ImageIncidentSamples From Incident",
        "description": "Remove imageIncidentSamples from an incident. You can remove at most 100 Image Incident in one request.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveImageIncidentSamplesOptions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/image/incidents/{incidentName}/incidentSamples": {
      "get": {
        "operationId": "ImageIncidents_ListIncidentSamples",
        "summary": "Get All ImageIncidentSamples By imageIncidentName",
        "description": "Get all ImageIncidentSamples in a image incident.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedListImageIncidentSampleResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/image/incidents/{incidentName}/incidentSamples/{incidentSampleId}": {
      "get": {
        "operationId": "ImageIncidents_GetIncidentSample",
        "summary": "Get ImageIncidentSample By imageIncidentName And imageIncidentSampleId",
        "description": "Get imageIncidentSample by imageIncidentName and imageIncidentSampleId from a image incident.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "incidentSampleId",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ImageIncidentSampleResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/image:analyze": {
      "post": {
        "operationId": "ImageOperations_AnalyzeImage",
        "summary": "Analyze Image",
        "description": "A synchronous API for the analysis of potentially harmful image content. Currently, it supports four categories: Hate, SelfHarm, Sexual, and Violence.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The image analysis request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyzeImageOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AnalyzeImageResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/image:detectIncidents": {
      "post": {
        "operationId": "ImageOperations_DetectImageIncidents",
        "summary": "Analyze Image Detect Incidents",
        "description": "A synchronous API for the analysis of image detect incidents.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The image incidents analysis request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyzeImageDetectIncidentsOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DetectIncidentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text/autoReviewers": {
      "get": {
        "operationId": "AutoReviewerOperations_ListCustomizedCategory",
        "description": "List latest versions of auto reviewers.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedAutoReviewerVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/text/autoReviewers/{autoReviewerName}": {
      "get": {
        "operationId": "AutoReviewerOperations_GetAutoReviewer",
        "description": "Get a auto reviewer or a specific version of it.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "autoReviewerName",
            "in": "path",
            "description": "Name of the auto reviewer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "If not provided, it will return the latest version.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AutoReviewerVersionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "AutoReviewerOperations_CreateOrUpdateAutoReviewer",
        "summary": "Create a new version of auto reviewer.",
        "description": "Create new auto reviewer or a new version of exisiting auto reviewer.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "autoReviewerName",
            "in": "path",
            "description": "The name of the auto reviewer.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "x-ms-error-code",
            "in": "header",
            "description": "String error code indicating what went wrong.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "errorCode"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutoReviewerVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AutoReviewerVersion"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/AutoReviewerVersion"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "AutoReviewerOperations_DeleteCustomizedCategory",
        "description": "Delete an auto reviewer or a specific version of it.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "autoReviewerName",
            "in": "path",
            "description": "The name of the auto reviewer.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "version",
            "in": "query",
            "description": "If not provided, it will delete all the versions of the auto reviewer.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text/blocklists": {
      "get": {
        "operationId": "TextBlocklists_ListTextBlocklists",
        "summary": "Get All Text Blocklists",
        "description": "Get all text blocklists details.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedTextBlocklist"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/text/blocklists/{blocklistName}": {
      "get": {
        "operationId": "TextBlocklists_GetTextBlocklist",
        "summary": "Get Text Blocklist By blocklistName",
        "description": "Returns text blocklist details.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "blocklistName",
            "in": "path",
            "description": "Text blocklist name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextBlocklist"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "TextBlocklists_CreateOrUpdateTextBlocklist",
        "summary": "Create Or Update Text Blocklist",
        "description": "Updates a text blocklist. If the blocklistName does not exist, a new blocklist will be created.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "blocklistName",
            "in": "path",
            "description": "Text blocklist name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TextBlocklistCreateOrUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextBlocklist"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/TextBlocklist"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "TextBlocklists_DeleteTextBlocklist",
        "summary": "Delete Text Blocklist By blocklistName",
        "description": "Deletes a text blocklist.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "blocklistName",
            "in": "path",
            "description": "Text blocklist name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text/blocklists/{blocklistName}:addOrUpdateBlocklistItems": {
      "post": {
        "operationId": "TextBlocklists_AddOrUpdateBlocklistItems",
        "summary": "Add or update BlocklistItems To Text Blocklist",
        "description": "Add or update blocklistItems to a text blocklist. You can add or update at most 100 blocklistItems in one request.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "blocklistName",
            "in": "path",
            "description": "Text blocklist name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Options for adding or updating blocklist items.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddOrUpdateTextBlocklistItemsOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddOrUpdateTextBlocklistItemsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text/blocklists/{blocklistName}:removeBlocklistItems": {
      "post": {
        "operationId": "TextBlocklists_RemoveBlocklistItems",
        "summary": "Remove BlocklistItems From Text Blocklist",
        "description": "Remove blocklistItems from a text blocklist. You can remove at most 100 BlocklistItems in one request.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "blocklistName",
            "in": "path",
            "description": "Text blocklist name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Options for removing blocklist items.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveTextBlocklistItemsOptions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text/blocklists/{blocklistName}/blocklistItems": {
      "get": {
        "operationId": "TextBlocklists_ListTextBlocklistItems",
        "summary": "Get All BlocklistItems By blocklistName",
        "description": "Get all blocklistItems in a text blocklist.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "blocklistName",
            "in": "path",
            "description": "Text blocklist name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedTextBlocklistItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/text/blocklists/{blocklistName}/blocklistItems/{blocklistItemId}": {
      "get": {
        "operationId": "TextBlocklists_GetTextBlocklistItem",
        "summary": "Get BlocklistItem By blocklistName And blocklistItemId",
        "description": "Get blocklistItem by blocklistName and blocklistItemId from a text blocklist.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "blocklistName",
            "in": "path",
            "description": "Text blocklist name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "blocklistItemId",
            "in": "path",
            "description": "The service will generate a BlocklistItemId, which will be a UUID.",
            "required": true,
            "type": "string",
            "maxLength": 64
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextBlocklistItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text/incidents": {
      "get": {
        "operationId": "TextIncidents_ListIncidents",
        "summary": "Get All Text Incidents",
        "description": "Get all incidents details.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedTextIncident"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/text/incidents/{incidentName}": {
      "get": {
        "operationId": "TextIncidents_GetIncidents",
        "summary": "Get Text Incident By incidentName",
        "description": "Returns text incident details.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextIncident"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "TextIncidents_CreateOrUpdateIncident",
        "summary": "Create Or Update Text Incident",
        "description": "Updates a text incident. If the text incident does not exist, a new text incident will be created.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TextIncidentCreateOrUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextIncident"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/TextIncident"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "TextIncidents_DeleteIncident",
        "summary": "Delete Text Incident By incidentName",
        "description": "Deletes a text incident.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text/incidents/{incidentName}:addIncidentSamples": {
      "post": {
        "operationId": "TextIncidents_AddIncidentSamples",
        "summary": "Add TextIncidentSamples To Incident",
        "description": "Add textIncidentSamples to an incident. You can add at most 100 textIncidentSamples in one request.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddTextIncidentSamplesOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddTextIncidentSamplesResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text/incidents/{incidentName}:removeIncidentSamples": {
      "post": {
        "operationId": "TextIncidents_RemoveIncidentSamples",
        "summary": "Remove TextIncidentSamples From Incident",
        "description": "Remove textIncidentSamples from an incident. You can remove at most 100 Text Incident in one request.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveTextIncidentSamplesOptions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text/incidents/{incidentName}/incidentSamples": {
      "get": {
        "operationId": "TextIncidents_ListIncidentSamples",
        "summary": "Get All TextIncidentSamples By textIncidentName",
        "description": "Get all TextIncidentSamples in a text incident.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedTextIncidentSample"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/text/incidents/{incidentName}/incidentSamples/{incidentSampleId}": {
      "get": {
        "operationId": "TextIncidents_GetIncidentSample",
        "summary": "Get TextIncidentSample By textIncidentName And textIncidentSampleId",
        "description": "Get textIncidentSample by textIncidentName and textIncidentSampleId from a text incident.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "incidentName",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9A-Za-z._~-]+$"
          },
          {
            "name": "incidentSampleId",
            "in": "path",
            "description": "incident name.",
            "required": true,
            "type": "string",
            "maxLength": 64
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextIncidentSample"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text:analyze": {
      "post": {
        "operationId": "TextOperations_AnalyzeText",
        "summary": "Analyze Text",
        "description": "A synchronous API for the analysis of potentially harmful text content. Currently, it supports four categories: Hate, SelfHarm, Sexual, and Violence.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The text analysis request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyzeTextOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text:autoReview": {
      "post": {
        "operationId": "AutoReviewerOperations_AutoReview",
        "summary": "Auto Review Text",
        "description": "A synchronous API for the automatic review of harmful content",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The text analysis request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutoReviewTextOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AutoReviewTextResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text:detectIncidents": {
      "post": {
        "operationId": "TextOperations_DetectTextIncidents",
        "summary": "Analyze Text Detect Incidents",
        "description": "A synchronous API for the analysis of text detect incidents.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The text incidents analysis request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyzeTextDetectIncidentsOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DetectIncidentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text:detectJailbreak": {
      "post": {
        "operationId": "TextOperations_DetectTextJailbreak",
        "summary": "Analyze Text Jailbreak",
        "description": "A synchronous API for the analysis of text jailbreak.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The text jailbreak analysis request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyzeTextJailbreakOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextJailbreakResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/text:detectProtectedMaterial": {
      "post": {
        "operationId": "TextOperations_DetectTextProtectedMaterial",
        "summary": "Analyze Protected Material",
        "description": "A synchronous API for the analysis of protected material.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The text protected material analysis request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyzeTextProtectedMaterialOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextProtectedMaterialResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AddImageIncidentSamplesOptions": {
      "type": "object",
      "description": "The request to add incidentSamples to a incident.",
      "properties": {
        "incidentSamples": {
          "type": "array",
          "description": "Array of incidentSamples to add.",
          "items": {
            "$ref": "#/definitions/ImageIncidentSample"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "incidentSamples"
      ]
    },
    "AddImageIncidentSamplesResult": {
      "type": "object",
      "description": "The response of adding incidentSamples to the incident.",
      "properties": {
        "incidentSamples": {
          "type": "array",
          "description": "Array of incidentSamples have been added.",
          "items": {
            "$ref": "#/definitions/ListImageIncidentSampleResult"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "incidentSamples"
      ]
    },
    "AddOrUpdateTextBlocklistItemsOptions": {
      "type": "object",
      "description": "The request to add blocklistItems to a text blocklist.",
      "properties": {
        "blocklistItems": {
          "type": "array",
          "description": "Array of blocklistItems to add.",
          "items": {
            "$ref": "#/definitions/TextBlocklistItem"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "blocklistItems"
      ]
    },
    "AddOrUpdateTextBlocklistItemsResult": {
      "type": "object",
      "description": "The response of adding blocklistItems to the text blocklist.",
      "properties": {
        "blocklistItems": {
          "type": "array",
          "description": "Array of blocklistItems have been added.",
          "items": {
            "$ref": "#/definitions/TextBlocklistItem"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "blocklistItems"
      ]
    },
    "AddTextIncidentSamplesOptions": {
      "type": "object",
      "description": "The request to add incidentSamples to a incident.",
      "properties": {
        "incidentSamples": {
          "type": "array",
          "description": "Array of incidentSamples to add.",
          "items": {
            "$ref": "#/definitions/TextIncidentSample"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "incidentSamples"
      ]
    },
    "AddTextIncidentSamplesResult": {
      "type": "object",
      "description": "The response of adding incidentSamples to the incident.",
      "properties": {
        "incidentSamples": {
          "type": "array",
          "description": "Array of incidentSamples have been added.",
          "items": {
            "$ref": "#/definitions/TextIncidentSample"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "incidentSamples"
      ]
    },
    "AnalyzeImageDetectIncidentsOptions": {
      "type": "object",
      "description": "The image detect incidents analysis request.",
      "properties": {
        "image": {
          "$ref": "#/definitions/ImageData",
          "description": "The image needs to be analyzed."
        },
        "incidentNames": {
          "type": "array",
          "description": "The incidents to detect.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "image",
        "incidentNames"
      ]
    },
    "AnalyzeImageOptions": {
      "type": "object",
      "description": "The image analysis request.",
      "properties": {
        "image": {
          "$ref": "#/definitions/ImageData",
          "description": "The image needs to be analyzed."
        },
        "categories": {
          "type": "array",
          "description": "The categories will be analyzed. If they are not assigned, a default set of analysis results for the categories will be returned.",
          "items": {
            "$ref": "#/definitions/ImageCategory"
          }
        },
        "outputType": {
          "type": "string",
          "description": "This refers to the type of image analysis output. If no value is assigned, the default value will be \"FourSeverityLevels\".",
          "default": "FourSeverityLevels",
          "enum": [
            "FourSeverityLevels"
          ],
          "x-ms-enum": {
            "name": "AnalyzeImageOutputType",
            "modelAsString": true,
            "values": [
              {
                "name": "FourSeverityLevels",
                "value": "FourSeverityLevels",
                "description": "Output severities in four levels, the value could be 0,2,4,6."
              }
            ]
          }
        }
      },
      "required": [
        "image"
      ]
    },
    "AnalyzeImageResult": {
      "type": "object",
      "description": "The image analysis response.",
      "properties": {
        "categoriesAnalysis": {
          "type": "array",
          "description": "Analysis result for categories.",
          "items": {
            "$ref": "#/definitions/ImageCategoriesAnalysis"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "categoriesAnalysis"
      ]
    },
    "AnalyzeTextDetectIncidentsOptions": {
      "type": "object",
      "description": "The text detect incidents analysis request.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text needs to be analyzed if it attempts to detect incidents. We support a maximum of 10 thousands Unicode characters (Unicode code points) in the text of one request.",
          "maxLength": 10000
        },
        "incidentNames": {
          "type": "array",
          "description": "The incidents to detect.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "text",
        "incidentNames"
      ]
    },
    "AnalyzeTextJailbreakOptions": {
      "type": "object",
      "description": "The text jailbreak analysis request.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text needs to be analyzed if it attempt to jailbreak. We support a maximum of 1k Unicode characters (Unicode code points) in the text of one request.",
          "maxLength": 1000
        }
      },
      "required": [
        "text"
      ]
    },
    "AnalyzeTextJailbreakResult": {
      "type": "object",
      "description": "The text jailbreak analysis request.",
      "properties": {
        "jailbreakAnalysis": {
          "$ref": "#/definitions/JailbreakAnalysisResult",
          "description": "Analysis result for jailbreak."
        }
      },
      "required": [
        "jailbreakAnalysis"
      ]
    },
    "AnalyzeTextOptions": {
      "type": "object",
      "description": "The text analysis request.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text needs to be analyzed. We support a maximum of 10k Unicode characters (Unicode code points) in the text of one request.",
          "maxLength": 10000
        },
        "categories": {
          "type": "array",
          "description": "The categories will be analyzed. If they are not assigned, a default set of analysis results for the categories will be returned.",
          "items": {
            "$ref": "#/definitions/TextCategory"
          }
        },
        "blocklistNames": {
          "type": "array",
          "description": "The names of blocklists.",
          "items": {
            "type": "string"
          }
        },
        "haltOnBlocklistHit": {
          "type": "boolean",
          "description": "When set to true, further analyses of harmful content will not be performed in cases where blocklists are hit. When set to false, all analyses of harmful content will be performed, whether or not blocklists are hit."
        },
        "outputType": {
          "type": "string",
          "description": "This refers to the type of text analysis output. If no value is assigned, the default value will be \"FourSeverityLevels\".",
          "default": "FourSeverityLevels",
          "enum": [
            "FourSeverityLevels",
            "EightSeverityLevels"
          ],
          "x-ms-enum": {
            "name": "AnalyzeTextOutputType",
            "modelAsString": true,
            "values": [
              {
                "name": "FourSeverityLevels",
                "value": "FourSeverityLevels",
                "description": "Output severities in four levels, the value could be 0,2,4,6."
              },
              {
                "name": "EightSeverityLevels",
                "value": "EightSeverityLevels",
                "description": "Output severities in eight levels, the value could be 0,1,2,3,4,5,6,7."
              }
            ]
          }
        }
      },
      "required": [
        "text"
      ]
    },
    "AnalyzeTextProtectedMaterialOptions": {
      "type": "object",
      "description": "The protected material analysis request.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text needs to be analyzed. We support a maximum of 1k Unicode characters (Unicode code points) in the text of one request.",
          "maxLength": 1000
        }
      },
      "required": [
        "text"
      ]
    },
    "AnalyzeTextProtectedMaterialResult": {
      "type": "object",
      "description": "The protected material analysis response.",
      "properties": {
        "protectedMaterialAnalysis": {
          "$ref": "#/definitions/ProtectedMaterialAnalysisResult",
          "description": "Analysis result for protected material."
        }
      },
      "required": [
        "protectedMaterialAnalysis"
      ]
    },
    "AnalyzeTextResult": {
      "type": "object",
      "description": "The text analysis response.",
      "properties": {
        "blocklistsMatch": {
          "type": "array",
          "description": "The blocklist match details.",
          "items": {
            "$ref": "#/definitions/TextBlocklistMatch"
          },
          "x-ms-identifiers": []
        },
        "categoriesAnalysis": {
          "type": "array",
          "description": "Analysis result for categories.",
          "items": {
            "$ref": "#/definitions/TextCategoriesAnalysis"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "categoriesAnalysis"
      ]
    },
    "AutoReviewTextOptions": {
      "type": "object",
      "description": "The text auto reviewing request.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text needs to be auto reviewed."
        },
        "autoReviewerName": {
          "type": "string",
          "description": "The name of the auto reviewer."
        },
        "autoReviewerVersion": {
          "type": "integer",
          "format": "int32",
          "description": "The version of the auto reviewer. If not assigned we will use the latest version."
        }
      },
      "required": [
        "text",
        "autoReviewerName"
      ]
    },
    "AutoReviewTextResult": {
      "type": "object",
      "description": "The text auto reviewing result.",
      "properties": {
        "labelName": {
          "type": "string",
          "description": "The output label name."
        },
        "reasoning": {
          "type": "string",
          "description": "The reasoning of output label."
        }
      },
      "required": [
        "labelName",
        "reasoning"
      ]
    },
    "AutoReviewerLabelDetails": {
      "type": "object",
      "properties": {
        "labelName": {
          "type": "string",
          "description": "The name of the label."
        },
        "description": {
          "type": "string",
          "description": "The description of the label."
        }
      },
      "required": [
        "labelName",
        "description"
      ]
    },
    "AutoReviewerStatus": {
      "type": "string",
      "enum": [
        "Building",
        "Succeeded",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "AutoReviewerStatus",
        "modelAsString": true
      }
    },
    "AutoReviewerVersion": {
      "type": "object",
      "properties": {
        "autoReviewerName": {
          "type": "string",
          "description": "The name of the auto reviewer.",
          "maxLength": 64,
          "pattern": "^[0-9A-Za-z._~-]+$",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "labels": {
          "type": "array",
          "description": "The labels defined in the auto reviewer.",
          "items": {
            "$ref": "#/definitions/AutoReviewerLabelDetails"
          },
          "x-ms-identifiers": []
        },
        "enableOtherwiseLabel": {
          "type": "boolean",
          "description": "Whether let system add an otherwise label to the auto reviewer. Default value is true."
        },
        "exampleBlobUrl": {
          "type": "string",
          "description": "URL of example jsonl blob. Read & write access to the last layer virtual directory is required.",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "blobDelimiter": {
          "type": "string",
          "description": "Delimiter of blob url. If not provided, '/' will be used as the delimiter to parse the exampleBlobUrl.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "exampleBlobCopyUrl": {
          "type": "string",
          "description": "URL of copied example jsonl blob. If exampleBlobUrl is not provided in the request, this field will not be shown in the response.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number of the auto reviewer.",
          "readOnly": true
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time of the auto reviewer.",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/AutoReviewerStatus",
          "description": "Build status of the auto reviewer.",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse",
          "description": "Error when building the auto reviewer."
        }
      },
      "required": [
        "autoReviewerName",
        "labels",
        "version",
        "createdTime",
        "status"
      ]
    },
    "AutoReviewerVersionItem": {
      "type": "object",
      "properties": {
        "autoReviewerName": {
          "type": "string",
          "description": "The name of the auto reviewer.",
          "maxLength": 64,
          "pattern": "^[0-9A-Za-z._~-]+$",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "labels": {
          "type": "array",
          "description": "The labels defined in the auto reviewer.",
          "items": {
            "$ref": "#/definitions/AutoReviewerLabelDetails"
          },
          "x-ms-identifiers": []
        },
        "enableOtherwiseLabel": {
          "type": "boolean",
          "description": "Whether let system add an otherwise label to the auto reviewer. Default value is true."
        },
        "exampleBlobUrl": {
          "type": "string",
          "description": "URL of example jsonl blob. Read & write access to the last layer virtual directory is required.",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "blobDelimiter": {
          "type": "string",
          "description": "Delimiter of blob url. If not provided, '/' will be used as the delimiter to parse the exampleBlobUrl.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "exampleBlobCopyUrl": {
          "type": "string",
          "description": "URL of copied example jsonl blob. If exampleBlobUrl is not provided in the request, this field will not be shown in the response.",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number of the auto reviewer.",
          "readOnly": true
        },
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time of the auto reviewer.",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/AutoReviewerStatus",
          "description": "Build status of the auto reviewer.",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponseItem",
          "description": "Error when building the auto reviewer."
        }
      },
      "required": [
        "autoReviewerName",
        "labels",
        "version",
        "createdTime",
        "status"
      ]
    },
    "AutoReviewerVersionList": {
      "type": "object",
      "description": "List of auto reviewer versions.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of auto reviewer versions.",
          "items": {
            "$ref": "#/definitions/AutoReviewerVersionItem"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value"
      ]
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.ErrorResponseItem": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        },
        "errorCode": {
          "type": "string",
          "description": "String error code indicating what went wrong."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "DetectIncidentsResult": {
      "type": "object",
      "description": "The detect incidents analysis request.",
      "properties": {
        "incidentMatches": {
          "type": "array",
          "description": "The detect incidents match details.",
          "items": {
            "$ref": "#/definitions/IncidentMatch"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "incidentMatches"
      ]
    },
    "ImageCategoriesAnalysis": {
      "type": "object",
      "description": "Image analysis result.",
      "properties": {
        "category": {
          "$ref": "#/definitions/ImageCategory",
          "description": "The image analysis category."
        },
        "severity": {
          "type": "integer",
          "format": "int32",
          "description": "The value increases with the severity of the input content. The value of this field is determined by the output type specified in the request. The output type could be ‘FourSeverityLevels’, and the output value can be 0, 2, 4, 6."
        }
      },
      "required": [
        "category"
      ]
    },
    "ImageCategory": {
      "type": "string",
      "description": "Image analyze category.",
      "enum": [
        "Hate",
        "SelfHarm",
        "Sexual",
        "Violence"
      ],
      "x-ms-enum": {
        "name": "ImageCategory",
        "modelAsString": true
      }
    },
    "ImageData": {
      "type": "object",
      "description": "The image can be either base64 encoded bytes or a blob URL. You can choose only one of these options. If both are provided, the request will be refused. The maximum image size is 2048 x 2048 pixels and should not exceed 4 MB, while the minimum image size is 50 x 50 pixels.",
      "properties": {
        "content": {
          "type": "string",
          "format": "byte",
          "description": "The Base64 encoding of the image."
        },
        "blobUrl": {
          "type": "string",
          "format": "uri",
          "description": "The blob url of the image."
        }
      }
    },
    "ImageDataResult": {
      "type": "object",
      "description": "The image result is base64 encoded bytes",
      "properties": {
        "content": {
          "type": "string",
          "format": "byte",
          "description": "The Base64 encoding of the image."
        }
      }
    },
    "ImageIncident": {
      "type": "object",
      "description": "Image Incident.",
      "properties": {
        "incidentName": {
          "type": "string",
          "description": "incident name.",
          "maxLength": 64,
          "pattern": "^[0-9A-Za-z._~-]+$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "status": {
          "$ref": "#/definitions/IncidentStatus",
          "description": "Incident status.",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Incident created time.",
          "x-ms-mutability": [
            "read"
          ]
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "Incident updated time.",
          "x-ms-mutability": [
            "read"
          ]
        }
      },
      "required": [
        "incidentName",
        "status",
        "created",
        "lastUpdated"
      ]
    },
    "ImageIncidentCreateOrUpdate": {
      "type": "object",
      "description": "Image Incident.",
      "properties": {
        "incidentName": {
          "type": "string",
          "description": "incident name.",
          "maxLength": 64,
          "pattern": "^[0-9A-Za-z._~-]+$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      }
    },
    "ImageIncidentSample": {
      "type": "object",
      "description": "Sample in an Image Incident.",
      "properties": {
        "incidentSampleId": {
          "type": "string",
          "description": "incident name.",
          "maxLength": 64,
          "readOnly": true
        },
        "image": {
          "$ref": "#/definitions/ImageData",
          "description": "IncidentSample image content."
        }
      },
      "required": [
        "incidentSampleId"
      ]
    },
    "ImageIncidentSampleResult": {
      "type": "object",
      "description": "Sample Result in an Image Incident.",
      "properties": {
        "incidentSampleId": {
          "type": "string",
          "description": "incident name.",
          "maxLength": 64,
          "readOnly": true
        },
        "image": {
          "$ref": "#/definitions/ImageDataResult",
          "description": "IncidentSample image content."
        }
      },
      "required": [
        "incidentSampleId"
      ]
    },
    "IncidentMatch": {
      "type": "object",
      "description": "The result of text incident match.",
      "properties": {
        "incidentName": {
          "type": "string",
          "description": "The name of the matched incident.",
          "maxLength": 64
        }
      },
      "required": [
        "incidentName"
      ]
    },
    "IncidentStatus": {
      "type": "string",
      "description": "Incident status.",
      "enum": [
        "InProgress",
        "Completed",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "IncidentStatus",
        "modelAsString": true
      }
    },
    "JailbreakAnalysisResult": {
      "type": "object",
      "description": "The text jailbreak analysis response.",
      "properties": {
        "detected": {
          "type": "boolean",
          "description": "Analysis result for jailbreak."
        }
      },
      "required": [
        "detected"
      ]
    },
    "ListImageIncidentSampleResult": {
      "type": "object",
      "description": "Sample in a Image Incident.",
      "properties": {
        "incidentSampleId": {
          "type": "string",
          "description": "incident name.",
          "maxLength": 64,
          "readOnly": true
        }
      },
      "required": [
        "incidentSampleId"
      ]
    },
    "PagedAutoReviewerVersion": {
      "type": "object",
      "description": "Paged collection of AutoReviewerVersion items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The AutoReviewerVersion items on this page",
          "items": {
            "$ref": "#/definitions/AutoReviewerVersionItem"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedImageIncident": {
      "type": "object",
      "description": "Paged collection of ImageIncident items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ImageIncident items on this page",
          "items": {
            "$ref": "#/definitions/ImageIncident"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedListImageIncidentSampleResult": {
      "type": "object",
      "description": "Paged collection of ListImageIncidentSampleResult items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ListImageIncidentSampleResult items on this page",
          "items": {
            "$ref": "#/definitions/ListImageIncidentSampleResult"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedTextBlocklist": {
      "type": "object",
      "description": "Paged collection of TextBlocklist items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The TextBlocklist items on this page",
          "items": {
            "$ref": "#/definitions/TextBlocklist"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedTextBlocklistItem": {
      "type": "object",
      "description": "Paged collection of TextBlocklistItem items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The TextBlocklistItem items on this page",
          "items": {
            "$ref": "#/definitions/TextBlocklistItem"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedTextIncident": {
      "type": "object",
      "description": "Paged collection of TextIncident items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The TextIncident items on this page",
          "items": {
            "$ref": "#/definitions/TextIncident"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedTextIncidentSample": {
      "type": "object",
      "description": "Paged collection of TextIncidentSample items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The TextIncidentSample items on this page",
          "items": {
            "$ref": "#/definitions/TextIncidentSample"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "ProtectedMaterialAnalysisResult": {
      "type": "object",
      "description": "The text protected material analysis response.",
      "properties": {
        "detected": {
          "type": "boolean",
          "description": "Analysis result for protected material.."
        }
      },
      "required": [
        "detected"
      ]
    },
    "RemoveImageIncidentSamplesOptions": {
      "type": "object",
      "description": "The request to remove incidentSamples from a incident.",
      "properties": {
        "incidentSampleIds": {
          "type": "array",
          "description": "Array of incidentSamples to remove.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "incidentSampleIds"
      ]
    },
    "RemoveTextBlocklistItemsOptions": {
      "type": "object",
      "description": "The request to remove blocklistItems from a text blocklist.",
      "properties": {
        "blocklistItemIds": {
          "type": "array",
          "description": "Array of blocklistItemIds to remove.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "blocklistItemIds"
      ]
    },
    "RemoveTextIncidentSamplesOptions": {
      "type": "object",
      "description": "The request to remove incidentSamples from a incident.",
      "properties": {
        "incidentSampleIds": {
          "type": "array",
          "description": "Array of incidentSamples to remove.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "incidentSampleIds"
      ]
    },
    "TextBlocklist": {
      "type": "object",
      "description": "Text Blocklist.",
      "properties": {
        "blocklistName": {
          "type": "string",
          "description": "Text blocklist name.",
          "maxLength": 64,
          "pattern": "^[0-9A-Za-z._~-]+$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "description": {
          "type": "string",
          "description": "Text blocklist description.",
          "maxLength": 1024
        }
      },
      "required": [
        "blocklistName"
      ]
    },
    "TextBlocklistCreateOrUpdate": {
      "type": "object",
      "description": "Text Blocklist.",
      "properties": {
        "blocklistName": {
          "type": "string",
          "description": "Text blocklist name.",
          "maxLength": 64,
          "pattern": "^[0-9A-Za-z._~-]+$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "description": {
          "type": "string",
          "description": "Text blocklist description.",
          "maxLength": 1024
        }
      }
    },
    "TextBlocklistItem": {
      "type": "object",
      "description": "Item in a TextBlocklist.",
      "properties": {
        "blocklistItemId": {
          "type": "string",
          "description": "The service will generate a BlocklistItemId, which will be a UUID.",
          "maxLength": 64,
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "BlocklistItem description.",
          "maxLength": 1024
        },
        "text": {
          "type": "string",
          "description": "BlocklistItem content.",
          "maxLength": 128
        },
        "isRegex": {
          "type": "boolean",
          "description": "Optional setting. true means this item is a regex matched term, false means this item is an exact matched term. Default value is false."
        }
      },
      "required": [
        "blocklistItemId",
        "text"
      ]
    },
    "TextBlocklistMatch": {
      "type": "object",
      "description": "The result of blocklist match.",
      "properties": {
        "blocklistName": {
          "type": "string",
          "description": "The name of the matched blocklist.",
          "maxLength": 64
        },
        "blocklistItemId": {
          "type": "string",
          "description": "The ID of the matched item.",
          "maxLength": 64
        },
        "blocklistItemText": {
          "type": "string",
          "description": "The content of the matched item.",
          "maxLength": 128
        }
      },
      "required": [
        "blocklistName",
        "blocklistItemId",
        "blocklistItemText"
      ]
    },
    "TextCategoriesAnalysis": {
      "type": "object",
      "description": "Text analysis result.",
      "properties": {
        "category": {
          "$ref": "#/definitions/TextCategory",
          "description": "The text analysis category."
        },
        "severity": {
          "type": "integer",
          "format": "int32",
          "description": "The value increases with the severity of the input content. The value of this field is determined by the output type specified in the request. The output type could be ‘FourSeverityLevels’ or ‘EightSeverity Levels’, and the output value can be 0, 2, 4, 6 or 0, 1, 2, 3, 4, 5, 6, or 7."
        }
      },
      "required": [
        "category"
      ]
    },
    "TextCategory": {
      "type": "string",
      "description": "Text analyze category.",
      "enum": [
        "Hate",
        "SelfHarm",
        "Sexual",
        "Violence"
      ],
      "x-ms-enum": {
        "name": "TextCategory",
        "modelAsString": true
      }
    },
    "TextIncident": {
      "type": "object",
      "description": "Text Incident.",
      "properties": {
        "incidentName": {
          "type": "string",
          "description": "incident name.",
          "maxLength": 64,
          "pattern": "^[0-9A-Za-z._~-]+$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "incidentDefinition": {
          "type": "string",
          "description": "Incident definition.",
          "maxLength": 1024
        },
        "status": {
          "$ref": "#/definitions/IncidentStatus",
          "description": "Incident status.",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Incident created time.",
          "x-ms-mutability": [
            "read"
          ]
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "Incident updated time.",
          "x-ms-mutability": [
            "read"
          ]
        }
      },
      "required": [
        "incidentName",
        "status",
        "created",
        "lastUpdated"
      ]
    },
    "TextIncidentCreateOrUpdate": {
      "type": "object",
      "description": "Text Incident.",
      "properties": {
        "incidentName": {
          "type": "string",
          "description": "incident name.",
          "maxLength": 64,
          "pattern": "^[0-9A-Za-z._~-]+$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "incidentDefinition": {
          "type": "string",
          "description": "Incident definition.",
          "maxLength": 1024
        }
      }
    },
    "TextIncidentSample": {
      "type": "object",
      "description": "Sample in a Text Incident.",
      "properties": {
        "incidentSampleId": {
          "type": "string",
          "description": "incident name.",
          "maxLength": 64,
          "readOnly": true
        },
        "text": {
          "type": "string",
          "description": "IncidentSample text content.",
          "maxLength": 1024
        }
      },
      "required": [
        "incidentSampleId"
      ]
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "Azure.Core.MaxPageSizeQueryParameter": {
      "name": "maxpagesize",
      "in": "query",
      "description": "The maximum number of result items per page.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.SkipQueryParameter": {
      "name": "skip",
      "in": "query",
      "description": "The number of result items to skip.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.TopQueryParameter": {
      "name": "top",
      "in": "query",
      "description": "The number of result items to return.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    }
  }
}
