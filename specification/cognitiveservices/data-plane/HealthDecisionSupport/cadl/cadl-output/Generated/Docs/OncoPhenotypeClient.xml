<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateJobAsync(RequestContent,String,DateTimeOffset,RequestContext)">
<example>
This sample shows how to call CreateJobAsync with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OncoPhenotypeClient(endpoint, credential);

var data = new {
    patients = new[] {
        new {
            id = "<id>",
        }
    },
};

Response response = await client.CreateJobAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateJobAsync with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OncoPhenotypeClient(endpoint, credential);

var data = new {
    configuration = new {
        inferenceTypes = new[] {
            "tumorSite"
        },
        checkForCancerCase = true,
        verbose = true,
        includeEvidence = true,
    },
    patients = new[] {
        new {
            id = "<id>",
            info = new {
                gender = "female",
                birthDate = "2022-05-10T14:57:31.2311892-04:00",
                clinicalInfo = new[] {
                    new {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new[] {
                new {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T14:57:31.2311892-04:00",
                    content = new {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
};

Response response = await client.CreateJobAsync(RequestContent.Create(data), "<repeatabilityRequestId>", DateTimeOffset.UtcNow);
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Creates an Onco Phenotype job with the given request body.

Below is the JSON schema for the request payload.

Request Body:

Schema for <c>OncoPhenotypeRequest</c>:
<code>{
  configuration: {
    inferenceTypes: [&quot;tumorSite&quot; | &quot;histology&quot; | &quot;clinicalStageT&quot; | &quot;clinicalStageN&quot; | &quot;clinicalStageM&quot; | &quot;pathologicStageT&quot; | &quot;pathologicStageN&quot; | &quot;pathologicStageM&quot;], # Optional.
    checkForCancerCase: boolean, # Optional.
    verbose: boolean, # Optional.
    includeEvidence: boolean, # Optional.
  }, # Optional.
  patients: [
    {
      id: string, # Required.
      info: {
        gender: &quot;female&quot; | &quot;male&quot; | &quot;unspecified&quot;, # Optional.
        birthDate: string (date &amp; time), # Optional.
        clinicalInfo: [ClinicalCodedElement], # Optional.
      }, # Optional.
      data: [PatientDocument], # Optional.
    }
  ], # Required.
}
</code>

</remarks>
    </member>
    <member name="CreateJob(RequestContent,String,DateTimeOffset,RequestContext)">
<example>
This sample shows how to call CreateJob with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OncoPhenotypeClient(endpoint, credential);

var data = new {
    patients = new[] {
        new {
            id = "<id>",
        }
    },
};

Response response = client.CreateJob(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateJob with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OncoPhenotypeClient(endpoint, credential);

var data = new {
    configuration = new {
        inferenceTypes = new[] {
            "tumorSite"
        },
        checkForCancerCase = true,
        verbose = true,
        includeEvidence = true,
    },
    patients = new[] {
        new {
            id = "<id>",
            info = new {
                gender = "female",
                birthDate = "2022-05-10T14:57:31.2311892-04:00",
                clinicalInfo = new[] {
                    new {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new[] {
                new {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T14:57:31.2311892-04:00",
                    content = new {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
};

Response response = client.CreateJob(RequestContent.Create(data), "<repeatabilityRequestId>", DateTimeOffset.UtcNow);
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Creates an Onco Phenotype job with the given request body.

Below is the JSON schema for the request payload.

Request Body:

Schema for <c>OncoPhenotypeRequest</c>:
<code>{
  configuration: {
    inferenceTypes: [&quot;tumorSite&quot; | &quot;histology&quot; | &quot;clinicalStageT&quot; | &quot;clinicalStageN&quot; | &quot;clinicalStageM&quot; | &quot;pathologicStageT&quot; | &quot;pathologicStageN&quot; | &quot;pathologicStageM&quot;], # Optional.
    checkForCancerCase: boolean, # Optional.
    verbose: boolean, # Optional.
    includeEvidence: boolean, # Optional.
  }, # Optional.
  patients: [
    {
      id: string, # Required.
      info: {
        gender: &quot;female&quot; | &quot;male&quot; | &quot;unspecified&quot;, # Optional.
        birthDate: string (date &amp; time), # Optional.
        clinicalInfo: [ClinicalCodedElement], # Optional.
      }, # Optional.
      data: [PatientDocument], # Optional.
    }
  ], # Required.
}
</code>

</remarks>
    </member>
    <member name="GetJobAsync(String,RequestContext)">
<example>
This sample shows how to call GetJobAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OncoPhenotypeClient(endpoint, credential);

Response response = await client.GetJobAsync("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("patients")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("confidenceScore").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("caseId").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("modelVersion").ToString());
]]></code>
</example>
<remarks>
Gets the status and details of the Onco Phenotype job.

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OncoPhenotypeResponse</c>:
<code>{
  jobId: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  expirationDateTime: string (date &amp; time), # Required.
  lastUpdateDateTime: string (date &amp; time), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;partiallyCompleted&quot;, # Required.
  errors: [
    {
      code: string, # Required.
      message: string, # Required.
      target: string, # Optional.
      details: [Error], # Optional.
      innererror: {
        code: string, # Required.
        message: string, # Optional.
        innererror: InnerError, # Optional.
      }, # Optional.
    }
  ], # Optional.
  results: {
    patients: [OncoPhenotypePatientResult], # Required.
    modelVersion: string (date &amp; time), # Required.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetJob(String,RequestContext)">
<example>
This sample shows how to call GetJob with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OncoPhenotypeClient(endpoint, credential);

Response response = client.GetJob("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("patients")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("confidenceScore").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("caseId").ToString());
Console.WriteLine(result.GetProperty("results").GetProperty("modelVersion").ToString());
]]></code>
</example>
<remarks>
Gets the status and details of the Onco Phenotype job.

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OncoPhenotypeResponse</c>:
<code>{
  jobId: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  expirationDateTime: string (date &amp; time), # Required.
  lastUpdateDateTime: string (date &amp; time), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;partiallyCompleted&quot;, # Required.
  errors: [
    {
      code: string, # Required.
      message: string, # Required.
      target: string, # Optional.
      details: [Error], # Optional.
      innererror: {
        code: string, # Required.
        message: string, # Optional.
        innererror: InnerError, # Optional.
      }, # Optional.
    }
  ], # Optional.
  results: {
    patients: [OncoPhenotypePatientResult], # Required.
    modelVersion: string (date &amp; time), # Required.
  }, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>