import "@cadl-lang/rest";
import "./model.common.shared.cadl";

using Cadl.Rest;

namespace HealthDecisionSupportAPI;


@doc("The generic part of the Health Decision Support response, common to all models.")
model Response {
  @doc("A processing job identifier.")
  @key
  jobId: string;

  @doc("The date and time when the processing job was created.")
  createdDateTime: zonedDateTime;

  @doc("The date and time when the processing job is set to expire.")
  expirationDateTime: zonedDateTime;

  @doc("The date and time when the processing job was last updated.")
  lastUpdateDateTime: zonedDateTime;

  @doc("The status of the processing job.")
  status: JobStatus;

  @doc("An array of errors, if any errors occurred during the processing job.")
  errors?: Azure.Core.Foundations.Error[];
}

// @doc("Error response object.")
// @error
// model ErrorResponse {
//   @doc("Error information.")
//   error: Error;
// }

@doc("An inference made by the model regarding a patient.")
model Inference {
  @doc("The value of the inference, as relevant for the given inference type.")
  value: string;

  @doc("The description corresponding to the inference value.")
  description?: string;

  @doc("Confidence score for this inference.")
  @minValue(0)
  @maxValue(1)
  confidenceScore?: float32;
}


@doc("A piece of evidence corresponding to an inference.")
model InferenceEvidence {
  @doc("A piece of evidence from a clinical note (text document).")
  patientDataEvidence?: ClinicalNoteEvidence;

  @doc("""
A piece of clinical information, expressed as a code in a clinical coding
system.
""")
  patientInfoEvidence?: ClinicalCodedElement;

  @doc("A value indicating how important this piece of evidence is for the inference.")
  @minValue(0)
  @maxValue(1)
  importance?: float32;
}

@doc("A piece of evidence corresponding to a Trial Matcher inference.")
model TrialMatcherInferenceEvidence {
  @doc("A piece of evidence from the eligibility criteria text of a clinical trial.")
  eligibilityCriteriaEvidence?: string;
  
  ...InferenceEvidence;
}


@doc("The status of the processing job.")
@knownValues(JobStatusKnownValues)
model JobStatus is string;
enum JobStatusKnownValues {
  NotStarted: "notStarted",
  Running: "running",
  Succeeded: "succeeded",
  Failed: "failed",
  PartiallyCompleted: "partiallyCompleted",
}

@doc("The version of the model used for inference, expressed as the model date.")
model ModelVersion is plainDate;