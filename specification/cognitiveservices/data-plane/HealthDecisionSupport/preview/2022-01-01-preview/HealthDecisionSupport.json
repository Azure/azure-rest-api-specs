{
  "swagger": "2.0",
  "info": {
    "title": "Health Decision Support API",
    "description": "Health Decision Support provides an API that serves decision support models, specific for Health & Life Sciences, that perform a decision support inference to be used by a human.",
    "version": "2022-01-01-preview",
    "contact": {
      "name": "Azure Cognitive Services",
      "url": "https://azure.microsoft.com/en-us/services/cognitive-services/"
    }
  },
  "tags": [
    {
      "name": "OncoPhenotype"
    },
    {
      "name": "TrialMatcher"
    }
  ],
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "description": "The secret key for an Azure Cognitive Services subscription.",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/healthdecisionsupport",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "api.cognitive.microsoft.com",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/oncophenotype/jobs": {
      "post": {
        "description": "Creates an Onco Phenotype job with the given request body.",
        "summary": "Create Onco Phenotype job",
        "operationId": "OncoPhenotype_CreateJob",
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "description": "The body of an Onco Phenotype request.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OncoPhenotypeRequest"
            }
          },
          {
            "$ref": "#/parameters/RepeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/RepeatabilityFirstSent"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/SuccessfulPostJobResponse"
          },
          "default": {
            "$ref": "#/responses/ErrorResponse"
          }
        },
        "tags": [
          "OncoPhenotype"
        ],
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "SuccessfulOncoPhenotypeAnalyzeRequest": {
            "$ref": "./examples/SuccessfulOncoPhenotypeRequest.json"
          }
        }
      }
    },
    "/oncophenotype/jobs/{jobId}": {
      "get": {
        "description": "Gets the status and details of the Onco Phenotype job.",
        "summary": "Get Onco Phenotype job details",
        "operationId": "OncoPhenotype_GetJob",
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "description": "The Onco Phenotype job identifier.",
            "format": "uuid",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The status and details of the job.",
            "schema": {
              "$ref": "#/definitions/OncoPhenotypeResponse"
            },
            "headers": {
              "Retry-After": {
                "description": "The minimum number of seconds to wait for a job in a non-terminal status to complete.",
                "type": "integer"
              }
            }
          },
          "default": {
            "$ref": "#/responses/ErrorResponse"
          }
        },
        "tags": [
          "OncoPhenotype"
        ],
        "x-ms-examples": {
          "SuccessfulOncoPhenotypeGetAnalyzeStatus": {
            "$ref": "./examples/SuccessfulOncoPhenotypeResponse.json"
          }
        }
      }
    },
    "/trialmatcher/jobs": {
      "post": {
        "description": "Creates a Trial Matcher job with the given request body.",
        "summary": "Create Trial Matcher job",
        "operationId": "TrialMatcher_CreateJob",
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "description": "The body of a Trial Matcher request.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrialMatcherRequest"
            }
          },
          {
            "$ref": "#/parameters/RepeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/RepeatabilityFirstSent"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/SuccessfulPostJobResponse"
          },
          "default": {
            "$ref": "#/responses/ErrorResponse"
          }
        },
        "tags": [
          "TrialMatcher"
        ],
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "SuccessfulTrialMatcherAnalyzeRequest": {
            "$ref": "./examples/SuccessfulTrialMatcherRequest.json"
          }
        }
      }
    },
    "/trialmatcher/jobs/{jobId}": {
      "get": {
        "description": "Gets the status and details of the Trial Matcher job.",
        "summary": "Get Trial Matcher job details",
        "operationId": "TrialMatcher_GetJob",
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "description": "The Trial Matcher job identifier.",
            "format": "uuid",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The status and details of the job.",
            "schema": {
              "$ref": "#/definitions/TrialMatcherResponse"
            },
            "headers": {
              "Retry-After": {
                "description": "The minimum number of seconds to wait for a job in a non-terminal status to complete.",
                "type": "integer"
              }
            }
          },
          "default": {
            "$ref": "#/responses/ErrorResponse"
          }
        },
        "tags": [
          "TrialMatcher"
        ],
        "x-ms-examples": {
          "SuccessfulTrialMatcherGetAnalyzeStatus": {
            "$ref": "./examples/SuccessfulTrialMatcherResponse.json"
          }
        }
      }
    }
  },
  "responses": {
    "ErrorResponse": {
      "description": "Error encountered.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "headers": {
        "x-ms-error-code": {
          "description": "An error code for the specific error that occurred.",
          "type": "string"
        }
      }
    },
    "SuccessfulPostJobResponse": {
      "description": "The request was accepted and a job was created.",
      "headers": {
        "Operation-Location": {
          "type": "string",
          "description": "URL used to track the progress and obtain the result of the job."
        },
        "Retry-After": {
          "description": "The minimum number of seconds to wait before accessing the result of the job.",
          "type": "integer"
        },
        "Repeatability-Result": {
          "description": "The result of a repeatable request (`accepted`/`rejected`), as specified in [OASIS Repeatable Requests Version 1.0](https://docs.oasis-open.org/odata/repeatable-requests/v1.0/cs01/repeatable-requests-v1.0-cs01.html#sec_RepeatabilityResult).",
          "type": "string",
          "enum": [
            "accepted",
            "rejected"
          ]
        }
      }
    }
  },
  "definitions": {
    "Age": {
      "description": "A person's age, given as a number (value) and a unit (e.g. years, months)",
      "type": "object",
      "properties": {
        "unit": {
          "$ref": "#/definitions/AgeUnit"
        },
        "value": {
          "description": "The number of years/months/days that represents the person's age.",
          "type": "number",
          "format": "float",
          "minimum": 0.0,
          "exclusiveMinimum": true
        }
      },
      "required": [
        "unit",
        "value"
      ]
    },
    "AgeUnit": {
      "description": "Possible units for a person's age.",
      "type": "string",
      "enum": [
        "years",
        "months",
        "days"
      ],
      "default": "years",
      "x-ms-enum": {
        "name": "AgeUnit",
        "modelAsString": true
      }
    },
    "Area": {
      "description": "A geographical area, expressed as a `Circle` geometry represented using a `GeoJSON Feature` (see [GeoJSON spec](https://tools.ietf.org/html/rfc7946)).",
      "type": "object",
      "properties": {
        "type": {
          "description": "`GeoJSON` type.",
          "type": "string",
          "enum": [
            "Feature"
          ],
          "x-ms-enum": {
            "name": "GeoJSONType",
            "modelAsString": true
          }
        },
        "geometry": {
          "description": "`GeoJSON` geometry, representing the area circle's center.",
          "type": "object",
          "properties": {
            "type": {
              "description": "`GeoJSON` geometry type.",
              "type": "string",
              "enum": [
                "Point"
              ],
              "x-ms-enum": {
                "name": "GeoJSONGeometryType",
                "modelAsString": true
              }
            },
            "coordinates": {
              "description": "Coordinates of the area circle's center, represented according to the `GeoJSON` standard. <br />This is an array of 2 decimal numbers, longitude and latitude (precisely in this order).",
              "type": "array",
              "items": {
                "type": "number",
                "format": "float"
              },
              "minItems": 2,
              "maxItems": 2
            }
          },
          "required": [
            "type",
            "coordinates"
          ]
        },
        "properties": {
          "description": "`GeoJSON` object properties.",
          "type": "object",
          "properties": {
            "subType": {
              "description": "`GeoJSON` object sub-type.",
              "type": "string",
              "enum": [
                "Circle"
              ],
              "x-ms-enum": {
                "name": "GeoJSONPropertiesSubType",
                "modelAsString": true
              }
            },
            "radius": {
              "description": "The radius of the area's circle, in meters.",
              "type": "number",
              "format": "double",
              "minimum": 0.0,
              "exclusiveMinimum": true
            }
          },
          "required": [
            "subType",
            "radius"
          ]
        }
      },
      "required": [
        "type",
        "geometry",
        "properties"
      ]
    },
    "ClinicalCodedElement": {
      "description": "A piece of clinical information, expressed as a code in a clinical coding system.",
      "type": "object",
      "properties": {
        "system": {
          "description": "The clinical coding system, e.g. ICD-10, SNOMED-CT, UMLS.",
          "type": "string"
        },
        "code": {
          "description": "The code within the given clinical coding system.",
          "type": "string"
        },
        "name": {
          "description": "The name of this coded concept in the coding system.",
          "type": "string"
        },
        "value": {
          "description": "A value associated with the code within the given clinical coding system.",
          "type": "string"
        }
      },
      "required": [
        "system",
        "code"
      ]
    },
    "ClinicalDocumentType": {
      "description": "The type of the clinical document.",
      "type": "string",
      "enum": [
        "consultation",
        "dischargeSummary",
        "historyAndPhysical",
        "procedure",
        "progress",
        "imaging",
        "laboratory",
        "pathology"
      ],
      "x-ms-enum": {
        "name": "ClinicalDocumentType",
        "modelAsString": true
      }
    },
    "ClinicalNoteEvidence": {
      "description": "A piece of evidence from a clinical note (text document).",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier of the document containing the evidence.",
          "type": "string"
        },
        "text": {
          "description": "The actual text span which is evidence for the inference.",
          "type": "string"
        },
        "offset": {
          "description": "The start index of the evidence text span in the document (0 based).",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "length": {
          "description": "The length of the evidence text span.",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        }
      },
      "required": [
        "id",
        "offset",
        "length"
      ]
    },
    "ClinicalTrialAcceptedGender": {
      "description": "Gender definitions as accepted by clinical trials.",
      "type": "string",
      "enum": [
        "female",
        "male"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialAcceptedGender",
        "modelAsString": true
      }
    },
    "ClinicalTrialDemographics": {
      "description": "Demographic criteria for a clinical trial.",
      "type": "object",
      "properties": {
        "acceptedGenders": {
          "description": "A list of genders accepted by a clinical trial.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialAcceptedGender"
          },
          "minItems": 1
        },
        "acceptedAgeRange": {
          "description": "A definition of the range of ages accepted by a clinical trial. Contains a minimum age and/or a maximum age.",
          "type": "object",
          "properties": {
            "minimumAge": {
              "$ref": "#/definitions/Age"
            },
            "maximumAge": {
              "$ref": "#/definitions/Age"
            }
          }
        }
      }
    },
    "ClinicalTrialDetails": {
      "description": "A description of a clinical trial.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A given identifier for the clinical trial. Has to be unique within a list of clinical trials.",
          "type": "string",
          "minLength": 1
        },
        "eligibilityCriteriaText": {
          "description": "The eligibility criteria of the clinical trial (inclusion and exclusion), given as text.",
          "type": "string"
        },
        "demographics": {
          "$ref": "#/definitions/ClinicalTrialDemographics"
        },
        "metadata": {
          "$ref": "#/definitions/ClinicalTrialMetadata"
        }
      },
      "required": [
        "id",
        "metadata"
      ]
    },
    "ClinicalTrialMetadata": {
      "description": "Trial data which is of interest to the potential participant.",
      "type": "object",
      "properties": {
        "phases": {
          "description": "Phases which are relevant for the clinical trial. <br />Each clinical trial can be in a certain phase or in multiple phases.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialPhase"
          }
        },
        "studyType": {
          "$ref": "#/definitions/ClinicalTrialStudyType"
        },
        "recruitmentStatus": {
          "$ref": "#/definitions/ClinicalTrialRecruitmentStatus"
        },
        "conditions": {
          "description": "Medical conditions and their synonyms which are relevant for the clinical trial, given as strings.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "sponsors": {
          "description": "Sponsors/collaborators involved with the trial.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contacts": {
          "description": "Contact details of the trial administrators, for patients that want to participate in the trial.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactDetails"
          }
        },
        "facilities": {
          "description": "Research facilities where the clinical trial is conducted.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialResearchFacility"
          }
        }
      },
      "required": [
        "conditions"
      ]
    },
    "ClinicalTrialPhase": {
      "description": "Possible phases of a clinical trial.",
      "type": "string",
      "enum": [
        "notApplicable",
        "earlyPhase1",
        "phase1",
        "phase2",
        "phase3",
        "phase4"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialPhase",
        "modelAsString": true
      }
    },
    "ClinicalTrialPurpose": {
      "description": "Possible purposes of a clinical trial.",
      "type": "string",
      "enum": [
        "notApplicable",
        "screening",
        "diagnostic",
        "prevention",
        "healthServicesResearch",
        "treatment",
        "deviceFeasibility",
        "supportiveCare",
        "basicScience",
        "other"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialPurpose",
        "modelAsString": true
      }
    },
    "ClinicalTrialRecruitmentStatus": {
      "description": "Possible recruitment status of a clinical trial.",
      "type": "string",
      "enum": [
        "unknownStatus",
        "notYetRecruiting",
        "recruiting",
        "enrollingByInvitation"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialRecruitmentStatus",
        "modelAsString": true
      }
    },
    "ClinicalTrialRegistryFilter": {
      "description": "A filter defining a subset of clinical trials from a given clinical trial registry (e.g. clinicaltrials.gov).",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Trials with any of the given medical conditions will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the medical conditions.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "studyTypes": {
          "description": "Trials with any of the given study types will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the study types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialStudyType"
          }
        },
        "recruitmentStatuses": {
          "description": "Trials with any of the given recruitment statuses will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the recruitment statuses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialRecruitmentStatus"
          }
        },
        "sponsors": {
          "description": "Trials with any of the given sponsors will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the sponsors.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phases": {
          "description": "Trials with any of the given phases will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the phases.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialPhase"
          }
        },
        "purposes": {
          "description": "Trials with any of the given purposes will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the purposes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialPurpose"
          }
        },
        "ids": {
          "description": "Trials with any of the given identifiers will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the trial identifiers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "description": "Trials with any of the given sources will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the sources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialSource"
          }
        },
        "facilityNames": {
          "description": "Trials with any of the given facility names will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the trial facility names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "facilityLocations": {
          "description": "Trials with any of the given facility locations will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the trial facility locations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Location"
          }
        },
        "facilityAreas": {
          "description": "Trials with any of the given facility area boundaries will be included in the selection (provided that other limitations are satisfied). Leaving this list empty will not limit the trial facility area boundaries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Area"
          }
        }
      }
    },
    "ClinicalTrialResearchFacility": {
      "description": "Details of a research facility where a clinical trial is conducted.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "name": {
              "description": "The facility's name.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        },
        {
          "$ref": "#/definitions/Location"
        }
      ]
    },
    "ClinicalTrialSource": {
      "description": "Possible sources of a clinical trial.",
      "type": "string",
      "enum": [
        "custom",
        "clinicaltrials.gov"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialSource",
        "modelAsString": true
      }
    },
    "ClinicalTrialStudyType": {
      "description": "Possible study types of a clinical trial.",
      "type": "string",
      "enum": [
        "interventional",
        "observational",
        "expandedAccess",
        "patientRegistries"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialStudyType",
        "modelAsString": true
      }
    },
    "ContactDetails": {
      "description": "A person's contact details.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The person's name.",
          "type": "string"
        },
        "email": {
          "description": "The person's email.",
          "type": "string",
          "format": "email"
        },
        "phone": {
          "description": "A person's phone number.",
          "type": "string"
        }
      }
    },
    "DocumentContent": {
      "description": "The content of the patient document.",
      "type": "object",
      "properties": {
        "sourceType": {
          "description": "The type of the content's source. <br />In case the source type is 'inline', the content is given as a string (for instance, text). <br />In case the source type is 'reference', the content is given as a URI.",
          "type": "string",
          "enum": [
            "inline",
            "reference"
          ],
          "x-ms-enum": {
            "name": "DocumentContentSourceType",
            "modelAsString": true
          }
        },
        "value": {
          "description": "The content of the document, given either inline (as a string) or as a reference (URI).",
          "type": "string"
        }
      },
      "required": [
        "sourceType",
        "value"
      ]
    },
    "DocumentType": {
      "description": "The type of the patient document, such as 'note' (text document) or 'fhirBundle' (FHIR JSON document).",
      "type": "string",
      "enum": [
        "note",
        "fhirBundle",
        "dicom",
        "genomicSequencing"
      ],
      "x-ms-enum": {
        "name": "DocumentType",
        "modelAsString": true
      }
    },
    "Error": {
      "description": "Error information.",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "A human-readable error message.",
          "type": "string"
        },
        "target": {
          "description": "Target of the particular error (e.g., the name of the property in error)",
          "type": "string"
        },
        "details": {
          "description": "A list of related errors that occurred during the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "ErrorResponse": {
      "description": "Error response object.",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "ExtendedClinicalCodedElement": {
      "description": "A piece of clinical information, expressed as a code in a clinical coding system, extended by semantic information.",
      "allOf": [
        {
          "$ref": "#/definitions/ClinicalCodedElement"
        },
        {
          "type": "object",
          "properties": {
            "semanticType": {
              "description": "The [UMLS semantic type](https://www.nlm.nih.gov/research/umls/META3_current_semantic_types.html) associated with the coded concept.",
              "type": "string"
            },
            "category": {
              "description": "The bio-medical category related to the coded concept, e.g. Diagnosis, Symptom, Medication, Examination.",
              "type": "string"
            }
          }
        }
      ]
    },
    "Inference": {
      "description": "An inference made by the model regarding a patient.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the inference, as relevant for the given inference type.",
          "type": "string"
        },
        "description": {
          "description": "The description corresponding to the inference value.",
          "type": "string"
        },
        "confidenceScore": {
          "description": "Confidence score for this inference.",
          "type": "number",
          "format": "float",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "value"
      ]
    },
    "InferenceEvidence": {
      "description": "A piece of evidence corresponding to an inference.",
      "type": "object",
      "properties": {
        "patientDataEvidence": {
          "$ref": "#/definitions/ClinicalNoteEvidence"
        },
        "patientInfoEvidence": {
          "$ref": "#/definitions/ClinicalCodedElement"
        },
        "importance": {
          "description": "A value indicating how important this piece of evidence is for the inference.",
          "type": "number",
          "format": "float",
          "minimum": 0,
          "maximum": 1
        }
      }
    },
    "InnerError": {
      "description": "An object containing more specific information about the error.",
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "Error message.",
          "type": "string"
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "JobStatus": {
      "description": "The status of the processing job.",
      "type": "string",
      "enum": [
        "notStarted",
        "running",
        "succeeded",
        "failed",
        "partiallyCompleted"
      ],
      "x-ms-enum": {
        "name": "JobStatus",
        "modelAsString": true
      }
    },
    "Location": {
      "description": "A location given as a combination of city/state/country. It could specify a city, a state or a country.<br />In case a city is specified, either state + country or country (for countries where there are no states) should be added. In case a state is specified (without a city), country should be added.",
      "type": "object",
      "properties": {
        "city": {
          "description": "City name.",
          "type": "string"
        },
        "state": {
          "description": "State name.",
          "type": "string"
        },
        "country": {
          "description": "Country name.",
          "type": "string"
        }
      },
      "required": [
        "country"
      ]
    },
    "ModelConfiguration": {
      "description": "General configuration common to all models.",
      "type": "object",
      "properties": {
        "verbose": {
          "description": "An indication whether the model should produce verbose output.",
          "type": "boolean",
          "default": false
        },
        "includeEvidence": {
          "description": "An indication whether the model's output should include evidence for the inferences.",
          "type": "boolean",
          "default": true
        }
      }
    },
    "ModelVersion": {
      "description": "The version of the model used for inference, expressed as the model date.",
      "type": "string",
      "format": "date"
    },
    "NeededClinicalInfo": {
      "description": "Clinical information which is needed to provide better trial matching results for the patient.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExtendedClinicalCodedElement"
      }
    },
    "OncoPhenotypeInference": {
      "description": "An inference made by the Onco Phenotype model regarding a patient.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/definitions/OncoPhenotypeInferenceType"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/Inference"
        },
        {
          "type": "object",
          "properties": {
            "evidence": {
              "description": "The evidence corresponding to the inference value.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/InferenceEvidence"
              }
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "caseId": {
              "description": "An identifier for a clinical case, if there are multiple clinical cases regarding the same patient.",
              "type": "string"
            }
          }
        }
      ]
    },
    "OncoPhenotypeInferenceType": {
      "description": "The type of the Onco Phenotype inference.",
      "type": "string",
      "enum": [
        "tumorSite",
        "histology",
        "clinicalStageT",
        "clinicalStageN",
        "clinicalStageM",
        "pathologicStageT",
        "pathologicStageN",
        "pathologicStageM"
      ],
      "x-ms-enum": {
        "name": "OncoPhenotypeInferenceType",
        "modelAsString": true
      }
    },
    "OncoPhenotypeModelConfiguration": {
      "description": "Configuration affecting the Onco Phenotype model's inference.",
      "allOf": [
        {
          "$ref": "#/definitions/ModelConfiguration"
        },
        {
          "type": "object",
          "properties": {
            "inferenceTypes": {
              "description": "A list of inference types to be inferred for the current request. <br />This could be used if only part of the Onco Phenotype inferences are required. If this list is omitted or empty, the model will return all the inference types.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/OncoPhenotypeInferenceType"
              }
            },
            "checkForCancerCase": {
              "description": "An indication whether to perform a preliminary step on the patient's documents to determine whether they relate to a Cancer case.",
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "OncoPhenotypePatientResult": {
      "description": "The results of the model's work for a single patient.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier given for the patient in the request.",
          "type": "string"
        },
        "inferences": {
          "description": "The model's inferences for the given patient.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OncoPhenotypeInference"
          }
        }
      },
      "required": [
        "id",
        "inferences"
      ]
    },
    "OncoPhenotypeRequest": {
      "description": "The body of the Onco Phenotype request.",
      "allOf": [
        {
          "$ref": "#/definitions/Request"
        },
        {
          "type": "object",
          "properties": {
            "configuration": {
              "$ref": "#/definitions/OncoPhenotypeModelConfiguration"
            }
          }
        }
      ]
    },
    "OncoPhenotypeResponse": {
      "description": "The response for the Onco Phenotype request.",
      "allOf": [
        {
          "$ref": "#/definitions/Response"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "$ref": "#/definitions/OncoPhenotypeResults"
            }
          }
        }
      ]
    },
    "OncoPhenotypeResults": {
      "description": "The inference results for the Onco Phenotype request.",
      "type": "object",
      "properties": {
        "patients": {
          "description": "Results for the patients given in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OncoPhenotypePatientResult"
          }
        },
        "modelVersion": {
          "$ref": "#/definitions/ModelVersion"
        }
      },
      "required": [
        "patients",
        "modelVersion"
      ]
    },
    "Patient": {
      "description": "A patient record, including their clinical information and data.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A given identifier for the patient. Has to be unique across all patients in a single request.",
          "type": "string",
          "minLength": 1
        },
        "info": {
          "$ref": "#/definitions/PatientInfo"
        },
        "data": {
          "description": "Patient unstructured clinical data, given as documents.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PatientDocument"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "PatientDocument": {
      "description": "A clinical document related to a patient. Document here is in the wide sense - not just a text document (note).",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/DocumentType"
        },
        "clinicalType": {
          "$ref": "#/definitions/ClinicalDocumentType"
        },
        "id": {
          "description": "A given identifier for the document. Has to be unique across all documents for a single patient.",
          "type": "string",
          "minLength": 1
        },
        "language": {
          "description": "A 2 letter ISO 639-1 representation of the language of the document.",
          "type": "string"
        },
        "createdDateTime": {
          "description": "The date and time when the document was created.",
          "type": "string",
          "format": "date-time"
        },
        "content": {
          "$ref": "#/definitions/DocumentContent"
        }
      },
      "required": [
        "type",
        "id",
        "content"
      ]
    },
    "PatientInfo": {
      "description": "Patient structured information, including demographics and known structured clinical information.",
      "type": "object",
      "properties": {
        "gender": {
          "description": "The patient's gender.",
          "type": "string",
          "enum": [
            "female",
            "male",
            "unspecified"
          ],
          "x-ms-enum": {
            "name": "PatientInfoGender",
            "modelAsString": true
          }
        },
        "birthDate": {
          "description": "The patient's date of birth.",
          "type": "string",
          "format": "date"
        },
        "clinicalInfo": {
          "description": "Known clinical information for the patient, structured.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalCodedElement"
          }
        }
      }
    },
    "Request": {
      "description": "The generic part of the Health Decision Support request, common to all models.",
      "type": "object",
      "properties": {
        "patients": {
          "description": "The list of patients, including their clinical information and data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Patient"
          }
        }
      },
      "required": [
        "patients"
      ]
    },
    "Response": {
      "description": "The generic part of the Health Decision Support response, common to all models.",
      "type": "object",
      "properties": {
        "jobId": {
          "description": "A processing job identifier.",
          "type": "string"
        },
        "createdDateTime": {
          "description": "The date and time when the processing job was created.",
          "type": "string",
          "format": "date-time"
        },
        "expirationDateTime": {
          "description": "The date and time when the processing job is set to expire.",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdateDateTime": {
          "description": "The date and time when the processing job was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/JobStatus"
        },
        "errors": {
          "description": "An array of errors, if any errors occurred during the processing job.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      },
      "required": [
        "jobId",
        "createdDateTime",
        "expirationDateTime",
        "lastUpdateDateTime",
        "status"
      ]
    },
    "TrialMatcherInference": {
      "description": "An inference made by the Trial Matcher model regarding a patient.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/definitions/TrialMatcherInferenceType"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/Inference"
        },
        {
          "type": "object",
          "properties": {
            "evidence": {
              "description": "The evidence corresponding to the inference value.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TrialMatcherInferenceEvidence"
              }
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the clinical trial.",
              "type": "string",
              "minLength": 1
            },
            "source": {
              "$ref": "#/definitions/ClinicalTrialSource"
            },
            "metadata": {
              "$ref": "#/definitions/ClinicalTrialMetadata"
            }
          }
        }
      ]
    },
    "TrialMatcherInferenceEvidence": {
      "description": "A piece of evidence corresponding to a Trial Matcher inference.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "eligibilityCriteriaEvidence": {
              "description": "A piece of evidence from the eligibility criteria text of a clinical trial.",
              "type": "string"
            }
          }
        },
        {
          "$ref": "#/definitions/InferenceEvidence"
        }
      ]
    },
    "TrialMatcherInferenceType": {
      "description": "The type of the Trial Matcher inference.",
      "type": "string",
      "enum": [
        "trialEligibility"
      ],
      "x-ms-enum": {
        "name": "TrialMatcherInferenceType",
        "modelAsString": true
      }
    },
    "TrialMatcherModelConfiguration": {
      "description": "Configuration affecting the Trial Matcher model's inference.",
      "allOf": [
        {
          "$ref": "#/definitions/ModelConfiguration"
        },
        {
          "type": "object",
          "properties": {
            "clinicalTrials": {
              "description": "The clinical trials that the patient(s) should be matched to. <br />The trial selection can be given as a list of custom clinical trials and/or a list of filters to known clinical trial registries. In case both are given, the resulting trial set is a union of the two sets.",
              "type": "object",
              "properties": {
                "customTrials": {
                  "description": "A list of clinical trials.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ClinicalTrialDetails"
                  },
                  "minItems": 1
                },
                "registryFilters": {
                  "description": "A list of filters, each one creating a selection of trials from a given clinical trial registry.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ClinicalTrialRegistryFilter"
                  },
                  "minItems": 1
                }
              }
            }
          },
          "required": [
            "clinicalTrials"
          ]
        }
      ]
    },
    "TrialMatcherPatientResult": {
      "description": "The results of the model's work for a single patient.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier given for the patient in the request.",
          "type": "string"
        },
        "inferences": {
          "description": "The model's inferences for the given patient.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrialMatcherInference"
          }
        },
        "neededClinicalInfo": {
          "$ref": "#/definitions/NeededClinicalInfo"
        }
      },
      "required": [
        "id",
        "inferences"
      ]
    },
    "TrialMatcherRequest": {
      "description": "The body of the Trial Matcher request.",
      "allOf": [
        {
          "$ref": "#/definitions/Request"
        },
        {
          "type": "object",
          "properties": {
            "configuration": {
              "$ref": "#/definitions/TrialMatcherModelConfiguration"
            }
          }
        }
      ]
    },
    "TrialMatcherResponse": {
      "description": "The response for the Trial Matcher request.",
      "allOf": [
        {
          "$ref": "#/definitions/Response"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "$ref": "#/definitions/TrialMatcherResults"
            }
          }
        }
      ]
    },
    "TrialMatcherResults": {
      "description": "The inference results for the Trial Matcher request.",
      "type": "object",
      "properties": {
        "patients": {
          "description": "Results for the patients given in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrialMatcherPatientResult"
          }
        },
        "modelVersion": {
          "$ref": "#/definitions/ModelVersion"
        },
        "knowledgeGraphLastUpdateDate": {
          "description": "The date when the clinical trials knowledge graph was last updated.",
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "patients",
        "modelVersion"
      ]
    }
  },
  "parameters": {
    "Endpoint": {
      "name": "endpoint",
      "in": "path",
      "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).",
      "required": true,
      "type": "string",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "client"
    },
    "QueryApiVersion": {
      "name": "api-version",
      "in": "query",
      "description": "Requested API version.",
      "required": true,
      "type": "string",
      "enum": [
        "2022-01-01-preview"
      ],
      "x-ms-enum": {
        "name": "ApiVersion",
        "modelAsString": true
      },
      "x-ms-parameter-location": "client"
    },
    "RepeatabilityRequestId": {
      "name": "Repeatability-Request-ID",
      "in": "header",
      "description": "An optional header, one of two request headers required to facilitate the ability to retry requests without the server executing the request multiple times (see [OASIS Repeatable Requests Version 1.0](https://docs.oasis-open.org/odata/repeatable-requests/v1.0/cs01/repeatable-requests-v1.0-cs01.html#sec_RepeatabilityRequestID)). <br />The value should be an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs (see [RFC 4122](https://tools.ietf.org/html/rfc4122)).",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "RepeatabilityFirstSent": {
      "name": "Repeatability-First-Sent",
      "in": "header",
      "description": "An optional header, one of two request headers required to facilitate the ability to retry requests without the server executing the request multiple times (see [OASIS Repeatable Requests Version 1.0](https://docs.oasis-open.org/odata/repeatable-requests/v1.0/cs01/repeatable-requests-v1.0-cs01.html#sec_RepeatabilityFirstSent)). <br />This header is used to specify the date and time at which the request was first created. The value must be expressed using the IMF-fixdate form of HTTP-date as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231), e.g. `Mon, 03 Jan 2022 09:25:37 GMT`.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
