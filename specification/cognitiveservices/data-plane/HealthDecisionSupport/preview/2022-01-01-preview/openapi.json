{
  "swagger": "2.0",
  "info": {
    "title": "Health Decision Support API",
    "version": "2022-01-01-preview",
    "description": "Health Decision Support provides an API that serves decision support models, specific for Health & Life Sciences, that perform a decision support inference to be used by a human.",
    "x-cadl-generated": [
      {
        "emitter": "@azure-tools/cadl-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/healthdecisionsupport",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "required": true,
        "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).",
        "x-ms-skip-url-encoding": true,
        "x-ms-parameter-location": "method",
        "type": "string"
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Ocp-Apim-Subscription-Key"
    }
  },
  "tags": [
    {
      "name": "OncoPhenotype"
    },
    {
      "name": "TrialMatcher"
    }
  ],
  "paths": {
    "/oncophenotype/jobs": {
      "post": {
        "tags": [
          "OncoPhenotype"
        ],
        "operationId": "OncoPhenotype_CreateJob",
        "summary": "Create Onco Phenotype job",
        "description": "Creates an Onco Phenotype job with the given request body.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The body of an Onco Phenotype request.",
            "schema": {
              "$ref": "#/definitions/OncoPhenotypeRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Repeatability-Result": {
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Accepted",
                      "value": "accepted"
                    },
                    {
                      "name": "Rejected",
                      "value": "rejected"
                    }
                  ]
                }
              },
              "Operation-Location": {
                "description": "The location of an instance of OperationStatus",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SuccessfulOncoPhenotypeAnalyzeRequest": {
            "$ref": "./examples/SuccessfulOncoPhenotypeRequest.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/oncophenotype/jobs/{jobId}": {
      "get": {
        "tags": [
          "OncoPhenotype"
        ],
        "operationId": "OncoPhenotype_GetJob",
        "summary": "Get Onco Phenotype job details",
        "description": "Gets the status and details of the Onco Phenotype job.",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "description": "A processing job identifier.",
            "format": "uuid",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OncoPhenotypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SuccessfulOncoPhenotypeGetAnalyzeStatus": {
            "$ref": "./examples/SuccessfulOncoPhenotypeResponse.json"
          }
        }
      }
    },
    "/trialmatcher/jobs": {
      "post": {
        "tags": [
          "TrialMatcher"
        ],
        "operationId": "TrialMatcher_CreateJob",
        "summary": "Create Trial Matcher job",
        "description": "Creates a Trial Matcher job with the given request body.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The body of a Trial Matcher request.",
            "schema": {
              "$ref": "#/definitions/TrialMatcherRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Repeatability-Result": {
                "type": "string",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Accepted",
                      "value": "accepted"
                    },
                    {
                      "name": "Rejected",
                      "value": "rejected"
                    }
                  ]
                }
              },
              "Operation-Location": {
                "description": "The location of an instance of OperationStatus",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SuccessfulTrialMatcherAnalyzeRequest": {
            "$ref": "./examples/SuccessfulTrialMatcherRequest.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/trialmatcher/jobs/{jobId}": {
      "get": {
        "tags": [
          "TrialMatcher"
        ],
        "operationId": "TrialMatcher_GetJob",
        "summary": "Get Trial Matcher job details",
        "description": "Gets the status and details of the Trial Matcher job.",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "description": "A processing job identifier.",
            "format": "uuid",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TrialMatcherResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SuccessfulTrialMatcherGetAnalyzeStatus": {
            "$ref": "./examples/SuccessfulTrialMatcherResponse.json"
          }
        }
      }
    }
  },
  "definitions": {
    "Age": {
      "type": "object",
      "properties": {
        "unit": {
          "$ref": "#/definitions/AgeUnit",
          "description": "Possible units for a person's age."
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "The number of years/months/days that represents the person's age.",
          "minimum": 0
        }
      },
      "description": "A person's age, given as a number (value) and a unit (e.g. years, months)",
      "required": [
        "unit",
        "value"
      ]
    },
    "AgeUnit": {
      "type": "string",
      "description": "Age units, known values",
      "enum": [
        "years",
        "months",
        "days"
      ],
      "x-ms-enum": {
        "name": "AgeUnit",
        "modelAsString": true,
        "values": [
          {
            "name": "Years",
            "value": "years"
          },
          {
            "name": "Months",
            "value": "months"
          },
          {
            "name": "Days",
            "value": "days"
          }
        ]
      }
    },
    "AgeUnitKnownValues": {
      "type": "string",
      "description": "Age units, known values",
      "enum": [
        "years",
        "months",
        "days"
      ],
      "x-ms-enum": {
        "name": "AgeUnitKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Years",
            "value": "years"
          },
          {
            "name": "Months",
            "value": "months"
          },
          {
            "name": "Days",
            "value": "days"
          }
        ]
      }
    },
    "Area": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/GeoJsonType",
          "description": "`GeoJSON` type."
        },
        "geometry": {
          "$ref": "#/definitions/AreaGeometry",
          "description": "`GeoJSON` geometry, representing the area circle's center."
        },
        "properties": {
          "$ref": "#/definitions/AreaProperties",
          "description": "`GeoJSON` object properties."
        }
      },
      "description": "A geographical area, expressed as a `Circle` geometry represented using a `GeoJSON Feature` (see [GeoJSON spec](https://tools.ietf.org/html/rfc7946)).",
      "required": [
        "type",
        "geometry",
        "properties"
      ]
    },
    "AreaGeometry": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/GeoJsonGeometryType",
          "description": "`GeoJSON` geometry type."
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "x-cadl-name": "float32[]",
          "description": "Coordinates of the area circle's center, represented according to the `GeoJSON` standard.\nThis is an array of 2 decimal numbers, longitude and latitude (precisely in this order).",
          "minItems": 2,
          "maxItems": 2
        }
      },
      "description": "`GeoJSON` geometry, representing the area circle's center.",
      "required": [
        "type",
        "coordinates"
      ]
    },
    "AreaProperties": {
      "type": "object",
      "properties": {
        "subType": {
          "$ref": "#/definitions/GeoJsonPropertiesSubType",
          "description": "`GeoJSON` object sub-type."
        },
        "radius": {
          "type": "number",
          "format": "double",
          "description": "The radius of the area's circle, in meters.",
          "minimum": 0
        }
      },
      "description": "`GeoJSON` object properties.",
      "required": [
        "subType",
        "radius"
      ]
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Azure.Core.Foundations.Error[]",
          "description": "An array of details about specific errors that led to this reported error."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "description": "The error object.",
      "required": [
        "code",
        "message",
        "details"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "description": "A response containing error details.",
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      },
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "required": [
        "code"
      ]
    },
    "ClinicalCodedElement": {
      "type": "object",
      "properties": {
        "system": {
          "type": "string",
          "description": "The clinical coding system, e.g. ICD-10, SNOMED-CT, UMLS."
        },
        "code": {
          "type": "string",
          "description": "The code within the given clinical coding system."
        },
        "name": {
          "type": "string",
          "description": "The name of this coded concept in the coding system."
        },
        "value": {
          "type": "string",
          "description": "A value associated with the code within the given clinical coding system."
        }
      },
      "description": "A piece of clinical information, expressed as a code in a clinical coding system.",
      "required": [
        "system",
        "code"
      ]
    },
    "ClinicalDocumentType": {
      "type": "string",
      "description": "Clinical document type, known values.",
      "enum": [
        "consultation",
        "dischargeSummary",
        "historyAndPhysical",
        "procedure",
        "progress",
        "imaging",
        "laboratory",
        "pathology"
      ],
      "x-ms-enum": {
        "name": "ClinicalDocumentType",
        "modelAsString": true,
        "values": [
          {
            "name": "Consultation",
            "value": "consultation"
          },
          {
            "name": "DischargeSummary",
            "value": "dischargeSummary"
          },
          {
            "name": "HistoryAndPhysical",
            "value": "historyAndPhysical"
          },
          {
            "name": "Procedure",
            "value": "procedure"
          },
          {
            "name": "Progress",
            "value": "progress"
          },
          {
            "name": "Imaging",
            "value": "imaging"
          },
          {
            "name": "Laboratory",
            "value": "laboratory"
          },
          {
            "name": "Pathology",
            "value": "pathology"
          }
        ]
      }
    },
    "ClinicalDocumentTypeKnownValues": {
      "type": "string",
      "description": "Clinical document type, known values.",
      "enum": [
        "consultation",
        "dischargeSummary",
        "historyAndPhysical",
        "procedure",
        "progress",
        "imaging",
        "laboratory",
        "pathology"
      ],
      "x-ms-enum": {
        "name": "ClinicalDocumentTypeKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Consultation",
            "value": "consultation"
          },
          {
            "name": "DischargeSummary",
            "value": "dischargeSummary"
          },
          {
            "name": "HistoryAndPhysical",
            "value": "historyAndPhysical"
          },
          {
            "name": "Procedure",
            "value": "procedure"
          },
          {
            "name": "Progress",
            "value": "progress"
          },
          {
            "name": "Imaging",
            "value": "imaging"
          },
          {
            "name": "Laboratory",
            "value": "laboratory"
          },
          {
            "name": "Pathology",
            "value": "pathology"
          }
        ]
      }
    },
    "ClinicalNoteEvidence": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of the document containing the evidence."
        },
        "text": {
          "type": "string",
          "description": "The actual text span which is evidence for the inference."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The start index of the evidence text span in the document (0 based).",
          "minimum": 0
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the evidence text span.",
          "minimum": 1
        }
      },
      "description": "A piece of evidence from a clinical note (text document).",
      "required": [
        "id",
        "offset",
        "length"
      ]
    },
    "ClinicalTrialAcceptedGender": {
      "type": "string",
      "description": "Clinical trial accepted gender, known values",
      "enum": [
        "female",
        "male"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialAcceptedGender",
        "modelAsString": true,
        "values": [
          {
            "name": "Female",
            "value": "female"
          },
          {
            "name": "Male",
            "value": "male"
          }
        ]
      }
    },
    "ClinicalTrialAcceptedGenderKnownValues": {
      "type": "string",
      "description": "Clinical trial accepted gender, known values",
      "enum": [
        "female",
        "male"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialAcceptedGenderKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Female",
            "value": "female"
          },
          {
            "name": "Male",
            "value": "male"
          }
        ]
      }
    },
    "ClinicalTrialDemographics": {
      "type": "object",
      "properties": {
        "acceptedGenders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialAcceptedGender"
          },
          "x-cadl-name": "ClinicalTrialAcceptedGender[]",
          "description": "A list of genders accepted by a clinical trial.",
          "minItems": 1
        },
        "acceptedAgeRange": {
          "$ref": "#/definitions/ClinicalTrialDemographicsAcceptedAgeRange",
          "description": "A definition of the range of ages accepted by a clinical trial. Contains a minimum age and/or a maximum age."
        }
      },
      "description": "Demographic criteria for a clinical trial."
    },
    "ClinicalTrialDemographicsAcceptedAgeRange": {
      "type": "object",
      "properties": {
        "minimumAge": {
          "$ref": "#/definitions/Age",
          "description": "A person's age, given as a number (value) and a unit (e.g. years, months)"
        },
        "maximumAge": {
          "$ref": "#/definitions/Age",
          "description": "A person's age, given as a number (value) and a unit (e.g. years, months)"
        }
      },
      "description": "A definition of the range of ages accepted by a clinical trial. Contains a minimum age and/or a maximum age."
    },
    "ClinicalTrialDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A given identifier for the clinical trial. Has to be unique within a list of clinical trials.",
          "minLength": 1
        },
        "eligibilityCriteriaText": {
          "type": "string",
          "description": "The eligibility criteria of the clinical trial (inclusion and exclusion), given as text."
        },
        "demographics": {
          "$ref": "#/definitions/ClinicalTrialDemographics",
          "description": "Demographic criteria for a clinical trial."
        },
        "metadata": {
          "$ref": "#/definitions/ClinicalTrialMetadata",
          "description": "Trial data which is of interest to the potential participant."
        }
      },
      "description": "A description of a clinical trial.",
      "required": [
        "id",
        "metadata"
      ]
    },
    "ClinicalTrialMetadata": {
      "type": "object",
      "properties": {
        "phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialPhase"
          },
          "x-cadl-name": "ClinicalTrialPhase[]",
          "description": "Phases which are relevant for the clinical trial.\nEach clinical trial can be in a certain phase or in multiple phases."
        },
        "studyType": {
          "$ref": "#/definitions/ClinicalTrialStudyType",
          "description": "Possible study types of a clinical trial."
        },
        "recruitmentStatus": {
          "$ref": "#/definitions/ClinicalTrialRecruitmentStatus",
          "description": "Possible recruitment status of a clinical trial."
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Medical conditions and their synonyms which are relevant for the clinical trial, given as strings.",
          "minItems": 1
        },
        "sponsors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Sponsors/collaborators involved with the trial."
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactDetails"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "ContactDetails[]",
          "description": "Contact details of the trial administrators, for patients that want to participate in the trial."
        },
        "facilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialResearchFacility"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "ClinicalTrialResearchFacility[]",
          "description": "Research facilities where the clinical trial is conducted."
        }
      },
      "description": "Trial data which is of interest to the potential participant.",
      "required": [
        "conditions"
      ]
    },
    "ClinicalTrialPhase": {
      "type": "string",
      "description": "Clinical trial, possible phases known values",
      "enum": [
        "notApplicable",
        "earlyPhase1",
        "phase1",
        "phase2",
        "phase3",
        "phase4"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialPhase",
        "modelAsString": true,
        "values": [
          {
            "name": "NotApplicable",
            "value": "notApplicable"
          },
          {
            "name": "EarlyPhase1",
            "value": "earlyPhase1"
          },
          {
            "name": "Phase1",
            "value": "phase1"
          },
          {
            "name": "Phase2",
            "value": "phase2"
          },
          {
            "name": "Phase3",
            "value": "phase3"
          },
          {
            "name": "Phase4",
            "value": "phase4"
          }
        ]
      }
    },
    "ClinicalTrialPhaseKnownValues": {
      "type": "string",
      "description": "Clinical trial, possible phases known values",
      "enum": [
        "notApplicable",
        "earlyPhase1",
        "phase1",
        "phase2",
        "phase3",
        "phase4"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialPhaseKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "NotApplicable",
            "value": "notApplicable"
          },
          {
            "name": "EarlyPhase1",
            "value": "earlyPhase1"
          },
          {
            "name": "Phase1",
            "value": "phase1"
          },
          {
            "name": "Phase2",
            "value": "phase2"
          },
          {
            "name": "Phase3",
            "value": "phase3"
          },
          {
            "name": "Phase4",
            "value": "phase4"
          }
        ]
      }
    },
    "ClinicalTrialPurpose": {
      "type": "string",
      "description": "Clinical trial, possible purposes, known values.",
      "enum": [
        "notApplicable",
        "screening",
        "diagnostic",
        "prevention",
        "healthServicesResearch",
        "treatment",
        "deviceFeasibility",
        "supportiveCare",
        "basicScience",
        "other"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialPurpose",
        "modelAsString": true,
        "values": [
          {
            "name": "NotApplicable",
            "value": "notApplicable"
          },
          {
            "name": "Screening",
            "value": "screening"
          },
          {
            "name": "Diagnostic",
            "value": "diagnostic"
          },
          {
            "name": "Prevention",
            "value": "prevention"
          },
          {
            "name": "HealthServicesResearch",
            "value": "healthServicesResearch"
          },
          {
            "name": "Treatment",
            "value": "treatment"
          },
          {
            "name": "DeviceFeasibility",
            "value": "deviceFeasibility"
          },
          {
            "name": "SupportiveCare",
            "value": "supportiveCare"
          },
          {
            "name": "BasicScience",
            "value": "basicScience"
          },
          {
            "name": "Other",
            "value": "other"
          }
        ]
      }
    },
    "ClinicalTrialPurposeKnownValues": {
      "type": "string",
      "description": "Clinical trial, possible purposes, known values.",
      "enum": [
        "notApplicable",
        "screening",
        "diagnostic",
        "prevention",
        "healthServicesResearch",
        "treatment",
        "deviceFeasibility",
        "supportiveCare",
        "basicScience",
        "other"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialPurposeKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "NotApplicable",
            "value": "notApplicable"
          },
          {
            "name": "Screening",
            "value": "screening"
          },
          {
            "name": "Diagnostic",
            "value": "diagnostic"
          },
          {
            "name": "Prevention",
            "value": "prevention"
          },
          {
            "name": "HealthServicesResearch",
            "value": "healthServicesResearch"
          },
          {
            "name": "Treatment",
            "value": "treatment"
          },
          {
            "name": "DeviceFeasibility",
            "value": "deviceFeasibility"
          },
          {
            "name": "SupportiveCare",
            "value": "supportiveCare"
          },
          {
            "name": "BasicScience",
            "value": "basicScience"
          },
          {
            "name": "Other",
            "value": "other"
          }
        ]
      }
    },
    "ClinicalTrialRecruitmentStatus": {
      "type": "string",
      "description": "Clinical trial, possible recruitment status, known values.",
      "enum": [
        "unknownStatus",
        "notYetRecruiting",
        "recruiting",
        "enrollingByInvitation"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialRecruitmentStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "UnknownStatus",
            "value": "unknownStatus"
          },
          {
            "name": "NotYetRecruiting",
            "value": "notYetRecruiting"
          },
          {
            "name": "Recruiting",
            "value": "recruiting"
          },
          {
            "name": "EnrollingByInvitation",
            "value": "enrollingByInvitation"
          }
        ]
      }
    },
    "ClinicalTrialRecruitmentStatusKnownValues": {
      "type": "string",
      "description": "Clinical trial, possible recruitment status, known values.",
      "enum": [
        "unknownStatus",
        "notYetRecruiting",
        "recruiting",
        "enrollingByInvitation"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialRecruitmentStatusKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "UnknownStatus",
            "value": "unknownStatus"
          },
          {
            "name": "NotYetRecruiting",
            "value": "notYetRecruiting"
          },
          {
            "name": "Recruiting",
            "value": "recruiting"
          },
          {
            "name": "EnrollingByInvitation",
            "value": "enrollingByInvitation"
          }
        ]
      }
    },
    "ClinicalTrialRegistryFilter": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Trials with any of the given medical conditions will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the medical conditions."
        },
        "studyTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialStudyType"
          },
          "x-cadl-name": "ClinicalTrialStudyType[]",
          "description": "Trials with any of the given study types will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the study types."
        },
        "recruitmentStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialRecruitmentStatus"
          },
          "x-cadl-name": "ClinicalTrialRecruitmentStatus[]",
          "description": "Trials with any of the given recruitment statuses will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the recruitment statuses."
        },
        "sponsors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Trials with any of the given sponsors will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the sponsors."
        },
        "phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialPhase"
          },
          "x-cadl-name": "ClinicalTrialPhase[]",
          "description": "Trials with any of the given phases will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the phases."
        },
        "purposes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialPurpose"
          },
          "x-cadl-name": "ClinicalTrialPurpose[]",
          "description": "Trials with any of the given purposes will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the purposes."
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Trials with any of the given identifiers will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the trial identifiers."
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialSource"
          },
          "x-cadl-name": "ClinicalTrialSource[]",
          "description": "Trials with any of the given sources will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the sources."
        },
        "facilityNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Trials with any of the given facility names will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the trial facility names."
        },
        "facilityLocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Location"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Location[]",
          "description": "Trials with any of the given facility locations will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the trial facility locations."
        },
        "facilityAreas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Area"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Area[]",
          "description": "Trials with any of the given facility area boundaries will be included in the selection (provided that other limitations are satisfied).\nLeaving this list empty will not limit the trial facility area boundaries."
        }
      },
      "description": "A filter defining a subset of clinical trials from a given clinical trial registry (e.g. clinicaltrials.gov)."
    },
    "ClinicalTrialResearchFacility": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The facility's name."
        },
        "city": {
          "type": "string",
          "description": "City name."
        },
        "state": {
          "type": "string",
          "description": "State name."
        },
        "country": {
          "type": "string",
          "description": "Country name."
        }
      },
      "description": "Details of a research facility where a clinical trial is conducted.",
      "required": [
        "name",
        "country"
      ]
    },
    "ClinicalTrialSource": {
      "type": "string",
      "description": "Clinical trial, possible sources, known values.",
      "enum": [
        "custom",
        "clinicaltrials.gov"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialSource",
        "modelAsString": true,
        "values": [
          {
            "name": "Custom",
            "value": "custom"
          },
          {
            "name": "ClinicaltrialsGov",
            "value": "clinicaltrials.gov"
          }
        ]
      }
    },
    "ClinicalTrialSourceKnownValues": {
      "type": "string",
      "description": "Clinical trial, possible sources, known values.",
      "enum": [
        "custom",
        "clinicaltrials.gov"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialSourceKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Custom",
            "value": "custom"
          },
          {
            "name": "ClinicaltrialsGov",
            "value": "clinicaltrials.gov"
          }
        ]
      }
    },
    "ClinicalTrialStudyType": {
      "type": "string",
      "description": "Clinical trial, possible study types, known values.",
      "enum": [
        "interventional",
        "observational",
        "expandedAccess",
        "patientRegistries"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialStudyType",
        "modelAsString": true,
        "values": [
          {
            "name": "Interventional",
            "value": "interventional"
          },
          {
            "name": "Observational",
            "value": "observational"
          },
          {
            "name": "ExpandedAccess",
            "value": "expandedAccess"
          },
          {
            "name": "PatientRegistries",
            "value": "patientRegistries"
          }
        ]
      }
    },
    "ClinicalTrialStudyTypeKnownValues": {
      "type": "string",
      "description": "Clinical trial, possible study types, known values.",
      "enum": [
        "interventional",
        "observational",
        "expandedAccess",
        "patientRegistries"
      ],
      "x-ms-enum": {
        "name": "ClinicalTrialStudyTypeKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Interventional",
            "value": "interventional"
          },
          {
            "name": "Observational",
            "value": "observational"
          },
          {
            "name": "ExpandedAccess",
            "value": "expandedAccess"
          },
          {
            "name": "PatientRegistries",
            "value": "patientRegistries"
          }
        ]
      }
    },
    "ClinicalTrials": {
      "type": "object",
      "properties": {
        "customTrials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialDetails"
          },
          "x-cadl-name": "ClinicalTrialDetails[]",
          "description": "A list of clinical trials.",
          "minItems": 1
        },
        "registryFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalTrialRegistryFilter"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "ClinicalTrialRegistryFilter[]",
          "description": "A list of filters, each one creating a selection of trials from a given\nclinical trial registry.",
          "minItems": 1
        }
      },
      "description": "The clinical trials that the patient(s) should be matched to. \nThe trial selection can be given as a list of custom clinical trials and/or a list of filters to known clinical trial registries.\nIn case both are given, the resulting trial set is a union of the two sets."
    },
    "ContactDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The person's name."
        },
        "email": {
          "type": "string",
          "description": "The person's email."
        },
        "phone": {
          "type": "string",
          "description": "A person's phone number."
        }
      },
      "description": "A person's contact details."
    },
    "DocumentContent": {
      "type": "object",
      "properties": {
        "sourceType": {
          "$ref": "#/definitions/DocumentContentSourceType",
          "description": "The type of the content's source.\nIn case the source type is 'inline', the content is given as a string (for instance, text).\nIn case the source type is 'reference', the content is given as a URI."
        },
        "value": {
          "type": "string",
          "description": "The content of the document, given either inline (as a string) or as a reference (URI)."
        }
      },
      "description": "The content of the patient document.",
      "required": [
        "sourceType",
        "value"
      ]
    },
    "DocumentContentSourceType": {
      "type": "string",
      "description": "Document content source, known values",
      "enum": [
        "inline",
        "reference"
      ],
      "x-ms-enum": {
        "name": "DocumentContentSourceType",
        "modelAsString": true,
        "values": [
          {
            "name": "Inline",
            "value": "inline"
          },
          {
            "name": "Reference",
            "value": "reference"
          }
        ]
      }
    },
    "DocumentContentSourceTypeKnownValues": {
      "type": "string",
      "description": "Document content source, known values",
      "enum": [
        "inline",
        "reference"
      ],
      "x-ms-enum": {
        "name": "DocumentContentSourceTypeKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Inline",
            "value": "inline"
          },
          {
            "name": "Reference",
            "value": "reference"
          }
        ]
      }
    },
    "DocumentType": {
      "type": "string",
      "description": "Document type, known values",
      "enum": [
        "note",
        "fhirBundle",
        "dicom",
        "genomicSequencing"
      ],
      "x-ms-enum": {
        "name": "DocumentType",
        "modelAsString": true,
        "values": [
          {
            "name": "Note",
            "value": "note"
          },
          {
            "name": "FhirBundle",
            "value": "fhirBundle"
          },
          {
            "name": "Dicom",
            "value": "dicom"
          },
          {
            "name": "GenomicSequencing",
            "value": "genomicSequencing"
          }
        ]
      }
    },
    "DocumentTypeKnownValues": {
      "type": "string",
      "description": "Document type, known values",
      "enum": [
        "note",
        "fhirBundle",
        "dicom",
        "genomicSequencing"
      ],
      "x-ms-enum": {
        "name": "DocumentTypeKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Note",
            "value": "note"
          },
          {
            "name": "FhirBundle",
            "value": "fhirBundle"
          },
          {
            "name": "Dicom",
            "value": "dicom"
          },
          {
            "name": "GenomicSequencing",
            "value": "genomicSequencing"
          }
        ]
      }
    },
    "ExtendedClinicalCodedElement": {
      "type": "object",
      "properties": {
        "system": {
          "type": "string",
          "description": "The clinical coding system, e.g. ICD-10, SNOMED-CT, UMLS."
        },
        "code": {
          "type": "string",
          "description": "The code within the given clinical coding system."
        },
        "name": {
          "type": "string",
          "description": "The name of this coded concept in the coding system."
        },
        "value": {
          "type": "string",
          "description": "A value associated with the code within the given clinical coding system."
        },
        "semanticType": {
          "type": "string",
          "description": "The [UMLS semantic type](https://www.nlm.nih.gov/research/umls/META3_current_semantic_types.html) associated with the coded concept."
        },
        "category": {
          "type": "string",
          "description": "The bio-medical category related to the coded concept, e.g. Diagnosis, Symptom, Medication, Examination."
        }
      },
      "description": "A piece of clinical information, expressed as a code in a clinical coding system, extended by semantic information.",
      "required": [
        "system",
        "code"
      ]
    },
    "GeoJsonGeometryType": {
      "type": "string",
      "description": "`GeoJSON` geometry type, known values.",
      "enum": [
        "Point"
      ],
      "x-ms-enum": {
        "name": "GeoJsonGeometryType",
        "modelAsString": true,
        "values": [
          {
            "name": "Point",
            "value": "Point"
          }
        ]
      }
    },
    "GeoJsonGeometryTypeKnownValues": {
      "type": "string",
      "description": "`GeoJSON` geometry type, known values.",
      "enum": [
        "Point"
      ],
      "x-ms-enum": {
        "name": "GeoJsonGeometryTypeKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Point",
            "value": "Point"
          }
        ]
      }
    },
    "GeoJsonPropertiesSubType": {
      "type": "string",
      "description": "`GeoJSON` object sub-type, known values",
      "enum": [
        "Circle"
      ],
      "x-ms-enum": {
        "name": "GeoJsonPropertiesSubType",
        "modelAsString": true,
        "values": [
          {
            "name": "Circle",
            "value": "Circle"
          }
        ]
      }
    },
    "GeoJsonPropertiesSubTypeKnownValues": {
      "type": "string",
      "description": "`GeoJSON` object sub-type, known values",
      "enum": [
        "Circle"
      ],
      "x-ms-enum": {
        "name": "GeoJsonPropertiesSubTypeKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Circle",
            "value": "Circle"
          }
        ]
      }
    },
    "GeoJsonType": {
      "type": "string",
      "description": "`GeoJSON` type, known values",
      "enum": [
        "Feature"
      ],
      "x-ms-enum": {
        "name": "GeoJsonType",
        "modelAsString": true,
        "values": [
          {
            "name": "Feature",
            "value": "Feature"
          }
        ]
      }
    },
    "GeoJsonTypeKnownValues": {
      "type": "string",
      "description": "`GeoJSON` type, known values",
      "enum": [
        "Feature"
      ],
      "x-ms-enum": {
        "name": "GeoJsonTypeKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Feature",
            "value": "Feature"
          }
        ]
      }
    },
    "Inference": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the inference, as relevant for the given inference type."
        },
        "description": {
          "type": "string",
          "description": "The description corresponding to the inference value."
        },
        "confidenceScore": {
          "type": "number",
          "format": "float",
          "description": "Confidence score for this inference.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "description": "An inference made by the model regarding a patient.",
      "required": [
        "value"
      ]
    },
    "InferenceEvidence": {
      "type": "object",
      "properties": {
        "patientDataEvidence": {
          "$ref": "#/definitions/ClinicalNoteEvidence",
          "description": "A piece of evidence from a clinical note (text document)."
        },
        "patientInfoEvidence": {
          "$ref": "#/definitions/ClinicalCodedElement",
          "description": "A piece of clinical information, expressed as a code in a clinical coding\nsystem."
        },
        "importance": {
          "type": "number",
          "format": "float",
          "description": "A value indicating how important this piece of evidence is for the inference.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "description": "A piece of evidence corresponding to an inference."
    },
    "JobStatus": {
      "type": "string",
      "enum": [
        "notStarted",
        "running",
        "succeeded",
        "failed",
        "partiallyCompleted"
      ],
      "x-ms-enum": {
        "name": "JobStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "NotStarted",
            "value": "notStarted"
          },
          {
            "name": "Running",
            "value": "running"
          },
          {
            "name": "Succeeded",
            "value": "succeeded"
          },
          {
            "name": "Failed",
            "value": "failed"
          },
          {
            "name": "PartiallyCompleted",
            "value": "partiallyCompleted"
          }
        ]
      }
    },
    "JobStatusKnownValues": {
      "type": "string",
      "enum": [
        "notStarted",
        "running",
        "succeeded",
        "failed",
        "partiallyCompleted"
      ],
      "x-ms-enum": {
        "name": "JobStatusKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "NotStarted",
            "value": "notStarted"
          },
          {
            "name": "Running",
            "value": "running"
          },
          {
            "name": "Succeeded",
            "value": "succeeded"
          },
          {
            "name": "Failed",
            "value": "failed"
          },
          {
            "name": "PartiallyCompleted",
            "value": "partiallyCompleted"
          }
        ]
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "description": "City name."
        },
        "state": {
          "type": "string",
          "description": "State name."
        },
        "country": {
          "type": "string",
          "description": "Country name."
        }
      },
      "description": "A location given as a combination of city/state/country. It could specify a\ncity, a state or a country.<br />In case a city is specified, either state +\ncountry or country (for countries where there are no states) should be added.\nIn case a state is specified (without a city), country should be added.",
      "required": [
        "country"
      ]
    },
    "ModelConfiguration": {
      "type": "object",
      "properties": {
        "verbose": {
          "type": "boolean",
          "description": "An indication whether the model should produce verbose output.",
          "default": false
        },
        "includeEvidence": {
          "type": "boolean",
          "description": "An indication whether the model's output should include evidence for the inferences.",
          "default": true
        }
      },
      "description": "General configuration common to all models."
    },
    "ModelVersion": {
      "type": "string",
      "format": "date",
      "description": "The version of the model used for inference, expressed as the model date."
    },
    "NeededClinicalInfo": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExtendedClinicalCodedElement"
      },
      "x-ms-identifiers": [],
      "description": "Clinical information which is needed to provide better trial matching results for the patient."
    },
    "OncoPhenotypeInference": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/OncoPhenotypeInferenceType",
          "description": "The type of the Onco Phenotype inference"
        },
        "value": {
          "type": "string",
          "description": "The value of the inference, as relevant for the given inference type."
        },
        "description": {
          "type": "string",
          "description": "The description corresponding to the inference value."
        },
        "confidenceScore": {
          "type": "number",
          "format": "float",
          "description": "Confidence score for this inference.",
          "minimum": 0,
          "maximum": 1
        },
        "evidence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InferenceEvidence"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "InferenceEvidence[]",
          "description": "The evidence corresponding to the inference value."
        },
        "caseId": {
          "type": "string",
          "description": "An identifier for a clinical case, if there are multiple clinical cases regarding the same patient."
        }
      },
      "description": "An inference made by the Onco Phenotype model regarding a patient.",
      "required": [
        "type",
        "value"
      ]
    },
    "OncoPhenotypeInferenceType": {
      "type": "string",
      "enum": [
        "tumorSite",
        "histology",
        "clinicalStageT",
        "clinicalStageN",
        "clinicalStageM",
        "pathologicStageT",
        "pathologicStageN",
        "pathologicStageM"
      ],
      "x-ms-enum": {
        "name": "OncoPhenotypeInferenceType",
        "modelAsString": true,
        "values": [
          {
            "name": "TumorSite",
            "value": "tumorSite"
          },
          {
            "name": "Histology",
            "value": "histology"
          },
          {
            "name": "ClinicalStageT",
            "value": "clinicalStageT"
          },
          {
            "name": "ClinicalStageN",
            "value": "clinicalStageN"
          },
          {
            "name": "ClinicalStageM",
            "value": "clinicalStageM"
          },
          {
            "name": "PathologicStageT",
            "value": "pathologicStageT"
          },
          {
            "name": "PathologicStageN",
            "value": "pathologicStageN"
          },
          {
            "name": "PathologicStageM",
            "value": "pathologicStageM"
          }
        ]
      }
    },
    "OncoPhenotypeInferenceTypeKnownValues": {
      "type": "string",
      "enum": [
        "tumorSite",
        "histology",
        "clinicalStageT",
        "clinicalStageN",
        "clinicalStageM",
        "pathologicStageT",
        "pathologicStageN",
        "pathologicStageM"
      ],
      "x-ms-enum": {
        "name": "OncoPhenotypeInferenceTypeKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "TumorSite",
            "value": "tumorSite"
          },
          {
            "name": "Histology",
            "value": "histology"
          },
          {
            "name": "ClinicalStageT",
            "value": "clinicalStageT"
          },
          {
            "name": "ClinicalStageN",
            "value": "clinicalStageN"
          },
          {
            "name": "ClinicalStageM",
            "value": "clinicalStageM"
          },
          {
            "name": "PathologicStageT",
            "value": "pathologicStageT"
          },
          {
            "name": "PathologicStageN",
            "value": "pathologicStageN"
          },
          {
            "name": "PathologicStageM",
            "value": "pathologicStageM"
          }
        ]
      }
    },
    "OncoPhenotypeModelConfiguration": {
      "type": "object",
      "properties": {
        "inferenceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OncoPhenotypeInferenceType"
          },
          "x-cadl-name": "OncoPhenotypeInferenceType[]",
          "description": "A list of inference types to be inferred for the current request.\nThis could be used if only part of the Onco Phenotype inferences are required.\nIf this list is omitted or empty, the model will return all the inference types."
        },
        "checkForCancerCase": {
          "type": "boolean",
          "description": "An indication whether to perform a preliminary step on the patient's documents to determine whether they relate to a Cancer case.",
          "default": false
        }
      },
      "description": "Configuration affecting the Onco Phenotype model's inference.",
      "allOf": [
        {
          "$ref": "#/definitions/ModelConfiguration"
        }
      ]
    },
    "OncoPhenotypePatientResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier given for the patient in the request."
        },
        "inferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OncoPhenotypeInference"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "OncoPhenotypeInference[]",
          "description": "The model's inferences for the given patient."
        }
      },
      "description": "The results of the model's work for a single patient.",
      "required": [
        "id",
        "inferences"
      ]
    },
    "OncoPhenotypeRequest": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/OncoPhenotypeModelConfiguration",
          "description": "Configuration affecting the Onco Phenotype model's inference."
        }
      },
      "description": "The body of the Onco Phenotype request.",
      "allOf": [
        {
          "$ref": "#/definitions/Request"
        }
      ]
    },
    "OncoPhenotypeResponse": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "A processing job identifier.",
          "format": "uuid"
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the processing job was created."
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the processing job is set to expire."
        },
        "lastUpdateDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the processing job was last updated."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "The status of the processing job."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Azure.Core.Foundations.Error[]",
          "description": "An array of errors, if any errors occurred during the processing job."
        },
        "results": {
          "$ref": "#/definitions/OncoPhenotypeResults",
          "description": "The inference results for the Onco Phenotype request."
        }
      },
      "description": "The response for the Onco Phenotype request.",
      "required": [
        "jobId",
        "createdDateTime",
        "expirationDateTime",
        "lastUpdateDateTime",
        "status"
      ]
    },
    "OncoPhenotypeResults": {
      "type": "object",
      "properties": {
        "patients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OncoPhenotypePatientResult"
          },
          "x-cadl-name": "OncoPhenotypePatientResult[]",
          "description": "Results for the patients given in the request."
        },
        "modelVersion": {
          "$ref": "#/definitions/ModelVersion",
          "description": "The version of the model used for inference, expressed as the model date."
        }
      },
      "description": "The inference results for the Onco Phenotype request.",
      "required": [
        "patients",
        "modelVersion"
      ]
    },
    "Patient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A given identifier for the patient. Has to be unique across all patients in a single request.",
          "minLength": 1
        },
        "info": {
          "$ref": "#/definitions/PatientInfo",
          "description": "Patient structured information, including demographics and known structured clinical information."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PatientDocument"
          },
          "x-cadl-name": "PatientDocument[]",
          "description": "Patient unstructured clinical data, given as documents."
        }
      },
      "description": "A patient record, including their clinical information and data.",
      "required": [
        "id"
      ]
    },
    "PatientDocument": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/DocumentType",
          "description": "The type of the patient document, such as 'note' (text document) or 'fhirBundle' (FHIR JSON document)."
        },
        "clinicalType": {
          "$ref": "#/definitions/ClinicalDocumentType",
          "description": "The type of the clinical document."
        },
        "id": {
          "type": "string",
          "description": "A given identifier for the document. Has to be unique across all documents for a single patient.",
          "minLength": 1
        },
        "language": {
          "type": "string",
          "description": "A 2 letter ISO 639-1 representation of the language of the document."
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the document was created."
        },
        "content": {
          "$ref": "#/definitions/DocumentContent",
          "description": "The content of the patient document."
        }
      },
      "description": "A clinical document related to a patient. Document here is in the wide sense - not just a text document (note).",
      "required": [
        "type",
        "id",
        "content"
      ]
    },
    "PatientInfo": {
      "type": "object",
      "properties": {
        "gender": {
          "$ref": "#/definitions/PatientInfoGender",
          "description": "The patient's gender."
        },
        "birthDate": {
          "type": "string",
          "format": "date",
          "description": "The patient's date of birth."
        },
        "clinicalInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClinicalCodedElement"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "ClinicalCodedElement[]",
          "description": "Known clinical information for the patient, structured."
        }
      },
      "description": "Patient structured information, including demographics and known structured clinical information."
    },
    "PatientInfoGender": {
      "type": "string",
      "description": "Patient gender known values.",
      "enum": [
        "female",
        "male",
        "unspecified"
      ],
      "x-ms-enum": {
        "name": "PatientInfoGender",
        "modelAsString": true,
        "values": [
          {
            "name": "Female",
            "value": "female"
          },
          {
            "name": "Male",
            "value": "male"
          },
          {
            "name": "Unspecified",
            "value": "unspecified"
          }
        ]
      }
    },
    "PatientInfoGenderKnownValues": {
      "type": "string",
      "description": "Patient gender known values.",
      "enum": [
        "female",
        "male",
        "unspecified"
      ],
      "x-ms-enum": {
        "name": "PatientInfoGenderKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Female",
            "value": "female"
          },
          {
            "name": "Male",
            "value": "male"
          },
          {
            "name": "Unspecified",
            "value": "unspecified"
          }
        ]
      }
    },
    "QueryApiVersion": {
      "type": "string",
      "enum": [
        "2022-01-01-preview"
      ],
      "x-ms-enum": {
        "name": "QueryApiVersion",
        "modelAsString": true,
        "values": [
          {
            "name": "v2022_01_01_preview",
            "value": "2022-01-01-preview"
          }
        ]
      }
    },
    "RepeatabilityResult": {
      "type": "string",
      "enum": [
        "accepted",
        "rejected"
      ],
      "x-ms-enum": {
        "name": "RepeatabilityResult",
        "modelAsString": true,
        "values": [
          {
            "name": "Accepted",
            "value": "accepted"
          },
          {
            "name": "Rejected",
            "value": "rejected"
          }
        ]
      }
    },
    "RepeatabilityResultKnownValues": {
      "type": "string",
      "enum": [
        "accepted",
        "rejected"
      ],
      "x-ms-enum": {
        "name": "RepeatabilityResultKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "Accepted",
            "value": "accepted"
          },
          {
            "name": "Rejected",
            "value": "rejected"
          }
        ]
      }
    },
    "Request": {
      "type": "object",
      "properties": {
        "patients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Patient"
          },
          "x-cadl-name": "Patient[]",
          "description": "The list of patients, including their clinical information and data."
        }
      },
      "description": "The generic part of the Health Decision Support request, common to all models.",
      "required": [
        "patients"
      ]
    },
    "Response": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "A processing job identifier.",
          "format": "uuid"
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the processing job was created."
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the processing job is set to expire."
        },
        "lastUpdateDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the processing job was last updated."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "The status of the processing job."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Azure.Core.Foundations.Error[]",
          "description": "An array of errors, if any errors occurred during the processing job."
        }
      },
      "description": "The generic part of the Health Decision Support response, common to all models.",
      "required": [
        "jobId",
        "createdDateTime",
        "expirationDateTime",
        "lastUpdateDateTime",
        "status"
      ]
    },
    "SuccessfulPostJobResponse": {
      "type": "object",
      "properties": {},
      "description": "The request was accepted and a job was created."
    },
    "TrialMatcherInference": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/TrialMatcherInferenceType",
          "description": "The type of the Trial Matcher inference."
        },
        "value": {
          "type": "string",
          "description": "The value of the inference, as relevant for the given inference type."
        },
        "description": {
          "type": "string",
          "description": "The description corresponding to the inference value."
        },
        "confidenceScore": {
          "type": "number",
          "format": "float",
          "description": "Confidence score for this inference.",
          "minimum": 0,
          "maximum": 1
        },
        "evidence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrialMatcherInferenceEvidence"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "TrialMatcherInferenceEvidence[]",
          "description": "The evidence corresponding to the inference value."
        },
        "id": {
          "type": "string",
          "description": "The identifier of the clinical trial.",
          "minLength": 1
        },
        "source": {
          "$ref": "#/definitions/ClinicalTrialSource",
          "description": "Possible sources of a clinical trial."
        },
        "metadata": {
          "$ref": "#/definitions/ClinicalTrialMetadata",
          "description": "Trial data which is of interest to the potential participant."
        }
      },
      "description": "An inference made by the Trial Matcher model regarding a patient.",
      "required": [
        "type",
        "value"
      ]
    },
    "TrialMatcherInferenceEvidence": {
      "type": "object",
      "properties": {
        "eligibilityCriteriaEvidence": {
          "type": "string",
          "description": "A piece of evidence from the eligibility criteria text of a clinical trial."
        },
        "patientDataEvidence": {
          "$ref": "#/definitions/ClinicalNoteEvidence",
          "description": "A piece of evidence from a clinical note (text document)."
        },
        "patientInfoEvidence": {
          "$ref": "#/definitions/ClinicalCodedElement",
          "description": "A piece of clinical information, expressed as a code in a clinical coding\nsystem."
        },
        "importance": {
          "type": "number",
          "format": "float",
          "description": "A value indicating how important this piece of evidence is for the inference.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "description": "A piece of evidence corresponding to a Trial Matcher inference."
    },
    "TrialMatcherInferenceType": {
      "type": "string",
      "description": "Trial matcher inference type, known values.",
      "enum": [
        "trialEligibility"
      ],
      "x-ms-enum": {
        "name": "TrialMatcherInferenceType",
        "modelAsString": true,
        "values": [
          {
            "name": "TrialEligibility",
            "value": "trialEligibility"
          }
        ]
      }
    },
    "TrialMatcherInferenceTypeKnownValues": {
      "type": "string",
      "description": "Trial matcher inference type, known values.",
      "enum": [
        "trialEligibility"
      ],
      "x-ms-enum": {
        "name": "TrialMatcherInferenceTypeKnownValues",
        "modelAsString": true,
        "values": [
          {
            "name": "TrialEligibility",
            "value": "trialEligibility"
          }
        ]
      }
    },
    "TrialMatcherModelConfiguration": {
      "type": "object",
      "properties": {
        "clinicalTrials": {
          "$ref": "#/definitions/ClinicalTrials",
          "description": "The clinical trials that the patient(s) should be matched to. <br />The trial\nselection can be given as a list of custom clinical trials and/or a list of\nfilters to known clinical trial registries. In case both are given, the\nresulting trial set is a union of the two sets."
        }
      },
      "description": "Configuration affecting the Trial Matcher model's inference.",
      "required": [
        "clinicalTrials"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ModelConfiguration"
        }
      ]
    },
    "TrialMatcherPatientResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier given for the patient in the request."
        },
        "inferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrialMatcherInference"
          },
          "x-cadl-name": "TrialMatcherInference[]",
          "description": "The model's inferences for the given patient."
        },
        "neededClinicalInfo": {
          "$ref": "#/definitions/NeededClinicalInfo",
          "description": "Clinical information which is needed to provide better trial matching results for the patient."
        }
      },
      "description": "The results of the model's work for a single patient.",
      "required": [
        "id",
        "inferences"
      ]
    },
    "TrialMatcherRequest": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/TrialMatcherModelConfiguration",
          "description": "Configuration affecting the Trial Matcher model's inference."
        }
      },
      "description": "The body of the Trial Matcher request.",
      "allOf": [
        {
          "$ref": "#/definitions/Request"
        }
      ]
    },
    "TrialMatcherResponse": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "A processing job identifier.",
          "format": "uuid"
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the processing job was created."
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the processing job is set to expire."
        },
        "lastUpdateDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the processing job was last updated."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "The status of the processing job."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Azure.Core.Foundations.Error[]",
          "description": "An array of errors, if any errors occurred during the processing job."
        },
        "results": {
          "$ref": "#/definitions/TrialMatcherResults",
          "description": "The inference results for the Trial Matcher request."
        }
      },
      "description": "The response for the Trial Matcher request.",
      "required": [
        "jobId",
        "createdDateTime",
        "expirationDateTime",
        "lastUpdateDateTime",
        "status"
      ]
    },
    "TrialMatcherResults": {
      "type": "object",
      "properties": {
        "patients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrialMatcherPatientResult"
          },
          "x-cadl-name": "TrialMatcherPatientResult[]",
          "description": "Results for the patients given in the request."
        },
        "modelVersion": {
          "$ref": "#/definitions/ModelVersion",
          "description": "The version of the model used for inference, expressed as the model date."
        },
        "knowledgeGraphLastUpdateDate": {
          "type": "string",
          "format": "date",
          "description": "The date when the clinical trials knowledge graph was last updated."
        }
      },
      "description": "The inference results for the Trial Matcher request.",
      "required": [
        "patients",
        "modelVersion"
      ]
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "description": "The API version to use for this operation.",
      "x-ms-client-name": "apiVersion",
      "minLength": 1,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent": {
      "name": "Repeatability-First-Sent",
      "in": "header",
      "required": false,
      "description": "Specifies the date and time at which the request was first created.",
      "x-ms-client-name": "repeatabilityFirstSent",
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId": {
      "name": "Repeatability-Request-ID",
      "in": "header",
      "required": false,
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "x-ms-client-name": "repeatabilityRequestId",
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
