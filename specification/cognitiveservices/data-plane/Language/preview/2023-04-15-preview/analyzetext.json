{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft Cognitive Language Service - Text Analysis",
    "description": "The language service API is a suite of natural language processing (NLP) skills built with best-in-class Microsoft machine learning algorithms.  The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction, language detection and question answering. Further documentation can be found in <a href=\"https://docs.microsoft.com/azure/cognitive-services/language-service/overview\">https://docs.microsoft.com/azure/cognitive-services/language-service/overview</a>.0",
    "version": "2023-04-15-preview"
  },
  "securityDefinitions": {
    "AADToken": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts.",
      "scopes": {
        "https://cognitiveservices.azure.com/.default": "https://cognitiveservices.azure.com/.default"
      }
    },
    "apim_key": {
      "type": "apiKey",
      "description": "A subscription key for a Language service resource.",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "AADToken": [
        "https://cognitiveservices.azure.com/.default"
      ]
    },
    {
      "apim_key": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}/language",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "common.json#/parameters/Endpoint"
      }
    ]
  },
  "paths": {
    "/:analyze-text": {
      "post": {
        "summary": "Request text analysis over a collection of documents.",
        "description": "Submit a collection of text documents for analysis.  Specify a single unique task to be executed immediately.",
        "operationId": "AnalyzeText",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "common.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "common.json#/parameters/ShowStats"
          },
          {
            "description": "Collection of documents to analyze and a single task to execute.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextTask"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call result",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextTaskResult"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "common.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Entity Linking Request": {
            "$ref": "./examples/text/SuccessfulEntityLinkingRequest.json"
          },
          "Successful Entity Recognition Request": {
            "$ref": "./examples/text/SuccessfulEntityRecognitionRequest.json"
          },
          "Successful Entity Recognition Inclusion Request": {
            "$ref": "./examples/text/SuccessfulEntityRecognitionInclusionRequest.json"
          },
          "Successful Entity Recognition Exclusion Request": {
            "$ref": "./examples/text/SuccessfulEntityRecognitionExclusionRequest.json"
          },
          "Successful Entity Recognition Overlap Policy Request": {
            "$ref": "./examples/text/SuccessfulEntityRecognitionOverlapPolicy.json"
          },
          "Successful Key Phrase Extraction Request": {
            "$ref": "./examples/text/SuccessfulKeyPhraseExtractionRequest.json"
          },
          "Successful PII Entity Recognition Request": {
            "$ref": "./examples/text/SuccessfulPiiEntityRecognitionRequest.json"
          },
          "Successful PII Entity Recognition Redaction Request": {
            "$ref": "./examples/text/SuccessfulPiiEntityRecognitionRedactionRequest.json"
          },
          "Successful PII Entity Recognition Exclusion Request": {
            "$ref": "./examples/text/SuccessfulPiiEntityRecognitionExclusionRequest.json"
          },
          "Successful Language Detection Request": {
            "$ref": "./examples/text/SuccessfulLanguageDetectionRequest.json"
          },
          "Successful Sentiment Analysis Request": {
            "$ref": "./examples/text/SuccessfulSentimentAnalysisRequest.json"
          },
          "Successful Dynamic Classification Request": {
            "$ref": "./examples/text/SuccessfuDynamicClassificationRequest.json"
          }
        }
      }
    },
    "/analyze-text/jobs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "description": "Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed as a long-running operation.",
        "operationId": "AnalyzeText_SubmitJob",
        "summary": "Submit text analysis job",
        "parameters": [
          {
            "$ref": "common.json#/parameters/ApiVersionParameter"
          },
          {
            "description": "Collection of documents to analyze and one or more tasks to execute.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextJobsInput"
            },
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the analysis job.",
            "headers": {
              "Operation-Location": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "common.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Submit Analysis Job Request": {
            "$ref": "./examples/text/SuccessfulAnalyzeTextJobsMultipleTaskSubmitRequest.json"
          },
          "Successful Healthcare Post Request": {
            "$ref": "./examples/text/SuccessfulHealthcarePostRequest.json"
          },
          "Successful Custom Healthcare Post Request": {
            "$ref": "./examples/text/SuccessfulCustomHealthcarePostRequest.json"
          },
          "Successful Submit Abstractive Summarization Task": {
            "$ref": "./examples/text/SuccessfulAbstractiveSummarizationTaskSubmit.json"
          },
          "Successful Submit Custom Abstractive Summarization Task": {
            "$ref": "./examples/text/SuccessfulCustomAbstractiveSummarizationTaskSubmit.json"
          },
          "Successful Healthcare DocumentType Post Request": {
            "$ref": "./examples/text/SuccessfulHealthcareDocumentTypePostRequest.json"
          },
          "Successful Custom Sentiment Analysis Post Request": {
            "$ref": "./examples/text/SuccessfulCustomSentimentAnalysisTaskSubmit.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/analyze-text/jobs/{jobId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "description": "Get the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task.",
        "operationId": "AnalyzeText_JobStatus",
        "summary": "Get analysis status and results",
        "parameters": [
          {
            "$ref": "common.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "common.json#/parameters/JobId"
          },
          {
            "$ref": "common.json#/parameters/ShowStats"
          },
          {
            "$ref": "common.json#/parameters/TopParameter"
          },
          {
            "$ref": "common.json#/parameters/SkipParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis job status and metadata.",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextJobState"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "common.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Text Analysis Job Status Request": {
            "$ref": "./examples/text/SuccessfulAnalyzeTextJobsMultipleTaskStatusRequest.json"
          },
          "Successful Get Text Analysis Health Request": {
            "$ref": "./examples/text/SuccessfulHealthcareTaskStatusRequest.json"
          },
          "Successful Get Text Analysis Custom Health Request": {
            "$ref": "./examples/text/SuccessfulCustomHealthcareTaskStatusRequest.json"
          },
          "Successful Get Abstractive Summarization Result": {
            "$ref": "./examples/text/SuccessfulAbstractiveSummarizationTaskResult.json"
          },
          "Successful Get Custom Abstractive Summarization Result": {
            "$ref": "./examples/text/SuccessfulCustomAbstractiveSummarizationTaskResult.json"
          },
          "Successful Get Text Analysis Health DocumentType Request": {
            "$ref": "./examples/text/SuccessfulHealthcareDocumentTypeTaskStatusRequest.json"
          },
          "Successful Get Text Analysis Custom Sentiment Analysis Request": {
            "$ref": "./examples/text/SuccessfulCustomSentimentAnalysisTaskStatusRequest.json"
          }
        }
      }
    },
    "/analyze-text/jobs/{jobId}:cancel": {
      "post": {
        "produces": [
          "application/json"
        ],
        "description": "Cancel a long-running Text Analysis job.",
        "operationId": "AnalyzeText_CancelJob",
        "summary": "Cancel a long-running Text Analysis job",
        "parameters": [
          {
            "$ref": "common.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "common.json#/parameters/JobId"
          }
        ],
        "responses": {
          "202": {
            "description": "Cancel Job request has been received.",
            "headers": {
              "Operation-Location": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "common.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Job Delete Request": {
            "$ref": "./examples/text/SuccessfulAnalyzeTextJobsCancelRequest.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "AnalyzeTextTaskKind": {
      "type": "string",
      "description": "Enumeration of supported Text Analysis tasks.",
      "enum": [
        "SentimentAnalysis",
        "EntityRecognition",
        "PiiEntityRecognition",
        "KeyPhraseExtraction",
        "LanguageDetection",
        "EntityLinking",
        "DynamicClassification"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextTaskKind",
        "modelAsString": true
      }
    },
    "AnalyzeTextLROTaskKind": {
      "type": "string",
      "description": "Enumeration of supported long-running Text Analysis tasks.",
      "enum": [
        "SentimentAnalysis",
        "EntityRecognition",
        "PiiEntityRecognition",
        "KeyPhraseExtraction",
        "EntityLinking",
        "Healthcare",
        "CustomHealthcare",
        "ExtractiveSummarization",
        "CustomEntityRecognition",
        "CustomSingleLabelClassification",
        "CustomMultiLabelClassification",
        "AbstractiveSummarization",
        "CustomSentimentAnalysis",
        "CustomAbstractiveSummarization"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextLROTaskKind",
        "modelAsString": true
      }
    },
    "AnalyzeTextTaskResultsKind": {
      "type": "string",
      "description": "Enumeration of supported Text Analysis task results.",
      "enum": [
        "SentimentAnalysisResults",
        "EntityRecognitionResults",
        "PiiEntityRecognitionResults",
        "KeyPhraseExtractionResults",
        "LanguageDetectionResults",
        "EntityLinkingResults",
        "DynamicClassificationResults"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextTaskResultsKind",
        "modelAsString": true
      }
    },
    "AnalyzeTextLROResultsKind": {
      "type": "string",
      "description": "Enumeration of supported Text Analysis long-running operation task results.",
      "enum": [
        "SentimentAnalysisLROResults",
        "EntityRecognitionLROResults",
        "PiiEntityRecognitionLROResults",
        "KeyPhraseExtractionLROResults",
        "EntityLinkingLROResults",
        "HealthcareLROResults",
        "CustomHealthcareLROResults",
        "ExtractiveSummarizationLROResults",
        "CustomEntityRecognitionLROResults",
        "CustomSingleLabelClassificationLROResults",
        "CustomMultiLabelClassificationLROResults",
        "AbstractiveSummarizationLROResults",
        "CustomSentimentAnalysisLROResults",
        "CustomAbstractiveSummarizationLROResults"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextLROResultsKind",
        "modelAsString": true
      }
    },
    "MultiLanguageAnalysisInput": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MultiLanguageInput"
          }
        }
      }
    },
    "LanguageDetectionAnalysisInput": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageInput"
          }
        }
      }
    },
    "AnalyzeTextTask": {
      "type": "object",
      "discriminator": "kind",
      "required": [
        "kind"
      ],
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextTaskKind"
        }
      }
    },
    "AnalyzeTextLROTask": {
      "type": "object",
      "discriminator": "kind",
      "required": [
        "kind"
      ],
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextLROTaskKind"
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/TaskIdentifier"
        }
      ]
    },
    "AnalyzeTextTaskResult": {
      "type": "object",
      "discriminator": "kind",
      "required": [
        "kind"
      ],
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextTaskResultsKind"
        }
      }
    },
    "AnalyzeTextEntityLinkingInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/EntityLinkingTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "EntityLinking"
    },
    "AnalyzeTextEntityRecognitionInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/EntitiesTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "EntityRecognition"
    },
    "AnalyzeTextKeyPhraseExtractionInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/KeyPhraseTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "KeyPhraseExtraction"
    },
    "AnalyzeTextPiiEntitiesRecognitionInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/PiiTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "PiiEntityRecognition"
    },
    "AnalyzeTextLanguageDetectionInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/LanguageDetectionAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/LanguageDetectionTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "LanguageDetection"
    },
    "AnalyzeTextSentimentAnalysisInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/SentimentAnalysisTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "SentimentAnalysis"
    },
    "AnalyzeTextDynamicClassificationInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/DynamicClassificationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "DynamicClassification"
    },
    "AnalyzeTextJobsInput": {
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Optional display name for the analysis job.",
          "type": "string"
        },
        "defaultLanguage": {
          "description": "Default language to use for records requesting automatic language detection.",
          "type": "string"
        },
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "tasks": {
          "description": "The set of tasks to execute on the input documents.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalyzeTextLROTask"
          }
        }
      },
      "required": [
        "analysisInput",
        "tasks"
      ]
    },
    "CustomEntitiesTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Entities task.",
      "properties": {
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomEntitiesLROTask": {
      "type": "object",
      "description": "Use custom models to ease the process of information extraction from unstructured documents like contracts or financial documents",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomEntitiesTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomEntityRecognition"
    },
    "CustomEntitiesResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/EntitiesDocumentResult"
              },
              {
                "$ref": "#/definitions/DocumentDetectedLanguage"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/CustomResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "CustomSingleLabelClassificationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Single Classification task.",
      "allOf": [
        {
          "$ref": "common.json#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomSingleLabelClassificationLROTask": {
      "type": "object",
      "description": "Use custom models to classify text into single label taxonomy",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomSingleLabelClassificationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomSingleLabelClassification"
    },
    "CustomLabelClassificationResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/ClassificationDocumentResult"
              },
              {
                "$ref": "#/definitions/DocumentDetectedLanguage"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/CustomResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "ClassificationResult": {
      "type": "object",
      "required": [
        "category",
        "confidenceScore"
      ],
      "properties": {
        "category": {
          "type": "string",
          "description": "Classification type."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the recognized class."
        }
      }
    },
    "CustomMultiLabelClassificationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Multi Classification task.",
      "allOf": [
        {
          "$ref": "common.json#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomMultiLabelClassificationLROTask": {
      "type": "object",
      "description": "Use custom models to classify text into multi label taxonomy",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomMultiLabelClassificationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomMultiLabelClassification"
    },
    "ClassificationDocumentResult": {
      "type": "object",
      "properties": {
        "class": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassificationResult"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "class"
      ]
    },
    "DynamicClassificationDocumentResult": {
      "type": "object",
      "properties": {
        "classifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassificationResult"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "classifications"
      ]
    },
    "HealthcareTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Healthcare task.",
      "properties": {
        "fhirVersion": {
          "type": "string",
          "description": "The FHIR Spec version that the result will use to format the fhirBundle. For additional information see https://www.hl7.org/fhir/overview.html.",
          "enum": [
            "4.0.1"
          ],
          "x-ms-enum": {
            "name": "fhirVersion",
            "modelAsString": true
          }
        },
        "documentType": {
          "x-ms-enum": {
            "name": "healthcareDocumentType",
            "modelAsString": true
          },
          "type": "string",
          "description": "Document type that can be provided as input for Fhir Documents. Expect to have fhirVersion provided when used. Behavior of using None enum is the same as not using the documentType parameter.",
          "enum": [
            "None",
            "ClinicalTrial",
            "DischargeSummary",
            "ProgressNote",
            "HistoryAndPhysical",
            "Consult",
            "Imaging",
            "Pathology",
            "ProcedureNote"
          ]
        },
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "CustomHealthcareTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a custom Healthcare task.",
      "properties": {
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/CustomTaskParameters"
        }
      ]
    },
    "HealthcareLROTask": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/HealthcareTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "Healthcare"
    },
    "CustomHealthcareLROTask": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomHealthcareTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomHealthcare"
    },
    "HealthcareResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage"
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "CustomHealthcareResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage"
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/CustomResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/HealthcareEntitiesDocumentResult"
        },
        {
          "$ref": "#/definitions/DocumentDetectedLanguage"
        }
      ]
    },
    "CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CustomHealthcareEntitiesDocumentResult"
        },
        {
          "$ref": "#/definitions/DocumentDetectedLanguage"
        }
      ]
    },
    "HealthcareEntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "entities": {
          "description": "Healthcare entities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthcareEntity"
          }
        },
        "relations": {
          "type": "array",
          "description": "Healthcare entity relations.",
          "items": {
            "$ref": "#/definitions/HealthcareRelation"
          }
        },
        "fhirBundle": {
          "type": "object",
          "description": "JSON bundle containing a FHIR compatible object for consumption in other Healthcare tools. For additional information see https://www.hl7.org/fhir/overview.html.",
          "additionalProperties": {}
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "entities",
        "relations"
      ]
    },
    "CustomHealthcareEntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "entities": {
          "description": "Healthcare entities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomHealthcareEntity"
          }
        },
        "relations": {
          "type": "array",
          "description": "Healthcare entity relations.",
          "items": {
            "$ref": "#/definitions/HealthcareRelation"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "entities",
        "relations"
      ]
    },
    "HealthcareEntity": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "category": {
          "x-ms-enum": {
            "name": "healthcareEntityCategory",
            "modelAsString": true
          },
          "type": "string",
          "description": "Healthcare Entity Category.",
          "enum": [
            "BodyStructure",
            "Age",
            "Gender",
            "Ethnicity",
            "ExaminationName",
            "Date",
            "Direction",
            "Frequency",
            "MeasurementValue",
            "MeasurementUnit",
            "RelationalOperator",
            "Time",
            "Course",
            "GeneOrProtein",
            "Variant",
            "Expression",
            "MutationType",
            "AdministrativeEvent",
            "CareEnvironment",
            "HealthcareProfession",
            "Diagnosis",
            "SymptomOrSign",
            "ConditionQualifier",
            "ConditionScale",
            "MedicationClass",
            "MedicationName",
            "Dosage",
            "MedicationForm",
            "MedicationRoute",
            "FamilyRelation",
            "TreatmentName",
            "Allergen",
            "Employment",
            "LivingStatus",
            "SubstanceUse",
            "SubstanceUseAmount"
          ]
        },
        "subcategory": {
          "type": "string",
          "description": "(Optional) Entity sub type."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity text. Use of different 'stringIndexType' values can affect the length returned."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the extracted entity."
        },
        "assertion": {
          "type": "object",
          "$ref": "#/definitions/HealthcareAssertion"
        },
        "name": {
          "description": "Preferred name for the entity. Example: 'histologically' would have a 'name' of 'histologic'.",
          "type": "string"
        },
        "links": {
          "description": "Entity references in known data sources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthcareEntityLink"
          }
        }
      },
      "required": [
        "text",
        "category",
        "offset",
        "length",
        "confidenceScore"
      ]
    },
    "CustomHealthcareEntity": {
      "type": "object",
      "properties": {
        "entityComponentInformation": {
          "description": "(Optional) Entity component information listing fired components of the extracted entity. This object only applies for custom healthcare.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityComponentInformation"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/HealthcareEntity"
        }
      ]
    },
    "HealthcareRelation": {
      "type": "object",
      "description": "Every relation is an entity graph of a certain relationType, where all entities are connected and have specific roles within the relation context.",
      "required": [
        "relationType",
        "entities"
      ],
      "properties": {
        "relationType": {
          "description": "Type of relation. Examples include: `DosageOfMedication` or 'FrequencyOfMedication', etc.",
          "type": "string",
          "enum": [
            "Abbreviation",
            "BodySiteOfCondition",
            "BodySiteOfTreatment",
            "CourseOfCondition",
            "CourseOfExamination",
            "CourseOfMedication",
            "CourseOfTreatment",
            "DirectionOfBodyStructure",
            "DirectionOfCondition",
            "DirectionOfExamination",
            "DirectionOfTreatment",
            "DosageOfMedication",
            "ExaminationFindsCondition",
            "ExpressionOfGene",
            "ExpressionOfVariant",
            "FormOfMedication",
            "FrequencyOfCondition",
            "FrequencyOfMedication",
            "FrequencyOfTreatment",
            "MutationTypeOfGene",
            "MutationTypeOfVariant",
            "QualifierOfCondition",
            "RelationOfExamination",
            "RouteOfMedication",
            "ScaleOfCondition",
            "TimeOfCondition",
            "TimeOfEvent",
            "TimeOfExamination",
            "TimeOfMedication",
            "TimeOfTreatment",
            "UnitOfCondition",
            "UnitOfExamination",
            "ValueOfCondition",
            "ValueOfExamination",
            "VariantOfGene"
          ],
          "x-ms-enum": {
            "name": "relationType",
            "modelAsString": true
          }
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the extracted relation."
        },
        "entities": {
          "description": "The entities in the relation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthcareRelationEntity"
          }
        }
      }
    },
    "HealthcareAssertion": {
      "type": "object",
      "properties": {
        "conditionality": {
          "description": "Describes any conditionality on the entity.",
          "type": "string",
          "enum": [
            "hypothetical",
            "conditional"
          ],
          "x-ms-enum": {
            "name": "Conditionality",
            "modelAsString": false
          }
        },
        "certainty": {
          "description": "Describes the entities certainty and polarity.",
          "type": "string",
          "enum": [
            "positive",
            "positivePossible",
            "neutralPossible",
            "negativePossible",
            "negative"
          ],
          "x-ms-enum": {
            "name": "Certainty",
            "modelAsString": false
          }
        },
        "association": {
          "description": "Describes if the entity is the subject of the text or if it describes someone else.",
          "type": "string",
          "enum": [
            "subject",
            "other"
          ],
          "x-ms-enum": {
            "name": "Association",
            "modelAsString": false
          }
        },
        "temporality": {
          "description": "Describes temporal information regarding the entity.",
          "type": "string",
          "enum": [
            "current",
            "past",
            "future"
          ],
          "x-ms-enum": {
            "name": "Temporality",
            "modelAsString": false
          }
        }
      }
    },
    "HealthcareRelationEntity": {
      "type": "object",
      "required": [
        "ref",
        "role"
      ],
      "properties": {
        "ref": {
          "description": "Reference link object, using a JSON pointer RFC 6901 (URI Fragment Identifier Representation), pointing to the entity .",
          "type": "string"
        },
        "role": {
          "description": "Role of entity in the relationship. For example: 'CD20-positive diffuse large B-cell lymphoma' has the following entities with their roles in parenthesis:  CD20 (GeneOrProtein), Positive (Expression), diffuse large B-cell lymphoma (Diagnosis).",
          "type": "string"
        }
      }
    },
    "HealthcareEntityLink": {
      "type": "object",
      "required": [
        "dataSource",
        "id"
      ],
      "properties": {
        "dataSource": {
          "description": "Entity Catalog. Examples include: UMLS, CHV, MSH, etc.",
          "type": "string"
        },
        "id": {
          "description": "Entity id in the given source catalog.",
          "type": "string"
        }
      }
    },
    "EntityComponentInformation": {
      "description": "This object contains information of the detected entity components. The possible component types may expand in the future. Parsing code should handle unexpected values gracefully",
      "type": "object",
      "discriminator": "entityComponentKind",
      "properties": {
        "entityComponentKind": {
          "description": "The component object kind.",
          "type": "string",
          "enum": [
            "PrebuiltComponent",
            "LearnedComponent",
            "ListComponent"
          ],
          "x-ms-enum": {
            "name": "entityComponentKind",
            "modelAsString": true
          }
        }
      },
      "required": [
        "entityComponentKind"
      ]
    },
    "PrebuiltComponent": {
      "description": "This object contains information of the prebuilt component of the detected entity.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityComponentInformation"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "PrebuiltComponent",
      "properties": {
        "value": {
          "type": "string",
          "description": "The prebuilt component of an extracted entity type."
        }
      }
    },
    "LearnedComponent": {
      "description": "This object contains information of the learned component of the detected entity.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityComponentInformation"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "LearnedComponent",
      "properties": {
        "value": {
          "type": "string",
          "description": "The learned component of an extracted entity type."
        }
      }
    },
    "ListComponent": {
      "description": "This object contains information of the list component of the detected entity.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityComponentInformation"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "ListComponent",
      "properties": {
        "value": {
          "type": "string",
          "description": "The list key of an extracted entity type."
        }
      }
    },
    "SentimentAnalysisTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Sentiment Analysis task.",
      "properties": {
        "opinionMining": {
          "type": "boolean",
          "default": false
        },
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "SentimentAnalysisLROTask": {
      "type": "object",
      "description": "An object representing the task definition for a Sentiment Analysis task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/SentimentAnalysisTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "SentimentAnalysis"
    },
    "SentimentTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/SentimentResponse"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "SentimentAnalysisResults"
    },
    "SentimentResponse": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Sentiment analysis per document.",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/SentimentDocumentResult"
              },
              {
                "$ref": "#/definitions/DocumentDetectedLanguage"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "CustomSentimentDocumentResult": {
      "type": "object",
      "properties": {
        "sentiment": {
          "type": "string",
          "description": "Predicted sentiment for document (Negative, Neutral, Positive, or Mixed).",
          "enum": [
            "positive",
            "neutral",
            "negative",
            "mixed"
          ],
          "x-ms-enum": {
            "name": "DocumentSentimentValue",
            "modelAsString": false
          }
        },
        "confidenceScores": {
          "description": "Document level sentiment confidence scores between 0 and 1 for each sentiment class.",
          "$ref": "#/definitions/SentimentConfidenceScorePerLabel"
        },
        "sentences": {
          "type": "array",
          "description": "Sentence level sentiment analysis.",
          "items": {
            "$ref": "#/definitions/CustomSentenceSentiment"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "sentiment",
        "confidenceScores",
        "sentences"
      ]
    },
    "CustomSentenceSentiment": {
      "type": "object",
      "required": [
        "text",
        "sentiment",
        "confidenceScores",
        "offset",
        "length"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "The sentence text."
        },
        "sentiment": {
          "type": "string",
          "description": "The predicted Sentiment for the sentence.",
          "enum": [
            "positive",
            "neutral",
            "negative"
          ],
          "x-ms-enum": {
            "name": "SentenceSentimentValue",
            "modelAsString": false
          }
        },
        "confidenceScores": {
          "description": "The sentiment confidence score between 0 and 1 for the sentence for all classes.",
          "$ref": "#/definitions/SentimentConfidenceScorePerLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The sentence offset from the start of the document."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the sentence."
        }
      }
    },
    "SentimentDocumentResult": {
      "type": "object",
      "properties": {
        "sentiment": {
          "type": "string",
          "description": "Predicted sentiment for document (Negative, Neutral, Positive, or Mixed).",
          "enum": [
            "positive",
            "neutral",
            "negative",
            "mixed"
          ],
          "x-ms-enum": {
            "name": "DocumentSentimentValue",
            "modelAsString": false
          }
        },
        "confidenceScores": {
          "description": "Document level sentiment confidence scores between 0 and 1 for each sentiment class.",
          "$ref": "#/definitions/SentimentConfidenceScorePerLabel"
        },
        "sentences": {
          "type": "array",
          "description": "Sentence level sentiment analysis.",
          "items": {
            "$ref": "#/definitions/SentenceSentiment"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "sentiment",
        "confidenceScores",
        "sentences"
      ]
    },
    "SentimentConfidenceScorePerLabel": {
      "type": "object",
      "required": [
        "positive",
        "neutral",
        "negative"
      ],
      "properties": {
        "positive": {
          "type": "number",
          "format": "double",
          "description": "Confidence score for positive sentiment"
        },
        "neutral": {
          "type": "number",
          "format": "double",
          "description": "Confidence score for neutral sentiment"
        },
        "negative": {
          "type": "number",
          "format": "double",
          "description": "Confidence score for negative sentiment"
        }
      },
      "description": "Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative."
    },
    "SentenceSentiment": {
      "type": "object",
      "required": [
        "text",
        "sentiment",
        "confidenceScores",
        "offset",
        "length"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "The sentence text."
        },
        "sentiment": {
          "type": "string",
          "description": "The predicted Sentiment for the sentence.",
          "enum": [
            "positive",
            "neutral",
            "negative"
          ],
          "x-ms-enum": {
            "name": "SentenceSentimentValue",
            "modelAsString": false
          }
        },
        "confidenceScores": {
          "description": "The sentiment confidence score between 0 and 1 for the sentence for all classes.",
          "$ref": "#/definitions/SentimentConfidenceScorePerLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The sentence offset from the start of the document."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the sentence."
        },
        "targets": {
          "type": "array",
          "description": "The array of sentence targets for the sentence.",
          "items": {
            "$ref": "#/definitions/SentenceTarget"
          }
        },
        "assessments": {
          "type": "array",
          "description": "The array of assessments for the sentence.",
          "items": {
            "$ref": "#/definitions/SentenceAssessment"
          }
        }
      }
    },
    "SentenceTarget": {
      "type": "object",
      "required": [
        "confidenceScores",
        "length",
        "offset",
        "relations",
        "sentiment",
        "text"
      ],
      "properties": {
        "sentiment": {
          "type": "string",
          "enum": [
            "positive",
            "mixed",
            "negative"
          ],
          "x-ms-enum": {
            "name": "TokenSentimentValue",
            "modelAsString": false
          },
          "description": "Targeted sentiment in the sentence."
        },
        "confidenceScores": {
          "description": "Target sentiment confidence scores for the target in the sentence.",
          "$ref": "#/definitions/TargetConfidenceScoreLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The target offset from the start of the sentence."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the target."
        },
        "text": {
          "type": "string",
          "description": "The target text detected."
        },
        "relations": {
          "type": "array",
          "description": "The array of either assessment or target objects which is related to the target.",
          "items": {
            "$ref": "#/definitions/TargetRelation"
          }
        }
      }
    },
    "SentenceAssessment": {
      "type": "object",
      "required": [
        "confidenceScores",
        "isNegated",
        "length",
        "offset",
        "sentiment",
        "text"
      ],
      "properties": {
        "sentiment": {
          "type": "string",
          "enum": [
            "positive",
            "mixed",
            "negative"
          ],
          "x-ms-enum": {
            "name": "TokenSentimentValue",
            "modelAsString": false
          },
          "description": "Assessment sentiment in the sentence."
        },
        "confidenceScores": {
          "description": "Assessment sentiment confidence scores in the sentence.",
          "$ref": "#/definitions/TargetConfidenceScoreLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The assessment offset from the start of the sentence."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the assessment."
        },
        "text": {
          "type": "string",
          "description": "The assessment text detected."
        },
        "isNegated": {
          "type": "boolean",
          "description": "The indicator representing if the assessment is negated."
        }
      }
    },
    "TargetRelation": {
      "type": "object",
      "required": [
        "ref",
        "relationType"
      ],
      "properties": {
        "relationType": {
          "type": "string",
          "enum": [
            "assessment",
            "target"
          ],
          "x-ms-enum": {
            "name": "TargetRelationType",
            "modelAsString": false
          },
          "description": "The type related to the target."
        },
        "ref": {
          "type": "string",
          "description": "The JSON pointer indicating the linked object."
        }
      }
    },
    "TargetConfidenceScoreLabel": {
      "type": "object",
      "required": [
        "negative",
        "positive"
      ],
      "properties": {
        "positive": {
          "type": "number",
          "format": "double",
          "description": "Confidence score for positive sentiment"
        },
        "negative": {
          "type": "number",
          "format": "double",
          "description": "Confidence score for negative sentiment"
        }
      },
      "description": "Represents the confidence scores across all sentiment classes: positive and negative."
    },
    "CustomSentimentAnalysisTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Sentiment Analysis task.",
      "properties": {
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomSentimentAnalysisLROTask": {
      "type": "object",
      "description": "Use custom models to ease the process of sentiment analysis from documents like product reviews",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomSentimentAnalysisTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomSentimentAnalysis"
    },
    "CustomSentimentAnalysisResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Sentiment analysis per document.",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/CustomSentimentDocumentResult"
              },
              {
                "$ref": "#/definitions/DocumentDetectedLanguage"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/CustomResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "EntityList": {
      "description": "(Optional) describes the entity categories.",
      "items": {
        "type": "string",
        "enum": [
          "Address",
          "Numeric",
          "Age",
          "Currency",
          "Number",
          "NumberRange",
          "Percentage",
          "Ordinal",
          "Temperature",
          "Dimension",
          "Length",
          "Weight",
          "Height",
          "Speed",
          "Area",
          "Volume",
          "Information",
          "Temporal",
          "Date",
          "Time",
          "DateTime",
          "DateRange",
          "TimeRange",
          "DateTimeRange",
          "Duration",
          "SetTemporal",
          "Event",
          "SportsEvent",
          "CulturalEvent",
          "NaturalEvent",
          "Location",
          "GPE",
          "City",
          "State",
          "CountryRegion",
          "Continent",
          "Structural",
          "Airport",
          "Geological",
          "Organization",
          "OrganizationMedical",
          "OrganizationStockExchange",
          "OrganizationSports",
          "Person",
          "PersonType",
          "Email",
          "URL",
          "IP",
          "PhoneNumber",
          "Product",
          "ComputingProduct",
          "Skill"
        ],
        "x-ms-enum": {
          "name": "EntityCategory",
          "modelAsString": true,
          "values": [
            {
              "value": "Address",
              "description": "Specific street-level mentions of locations: house/building numbers, streets, avenues, highways, intersections referenced by name."
            },
            {
              "value": "Numeric",
              "description": "Numeric values, including digits and number words."
            },
            {
              "value": "Age",
              "description": "Age-related values."
            },
            {
              "value": "Currency",
              "description": "Currency-related values."
            },
            {
              "value": "Number",
              "description": "Numbers without a unit"
            },
            {
              "value": "NumberRange",
              "description": "Range of Numbers"
            },
            {
              "value": "Percentage",
              "description": "Percentage-related values."
            },
            {
              "value": "Ordinal",
              "description": "Ordinal numbers."
            },
            {
              "value": "Temperature",
              "description": "Temperature-related values."
            },
            {
              "value": "Dimension",
              "description": "Dimension of measurements"
            },
            {
              "value": "Length",
              "description": "Length of an object."
            },
            {
              "value": "Weight",
              "description": "Weight of an object."
            },
            {
              "value": "Height",
              "description": "Height of an object."
            },
            {
              "value": "Speed",
              "description": "Speed of an object."
            },
            {
              "value": "Area",
              "description": "Area of an object."
            },
            {
              "value": "Volume",
              "description": "Volume of an object."
            },
            {
              "value": "Information",
              "description": "Unit of measure for digital information."
            },
            {
              "value": "Temporal",
              "description": "Items relating to time."
            },
            {
              "value": "Date",
              "description": "Calendar dates."
            },
            {
              "value": "Time",
              "description": "Times of day."
            },
            {
              "value": "DateTime",
              "description": "Calendar dates with time."
            },
            {
              "value": "DateRange",
              "description": "Range of dates."
            },
            {
              "value": "TimeRange",
              "description": "Range of times."
            },
            {
              "value": "DateTimeRange",
              "description": "Range of date and time."
            },
            {
              "value": "Duration",
              "description": "Duration of time."
            },
            {
              "value": "SetTemporal",
              "description": "Set of time-related values."
            },
            {
              "value": "Event",
              "description": "Social, sports, business, political, educational, natural, historical, criminal, violent, legal, military events with a timed period."
            },
            {
              "value": "SportsEvent",
              "description": "Sports event-related values."
            },
            {
              "value": "CulturalEvent",
              "description": "Cultural event-related values."
            },
            {
              "value": "NaturalEvent",
              "description": "Natural event-related values."
            },
            {
              "value": "Location",
              "description": "Particular point or place in physical space."
            },
            {
              "value": "GPE",
              "description": "Cities, countries/regions, states.",
              "name": "GeoPoliticalEntity"
            },
            {
              "value": "City",
              "description": "City-related values."
            },
            {
              "value": "State",
              "description": "State-related values."
            },
            {
              "value": "CountryRegion",
              "description": "Country or region-related values."
            },
            {
              "value": "Continent",
              "description": "Continent-related values."
            },
            {
              "value": "Structural",
              "description": "Manmade structures."
            },
            {
              "value": "Airport",
              "description": "Airports."
            },
            {
              "value": "Geological",
              "description": " Geographic and natural features such as rivers, oceans, and deserts."
            },
            {
              "value": "Organization",
              "description": "Corporations, agencies, and other groups of people defined by some established organizational structure. These labels can include companies, political parties/movements, musical bands, sport clubs, government bodies, and public organizations. Nationalities or religions are not ORGANIZATION."
            },
            {
              "value": "OrganizationMedical",
              "description": "Medical companies and groups."
            },
            {
              "value": "OrganizationStockExchange",
              "description": "Stock exchange groups."
            },
            {
              "value": "OrganizationSports",
              "description": "Sports-related organizations."
            },
            {
              "value": "Person",
              "description": "First, last, and middle names, names of fictional characters, and aliases. Titles, such as “Mr.” or “President”, are not considered part of the named entity."
            },
            {
              "value": "PersonType",
              "description": "Human roles classified by a group membership."
            },
            {
              "value": "Email",
              "description": "Email addresses."
            },
            {
              "value": "URL",
              "description": "URLs to websites."
            },
            {
              "value": "IP",
              "description": "network IP addresses."
            },
            {
              "value": "PhoneNumber",
              "description": "Phone numbers (US and EU phone numbers only)."
            },
            {
              "value": "Product",
              "description": "Single or group of commercial, consumable objects, electronics, vehicles, food groups."
            },
            {
              "value": "ComputingProduct",
              "description": "Computing products."
            },
            {
              "value": "Skill",
              "description": "A capability, skill, or expertise."
            }
          ]
        }
      },
      "type": "array",
      "uniqueItems": true
    },
    "BaseEntityOverlapPolicy": {
      "description": "The abstract base class for entity OverlapPolicy.",
      "type": "object",
      "discriminator": "policyKind",
      "properties": {
        "policyKind": {
          "description": "The entity OverlapPolicy object kind.",
          "type": "string",
          "default": "matchLongest",
          "enum": [
            "matchLongest",
            "allowOverlap"
          ],
          "x-ms-enum": {
            "name": "policyKind",
            "modelAsString": true
          }
        }
      },
      "required": [
        "policyKind"
      ]
    },
    "MatchLongestEntityPolicyType": {
      "description": "Represents the Match longest overlap policy. No overlapping entities as far as it is possible. 1. If there are overlapping entities, the longest one will be returned. 2. If the set of characters predicted for 2 or more entities are exactly the same, select the entity that has the higher confidence score.3. If the entity scores are identical, return all entities that are still present after applying the previous rules. 3. If there is partial overlap (as in Hello Text Analytics) follow the above steps starting from 1.  ",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntityOverlapPolicy"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "matchLongest"
    },
    "AllowOverlapEntityPolicyType": {
      "description": "Represents the allow overlap policy. Will apply no post processing logic for the entities. Whatever the model predicts is what will be returned to the user. This allows the user to get a full view of every single model's possible values and apply their own custom logic on entity selection",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntityOverlapPolicy"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "allowOverlap"
    },
    "EntitiesTaskParameters": {
      "type": "object",
      "description": "Supported parameters for an Entity Recognition task.",
      "properties": {
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        },
        "inclusionList": {
          "description": "(Optional) request parameter that limits the output to the requested entity types included in this list. We will apply inclusionList before exclusionList",
          "$ref": "#/definitions/EntityList"
        },
        "exclusionList": {
          "description": "(Optional) request parameter that filters out any entities that are included the excludeList. When a user specifies an excludeList, they cannot get a prediction returned with an entity in that list. We will apply inclusionList before exclusionList",
          "$ref": "#/definitions/EntityList"
        },
        "overlapPolicy": {
          "description": "(Optional) describes the type of overlap policy to apply to the ner output.",
          "$ref": "#/definitions/BaseEntityOverlapPolicy"
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "EntitiesLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Entities Recognition task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/EntitiesTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "EntityRecognition"
    },
    "EntitiesTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntitiesResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "EntityRecognitionResults"
    },
    "EntitiesResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/EntitiesResultWithDetectedLanguage"
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "EntitiesResultWithDetectedLanguage": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EntitiesDocumentResultWithMetadata"
        },
        {
          "$ref": "#/definitions/DocumentDetectedLanguage"
        }
      ]
    },
    "EntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "description": "Recognized entities in the document.",
          "items": {
            "$ref": "#/definitions/Entity"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "entities"
      ]
    },
    "EntitiesDocumentResultWithMetadata": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "description": "Recognized entities in the document.",
          "items": {
            "$ref": "#/definitions/EntityWithMetadata"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "entities"
      ]
    },
    "EntityTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Tags are to express some similarities/affinity between entities. Entity Tags will be unique globally."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Detection score between 0 and 1 of the extracted entity."
        }
      },
      "required": [
        "name"
      ]
    },
    "Entity": {
      "type": "object",
      "required": [
        "text",
        "category",
        "offset",
        "length",
        "confidenceScore"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "category": {
          "type": "string",
          "description": "Entity type."
        },
        "subcategory": {
          "type": "string",
          "description": "(Optional) Entity sub type."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity text. Use of different 'stringIndexType' values can affect the length returned."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the extracted entity."
        }
      }
    },
    "EntityWithTags": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        }
      ],
      "type": "object",
      "required": [
        "type",
        "tags"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "An entity type is the lowest (or finest) granularity at which the entity has been detected. The type maps to the specific metadata attributes associated with the entity detected."
        },
        "tags": {
          "type": "array",
          "description": "List of entity tags. Tags are to express some similarities/affinity between entities.",
          "items": {
            "$ref": "#/definitions/EntityTag"
          }
        }
      }
    },
    "EntityWithMetadata": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EntityWithTags"
        }
      ],
      "properties": {
        "metadata": {
          "description": "The entity metadata object.",
          "type": "object",
          "$ref": "#/definitions/BaseMetadata"
        }
      }
    },
    "EntityLinkingTaskParameters": {
      "type": "object",
      "description": "Supported parameters for an Entity Linking task.",
      "properties": {
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "EntityLinkingLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Entity Linking task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/EntityLinkingTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "EntityLinking"
    },
    "EntityLinkingTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntityLinkingResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "EntityLinkingResults"
    },
    "EntityLinkingResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/EntityLinkingResultWithDetectedLanguage"
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "EntityLinkingResultWithDetectedLanguage": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/LinkedEntitiesDocumentResult"
        },
        {
          "$ref": "#/definitions/DocumentDetectedLanguage"
        }
      ]
    },
    "LinkedEntitiesDocumentResult": {
      "type": "object",
      "required": [
        "entities"
      ],
      "properties": {
        "entities": {
          "type": "array",
          "description": "Recognized well known entities in the document.",
          "items": {
            "$ref": "#/definitions/LinkedEntity"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "LinkedEntity": {
      "type": "object",
      "required": [
        "name",
        "matches",
        "language",
        "url",
        "dataSource"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Entity Linking formal name."
        },
        "matches": {
          "type": "array",
          "description": "List of instances this entity appears in the text.",
          "items": {
            "$ref": "#/definitions/Match"
          }
        },
        "language": {
          "type": "string",
          "description": "Language used in the data source."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the recognized entity from the data source."
        },
        "url": {
          "type": "string",
          "description": "URL for the entity's page from the data source."
        },
        "dataSource": {
          "type": "string",
          "description": "Data source used to extract entity linking, such as Wiki/Bing etc."
        },
        "bingId": {
          "type": "string",
          "description": "Bing Entity Search API unique identifier of the recognized entity."
        }
      }
    },
    "AgeUnit": {
      "type": "string",
      "enum": [
        "Unspecified",
        "Year",
        "Month",
        "Week",
        "Day"
      ],
      "x-ms-enum": {
        "name": "AgeUnit",
        "modelAsString": true
      },
      "description": "The Age Unit of measurement"
    },
    "VolumeUnit": {
      "type": "string",
      "enum": [
        "Unspecified",
        "CubicMeter",
        "CubicCentimeter",
        "CubicMillimeter",
        "Hectoliter",
        "Decaliter",
        "Liter",
        "Centiliter",
        "Milliliter",
        "CubicYard",
        "CubicInch",
        "CubicFoot",
        "CubicMile",
        "FluidOunce",
        "Teaspoon",
        "Tablespoon",
        "Pint",
        "Quart",
        "Cup",
        "Gill",
        "Pinch",
        "FluidDram",
        "Barrel",
        "Minim",
        "Cord",
        "Peck",
        "Bushel",
        "Hogshead"
      ],
      "x-ms-enum": {
        "name": "VolumeUnit",
        "modelAsString": true
      },
      "description": "The Volume Unit of measurement"
    },
    "SpeedUnit": {
      "type": "string",
      "enum": [
        "Unspecified",
        "MetersPerSecond",
        "KilometersPerHour",
        "KilometersPerMinute",
        "KilometersPerSecond",
        "MilesPerHour",
        "Knots",
        "FeetPerSecond",
        "FeetPerMinute",
        "YardsPerMinute",
        "YardsPerSecond",
        "MetersPerMillisecond",
        "CentimetersPerMillisecond",
        "KilometersPerMillisecond"
      ],
      "x-ms-enum": {
        "name": "SpeedUnit",
        "modelAsString": true
      },
      "description": "The speed Unit of measurement"
    },
    "AreaUnit": {
      "type": "string",
      "enum": [
        "Unspecified",
        "SquareKilometer",
        "SquareHectometer",
        "SquareDecameter",
        "SquareDecimeter",
        "SquareMeter",
        "SquareCentimeter",
        "SquareMillimeter",
        "SquareInch",
        "SquareFoot",
        "SquareMile",
        "SquareYard",
        "Acre"
      ],
      "x-ms-enum": {
        "name": "AreaUnit",
        "modelAsString": true
      },
      "description": "The area Unit of measurement"
    },
    "LengthUnit": {
      "type": "string",
      "enum": [
        "Unspecified",
        "Kilometer",
        "Hectometer",
        "Decameter",
        "Meter",
        "Decimeter",
        "Centimeter",
        "Millimeter",
        "Micrometer",
        "Nanometer",
        "Picometer",
        "Mile",
        "Yard",
        "Inch",
        "Foot",
        "LightYear",
        "Point"
      ],
      "x-ms-enum": {
        "name": "LengthUnit",
        "modelAsString": true
      },
      "description": "The length Unit of measurement"
    },
    "InformationUnit": {
      "type": "string",
      "enum": [
        "Unspecified",
        "Bit",
        "Kilobit",
        "Megabit",
        "Gigabit",
        "Terabit",
        "Petabit",
        "Byte",
        "Kilobyte",
        "Megabyte",
        "Gigabyte",
        "Terabyte",
        "Petabyte"
      ],
      "x-ms-enum": {
        "name": "InformationUnit",
        "modelAsString": true,
        "values": [
          {
            "value": "Unspecified",
            "description": "Unspecified information unit."
          },
          {
            "value": "Bit",
            "description": "Bit information unit. "
          },
          {
            "value": "Kilobit",
            "description": "Kilobit information unit. Usually defined as 1000 bits or 1024 bits."
          },
          {
            "value": "Megabit",
            "description": "Megabit information unit. Usually defined as 1000 kilobits or 1024 kilobits."
          },
          {
            "value": "Gigabit",
            "description": "Gigabit information unit. Usually defined as 1000 megabits or 1024 megabits."
          },
          {
            "value": "Terabit",
            "description": "Terabit information unit. Usually defined as 1000 gigabits or 1024 gigabits."
          },
          {
            "value": "Petabit",
            "description": "Petabit information unit. Usually defined as 1000 terabits or 1024 terabits."
          },
          {
            "value": "Byte",
            "description": "Byte information unit. Usually defined as 8 bits are used to form a byte.."
          },
          {
            "value": "Kilobyte",
            "description": "Kilobyte information unit. Usually defined as 1000 bytes or 1024 bytes."
          },
          {
            "value": "Megabyte",
            "description": "Megabyte information unit. Usually defined as 1000 kilobytes or 1024 kilobytes."
          },
          {
            "value": "Gigabyte",
            "description": "Gigabyte information unit. Usually defined as 1000 megabytes or 1024 megabytes."
          },
          {
            "value": "Terabyte",
            "description": "Terabyte information unit. Usually defined as 1000 gigabytes or 1024 gigabytes."
          },
          {
            "value": "Petabyte",
            "description": "Petabyte information unit. Usually defined as 1000 terabytes or 1024 terabytes."
          }
        ]
      },
      "description": "The information (data) Unit of measurement."
    },
    "TemperatureUnit": {
      "type": "string",
      "enum": [
        "Unspecified",
        "Fahrenheit",
        "Kelvin",
        "Rankine",
        "Celsius"
      ],
      "x-ms-enum": {
        "name": "TemperatureUnit",
        "modelAsString": true
      },
      "description": "The temperature Unit of measurement."
    },
    "WeightUnit": {
      "type": "string",
      "enum": [
        "Unspecified",
        "Kilogram",
        "Gram",
        "Milligram",
        "Gallon",
        "MetricTon",
        "Ton",
        "Pound",
        "Ounce",
        "Grain",
        "PennyWeight",
        "LongTonBritish",
        "ShortTonUS",
        "ShortHundredWeightUS",
        "Stone",
        "Dram"
      ],
      "x-ms-enum": {
        "name": "WeightUnit",
        "modelAsString": true
      },
      "description": "The weight Unit of measurement."
    },
    "NumberKind": {
      "type": "string",
      "enum": [
        "Integer",
        "Decimal",
        "Power",
        "Fraction",
        "Percent",
        "Unspecified"
      ],
      "x-ms-enum": {
        "name": "NumberKind",
        "modelAsString": true
      },
      "description": "The type of the extracted number entity."
    },
    "OrdinalRelativeTo": {
      "type": "string",
      "enum": [
        "Current",
        "End",
        "Start"
      ],
      "x-ms-enum": {
        "name": "RelativeTo",
        "modelAsString": true
      },
      "description": "The reference point that the ordinal number denotes."
    },
    "RangeInclusivity": {
      "type": "string",
      "enum": [
        "NoneInclusive",
        "LeftInclusive",
        "RightInclusive",
        "LeftRightInclusive"
      ],
      "x-ms-enum": {
        "name": "RangeInclusivity",
        "modelAsString": true
      },
      "description": "The range inclusiveness of this property property."
    },
    "NumericRangeKind": {
      "type": "string",
      "enum": [
        "Number",
        "Speed",
        "Weight",
        "Length",
        "Volume",
        "Area",
        "Age",
        "Information",
        "Temperature",
        "Currency"
      ],
      "x-ms-enum": {
        "name": "RangeKind",
        "modelAsString": true
      },
      "description": "The kind of range that the resolution object represents."
    },
    "BaseMetadata": {
      "description": "The abstract base class for entity Metadata.",
      "type": "object",
      "discriminator": "metadataKind",
      "properties": {
        "metadataKind": {
          "description": "The entity Metadata object kind.",
          "type": "string",
          "enum": [
            "DateMetadata",
            "DateTimeMetadata",
            "TimeMetadata",
            "TemporalSetMetadata",
            "NumberMetadata",
            "OrdinalMetadata",
            "SpeedMetadata",
            "WeightMetadata",
            "LengthMetadata",
            "VolumeMetadata",
            "AreaMetadata",
            "AgeMetadata",
            "InformationMetadata",
            "TemperatureMetadata",
            "CurrencyMetadata",
            "NumericRangeMetadata",
            "TemporalSpanMetadata"
          ],
          "x-ms-enum": {
            "name": "MetadataKind",
            "modelAsString": true
          }
        }
      },
      "required": [
        "metadataKind"
      ]
    },
    "QuantityMetadata": {
      "description": "Represents Metadata for quantities.",
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        }
      },
      "required": [
        "value"
      ]
    },
    "AgeMetadata": {
      "description": "Represents the Age entity Metadata model.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/QuantityMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "AgeMetadata",
      "properties": {
        "unit": {
          "$ref": "#/definitions/AgeUnit"
        }
      },
      "required": [
        "unit"
      ]
    },
    "VolumeMetadata": {
      "description": "Represents the volume entity Metadata model.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/QuantityMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "VolumeMetadata",
      "properties": {
        "unit": {
          "$ref": "#/definitions/VolumeUnit"
        }
      },
      "required": [
        "unit"
      ]
    },
    "SpeedMetadata": {
      "description": "Represents the speed entity Metadata model.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/QuantityMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "SpeedMetadata",
      "properties": {
        "unit": {
          "$ref": "#/definitions/SpeedUnit"
        }
      },
      "required": [
        "unit"
      ]
    },
    "AreaMetadata": {
      "description": "Represents the area entity Metadata model.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/QuantityMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "AreaMetadata",
      "properties": {
        "unit": {
          "$ref": "#/definitions/AreaUnit"
        }
      },
      "required": [
        "unit"
      ]
    },
    "LengthMetadata": {
      "description": "Represents the length entity Metadata model.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/QuantityMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "LengthMetadata",
      "properties": {
        "unit": {
          "$ref": "#/definitions/LengthUnit"
        }
      },
      "required": [
        "unit"
      ]
    },
    "InformationMetadata": {
      "description": "Represents the information (data) entity Metadata model.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/QuantityMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "InformationMetadata",
      "properties": {
        "unit": {
          "$ref": "#/definitions/InformationUnit"
        }
      },
      "required": [
        "unit"
      ]
    },
    "TemperatureMetadata": {
      "description": "Represents the temperature entity Metadata model.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/QuantityMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "TemperatureMetadata",
      "properties": {
        "unit": {
          "$ref": "#/definitions/TemperatureUnit"
        }
      },
      "required": [
        "unit"
      ]
    },
    "WeightMetadata": {
      "description": "Represents the weight entity Metadata model.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/QuantityMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "WeightMetadata",
      "properties": {
        "unit": {
          "$ref": "#/definitions/WeightUnit"
        }
      },
      "required": [
        "unit"
      ]
    },
    "CurrencyMetadata": {
      "description": "Represents the currency entity Metadata model.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/QuantityMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "CurrencyMetadata",
      "properties": {
        "iso4217": {
          "type": "string",
          "description": "The alphabetic code based on another ISO standard, ISO 3166, which lists the codes for country names. The first two letters of the ISO 4217 three-letter code are the same as the code for the country name, and, where possible, the third letter corresponds to the first letter of the currency name."
        },
        "value": {
          "type": "number",
          "format": "double",
          "description": "The money amount captured in the extracted entity"
        },
        "unit": {
          "type": "string",
          "description": "The unit of the amount captured in the extracted entity"
        }
      },
      "required": [
        "value",
        "unit"
      ]
    },
    "DateValue": {
      "description": "Represents the date value.",
      "type": "object",
      "properties": {
        "timex": {
          "$ref": "#/definitions/TimeExpression"
        },
        "value": {
          "type": "string",
          "description": "The actual time that the extracted text denote."
        },
        "modifier": {
          "$ref": "#/definitions/TemporalModifier"
        }
      },
      "required": [
        "timex",
        "value"
      ]
    },
    "BaseTemporalMetadata": {
      "type": "object",
      "properties": {
        "dateValues": {
          "type": "array",
          "description": "The list of date values.",
          "items": {
            "$ref": "#/definitions/DateValue"
          }
        }
      }
    },
    "DateMetadata": {
      "description": "A Metadata for date entity instances.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/BaseTemporalMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "DateMetadata"
    },
    "DateTimeMetadata": {
      "description": "A Metadata for datetime entity instances.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/BaseTemporalMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "DateTimeMetadata"
    },
    "TemporalSetMetadata": {
      "description": "A Metadata for temporal set entity instances.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/BaseTemporalMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "TemporalSetMetadata"
    },
    "TimeMetadata": {
      "description": "A Metadata for time entity instances.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        },
        {
          "$ref": "#/definitions/BaseTemporalMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "TimeMetadata"
    },
    "NumberMetadata": {
      "description": "A metadata for numeric entity instances.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "NumberMetadata",
      "properties": {
        "numberKind": {
          "$ref": "#/definitions/NumberKind"
        },
        "value": {
          "type": "number",
          "format": "double",
          "description": "A numeric representation of what the extracted text denotes."
        }
      },
      "required": [
        "numberKind",
        "value"
      ]
    },
    "OrdinalMetadata": {
      "description": "A Metadata for ordinal numbers entity instances.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "OrdinalMetadata",
      "properties": {
        "offset": {
          "type": "string",
          "description": "The offset With respect to the reference (e.g., offset = -1 in \"show me the second to last\""
        },
        "relativeTo": {
          "$ref": "#/definitions/OrdinalRelativeTo"
        },
        "value": {
          "type": "string",
          "description": "A simple arithmetic expression that the ordinal denotes."
        }
      },
      "required": [
        "offset",
        "relativeTo",
        "value"
      ]
    },
    "TemporalSpanMetadata": {
      "description": "represents the Metadata of a date and/or time span.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "TemporalSpanMetadata",
      "properties": {
        "spanValues": {
          "$ref": "#/definitions/TemporalSpanValues"
        }
      }
    },
    "TemporalSpanValues": {
      "type": "object",
      "properties": {
        "begin": {
          "$ref": "#/definitions/TimeExpression"
        },
        "end": {
          "$ref": "#/definitions/TimeExpression"
        },
        "duration": {
          "type": "string",
          "description": "An optional duration value formatted based on the ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601#Durations)"
        },
        "modifier": {
          "$ref": "#/definitions/TemporalModifier"
        },
        "timex": {
          "type": "string",
          "description": "An optional triplet containing the beginning, the end, and the duration all stated as ISO 8601 formatted strings."
        }
      }
    },
    "NumericRangeMetadata": {
      "description": "represents the Metadata of numeric intervals.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "type": "object",
      "x-ms-discriminator-value": "NumericRangeMetadata",
      "properties": {
        "rangeKind": {
          "$ref": "#/definitions/NumericRangeKind"
        },
        "minimum": {
          "type": "number",
          "format": "double",
          "description": "The beginning value of  the interval."
        },
        "maximum": {
          "type": "number",
          "format": "double",
          "description": "The ending value of the interval."
        },
        "rangeInclusivity": {
          "$ref": "#/definitions/RangeInclusivity"
        }
      },
      "required": [
        "rangeKind",
        "minimum",
        "maximum"
      ]
    },
    "TemporalModifier": {
      "type": "string",
      "description": "An optional modifier of a date/time instance.",
      "enum": [
        "AfterApprox",
        "Before",
        "BeforeStart",
        "Approx",
        "ReferenceUndefined",
        "SinceEnd",
        "AfterMid",
        "Start",
        "After",
        "BeforeEnd",
        "Until",
        "End",
        "Less",
        "Since",
        "AfterStart",
        "BeforeApprox",
        "Mid",
        "More"
      ],
      "x-ms-enum": {
        "name": "TemporalModifier",
        "modelAsString": true
      }
    },
    "TimeExpression": {
      "type": "string",
      "description": "An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml)"
    },
    "Match": {
      "type": "object",
      "required": [
        "confidenceScore",
        "text",
        "offset",
        "length"
      ],
      "properties": {
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "If a well known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned."
        },
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity match text."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity match text."
        }
      }
    },
    "PiiTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a PII Entities Recognition task.",
      "properties": {
        "domain": {
          "$ref": "#/definitions/PiiDomain"
        },
        "piiCategories": {
          "$ref": "#/definitions/PiiCategories"
        },
        "excludePiiCategories": {
          "$ref": "#/definitions/PiiCategoriesExclude"
        },
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        },
        "redactionCharacter": {
          "$ref": "common.json#/definitions/RedactionCharacter"
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "PiiLROTask": {
      "type": "object",
      "description": "An object representing the task definition for a PII Entities Recognition task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/PiiTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "PiiEntityRecognition"
    },
    "PiiTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/PiiResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "PiiEntityRecognitionResults"
    },
    "PiiResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/PIIResultWithDetectedLanguage"
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "PIIResultWithDetectedLanguage": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PiiEntitiesDocumentResult"
        },
        {
          "$ref": "#/definitions/DocumentDetectedLanguage"
        }
      ]
    },
    "PiiDomain": {
      "type": "string",
      "description": "The PII domain used for PII Entity Recognition.",
      "default": "none",
      "enum": [
        "phi",
        "none"
      ],
      "x-ms-enum": {
        "name": "PiiDomain",
        "modelAsString": true,
        "values": [
          {
            "name": "phi",
            "description": "Indicates that entities in the Personal Health Information domain should be redacted.",
            "value": "phi"
          },
          {
            "name": "none",
            "description": "Indicates that no domain is specified.",
            "value": "none"
          }
        ]
      }
    },
    "PiiEntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "redactedText": {
          "type": "string",
          "description": "Returns redacted text."
        },
        "entities": {
          "type": "array",
          "description": "Recognized entities in the document.",
          "items": {
            "$ref": "#/definitions/Entity"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "redactedText",
        "entities"
      ]
    },
    "PiiCategories": {
      "description": "(Optional) describes the PII categories to return",
      "items": {
        "type": "string",
        "x-ms-enum": {
          "name": "PiiCategory",
          "modelAsString": true
        },
        "enum": [
          "ABARoutingNumber",
          "ARNationalIdentityNumber",
          "AUBankAccountNumber",
          "AUDriversLicenseNumber",
          "AUMedicalAccountNumber",
          "AUPassportNumber",
          "AUTaxFileNumber",
          "AUBusinessNumber",
          "AUCompanyNumber",
          "ATIdentityCard",
          "ATTaxIdentificationNumber",
          "ATValueAddedTaxNumber",
          "AzureDocumentDBAuthKey",
          "AzureIAASDatabaseConnectionAndSQLString",
          "AzureIoTConnectionString",
          "AzurePublishSettingPassword",
          "AzureRedisCacheString",
          "AzureSAS",
          "AzureServiceBusString",
          "AzureStorageAccountKey",
          "AzureStorageAccountGeneric",
          "BENationalNumber",
          "BENationalNumberV2",
          "BEValueAddedTaxNumber",
          "BRCPFNumber",
          "BRLegalEntityNumber",
          "BRNationalIDRG",
          "BGUniformCivilNumber",
          "CABankAccountNumber",
          "CADriversLicenseNumber",
          "CAHealthServiceNumber",
          "CAPassportNumber",
          "CAPersonalHealthIdentification",
          "CASocialInsuranceNumber",
          "CLIdentityCardNumber",
          "CNResidentIdentityCardNumber",
          "CreditCardNumber",
          "HRIdentityCardNumber",
          "HRNationalIDNumber",
          "HRPersonalIdentificationNumber",
          "HRPersonalIdentificationOIBNumberV2",
          "CYIdentityCard",
          "CYTaxIdentificationNumber",
          "CZPersonalIdentityNumber",
          "CZPersonalIdentityV2",
          "DKPersonalIdentificationNumber",
          "DKPersonalIdentificationV2",
          "DrugEnforcementAgencyNumber",
          "EEPersonalIdentificationCode",
          "EUDebitCardNumber",
          "EUDriversLicenseNumber",
          "EUGPSCoordinates",
          "EUNationalIdentificationNumber",
          "EUPassportNumber",
          "EUSocialSecurityNumber",
          "EUTaxIdentificationNumber",
          "FIEuropeanHealthNumber",
          "FINationalID",
          "FINationalIDV2",
          "FIPassportNumber",
          "FRDriversLicenseNumber",
          "FRHealthInsuranceNumber",
          "FRNationalID",
          "FRPassportNumber",
          "FRSocialSecurityNumber",
          "FRTaxIdentificationNumber",
          "FRValueAddedTaxNumber",
          "DEDriversLicenseNumber",
          "DEPassportNumber",
          "DEIdentityCardNumber",
          "DETaxIdentificationNumber",
          "DEValueAddedNumber",
          "GRNationalIDCard",
          "GRNationalIDV2",
          "GRTaxIdentificationNumber",
          "HKIdentityCardNumber",
          "HUValueAddedNumber",
          "HUPersonalIdentificationNumber",
          "HUTaxIdentificationNumber",
          "INPermanentAccount",
          "INUniqueIdentificationNumber",
          "IDIdentityCardNumber",
          "InternationalBankingAccountNumber",
          "IEPersonalPublicServiceNumber",
          "IEPersonalPublicServiceNumberV2",
          "ILBankAccountNumber",
          "ILNationalID",
          "ITDriversLicenseNumber",
          "ITFiscalCode",
          "ITValueAddedTaxNumber",
          "JPBankAccountNumber",
          "JPDriversLicenseNumber",
          "JPPassportNumber",
          "JPResidentRegistrationNumber",
          "JPSocialInsuranceNumber",
          "JPMyNumberCorporate",
          "JPMyNumberPersonal",
          "JPResidenceCardNumber",
          "LVPersonalCode",
          "LTPersonalCode",
          "LUNationalIdentificationNumberNatural",
          "LUNationalIdentificationNumberNonNatural",
          "MYIdentityCardNumber",
          "MTIdentityCardNumber",
          "MTTaxIDNumber",
          "NLCitizensServiceNumber",
          "NLCitizensServiceNumberV2",
          "NLTaxIdentificationNumber",
          "NLValueAddedTaxNumber",
          "NZBankAccountNumber",
          "NZDriversLicenseNumber",
          "NZInlandRevenueNumber",
          "NZMinistryOfHealthNumber",
          "NZSocialWelfareNumber",
          "NOIdentityNumber",
          "PHUnifiedMultiPurposeIDNumber",
          "PLIdentityCard",
          "PLNationalID",
          "PLNationalIDV2",
          "PLPassportNumber",
          "PLTaxIdentificationNumber",
          "PLREGONNumber",
          "PTCitizenCardNumber",
          "PTCitizenCardNumberV2",
          "PTTaxIdentificationNumber",
          "ROPersonalNumericalCode",
          "RUPassportNumberDomestic",
          "RUPassportNumberInternational",
          "SANationalID",
          "SGNationalRegistrationIdentityCardNumber",
          "SKPersonalNumber",
          "SITaxIdentificationNumber",
          "SIUniqueMasterCitizenNumber",
          "ZAIdentificationNumber",
          "KRResidentRegistrationNumber",
          "ESDNI",
          "ESSocialSecurityNumber",
          "ESTaxIdentificationNumber",
          "SQLServerConnectionString",
          "SENationalID",
          "SENationalIDV2",
          "SEPassportNumber",
          "SETaxIdentificationNumber",
          "SWIFTCode",
          "CHSocialSecurityNumber",
          "TWNationalID",
          "TWPassportNumber",
          "TWResidentCertificate",
          "THPopulationIdentificationCode",
          "TRNationalIdentificationNumber",
          "UKDriversLicenseNumber",
          "UKElectoralRollNumber",
          "UKNationalHealthNumber",
          "UKNationalInsuranceNumber",
          "UKUniqueTaxpayerNumber",
          "USUKPassportNumber",
          "USBankAccountNumber",
          "USDriversLicenseNumber",
          "USIndividualTaxpayerIdentification",
          "USSocialSecurityNumber",
          "UAPassportNumberDomestic",
          "UAPassportNumberInternational",
          "Organization",
          "Email",
          "URL",
          "Age",
          "PhoneNumber",
          "IPAddress",
          "Date",
          "Person",
          "Address",
          "All",
          "Default"
        ]
      },
      "type": "array",
      "uniqueItems": true
    },
    "PiiCategoriesExclude": {
      "description": "(Optional) describes the PII categories to return",
      "items": {
        "type": "string",
        "x-ms-enum": {
          "name": "PiiCategoriesExclude",
          "modelAsString": true
        },
        "enum": [
          "ABARoutingNumber",
          "ARNationalIdentityNumber",
          "AUBankAccountNumber",
          "AUDriversLicenseNumber",
          "AUMedicalAccountNumber",
          "AUPassportNumber",
          "AUTaxFileNumber",
          "AUBusinessNumber",
          "AUCompanyNumber",
          "ATIdentityCard",
          "ATTaxIdentificationNumber",
          "ATValueAddedTaxNumber",
          "AzureDocumentDBAuthKey",
          "AzureIAASDatabaseConnectionAndSQLString",
          "AzureIoTConnectionString",
          "AzurePublishSettingPassword",
          "AzureRedisCacheString",
          "AzureSAS",
          "AzureServiceBusString",
          "AzureStorageAccountKey",
          "AzureStorageAccountGeneric",
          "BENationalNumber",
          "BENationalNumberV2",
          "BEValueAddedTaxNumber",
          "BRCPFNumber",
          "BRLegalEntityNumber",
          "BRNationalIDRG",
          "BGUniformCivilNumber",
          "CABankAccountNumber",
          "CADriversLicenseNumber",
          "CAHealthServiceNumber",
          "CAPassportNumber",
          "CAPersonalHealthIdentification",
          "CASocialInsuranceNumber",
          "CLIdentityCardNumber",
          "CNResidentIdentityCardNumber",
          "CreditCardNumber",
          "HRIdentityCardNumber",
          "HRNationalIDNumber",
          "HRPersonalIdentificationNumber",
          "HRPersonalIdentificationOIBNumberV2",
          "CYIdentityCard",
          "CYTaxIdentificationNumber",
          "CZPersonalIdentityNumber",
          "CZPersonalIdentityV2",
          "DKPersonalIdentificationNumber",
          "DKPersonalIdentificationV2",
          "DrugEnforcementAgencyNumber",
          "EEPersonalIdentificationCode",
          "EUDebitCardNumber",
          "EUDriversLicenseNumber",
          "EUGPSCoordinates",
          "EUNationalIdentificationNumber",
          "EUPassportNumber",
          "EUSocialSecurityNumber",
          "EUTaxIdentificationNumber",
          "FIEuropeanHealthNumber",
          "FINationalID",
          "FINationalIDV2",
          "FIPassportNumber",
          "FRDriversLicenseNumber",
          "FRHealthInsuranceNumber",
          "FRNationalID",
          "FRPassportNumber",
          "FRSocialSecurityNumber",
          "FRTaxIdentificationNumber",
          "FRValueAddedTaxNumber",
          "DEDriversLicenseNumber",
          "DEPassportNumber",
          "DEIdentityCardNumber",
          "DETaxIdentificationNumber",
          "DEValueAddedNumber",
          "GRNationalIDCard",
          "GRNationalIDV2",
          "GRTaxIdentificationNumber",
          "HKIdentityCardNumber",
          "HUValueAddedNumber",
          "HUPersonalIdentificationNumber",
          "HUTaxIdentificationNumber",
          "INPermanentAccount",
          "INUniqueIdentificationNumber",
          "IDIdentityCardNumber",
          "InternationalBankingAccountNumber",
          "IEPersonalPublicServiceNumber",
          "IEPersonalPublicServiceNumberV2",
          "ILBankAccountNumber",
          "ILNationalID",
          "ITDriversLicenseNumber",
          "ITFiscalCode",
          "ITValueAddedTaxNumber",
          "JPBankAccountNumber",
          "JPDriversLicenseNumber",
          "JPPassportNumber",
          "JPResidentRegistrationNumber",
          "JPSocialInsuranceNumber",
          "JPMyNumberCorporate",
          "JPMyNumberPersonal",
          "JPResidenceCardNumber",
          "LVPersonalCode",
          "LTPersonalCode",
          "LUNationalIdentificationNumberNatural",
          "LUNationalIdentificationNumberNonNatural",
          "MYIdentityCardNumber",
          "MTIdentityCardNumber",
          "MTTaxIDNumber",
          "NLCitizensServiceNumber",
          "NLCitizensServiceNumberV2",
          "NLTaxIdentificationNumber",
          "NLValueAddedTaxNumber",
          "NZBankAccountNumber",
          "NZDriversLicenseNumber",
          "NZInlandRevenueNumber",
          "NZMinistryOfHealthNumber",
          "NZSocialWelfareNumber",
          "NOIdentityNumber",
          "PHUnifiedMultiPurposeIDNumber",
          "PLIdentityCard",
          "PLNationalID",
          "PLNationalIDV2",
          "PLPassportNumber",
          "PLTaxIdentificationNumber",
          "PLREGONNumber",
          "PTCitizenCardNumber",
          "PTCitizenCardNumberV2",
          "PTTaxIdentificationNumber",
          "ROPersonalNumericalCode",
          "RUPassportNumberDomestic",
          "RUPassportNumberInternational",
          "SANationalID",
          "SGNationalRegistrationIdentityCardNumber",
          "SKPersonalNumber",
          "SITaxIdentificationNumber",
          "SIUniqueMasterCitizenNumber",
          "ZAIdentificationNumber",
          "KRResidentRegistrationNumber",
          "ESDNI",
          "ESSocialSecurityNumber",
          "ESTaxIdentificationNumber",
          "SQLServerConnectionString",
          "SENationalID",
          "SENationalIDV2",
          "SEPassportNumber",
          "SETaxIdentificationNumber",
          "SWIFTCode",
          "CHSocialSecurityNumber",
          "TWNationalID",
          "TWPassportNumber",
          "TWResidentCertificate",
          "THPopulationIdentificationCode",
          "TRNationalIdentificationNumber",
          "UKDriversLicenseNumber",
          "UKElectoralRollNumber",
          "UKNationalHealthNumber",
          "UKNationalInsuranceNumber",
          "UKUniqueTaxpayerNumber",
          "USUKPassportNumber",
          "USBankAccountNumber",
          "USDriversLicenseNumber",
          "USIndividualTaxpayerIdentification",
          "USSocialSecurityNumber",
          "UAPassportNumberDomestic",
          "UAPassportNumberInternational",
          "Organization",
          "Email",
          "URL",
          "Age",
          "PhoneNumber",
          "IPAddress",
          "Date",
          "Person",
          "Address"
        ]
      },
      "type": "array",
      "uniqueItems": true
    },
    "ExtractiveSummarizationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for an Extractive Summarization task.",
      "properties": {
        "sentenceCount": {
          "type": "integer",
          "default": 3,
          "format": "int64"
        },
        "sortBy": {
          "$ref": "#/definitions/ExtractiveSummarizationSortingCriteria"
        },
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "ExtractiveSummarizationLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Extractive Summarization task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/ExtractiveSummarizationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "ExtractiveSummarization"
    },
    "ExtractiveSummarizationResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/ExtractedSummaryDocumentResultWithDetectedLanguage"
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "ExtractiveSummarizationSortingCriteria": {
      "type": "string",
      "default": "Offset",
      "description": "The sorting criteria to use for the results of Extractive Summarization.",
      "enum": [
        "Offset",
        "Rank"
      ],
      "x-ms-enum": {
        "name": "ExtractiveSummarizationSortingCriteria",
        "modelAsString": true,
        "values": [
          {
            "name": "Offset",
            "description": "Indicates that results should be sorted in order of appearance in the text.",
            "value": "Offset"
          },
          {
            "name": "Rank",
            "description": "Indicates that results should be sorted in order of importance (i.e. rank score) according to the model.",
            "value": "Rank"
          }
        ]
      }
    },
    "ExtractedSummaryDocumentResultWithDetectedLanguage": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExtractedSummaryDocumentResult"
        },
        {
          "$ref": "#/definitions/DocumentDetectedLanguage"
        }
      ]
    },
    "ExtractedSummaryDocumentResult": {
      "type": "object",
      "properties": {
        "sentences": {
          "type": "array",
          "description": "A ranked list of sentences representing the extracted summary.",
          "items": {
            "$ref": "#/definitions/ExtractedSummarySentence"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "sentences"
      ]
    },
    "ExtractedSummarySentence": {
      "type": "object",
      "required": [
        "text",
        "rankScore",
        "offset",
        "length"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "The extracted sentence text."
        },
        "rankScore": {
          "type": "number",
          "format": "double",
          "description": "A double value representing the relevance of the sentence within the summary. Higher values indicate higher importance."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The sentence offset from the start of the document, based on the value of the parameter StringIndexType."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the sentence."
        }
      }
    },
    "KeyPhraseTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Key Phrase Extraction task.",
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "KeyPhraseLROTask": {
      "type": "object",
      "description": "An object representing the task definition for a Key Phrase Extraction task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/KeyPhraseTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "KeyPhraseExtraction"
    },
    "KeyPhraseTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/KeyPhraseResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "KeyPhraseExtractionResults"
    },
    "KeyPhraseResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/KeyPhrasesDocumentResult"
              },
              {
                "$ref": "#/definitions/DocumentDetectedLanguage"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "KeyPhrasesDocumentResult": {
      "type": "object",
      "properties": {
        "keyPhrases": {
          "type": "array",
          "description": "A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "keyPhrases"
      ]
    },
    "LanguageDetectionTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Language Detection task.",
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "LanguageDetectionTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/LanguageDetectionResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "LanguageDetectionResults"
    },
    "LanguageDetectionResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/LanguageDetectionDocumentResult"
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "LanguageDetectionDocumentResult": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "description": "Detected Language.",
          "$ref": "#/definitions/DetectedLanguage"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "detectedLanguage"
      ]
    },
    "DetectedLanguage": {
      "type": "object",
      "required": [
        "name",
        "iso6391Name",
        "confidenceScore"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Long name of a detected language (e.g. English, French)."
        },
        "iso6391Name": {
          "type": "string",
          "description": "A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr)."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true."
        },
        "script": {
          "type": "string",
          "description": "Identifies the script of the input document.",
          "enum": [
            "Latin"
          ],
          "x-ms-enum": {
            "name": "ScriptKind",
            "modelAsString": true
          }
        }
      }
    },
    "DynamicClassificationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Zero Shot Classification task.",
      "properties": {
        "classificationType": {
          "type": "string",
          "description": "Specifies either one or multiple categories per document. Defaults to multi classification which may return more than one class for each document.",
          "default": "Multi",
          "enum": [
            "Single",
            "Multi"
          ],
          "x-ms-enum": {
            "name": "ClassificationType",
            "modelAsString": true
          }
        },
        "categories": {
          "type": "array",
          "description": "a list of categories to which input is classified to.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltTaskParameters"
        }
      ],
      "required": [
        "categories"
      ]
    },
    "DynamicClassificationTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/DynamicClassificationResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "DynamicClassificationResults"
    },
    "DynamicClassificationResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/DynamicClassificationDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "AnalyzeTextJobState": {
      "allOf": [
        {
          "$ref": "common.json#/definitions/JobState"
        },
        {
          "$ref": "#/definitions/TasksState"
        },
        {
          "$ref": "#/definitions/AnalyzeTextJobStatistics"
        }
      ]
    },
    "Pagination": {
      "properties": {
        "nextLink": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AnalyzeTextJobStatistics": {
      "properties": {
        "statistics": {
          "$ref": "common.json#/definitions/RequestStatistics"
        }
      },
      "type": "object"
    },
    "TasksState": {
      "properties": {
        "tasks": {
          "properties": {
            "completed": {
              "type": "integer",
              "format": "int64"
            },
            "failed": {
              "type": "integer",
              "format": "int64"
            },
            "inProgress": {
              "type": "integer",
              "format": "int64"
            },
            "total": {
              "type": "integer",
              "format": "int64"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnalyzeTextLROResult"
              }
            }
          },
          "required": [
            "total",
            "completed",
            "failed",
            "inProgress"
          ],
          "type": "object"
        }
      },
      "required": [
        "tasks"
      ],
      "type": "object"
    },
    "TaskState": {
      "properties": {
        "lastUpdateDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "notStarted",
            "running",
            "succeeded",
            "failed",
            "cancelled",
            "cancelling"
          ],
          "x-ms-enum": {
            "modelAsString": true,
            "name": "State"
          }
        }
      },
      "required": [
        "status",
        "lastUpdateDateTime"
      ],
      "type": "object"
    },
    "AnalyzeTextLROResult": {
      "type": "object",
      "discriminator": "kind",
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextLROResultsKind"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TaskState"
        },
        {
          "$ref": "common.json#/definitions/TaskIdentifier"
        }
      ],
      "required": [
        "kind"
      ]
    },
    "EntityRecognitionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntitiesResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "EntityRecognitionLROResults"
    },
    "CustomEntityRecognitionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomEntitiesResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "CustomEntityRecognitionLROResults"
    },
    "CustomSingleLabelClassificationLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomLabelClassificationResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "CustomSingleLabelClassificationLROResults"
    },
    "CustomMultiLabelClassificationLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomLabelClassificationResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "CustomMultiLabelClassificationLROResults"
    },
    "EntityLinkingLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntityLinkingResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "EntityLinkingLROResults"
    },
    "PiiEntityRecognitionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/PiiResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "PiiEntityRecognitionLROResults"
    },
    "ExtractiveSummarizationLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/ExtractiveSummarizationResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "ExtractiveSummarizationLROResults"
    },
    "HealthcareLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/HealthcareResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "HealthcareLROResults"
    },
    "CustomHealthcareLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomHealthcareResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "CustomHealthcareLROResults"
    },
    "SentimentLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/SentimentResponse"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "SentimentAnalysisLROResults"
    },
    "CustomSentimentAnalysisLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomSentimentAnalysisResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "CustomSentimentAnalysisLROResults"
    },
    "KeyPhraseExtractionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/KeyPhraseResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "KeyPhraseExtractionLROResults"
    },
    "DocumentResponse": {
      "type": "object",
      "properties": {}
    },
    "DocumentResult": {
      "type": "object",
      "required": [
        "id",
        "warnings"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "warnings": {
          "type": "array",
          "description": "Warnings encountered while processing document.",
          "items": {
            "$ref": "#/definitions/DocumentWarning"
          }
        },
        "statistics": {
          "description": "if showStats=true was specified in the request this field will contain information about the document payload.",
          "$ref": "#/definitions/DocumentStatistics"
        }
      }
    },
    "DocumentDetectedLanguage": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "$ref": "#/definitions/DetectedLanguage",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      }
    },
    "DocumentWarning": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "LongWordsInDocument",
            "DocumentTruncated"
          ],
          "x-ms-enum": {
            "name": "WarningCodeValue",
            "modelAsString": true
          },
          "description": "Error code."
        },
        "message": {
          "type": "string",
          "description": "Warning message."
        },
        "targetRef": {
          "type": "string",
          "description": "A JSON pointer reference indicating the target object."
        }
      }
    },
    "DocumentStatistics": {
      "type": "object",
      "required": [
        "charactersCount",
        "transactionsCount"
      ],
      "properties": {
        "charactersCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of text elements recognized in the document."
        },
        "transactionsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of transactions for the document."
        }
      },
      "description": "if showStats=true was specified in the request this field will contain information about the document payload."
    },
    "DocumentRequestStatistics": {
      "type": "object",
      "required": [
        "documentsCount",
        "validDocumentsCount",
        "erroneousDocumentsCount"
      ],
      "properties": {
        "documentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of documents submitted in the request."
        },
        "validDocumentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of valid documents. This excludes empty, over-size limit or non-supported languages documents."
        },
        "erroneousDocumentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of invalid documents. This includes empty, over-size limit or non-supported languages documents."
        }
      },
      "allOf": [
        {
          "$ref": "common.json#/definitions/RequestStatistics"
        }
      ],
      "description": "if showStats=true was specified in the request this field will contain information about the document request payload."
    },
    "MultiLanguageInput": {
      "type": "object",
      "description": "Contains an input document to be analyzed by the service.",
      "required": [
        "id",
        "text"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique, non-empty document identifier."
        },
        "text": {
          "type": "string",
          "description": "The input text to process."
        },
        "language": {
          "type": "string",
          "description": "(Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use \"en\" for English; \"es\" for Spanish etc. For Auto Language Detection, use \"auto\". If not set, use \"en\" for English as default."
        }
      }
    },
    "LanguageInput": {
      "type": "object",
      "required": [
        "id",
        "text"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "text": {
          "type": "string"
        },
        "countryHint": {
          "type": "string"
        }
      }
    },
    "AbstractiveSummarizationLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Abstractive Summarization task.",
      "required": [
        "parameters"
      ],
      "properties": {
        "parameters": {
          "$ref": "#/definitions/AbstractiveSummarizationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "AbstractiveSummarization"
    },
    "CustomAbstractiveSummarizationLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Custom Abstractive Summarization task.",
      "required": [
        "parameters"
      ],
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomAbstractiveSummarizationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomAbstractiveSummarization"
    },
    "AbstractiveSummarizationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for the pre-build Abstractive Summarization task.",
      "allOf": [
        {
          "$ref": "common.json#/definitions/AbstractiveSummarizationTaskParametersBase"
        },
        {
          "$ref": "common.json#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "CustomAbstractiveSummarizationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for the Custom Abstractive Summarization task.",
      "allOf": [
        {
          "$ref": "common.json#/definitions/AbstractiveSummarizationTaskParametersBase"
        },
        {
          "$ref": "common.json#/definitions/CustomTaskParameters"
        }
      ]
    },
    "AbstractiveSummarizationLROResult": {
      "type": "object",
      "description": "An object representing the results for an Abstractive Summarization task.",
      "properties": {
        "results": {
          "$ref": "#/definitions/AbstractiveSummarizationResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "AbstractiveSummarizationLROResults"
    },
    "CustomAbstractiveSummarizationLROResult": {
      "type": "object",
      "description": "An object representing the results for an Custom Abstractive Summarization task.",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomAbstractiveSummarizationResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "CustomAbstractiveSummarizationLROResults"
    },
    "AbstractiveSummarizationResultBase": {
      "type": "object",
      "description": "An object representing the summarization results of each document.",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/AbstractiveSummaryDocumentResultWithDetectedLanguage"
          }
        }
      },
      "required": [
        "documents"
      ]
    },
    "AbstractiveSummaryDocumentResultWithDetectedLanguage": {
      "type": "object",
      "description": "An object representing the summarization result of a single document with detected language.",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractiveSummaryDocumentResult"
        },
        {
          "$ref": "#/definitions/DocumentDetectedLanguage"
        }
      ]
    },
    "AbstractiveSummarizationResult": {
      "type": "object",
      "description": "An object representing the pre-build summarization results of each document.",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractiveSummarizationResultBase"
        },
        {
          "$ref": "common.json#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "CustomAbstractiveSummarizationResult": {
      "type": "object",
      "description": "An object representing the custom summarization results of each document.",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractiveSummarizationResultBase"
        },
        {
          "$ref": "common.json#/definitions/CustomResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "AbstractiveSummaryDocumentResult": {
      "type": "object",
      "description": "An object representing the summarization result of a single document.",
      "properties": {
        "summaries": {
          "type": "array",
          "description": "A list of abstractive summaries.",
          "items": {
            "$ref": "#/definitions/AbstractiveSummary"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "summaries"
      ]
    },
    "AbstractiveSummary": {
      "type": "object",
      "description": "An object representing a single summary with context for given document.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text of the summary."
        },
        "contexts": {
          "type": "array",
          "description": "The context list of the summary.",
          "items": {
            "$ref": "common.json#/definitions/SummaryContext"
          }
        }
      },
      "required": [
        "text"
      ]
    }
  },
  "parameters": {}
}
