{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft Cognitive Language Service - Text Analysis",
    "version": "2023-11-15-preview",
    "description": "The language service API is a suite of natural language processing (NLP) skills built with best-in-class Microsoft machine learning algorithms.  The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction, language detection and question answering. Further documentation can be found in <a href=\"https://docs.microsoft.com/azure/cognitive-services/language-service/overview\">https://docs.microsoft.com/azure/cognitive-services/language-service/overview</a>.0",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "Endpoint",
        "in": "path",
        "description": "Supported Cognitive Services endpoint (e.g., https://<resource-name>.api.cognitiveservices.azure.com).",
        "required": true,
        "type": "string"
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "tags": [],
  "paths": {
    "/language/:analyze-text": {
      "post": {
        "operationId": "Language_AnalyzeText",
        "description": "Request text analysis over a collection of documents.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Collection of documents to analyze and a single task to execute.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyzeTextTask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextTaskResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "SuccessfulDynamicClassificationRequest": {
            "$ref": "./examples/SuccessfulDynamicClassificationRequest.json"
          },
          "SuccessfulEntityLinkingRequest": {
            "$ref": "./examples/SuccessfulEntityLinkingRequest.json"
          },
          "SuccessfulEntityRecognitionExclusionRequest": {
            "$ref": "./examples/SuccessfulEntityRecognitionExclusionRequest.json"
          },
          "SuccessfulEntityRecognitionInclusionRequest": {
            "$ref": "./examples/SuccessfulEntityRecognitionInclusionRequest.json"
          },
          "SuccessfulEntityRecognitionInferenceOptionsRequest": {
            "$ref": "./examples/SuccessfulEntityRecognitionInferenceOptionsRequest.json"
          },
          "SuccessfulEntityRecognitionOverlapPolicy": {
            "$ref": "./examples/SuccessfulEntityRecognitionOverlapPolicy.json"
          },
          "SuccessfulEntityRecognitionRequest": {
            "$ref": "./examples/SuccessfulEntityRecognitionRequest.json"
          },
          "SuccessfulKeyPhraseExtractionRequest": {
            "$ref": "./examples/SuccessfulKeyPhraseExtractionRequest.json"
          },
          "SuccessfulLanguageDetectionRequest": {
            "$ref": "./examples/SuccessfulLanguageDetectionRequest.json"
          },
          "SuccessfulPiiEntityRecognitionExclusionRequest": {
            "$ref": "./examples/SuccessfulPiiEntityRecognitionExclusionRequest.json"
          },
          "SuccessfulPiiEntityRecognitionRedactionRequest": {
            "$ref": "./examples/SuccessfulPiiEntityRecognitionRedactionRequest.json"
          },
          "SuccessfulPiiEntityRecognitionRequest": {
            "$ref": "./examples/SuccessfulPiiEntityRecognitionRequest.json"
          },
          "SuccessfulSentimentAnalysisRequest": {
            "$ref": "./examples/SuccessfulSentimentAnalysisRequest.json"
          }
        }
      }
    },
    "/language/analyze-text/jobs": {
      "post": {
        "operationId": "Language_SubmitJob",
        "description": "Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed as a long-running operation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyzeTextJobsInput"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location for monitoring the operation state."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "SuccessfulAbstractiveSummarizationTaskSubmit": {
            "$ref": "./examples/SuccessfulAbstractiveSummarizationTaskSubmit.json"
          },
          "SuccessfulAnalyzeTextJobsMultipleTaskSubmitRequest": {
            "$ref": "./examples/SuccessfulAnalyzeTextJobsMultipleTaskSubmitRequest.json"
          },
          "SuccessfulCustomAbstractiveSummarizationTaskSubmit": {
            "$ref": "./examples/SuccessfulCustomAbstractiveSummarizationTaskSubmit.json"
          },
          "SuccessfulCustomHealthcarePostRequest": {
            "$ref": "./examples/SuccessfulCustomHealthcarePostRequest.json"
          },
          "SuccessfulCustomSentimentAnalysisTaskSubmit": {
            "$ref": "./examples/SuccessfulCustomSentimentAnalysisTaskSubmit.json"
          },
          "SuccessfulHealthcareDocumentTypePostRequest": {
            "$ref": "./examples/SuccessfulHealthcareDocumentTypePostRequest.json"
          },
          "SuccessfulHealthcarePostRequest": {
            "$ref": "./examples/SuccessfulHealthcarePostRequest.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/language/analyze-text/jobs/{jobId}": {
      "get": {
        "operationId": "Language_JobStatus",
        "summary": "Get analysis status and results",
        "description": "Get the status of an analysis job. A job can consist of one or more tasks. After all tasks succeed, the job transitions to the succeeded state and results are available for each task.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "job ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "showStats",
            "in": "query",
            "description": "(Optional) if set to true, response will contain request and document level statistics.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "An offset into the collection of the first resource to be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The maximum number of resources to return from the collection.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextJobState"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "SuccessfulAbstractiveSummarizationTaskResult": {
            "$ref": "./examples/SuccessfulAbstractiveSummarizationTaskResult.json"
          },
          "SuccessfulAnalyzeTextJobsMultipleTaskStatusRequest": {
            "$ref": "./examples/SuccessfulAnalyzeTextJobsMultipleTaskStatusRequest.json"
          },
          "SuccessfulCustomAbstractiveSummarizationTaskResult": {
            "$ref": "./examples/SuccessfulCustomAbstractiveSummarizationTaskResult.json"
          },
          "SuccessfulCustomHealthcareTaskStatusRequest": {
            "$ref": "./examples/SuccessfulCustomHealthcareTaskStatusRequest.json"
          },
          "SuccessfulCustomSentimentAnalysisTaskStatusRequest": {
            "$ref": "./examples/SuccessfulCustomSentimentAnalysisTaskStatusRequest.json"
          },
          "SuccessfulHealthcareDocumentTypeTaskStatusRequest": {
            "$ref": "./examples/SuccessfulHealthcareDocumentTypeTaskStatusRequest.json"
          },
          "SuccessfulHealthcareTaskStatusRequest": {
            "$ref": "./examples/SuccessfulHealthcareTaskStatusRequest.json"
          }
        }
      }
    },
    "/language/analyze-text/jobs/{jobId}:cancel": {
      "post": {
        "operationId": "Language_Cancel",
        "summary": "Cancel a long-running Text Analysis job.",
        "description": "Cancel a long-running Text Analysis job.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location for monitoring the operation state."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "SuccessfulAnalyzeTextJobsCancelRequest": {
            "$ref": "./examples/SuccessfulAnalyzeTextJobsCancelRequest.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "AADToken": {
      "type": "object",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts.",
      "properties": {
        "type": {
          "type": "string",
          "description": "OAuth2 authentication",
          "enum": [
            "oauth2"
          ]
        },
        "flows": {
          "type": "array",
          "description": "Supported OAuth2 flows",
          "items": {}
        }
      },
      "required": [
        "type",
        "flows"
      ]
    },
    "AbstractiveSummarizationLROResult": {
      "type": "object",
      "description": "An object representing the results for an Abstractive Summarization task.",
      "properties": {
        "results": {
          "$ref": "#/definitions/AbstractiveSummarizationResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "AbstractiveSummarizationLROResults"
    },
    "AbstractiveSummarizationLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Abstractive Summarization task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/AbstractiveSummarizationTaskParameters"
        }
      },
      "required": [
        "parameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "AbstractiveSummarization"
    },
    "AbstractiveSummarizationResult": {
      "type": "object",
      "description": "An object representing the pre-build summarization results of each document.",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/AbstractiveSummaryDocumentResultWithDetectedLanguage"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ]
    },
    "AbstractiveSummarizationResultBase": {
      "type": "object",
      "description": "An object representing the summarization results of each document.",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/AbstractiveSummaryDocumentResultWithDetectedLanguage"
          }
        }
      },
      "required": [
        "documents"
      ]
    },
    "AbstractiveSummarizationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for the pre-build Abstractive Summarization task.",
      "properties": {
        "sentenceCount": {
          "type": "integer",
          "format": "int32",
          "description": "Controls the approximate number of sentences in the output summaries."
        },
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType",
          "description": "String index type"
        },
        "summaryLength": {
          "$ref": "#/definitions/SummaryLengthBucket",
          "description": "(NOTE: Recommended to use summaryLength over sentenceCount) Controls the approximate length of the output summaries."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "AbstractiveSummarizationTaskParametersBase": {
      "type": "object",
      "description": "Supported parameters for an Abstractive Summarization task.",
      "properties": {
        "sentenceCount": {
          "type": "integer",
          "format": "int32",
          "description": "Controls the approximate number of sentences in the output summaries."
        },
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType",
          "description": "String index type"
        },
        "summaryLength": {
          "$ref": "#/definitions/SummaryLengthBucket",
          "description": "(NOTE: Recommended to use summaryLength over sentenceCount) Controls the approximate length of the output summaries."
        }
      }
    },
    "AbstractiveSummary": {
      "type": "object",
      "description": "An object representing a single summary with context for given document.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text of the summary."
        },
        "contexts": {
          "type": "array",
          "description": "The context list of the summary.",
          "items": {
            "$ref": "#/definitions/SummaryContext"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "text"
      ]
    },
    "AbstractiveSummaryDocumentResult": {
      "type": "object",
      "description": "An object representing the pre-build summarization results of each document.",
      "properties": {
        "summaries": {
          "type": "array",
          "description": "A list of abstractive summaries.",
          "items": {
            "$ref": "#/definitions/AbstractiveSummary"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "summaries"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "AbstractiveSummaryDocumentResultWithDetectedLanguage": {
      "type": "object",
      "description": "An object representing the summarization result of a single document with detected language.",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AbstractiveSummaryDocumentResult"
        }
      ]
    },
    "AgeMetadata": {
      "type": "object",
      "description": "Represents the Age entity Metadata model.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        },
        "unit": {
          "$ref": "#/definitions/AgeUnit"
        }
      },
      "required": [
        "value",
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "AgeMetadata"
    },
    "AgeUnit": {
      "type": "string",
      "description": "The Age Unit of measurement",
      "enum": [
        "Unspecified",
        "Year",
        "Month",
        "Week",
        "Day"
      ],
      "x-ms-enum": {
        "name": "AgeUnit",
        "modelAsString": true
      }
    },
    "AllowOverlapEntityPolicyType": {
      "type": "object",
      "description": "Represents the allow overlap policy. Will apply no post processing logic for the entities. Whatever the model predicts is what will be returned to the user. This allows the user to get a full view of every single model's possible values and apply their own custom logic on entity selection",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntityOverlapPolicy"
        }
      ],
      "x-ms-discriminator-value": "allowOverlap"
    },
    "AnalyzeTextDocumentError": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Document Id."
        },
        "error": {
          "$ref": "#/definitions/Error",
          "description": "Document Error."
        }
      },
      "required": [
        "id",
        "error"
      ]
    },
    "AnalyzeTextDynamicClassificationInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/DynamicClassificationTaskParameters"
        }
      },
      "required": [
        "analysisInput",
        "parameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "DynamicClassification"
    },
    "AnalyzeTextEntityLinkingInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/EntityLinkingTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "EntityLinking"
    },
    "AnalyzeTextEntityRecognitionInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/EntitiesTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "EntityRecognition"
    },
    "AnalyzeTextJobErrors": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "errors"
      ]
    },
    "AnalyzeTextJobState": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "display name"
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time job created"
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time job expires"
        },
        "jobId": {
          "type": "string",
          "description": "job ID",
          "readOnly": true
        },
        "lastUpdatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "last updated date and time"
        },
        "status": {
          "$ref": "#/definitions/State",
          "description": "status"
        },
        "errors": {
          "type": "array",
          "description": "errors",
          "items": {
            "$ref": "#/definitions/ErrorResponse"
          },
          "x-ms-identifiers": []
        },
        "nextlink": {
          "type": "string",
          "description": "next link"
        },
        "tasks": {
          "$ref": "#/definitions/Tasks"
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        }
      },
      "required": [
        "createdDateTime",
        "jobId",
        "lastUpdatedDateTime",
        "status",
        "tasks"
      ]
    },
    "AnalyzeTextJobStatistics": {
      "type": "object",
      "properties": {
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        }
      }
    },
    "AnalyzeTextJobsInput": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalyzeTextLROTask"
          },
          "x-ms-identifiers": []
        },
        "defaultLanguage": {
          "type": "string",
          "description": "Default language to use for records requesting automatic language detection."
        }
      },
      "required": [
        "analysisInput",
        "tasks"
      ]
    },
    "AnalyzeTextKeyPhraseExtractionInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/KeyPhraseTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "KeyPhraseExtraction"
    },
    "AnalyzeTextLROResult": {
      "type": "object",
      "description": "Returns the current state of the task.",
      "properties": {
        "lastUpdateDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The last updated time in UTC for the task."
        },
        "status": {
          "$ref": "#/definitions/State",
          "description": "The status of the task at the mentioned last update time."
        },
        "taskName": {
          "type": "string",
          "description": "task name"
        },
        "kind": {
          "$ref": "#/definitions/AnalyzeTextLROResultsKind"
        }
      },
      "discriminator": "kind",
      "required": [
        "lastUpdateDateTime",
        "status",
        "kind"
      ]
    },
    "AnalyzeTextLROResultsKind": {
      "type": "string",
      "enum": [
        "SentimentAnalysisLROResults",
        "EntityRecognitionLROResults",
        "PiiEntityRecognitionLROResults",
        "KeyPhraseExtractionLROResults",
        "EntityLinkingLROResults",
        "HealthcareLROResults",
        "CustomEntityRecognitionLROResults",
        "CustomSingleLabelClassificationLROResults",
        "CustomMultiLabelClassificationLROResults",
        "ExtractiveSummarizationLROResults",
        "AbstractiveSummarizationLROResults",
        "CustomHealthcareLROResults",
        "CustomSentimentAnalysisLROResults",
        "CustomAbstractiveSummarizationLROResults"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextLROResultsKind",
        "modelAsString": true
      }
    },
    "AnalyzeTextLROTask": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextLROTaskKind",
          "description": "The kind of task to perform."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TaskIdentifier"
        }
      ]
    },
    "AnalyzeTextLROTaskKind": {
      "type": "string",
      "enum": [
        "SentimentAnalysis",
        "EntityRecognition",
        "PiiEntityRecognition",
        "KeyPhraseExtraction",
        "EntityLinking",
        "Healthcare",
        "CustomEntityRecognition",
        "CustomSingleLabelClassification",
        "CustomMultiLabelClassification",
        "ExtractiveSummarization",
        "AbstractiveSummarization",
        "CustomHealthcare",
        "CustomSentimentAnalysis",
        "CustomAbstractiveSummarization"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextLROTaskKind",
        "modelAsString": true
      }
    },
    "AnalyzeTextLanguageDetectionInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/LanguageDetectionAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/LanguageDetectionTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "LanguageDetection"
    },
    "AnalyzeTextPIIEntitiesRecognitionInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/PIITaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "PiiEntityRecognition"
    },
    "AnalyzeTextPreBuiltResult": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/AnalyzeTextDocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        },
        "modelVersion": {
          "type": "string",
          "description": "This field indicates which model is used for scoring."
        }
      },
      "required": [
        "errors",
        "modelVersion"
      ]
    },
    "AnalyzeTextSentimentAnalysisInput": {
      "type": "object",
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/SentimentAnalysisTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "SentimentAnalysis"
    },
    "AnalyzeTextTask": {
      "type": "object",
      "description": "Collection of documents to analyze and a single task to execute.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextTaskKind",
          "description": "The kind of task to perform."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "AnalyzeTextTaskKind": {
      "type": "string",
      "enum": [
        "SentimentAnalysis",
        "EntityRecognition",
        "PiiEntityRecognition",
        "KeyPhraseExtraction",
        "LanguageDetection",
        "EntityLinking",
        "DynamicClassification"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextTaskKind",
        "modelAsString": true
      }
    },
    "AnalyzeTextTaskResult": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextTaskResultsKind",
          "description": "The kind of task result."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "AnalyzeTextTaskResultsKind": {
      "type": "string",
      "enum": [
        "SentimentAnalysisResults",
        "EntityRecognitionResults",
        "PiiEntityRecognitionResults",
        "KeyPhraseExtractionResults",
        "LanguageDetectionResults",
        "EntityLinkingResults",
        "DynamicClassificationResults"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextTaskResultsKind",
        "modelAsString": true
      }
    },
    "AnswerSpan": {
      "type": "object",
      "description": "Answer span object of QnA.",
      "properties": {
        "text": {
          "type": "string",
          "description": "Predicted text of answer span."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Predicted score of answer span, value ranges from 0 to 1.",
          "minimum": 0,
          "maximum": 1
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The answer span offset from the start of answer."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the answer span."
        }
      }
    },
    "AnswersOptions": {
      "type": "object",
      "description": "Parameters to query a knowledge base.",
      "properties": {
        "qnaId": {
          "type": "integer",
          "format": "int32",
          "description": "Exact QnA ID to fetch from the knowledge base, this field takes priority over question."
        },
        "question": {
          "type": "string",
          "description": "User question to query against the knowledge base."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "Max number of answers to be returned for the question."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "confidenceScoreThreshold": {
          "type": "number",
          "format": "double",
          "description": "Minimum threshold score for answers, value ranges from 0 to 1.",
          "minimum": 0,
          "maximum": 1,
          "x-ms-client-name": "confidenceThreshold"
        },
        "context": {
          "$ref": "#/definitions/KnowledgeBaseAnswerContext",
          "description": "Context object with previous QnA's information.",
          "x-ms-client-name": "answerContext"
        },
        "rankerType": {
          "$ref": "#/definitions/RankerKind",
          "description": "Type of ranker to be used.",
          "x-ms-client-name": "rankerKind"
        },
        "filters": {
          "$ref": "#/definitions/QueryFilters",
          "description": "Filter QnAs based on given metadata list and knowledge base sources."
        },
        "answerSpanRequest": {
          "$ref": "#/definitions/ShortAnswerOptions",
          "description": "To configure Answer span prediction feature.",
          "x-ms-client-name": "shortAnswerOptions"
        },
        "includeUnstructuredSources": {
          "type": "boolean",
          "description": "(Optional) Flag to enable Query over Unstructured Sources."
        }
      }
    },
    "AnswersResult": {
      "type": "object",
      "description": "Represents List of Question Answers.",
      "properties": {
        "answers": {
          "type": "array",
          "description": "Represents Answer Result list.",
          "items": {
            "$ref": "#/definitions/KnowledgeBaseAnswer"
          }
        }
      }
    },
    "ApiVersionParameter": {
      "type": "object",
      "description": "Api Version Parameter",
      "properties": {
        "api-version": {
          "type": "string",
          "description": "Client Api Version."
        }
      },
      "required": [
        "api-version"
      ]
    },
    "AreaMetadata": {
      "type": "object",
      "description": "Represents the Area entity Metadata model.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        },
        "unit": {
          "$ref": "#/definitions/AreaUnit"
        }
      },
      "required": [
        "value",
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "AreaMetadata"
    },
    "AreaUnit": {
      "type": "string",
      "description": "The area unit of measurement.",
      "enum": [
        "Unspecified",
        "SquareKilometer",
        "SquareHectometer",
        "SquareDecameter",
        "SquareDecimeter",
        "SquareMeter",
        "SquareCentimeter",
        "SquareMillimeter",
        "SquareInch",
        "SquareFoot",
        "SquareMile",
        "SquareYard",
        "Acre"
      ],
      "x-ms-enum": {
        "name": "AreaUnit",
        "modelAsString": true
      }
    },
    "Association": {
      "type": "string",
      "description": "Describes if the entity is the subject of the text or if it describes someone else.",
      "enum": [
        "subject",
        "other"
      ],
      "x-ms-enum": {
        "name": "Association",
        "modelAsString": true
      }
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "BaseEntityOverlapPolicy": {
      "type": "object",
      "description": "The abstract base class for entity OverlapPolicy.",
      "properties": {
        "policyKind": {
          "$ref": "#/definitions/EntityOverlapPolicyKind",
          "description": "The entity OverlapPolicy object kind."
        }
      },
      "discriminator": "policyKind",
      "required": [
        "policyKind"
      ]
    },
    "BaseMetadata": {
      "type": "object",
      "description": "The abstract base class for entity Metadata.",
      "properties": {
        "metadataKind": {
          "$ref": "#/definitions/MetadataKind"
        }
      },
      "discriminator": "metadataKind",
      "required": [
        "metadataKind"
      ]
    },
    "BaseTemporalMetadata": {
      "type": "object",
      "properties": {
        "dateValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateValue"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "dateValues"
      ]
    },
    "Certainty": {
      "type": "string",
      "description": "Describes the entities certainty and polarity.",
      "enum": [
        "positive",
        "positivePossible",
        "neutralPossible",
        "negativePossible",
        "negative"
      ],
      "x-ms-enum": {
        "name": "Certainty",
        "modelAsString": true
      }
    },
    "ClassificationDocumentResult": {
      "type": "object",
      "properties": {
        "class": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassificationResult"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "class"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "ClassificationResult": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "Classification type."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the recognized class."
        }
      },
      "required": [
        "category",
        "confidenceScore"
      ]
    },
    "Code": {
      "type": "string",
      "enum": [
        "LongWordsInDocument",
        "DocumentTruncated"
      ],
      "x-ms-enum": {
        "name": "Code",
        "modelAsString": true
      }
    },
    "Conditionality": {
      "type": "string",
      "description": "Describes any conditionality on the entity.",
      "enum": [
        "hypothetical",
        "conditional"
      ],
      "x-ms-enum": {
        "name": "Conditionality",
        "modelAsString": true
      }
    },
    "CurrencyMetadata": {
      "type": "object",
      "description": "Represents the Currency ) entity Metadata model.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        },
        "unit": {
          "type": "string"
        },
        "iso4217": {
          "type": "string",
          "description": "The alphabetic code based on another ISO standard, ISO 3166, which lists the codes for country names. The first two letters of the ISO 4217 three-letter code are the same as the code for the country name, and, where possible, the third letter corresponds to the first letter of the currency name."
        }
      },
      "required": [
        "value",
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "CurrencyMetadata"
    },
    "CustomAbstractiveSummarizationLROResult": {
      "type": "object",
      "description": "An object representing the results for an Custom Abstractive Summarization task.",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomAbstractiveSummarizationResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "CustomAbstractiveSummarizationLROResults"
    },
    "CustomAbstractiveSummarizationLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Custom Abstractive Summarization task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomAbstractiveSummarizationTaskParameters"
        }
      },
      "required": [
        "parameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomAbstractiveSummarization"
    },
    "CustomAbstractiveSummarizationResult": {
      "type": "object",
      "description": "An object representing the custom summarization results of each document.",
      "properties": {
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics",
          "description": "if showStats=true was specified in the request this field will contain information about the request payload."
        },
        "projectName": {
          "type": "string",
          "description": "This field indicates the project name for the model."
        },
        "deploymentName": {
          "type": "string",
          "description": "This field indicates the deployment name for the model."
        }
      },
      "required": [
        "errors",
        "projectName",
        "deploymentName"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AbstractiveSummarizationResultBase"
        }
      ]
    },
    "CustomAbstractiveSummarizationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for the Custom Abstractive Summarization task.",
      "properties": {
        "loggingOptOut": {
          "type": "boolean",
          "description": "logging opt out",
          "default": false
        },
        "projectName": {
          "type": "string",
          "description": "This field indicates the project name for the model."
        },
        "deploymentName": {
          "type": "string",
          "description": "This field indicates the deployment name for the model."
        }
      },
      "required": [
        "projectName",
        "deploymentName"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AbstractiveSummarizationTaskParametersBase"
        }
      ]
    },
    "CustomEntitiesLROTask": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomEntitiesTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomEntityRecognition"
    },
    "CustomEntitiesResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntitiesDocumentResult"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CustomResult"
        }
      ]
    },
    "CustomEntitiesResultWithDocumentDetectedLanguage": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        },
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntitiesDocumentResult"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CustomResult"
        }
      ]
    },
    "CustomEntitiesTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Entities task.",
      "properties": {
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomEntityRecognitionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomEntitiesResultWithDocumentDetectedLanguage"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "CustomEntityRecognitionLROResults"
    },
    "CustomHealthcareEntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "description": "Healthcare entities.",
          "items": {
            "$ref": "#/definitions/CustomHealthcareEntity"
          },
          "x-ms-identifiers": []
        },
        "relations": {
          "type": "array",
          "description": "Healthcare entity relations.",
          "items": {
            "$ref": "#/definitions/HealthcareRelation"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "entities",
        "relations"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CustomHealthcareEntitiesDocumentResult"
        }
      ]
    },
    "CustomHealthcareEntity": {
      "type": "object",
      "properties": {
        "entityComponentInformation": {
          "type": "array",
          "description": "(Optional) Entity component information listing fired components of the extracted entity. This object only applies for custom healthcare.",
          "items": {
            "$ref": "#/definitions/EntityComponentInformation"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/HealthcareEntity"
        }
      ]
    },
    "CustomHealthcareLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomHealthcareResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "CustomHealthcareLROResults"
    },
    "CustomHealthcareLROTask": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomHealthcareTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomHealthcare"
    },
    "CustomHealthcareResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomHealthcareEntitiesDocumentResultWithDocumentDetectedLanguage"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CustomResult"
        }
      ]
    },
    "CustomHealthcareTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a custom Healthcare task.",
      "properties": {
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomLabelClassificationResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/ClassificationDocumentResult"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CustomResult"
        }
      ]
    },
    "CustomLabelClassificationResultWithDocumentDetectedLanguage": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CustomLabelClassificationResult"
        }
      ]
    },
    "CustomMultiLabelClassificationLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomLabelClassificationResultWithDocumentDetectedLanguage"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "CustomMultiLabelClassificationLROResults"
    },
    "CustomMultiLabelClassificationLROTask": {
      "type": "object",
      "description": "Use custom models to classify text into multi label taxonomy",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomMultiLabelClassificationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomMultiLabelClassification"
    },
    "CustomMultiLabelClassificationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Multi Classification task.",
      "allOf": [
        {
          "$ref": "#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomResult": {
      "type": "object",
      "description": "Custom Task Results",
      "properties": {
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics",
          "description": "if showStats=true was specified in the request this field will contain information about the request payload."
        },
        "projectName": {
          "type": "string",
          "description": "This field indicates the project name for the model."
        },
        "deploymentName": {
          "type": "string",
          "description": "This field indicates the deployment name for the model."
        }
      },
      "required": [
        "errors",
        "projectName",
        "deploymentName"
      ]
    },
    "CustomSentenceSentiment": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The sentence text."
        },
        "sentiment": {
          "$ref": "#/definitions/SentimentValue",
          "description": "The predicted Sentiment for the sentence."
        },
        "confidenceScores": {
          "$ref": "#/definitions/SentimentConfidenceScores",
          "description": "The sentiment confidence score between 0 and 1 for the sentence for all classes."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The target offset from the start of the sentence."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the target."
        }
      },
      "required": [
        "text",
        "sentiment",
        "confidenceScores",
        "offset",
        "length"
      ]
    },
    "CustomSentimentAnalysisLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomSentimentAnalysisResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "CustomSentimentAnalysisLROResults"
    },
    "CustomSentimentAnalysisLROTask": {
      "type": "object",
      "description": "Use custom models to ease the process of sentiment analysis from documents like product reviews",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomSentimentAnalysisTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomSentimentAnalysis"
    },
    "CustomSentimentAnalysisResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomSentimentAnalysisResultDocument"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CustomResult"
        }
      ]
    },
    "CustomSentimentAnalysisResultDocument": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CustomSentimentDocumentResult"
        }
      ]
    },
    "CustomSentimentAnalysisTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Sentiment Analysis task.",
      "properties": {
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomSentimentDocumentResult": {
      "type": "object",
      "properties": {
        "sentiment": {
          "$ref": "#/definitions/Sentiment",
          "description": "Predicted sentiment for document (Negative, Neutral, Positive, or Mixed)."
        },
        "confidenceScores": {
          "$ref": "#/definitions/SentimentConfidenceScores",
          "description": "The sentiment confidence score between 0 and 1 for the sentence for all classes."
        },
        "sentences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomSentenceSentiment"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "sentiment",
        "confidenceScores",
        "sentences"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "CustomSingleLabelClassificationLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomLabelClassificationResultWithDocumentDetectedLanguage"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "CustomSingleLabelClassificationLROResults"
    },
    "CustomSingleLabelClassificationLROTask": {
      "type": "object",
      "description": "Use custom models to classify text into single label taxonomy",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomSingleLabelClassificationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomSingleLabelClassification"
    },
    "CustomSingleLabelClassificationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Single Classification task.",
      "allOf": [
        {
          "$ref": "#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomTaskParameters": {
      "type": "object",
      "description": "Parameters object for a text analysis task using custom models.",
      "properties": {
        "loggingOptOut": {
          "type": "boolean",
          "description": "logging opt out",
          "default": false
        },
        "projectName": {
          "type": "string",
          "description": "This field indicates the project name for the model."
        },
        "deploymentName": {
          "type": "string",
          "description": "This field indicates the deployment name for the model."
        }
      },
      "required": [
        "projectName",
        "deploymentName"
      ]
    },
    "DateMetadata": {
      "type": "object",
      "description": "A Metadata for date entity instances.",
      "properties": {
        "dateValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateValue"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "dateValues"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "DateMetadata"
    },
    "DateTimeMetadata": {
      "type": "object",
      "description": "A Metadata for datetime entity instances.",
      "properties": {
        "dateValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateValue"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "dateValues"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "DateTimeMetadata"
    },
    "DateValue": {
      "type": "object",
      "description": "Represents the date value.",
      "properties": {
        "timex": {
          "type": "string",
          "description": "An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml)"
        },
        "value": {
          "type": "string",
          "description": "The actual time that the extracted text denote."
        },
        "modifier": {
          "$ref": "#/definitions/TemporalModifier"
        }
      },
      "required": [
        "timex",
        "value"
      ]
    },
    "DetectedLanguage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Long name of a detected language (e.g. English, French)."
        },
        "iso6391Name": {
          "type": "string",
          "description": "A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr)."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true."
        },
        "script": {
          "$ref": "#/definitions/ScriptKind",
          "description": "Identifies the script of the input document."
        },
        "scriptCode": {
          "$ref": "#/definitions/ScriptCode",
          "description": "Identifies the script of the input document."
        }
      },
      "required": [
        "name",
        "iso6391Name",
        "confidenceScore"
      ]
    },
    "DocumentDetectedLanguage": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      }
    },
    "DocumentError": {
      "type": "object",
      "description": "Contains details of errors encountered during a job execution.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the input document."
        },
        "error": {
          "$ref": "#/definitions/ErrorResponse",
          "description": "Error encountered."
        }
      },
      "required": [
        "id",
        "error"
      ]
    },
    "DocumentRequestStatistics": {
      "type": "object",
      "description": "if showStats=true was specified in the request this field will contain information about the document request payload.",
      "properties": {
        "documentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of documents submitted in the request."
        },
        "validDocumentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of valid documents. This excludes empty, over-size limit or non-supported languages documents."
        },
        "erroneousDocumentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of invalid documents. This includes empty, over-size limit or non-supported languages documents."
        }
      },
      "required": [
        "documentsCount",
        "validDocumentsCount",
        "erroneousDocumentsCount"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RequestStatistics"
        }
      ]
    },
    "DocumentResponse": {
      "type": "object"
    },
    "DocumentResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "warnings": {
          "type": "array",
          "description": "Warnings encountered while processing document.",
          "items": {
            "$ref": "#/definitions/DocumentWarning"
          },
          "x-ms-identifiers": []
        },
        "statistics": {
          "$ref": "#/definitions/DocumentStatistics",
          "description": "if showStats=true was specified in the request this field will contain information about the document payload."
        }
      },
      "required": [
        "id",
        "warnings"
      ]
    },
    "DocumentStatistics": {
      "type": "object",
      "description": "if showStats=true was specified in the request this field will contain information about the document payload.",
      "properties": {
        "charactersCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of text elements recognized in the document."
        },
        "transactionsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of transactions for the document."
        }
      },
      "required": [
        "charactersCount",
        "transactionsCount"
      ]
    },
    "DocumentWarning": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/Code"
        },
        "message": {
          "type": "string",
          "description": "Warning message."
        },
        "targetRef": {
          "type": "string",
          "description": "A JSON pointer reference indicating the target object."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "DynamicClassificationDocumentResult": {
      "type": "object",
      "properties": {
        "classifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassificationResult"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "classifications"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "DynamicClassificationResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/DynamicClassificationDocumentResult"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ]
    },
    "DynamicClassificationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Dynamic Classification task.",
      "properties": {
        "classificationType": {
          "$ref": "#/definitions/DynamicClassificationType",
          "description": "Specifies either one or multiple categories per document. Defaults to multi classification which may return more than one class for each document.",
          "default": "Multi"
        },
        "categories": {
          "type": "array",
          "description": "a list of categories to which input is classified to.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "classificationType",
        "categories"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "DynamicClassificationTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/DynamicClassificationResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "x-ms-discriminator-value": "DynamicClassificationResults"
    },
    "DynamicClassificationType": {
      "type": "string",
      "description": "Specifies either one or multiple categories per document. Defaults to multi classification which may return more than one class for each document.",
      "enum": [
        "Multi",
        "Single"
      ],
      "x-ms-enum": {
        "name": "DynamicClassificationType",
        "modelAsString": true
      }
    },
    "EntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "description": "Recognized entities in the document.",
          "items": {
            "$ref": "#/definitions/Entity"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "entities"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "EntitiesDocumentResultWithMetadata": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "description": "Recognized entities in the document.",
          "items": {
            "$ref": "#/definitions/EntityWithMetadata"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "entities"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "EntitiesDocumentResultWithMetadataDetectedLanguage": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/EntitiesDocumentResultWithMetadata"
        }
      ]
    },
    "EntitiesLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Entities Recognition task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/EntitiesTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "EntityRecognition"
    },
    "EntitiesResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/EntitiesDocumentResultWithMetadataDetectedLanguage"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextPreBuiltResult"
        }
      ]
    },
    "EntitiesTaskParameters": {
      "type": "object",
      "description": "Supported parameters for an Entity Recognition task.",
      "properties": {
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType"
        },
        "inclusionList": {
          "type": "array",
          "description": "(Optional) request parameter that limits the output to the requested entity types included in this list. We will apply inclusionList before exclusionList",
          "items": {
            "$ref": "#/definitions/EntityCategory"
          }
        },
        "exclusionList": {
          "type": "array",
          "description": "(Optional) request parameter that filters out any entities that are included the excludeList. When a user specifies an excludeList, they cannot get a prediction returned with an entity in that list. We will apply inclusionList before exclusionList",
          "items": {
            "$ref": "#/definitions/EntityCategory"
          }
        },
        "overlapPolicy": {
          "$ref": "#/definitions/BaseEntityOverlapPolicy",
          "description": "(Optional) describes the type of overlap policy to apply to the ner output."
        },
        "inferenceOptions": {
          "$ref": "#/definitions/EntityInferenceOptions",
          "description": "(Optional) request parameter that allows the user to provide settings for running the inference."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "EntitiesTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntitiesResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "x-ms-discriminator-value": "EntityRecognitionResults"
    },
    "Entity": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "category": {
          "type": "string",
          "description": "Entity type."
        },
        "subcategory": {
          "type": "string",
          "description": "(Optional) Entity sub type."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity text. Use of different 'stringIndexType' values can affect the length returned."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the extracted entity."
        }
      },
      "required": [
        "text",
        "category",
        "offset",
        "length",
        "confidenceScore"
      ]
    },
    "EntityCategory": {
      "type": "string",
      "enum": [
        "Address",
        "Numeric",
        "Age",
        "Currency",
        "Number",
        "NumberRange",
        "Percentage",
        "Ordinal",
        "Temperature",
        "Dimension",
        "Length",
        "Weight",
        "Height",
        "Speed",
        "Area",
        "Volume",
        "Information",
        "Temporal",
        "Date",
        "Time",
        "DateTime",
        "DateRange",
        "TimeRange",
        "DateTimeRange",
        "Duration",
        "SetTemporal",
        "Event",
        "SportsEvent",
        "CulturalEvent",
        "NaturalEvent",
        "Location",
        "GPE",
        "City",
        "State",
        "CountryRegion",
        "Continent",
        "Structural",
        "Airport",
        "Geological",
        "Organization",
        "OrganizationMedical",
        "OrganizationStockExchange",
        "OrganizationSports",
        "Person",
        "PersonType",
        "Email",
        "URL",
        "IP",
        "PhoneNumber",
        "Product",
        "ComputingProduct",
        "Skill"
      ],
      "x-ms-enum": {
        "name": "EntityCategory",
        "modelAsString": true,
        "values": [
          {
            "name": "Address",
            "value": "Address",
            "description": "Specific street-level mentions of locations: house/building numbers, streets, avenues, highways, intersections referenced by name."
          },
          {
            "name": "Numeric",
            "value": "Numeric",
            "description": "Numeric values, including digits and number words."
          },
          {
            "name": "Age",
            "value": "Age",
            "description": "Age-related values."
          },
          {
            "name": "Currency",
            "value": "Currency",
            "description": "Currency-related values."
          },
          {
            "name": "Number",
            "value": "Number",
            "description": "Numbers without a unit"
          },
          {
            "name": "NumberRange",
            "value": "NumberRange",
            "description": "Range of Numbers"
          },
          {
            "name": "Percentage",
            "value": "Percentage",
            "description": "Percentage-related values."
          },
          {
            "name": "Ordinal",
            "value": "Ordinal",
            "description": "Ordinal numbers."
          },
          {
            "name": "Temperature",
            "value": "Temperature",
            "description": "Temperature-related values."
          },
          {
            "name": "Dimension",
            "value": "Dimension",
            "description": "Dimension of measurements"
          },
          {
            "name": "Length",
            "value": "Length",
            "description": "Length of an object."
          },
          {
            "name": "Weight",
            "value": "Weight",
            "description": "Weight of an object."
          },
          {
            "name": "Height",
            "value": "Height",
            "description": "Height of an object."
          },
          {
            "name": "Speed",
            "value": "Speed",
            "description": "Speed of an object."
          },
          {
            "name": "Area",
            "value": "Area",
            "description": "Area of an object."
          },
          {
            "name": "Volume",
            "value": "Volume",
            "description": "Volume of an object."
          },
          {
            "name": "Information",
            "value": "Information",
            "description": "Unit of measure for digital information."
          },
          {
            "name": "Temporal",
            "value": "Temporal",
            "description": "Items relating to time."
          },
          {
            "name": "Date",
            "value": "Date",
            "description": "Calendar dates."
          },
          {
            "name": "Time",
            "value": "Time",
            "description": "Times of day."
          },
          {
            "name": "DateTime",
            "value": "DateTime",
            "description": "Calendar dates with time."
          },
          {
            "name": "DateRange",
            "value": "DateRange",
            "description": "Range of dates."
          },
          {
            "name": "TimeRange",
            "value": "TimeRange",
            "description": "Range of times."
          },
          {
            "name": "DateTimeRange",
            "value": "DateTimeRange",
            "description": "Range of date and time."
          },
          {
            "name": "Duration",
            "value": "Duration",
            "description": "Duration of time."
          },
          {
            "name": "SetTemporal",
            "value": "SetTemporal",
            "description": "Set of time-related values."
          },
          {
            "name": "Event",
            "value": "Event",
            "description": "Social, sports, business, political, educational, natural, historical, criminal, violent, legal, military events with a timed period."
          },
          {
            "name": "SportsEvent",
            "value": "SportsEvent",
            "description": "Sports event-related values."
          },
          {
            "name": "CulturalEvent",
            "value": "CulturalEvent",
            "description": "Cultural event-related values."
          },
          {
            "name": "NaturalEvent",
            "value": "NaturalEvent",
            "description": "Natural event-related values."
          },
          {
            "name": "Location",
            "value": "Location",
            "description": "Particular point or place in physical space."
          },
          {
            "name": "GPE",
            "value": "GPE",
            "description": "Cities, countries/regions, states."
          },
          {
            "name": "City",
            "value": "City",
            "description": "City-related values."
          },
          {
            "name": "State",
            "value": "State",
            "description": "State-related values."
          },
          {
            "name": "CountryRegion",
            "value": "CountryRegion",
            "description": "Country or region-related values."
          },
          {
            "name": "Continent",
            "value": "Continent",
            "description": "Continent-related values."
          },
          {
            "name": "Structural",
            "value": "Structural",
            "description": "Manmade structures."
          },
          {
            "name": "Airport",
            "value": "Airport",
            "description": "Airports."
          },
          {
            "name": "Geological",
            "value": "Geological",
            "description": "Geographic and natural features such as rivers, oceans, and deserts."
          },
          {
            "name": "Organization",
            "value": "Organization",
            "description": "Corporations, agencies, and other groups of people defined by some established organizational structure. These labels can include companies, political parties/movements, musical bands, sport clubs, government bodies, and public organizations. Nationalities or religions are not ORGANIZATION."
          },
          {
            "name": "OrganizationMedical",
            "value": "OrganizationMedical",
            "description": "Medical companies and groups."
          },
          {
            "name": "OrganizationStockExchange",
            "value": "OrganizationStockExchange",
            "description": "Stock exchange groups."
          },
          {
            "name": "OrganizationSports",
            "value": "OrganizationSports",
            "description": "Sports-related organizations."
          },
          {
            "name": "Person",
            "value": "Person",
            "description": "First, last, and middle names, names of fictional characters, and aliases. Titles, such as 'Mr.' or 'President', are not considered part of the named entity."
          },
          {
            "name": "PersonType",
            "value": "PersonType",
            "description": "Human roles classified by a group membership."
          },
          {
            "name": "Email",
            "value": "Email",
            "description": "Email addresses."
          },
          {
            "name": "URL",
            "value": "URL",
            "description": "URLs to websites."
          },
          {
            "name": "IP",
            "value": "IP",
            "description": "network IP addresses."
          },
          {
            "name": "PhoneNumber",
            "value": "PhoneNumber",
            "description": "Phone numbers (US and EU phone numbers only)."
          },
          {
            "name": "Product",
            "value": "Product",
            "description": "Single or group of commercial, consumable objects, electronics, vehicles, food groups."
          },
          {
            "name": "ComputingProduct",
            "value": "ComputingProduct",
            "description": "Computing products."
          },
          {
            "name": "Skill",
            "value": "Skill",
            "description": "A capability, skill, or expertise."
          }
        ]
      }
    },
    "EntityComponentInformation": {
      "type": "object",
      "description": "This object contains information of the detected entity components. The possible component types may expand in the future. Parsing code should handle unexpected values gracefully",
      "properties": {
        "entityComponentKind": {
          "$ref": "#/definitions/EntityComponentKind"
        }
      },
      "discriminator": "entityComponentKind",
      "required": [
        "entityComponentKind"
      ]
    },
    "EntityComponentKind": {
      "type": "string",
      "enum": [
        "PrebuiltComponent",
        "LearnedComponent",
        "ListComponent"
      ],
      "x-ms-enum": {
        "name": "EntityComponentKind",
        "modelAsString": true
      }
    },
    "EntityInferenceOptions": {
      "type": "object",
      "description": "The class that houses the inference options allowed for named entity recognition.",
      "properties": {
        "excludeNormalizedValues": {
          "type": "boolean",
          "description": "Option to include/exclude the detected entity values to be normalized and included in the metadata. The numeric and temporal entity types support value normalization.",
          "default": false
        }
      },
      "required": [
        "excludeNormalizedValues"
      ]
    },
    "EntityLinkingLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntityLinkingResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "EntityLinkingLROResults"
    },
    "EntityLinkingLROTask": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/EntityLinkingTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "EntityLinking"
    },
    "EntityLinkingResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/EntityLinkingResultWithDetectedLanguage"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextPreBuiltResult"
        }
      ]
    },
    "EntityLinkingResultWithDetectedLanguage": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LinkedEntitiesDocumentResult"
        }
      ]
    },
    "EntityLinkingTaskParameters": {
      "type": "object",
      "description": "Supported parameters for an Entity Linking task.",
      "properties": {
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "EntityLinkingTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntityLinkingResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "x-ms-discriminator-value": "EntityLinkingResults"
    },
    "EntityOverlapPolicyKind": {
      "type": "string",
      "enum": [
        "matchLongest",
        "allowOverlap"
      ],
      "x-ms-enum": {
        "name": "EntityOverlapPolicyKind",
        "modelAsString": true,
        "values": [
          {
            "name": "matchLongest",
            "value": "matchLongest",
            "description": "Represents MatchLongestEntityPolicyType"
          },
          {
            "name": "allowOverlap",
            "value": "allowOverlap",
            "description": "Represents AllowOverlapEntityPolicyType"
          }
        ]
      }
    },
    "EntityRecognitionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntitiesResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "EntityRecognitionLROResults"
    },
    "EntityTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Tags are to express some similarities/affinity between entities. Entity Tags will be unique globally."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Detection score between 0 and 1 of the extracted entity."
        }
      },
      "required": [
        "name"
      ]
    },
    "EntityWithMetadata": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/BaseMetadata",
          "description": "The entity metadata object."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/EntityWithTags"
        }
      ]
    },
    "EntityWithTags": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "An entity type is the lowest (or finest) granularity at which the entity has been detected. The type maps to the specific metadata attributes associated with the entity detected."
        },
        "tags": {
          "type": "array",
          "description": "List of entity tags. Tags are to express some similarities/affinity between entities.",
          "items": {
            "$ref": "#/definitions/EntityTag"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "type",
        "tags"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        }
      ]
    },
    "Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "$ref": "#/definitions/ErrorCode",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/InnerErrorModel",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "ErrorCode": {
      "type": "string",
      "description": "Human-readable error code.",
      "enum": [
        "InvalidRequest",
        "InvalidArgument",
        "Unauthorized",
        "Forbidden",
        "NotFound",
        "ProjectNotFound",
        "OperationNotFound",
        "AzureCognitiveSearchNotFound",
        "AzureCognitiveSearchIndexNotFound",
        "TooManyRequests",
        "AzureCognitiveSearchThrottling",
        "AzureCognitiveSearchIndexLimitReached",
        "InternalServerError",
        "ServiceUnavailable",
        "Timeout",
        "QuotaExceeded",
        "Conflict",
        "Warning"
      ],
      "x-ms-enum": {
        "name": "ErrorCode",
        "modelAsString": true
      }
    },
    "ErrorResponse": {
      "type": "object",
      "description": "Error response.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        },
        "errorCode": {
          "type": "string",
          "description": "String error code indicating what went wrong."
        }
      },
      "required": [
        "error"
      ]
    },
    "ExtractedSummaryDocumentResult": {
      "type": "object",
      "description": "A ranked list of sentences representing the extracted summary.",
      "properties": {
        "sentences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtractedSummarySentence"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "sentences"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "ExtractedSummaryDocumentResultWithDetectedLanguage": {
      "type": "object",
      "description": "A ranked list of sentences representing the extracted summary.",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ExtractedSummaryDocumentResult"
        }
      ]
    },
    "ExtractedSummarySentence": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The extracted sentence text."
        },
        "rankScore": {
          "type": "number",
          "format": "double",
          "description": "A double value representing the relevance of the sentence within the summary. Higher values indicate higher importance."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The sentence offset from the start of the document, based on the value of the parameter StringIndexType."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the sentence."
        }
      },
      "required": [
        "text",
        "rankScore",
        "offset",
        "length"
      ]
    },
    "ExtractiveSummarizationLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/ExtractiveSummarizationResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "ExtractiveSummarizationLROResults"
    },
    "ExtractiveSummarizationLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Extractive Summarization task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/ExtractiveSummarizationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "ExtractiveSummarization"
    },
    "ExtractiveSummarizationResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/ExtractedSummaryDocumentResultWithDetectedLanguage"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ]
    },
    "ExtractiveSummarizationSortingCriteria": {
      "type": "string",
      "description": "The sorting criteria to use for the results of Extractive Summarization.",
      "enum": [
        "Offset",
        "Rank"
      ],
      "x-ms-enum": {
        "name": "ExtractiveSummarizationSortingCriteria",
        "modelAsString": true,
        "values": [
          {
            "name": "Offset",
            "value": "Offset",
            "description": "Indicates that results should be sorted in order of appearance in the text."
          },
          {
            "name": "Rank",
            "value": "Rank",
            "description": "Indicates that results should be sorted in order of importance (i.e. rank score) according to the model."
          }
        ]
      }
    },
    "ExtractiveSummarizationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for an Extractive Summarization task.",
      "properties": {
        "sentenceCount": {
          "type": "integer",
          "format": "int64",
          "default": 3
        },
        "sortBy": {
          "$ref": "#/definitions/ExtractiveSummarizationSortingCriteria",
          "default": "Offset"
        },
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType"
        },
        "query": {
          "type": "string",
          "description": "(Optional) If provided, the query will be used to extract most relevant sentences from the document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "HealthRelationType": {
      "type": "string",
      "description": "Type of relation. Examples include: `DosageOfMedication` or 'FrequencyOfMedication', etc.",
      "enum": [
        "Abbreviation",
        "DirectionOfBodyStructure",
        "DirectionOfCondition",
        "DirectionOfExamination",
        "DirectionOfTreatment",
        "DosageOfMedication",
        "FormOfMedication",
        "FrequencyOfMedication",
        "FrequencyOfTreatment",
        "QualifierOfCondition",
        "RelationOfExamination",
        "RouteOfMedication",
        "TimeOfCondition",
        "TimeOfEvent",
        "TimeOfExamination",
        "TimeOfMedication",
        "TimeOfTreatment",
        "UnitOfCondition",
        "UnitOfExamination",
        "ValueOfCondition",
        "ValueOfExamination",
        "BodySiteOfCondition",
        "BodySiteOfTreatment",
        "CourseOfCondition",
        "CourseOfExamination",
        "CourseOfMedication",
        "CourseOfTreatment",
        "ExaminationFindsCondition",
        "ExpressionOfGene",
        "ExpressionOfVariant",
        "FrequencyOfCondition",
        "MutationTypeOfGene",
        "MutationTypeOfVariant",
        "ScaleOfCondition",
        "VariantOfGene"
      ],
      "x-ms-enum": {
        "name": "HealthRelationType",
        "modelAsString": true
      }
    },
    "HealthcareAssertion": {
      "type": "object",
      "properties": {
        "conditionality": {
          "$ref": "#/definitions/Conditionality",
          "description": "Describes any conditionality on the entity."
        },
        "certainty": {
          "$ref": "#/definitions/Certainty",
          "description": "Describes the entities certainty and polarity."
        },
        "association": {
          "$ref": "#/definitions/Association",
          "description": "Describes if the entity is the subject of the text or if it describes someone else."
        },
        "temporality": {
          "$ref": "#/definitions/Temporality",
          "description": "Describes temporal information regarding the entity."
        }
      },
      "required": [
        "temporality"
      ]
    },
    "HealthcareEntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "description": "Healthcare entities.",
          "items": {
            "$ref": "#/definitions/HealthcareEntity"
          },
          "x-ms-identifiers": []
        },
        "relations": {
          "type": "array",
          "description": "Healthcare entity relations.",
          "items": {
            "$ref": "#/definitions/HealthcareRelation"
          },
          "x-ms-identifiers": []
        },
        "fhirBundle": {
          "type": "object",
          "description": "JSON bundle containing a FHIR compatible object for consumption in other Healthcare tools. For additional information see https://www.hl7.org/fhir/overview.html.",
          "additionalProperties": {}
        }
      },
      "required": [
        "entities",
        "relations"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/HealthcareEntitiesDocumentResult"
        }
      ]
    },
    "HealthcareEntity": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "category": {
          "$ref": "#/definitions/HealthcareEntityCategory",
          "description": "Healthcare Entity Category."
        },
        "subcategory": {
          "type": "string",
          "description": "(Optional) Entity sub type."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity text. Use of different 'stringIndexType' values can affect the length returned."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the extracted entity."
        },
        "assertion": {
          "$ref": "#/definitions/HealthcareAssertion"
        },
        "name": {
          "type": "string",
          "description": "Preferred name for the entity. Example: 'histologically' would have a 'name' of 'histologic'."
        },
        "links": {
          "type": "array",
          "description": "Entity references in known data sources.",
          "items": {
            "$ref": "#/definitions/HealthcareEntityLink"
          }
        }
      },
      "required": [
        "text",
        "category",
        "offset",
        "length",
        "confidenceScore"
      ]
    },
    "HealthcareEntityCategory": {
      "type": "string",
      "description": "Healthcare Entity Category.",
      "enum": [
        "BodyStructure",
        "Age",
        "Gender",
        "ExaminationName",
        "Date",
        "Direction",
        "Frequency",
        "MeasurementValue",
        "MeasurementUnit",
        "RelationalOperator",
        "Time",
        "GeneOrProtein",
        "Variant",
        "AdministrativeEvent",
        "CareEnvironment",
        "HealthcareProfession",
        "Diagnosis",
        "SymptomOrSign",
        "ConditionQualifier",
        "MedicationClass",
        "MedicationName",
        "Dosage",
        "MedicationForm",
        "MedicationRoute",
        "FamilyRelation",
        "TreatmentName",
        "Ethnicity",
        "Course",
        "Expression",
        "MutationType",
        "ConditionScale",
        "Allergen",
        "Employment",
        "LivingStatus",
        "SubstanceUse",
        "SubstanceUseAmount"
      ],
      "x-ms-enum": {
        "name": "HealthcareEntityCategory",
        "modelAsString": true
      }
    },
    "HealthcareEntityLink": {
      "type": "object",
      "properties": {
        "dataSource": {
          "type": "string",
          "description": "Entity Catalog. Examples include: UMLS, CHV, MSH, etc."
        },
        "id": {
          "type": "string",
          "description": "Entity id in the given source catalog."
        }
      },
      "required": [
        "dataSource",
        "id"
      ]
    },
    "HealthcareLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/HealthcareResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "HealthcareLROResults"
    },
    "HealthcareLROTask": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/HealthcareTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "Healthcare"
    },
    "HealthcareRelation": {
      "type": "object",
      "description": "Every relation is an entity graph of a certain relationType, where all entities are connected and have specific roles within the relation context.",
      "properties": {
        "relationType": {
          "$ref": "#/definitions/HealthRelationType",
          "description": "Type of relation. Examples include: `DosageOfMedication` or 'FrequencyOfMedication', etc."
        },
        "entities": {
          "type": "array",
          "description": "The entities in the relation.",
          "items": {
            "$ref": "#/definitions/HealthcareRelationEntity"
          },
          "x-ms-identifiers": []
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the extracted relation."
        }
      },
      "required": [
        "relationType",
        "entities"
      ]
    },
    "HealthcareRelationEntity": {
      "type": "object",
      "properties": {
        "ref": {
          "type": "string",
          "description": "Reference link object, using a JSON pointer RFC 6901 (URI Fragment Identifier Representation), pointing to the entity ."
        },
        "role": {
          "type": "string",
          "description": "Role of entity in the relationship. For example: 'CD20-positive diffuse large B-cell lymphoma' has the following entities with their roles in parenthesis:  CD20 (GeneOrProtein), Positive (Expression), diffuse large B-cell lymphoma (Diagnosis)."
        }
      },
      "required": [
        "ref",
        "role"
      ]
    },
    "HealthcareResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextPreBuiltResult"
        }
      ]
    },
    "HealthcareTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Healthcare task.",
      "properties": {
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType"
        },
        "fhirVersion": {
          "$ref": "#/definitions/fhirVersion",
          "description": "The FHIR Spec version that the result will use to format the fhirBundle. For additional information see https://www.hl7.org/fhir/overview.html."
        },
        "documentType": {
          "$ref": "#/definitions/healthcareDocumentType",
          "description": "Document type that can be provided as input for Fhir Documents. Expect to have fhirVersion provided when used. Behavior of using None enum is the same as not using the documentType parameter."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "InformationMetadata": {
      "type": "object",
      "description": "Represents the Information (data) entity Metadata model.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        },
        "unit": {
          "$ref": "#/definitions/InformationUnit"
        }
      },
      "required": [
        "value",
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "InformationMetadata"
    },
    "InformationUnit": {
      "type": "string",
      "description": "The information (data) Unit of measurement.",
      "enum": [
        "Unspecified",
        "Bit",
        "Kilobit",
        "Megabit",
        "Gigabit",
        "Terabit",
        "Petabit",
        "Byte",
        "Kilobyte",
        "Megabyte",
        "Gigabyte",
        "Terabyte",
        "Petabyte"
      ],
      "x-ms-enum": {
        "name": "InformationUnit",
        "modelAsString": true
      }
    },
    "InnerErrorCode": {
      "type": "string",
      "description": "Human-readable error code.",
      "enum": [
        "InvalidRequest",
        "InvalidParameterValue",
        "KnowledgeBaseNotFound",
        "AzureCognitiveSearchNotFound",
        "AzureCognitiveSearchThrottling",
        "ExtractionFailure",
        "InvalidRequestBodyFormat",
        "EmptyRequest",
        "MissingInputDocuments",
        "InvalidDocument",
        "ModelVersionIncorrect",
        "InvalidDocumentBatch",
        "UnsupportedLanguageCode",
        "InvalidCountryHint"
      ],
      "x-ms-enum": {
        "name": "InnerErrorCode",
        "modelAsString": true
      }
    },
    "InnerErrorModel": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "$ref": "#/definitions/InnerErrorCode",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "Error message."
        },
        "details": {
          "type": "object",
          "description": "Error details.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "target": {
          "type": "string",
          "description": "Error target."
        },
        "innererror": {
          "$ref": "#/definitions/InnerErrorModel",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ],
      "allOf": [
        {
          "type": "object",
          "additionalProperties": {}
        }
      ]
    },
    "InputWarning": {
      "type": "object",
      "description": "Contains details of warnings encountered during a job execution.",
      "properties": {
        "code": {
          "type": "string",
          "description": "Warning code."
        },
        "message": {
          "type": "string",
          "description": "Warning message."
        },
        "targetRef": {
          "type": "string",
          "description": "A JSON pointer reference indicating the target object."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "JobErrors": {
      "type": "object",
      "description": "job errors",
      "properties": {
        "errors": {
          "type": "array",
          "description": "errors",
          "items": {
            "$ref": "#/definitions/ErrorResponse"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "errors"
      ]
    },
    "JobState": {
      "type": "object",
      "description": "job state",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "display name"
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time job created"
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time job expires"
        },
        "jobId": {
          "type": "string",
          "description": "job ID",
          "readOnly": true
        },
        "lastUpdatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "last updated date and time"
        },
        "status": {
          "$ref": "#/definitions/State",
          "description": "status"
        },
        "errors": {
          "type": "array",
          "description": "errors",
          "items": {
            "$ref": "#/definitions/ErrorResponse"
          },
          "x-ms-identifiers": []
        },
        "nextlink": {
          "type": "string",
          "description": "next link"
        }
      },
      "required": [
        "createdDateTime",
        "jobId",
        "lastUpdatedDateTime",
        "status"
      ]
    },
    "KeyPhraseExtractionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/KeyPhraseResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "KeyPhraseExtractionLROResults"
    },
    "KeyPhraseLROTask": {
      "type": "object",
      "description": "An object representing the task definition for a Key Phrase Extraction task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/KeyPhraseTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "KeyPhraseExtraction"
    },
    "KeyPhraseResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/KeyPhrasesDocumentResultWithDetectedLanguage"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextPreBuiltResult"
        }
      ]
    },
    "KeyPhraseTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Key Phrase Extraction task.",
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "KeyPhraseTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/KeyPhraseResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "x-ms-discriminator-value": "KeyPhraseExtractionResults"
    },
    "KeyPhrasesDocumentResult": {
      "type": "object",
      "properties": {
        "keyPhrases": {
          "type": "array",
          "description": "A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "keyPhrases"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "KeyPhrasesDocumentResultWithDetectedLanguage": {
      "type": "object",
      "description": "A ranked list of sentences representing the extracted summary.",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KeyPhrasesDocumentResult"
        }
      ]
    },
    "KnowledgeBaseAnswer": {
      "type": "object",
      "description": "Represents knowledge base answer.",
      "properties": {
        "questions": {
          "type": "array",
          "description": "List of questions associated with the answer.",
          "items": {
            "type": "string"
          }
        },
        "answer": {
          "type": "string",
          "description": "Answer text."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Answer confidence score, value ranges from 0 to 1.",
          "minimum": 0,
          "maximum": 1,
          "x-ms-client-name": "confidence"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the QnA result.",
          "x-ms-client-name": "qnaId"
        },
        "source": {
          "type": "string",
          "description": "Source of QnA result."
        },
        "metadata": {
          "type": "object",
          "description": "Metadata associated with the answer, useful to categorize or filter question answers.",
          "additionalProperties": {}
        },
        "dialog": {
          "$ref": "#/definitions/KnowledgeBaseAnswerDialog",
          "description": "Dialog associated with Answer."
        },
        "answerSpan": {
          "$ref": "#/definitions/AnswerSpan",
          "description": "Answer span object of QnA with respect to user's question.",
          "x-ms-client-name": "shortAnswer"
        }
      }
    },
    "KnowledgeBaseAnswerContext": {
      "type": "object",
      "description": "Context object with previous QnA's information.",
      "properties": {
        "previousQnaId": {
          "type": "integer",
          "format": "int32",
          "description": "Previous turn top answer result QnA ID."
        },
        "previousUserQuery": {
          "type": "string",
          "description": "Previous user query.",
          "x-ms-client-name": "previousQuestion"
        }
      },
      "required": [
        "previousQnaId"
      ]
    },
    "KnowledgeBaseAnswerDialog": {
      "type": "object",
      "description": "Dialog associated with Answer.",
      "properties": {
        "isContextOnly": {
          "type": "boolean",
          "description": "To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as search result for queries without context; otherwise, if false, ignores context and includes this QnA in search result."
        },
        "prompts": {
          "type": "array",
          "description": "List of prompts associated with the answer.",
          "maxItems": 20,
          "items": {
            "$ref": "#/definitions/KnowledgeBaseAnswerPrompt"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "KnowledgeBaseAnswerPrompt": {
      "type": "object",
      "description": "Prompt for an answer.",
      "properties": {
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "Index of the prompt - used in ordering of the prompts."
        },
        "qnaId": {
          "type": "integer",
          "format": "int32",
          "description": "QnA ID corresponding to the prompt."
        },
        "displayText": {
          "type": "string",
          "description": "Text displayed to represent a follow up question prompt.",
          "maxLength": 200
        }
      },
      "required": [
        "displayOrder",
        "qnaId",
        "displayText"
      ]
    },
    "LanguageDetectionAnalysisInput": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageInput"
          }
        }
      }
    },
    "LanguageDetectionDocumentResult": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "$ref": "#/definitions/DetectedLanguage",
          "description": "Detected Language."
        }
      },
      "required": [
        "detectedLanguage"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "LanguageDetectionResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageDetectionDocumentResult"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextPreBuiltResult"
        }
      ]
    },
    "LanguageDetectionTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Language Detection task.",
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "LanguageDetectionTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/LanguageDetectionResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "x-ms-discriminator-value": "LanguageDetectionResults"
    },
    "LanguageInput": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique, non-empty document identifier."
        },
        "text": {
          "type": "string",
          "description": "The input text to process."
        },
        "countryHint": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "text"
      ]
    },
    "LearnedComponent": {
      "type": "object",
      "description": "This object contains information of the learned component of the detected entity.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The learned component of an extracted entity type."
        }
      },
      "required": [
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/EntityComponentInformation"
        }
      ],
      "x-ms-discriminator-value": "LearnedComponent"
    },
    "LengthMetadata": {
      "type": "object",
      "description": "Represents the Length entity Metadata model.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        },
        "unit": {
          "$ref": "#/definitions/LengthUnit"
        }
      },
      "required": [
        "value",
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "LengthMetadata"
    },
    "LengthUnit": {
      "type": "string",
      "description": "The length unit of measurement.",
      "enum": [
        "Unspecified",
        "Kilometer",
        "Hectometer",
        "Decameter",
        "Meter",
        "Decimeter",
        "Centimeter",
        "Millimeter",
        "Micrometer",
        "Nanometer",
        "Picometer",
        "Mile",
        "Yard",
        "Inch",
        "Foot",
        "LightYear",
        "Pt"
      ],
      "x-ms-enum": {
        "name": "LengthUnit",
        "modelAsString": true
      }
    },
    "LinkedEntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "description": "Recognized well known entities in the document.",
          "items": {
            "$ref": "#/definitions/LinkedEntity"
          }
        }
      },
      "required": [
        "entities"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "LinkedEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Entity Linking formal name."
        },
        "matches": {
          "type": "array",
          "description": "List of instances this entity appears in the text.",
          "items": {
            "$ref": "#/definitions/Match"
          },
          "x-ms-identifiers": []
        },
        "language": {
          "type": "string",
          "description": "Language used in the data source."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the recognized entity from the data source."
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "URL for the entity's page from the data source."
        },
        "dataSource": {
          "type": "string",
          "description": "Data source used to extract entity linking, such as Wiki/Bing etc."
        },
        "bingId": {
          "type": "string",
          "description": "Bing Entity Search API unique identifier of the recognized entity."
        }
      },
      "required": [
        "name",
        "matches",
        "language",
        "id",
        "url",
        "dataSource"
      ]
    },
    "ListComponent": {
      "type": "object",
      "description": "This object contains information of the list component of the detected entity.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The list key of an extracted entity type."
        }
      },
      "required": [
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/EntityComponentInformation"
        }
      ],
      "x-ms-discriminator-value": "ListComponent"
    },
    "LogicalOperationKind": {
      "type": "string",
      "description": "Set to 'OR' or 'AND' for using corresponding logical operation.",
      "enum": [
        "AND",
        "OR"
      ],
      "x-ms-enum": {
        "name": "LogicalOperationKind",
        "modelAsString": true
      }
    },
    "Match": {
      "type": "object",
      "properties": {
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "If a well known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned."
        },
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity match text."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity match text."
        }
      },
      "required": [
        "confidenceScore",
        "text",
        "offset",
        "length"
      ]
    },
    "MatchLongestEntityPolicyType": {
      "type": "object",
      "description": "Represents the Match longest overlap policy. No overlapping entities as far as it is possible. 1. If there are overlapping entities, the longest one will be returned. 2. If the set of characters predicted for 2 or more entities are exactly the same, select the entity that has the higher confidence score.3. If the entity scores are identical, return all entities that are still present after applying the previous rules. 3. If there is partial overlap (as in Hello Text Analytics) follow the above steps starting from 1.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntityOverlapPolicy"
        }
      ],
      "x-ms-discriminator-value": "matchLongest"
    },
    "MetadataFilter": {
      "type": "object",
      "description": "Find QnAs that are associated with the given list of metadata.",
      "properties": {
        "metadata": {
          "type": "array",
          "description": "List of metadata.",
          "items": {
            "$ref": "#/definitions/MetadataRecord"
          },
          "x-ms-identifiers": []
        },
        "logicalOperation": {
          "$ref": "#/definitions/LogicalOperationKind",
          "description": "Operation used to join metadata filters.",
          "default": "AND"
        }
      }
    },
    "MetadataKind": {
      "type": "string",
      "description": "The entity Metadata object kind.",
      "enum": [
        "DateMetadata",
        "DateTimeMetadata",
        "TimeMetadata",
        "TemporalSetMetadata",
        "NumberMetadata",
        "OrdinalMetadata",
        "SpeedMetadata",
        "WeightMetadata",
        "LengthMetadata",
        "VolumeMetadata",
        "AreaMetadata",
        "AgeMetadata",
        "InformationMetadata",
        "TemperatureMetadata",
        "CurrencyMetadata",
        "NumericRangeMetadata",
        "TemporalSpanMetadata"
      ],
      "x-ms-enum": {
        "name": "MetadataKind",
        "modelAsString": true
      }
    },
    "MetadataRecord": {
      "type": "object",
      "description": "Object to provide the key value pair for each metadata.",
      "properties": {
        "key": {
          "type": "string",
          "description": "Metadata Key from Metadata dictionary used in the QnA."
        },
        "value": {
          "type": "string",
          "description": "Metadata Value from Metadata dictionary used in the QnA."
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "MultiLanguageAnalysisInput": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "The input documents to be analyzed.",
          "items": {
            "$ref": "#/definitions/MultiLanguageInput"
          }
        }
      }
    },
    "MultiLanguageInput": {
      "type": "object",
      "description": "Contains an input document to be analyzed by the service.",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique, non-empty document identifier."
        },
        "text": {
          "type": "string",
          "description": "The input text to process."
        },
        "language": {
          "type": "string",
          "description": "(Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\" for English as default. (Following only applies to 2023-04-15-preview and above) For Auto Language Detection, use \"auto\". If not set, use \"en\" for English as default."
        }
      },
      "required": [
        "id",
        "text"
      ]
    },
    "NumberKind": {
      "type": "string",
      "description": "The type of the extracted number entity.",
      "enum": [
        "Integer",
        "Decimal",
        "Power",
        "Fraction",
        "Percent",
        "Unspecified"
      ],
      "x-ms-enum": {
        "name": "NumberKind",
        "modelAsString": true
      }
    },
    "NumberMetadata": {
      "type": "object",
      "description": "A metadata for numeric entity instances.",
      "properties": {
        "numberKind": {
          "$ref": "#/definitions/NumberKind"
        },
        "value": {
          "type": "number",
          "format": "double",
          "description": "A numeric representation of what the extracted text denotes."
        }
      },
      "required": [
        "numberKind",
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "NumberMetadata"
    },
    "NumericRangeKind": {
      "type": "string",
      "enum": [
        "Number",
        "Speed",
        "Weight",
        "Length",
        "Volume",
        "Area",
        "Age",
        "Information",
        "Temperature",
        "Currency"
      ],
      "x-ms-enum": {
        "name": "NumericRangeKind",
        "modelAsString": true
      }
    },
    "NumericRangeMetadata": {
      "type": "object",
      "description": "represents the Metadata of numeric intervals.",
      "properties": {
        "rangeKind": {
          "$ref": "#/definitions/NumericRangeKind"
        },
        "minimum": {
          "type": "number",
          "format": "double",
          "description": "The beginning value of  the interval."
        },
        "maximum": {
          "type": "number",
          "format": "double",
          "description": "The ending value of the interval."
        },
        "rangeInclusivity": {
          "$ref": "#/definitions/RangeInclusivity"
        }
      },
      "required": [
        "rangeKind",
        "minimum",
        "maximum"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "NumericRangeMetadata"
    },
    "OrdinalMetadata": {
      "type": "object",
      "description": "A metadata for numeric entity instances.",
      "properties": {
        "offset": {
          "type": "string",
          "description": "The offset With respect to the reference (e.g., offset = -1 in \"show me the second to last\""
        },
        "relativeTo": {
          "$ref": "#/definitions/OrdinalRelativeTo"
        },
        "value": {
          "type": "string",
          "description": "A simple arithmetic expression that the ordinal denotes."
        }
      },
      "required": [
        "offset",
        "relativeTo",
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "OrdinalMetadata"
    },
    "OrdinalRelativeTo": {
      "type": "string",
      "description": "The reference point that the ordinal number denotes.",
      "enum": [
        "Current",
        "End",
        "Start"
      ],
      "x-ms-enum": {
        "name": "OrdinalRelativeTo",
        "modelAsString": true
      }
    },
    "PIIEntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "redactedText": {
          "type": "string",
          "description": "Returns redacted text."
        },
        "entities": {
          "type": "array",
          "description": "Recognized entities in the document.",
          "items": {
            "$ref": "#/definitions/Entity"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "redactedText",
        "entities"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "PIIEntityRecognitionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/PIIResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "PiiEntityRecognitionLROResults"
    },
    "PIILROTask": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/PIITaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "PiiEntityRecognition"
    },
    "PIIResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/PIIResultWithDetectedLanguage"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextPreBuiltResult"
        }
      ]
    },
    "PIIResultWithDetectedLanguage": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PIIEntitiesDocumentResult"
        }
      ]
    },
    "PIITaskParameters": {
      "type": "object",
      "description": "Supported parameters for a PII Entities Recognition task.",
      "properties": {
        "domain": {
          "$ref": "#/definitions/PiiDomain",
          "default": "none"
        },
        "piiCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PiiCategories"
          }
        },
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType"
        },
        "excludePiiCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PiiCategoriesExcludeCategories"
          }
        },
        "redactionCharacter": {
          "$ref": "#/definitions/RedactionCharacter"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "PIITaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/PIIResult"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "x-ms-discriminator-value": "PiiEntityRecognitionResults"
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "nextLink": {
          "type": "string",
          "format": "uri"
        }
      },
      "required": [
        "nextLink"
      ]
    },
    "PiiCategories": {
      "type": "string",
      "description": "(Optional) describes the PII categories to return",
      "enum": [
        "ABARoutingNumber",
        "ARNationalIdentityNumber",
        "AUBankAccountNumber",
        "AUDriversLicenseNumber",
        "AUMedicalAccountNumber",
        "AUPassportNumber",
        "AUTaxFileNumber",
        "AUBusinessNumber",
        "AUCompanyNumber",
        "ATIdentityCard",
        "ATTaxIdentificationNumber",
        "ATValueAddedTaxNumber",
        "AzureDocumentDBAuthKey",
        "AzureIAASDatabaseConnectionAndSQLString",
        "AzureIoTConnectionString",
        "AzurePublishSettingPassword",
        "AzureRedisCacheString",
        "AzureSAS",
        "AzureServiceBusString",
        "AzureStorageAccountKey",
        "AzureStorageAccountGeneric",
        "BENationalNumber",
        "BENationalNumberV2",
        "BEValueAddedTaxNumber",
        "BRCPFNumber",
        "BRLegalEntityNumber",
        "BRNationalIDRG",
        "BGUniformCivilNumber",
        "CABankAccountNumber",
        "CADriversLicenseNumber",
        "CAHealthServiceNumber",
        "CAPassportNumber",
        "CAPersonalHealthIdentification",
        "CASocialInsuranceNumber",
        "CLIdentityCardNumber",
        "CNResidentIdentityCardNumber",
        "CreditCardNumber",
        "HRIdentityCardNumber",
        "HRNationalIDNumber",
        "HRPersonalIdentificationNumber",
        "HRPersonalIdentificationOIBNumberV2",
        "CYIdentityCard",
        "CYTaxIdentificationNumber",
        "CZPersonalIdentityNumber",
        "CZPersonalIdentityV2",
        "DKPersonalIdentificationNumber",
        "DKPersonalIdentificationV2",
        "DrugEnforcementAgencyNumber",
        "EEPersonalIdentificationCode",
        "EUDebitCardNumber",
        "EUDriversLicenseNumber",
        "EUGPSCoordinates",
        "EUNationalIdentificationNumber",
        "EUPassportNumber",
        "EUSocialSecurityNumber",
        "EUTaxIdentificationNumber",
        "FIEuropeanHealthNumber",
        "FINationalID",
        "FINationalIDV2",
        "FIPassportNumber",
        "FRDriversLicenseNumber",
        "FRHealthInsuranceNumber",
        "FRNationalID",
        "FRPassportNumber",
        "FRSocialSecurityNumber",
        "FRTaxIdentificationNumber",
        "FRValueAddedTaxNumber",
        "DEDriversLicenseNumber",
        "DEPassportNumber",
        "DEIdentityCardNumber",
        "DETaxIdentificationNumber",
        "DEValueAddedNumber",
        "GRNationalIDCard",
        "GRNationalIDV2",
        "GRTaxIdentificationNumber",
        "HKIdentityCardNumber",
        "HUValueAddedNumber",
        "HUPersonalIdentificationNumber",
        "HUTaxIdentificationNumber",
        "INPermanentAccount",
        "INUniqueIdentificationNumber",
        "IDIdentityCardNumber",
        "InternationalBankingAccountNumber",
        "IEPersonalPublicServiceNumber",
        "IEPersonalPublicServiceNumberV2",
        "ILBankAccountNumber",
        "ILNationalID",
        "ITDriversLicenseNumber",
        "ITFiscalCode",
        "ITValueAddedTaxNumber",
        "JPBankAccountNumber",
        "JPDriversLicenseNumber",
        "JPPassportNumber",
        "JPResidentRegistrationNumber",
        "JPSocialInsuranceNumber",
        "JPMyNumberCorporate",
        "JPMyNumberPersonal",
        "JPResidenceCardNumber",
        "LVPersonalCode",
        "LTPersonalCode",
        "LUNationalIdentificationNumberNatural",
        "LUNationalIdentificationNumberNonNatural",
        "MYIdentityCardNumber",
        "MTIdentityCardNumber",
        "MTTaxIDNumber",
        "NLCitizensServiceNumber",
        "NLCitizensServiceNumberV2",
        "NLTaxIdentificationNumber",
        "NLValueAddedTaxNumber",
        "NZBankAccountNumber",
        "NZDriversLicenseNumber",
        "NZInlandRevenueNumber",
        "NZMinistryOfHealthNumber",
        "NZSocialWelfareNumber",
        "NOIdentityNumber",
        "PHUnifiedMultiPurposeIDNumber",
        "PLIdentityCard",
        "PLNationalID",
        "PLNationalIDV2",
        "PLPassportNumber",
        "PLTaxIdentificationNumber",
        "PLREGONNumber",
        "PTCitizenCardNumber",
        "PTCitizenCardNumberV2",
        "PTTaxIdentificationNumber",
        "ROPersonalNumericalCode",
        "RUPassportNumberDomestic",
        "RUPassportNumberInternational",
        "SANationalID",
        "SGNationalRegistrationIdentityCardNumber",
        "SKPersonalNumber",
        "SITaxIdentificationNumber",
        "SIUniqueMasterCitizenNumber",
        "ZAIdentificationNumber",
        "KRResidentRegistrationNumber",
        "ESDNI",
        "ESSocialSecurityNumber",
        "ESTaxIdentificationNumber",
        "SQLServerConnectionString",
        "SENationalID",
        "SENationalIDV2",
        "SEPassportNumber",
        "SETaxIdentificationNumber",
        "SWIFTCode",
        "CHSocialSecurityNumber",
        "TWNationalID",
        "TWPassportNumber",
        "TWResidentCertificate",
        "THPopulationIdentificationCode",
        "TRNationalIdentificationNumber",
        "UKDriversLicenseNumber",
        "UKElectoralRollNumber",
        "UKNationalHealthNumber",
        "UKNationalInsuranceNumber",
        "UKUniqueTaxpayerNumber",
        "USUKPassportNumber",
        "USBankAccountNumber",
        "USDriversLicenseNumber",
        "USIndividualTaxpayerIdentification",
        "USSocialSecurityNumber",
        "UAPassportNumberDomestic",
        "UAPassportNumberInternational",
        "Organization",
        "Email",
        "URL",
        "Age",
        "PhoneNumber",
        "IPAddress",
        "Date",
        "Person",
        "Address",
        "All",
        "Default"
      ],
      "x-ms-enum": {
        "name": "PiiCategories",
        "modelAsString": true
      }
    },
    "PiiCategoriesExcludeCategories": {
      "type": "string",
      "description": "(Optional) describes the PII categories to return",
      "enum": [
        "ABARoutingNumber",
        "ARNationalIdentityNumber",
        "AUBankAccountNumber",
        "AUDriversLicenseNumber",
        "AUMedicalAccountNumber",
        "AUPassportNumber",
        "AUTaxFileNumber",
        "AUBusinessNumber",
        "AUCompanyNumber",
        "ATIdentityCard",
        "ATTaxIdentificationNumber",
        "ATValueAddedTaxNumber",
        "AzureDocumentDBAuthKey",
        "AzureIAASDatabaseConnectionAndSQLString",
        "AzureIoTConnectionString",
        "AzurePublishSettingPassword",
        "AzureRedisCacheString",
        "AzureSAS",
        "AzureServiceBusString",
        "AzureStorageAccountKey",
        "AzureStorageAccountGeneric",
        "BENationalNumber",
        "BENationalNumberV2",
        "BEValueAddedTaxNumber",
        "BRCPFNumber",
        "BRLegalEntityNumber",
        "BRNationalIDRG",
        "BGUniformCivilNumber",
        "CABankAccountNumber",
        "CADriversLicenseNumber",
        "CAHealthServiceNumber",
        "CAPassportNumber",
        "CAPersonalHealthIdentification",
        "CASocialInsuranceNumber",
        "CLIdentityCardNumber",
        "CNResidentIdentityCardNumber",
        "CreditCardNumber",
        "HRIdentityCardNumber",
        "HRNationalIDNumber",
        "HRPersonalIdentificationNumber",
        "HRPersonalIdentificationOIBNumberV2",
        "CYIdentityCard",
        "CYTaxIdentificationNumber",
        "CZPersonalIdentityNumber",
        "CZPersonalIdentityV2",
        "DKPersonalIdentificationNumber",
        "DKPersonalIdentificationV2",
        "DrugEnforcementAgencyNumber",
        "EEPersonalIdentificationCode",
        "EUDebitCardNumber",
        "EUDriversLicenseNumber",
        "EUGPSCoordinates",
        "EUNationalIdentificationNumber",
        "EUPassportNumber",
        "EUSocialSecurityNumber",
        "EUTaxIdentificationNumber",
        "FIEuropeanHealthNumber",
        "FINationalID",
        "FINationalIDV2",
        "FIPassportNumber",
        "FRDriversLicenseNumber",
        "FRHealthInsuranceNumber",
        "FRNationalID",
        "FRPassportNumber",
        "FRSocialSecurityNumber",
        "FRTaxIdentificationNumber",
        "FRValueAddedTaxNumber",
        "DEDriversLicenseNumber",
        "DEPassportNumber",
        "DEIdentityCardNumber",
        "DETaxIdentificationNumber",
        "DEValueAddedNumber",
        "GRNationalIDCard",
        "GRNationalIDV2",
        "GRTaxIdentificationNumber",
        "HKIdentityCardNumber",
        "HUValueAddedNumber",
        "HUPersonalIdentificationNumber",
        "HUTaxIdentificationNumber",
        "INPermanentAccount",
        "INUniqueIdentificationNumber",
        "IDIdentityCardNumber",
        "InternationalBankingAccountNumber",
        "IEPersonalPublicServiceNumber",
        "IEPersonalPublicServiceNumberV2",
        "ILBankAccountNumber",
        "ILNationalID",
        "ITDriversLicenseNumber",
        "ITFiscalCode",
        "ITValueAddedTaxNumber",
        "JPBankAccountNumber",
        "JPDriversLicenseNumber",
        "JPPassportNumber",
        "JPResidentRegistrationNumber",
        "JPSocialInsuranceNumber",
        "JPMyNumberCorporate",
        "JPMyNumberPersonal",
        "JPResidenceCardNumber",
        "LVPersonalCode",
        "LTPersonalCode",
        "LUNationalIdentificationNumberNatural",
        "LUNationalIdentificationNumberNonNatural",
        "MYIdentityCardNumber",
        "MTIdentityCardNumber",
        "MTTaxIDNumber",
        "NLCitizensServiceNumber",
        "NLCitizensServiceNumberV2",
        "NLTaxIdentificationNumber",
        "NLValueAddedTaxNumber",
        "NZBankAccountNumber",
        "NZDriversLicenseNumber",
        "NZInlandRevenueNumber",
        "NZMinistryOfHealthNumber",
        "NZSocialWelfareNumber",
        "NOIdentityNumber",
        "PHUnifiedMultiPurposeIDNumber",
        "PLIdentityCard",
        "PLNationalID",
        "PLNationalIDV2",
        "PLPassportNumber",
        "PLTaxIdentificationNumber",
        "PLREGONNumber",
        "PTCitizenCardNumber",
        "PTCitizenCardNumberV2",
        "PTTaxIdentificationNumber",
        "ROPersonalNumericalCode",
        "RUPassportNumberDomestic",
        "RUPassportNumberInternational",
        "SANationalID",
        "SGNationalRegistrationIdentityCardNumber",
        "SKPersonalNumber",
        "SITaxIdentificationNumber",
        "SIUniqueMasterCitizenNumber",
        "ZAIdentificationNumber",
        "KRResidentRegistrationNumber",
        "ESDNI",
        "ESSocialSecurityNumber",
        "ESTaxIdentificationNumber",
        "SQLServerConnectionString",
        "SENationalID",
        "SENationalIDV2",
        "SEPassportNumber",
        "SETaxIdentificationNumber",
        "SWIFTCode",
        "CHSocialSecurityNumber",
        "TWNationalID",
        "TWPassportNumber",
        "TWResidentCertificate",
        "THPopulationIdentificationCode",
        "TRNationalIdentificationNumber",
        "UKDriversLicenseNumber",
        "UKElectoralRollNumber",
        "UKNationalHealthNumber",
        "UKNationalInsuranceNumber",
        "UKUniqueTaxpayerNumber",
        "USUKPassportNumber",
        "USBankAccountNumber",
        "USDriversLicenseNumber",
        "USIndividualTaxpayerIdentification",
        "USSocialSecurityNumber",
        "UAPassportNumberDomestic",
        "UAPassportNumberInternational",
        "Organization",
        "Email",
        "URL",
        "Age",
        "PhoneNumber",
        "IPAddress",
        "Date",
        "Person",
        "Address"
      ],
      "x-ms-enum": {
        "name": "PiiCategoriesExcludeCategories",
        "modelAsString": true
      }
    },
    "PiiDomain": {
      "type": "string",
      "enum": [
        "phi",
        "none"
      ],
      "x-ms-enum": {
        "name": "PiiDomain",
        "modelAsString": true,
        "values": [
          {
            "name": "phi",
            "value": "phi",
            "description": "Indicates that entities in the Personal Health Information domain should be redacted."
          },
          {
            "name": "none",
            "value": "none",
            "description": "Indicates that no domain is specified."
          }
        ]
      }
    },
    "PreBuiltResult": {
      "type": "object",
      "description": "Pre built result",
      "properties": {
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics",
          "description": "statistics"
        },
        "modelVersion": {
          "type": "string",
          "description": "This field indicates which model is used for scoring."
        }
      },
      "required": [
        "errors",
        "modelVersion"
      ]
    },
    "PreBuiltTaskParameters": {
      "type": "object",
      "description": "Parameters object for a text analysis task using pre-built models.",
      "properties": {
        "modelVersion": {
          "type": "string",
          "description": "model version",
          "default": "latest"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TaskParameters"
        }
      ]
    },
    "PrebuiltComponent": {
      "type": "object",
      "description": "This object contains information of the prebuilt component of the detected entity.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The prebuilt component of an extracted entity type."
        }
      },
      "required": [
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/EntityComponentInformation"
        }
      ],
      "x-ms-discriminator-value": "PrebuiltComponent"
    },
    "QuantityMetadata": {
      "type": "object",
      "description": "Represents Metadata for quantities.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        }
      },
      "required": [
        "value"
      ]
    },
    "QueryFilters": {
      "type": "object",
      "description": "filters over knowledge base.",
      "properties": {
        "metadataFilter": {
          "$ref": "#/definitions/MetadataFilter",
          "description": "filters over knowledge base."
        },
        "sourceFilter": {
          "$ref": "#/definitions/SourceFilter",
          "description": "filters over knowledge base."
        },
        "logicalOperation": {
          "$ref": "#/definitions/LogicalOperationKind",
          "description": "Logical operation used to join metadata filter with source filter.",
          "default": "AND"
        }
      }
    },
    "RangeInclusivity": {
      "type": "string",
      "description": "The range inclusiveness of this property property.",
      "enum": [
        "NoneInclusive",
        "LeftInclusive",
        "RightInclusive",
        "LeftRightInclusive"
      ],
      "x-ms-enum": {
        "name": "RangeInclusivity",
        "modelAsString": true
      }
    },
    "RankerKind": {
      "type": "string",
      "description": "Type of ranker to be used",
      "enum": [
        "Default ranker",
        "Question only ranker"
      ],
      "x-ms-enum": {
        "name": "RankerKind",
        "modelAsString": true,
        "values": [
          {
            "name": "Default",
            "value": "Default ranker",
            "description": "Default ranker."
          },
          {
            "name": "Question",
            "value": "Question only ranker",
            "description": "Question only ranker."
          }
        ]
      }
    },
    "RedactionCharacter": {
      "type": "string",
      "description": "Optional parameter to use a Custom Character to be used for redaction in PII responses. Default character will be * as before. We allow specific ascii characters for redaction.",
      "enum": [
        "!",
        "#",
        "$",
        "%",
        "&",
        "*",
        "+",
        "-",
        "=",
        "?",
        "@",
        "^",
        "_",
        "~"
      ],
      "x-ms-enum": {
        "name": "RedactionCharacter",
        "modelAsString": true,
        "values": [
          {
            "name": "exclamationPoint",
            "value": "!"
          },
          {
            "name": "numberSign",
            "value": "#"
          },
          {
            "name": "dollar",
            "value": "$"
          },
          {
            "name": "perCent",
            "value": "%"
          },
          {
            "name": "ampersand",
            "value": "&"
          },
          {
            "name": "asterisk",
            "value": "*"
          },
          {
            "name": "plus",
            "value": "+"
          },
          {
            "name": "minus",
            "value": "-"
          },
          {
            "name": "equals",
            "value": "="
          },
          {
            "name": "questionMark",
            "value": "?"
          },
          {
            "name": "atSign",
            "value": "@"
          },
          {
            "name": "caret",
            "value": "^"
          },
          {
            "name": "underscore",
            "value": "_"
          },
          {
            "name": "tilde",
            "value": "~"
          }
        ]
      }
    },
    "RequestStatistics": {
      "type": "object",
      "description": "if showStats=true was specified in the request this field will contain information about the request payload.",
      "properties": {
        "documentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of documents submitted in the request."
        },
        "validDocumentCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of valid documents. This excludes empty, over-size limit or non-supported languages documents."
        },
        "erroneousDocumentCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of invalid documents. This includes empty, over-size limit or non-supported languages documents."
        },
        "transactionsCount": {
          "type": "integer",
          "format": "int64",
          "description": "Number of transactions for the request."
        }
      },
      "required": [
        "documentsCount",
        "validDocumentCount",
        "erroneousDocumentCount",
        "transactionsCount"
      ]
    },
    "ScriptCode": {
      "type": "string",
      "description": "Identifies the script of the input document. Maps to the ISO 15924 standard script code.",
      "enum": [
        "Arab",
        "Armn",
        "Beng",
        "Cans",
        "Cyrl",
        "Deva",
        "Ethi",
        "Geor",
        "Grek",
        "Gujr",
        "Guru",
        "Hang",
        "Hans",
        "Hant",
        "Hebr",
        "Jpan",
        "Khmr",
        "Knda",
        "Laoo",
        "Latn",
        "Mlym",
        "Mymr",
        "Orya",
        "Sinh",
        "Taml",
        "Telu",
        "Thaa",
        "Thai",
        "Tibt"
      ],
      "x-ms-enum": {
        "name": "ScriptCode",
        "modelAsString": true,
        "values": [
          {
            "name": "Arab",
            "value": "Arab",
            "description": "Script code for the Arabic script."
          },
          {
            "name": "Armn",
            "value": "Armn",
            "description": "Script code for the Armenian script."
          },
          {
            "name": "Beng",
            "value": "Beng",
            "description": "Script code for the Bengali script."
          },
          {
            "name": "Cans",
            "value": "Cans",
            "description": "Script code for the UnifiedCanadianAboriginalSyllabics script."
          },
          {
            "name": "Cyrl",
            "value": "Cyrl",
            "description": "Script code for the Cyrillic script."
          },
          {
            "name": "Deva",
            "value": "Deva",
            "description": "Script code for the Devanagari script."
          },
          {
            "name": "Ethi",
            "value": "Ethi",
            "description": "Script code for the Ethiopic script."
          },
          {
            "name": "Geor",
            "value": "Geor",
            "description": "Script code for the Georgian script."
          },
          {
            "name": "Grek",
            "value": "Grek",
            "description": "Script code for the Greek script."
          },
          {
            "name": "Gujr",
            "value": "Gujr",
            "description": "Script code for the Gujarati script."
          },
          {
            "name": "Guru",
            "value": "Guru",
            "description": "Script code for the Gurmukhi script."
          },
          {
            "name": "Hang",
            "value": "Hang",
            "description": "Script code for the Hangul script."
          },
          {
            "name": "Hans",
            "value": "Hans",
            "description": "Script code for the HanSimplified script."
          },
          {
            "name": "Hant",
            "value": "Hant",
            "description": "Script code for the HanTraditional script."
          },
          {
            "name": "Hebr",
            "value": "Hebr",
            "description": "Script code for the Hebrew script."
          },
          {
            "name": "Jpan",
            "value": "Jpan",
            "description": "Script code for the Japanese script."
          },
          {
            "name": "Khmr",
            "value": "Khmr",
            "description": "Script code for the Khmer script."
          },
          {
            "name": "Knda",
            "value": "Knda",
            "description": "Script code for the Kannada script."
          },
          {
            "name": "Laoo",
            "value": "Laoo",
            "description": "Script code for the Lao script."
          },
          {
            "name": "Latn",
            "value": "Latn",
            "description": "Script code for the Latin script."
          },
          {
            "name": "Mlym",
            "value": "Mlym",
            "description": "Script code for the Malayalam script."
          },
          {
            "name": "Mymr",
            "value": "Mymr",
            "description": "Script code for the Myanmar script."
          },
          {
            "name": "Orya",
            "value": "Orya",
            "description": "Script code for the Odia script."
          },
          {
            "name": "Sinh",
            "value": "Sinh",
            "description": "Script code for the Sinhala script."
          },
          {
            "name": "Taml",
            "value": "Taml",
            "description": "Script code for the Tamil script."
          },
          {
            "name": "Telu",
            "value": "Telu",
            "description": "Script code for the Telugu script."
          },
          {
            "name": "Thaa",
            "value": "Thaa",
            "description": "Script code for the Thaana script."
          },
          {
            "name": "Thai",
            "value": "Thai",
            "description": "Script code for the Thai script."
          },
          {
            "name": "Tibt",
            "value": "Tibt",
            "description": "Script code for the Tibetan script."
          }
        ]
      }
    },
    "ScriptKind": {
      "type": "string",
      "description": "Identifies the script of the input document. Maps to the ISO 15924 standard formal name.",
      "enum": [
        "Arabic",
        "Armenian",
        "Bangla",
        "UnifiedCanadianAboriginalSyllabics",
        "Cyrillic",
        "Devanagari",
        "Ethiopic",
        "Georgian",
        "Greek",
        "Gujarati",
        "Gurmukhi",
        "Hangul",
        "HanSimplified",
        "HanTraditional",
        "Hebrew",
        "Japanese",
        "Khmer",
        "Kannada",
        "Lao",
        "Latin",
        "Malayalam",
        "Myanmar",
        "Odia",
        "Sinhala",
        "Tamil",
        "Telugu",
        "Thaana",
        "Thai",
        "Tibetan"
      ],
      "x-ms-enum": {
        "name": "ScriptKind",
        "modelAsString": true,
        "values": [
          {
            "name": "Arabic",
            "value": "Arabic",
            "description": "Script name for the Arabic script."
          },
          {
            "name": "Armenian",
            "value": "Armenian",
            "description": "Script name for the Armenian script."
          },
          {
            "name": "Bangla",
            "value": "Bangla",
            "description": "Script name for the Bangla script."
          },
          {
            "name": "UnifiedCanadianAboriginalSyllabics",
            "value": "UnifiedCanadianAboriginalSyllabics",
            "description": "Script name for the UnifiedCanadianAboriginalSyllabics script."
          },
          {
            "name": "Cyrillic",
            "value": "Cyrillic",
            "description": "Script name for the Cyrillic script."
          },
          {
            "name": "Devanagari",
            "value": "Devanagari",
            "description": "Script name for the Devanagari script."
          },
          {
            "name": "Ethiopic",
            "value": "Ethiopic",
            "description": "Script name for the Ethiopic script."
          },
          {
            "name": "Georgian",
            "value": "Georgian",
            "description": "Script name for the Georgian script."
          },
          {
            "name": "Greek",
            "value": "Greek",
            "description": "Script name for the Greek script."
          },
          {
            "name": "Gujarati",
            "value": "Gujarati",
            "description": "Script name for the Gujarati script."
          },
          {
            "name": "Gurmukhi",
            "value": "Gurmukhi",
            "description": "Script name for the Gurmukhi script."
          },
          {
            "name": "Hangul",
            "value": "Hangul",
            "description": "Script name for the Hangul script."
          },
          {
            "name": "HanSimplified",
            "value": "HanSimplified",
            "description": "Script name for the HanSimplified script."
          },
          {
            "name": "HanTraditional",
            "value": "HanTraditional",
            "description": "Script name for the HanTraditional script."
          },
          {
            "name": "Hebrew",
            "value": "Hebrew",
            "description": "Script name for the Hebrew script."
          },
          {
            "name": "Japanese",
            "value": "Japanese",
            "description": "Script name for the Japanese script."
          },
          {
            "name": "Khmer",
            "value": "Khmer",
            "description": "Script name for the Khmer script."
          },
          {
            "name": "Kannada",
            "value": "Kannada",
            "description": "Script name for the Kannada script."
          },
          {
            "name": "Lao",
            "value": "Lao",
            "description": "Script name for the Lao script."
          },
          {
            "name": "Latin",
            "value": "Latin",
            "description": "Script name for the Latin script."
          },
          {
            "name": "Malayalam",
            "value": "Malayalam",
            "description": "Script name for the Malayalam script."
          },
          {
            "name": "Myanmar",
            "value": "Myanmar",
            "description": "Script name for the Myanmar script."
          },
          {
            "name": "Odia",
            "value": "Odia",
            "description": "Script name for the Odia script."
          },
          {
            "name": "Sinhala",
            "value": "Sinhala",
            "description": "Script name for the Sinhala script."
          },
          {
            "name": "Tamil",
            "value": "Tamil",
            "description": "Script name for the Tamil script."
          },
          {
            "name": "Telugu",
            "value": "Telugu",
            "description": "Script name for the Telugu script."
          },
          {
            "name": "Thaana",
            "value": "Thaana",
            "description": "Script name for the Thaana script."
          },
          {
            "name": "Thai",
            "value": "Thai",
            "description": "Script name for the Thai script."
          },
          {
            "name": "Tibetan",
            "value": "Tibetan",
            "description": "Script name for the Tibetan script."
          }
        ]
      }
    },
    "SentenceAssessment": {
      "type": "object",
      "properties": {
        "sentiment": {
          "$ref": "#/definitions/SentimentValue"
        },
        "confidenceScores": {
          "$ref": "#/definitions/TargetConfidenceScoreLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The target offset from the start of the sentence."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the target."
        },
        "text": {
          "type": "string",
          "description": "The target text detected."
        },
        "isNegated": {
          "type": "boolean",
          "description": "The indicator representing if the assessment is negated."
        }
      },
      "required": [
        "sentiment",
        "confidenceScores",
        "offset",
        "length",
        "text",
        "isNegated"
      ]
    },
    "SentenceSentiment": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The sentence text."
        },
        "sentiment": {
          "$ref": "#/definitions/SentimentValue",
          "description": "The predicted Sentiment for the sentence."
        },
        "confidenceScores": {
          "$ref": "#/definitions/SentimentConfidenceScores",
          "description": "The sentiment confidence score between 0 and 1 for the sentence for all classes."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The target offset from the start of the sentence."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the target."
        },
        "targets": {
          "type": "array",
          "description": "The array of sentence targets for the sentence.",
          "items": {
            "$ref": "#/definitions/SentenceTarget"
          },
          "x-ms-identifiers": []
        },
        "assessments": {
          "type": "array",
          "description": "The array of assessments for the sentence.",
          "items": {
            "$ref": "#/definitions/SentenceAssessment"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "text",
        "sentiment",
        "confidenceScores",
        "offset",
        "length"
      ]
    },
    "SentenceTarget": {
      "type": "object",
      "properties": {
        "sentiment": {
          "$ref": "#/definitions/SentimentValue"
        },
        "confidenceScores": {
          "$ref": "#/definitions/TargetConfidenceScoreLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The target offset from the start of the sentence."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the target."
        },
        "text": {
          "type": "string",
          "description": "The target text detected."
        },
        "relations": {
          "type": "array",
          "description": "The array of either assessment or target objects which is related to the target.",
          "items": {
            "$ref": "#/definitions/TargetRelation"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "sentiment",
        "confidenceScores",
        "offset",
        "length",
        "text",
        "relations"
      ]
    },
    "Sentiment": {
      "type": "string",
      "description": "Predicted sentiment",
      "enum": [
        "positive",
        "neutral",
        "negative",
        "mixed"
      ],
      "x-ms-enum": {
        "name": "Sentiment",
        "modelAsString": true,
        "values": [
          {
            "name": "positive",
            "value": "positive",
            "description": "Positive statement"
          },
          {
            "name": "neutral",
            "value": "neutral",
            "description": "Neutral statement"
          },
          {
            "name": "negative",
            "value": "negative",
            "description": "Negative statement"
          },
          {
            "name": "mixed",
            "value": "mixed",
            "description": "Mixed statement"
          }
        ]
      }
    },
    "SentimentAnalysisLROTask": {
      "type": "object",
      "description": "An object representing the task definition for a Sentiment Analysis task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/SentimentAnalysisTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "SentimentAnalysis"
    },
    "SentimentAnalysisTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Sentiment Analysis task.",
      "properties": {
        "opinionMining": {
          "type": "boolean",
          "default": false
        },
        "stringIndexType": {
          "$ref": "#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "SentimentConfidenceScores": {
      "type": "object",
      "description": "Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative.",
      "properties": {
        "positive": {
          "type": "number",
          "format": "double",
          "description": "Confidence score for positive sentiment"
        },
        "neutral": {
          "type": "number",
          "format": "double",
          "description": "Confidence score for neutral sentiment"
        },
        "negative": {
          "type": "number",
          "format": "double",
          "description": "Confidence score for negative sentiment"
        }
      },
      "required": [
        "positive",
        "neutral",
        "negative"
      ]
    },
    "SentimentDocumentResult": {
      "type": "object",
      "properties": {
        "sentiment": {
          "$ref": "#/definitions/Sentiment",
          "description": "Predicted sentiment for document (Negative, Neutral, Positive, or Mixed)."
        },
        "confidenceScores": {
          "$ref": "#/definitions/SentimentConfidenceScores"
        },
        "sentences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SentenceSentiment"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "sentiment",
        "confidenceScores",
        "sentences"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "SentimentLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/SentimentResponseWithDocumentDetectedLanguage"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "x-ms-discriminator-value": "SentimentAnalysisLROResults"
    },
    "SentimentRelationType": {
      "type": "string",
      "description": "The type related to the target.",
      "enum": [
        "assessment",
        "target"
      ],
      "x-ms-enum": {
        "name": "SentimentRelationType",
        "modelAsString": true
      }
    },
    "SentimentResponse": {
      "type": "object",
      "description": "Sentiment analysis per document.",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SentimentDocumentResult"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextPreBuiltResult"
        }
      ]
    },
    "SentimentResponseWithDocumentDetectedLanguage": {
      "type": "object",
      "description": "Sentiment analysis per document.",
      "properties": {
        "detectedLanguage": {
          "type": "string",
          "description": "If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document."
        },
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SentimentDocumentResult"
          }
        }
      },
      "required": [
        "documents"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextPreBuiltResult"
        }
      ]
    },
    "SentimentTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/SentimentResponse"
        }
      },
      "required": [
        "results"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "x-ms-discriminator-value": "SentimentAnalysisResults"
    },
    "SentimentValue": {
      "type": "string",
      "description": "The predicted Sentiment for the sentence.",
      "enum": [
        "positive",
        "neutral",
        "negative"
      ],
      "x-ms-enum": {
        "name": "SentimentValue",
        "modelAsString": true
      }
    },
    "ShortAnswerOptions": {
      "type": "object",
      "description": "To configure Answer span prediction feature.",
      "properties": {
        "enable": {
          "type": "boolean",
          "description": "Enable or disable Answer Span prediction."
        },
        "confidenceScoreThreshold": {
          "type": "number",
          "format": "double",
          "description": "Minimum threshold score required to include an answer span, value ranges from 0 to 1.",
          "minimum": 0,
          "maximum": 1,
          "x-ms-client-name": "confidenceThreshold"
        },
        "topAnswersWithSpan": {
          "type": "integer",
          "format": "int32",
          "description": "Number of Top answers to be considered for span prediction from 1 to 10.",
          "minimum": 1,
          "maximum": 10,
          "x-ms-client-name": "top"
        }
      },
      "required": [
        "enable"
      ]
    },
    "SourceFilter": {
      "type": "array",
      "description": "Find QnAs that are associated with any of the given list of sources in knowledge base.",
      "items": {
        "type": "string"
      }
    },
    "SpeedMetadata": {
      "type": "object",
      "description": "Represents the Speed entity Metadata model.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        },
        "unit": {
          "$ref": "#/definitions/SpeedUnit"
        }
      },
      "required": [
        "value",
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "SpeedMetadata"
    },
    "SpeedUnit": {
      "type": "string",
      "description": "The speed Unit of measurement",
      "enum": [
        "Unspecified",
        "MetersPerSecond",
        "KilometersPerHour",
        "KilometersPerMinute",
        "KilometersPerSecond",
        "MilesPerHour",
        "Knot",
        "FootPerSecond",
        "FootPerMinute",
        "YardsPerMinute",
        "YardsPerSecond",
        "MetersPerMillisecond",
        "CentimetersPerMillisecond",
        "KilometersPerMillisecond"
      ],
      "x-ms-enum": {
        "name": "SpeedUnit",
        "modelAsString": true
      }
    },
    "State": {
      "type": "string",
      "description": "The status of the task at the mentioned last update time.",
      "enum": [
        "notStarted",
        "running",
        "succeeded",
        "partiallyCompleted",
        "failed",
        "cancelled",
        "cancelling"
      ],
      "x-ms-enum": {
        "name": "State",
        "modelAsString": true
      }
    },
    "Status": {
      "type": "string",
      "enum": [
        "notStarted",
        "running",
        "succeeded",
        "failed",
        "cancelled",
        "cancelling"
      ],
      "x-ms-enum": {
        "name": "Status",
        "modelAsString": true
      }
    },
    "StringIndexType": {
      "type": "string",
      "description": "Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets.",
      "enum": [
        "TextElements_v8",
        "UnicodeCodePoint",
        "Utf16CodeUnit"
      ],
      "x-ms-enum": {
        "name": "StringIndexType",
        "modelAsString": true,
        "values": [
          {
            "name": "TextElements_v8",
            "value": "TextElements_v8",
            "description": "Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo."
          },
          {
            "name": "UnicodeCodePoint",
            "value": "UnicodeCodePoint",
            "description": "Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python."
          },
          {
            "name": "Utf16CodeUnit",
            "value": "Utf16CodeUnit",
            "description": "Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript."
          }
        ]
      }
    },
    "SummaryContext": {
      "type": "object",
      "description": "The context of the summary.",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the context. Use of different 'stringIndexType' values can affect the offset returned."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the context. Use of different 'stringIndexType' values can affect the length returned."
        }
      },
      "required": [
        "offset",
        "length"
      ]
    },
    "SummaryLengthBucket": {
      "type": "string",
      "description": "Enum that defines the length of the output summaries.",
      "enum": [
        "short",
        "medium",
        "long"
      ],
      "x-ms-enum": {
        "name": "SummaryLengthBucket",
        "modelAsString": true,
        "values": [
          {
            "name": "short",
            "value": "short",
            "description": "Instructs model to generate shorter length summaries."
          },
          {
            "name": "medium",
            "value": "medium",
            "description": "Instructs model to generate medium length summaries."
          },
          {
            "name": "long",
            "value": "long",
            "description": "Instructs model to generate longer length summaries."
          }
        ]
      }
    },
    "TargetConfidenceScoreLabel": {
      "type": "object",
      "description": "Represents the confidence scores across all sentiment classes: positive and negative.",
      "properties": {
        "positive": {
          "type": "number",
          "format": "double",
          "description": "Confidence score for positive sentiment"
        },
        "negative": {
          "type": "number",
          "format": "double",
          "description": "Confidence score for negative sentiment"
        }
      },
      "required": [
        "positive",
        "negative"
      ]
    },
    "TargetRelation": {
      "type": "object",
      "properties": {
        "ref": {
          "type": "string",
          "description": "The JSON pointer indicating the linked object."
        },
        "relationType": {
          "$ref": "#/definitions/SentimentRelationType",
          "description": "The type related to the target."
        }
      },
      "required": [
        "ref",
        "relationType"
      ]
    },
    "TaskIdentifier": {
      "type": "object",
      "description": "Base task object.",
      "properties": {
        "taskName": {
          "type": "string",
          "description": "task name"
        }
      }
    },
    "TaskParameters": {
      "type": "object",
      "description": "Base parameters object for a text analysis task.",
      "properties": {
        "loggingOptOut": {
          "type": "boolean",
          "description": "logging opt out",
          "default": false
        }
      }
    },
    "TaskState": {
      "type": "object",
      "description": "Returns the current state of the task.",
      "properties": {
        "lastUpdateDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The last updated time in UTC for the task."
        },
        "status": {
          "$ref": "#/definitions/State",
          "description": "The status of the task at the mentioned last update time."
        }
      },
      "required": [
        "lastUpdateDateTime",
        "status"
      ]
    },
    "Tasks": {
      "type": "object",
      "properties": {
        "completed": {
          "type": "integer",
          "format": "int32"
        },
        "failed": {
          "type": "integer",
          "format": "int32"
        },
        "inProgress": {
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalyzeTextLROResult"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "completed",
        "failed",
        "inProgress",
        "total"
      ]
    },
    "TasksState": {
      "type": "object",
      "properties": {
        "tasks": {
          "$ref": "#/definitions/Tasks"
        }
      },
      "required": [
        "tasks"
      ]
    },
    "TemperatureMetadata": {
      "type": "object",
      "description": "Represents the Information entity Metadata model.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        },
        "unit": {
          "$ref": "#/definitions/TemperatureUnit"
        }
      },
      "required": [
        "value",
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "TemperatureMetadata"
    },
    "TemperatureUnit": {
      "type": "string",
      "description": "The temperature Unit of measurement.",
      "enum": [
        "Unspecified",
        "Fahrenheit",
        "Kelvin",
        "Rankine",
        "Celsius"
      ],
      "x-ms-enum": {
        "name": "TemperatureUnit",
        "modelAsString": true
      }
    },
    "TemporalModifier": {
      "type": "string",
      "description": "An optional modifier of a date/time instance.",
      "enum": [
        "AfterApprox",
        "Before",
        "BeforeStart",
        "Approx",
        "ReferenceUndefined",
        "SinceEnd",
        "AfterMid",
        "Start",
        "After",
        "BeforeEnd",
        "Until",
        "End",
        "Less",
        "Since",
        "AfterStart",
        "BeforeApprox",
        "Mid",
        "More"
      ],
      "x-ms-enum": {
        "name": "TemporalModifier",
        "modelAsString": true
      }
    },
    "TemporalSetMetadata": {
      "type": "object",
      "description": "A Metadata for temporal set entity instances.",
      "properties": {
        "dateValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateValue"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "dateValues"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "TemporalSetMetadata"
    },
    "TemporalSpanMetadata": {
      "type": "object",
      "description": "represents the Metadata of a date and/or time span.",
      "properties": {
        "spanValues": {
          "$ref": "#/definitions/TemporalSpanValues"
        }
      },
      "required": [
        "spanValues"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "TemporalSpanMetadata"
    },
    "TemporalSpanValues": {
      "type": "object",
      "properties": {
        "begin": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "string",
          "description": "An optional duration value formatted based on the ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601#Durations)"
        },
        "modifier": {
          "$ref": "#/definitions/TemporalModifier"
        },
        "timex": {
          "type": "string",
          "description": "An optional triplet containing the beginning, the end, and the duration all stated as ISO 8601 formatted strings."
        }
      }
    },
    "Temporality": {
      "type": "string",
      "description": "Describes temporal information regarding the entity.",
      "enum": [
        "current",
        "past",
        "future"
      ],
      "x-ms-enum": {
        "name": "Temporality",
        "modelAsString": true
      }
    },
    "TimeMetadata": {
      "type": "object",
      "description": "A Metadata for time entity instances.",
      "properties": {
        "dateValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateValue"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "dateValues"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "TimeMetadata"
    },
    "Versions": {
      "type": "string",
      "description": "Analyze Conversations Service Versions",
      "enum": [
        "2022-05-01",
        "2023-04-01",
        "2023-04-15-preview",
        "2023-11-15-preview"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v2022_05_01",
            "value": "2022-05-01",
            "description": "Version 2022-05-01"
          },
          {
            "name": "v2023_04_01",
            "value": "2023-04-01",
            "description": "Version 2023-04-01"
          },
          {
            "name": "v2023_04_15_preview",
            "value": "2023-04-15-preview",
            "description": "Version 2023-04-15-preview"
          },
          {
            "name": "v2023_11_15_preview",
            "value": "2023-11-15-preview",
            "description": "Version 2023-11-15-preview"
          }
        ]
      }
    },
    "VolumeMetadata": {
      "type": "object",
      "description": "Represents the Volume entity Metadata model.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        },
        "unit": {
          "$ref": "#/definitions/VolumeUnit"
        }
      },
      "required": [
        "value",
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "VolumeMetadata"
    },
    "VolumeUnit": {
      "type": "string",
      "description": "The Volume Unit of measurement",
      "enum": [
        "Unspecified",
        "CubicMeter",
        "CubicCentimeter",
        "CubicMillimeter",
        "Hectoliter",
        "Decaliter",
        "Liter",
        "Centiliter",
        "Milliliter",
        "CubicYard",
        "CubicInch",
        "CubicFoot",
        "CubicMile",
        "FluidOunce",
        "Teaspoon",
        "Tablespoon",
        "Pint",
        "Quart",
        "Cup",
        "Gill",
        "Pinch",
        "FluidDram",
        "Barrel",
        "Minim",
        "Cord",
        "Peck",
        "Bushel",
        "Hogshead"
      ],
      "x-ms-enum": {
        "name": "VolumeUnit",
        "modelAsString": true
      }
    },
    "WeightMetadata": {
      "type": "object",
      "description": "Represents the Weight ) entity Metadata model.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The numeric value that the extracted text denotes."
        },
        "unit": {
          "$ref": "#/definitions/WeightUnit"
        }
      },
      "required": [
        "value",
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseMetadata"
        }
      ],
      "x-ms-discriminator-value": "WeightMetadata"
    },
    "WeightUnit": {
      "type": "string",
      "description": "The weight Unit of measurement.",
      "enum": [
        "Unspecified",
        "Kilogram",
        "Gram",
        "Milligram",
        "Gallon",
        "MetricTon",
        "Ton",
        "Pound",
        "Ounce",
        "Grain",
        "PennyWeight",
        "LongTonBritish",
        "ShortTonUS",
        "ShortHundredWeightUS",
        "Stone",
        "Dram"
      ],
      "x-ms-enum": {
        "name": "WeightUnit",
        "modelAsString": true
      }
    },
    "fhirVersion": {
      "type": "string",
      "enum": [
        "4.0.1"
      ],
      "x-ms-enum": {
        "name": "fhirVersion",
        "modelAsString": true
      }
    },
    "healthcareDocumentType": {
      "type": "string",
      "enum": [
        "None",
        "ClinicalTrial",
        "DischargeSummary",
        "ProgressNote",
        "HistoryAndPhysical",
        "Consult",
        "Imaging",
        "Pathology",
        "ProcedureNote"
      ],
      "x-ms-enum": {
        "name": "healthcareDocumentType",
        "modelAsString": true
      }
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    }
  }
}