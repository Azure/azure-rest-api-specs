{
    "swagger": "2.0",
    "info": {
        "version": "v1",
        "title": "Cognitive Service Form Recognizer API V1 (Preview)",
        "description": "Extracts information from forms and images into structured data based on a model created by a set of representative training forms."
    },
    "securityDefinitions": {
        "apim_key": {
            "type": "apiKey",
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header"
        }
    },
    "security": [
        {
            "apim_key": []
        }
    ],
    "x-ms-parameterized-host": {
        "hostTemplate": "{Endpoint}/FormRecognizer/v1.0",
        "useSchemePrefix": false,
        "parameters": [
            {
                "$ref": "#/parameters/Endpoint"
            }
        ]
    },
    "paths": {
        "/train": {
            "post": {
                "summary": "Train a model to analyze using a set of documents of supported types.",
                "description": "The train request must include a 'Source' parameter that is\r\n            either a Azure Storage Blob Container SAS Uri or a path to a locally mounted\r\n            drive. When local paths are specified, they must always follow the Linux/Unix style\r\n            absolute path convention and be rooted to the {Mounts:Input}\r\n            configuration setting value.",
                "operationId": "Formrecognizer_Train",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "trainRequest",
                        "in": "body",
                        "description": "Request object for training.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TrainRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TrainResponse"
                        },
                        "examples": {
                            "application/json": {
                                "modelId": "e390d2c0-0d6a-4a65-8277-597c0e863997",
                                "trainingDocuments": [
                                    {
                                        "pages": 1,
                                        "errors": [],
                                        "status": "success"
                                    }
                                ],
                                "errors": [
                                    {
                                        "errorMessage": "Could not use 0.pdf for training."
                                    }
                                ]
                            }
                        }
                    },
                    "default": {
                        "description": "Response entity accompanying non-successful responses containing additional details about the error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "BadArgument",
                                    "innerError": {
                                        "requestId": "00000000-0000-0000-0000-000000000000"
                                    },
                                    "message": "Request body is invalid."
                                }
                            }
                        }
                    }
                }
                "x-ms-examples": {
                  "Train new model example": {
                    "$ref": "./examples/Train.json"
                  }
                }
            }
        },
        "/model/{id}/keys": {
            "get": {
                "summary": "Get keys of a model.",
                "description": "<para>Use the API to retrieve the keys that were\r\n            extracted by the specified model.</para>",
                "operationId": "Formrecognizer_GetKeysByModelId",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model identifier.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "examples": {
                            "application/json": {
                                "clusters": {
                                    "0": [
                                        "Invoice",
                                        "123112313"
                                    ],
                                    "1": [
                                        "Please remit payment to:",
                                        "Microsoft"
                                    ]
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response entity accompanying non-successful responses containing additional details about the error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "BadArgument",
                                    "innerError": {
                                        "requestId": "00000000-0000-0000-0000-000000000000"
                                    },
                                    "message": "Request body is invalid."
                                }
                            }
                        }
                    }
                }
                "x-ms-examples": {
                  "Get Keys from Model": {
                    "$ref": "./examples/GetKeys.json"
                  }
                }
            }
        },
        "/model/{id}": {
            "get": {
                "summary": "Get information about a model.",
                "operationId": "Formrecognizer_GetModelById",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model identifier.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "examples": {
                            "application/json": {
                                "modelId": "708846bd-1fb2-49e1-a12f-9306e97bd473",
                                "version": "1",
                                "status": "ready",
                                "createdDateTime": "2019-04-17T16:04:35.4859654Z",
                                "lastUpdatedDateTime": "0001-01-01T00:00:00"
                            }
                        }
                    },
                    "default": {
                        "description": "Response entity accompanying non-successful responses containing additional details about the error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "BadArgument",
                                    "innerError": {
                                        "requestId": "00000000-0000-0000-0000-000000000000"
                                    },
                                    "message": "Request body is invalid."
                                }
                            }
                        }
                    }
                }
                "x-ms-examples": {
                  "Get Model from id": {
                    "$ref": "./examples/GetModelById.json"
                  }
                }
            },
        "/model/{id}": {
            "delete": {
                "summary": "Delete a model and all associated pre-processing data.",
                "operationId": "Formrecognizer_DeleteModelById",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The identifier of the model to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "default": {
                        "description": "Response entity accompanying non-successful responses containing additional details about the error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "BadArgument",
                                    "innerError": {
                                        "requestId": "00000000-0000-0000-0000-000000000000"
                                    },
                                    "message": "Request body is invalid."
                                }
                            }
                        }
                    }
                }
                "x-ms-examples": {
                  "Get Model from id": {
                    "$ref": "./examples/DeleteModelById.json"
                  }
                }
            }
        },
        "/model/{id}/analyze": {
            "post": {
                "summary": "Analyze a document to extract key-value pairs and table\r\ninformation.",
                "description": "<para>The document to analyze must be must be of expected\r\n            media type - currently supported types are application/pdf, image/jpg or image/png.</para>",
                "operationId": "Formrecognizer_Analyze",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the model to analyze the document with.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keys",
                        "in": "query",
                        "description": "An optional list of known keys to extract the values for.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    },
                    {
                        "name": "form",
                        "in": "formData",
                        "description": "Upload image or pdf content for processing.",
                        "required": false,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AnalyzeResponse"
                        },
                        "examples": {
                            "application/json": {
                                "status": "success",
                                "pages": [
                                    {
                                        "number": 1,
                                        "height": 800,
                                        "width": 600,
                                        "clusterId": 0,
                                        "keyValuePairs": [
                                            {
                                                "key": [
                                                    {
                                                        "text": "Address:",
                                                        "boundingBox": [
                                                            57.4,
                                                            683.1,
                                                            100.5,
                                                            683.1,
                                                            100.5,
                                                            673.7,
                                                            57.4,
                                                            673.7
                                                        ]
                                                    }
                                                ],
                                                "value": [
                                                    {
                                                        "text": "1 Microsoft Way",
                                                        "boundingBox": [
                                                            57.4,
                                                            672.2,
                                                            126.6,
                                                            672.2,
                                                            126.6,
                                                            658.9,
                                                            57.4,
                                                            658.9
                                                        ],
                                                        "confidence": 0.9
                                                    }
                                                ]
                                            }
                                        ],
                                        "tables": [
                                            {
                                                "id": "table_0",
                                                "columns": [
                                                    {
                                                        "header": [
                                                            {
                                                                "text": "InvoiceNumber",
                                                                "boundingBox": [
                                                                    38.5,
                                                                    585.2,
                                                                    113.4,
                                                                    585.2,
                                                                    113.4,
                                                                    575.8,
                                                                    38.5,
                                                                    575.8
                                                                ]
                                                            }
                                                        ],
                                                        "entries": [
                                                            [
                                                                {
                                                                    "text": "38772349",
                                                                    "boundingBox": [
                                                                        305.6,
                                                                        692.1,
                                                                        403.5,
                                                                        692.1,
                                                                        403.5,
                                                                        684.2,
                                                                        305.6,
                                                                        684.2
                                                                    ],
                                                                    "confidence": 0.9
                                                                }
                                                            ]
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ],
                                "errors": [
                                    {
                                        "errorMessage": "Page1: Field not extracted"
                                    }
                                ]
                            }
                        }
                    },
                    "default": {
                        "description": "Response entity accompanying non-successful responses containing additional details about the error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "BadArgument",
                                    "innerError": {
                                        "requestId": "00000000-0000-0000-0000-000000000000"
                                    },
                                    "message": "Request body is invalid."
                                }
                            }
                        }
                    }
                }
                "x-ms-examples": {
                  "Get Model from id": {
                    "$ref": "./examples/Analyze.json"
                  }
                }
            }
        },
        "/status": {
            "get": {
                "operationId": "StatusGet",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ContainerStatus"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "TrainRequest": {
            "description": "Contract to initiate a train request.",
            "required": [
                "source"
            ],
            "type": "object",
            "properties": {
                "source": {
                    "description": "Get or set source path.",
                    "maxLength": 2048,
                    "minLength": 0,
                    "type": "string"
                }
            }
        },
        "TrainResponse": {
            "description": "Response of the Train API call.",
            "type": "object",
            "properties": {
                "modelId": {
                    "description": "Identifier of the model.",
                    "type": "string"
                },
                "trainingDocuments": {
                    "description": "List of documents used to train the model and the\r\ntrain operation error reported by each.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FormDocumentReport"
                    }
                },
                "errors": {
                    "description": "Errors returned during the training operation.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FormOperationError"
                    }
                }
            }
        },
        "FormDocumentReport": {
            "type": "object",
            "properties": {
                "documentName": {
                    "description": "Reference to the data that the report is for.",
                    "type": "string"
                },
                "pages": {
                    "format": "int32",
                    "description": "Total number of pages trained on.",
                    "type": "integer"
                },
                "errors": {
                    "description": "List of errors per page.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "description": "Status of the training operation.",
                    "enum": [
                        "success",
                        "partialSuccess",
                        "failure"
                    ],
                    "type": "string"
                }
            }
        },
        "FormOperationError": {
            "description": "Error reported during an operation.",
            "type": "object",
            "properties": {
                "errorMessage": {
                    "description": "Message reported during the train operation.",
                    "type": "string"
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/ErrorInformation"
                }
            }
        },
        "ErrorInformation": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "innerError": {
                    "$ref": "#/definitions/InnerError"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "InnerError": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "string"
                }
            }
        },
        "AnalyzeResponse": {
            "description": "Analyze API response.",
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status of the analyze operation.",
                    "enum": [
                        "success",
                        "partialSuccess",
                        "failure"
                    ],
                    "type": "string"
                },
                "pages": {
                    "description": "Page level information extracted in the analyzed\r\ndocument.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Page"
                    }
                },
                "errors": {
                    "description": "List of errors reported during the analyze\r\noperation.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FormOperationError"
                    }
                }
            }
        },
        "Page": {
            "description": "Extraction information of a single page in a\r\nwith a document.",
            "type": "object",
            "properties": {
                "number": {
                    "format": "int32",
                    "description": "Page number.",
                    "type": "integer"
                },
                "height": {
                    "format": "int32",
                    "description": "Height of the page (in pixels).",
                    "type": "integer"
                },
                "width": {
                    "format": "int32",
                    "description": "Width of the page (in pixels).",
                    "type": "integer"
                },
                "clusterId": {
                    "format": "int32",
                    "description": "Cluster identifier.",
                    "type": "integer"
                },
                "keyValuePairs": {
                    "description": "List of Key-Value pairs extracted from the page.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeyValuePair"
                    }
                },
                "tables": {
                    "description": "List of Tables and their information extracted from the page.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Table"
                    }
                }
            }
        },
        "KeyValuePair": {
            "description": "Representation of a key-value pair as a list\r\nof key and value tokens.",
            "type": "object",
            "properties": {
                "key": {
                    "description": "List of tokens for the extracted key in a key-value pair.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Token"
                    }
                },
                "value": {
                    "description": "List of tokens for the extracted value in a key-value pair.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Token"
                    }
                }
            }
        },
        "Table": {
            "description": "Extraction information about a table\r\ncontained in a page.",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Table identifier.",
                    "type": "string"
                },
                "columns": {
                    "description": "List of columns contained in the table.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TableColumn"
                    }
                }
            }
        },
        "Token": {
            "description": "Canonical representation of single extracted text.",
            "type": "object",
            "properties": {
                "text": {
                    "description": "String value of the extracted text.",
                    "type": "string"
                },
                "boundingBox": {
                    "description": "Bounding box of the extracted text. Represents the\r\nlocation of the extracted text as a pair of\r\ncartesian co-ordinates. The co-ordinate pairs are arranged by\r\ntop-left, top-right, bottom-right and bottom-left endpoints box\r\nwith origin reference from the bottom-left of the page.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "confidence": {
                    "format": "double",
                    "description": "A measure of accuracy of the extracted text.",
                    "type": "number"
                }
            }
        },
        "TableColumn": {
            "description": "Extraction information of a column in\r\na table.",
            "type": "object",
            "properties": {
                "header": {
                    "description": "List of extracted tokens for the column header.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Token"
                    }
                },
                "entries": {
                    "description": "Extracted text for each cell of a column. Each cell\r\nin the column can have a list of one or more tokens.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "uniqueItems": false,
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/Token"
                        }
                    }
                }
            }
        },
        "ContainerStatus": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "string"
                },
                "apiStatus": {
                    "type": "string"
                },
                "apiStatusMessage": {
                    "type": "string"
                }
            }
        }
    },
    "parameters": {
        "Endpoint": {
           "name": "Endpoint",
           "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).",
           "x-ms-parameter-location": "client",
           "required": true,
           "type": "string",
           "in": "path",
           "x-ms-skip-url-encoding": true
        }
    }
}