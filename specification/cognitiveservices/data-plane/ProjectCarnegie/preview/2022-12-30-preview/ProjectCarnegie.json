{
  "swagger": "2.0",
  "info": {
    "title": "Content Moderator Client",
    "version": "2022-12-30-preview",
    "description": "Analyze harmful content"
  },
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "basePath": "/contentmoderator",
  "paths": {
    "/text:analyze": {
      "post": {
        "tags": [
          "Text Analysis"
        ],
        "summary": "Text Analyze",
        "description": "A sync API for harmful content analysis for text",
        "operationId": "Text_Analyze",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          },
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The analysis request of the text",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TextDetectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/TextDetectResponse"
            }
          },
          "default": {
            "description": "error payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/text:batchAnalyze": {
      "post": {
        "tags": [
          "Text Analysis"
        ],
        "summary": "Text Batch Analyze",
        "description": "An async API for harmful content analysis for image batch",
        "operationId": "Text_BatchDetect",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/Language"
          },
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The analysis request of the image batch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TextBatchDetectRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request is queued successfully",
            "headers": {
              "Results-Location": {
                "type": "string",
                "description": "URL used to track the progress and obtain the result of the batch analyze operation."
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/text/analyzeResults/{resultId}": {
      "get": {
        "tags": [
          "Text Analysis"
        ],
        "summary": "Get Text Batch Analyze Results",
        "description": "An API to get harmful content analysis results for text batch",
        "operationId": "Text_BatchDetect_Results",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "$ref": "#/parameters/ResultId"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/TextBatchDetectResultsResponse"
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/image:analyze": {
      "post": {
        "tags": [
          "Image Analysis"
        ],
        "summary": "Image Analyze",
        "description": "A sync API for harmful content analysis for image",
        "operationId": "Image_Detect",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The analysis request of the image",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageDetectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ImageDetectResponse"
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/image:batchAnalyze": {
      "post": {
        "tags": [
          "Image Analysis"
        ],
        "summary": "Image Batch Analyze",
        "description": "An async API for harmful content analysis for image batch",
        "operationId": "Image_BatchDetect",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "name": "imageBatchDetectRequest",
            "in": "body",
            "description": "The analysis request of the image batch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageBatchDetectRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request is queued successfully",
            "headers": {
              "Results-Location": {
                "type": "string",
                "description": "URL used to track the progress and obtain the result of the batch analyze operation."
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/image/analyzeResults/{resultId}": {
      "get": {
        "tags": [
          "Image Analysis"
        ],
        "summary": "Get Image Batch Analyze Results",
        "description": "An API to get harmful content analysis results for image batch",
        "operationId": "Image_BatchDetect_Results",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "$ref": "#/parameters/ResultId"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ImageBatchDetectResultsResponse"
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/text/lists/{listId}": {
      "get": {
        "tags": [
          "Text List Management"
        ],
        "operationId": "ListManagementTextLists_GetDetails",
        "description": "Returns list Id details of the Text List with list Id equal to list Id passed.",
        "summary": "Get Text List By listId",
        "parameters": [
          {
            "$ref": "#/parameters/ListId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextList"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "tags": [
          "Text List Management"
        ],
        "operationId": "ListManagementTextLists_Delete",
        "description": "Deletes Text List with the list Id equal to list Id passed.",
        "summary": "Delete Text List By listId",
        "parameters": [
          {
            "$ref": "#/parameters/ListId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "tags": [
          "Text List Management"
        ],
        "operationId": "ListManagementTextLists_Update",
        "description": "Updates an Text List by listId, , if listId not exists, create a new Text List",
        "summary": "Upsert Text List",
        "parameters": [
          {
            "$ref": "#/parameters/ListId"
          },
          {
            "name": "request",
            "in": "body",
            "description": "Properties of the Text List.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TextList"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Text List created successfully",
            "headers": {
              "TextList-Location": {
                "type": "string",
                "description": "URL used to get the created Text List."
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/text/lists": {
      "get": {
        "tags": [
          "Text List Management"
        ],
        "operationId": "ListManagementTextLists_GetAllTextLists",
        "description": "gets all the Text Lists",
        "summary": "Get All Text Lists",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "values": {
                  "type": "array",
                  "items": {
                  "$ref": "#/definitions/TextList"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/text/lists/{listId}/item": {
      "get": {
        "tags": [
          "Text List Management"
        ],
        "operationId": "ListManagementTerm_GetAllTerms",
        "description": "Gets all terms from the list with list Id equal to the list Id passed.",
        "summary": "Get All Text By listId",
        "parameters": [
          {
            "$ref": "#/parameters/ListId"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "How many terms will be skipped.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "top",
            "in": "query",
            "description": "How many terms will be fetched.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "values": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TextListItem"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/text/lists/{listId}/item/{itemId}": {
      "get": {
        "tags": [
          "Text List Management"
        ],
        "operationId": "ListManagementTerm_AddTerm",
        "description": "Returns the details of the term with list Id equal to list Id and image Id equal to image Id passed.",
        "summary": "Get Text By textId and ListId",
        "parameters": [
          {
            "$ref": "#/parameters/ListId"
          },
          {
            "$ref": "#/parameters/ItemId"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextListItem"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "tags": [
          "Text List Management"
        ],
        "operationId": "ListManagementTerm_DeleteTerm",
        "description": "Deletes a term from the list with list Id equal to the list Id passed.",
        "summary": "Delete Text By itemId and listId",
        "parameters": [
          {
            "$ref": "#/parameters/ListId"
          },
          {
            "$ref": "#/parameters/ItemId"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "tags": [
          "Text List Management"
        ],
        "operationId": "ListManagementTerm_UpdateTerm",
        "description": "Upsert text to the list with list Id equal to list Id passed.",
        "summary": "Upsert Text To Text List",
        "parameters": [
          {
            "$ref": "#/parameters/ListId"
          },
          {
            "$ref": "#/parameters/ItemId"
          },
          {
            "name": "request",
            "in": "body",
            "description": "Schema of the term update body.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "values": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TextListItem"
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    }
  },
  "definitions": {
    "TextCategory": {
      "type": "string",
      "x-nullable": false,
      "enum": [
        "HateSpeech",
        "SelfHarm",
        "Sexual",
        "Violence",
        "Custom"
      ],
      "x-ms-enum": {
        "name": "TextCategory",
        "modelAsString": true
      }
    },
    "TextCategoryConfig": {
      "type": "object",
      "description": "Configuration for category",
      "required": [
        "category"
      ],
      "properties": {
        "category": {
          "$ref": "#/definitions/TextCategory"
        },
        "listIds": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "listId"
          }
        }
      }
    },
    "TextDetectStrategy":{
      "type": "string",
      "x-nullable": false,
      "enum": [
        "Comprehensive",
        "Shortcut"
      ],
      "x-ms-enum": {
        "name": "TextCategory",
        "modelAsString": true
      }
    },
    "TextListMatchResult": {
      "description": "The result of custom list match",
      "type": "object",
      "required": [
        "listId",
        "itemId",
        "text"
      ],
      "properties": {
        "listId": {
          "description": "The id of matched custom list",
          "type": "string"
        },
        "itemId": {
          "description": "The id of matched item",
          "type": "string"
        },
        "text": {
          "description": "The content of matched item",
          "type": "string"
        }
      }
    },
    "RiskLevel": {
      "type": "string",
      "x-nullable": false,
      "enum": [
        "VeryHigh",
        "High",
        "Medium",
        "Low",
        "VeryLow"
      ],
      "x-ms-enum": {
        "name": "RiskLevel",
        "modelAsString": true
      }
    },
    "TextDetectResult": {
      "type": "object",
      "required": [
        "category"
      ],
      "properties": {
        "category": {
          "$ref": "#/definitions/TextCategory"
        },
        "confidenceScore": {
          "description": "The confidence score of analysis result",
          "type": "number",
          "format": "float"
        },
        "riskLevel": {
          "$ref": "#/definitions/RiskLevel"
        }
      }
    },
    "TextDetectRequest": {
      "description": "The analysis request of the text",
      "type": "object",
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "The text needs to be scanned"
        },
        "categories": {
          "type": "array",
          "description": "The categories will be analyzed, if not assigned, a default set of categories' analysis results will be returned.",
          "items": {
            "$ref": "#/definitions/TextCategory"
          }
        },
        "blockListIds": {
          "type": "array",
          "description": "The ids of blocklists",
          "items": {
            "type": "string",
            "description": "listId"
          }
        },
        "strategy": {
          "type": "string",
          "description": "Analyze strategy. When set to \"Shortcut\", other analysis will be skipped once any of configured blocklists was hit. When set to comprehensive, all the analysis will be done even when blocklists were hit.",
          "$ref": "#/definitions/TextDetectStrategy"
        }
      }
    },
    "TextDetectResponse": {
      "description": "The analysis response of the text",
      "type": "object",
      "properties": {
        "blocklistMatchResults": {
          "description": "The details of list match",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextListMatchResult"
          }
        },
        "hateSpeechResult": {
          "$ref": "#/definitions/TextDetectResult"
        },
        "selfHarmResult": {
          "$ref": "#/definitions/TextDetectResult"
        },
        "sexualResult": {
          "$ref": "#/definitions/TextDetectResult"
        },
        "violenceResult": {
          "$ref": "#/definitions/TextDetectResult"
        },
        "customResult": {
          "$ref": "#/definitions/TextDetectResult"
        }
      }
    },
    "TextBatchItem": {
      "description": "One item of text batch",
      "type": "object",
      "required": [
        "textId",
        "uri"
      ],
      "properties": {
        "textId": {
          "description": "Id of text batch item",
          "type": "string"
        },
        "uri": {
          "description": "Uri of text batch item, it should be a blob url of text file that contains content to analyze",
          "type": "string",
          "format": "url"
        }
      }
    },
    "TextBatchDetectRequest": {
      "description": "The analysis request of the text batch",
      "type": "object",
      "required": [
        "textBatch"
      ],
      "properties": {
        "textBatch": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextBatchItem"
          }
        },
        "categories": {
          "type": "array",
          "description": "The categories will be analyzed, if not assigned, a default set of categories' analysis results will be returned.",
          "items": {
            "$ref": "#/definitions/TextCategory"
          }
        },
        "blockListIds": {
          "type": "array",
          "description": "The ids of blocklists",
          "items": {
            "type": "string",
            "description": "listId"
          }
        },
        "strategy": {
          "type": "string",
          "description": "Analyze strategy. When set to \"Shortcut\", other analysis will be skipped once any of configured blocklists was hit. When set to comprehensive, all the analysis will be done even when blocklists were hit.",
          "$ref": "#/definitions/TextDetectStrategy"
        }
      }
    },
    "TextBatchDetectResultsResponse": {
      "description": "Status and result of the batch analysis.",
      "type": "object",
      "required": [
        "status",
        "createdDateTime",
        "lastUpdatedDateTime"
      ],
      "properties": {
        "status": {
          "description": "Batch analysis status.",
          "type": "string",
          "enum": [
            "NotStarted",
            "Running",
            "Failed",
            "Succeeded"
          ],
          "x-ms-enum": {
            "name": "TextBatchDetectStatus",
            "modelAsString": false
          }
        },
        "createdDateTime": {
          "description": "Date and time (UTC) when the batch analysis was submitted.",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdatedDateTime": {
          "description": "Date and time (UTC) when the status was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "results": {
          "description": "Batch analysis results",
          "type":"array",
          "items": {
            "type": "object",
            "properties": {
              "textId": {
                "description": "Id for text batch item",
                "type": "string"
              },
              "blocklistMatchResults": {
                "description": "The details of list match",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TextListMatchResult"
                }
              },
              "hateSpeechResult": {
                "$ref": "#/definitions/TextDetectResult"
              },
              "selfHarmResult": {
                "$ref": "#/definitions/TextDetectResult"
              },
              "sexualResult": {
                "$ref": "#/definitions/TextDetectResult"
              },
              "violenceResult": {
                "$ref": "#/definitions/TextDetectResult"
              },
              "customResult": {
                "$ref": "#/definitions/TextDetectResult"
              },
              "error": {
                "description": "Error encountered when processing individual image",
                "$ref": "#/definitions/Error"
              }
            }
          }
        },
        "error": {
          "description": "Error encountered during batch analysis",
          "$ref": "#/definitions/Error"
        }
      }
    },
    "ErrorResponse": {
      "description": "Error response object.",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "Error": {
      "description": "Error info.",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "Error message.",
          "type": "string"
        },
        "target": {
          "description": "Target of the error.",
          "type": "string"
        },
        "details": {
          "description": "List of detailed errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "InnerError": {
      "description": "Detailed error.",
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "Error message.",
          "type": "string"
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "ImageCategory": {
      "type": "string",
      "x-nullable": false,
      "enum": [
        "Adult",
        "Racy",
        "Underage",
        "Custom"
      ],
      "x-ms-enum": {
        "name": "ImageCategory",
        "modelAsString": false
      }
    },
    "ImageCategoryConfig": {
      "type": "object",
      "description": "Configuration for category",
      "required": [
        "category"
      ],
      "properties": {
        "category": {
          "$ref": "#/definitions/ImageCategory"
        }
      }
    },
    "Image": {
      "description": "The content or url of image",
      "type":"object",
      "properties": {
        "content": {
          "description": "Base64 encoding of image",
          "type": "string"
        },
        "uri": {
          "description": "The blob uri of image",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "ImageDetectRequest": {
      "description": "The analysis request of the image",
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "description": "The image needs to be scanned",
          "$ref": "#/definitions/Image"
        },
        "categories": {
          "type": "array",
          "description": "The categories will be analyzed, if not assigned, default categories will be analyzed",
          "items": {
            "$ref": "#/definitions/ImageCategory"
          }
        }
      }
    },
    "ImageListMatchResult": {
      "description": "The result of custom list match",
      "type": "object",
      "properties": {
        "listId": {
          "description": "The id of matched custom list",
          "type": "string"
        },
        "imageId": {
          "description": "The id of matched image",
          "type": "string"
        }
      }
    },
    "ImageDetectDiagnosis": {
      "type": "object",
      "required": [
        "width",
        "height",
        "left",
        "top",
        "analyzed"
      ],
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "The width of the diagnosis rectangle, in pixels."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the diagnosis rectangle, in pixels."
        },
        "left": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the left edge if the image to the left edge of the diagnosis rectangle, in pixels."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The distance from the top edge if the image to the top edge of the diagnosis rectangle, in pixels."
        },
        "analyzed": {
          "type": "boolean",
          "description": "Whether this category is analyzed in diagnosis rectangle"
        },
        "score": {
          "description": "The score of analysis result",
          "type": "number",
          "format": "float"
        },
        "diagnosisDetail": {
          "description": "The additional fields of model output",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listMatchResults": {
          "description": "The detail of list match",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageListMatchResult"
          }
        }
      }
    },
    "ImageDetectResult": {
      "type": "object",
      "required": [
        "category"
      ],
      "properties": {
        "category": {
          "$ref": "#/definitions/ImageCategory"
        },
        "confidenceScore": {
          "description": "The confidence score of analysis result",
          "type": "number",
          "format": "float"
        },
        "riskLevel": {
          "$ref": "#/definitions/RiskLevel"
        }
      }
    },
    "ImageDetectResponse": {
      "description": "The analysis response of the image",
      "type": "object",
      "properties": {
        "adultResult": {
          "$ref": "#/definitions/ImageDetectResult"
        },
        "racyResult": {
          "$ref": "#/definitions/ImageDetectResult"
        },
        "underageResult": {
          "$ref": "#/definitions/ImageDetectResult"
        },
        "customResult": {
          "$ref": "#/definitions/ImageDetectResult"
        }
      }
    },
    "ImageBatchItem": {
      "description": "One item of image batch",
      "type": "object",
      "required": [
        "imageId",
        "uri"
      ],
      "properties": {
        "imageId": {
          "description": "Id of image batch item",
          "type": "string"
        },
        "uri": {
          "description": "Uri of image batch item, it should be a blob url of image file to analyze",
          "type": "string",
          "format": "url"
        }
      }
    },
    "ImageBatchDetectRequest": {
      "description": "The analysis request of the image batch",
      "type": "object",
      "required": [
        "imageBatch"
      ],
      "properties": {
        "imageBatch": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageBatchItem"
          }
        },
        "categories": {
          "type": "array",
          "description": "The categories will be analyzed, if not assigned, default the categories will be analyzed",
          "items": {
            "$ref": "#/definitions/ImageCategory"
          }
        }
      }
    },
    "ImageBatchDetectResultsResponse": {
      "description": "Status and result of the batch analysis.",
      "type": "object",
      "required": [
        "status",
        "createdDateTime",
        "lastUpdatedDateTime"
      ],
      "properties": {
        "status": {
          "description": "Batch analysis status.",
          "type": "string",
          "enum": [
            "NotStarted",
            "Running",
            "Failed",
            "Succeeded"
          ],
          "x-ms-enum": {
            "name": "ImageBatchDetectStatus",
            "modelAsString": false
          }
        },
        "createdDateTime": {
          "description": "Date and time (UTC) when the batch analysis was submitted.",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdatedDateTime": {
          "description": "Date and time (UTC) when the status was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "results": {
          "description": "Batch analysis results",
          "type":"array",
          "items": {
            "type": "object",
            "properties": {
              "imageId": {
                "description": "imageId of individual image in batch",
                "type": "string"
              },
              "adultResult": {
                "$ref": "#/definitions/ImageDetectResult"
              },
              "racyResult": {
                "$ref": "#/definitions/ImageDetectResult"
              },
              "underageResult": {
                "$ref": "#/definitions/ImageDetectResult"
              },
              "customResult": {
                "$ref": "#/definitions/ImageDetectResult"
              },
              "error": {
                "description": "Error encountered when processing individual image",
                "$ref": "#/definitions/Error"
              }
            }
          }
        },
        "error": {
          "description": "Error encountered during batch analysis",
          "$ref": "#/definitions/Error"
        }
      }
    },
    "ImageWithTextCategory": {
      "type": "string",
      "x-nullable": false,
      "enum": [
        "Custom"
      ],
      "x-ms-enum": {
        "name": "ImageWithTextCategory",
        "modelAsString": false
      }
    },
    "ImageWithText": {
      "description": "The image and text",
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "$ref": "#/definitions/Image"
        },
        "text": {
          "description": "Text associated with the image",
          "type": "string"
        }
      }
    },
    "ImageWithTextDetectRequest": {
      "description": "The analysis request of the image-with-text",
      "type": "object",
      "required": [
        "imageWithText"
      ],
      "properties": {
        "image": {
          "description": "The image needs to be scanned",
          "$ref": "#/definitions/ImageWithText"
        },
        "categories": {
          "type": "array",
          "description": "The categories will be analyzed, if not assigned, all the categories will be analyzed",
          "items": {
            "$ref": "#/definitions/ImageWithTextCategory"
          }
        }
      }
    },
    "ImageWithTextDetectResult": {
      "type": "object",
      "required": [
        "category"
      ],
      "properties": {
        "category": {
          "$ref": "#/definitions/ImageWithTextCategory"
        },
        "analyzed": {
          "description": "Whether this category is analyzed in this input image-with-text",
          "type": "boolean"
        },
        "score": {
          "description": "The score of analysis result",
          "type": "number",
          "format": "float"
        },
        "modelOutputDetail": {
          "description": "The additional fields of model output",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ImageWithTextDetectResponse": {
      "description": "The analysis response of the image-with-text",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "array",
          "items": {
              "$ref": "#/definitions/ImageWithTextDetectResult"
            }
        }
      }
    },
    "TextListMatchMethod": {
      "description": "Detection method for Text List.",
      "enum": [
        "Exact",
        "Semantic"
      ],
      "type": "string"
    },
    "TextList": {
      "description": "Text List.",
      "required": [
        "listId"
      ],
      "properties": {
        "listId": {
          "description": "Text List Id.",
          "type": "string"
        },
        "name": {
          "description": "Text List name.",
          "type": "string"
        },
        "description": {
          "description": "Description for Text List.",
          "type": "string"
        },
        "defaultLanguage": {
          "description": "language hint for text recognition and document analysis.  Value may contain only the language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"en-US\").",
          "type": "string"
        }
      }
    },
    "TextListItem": {
      "description": "Text data",
      "required": [
        "itemId",
        "text"
      ],
      "properties": {
        "itemId": {
          "description": "Item id",
          "type": "string"
        },
        "description": {
          "description": "Text data description",
          "type": "string"
        },
        "text": {
          "description": "Text list item content.",
          "type": "string"
        },
        "language": {
          "$ref": "#parameters/Language"
        }
      }
    },
    "ImageListMatchMethod": {
      "description": "Detection method for image list.",
      "enum": [
        "Exact",
        "Semantic"
      ],
      "type": "string"
    },
    "ImageList": {
      "description": "Image List Properties.",
      "properties": {
        "listId": {
          "description": "Image list Id.",
          "type": "string"
        },
        "name": {
          "description": "Image list name.",
          "type": "string"
        },
        "description": {
          "description": "Description for Text List.",
          "type": "string"
        },
        "method": {
          "$ref": "#/definitions/ImageListMatchMethod"
        }
      }
    },
    "ImageInList": {
      "description": "Image data",
      "required": [
        "imageId",
        "imageUri"
      ],
      "properties": {
        "imageId": {
          "description": "Image id",
          "type": "string"
        },
        "description": {
          "description": "Image data description",
          "type": "string"
        },
        "imageUri": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "ImageLists": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ImageList"
      }
    }
  },
  "parameters": {
    "Endpoint": {
      "name": "endpoint",
      "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://<resource-name>.cognitiveservices.azure.com).",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    },
    "Language": {
      "name": "language",
      "description": "Language hint for text recognition and document analysis.  Value may contain only the language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"en-US\").",
      "required": false,
      "type": "string",
      "in": "query",
      "x-ms-parameter-location": "method"
    },
    "QueryApiVersion": {
      "name": "api-version",
      "description": "Requested API version.",
      "required": true,
      "type": "string",
      "in": "query",
      "enum": [
        "2022-12-30-preview"
      ],
      "x-ms-enum": {
        "name": "ApiVersion",
        "modelAsString": true
      },
      "x-ms-parameter-location": "client"
    },
    "QueryStringIndexType": {
      "name": "stringIndexType",
      "description": "Method used to compute string offset and length.",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "textElements",
        "unicodeCodePoint",
        "utf16CodeUnit"
      ],
      "x-ms-enum": {
        "name": "StringIndexType",
        "modelAsString": true
      },
      "default": "textElements",
      "x-ms-parameter-location": "method"
    },
    "ResultId": {
      "name": "resultId",
      "description": "Batch analyze operation result ID.",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-parameter-location": "method"
    },
    "ListId": {
      "name": "listId",
      "in": "path",
      "description": "List Id of the list.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ImageId": {
      "name": "imageId",
      "in": "path",
      "description": "Id of the image.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ItemId": {
      "name": "itemId",
      "in": "path",
      "description": "Id of the item in list.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/contentmoderator/moderate",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  }
}
