{
  "swagger": "2.0",
  "info": {
    "title": "ProjectCarnegie service",
    "version": "2023-04-30-preview",
    "description": "Analyze harmful content",
    "x-cadl-generated": [
      {
        "emitter": "@azure-tools/cadl-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/carnegie",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "required": true,
        "description": "Supported Cognitive Services endpoints (protocol and hostname, for example:\nhttps://<resource-name>.cognitiveservices.azure.com).",
        "type": "string"
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Ocp-Apim-Subscription-Key"
    }
  },
  "tags": [],
  "paths": {
    "/image:analyze": {
      "post": {
        "operationId": "ImageOperations_Detect",
        "summary": "Analyze Image",
        "description": "A sync API for harmful content analysis for image",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "The analysis request of the image",
            "schema": {
              "$ref": "#/definitions/ImageDetectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ImageDetectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/text/lists": {
      "get": {
        "operationId": "TextLists_ListTextLists",
        "summary": "Get All Text Lists",
        "description": "Get All Text Lists",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TextList"
                  },
                  "x-ms-identifiers": [],
                  "x-cadl-name": "TextList[]",
                  "description": "The TextList items on this page"
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items",
                  "x-cadl-name": "Rest.ResourceLocation"
                }
              },
              "description": "Paged collection of TextList items",
              "required": [
                "value"
              ],
              "x-cadl-name": "Azure.Core.Foundations.CustomPage<TextList, Azure.Core.(anonymous model)>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/text/lists/{listId}": {
      "get": {
        "operationId": "TextLists_GetTextList",
        "summary": "Get Text List By listId",
        "description": "Returns text list details of the Text List with list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "listId",
            "in": "path",
            "required": true,
            "description": "Text List Id.",
            "maxLength": 64,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "operationId": "TextLists_CreateOrUpdateList",
        "summary": "Create Or Update Text List",
        "description": "Updates an Text List by listId, if listId not exists, create a new Text List",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "listId",
            "in": "path",
            "required": true,
            "description": "Text List Id.",
            "maxLength": 64,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "The resource instance.",
            "schema": {
              "$ref": "#/definitions/TextListUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextList"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/TextList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "consumes": [
          "application/merge-patch+json"
        ]
      },
      "delete": {
        "operationId": "TextLists_DeleteTextList",
        "summary": "Delete Text List By listId",
        "description": "Deletes Text List with the list Id equal to list Id passed.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "listId",
            "in": "path",
            "required": true,
            "description": "Text List Id.",
            "maxLength": 64,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/text/lists/{listId}/items": {
      "get": {
        "operationId": "TextListItems_ListTextListItems",
        "summary": "Get All Items By listId",
        "description": "Get All Items By listId",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "listId",
            "in": "path",
            "required": true,
            "description": "Text List Id.",
            "maxLength": 64,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TextListItem"
                  },
                  "x-ms-identifiers": [],
                  "x-cadl-name": "TextListItem[]",
                  "description": "The TextListItem items on this page"
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items",
                  "x-cadl-name": "Rest.ResourceLocation"
                }
              },
              "description": "Paged collection of TextListItem items",
              "required": [
                "value"
              ],
              "x-cadl-name": "Azure.Core.Foundations.CustomPage<TextListItem, Azure.Core.(anonymous model)>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/text/lists/{listId}/items/{itemId}": {
      "get": {
        "operationId": "TextListItems_GetTextListItem",
        "summary": "Get Item By itemId and listId",
        "description": "Get Item By itemId and listId",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "listId",
            "in": "path",
            "required": true,
            "description": "Text List Id.",
            "maxLength": 64,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "Item id",
            "maxLength": 64,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextListItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "operationId": "TextListItems_CreateOrUpdateListItem",
        "summary": "Create Or Update Item In Text List",
        "description": "Create Or Update Item In Text List",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "listId",
            "in": "path",
            "required": true,
            "description": "Text List Id.",
            "maxLength": 64,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "Item id",
            "maxLength": 64,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "The resource instance.",
            "schema": {
              "$ref": "#/definitions/TextListItemUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextListItem"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/TextListItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "consumes": [
          "application/merge-patch+json"
        ]
      },
      "delete": {
        "operationId": "TextListItems_DeleteTextListItem",
        "summary": "Delete Item By itemId and listId",
        "description": "Delete Item By itemId and listId",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "listId",
            "in": "path",
            "required": true,
            "description": "Text List Id.",
            "maxLength": 64,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "Item id",
            "maxLength": 64,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/text:analyze": {
      "post": {
        "operationId": "TextOperations_Analyze",
        "summary": "Analyze Text",
        "description": "A sync API for harmful content analysis for text",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "The analysis request of the text",
            "schema": {
              "$ref": "#/definitions/TextDetectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TextDetectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Azure.Core.Foundations.Error[]",
          "description": "An array of details about specific errors that led to this reported error."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "description": "The error object.",
      "required": [
        "code",
        "message",
        "details"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "description": "A response containing error details.",
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      },
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "required": [
        "code"
      ]
    },
    "Image": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "Base64 encoding of image"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The blob url of image"
        }
      },
      "description": "The content or url of image, if both given, the content field will be used. The maxinum size of image is 4MB, and the image should not be smaller than 50*50."
    },
    "ImageCategory": {
      "type": "string",
      "enum": [
        "Hate",
        "SelfHarm",
        "Sexual",
        "Violence"
      ],
      "x-ms-enum": {
        "name": "ImageCategory",
        "modelAsString": true
      }
    },
    "ImageDetectMultiSeverityResult": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/ImageCategory"
        },
        "riskLevel": {
          "type": "integer",
          "format": "int32",
          "description": "riskLevel represent the severity of the input, currently its value could be: 0,2,4,6"
        }
      },
      "required": [
        "category",
        "riskLevel"
      ]
    },
    "ImageDetectRequest": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/Image",
          "description": "The image needs to be scanned"
        },
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageCategory"
          },
          "x-cadl-name": "ImageCategory[]",
          "description": "The categories will be analyzed, if not assigned, default categories will be\nanalyzed"
        }
      },
      "description": "The analysis request of the image",
      "required": [
        "image"
      ]
    },
    "ImageDetectResponse": {
      "type": "object",
      "properties": {
        "hateResult": {
          "$ref": "#/definitions/ImageDetectMultiSeverityResult"
        },
        "selfHarmResult": {
          "$ref": "#/definitions/ImageDetectMultiSeverityResult"
        },
        "sexualResult": {
          "$ref": "#/definitions/ImageDetectMultiSeverityResult"
        },
        "violenceResult": {
          "$ref": "#/definitions/ImageDetectMultiSeverityResult"
        }
      },
      "description": "The analysis response of the image"
    },
    "TextCategory": {
      "type": "string",
      "enum": [
        "Hate",
        "SelfHarm",
        "Sexual",
        "Violence"
      ],
      "x-ms-enum": {
        "name": "TextCategory",
        "modelAsString": true
      }
    },
    "TextDetectMultiSeverityResult": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/TextCategory"
        },
        "riskLevel": {
          "type": "integer",
          "format": "int32",
          "description": "riskLevel represent the severity of the input, currently its value could be: 0,2,4,6"
        }
      },
      "required": [
        "category",
        "riskLevel"
      ]
    },
    "TextDetectRequest": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text needs to be scanned",
          "maxLength": 7000
        },
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextCategory"
          },
          "x-cadl-name": "TextCategory[]",
          "description": "The categories will be analyzed, if not assigned, a default set of categories'\nanalysis results will be returned."
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Language hints for text analysis.  Values can contain only the language code (ex.\n\"en\", \"fr\") of BCP 47. If no languages given, the service will detact languages."
        },
        "blockListIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "The ids of blocklists"
        },
        "breakByBlocklists": {
          "type": "boolean",
          "description": "When set to true, other analysis will be skipped once any of configured\nblocklists was hit. When set to false, all the analysis will be done even when\nblocklists were hit."
        }
      },
      "description": "The analysis request of the text",
      "required": [
        "text"
      ]
    },
    "TextDetectResponse": {
      "type": "object",
      "properties": {
        "blocklistMatchResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextListMatchResult"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "TextListMatchResult[]",
          "description": "The details of list match"
        },
        "hateResult": {
          "$ref": "#/definitions/TextDetectMultiSeverityResult"
        },
        "selfHarmResult": {
          "$ref": "#/definitions/TextDetectMultiSeverityResult"
        },
        "sexualResult": {
          "$ref": "#/definitions/TextDetectMultiSeverityResult"
        },
        "violenceResult": {
          "$ref": "#/definitions/TextDetectMultiSeverityResult"
        }
      },
      "description": "The analysis response of the text"
    },
    "TextList": {
      "type": "object",
      "properties": {
        "listId": {
          "type": "string",
          "description": "Text List Id.",
          "maxLength": 64,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "name": {
          "type": "string",
          "description": "Text List name.",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "Description for Text List.",
          "maxLength": 1024
        }
      },
      "description": "Text List.",
      "required": [
        "listId"
      ]
    },
    "TextListItem": {
      "type": "object",
      "properties": {
        "itemId": {
          "type": "string",
          "description": "Item id",
          "maxLength": 64,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "description": {
          "type": "string",
          "description": "Text data description",
          "maxLength": 1024
        },
        "text": {
          "type": "string",
          "description": "Text list item content.",
          "maxLength": 128
        },
        "language": {
          "type": "string",
          "description": "Language of this item, Value may contain only the language code (ex. \"en\",\n\"fr\") of BCP 47. If not assigned, \"en\" will be used"
        }
      },
      "description": "Item in Text List",
      "required": [
        "itemId"
      ]
    },
    "TextListItemUpdate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Text data description",
          "maxLength": 1024
        },
        "text": {
          "type": "string",
          "description": "Text list item content.",
          "maxLength": 128
        },
        "language": {
          "type": "string",
          "description": "Language of this item, Value may contain only the language code (ex. \"en\",\n\"fr\") of BCP 47. If not assigned, \"en\" will be used"
        }
      },
      "description": "Item in Text List"
    },
    "TextListMatchResult": {
      "type": "object",
      "properties": {
        "listId": {
          "type": "string",
          "description": "The id of matched custom list",
          "maxLength": 64
        },
        "itemId": {
          "type": "string",
          "description": "The id of matched item",
          "maxLength": 64
        },
        "itemText": {
          "type": "string",
          "description": "The content of matched item",
          "maxLength": 128
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The character offset of matched text in original input"
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of matched text in original input"
        }
      },
      "description": "The result of custom list match",
      "required": [
        "listId",
        "itemId",
        "itemText"
      ]
    },
    "TextListUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Text List name.",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "Description for Text List.",
          "maxLength": 1024
        }
      },
      "description": "Text List."
    },
    "Versions": {
      "type": "string",
      "enum": [
        "2023-04-30-preview"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v2023_04_30_Preview",
            "value": "2023-04-30-preview"
          }
        ]
      }
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "description": "The API version to use for this operation.",
      "x-ms-client-name": "apiVersion",
      "minLength": 1,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
