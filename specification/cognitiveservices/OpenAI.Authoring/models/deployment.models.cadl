import "@cadl-lang/rest";

using Cadl.Rest;
using Cadl.Rest.Resource;

namespace Azure.OpenAI;

/*
@doc("Represents a list of deployments.")
model DeploymentList {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminatorKnownValues.Deployment;

  @doc("The list of items.")
  @visibility("read")
  data?: Deployment[];
}
*/
@doc("""
Deployments manage the reserved quota for Azure OpenAI models and make them
available for inference requests.
""")
@resource("deployments")
model Deployment {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("The state of a job or item.")
  @visibility("read")
  status?: State;

  @doc("A timestamp when this job or item was created (in unix epochs).")
  @visibility("read")
  createdAt?: int32;

  @doc("A timestamp when this job or item was modified last (in unix epochs).")
  @visibility("read")
  updatedAt?: int32;

  @doc("The identifier of the deployment")
  @key("deploymentId")
  @visibility("read")
  id: string;

  @doc("The OpenAI model to deploy. Can be a base model or a fine tune.")
  "model"?: string;

  @doc("""
The owner of this deployment. For Azure OpenAI only \"organization-owner\" is
supported.
""")
  @visibility("read")
  owner?: string;

  @doc("""
The scale settings of a deployment. It defines the modes for scaling and the
reserved capacity.
""")
  scaleSettings: ScaleSettings;
}

@doc("""
The scale settings of a deployment. It defines the modes for scaling and the
reserved capacity.
""")
@discriminator("scaleType")
model ScaleSettings {}

/*
@doc("Defines changes to the deployment.")
model DeploymentUpdate {
  @doc("""
The new OpenAI model to be used for this deployment. Can be a base model or a
fine tune.
""")
  "model"?: string;

  @doc("""
The scale settings of a deployment. It defines the modes for scaling and the
reserved capacity.
""")
  scaleSettings?: ScaleSettingsUpdate;
}
*/

/*
@doc("""
The scale settings of a deployment. It defines the modes for scaling and the
reserved capacity.
""")
@discriminator("scaleType")
model ScaleSettingsUpdate {}
*/