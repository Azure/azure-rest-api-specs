# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class Error(_model_base.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
     Required.
    :vartype details:
     list[~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror:
     ~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.InnerError
    """

    code: str = rest_field()
    """One of a server-defined set of error codes. Required. """
    message: str = rest_field()
    """A human-readable representation of the error. Required. """
    target: Optional[str] = rest_field()
    """The target of the error. """
    details: List["_models.Error"] = rest_field()
    """An array of details about specific errors that led to this reported error. Required. """
    innererror: Optional["_models.InnerError"] = rest_field()
    """An object containing more specific information than the current object about the error. """

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
        details: List["_models.Error"],
        target: Optional[str] = None,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class ErrorResponse(_model_base.Model):
    """A response containing error details.

    All required parameters must be populated in order to send to Azure.

    :ivar error: The error object. Required.
    :vartype error: ~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.Error
    """

    error: "_models.Error" = rest_field()
    """The error object. Required. """

    @overload
    def __init__(
        self,
        *,
        error: "_models.Error",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class GeneratedQA(_model_base.Model):
    """Question and Answer generated from the document.

    :ivar question: A question generated for a specific answer from a document in the job.
    :vartype question: str
    :ivar answer: Entity or phrase which is the answer to the generated question from a
     particular document in the job.
    :vartype answer: str
    :ivar confidence_score: Confidence score of a question generated against the answer in the
     document's
     content.
    :vartype confidence_score: float
    :ivar confidence_bucket: Confidence bucket of a question generated against the answer in the
     document's
     content. Possible values &quot;low&quot;, &quot;medium&quot;, &quot;high&quot;.
    :vartype confidence_bucket: str
    :ivar document_id: A unique, non-empty document identifier, GUID will be assigned if user had
     not
     provided Id in job request.
    :vartype document_id: str
    """

    question: Optional[str] = rest_field()
    """A question generated for a specific answer from a document in the job. """
    answer: Optional[str] = rest_field()
    """Entity or phrase which is the answer to the generated question from a
particular document in the job. """
    confidence_score: Optional[float] = rest_field(name="confidenceScore")
    """Confidence score of a question generated against the answer in the document's
content. """
    confidence_bucket: Optional[str] = rest_field(name="confidenceBucket")
    """Confidence bucket of a question generated against the answer in the document's
content. Possible values &quot;low&quot;, &quot;medium&quot;, &quot;high&quot;. """
    document_id: Optional[str] = rest_field(name="documentId")
    """A unique, non-empty document identifier, GUID will be assigned if user had not
provided Id in job request. """

    @overload
    def __init__(
        self,
        *,
        question: Optional[str] = None,
        answer: Optional[str] = None,
        confidence_score: Optional[float] = None,
        confidence_bucket: Optional[str] = None,
        document_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class GenerationDocument(_model_base.Model):
    """An input document to be processed for question answer generation.

    All required parameters must be populated in order to send to Azure.

    :ivar id: A unique, non-empty document identifier. Required.
    :vartype id: str
    :ivar content: The input text, html or URL to process. Required.
    :vartype content: str
    :ivar document_kind: Document type. Required. Known values are: "Raw", "URL", and "HTML".
    :vartype document_kind: str or
     ~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.DocumentKind
    :ivar language: (Optional) This is the 2 letter ISO 639-1 representation of a language. For
     example, use "en" for English; "es" for Spanish etc. If not set, use "en"
     for English as default.
    :vartype language: str
    """

    id: str = rest_field()
    """A unique, non-empty document identifier. Required. """
    content: str = rest_field()
    """The input text, html or URL to process. Required. """
    document_kind: Union[str, "_models.DocumentKind"] = rest_field(name="documentKind")
    """Document type. Required. Known values are: \"Raw\", \"URL\", and \"HTML\"."""
    language: Optional[str] = rest_field()
    """(Optional) This is the 2 letter ISO 639-1 representation of a language. For
example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\"
for English as default. """

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        content: str,
        document_kind: Union[str, "_models.DocumentKind"],
        language: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class GenerationJobState(_model_base.Model):
    """Generation Job state represents the job metadata and any errors and a result
    object if job succeeded.

        All required parameters must be populated in order to send to Azure.

        :ivar display_name:
        :vartype display_name: str
        :ivar created_date_time: Required.
        :vartype created_date_time: ~datetime.datetime
        :ivar expiration_date_time:
        :vartype expiration_date_time: ~datetime.datetime
        :ivar job_id: Required.
        :vartype job_id: str
        :ivar last_updated_date_time: Required.
        :vartype last_updated_date_time: ~datetime.datetime
        :ivar status: Required. Known values are: "notStarted", "running", "succeeded",
         "partiallyCompleted", "failed", "cancelled", and "cancelling".
        :vartype status: str or
         ~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.State
        :ivar errors:
        :vartype errors:
         list[~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.Error]
        :ivar next_link:
        :vartype next_link: str
        :ivar result: Result of question answer generation job.
        :vartype result:
         ~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.GenerationResult
    """

    display_name: Optional[str] = rest_field(name="displayName")
    created_date_time: datetime.datetime = rest_field(name="createdDateTime")
    """Required. """
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime")
    job_id: str = rest_field(name="JobId")
    """Required. """
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime")
    """Required. """
    status: Union[str, "_models.State"] = rest_field()
    """Required. Known values are: \"notStarted\", \"running\", \"succeeded\", \"partiallyCompleted\", \"failed\", \"cancelled\", and \"cancelling\"."""
    errors: Optional[List["_models.Error"]] = rest_field()
    next_link: Optional[str] = rest_field(name="nextLink")
    result: Optional["_models.GenerationResult"] = rest_field()
    """Result of question answer generation job. """

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        job_id: str,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.State"],
        display_name: Optional[str] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        errors: Optional[List["_models.Error"]] = None,
        next_link: Optional[str] = None,
        result: Optional["_models.GenerationResult"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class GenerationParameters(_model_base.Model):
    """Parameters for configuring question answers generation and limiting the output.

    :ivar fetch_raw_content: Enable to fetch raw contents of document in the result.
    :vartype fetch_raw_content: bool
    :ivar use_marked_answer: Specify this as true - if the documents have marker tags
     &lt;answer&gt; and
     &lt;/answer&gt; for marked answers. Example: Satya Nadella was born in
     &lt;answer&gt; Hyderabad &lt;/answer&gt; of present-day Telangana, India into a
     Telugu-speaking Hindu family.
    :vartype use_marked_answer: bool
    :ivar max_q_a_count: Maximum number of question answer pairs to be generated.
    :vartype max_q_a_count: int
    """

    fetch_raw_content: Optional[bool] = rest_field(name="fetchRawContent")
    """Enable to fetch raw contents of document in the result. """
    use_marked_answer: Optional[bool] = rest_field(name="useMarkedAnswer")
    """Specify this as true - if the documents have marker tags &lt;answer&gt; and
&lt;/answer&gt; for marked answers. Example: Satya Nadella was born in
&lt;answer&gt; Hyderabad &lt;/answer&gt; of present-day Telangana, India into a
Telugu-speaking Hindu family. """
    max_q_a_count: Optional[int] = rest_field(name="maxQACount")
    """Maximum number of question answer pairs to be generated. """

    @overload
    def __init__(
        self,
        *,
        fetch_raw_content: Optional[bool] = None,
        use_marked_answer: Optional[bool] = None,
        max_q_a_count: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class GenerationRequest(_model_base.Model):
    """Question Answers Generation job with documents and parameters.

    :ivar documents: The set of documents to process as part of question answers generation job.
    :vartype documents:
     list[~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.GenerationDocument]
    :ivar parameters: Parameters that define max number of question answers to be generated, fetch
     raw contents of documents or not, etc.
    :vartype parameters:
     ~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.GenerationParameters
    """

    documents: Optional[List["_models.GenerationDocument"]] = rest_field()
    """The set of documents to process as part of question answers generation job. """
    parameters: Optional["_models.GenerationParameters"] = rest_field()
    """Parameters that define max number of question answers to be generated, fetch
raw contents of documents or not, etc. """

    @overload
    def __init__(
        self,
        *,
        documents: Optional[List["_models.GenerationDocument"]] = None,
        parameters: Optional["_models.GenerationParameters"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class GenerationResult(_model_base.Model):
    """Result of question answer generation job.

    :ivar documents: The set of documents with processed raw contents.
    :vartype documents:
     list[~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.GenerationDocument]
    :ivar value: The set of question and answers generated in the generation job.
    :vartype value:
     list[list[~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.GeneratedQA]]
    """

    documents: Optional[List["_models.GenerationDocument"]] = rest_field()
    """The set of documents with processed raw contents. """
    value: Optional[List[List["_models.GeneratedQA"]]] = rest_field()
    """The set of question and answers generated in the generation job. """

    @overload
    def __init__(
        self,
        *,
        documents: Optional[List["_models.GenerationDocument"]] = None,
        value: Optional[List[List["_models.GeneratedQA"]]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class InnerError(_model_base.Model):
    """An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    All required parameters must be populated in order to send to Azure.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar innererror: Inner error.
    :vartype innererror:
     ~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.InnerError
    """

    code: str = rest_field()
    """One of a server-defined set of error codes. Required. """
    innererror: Optional["_models.InnerError"] = rest_field()
    """Inner error. """

    @overload
    def __init__(
        self,
        *,
        code: str,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
