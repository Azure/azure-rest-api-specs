# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import json
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import AzureJSONEncoder, _deserialize
from .._serialization import Serializer
from .._vendor import _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_generate_question_answers_operations_submit_job_request(*, api_version: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/generate-questionanswers"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str", min_length=1)

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_generate_question_answers_operations_get_job_status_request(
    job_id: str, *, api_version: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/generate-questionanswers/jobs/{JobId}"
    path_format_arguments = {
        "JobId": _SERIALIZER.url("job_id", job_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str", min_length=1)

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class GenerateQuestionAnswersOperationsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.MicrosoftCognitiveLanguageServiceGenerateQuestionandAnswerpairs`'s
        :attr:`generate_question_answers_operations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def submit_job(  # pylint: disable=inconsistent-return-statements
        self,
        request_body: Union[_models.GenerationRequest, JSON],
        *,
        api_version: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Generate Question and Answers from a set of documents.

        Generate Question and Answers from a set of documents.

        :param request_body: The request body. Required.
        :type request_body:
         ~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.GenerationRequest or
         JSON
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def submit_job(  # pylint: disable=inconsistent-return-statements
        self, request_body: IO, *, api_version: str, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Generate Question and Answers from a set of documents.

        Generate Question and Answers from a set of documents.

        :param request_body: The request body. Required.
        :type request_body: IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def submit_job(  # pylint: disable=inconsistent-return-statements
        self, request_body: Union[_models.GenerationRequest, JSON, IO], *, api_version: str, **kwargs: Any
    ) -> None:
        """Generate Question and Answers from a set of documents.

        Generate Question and Answers from a set of documents.

        :param request_body: The request body. Is either a model type or a IO type. Required.
        :type request_body:
         ~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.GenerationRequest or
         JSON or IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(request_body, (IO, bytes)):
            _content = request_body
        else:
            _content = json.dumps(request_body, cls=AzureJSONEncoder)

        request = build_generate_question_answers_operations_submit_job_request(
            api_version=api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def get_job_status(self, job_id: str, *, api_version: str, **kwargs: Any) -> _models.GenerationJobState:
        """Gets the status of a question answers generation job.

        Gets the status of a question answers generation job.

        :param job_id: Required.
        :type job_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: GenerationJobState. The GenerationJobState is compatible with MutableMapping
        :rtype:
         ~microsoftcognitivelanguageservicegeneratequestionandanswerpairs.models.GenerationJobState
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.GenerationJobState]

        request = build_generate_question_answers_operations_get_job_status_request(
            job_id=job_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        deserialized = _deserialize(_models.GenerationJobState, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
