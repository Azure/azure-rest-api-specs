{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft Cognitive Language Service - Analyze Conversations Authoring (2023-04-15-preview)",
    "version": "2023-04-15-preview",
    "description": "The language service API is a suite of natural language processing (NLP) skills built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction, language detection and question answering. Further documentation can be found in <a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/language-service/overview\">https://docs.microsoft.com/en-us/azure/cognitive-services/language-service/overview</a>."
  },
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "description": "A subscription key for a Language service resource.",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}/language/authoring/analyze-conversations/projects",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  },
  "paths": {
    "/": {
      "get": {
        "summary": "List projects",
        "description": "Lists the existing projects.",
        "operationId": "ListProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "top",
            "description": "The number of projects to be returned.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The offset in the response.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "The maximum number of projects per page.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata of projects.",
            "schema": {
              "$ref": "#/definitions/ProjectsMetadata"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful List Projects": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulListProjects.json"
          }
        }
      }
    },
    "/{projectName}": {
      "patch": {
        "summary": "Create project",
        "description": "Creates a new project or updates an existing one.",
        "operationId": "CreateProject",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The project parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProjectOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata of the updated project, if it already exists.",
            "schema": {
              "$ref": "#/definitions/ProjectMetadata"
            }
          },
          "201": {
            "description": "The metadata of the created project.",
            "schema": {
              "$ref": "#/definitions/ProjectMetadata"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Create Project": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulCreateProject.json"
          }
        }
      },
      "get": {
        "summary": "Get project details",
        "description": "Gets the details of a project.",
        "operationId": "GetProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata of the project.",
            "schema": {
              "$ref": "#/definitions/ProjectMetadata"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Project": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetProject.json"
          }
        }
      },
      "delete": {
        "summary": "Delete project",
        "description": "Deletes a project.",
        "operationId": "DeleteProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Delete Project": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulDeleteProject.json"
          }
        }
      }
    },
    "/{projectName}/:authorize-copy": {
      "post": {
        "summary": "Copy project authorization",
        "description": "Generates a copy project operation authorization to the current target Azure resource.",
        "operationId": "CopyProjectAuthorization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The copy project authorization info.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyAuthorizationOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payload to send to source resource to initiate project copying.",
            "schema": {
              "$ref": "#/definitions/CopyProjectOptions"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Copy Project Authorization": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulCopyProjectAuthorization.json"
          }
        }
      }
    },
    "/{projectName}/:copy": {
      "post": {
        "summary": "Copy project",
        "description": "Copies an existing project to another Azure resource.",
        "operationId": "CopyProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The copy project info.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyProjectOptions"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Copy Project": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulCopyProject.json"
          }
        }
      }
    },
    "/{projectName}/:export": {
      "post": {
        "summary": "Export project",
        "description": "Triggers a job to export a project's data.",
        "operationId": "Export",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "format",
            "description": "The format of the exported project file to use.",
            "type": "string",
            "enum": [
              "Conversation",
              "Luis"
            ],
            "x-ms-enum": {
              "name": "ExportedProjectFormat",
              "modelAsString": true,
              "values": [
                {
                  "value": "Conversation",
                  "description": "Specifies the format for a conversational project."
                },
                {
                  "value": "Luis",
                  "description": "Specifies the format for an application that was exported from LUIS."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "stringIndexType",
            "description": "Specifies the method used to interpret string offsets. For additional information see https://aka.ms/text-analytics-offsets.",
            "required": true,
            "type": "string",
            "enum": [
              "Utf16CodeUnit"
            ],
            "x-ms-enum": {
              "name": "StringIndexType",
              "modelAsString": true,
              "values": [
                {
                  "value": "Utf16CodeUnit",
                  "description": "The offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "assetKind",
            "description": "Kind of asset to export.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "trainedModelLabel",
            "description": "Trained model label to export. If the trainedModelLabel is null, the default behavior is to export the current working copy.",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Export Project": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulExportProject.json"
          }
        }
      }
    },
    "/{projectName}/:import": {
      "post": {
        "summary": "Import project",
        "description": "Triggers a job to import a project. If a project with the same name already exists, the data of that project is replaced.",
        "operationId": "Import",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "format",
            "description": "The format of the exported project file to use.",
            "type": "string",
            "enum": [
              "Conversation",
              "Luis"
            ],
            "x-ms-enum": {
              "name": "ExportedProjectFormat",
              "modelAsString": true,
              "values": [
                {
                  "value": "Conversation",
                  "description": "Specifies the format for a conversational project."
                },
                {
                  "value": "Luis",
                  "description": "Specifies the format for an application that was exported from LUIS."
                }
              ]
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "The project data to import.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportedProject"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Import Project": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulImportProject.json"
          }
        }
      }
    },
    "/{projectName}/:train": {
      "post": {
        "summary": "Train project",
        "description": "Triggers a training job for a project.",
        "operationId": "Train",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The training input parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrainingJobOptions"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Train Project": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulTrainProject.json"
          }
        }
      }
    },
    "/{projectName}/copy/jobs/{jobId}": {
      "get": {
        "summary": "Get copy project status",
        "description": "Gets the status of an existing copy project job.",
        "operationId": "GetCopyProjectStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The status of the long running operation.",
            "schema": {
              "$ref": "#/definitions/CopyProjectJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Copy Project Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetCopyProjectStatus.json"
          }
        }
      }
    },
    "/{projectName}/deployments": {
      "get": {
        "summary": "List deployments",
        "description": "Lists the deployments belonging to a project.",
        "operationId": "ListDeployments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of deployments to be returned.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The offset in the response.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "The maximum number of deployments per page.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all deployments.",
            "schema": {
              "$ref": "#/definitions/ProjectDeployments"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful List Deployments": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulListDeployments.json"
          }
        }
      }
    },
    "/{projectName}/deployments/:swap": {
      "post": {
        "summary": "Swap deployments",
        "description": "Swaps two existing deployments with each other.",
        "operationId": "SwapDeployments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The job object to swap two deployments.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SwapDeploymentsOptions"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Swap Deployments": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulSwapDeployments.json"
          }
        }
      }
    },
    "/{projectName}/deployments/{deploymentName}": {
      "get": {
        "summary": "Get deployment details",
        "description": "Gets the details of a deployment.",
        "operationId": "GetDeployment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentName",
            "description": "The deployment name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The Deployment info.",
            "schema": {
              "$ref": "#/definitions/ProjectDeployment"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Deployment": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetDeployment.json"
          }
        }
      },
      "put": {
        "summary": "Update deployment",
        "description": "Creates a new deployment or replaces an existing one.",
        "operationId": "DeployProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentName",
            "description": "The deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The new deployment info.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDeploymentOptions"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Deploy Project": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulDeployProject.json"
          }
        }
      },
      "delete": {
        "summary": "Delete deployment",
        "description": "Deletes a project deployment.",
        "operationId": "DeleteDeployment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentName",
            "description": "The deployment name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Delete Deployment": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulDeleteDeployment.json"
          }
        }
      }
    },
    "/{projectName}/deployments/{deploymentName}/:delete-from-resources": {
      "post": {
        "summary": "Delete deployment from resources",
        "description": "Deletes a project deployment from the specified assigned resources.",
        "operationId": "DeleteDeploymentFromResources",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentName",
            "description": "The deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The options for deleting the deployment.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDeploymentOptions"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Delete Deployment": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulDeleteDeploymentFromResources.json"
          }
        }
      }
    },
    "/{projectName}/deployments/{deploymentName}/delete-from-resources/jobs/{jobId}": {
      "get": {
        "summary": "Get deployment deletion from resources status",
        "description": "Gets the status of an existing delete deployment from specific resources job.",
        "operationId": "GetDeploymentDeleteFromResourcesStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentName",
            "description": "The deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The deployment job result.",
            "schema": {
              "$ref": "#/definitions/DeploymentJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Delete Deployment From Resources Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetDeploymentStatus.json"
          }
        }
      }
    },
    "/{projectName}/deployments/{deploymentName}/jobs/{jobId}": {
      "get": {
        "summary": "Get deployment status",
        "description": "Gets the status of an existing deployment job.",
        "operationId": "GetDeploymentStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentName",
            "description": "The deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The deployment job result.",
            "schema": {
              "$ref": "#/definitions/DeploymentJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Deployment Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetDeploymentStatus.json"
          }
        }
      }
    },
    "/{projectName}/deployments/swap/jobs/{jobId}": {
      "get": {
        "summary": "Gets swap deployments status",
        "description": "Gets the status of an existing swap deployment job.",
        "operationId": "GetSwapDeploymentsStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The swap deployment job result.",
            "schema": {
              "$ref": "#/definitions/DeploymentJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Swap Deployments Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetSwapDeploymentsStatus.json"
          }
        }
      }
    },
    "/{projectName}/export/jobs/{jobId}": {
      "get": {
        "summary": "Get export status",
        "description": "Gets the status of an export job. Once job completes, returns the project metadata, and assets.",
        "operationId": "GetExportStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The status of the long running operation.",
            "schema": {
              "$ref": "#/definitions/ExportProjectJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Export Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetExportStatus.json"
          }
        }
      }
    },
    "/{projectName}/export/jobs/{jobId}/result": {
      "get": {
        "summary": "Get export result",
        "description": "Gets the result of an export job.",
        "operationId": "GetExportResult",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The exported json project object.",
            "schema": {
              "$ref": "#/definitions/ExportedProject"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Export Result": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetExportResult.json"
          }
        }
      }
    },
    "/{projectName}/import/jobs/{jobId}": {
      "get": {
        "summary": "Get import status",
        "description": "Gets the status for an import.",
        "operationId": "GetImportStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the long running operation.",
            "schema": {
              "$ref": "#/definitions/ImportProjectJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Import Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetImportStatus.json"
          }
        }
      }
    },
    "/{projectName}/models": {
      "get": {
        "summary": "List trained models",
        "description": "Lists the trained models belonging to a project.",
        "operationId": "ListTrainedModels",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of trained models to be returned.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The offset in the response.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "The maximum number of trained models per page.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all trained models.",
            "schema": {
              "$ref": "#/definitions/ProjectTrainedModels"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful List Models": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulListModels.json"
          }
        }
      }
    },
    "/{projectName}/models/{trainedModelLabel}": {
      "get": {
        "summary": "Get trained model details",
        "description": "Gets the details of a trained model.",
        "operationId": "GetTrainedModel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "trainedModelLabel",
            "description": "The trained model label.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Trained model info",
            "schema": {
              "$ref": "#/definitions/ProjectTrainedModel"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Model": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetModel.json"
          }
        }
      },
      "delete": {
        "summary": "Delete trained model",
        "description": "Deletes an existing trained model.",
        "operationId": "DeleteTrainedModel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "trainedModelLabel",
            "description": "The trained model label.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully."
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Delete Model": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulDeleteModel.json"
          }
        }
      }
    },
    "/{projectName}/models/{trainedModelLabel}/:evaluate": {
      "post": {
        "summary": "Evaluate model",
        "description": "Triggers evaluation operation on a trained model.",
        "operationId": "EvaluateModel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "trainedModelLabel",
            "description": "The trained model label.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The split kind and percentage for the testing dataset.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EvaluationOnDemandOptions"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Evaluation": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulEvaluationProject.json"
          }
        }
      }
    },
    "/{projectName}/models/{trainedModelLabel}/:load-snapshot": {
      "post": {
        "summary": "Load trained model snapshot to the working directory.",
        "description": "Restores the snapshot of this trained model to be the current working directory of the project.",
        "operationId": "LoadSnapshot",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "trainedModelLabel",
            "description": "The trained model label.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results in loading the working directory with the snapshot of the model provided.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Load Snapshot": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulLoadSnapshot.json"
          }
        }
      }
    },
    "/{projectName}/models/{trainedModelLabel}/evaluate/jobs/{jobId}": {
      "get": {
        "summary": "Get evaluation status",
        "description": "Gets the status for an evaluation job.",
        "operationId": "GetEvaluationStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "trainedModelLabel",
            "description": "The trained model label.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The evaluation job result.",
            "schema": {
              "$ref": "#/definitions/EvaluationJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Evaluation Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetEvaluationStatus.json"
          }
        }
      }
    },
    "/{projectName}/models/{trainedModelLabel}/evaluation/result": {
      "get": {
        "summary": "Get trained model evaluation result",
        "description": "Gets the detailed results of the evaluation for a trained model. This includes the raw inference results for the data included in the evaluation process.",
        "operationId": "GetModelEvaluationResults",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "trainedModelLabel",
            "description": "The trained model label.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "stringIndexType",
            "description": "Specifies the method used to interpret string offsets. For additional information see https://aka.ms/text-analytics-offsets.",
            "required": true,
            "type": "string",
            "enum": [
              "Utf16CodeUnit"
            ],
            "x-ms-enum": {
              "name": "StringIndexType",
              "modelAsString": true,
              "values": [
                {
                  "value": "Utf16CodeUnit",
                  "description": "The offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of utterances to be returned.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The offset in the response.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "The maximum number of utterances per page.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of the evaluation predictions.",
            "schema": {
              "$ref": "#/definitions/EvaluationResults"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Model Evaluation": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetModelEvaluation.json"
          }
        }
      }
    },
    "/{projectName}/models/{trainedModelLabel}/evaluation/summary-result": {
      "get": {
        "summary": "Get trained model evaluation summary",
        "description": "Gets the evaluation summary of a trained model. The summary includes high level performance measurements of the model e.g., F1, Precision, Recall, etc.",
        "operationId": "GetModelEvaluationSummary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "trainedModelLabel",
            "description": "The trained model label.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all evaluation results.",
            "schema": {
              "$ref": "#/definitions/EvaluationSummary"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Model Evaluation Summary": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetModelEvaluationSummary.json"
          }
        }
      }
    },
    "/{projectName}/models/{trainedModelLabel}/load-snapshot/jobs/{jobId}": {
      "get": {
        "summary": "Get load snapshot status",
        "description": "Gets the status for loading a snapshot.",
        "operationId": "GetLoadSnapshotStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "trainedModelLabel",
            "description": "The trained model label.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the long running operation.",
            "schema": {
              "$ref": "#/definitions/LoadSnapshotJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Load Snapshot Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetLoadSnapshotStatus.json"
          }
        }
      }
    },
    "/{projectName}/resources": {
      "get": {
        "summary": "Lists deployment resources",
        "description": "Lists the deployments resources assigned to the project.",
        "operationId": "ListDeploymentResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of deployments to be returned.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The offset in the response.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "The maximum number of deployments per page.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The assigned deployment resources.",
            "schema": {
              "$ref": "#/definitions/AssignedDeploymentResources"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful List Deployment Resources": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulListDeploymentResources.json"
          }
        }
      }
    },
    "/{projectName}/resources/:assign": {
      "post": {
        "summary": "Assign deployment resources",
        "description": "Assign new Azure resources to a project to allow deploying new deployments to them. This API is available only via AAD authentication and not supported via subscription key authentication. For more details about AAD authentication, check here: https://learn.microsoft.com/en-us/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory",
        "operationId": "AssignDeploymentResources",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The new project resources info.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignDeploymentResourcesOptions"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Assign Deployment Resources": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulAssignDeploymentResources.json"
          }
        }
      }
    },
    "/{projectName}/resources/:unassign": {
      "post": {
        "summary": "Unassign deployment resources",
        "description": "Unassign resources from a project. This disallows deploying new deployments to these resources, and deletes existing deployments assigned to them.",
        "operationId": "UnassignDeploymentResources",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The info for the deployment resources to be deleted.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnassignDeploymentResourcesOptions"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the created job.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Unassign Deployment Resources": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulUnassignDeploymentResources.json"
          }
        }
      }
    },
    "/{projectName}/resources/assign/jobs/{jobId}": {
      "get": {
        "summary": "Get assign deployment resources status",
        "description": "Gets the status of an existing assign deployment resources job.",
        "operationId": "GetAssignDeploymentResourcesStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The assign deployment resources job result.",
            "schema": {
              "$ref": "#/definitions/DeploymentResourcesJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Assign Deployment Resources Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetAssignDeploymentResourcesStatus.json"
          }
        }
      }
    },
    "/{projectName}/resources/unassign/jobs/{jobId}": {
      "get": {
        "summary": "Get unassign deployment resources status",
        "description": "Gets the status of an existing unassign deployment resources job.",
        "operationId": "GetUnassignDeploymentResourcesStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The unassign deployment resources job result.",
            "schema": {
              "$ref": "#/definitions/DeploymentResourcesJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Unassign Deployment Resources Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetUnassignDeploymentResourcesStatus.json"
          }
        }
      }
    },
    "/{projectName}/train/jobs": {
      "get": {
        "summary": "List training jobs",
        "description": "Lists the non-expired training jobs created for a project.",
        "operationId": "ListTrainingJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of training jobs to be returned.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The offset in the response.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "The maximum number of jobs per page.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of the training jobs.",
            "schema": {
              "$ref": "#/definitions/TrainingJobs"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful List Training Jobs": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulListTrainingJobs.json"
          }
        }
      }
    },
    "/{projectName}/train/jobs/{jobId}": {
      "get": {
        "summary": "Get training status",
        "description": "Gets the status for a training job.",
        "operationId": "GetTrainingStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The training job result.",
            "schema": {
              "$ref": "#/definitions/TrainingJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Train Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetTrainStatus.json"
          }
        }
      }
    },
    "/{projectName}/train/jobs/{jobId}/:cancel": {
      "post": {
        "summary": "Cancel training",
        "description": "Triggers a cancellation for a running training job.",
        "operationId": "CancelTrainingJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectName",
            "description": "The project name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the job.",
            "headers": {
              "operation-location": {
                "description": "The location of the status API for monitoring the job cancellation.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Cancel Training Job": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulCancelTrainingJob.json"
          }
        }
      }
    },
    "/global/deletion-jobs/{jobId}": {
      "get": {
        "summary": "Get project deletion status",
        "description": "Gets the status for a project deletion job.",
        "operationId": "GetProjectDeletionStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The project deletion job result.",
            "schema": {
              "$ref": "#/definitions/ProjectDeletionJobState"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Project Deletion Status": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetProjectDeletionStatus.json"
          }
        }
      }
    },
    "/global/deployments/resources": {
      "get": {
        "summary": "Lists assigned resource deployments",
        "description": "Lists the deployments to which an Azure resource is assigned. This doesn't return deployments belonging to projects owned by this resource. It only returns deployments belonging to projects owned by other resources.",
        "operationId": "ListAssignedResourceDeployments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "top",
            "description": "The number of deployments to be returned.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The offset in the response.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "The maximum number of deployments per page.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The assigned deployments metadata for the resource.",
            "schema": {
              "$ref": "#/definitions/AssignedResourceDeploymentsMetadata"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful List Assigned Resource Deployments": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulListAssignedResourceDeployments.json"
          }
        }
      }
    },
    "/global/languages": {
      "get": {
        "summary": "List supported languages",
        "description": "Lists the supported languages for the given project type.",
        "operationId": "GetSupportedLanguages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "projectKind",
            "description": "The project kind.",
            "required": true,
            "type": "string",
            "enum": [
              "Conversation",
              "Orchestration",
              "CustomConversationSummarization"
            ],
            "x-ms-enum": {
              "name": "ProjectKind",
              "modelAsString": true,
              "values": [
                {
                  "value": "Conversation",
                  "description": "A project to build natural language into apps, bots, and IoT devices."
                },
                {
                  "value": "Orchestration",
                  "description": "A project to connect and orchestrate Conversation, Custom question answering and LUIS projects together in one single project."
                },
                {
                  "value": "CustomConversationSummarization",
                  "description": "A project to build conversation summarization models which are able to summarize long conversations."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of languages to be returned.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The offset in the response.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "The maximum number of languages per page.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of supported languages.",
            "schema": {
              "$ref": "#/definitions/SupportedLanguages"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Supported Languages": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetSupportedLanguages.json"
          }
        }
      }
    },
    "/global/prebuilt-entities": {
      "get": {
        "summary": "List supported prebuilt entities",
        "description": "Lists the supported prebuilt entities that can be used while creating composed entities.",
        "operationId": "GetSupportedPrebuiltEntities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "language",
            "description": "The language to get supported prebuilt entities for. Required if multilingual is false. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "multilingual",
            "description": "Whether to get the support prebuilt entities for multilingual or monolingual projects. If true, the language parameter is ignored.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of prebuilt entities to be returned.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The offset in the response.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "The maximum number of prebuilt entities per page.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of supported prebuilt entities.",
            "schema": {
              "$ref": "#/definitions/PrebuiltEntities"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Supported Prebuilt Entities": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetSupportedPrebuiltEntities.json"
          }
        }
      }
    },
    "/global/training-config-versions": {
      "get": {
        "summary": "List training config versions",
        "description": "Lists the support training config version for a given project type.",
        "operationId": "ListTrainingConfigVersions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "projectKind",
            "description": "The project kind.",
            "required": true,
            "type": "string",
            "enum": [
              "Conversation",
              "Orchestration",
              "CustomConversationSummarization"
            ],
            "x-ms-enum": {
              "name": "ProjectKind",
              "modelAsString": true,
              "values": [
                {
                  "value": "Conversation",
                  "description": "A project to build natural language into apps, bots, and IoT devices."
                },
                {
                  "value": "Orchestration",
                  "description": "A project to connect and orchestrate Conversation, Custom question answering and LUIS projects together in one single project."
                },
                {
                  "value": "CustomConversationSummarization",
                  "description": "A project to build conversation summarization models which are able to summarize long conversations."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of config versions to be returned.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The offset in the response.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "The maximum number of config versions per page.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of config versions.",
            "schema": {
              "$ref": "#/definitions/TrainingConfigVersions"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Supported Training Config Versions": {
            "$ref": "./examples/analyzeconversations-authoring/SuccessfulGetSupportedTrainingConfigVersions.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AssignDeploymentResourcesOptions": {
      "description": "Represents the options for assigning Azure resources to a project.",
      "required": [
        "resourcesMetadata"
      ],
      "type": "object",
      "properties": {
        "resourcesMetadata": {
          "description": "Represents the metadata for the resources to be assigned.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMetadata"
          }
        }
      }
    },
    "AssignedDeploymentResource": {
      "description": "Represents the assigned deployment resource.",
      "required": [
        "azureResourceId",
        "region"
      ],
      "type": "object",
      "properties": {
        "azureResourceId": {
          "description": "The resource ID.",
          "type": "string"
        },
        "region": {
          "description": "The resource region.",
          "type": "string"
        }
      }
    },
    "AssignedDeploymentResources": {
      "description": "Represents the assigned deployment resources.",
      "required": [
        "value",
        "nextLink"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of assigned deployment resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedDeploymentResource"
          }
        },
        "nextLink": {
          "description": "The next page link.",
          "type": "string"
        }
      }
    },
    "AssignedProjectDeploymentMetadata": {
      "description": "Represents the metadata for an assigned deployment",
      "required": [
        "deploymentName",
        "lastDeployedDateTime",
        "deploymentExpirationDate"
      ],
      "type": "object",
      "properties": {
        "deploymentName": {
          "description": "Represents the deployment name.",
          "type": "string"
        },
        "lastDeployedDateTime": {
          "format": "date-time",
          "description": "Represents deployment last deployed time.",
          "type": "string"
        },
        "deploymentExpirationDate": {
          "format": "date",
          "description": "Represents deployment expiration date in the runtime.",
          "type": "string"
        }
      }
    },
    "AssignedProjectDeploymentsMetadata": {
      "description": "Represents the metadata for assigned deployments for a project.",
      "required": [
        "projectName",
        "deploymentsMetadata"
      ],
      "type": "object",
      "properties": {
        "projectName": {
          "description": "Represents the project name.",
          "type": "string"
        },
        "deploymentsMetadata": {
          "description": "Represents the resource region.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedProjectDeploymentMetadata"
          }
        }
      }
    },
    "AssignedResourceDeploymentsMetadata": {
      "description": "Represents the metadata for deployments assigned to a resource.",
      "required": [
        "value",
        "nextLink"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of retrieved assigned project deployments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedProjectDeploymentsMetadata"
          }
        },
        "nextLink": {
          "description": "The next page link.",
          "type": "string"
        }
      }
    },
    "CompositionSetting": {
      "enum": [
        "returnLongestOverlap",
        "requireExactOverlap",
        "separateComponents",
        "combineComponents"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "CompositionSetting",
        "modelAsString": true,
        "values": [
          {
            "value": "returnLongestOverlap",
            "description": "When two or more components are found in the text and overlap, the component with the longest set of characters is returned."
          },
          {
            "value": "requireExactOverlap",
            "description": "All components must overlap at the exact same characters in the text for the entity to return. If one of the defined components is not matched or predicted, the entity will not return."
          },
          {
            "value": "separateComponents",
            "description": "Every component's match or prediction is returned as a separate instance of the entity."
          },
          {
            "value": "combineComponents",
            "description": "When two or more components are found in the text and overlap, the components' spans are merged together into one span combining all of them."
          }
        ]
      }
    },
    "ConfusionMatrix": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ConfusionMatrixRow"
      }
    },
    "ConfusionMatrixCell": {
      "description": "Represents a cell in a confusion matrix.",
      "required": [
        "normalizedValue",
        "rawValue"
      ],
      "type": "object",
      "properties": {
        "normalizedValue": {
          "format": "float",
          "description": "Represents normalized value in percentages.",
          "type": "number"
        },
        "rawValue": {
          "format": "float",
          "description": "Represents raw value.",
          "type": "number"
        }
      }
    },
    "ConfusionMatrixRow": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ConfusionMatrixCell"
      }
    },
    "ConversationExportedEntity": {
      "description": "Represents an entity with its components.",
      "required": [
        "category"
      ],
      "type": "object",
      "properties": {
        "category": {
          "description": "The category of the entity.",
          "type": "string"
        },
        "compositionSetting": {
          "description": "The behavior to follow when the entity's components overlap with each other.",
          "$ref": "#/definitions/CompositionSetting"
        },
        "list": {
          "description": "The list component of the entity.",
          "$ref": "#/definitions/ExportedEntityList"
        },
        "prebuilts": {
          "description": "The prebuilt entities components.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExportedPrebuiltEntity"
          }
        },
        "regex": {
          "description": "The regex component of the entity.",
          "$ref": "#/definitions/ExportedEntityRegex"
        },
        "requiredComponents": {
          "description": "The required components. Allowed values are 'learned', 'list', 'prebuilts' and 'regex'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConversationExportedIntent": {
      "description": "Represents an exported intent of a conversational project.",
      "required": [
        "category"
      ],
      "type": "object",
      "properties": {
        "category": {
          "description": "The intent category.",
          "type": "string"
        }
      }
    },
    "ConversationExportedProjectAssets": {
      "description": "Represents the exported assets of a conversational project.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExportedProjectAssets"
        }
      ],
      "properties": {
        "intents": {
          "description": "The intents defined in the project.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConversationExportedIntent"
          }
        },
        "entities": {
          "description": "The entities defined in the project.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConversationExportedEntity"
          }
        },
        "utterances": {
          "description": "The utterances defined in the project.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConversationExportedUtterance"
          }
        }
      },
      "x-ms-discriminator-value": "Conversation"
    },
    "ConversationExportedUtterance": {
      "description": "Represents an exported utterance for a conversational project.",
      "required": [
        "text",
        "intent"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "description": "Represents the entity labels of the utterance.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExportedUtteranceEntityLabel"
          }
        },
        "text": {
          "description": "The utterance text.",
          "type": "string"
        },
        "language": {
          "description": "Represents the utterance's language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.",
          "type": "string"
        },
        "intent": {
          "description": "The intent of the utterance.",
          "type": "string"
        },
        "dataset": {
          "description": "The dataset for this utterance. Allowed values are 'Train' and 'Test'.",
          "type": "string"
        }
      }
    },
    "ConversationSummarizationExportedProjectAssets": {
      "type": "object",
      "properties": {
        "conversations": {
          "description": "Represents the conversations of the project.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomConversationSummarizationConversation"
          }
        }
      }
    },
    "CopyAuthorizationOptions": {
      "description": "Represents the options for authorizing a project copy to the current Azure resource.",
      "required": [
        "projectKind"
      ],
      "type": "object",
      "properties": {
        "projectKind": {
          "description": "Represents the project kind.",
          "$ref": "#/definitions/ProjectKind"
        },
        "storageInputContainerName": {
          "description": "The name of the storage container.",
          "type": "string"
        },
        "allowOverwrite": {
          "description": "Whether to allow an existing project to be overwritten using the resulting copy authorization.",
          "type": "boolean"
        }
      }
    },
    "CopyProjectJobState": {
      "description": "Represents the state of a copy job.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobState"
        }
      ]
    },
    "CopyProjectOptions": {
      "description": "Represents the options for copying an existing project to another Azure resource.",
      "required": [
        "projectKind",
        "targetProjectName",
        "accessToken",
        "expiresAt",
        "targetResourceId",
        "targetResourceRegion"
      ],
      "type": "object",
      "properties": {
        "projectKind": {
          "description": "Represents the project kind.",
          "$ref": "#/definitions/ProjectKind"
        },
        "targetProjectName": {
          "description": "The project name to be copied-into.",
          "type": "string"
        },
        "accessToken": {
          "description": "The access token.",
          "type": "string"
        },
        "expiresAt": {
          "format": "date-time",
          "description": "The expiration of the access token.",
          "type": "string"
        },
        "targetResourceId": {
          "description": "Represents the target Azure resource ID.",
          "type": "string"
        },
        "targetResourceRegion": {
          "description": "Represents the target Azure resource region.",
          "type": "string"
        }
      }
    },
    "CreateDeploymentOptions": {
      "description": "Represents the options for creating or updating a project deployment.",
      "required": [
        "trainedModelLabel"
      ],
      "type": "object",
      "properties": {
        "trainedModelLabel": {
          "description": "Represents the trained model label.",
          "type": "string"
        },
        "assignedResourceIds": {
          "description": "Represents the resource IDs to be assigned to the deployment.\n            If provided, the deployment will be rolled out to the resources provided here as well as the original resource in which the project is created.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateProjectOptions": {
      "description": "Represents the options used to create or update a project.",
      "required": [
        "projectKind",
        "projectName",
        "language"
      ],
      "type": "object",
      "properties": {
        "projectKind": {
          "description": "Represents the project kind.",
          "$ref": "#/definitions/ProjectKind"
        },
        "settings": {
          "description": "The project settings.",
          "$ref": "#/definitions/ProjectSettings"
        },
        "storageInputContainerName": {
          "description": "The storage container name in case of conversation summarization.",
          "type": "string"
        },
        "projectName": {
          "description": "The new project name.",
          "type": "string"
        },
        "multilingual": {
          "description": "Whether the project would be used for multiple languages or not.",
          "type": "boolean"
        },
        "description": {
          "description": "The project description.",
          "type": "string"
        },
        "language": {
          "description": "The project language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.",
          "type": "string"
        }
      }
    },
    "CustomConversationSummarizationConversation": {
      "description": "Represents an exported conversation for a custom conversation summarization.",
      "required": [
        "location"
      ],
      "type": "object",
      "properties": {
        "summaryLocation": {
          "type": "string"
        },
        "location": {
          "description": "Represents the conversation file location in the blob store container associated with the project.",
          "type": "string"
        },
        "language": {
          "description": "Represents the language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.",
          "type": "string"
        },
        "dataset": {
          "description": "The dataset for this conversation. Allowed values are 'Train' and 'Test'.",
          "type": "string"
        }
      }
    },
    "DeleteDeploymentOptions": {
      "description": "Represents the options for deleting a project deployment.",
      "type": "object",
      "properties": {
        "assignedResourceIds": {
          "description": "Represents the resource IDs to delete the deployment from.\n            If not provided, the deployment will be rolled out from all the resources it is deployed to.\n            If provided, it will delete the deployment only from the specified assigned resources, and leave it for the rest.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentJobState": {
      "description": "Represents the state of a deployment job.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobState"
        }
      ]
    },
    "DeploymentResource": {
      "description": "Represents an Azure resource assigned to a deployment.",
      "required": [
        "resourceId",
        "region"
      ],
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "Represents the Azure resource Id.",
          "type": "string"
        },
        "region": {
          "description": "Represents the resource region.",
          "type": "string"
        }
      }
    },
    "DeploymentResourcesJobState": {
      "description": "Represents the state of a deployment resources job.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobState"
        }
      ]
    },
    "EntitiesEvaluationSummary": {
      "description": "Represents the evaluation result summary for the project's entities.",
      "required": [
        "confusionMatrix",
        "entities",
        "microF1",
        "microPrecision",
        "microRecall",
        "macroF1",
        "macroPrecision",
        "macroRecall"
      ],
      "type": "object",
      "properties": {
        "confusionMatrix": {
          "description": "Represents the confusion matrix between two entities (the two entities can be the same). The matrix is between the entity that was labelled and the entity that was predicted.",
          "$ref": "#/definitions/ConfusionMatrix"
        },
        "entities": {
          "description": "Represents the entities evaluation summary.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EntityEvaluationSummary"
          }
        },
        "microF1": {
          "format": "float",
          "description": "Represents the micro F1. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        },
        "microPrecision": {
          "format": "float",
          "description": "Represents the micro precision. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        },
        "microRecall": {
          "format": "float",
          "description": "Represents the micro recall. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        },
        "macroF1": {
          "format": "float",
          "description": "Represents the macro F1. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        },
        "macroPrecision": {
          "format": "float",
          "description": "Represents the macro precision. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        },
        "macroRecall": {
          "format": "float",
          "description": "Represents the macro recall. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        }
      }
    },
    "EntityEvaluationSummary": {
      "description": "Represents the evaluation result for an entity.",
      "required": [
        "f1",
        "precision",
        "recall",
        "truePositiveCount",
        "trueNegativeCount",
        "falsePositiveCount",
        "falseNegativeCount"
      ],
      "type": "object",
      "properties": {
        "f1": {
          "format": "double",
          "description": "Represents the model precision",
          "type": "number"
        },
        "precision": {
          "format": "double",
          "description": "Represents the model recall",
          "type": "number"
        },
        "recall": {
          "format": "double",
          "description": "Represents the model F1 score",
          "type": "number"
        },
        "truePositiveCount": {
          "format": "int32",
          "description": "Represents the count of true positive",
          "type": "integer"
        },
        "trueNegativeCount": {
          "format": "int32",
          "description": "Represents the count of true negative",
          "type": "integer"
        },
        "falsePositiveCount": {
          "format": "int32",
          "description": "Represents the count of false positive",
          "type": "integer"
        },
        "falseNegativeCount": {
          "format": "int32",
          "description": "Represents the count of false negative",
          "type": "integer"
        }
      }
    },
    "Error": {
      "description": "Represents the definition of an error that occurred.",
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code.",
          "$ref": "#/definitions/ErrorCode"
        },
        "message": {
          "description": "The error message.",
          "type": "string"
        },
        "target": {
          "description": "The target that caused the error, if applicable.",
          "type": "string"
        },
        "details": {
          "description": "An array of details about specific errors that led to this reported error.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "ErrorCode": {
      "enum": [
        "InvalidRequest",
        "InvalidArgument",
        "Forbidden",
        "NotFound",
        "Unauthorized",
        "Timeout",
        "QuotaExceeded",
        "Conflict",
        "Warning",
        "InternalServerError"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ErrorCode",
        "modelAsString": true
      }
    },
    "ErrorResponse": {
      "description": "Represents an error that occurred.",
      "required": [
        "error"
      ],
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "EvaluationJobResult": {
      "required": [
        "evaluationOptions",
        "modelLabel",
        "trainingConfigVersion",
        "percentComplete"
      ],
      "type": "object",
      "properties": {
        "evaluationOptions": {
          "description": "Represents the options used running the evaluation.",
          "$ref": "#/definitions/EvaluationOptions"
        },
        "modelLabel": {
          "description": "Represents trained model label.",
          "type": "string"
        },
        "trainingConfigVersion": {
          "description": "Represents training config version.",
          "type": "string"
        },
        "percentComplete": {
          "format": "double",
          "description": "Represents progress percentage.",
          "type": "number"
        }
      }
    },
    "EvaluationJobState": {
      "description": "Represents the state of a evaluation job.",
      "required": [
        "result"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobState"
        }
      ],
      "properties": {
        "result": {
          "description": "Represents evaluation task detailed result.",
          "$ref": "#/definitions/EvaluationJobResult"
        }
      }
    },
    "EvaluationKind": {
      "enum": [
        "percentage",
        "manual"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "EvaluationKind",
        "modelAsString": true,
        "values": [
          {
            "value": "percentage",
            "description": "Split the data into training and test sets according to user-defined percentages."
          },
          {
            "value": "manual",
            "description": "Split the data according to the chosen dataset for every example in the data."
          }
        ]
      }
    },
    "EvaluationOnDemandOptions": {
      "description": "Represents the options used running the evaluation.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Represents the evaluation kind. By default, the evaluation kind is set to percentage.",
          "$ref": "#/definitions/EvaluationKind"
        },
        "testingSplitPercentage": {
          "format": "int32",
          "description": "Represents the testing dataset split percentage. Only needed in case the evaluation kind is percentage.",
          "type": "integer"
        }
      }
    },
    "EvaluationOptions": {
      "description": "Represents the options used running the evaluation.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Represents the evaluation kind. By default, the evaluation kind is set to percentage.",
          "$ref": "#/definitions/EvaluationKind"
        },
        "trainingSplitPercentage": {
          "format": "int32",
          "description": "Represents the training dataset split percentage. Only needed in case the evaluation kind is percentage.",
          "type": "integer"
        },
        "testingSplitPercentage": {
          "format": "int32",
          "description": "Represents the testing dataset split percentage. Only needed in case the evaluation kind is percentage.",
          "type": "integer"
        }
      }
    },
    "EvaluationResults": {
      "description": "Represent a list of utterances' evaluation results.",
      "required": [
        "value",
        "nextLink"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The utterances evaluation results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UtteranceEvaluationResult"
          }
        },
        "nextLink": {
          "description": "The next page link.",
          "type": "string"
        }
      }
    },
    "EvaluationSummary": {
      "description": "Represents the evaluation result summary.",
      "required": [
        "entitiesEvaluation",
        "intentsEvaluation"
      ],
      "type": "object",
      "properties": {
        "entitiesEvaluation": {
          "description": "Contains the data related to entities evaluation.",
          "$ref": "#/definitions/EntitiesEvaluationSummary"
        },
        "intentsEvaluation": {
          "description": "Contains the data related to intents evaluation.",
          "$ref": "#/definitions/IntentsEvaluationSummary"
        },
        "evaluationOptions": {
          "description": "The options that were used while running the evaluation.",
          "$ref": "#/definitions/EvaluationOptions"
        }
      }
    },
    "ExportedConversationOrchestration": {
      "description": "Defines the orchestration details for a Conversational project target.",
      "required": [
        "projectName",
        "deploymentName"
      ],
      "type": "object",
      "properties": {
        "projectName": {
          "description": "The name of the targeted project.",
          "type": "string"
        },
        "deploymentName": {
          "description": "The name of the targeted deployment.",
          "type": "string"
        }
      }
    },
    "ExportedConversationOrchestrationOptions": {
      "description": "Represents the orchestration options for a Conversational project target.",
      "required": [
        "conversationOrchestration"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExportedOrchestrationOptions"
        }
      ],
      "properties": {
        "conversationOrchestration": {
          "description": "The Conversational project target details.",
          "$ref": "#/definitions/ExportedConversationOrchestration"
        }
      },
      "x-ms-discriminator-value": "Conversation"
    },
    "ExportedEntityList": {
      "description": "Represents a list component of an entity.",
      "type": "object",
      "properties": {
        "sublists": {
          "description": "The sub-lists of the list component.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExportedEntitySublist"
          }
        }
      }
    },
    "ExportedEntityListSynonym": {
      "description": "Represents a list of synonyms inside a list component",
      "type": "object",
      "properties": {
        "language": {
          "description": "Represents the language of the synonyms. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.",
          "type": "string"
        },
        "values": {
          "description": "The list of synonyms.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExportedEntityRegex": {
      "description": "Represents a regex component of an entity.",
      "type": "object",
      "properties": {
        "expressions": {
          "description": "The regex expressions of the regex component. These expressions follow the .NET regex syntax. For reference, check here: https://learn.microsoft.com/dotnet/standard/base-types/regular-expressions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExportedEntityRegexExpression"
          }
        }
      }
    },
    "ExportedEntityRegexExpression": {
      "description": "Represents a regex expression inside a regex component. This expression follows the .NET regex syntax. For reference, check here: https://learn.microsoft.com/dotnet/standard/base-types/regular-expressions",
      "type": "object",
      "properties": {
        "regexKey": {
          "description": "The key of the regex expression.",
          "type": "string"
        },
        "language": {
          "description": "Represents the language of the regex expression. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.",
          "type": "string"
        },
        "regexPattern": {
          "description": "The regex pattern.",
          "type": "string"
        }
      }
    },
    "ExportedEntitySublist": {
      "description": "Represents a sub-list inside a list component.",
      "type": "object",
      "properties": {
        "listKey": {
          "description": "The key of the sub-list.",
          "type": "string"
        },
        "synonyms": {
          "description": "The phrases of that correspond to the sub-list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExportedEntityListSynonym"
          }
        }
      }
    },
    "ExportedLuisOrchestration": {
      "description": "Defines the orchestration details for a LUIS application target.",
      "required": [
        "appId"
      ],
      "type": "object",
      "properties": {
        "appId": {
          "format": "uuid",
          "description": "The LUIS application ID.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "appVersion": {
          "description": "The targeted version Id.",
          "type": "string"
        },
        "slotName": {
          "description": "The targeted slot name.",
          "type": "string"
        }
      }
    },
    "ExportedLuisOrchestrationOptions": {
      "description": "Represents the orchestration options for a LUIS application target.",
      "required": [
        "luisOrchestration"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExportedOrchestrationOptions"
        }
      ],
      "properties": {
        "luisOrchestration": {
          "description": "The LUIS application target details.",
          "$ref": "#/definitions/ExportedLuisOrchestration"
        }
      },
      "x-ms-discriminator-value": "Luis"
    },
    "ExportedOrchestrationOptions": {
      "description": "Represents the options used to define the orchestration behavior of an intent.",
      "required": [
        "targetProjectKind"
      ],
      "type": "object",
      "properties": {
        "targetProjectKind": {
          "description": "The kind of the target used in the orchestration flow.",
          "$ref": "#/definitions/OrchestrationTargetProjectKind"
        }
      },
      "discriminator": "targetProjectKind"
    },
    "ExportedPrebuiltEntity": {
      "description": "Represents an exported prebuilt entity component",
      "required": [
        "category"
      ],
      "type": "object",
      "properties": {
        "category": {
          "description": "The prebuilt entity category.",
          "type": "string"
        }
      }
    },
    "ExportedProject": {
      "description": "Represents an exported project.",
      "required": [
        "projectFileVersion",
        "stringIndexType",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "projectFileVersion": {
          "description": "The version of the exported file.",
          "type": "string"
        },
        "stringIndexType": {
          "description": "Specifies the method used to interpret string offsets. For additional information see https://aka.ms/text-analytics-offsets.",
          "$ref": "#/definitions/StringIndexType"
        },
        "metadata": {
          "description": "Represents the project metadata.",
          "$ref": "#/definitions/CreateProjectOptions"
        },
        "assets": {
          "description": "Represents the project assets.",
          "$ref": "#/definitions/ExportedProjectAssets"
        }
      }
    },
    "ExportedProjectAssets": {
      "description": "Represents the assets of an exported project.",
      "required": [
        "projectKind"
      ],
      "type": "object",
      "properties": {
        "projectKind": {
          "description": "The type of project containing the assets.",
          "$ref": "#/definitions/ProjectKind"
        }
      },
      "discriminator": "projectKind"
    },
    "ExportedProjectFormat": {
      "enum": [
        "Conversation",
        "Luis"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ExportedProjectFormat",
        "modelAsString": true,
        "values": [
          {
            "value": "Conversation",
            "description": "Specifies the format for a conversational project."
          },
          {
            "value": "Luis",
            "description": "Specifies the format for an application that was exported from LUIS."
          }
        ]
      }
    },
    "ExportedQuestionAnsweringOrchestration": {
      "description": "Defines the orchestration details for a Question Answering project target.",
      "required": [
        "projectName"
      ],
      "type": "object",
      "properties": {
        "projectName": {
          "description": "The name of the target project.",
          "type": "string"
        }
      }
    },
    "ExportedQuestionAnsweringOrchestrationOptions": {
      "description": "Represents the orchestration options for a Question Answering project target.",
      "required": [
        "questionAnsweringOrchestration"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExportedOrchestrationOptions"
        }
      ],
      "properties": {
        "questionAnsweringOrchestration": {
          "description": "The Question Answering project details.",
          "$ref": "#/definitions/ExportedQuestionAnsweringOrchestration"
        }
      },
      "x-ms-discriminator-value": "QuestionAnswering"
    },
    "ExportedUtteranceEntityLabel": {
      "description": "Represents an entity label for an utterance.",
      "required": [
        "category",
        "offset",
        "length"
      ],
      "type": "object",
      "properties": {
        "category": {
          "description": "The category of the entity label.",
          "type": "string"
        },
        "offset": {
          "format": "int32",
          "description": "Start position for the entity text.",
          "type": "integer"
        },
        "length": {
          "format": "int32",
          "description": "Length for the entity text.",
          "type": "integer"
        }
      }
    },
    "ExportProjectJobState": {
      "description": "Represents the state of an export job.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobState"
        }
      ],
      "properties": {
        "resultUrl": {
          "description": "The URL to use in order to download the exported project.",
          "type": "string"
        }
      }
    },
    "ImportProjectJobState": {
      "description": "Represents the state of an import job.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobState"
        }
      ]
    },
    "IntentEvaluationSummary": {
      "description": "The evaluation summary for an intent.",
      "required": [
        "f1",
        "precision",
        "recall",
        "truePositiveCount",
        "trueNegativeCount",
        "falsePositiveCount",
        "falseNegativeCount"
      ],
      "type": "object",
      "properties": {
        "f1": {
          "format": "double",
          "description": "Represents the model precision",
          "type": "number"
        },
        "precision": {
          "format": "double",
          "description": "Represents the model recall",
          "type": "number"
        },
        "recall": {
          "format": "double",
          "description": "Represents the model F1 score",
          "type": "number"
        },
        "truePositiveCount": {
          "format": "int32",
          "description": "Represents the count of true positive",
          "type": "integer"
        },
        "trueNegativeCount": {
          "format": "int32",
          "description": "Represents the count of true negative",
          "type": "integer"
        },
        "falsePositiveCount": {
          "format": "int32",
          "description": "Represents the count of false positive",
          "type": "integer"
        },
        "falseNegativeCount": {
          "format": "int32",
          "description": "Represents the count of false negative",
          "type": "integer"
        }
      }
    },
    "IntentsEvaluationSummary": {
      "description": "Represents the evaluation summary for the project's intents.",
      "required": [
        "confusionMatrix",
        "intents",
        "microF1",
        "microPrecision",
        "microRecall",
        "macroF1",
        "macroPrecision",
        "macroRecall"
      ],
      "type": "object",
      "properties": {
        "confusionMatrix": {
          "description": "Represents the confusion matrix between two intents (the two intents can be the same). The matrix is between the intent that was labelled and the intent that was predicted.",
          "$ref": "#/definitions/ConfusionMatrix"
        },
        "intents": {
          "description": "Represents the intents evaluation summary.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/IntentEvaluationSummary"
          }
        },
        "microF1": {
          "format": "float",
          "description": "Represents the micro F1. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        },
        "microPrecision": {
          "format": "float",
          "description": "Represents the micro precision. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        },
        "microRecall": {
          "format": "float",
          "description": "Represents the micro recall. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        },
        "macroF1": {
          "format": "float",
          "description": "Represents the macro F1. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        },
        "macroPrecision": {
          "format": "float",
          "description": "Represents the macro precision. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        },
        "macroRecall": {
          "format": "float",
          "description": "Represents the macro recall. Expected value is a float between 0 and 1 inclusive.",
          "type": "number"
        }
      }
    },
    "JobState": {
      "description": "Represents a job's state.",
      "required": [
        "jobId",
        "createdDateTime",
        "lastUpdatedDateTime",
        "status"
      ],
      "type": "object",
      "properties": {
        "jobId": {
          "description": "The job ID.",
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "The creation date time of the job.",
          "type": "string"
        },
        "lastUpdatedDateTime": {
          "format": "date-time",
          "description": "The last date time the job was updated.",
          "type": "string"
        },
        "expirationDateTime": {
          "format": "date-time",
          "description": "The expiration date time of the job.",
          "type": "string"
        },
        "status": {
          "description": "The job status.",
          "$ref": "#/definitions/JobStatus"
        },
        "warnings": {
          "description": "The warnings that were encountered while executing the job.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Warning"
          }
        },
        "errors": {
          "description": "The errors encountered while executing the job.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "JobStatus": {
      "enum": [
        "notStarted",
        "running",
        "succeeded",
        "failed",
        "cancelled",
        "cancelling",
        "partiallyCompleted"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "JobStatus",
        "modelAsString": true
      }
    },
    "LoadSnapshotJobState": {
      "description": "Represents the state of loading a snapshot job.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobState"
        }
      ]
    },
    "OrchestrationExportedIntent": {
      "description": "Represents an exported intent for an orchestration project.",
      "required": [
        "category"
      ],
      "type": "object",
      "properties": {
        "orchestration": {
          "description": "Specifies the behavior of this intent in the orchestration flow.",
          "$ref": "#/definitions/ExportedOrchestrationOptions"
        },
        "category": {
          "description": "The intent category.",
          "type": "string"
        }
      }
    },
    "OrchestrationExportedProjectAssets": {
      "description": "Represents the assets of an orchestration project.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExportedProjectAssets"
        }
      ],
      "properties": {
        "intents": {
          "description": "Represents the intents of the project.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrchestrationExportedIntent"
          }
        },
        "utterances": {
          "description": "Represents the utterances of the project.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrchestrationExportedUtterance"
          }
        }
      },
      "x-ms-discriminator-value": "Orchestration"
    },
    "OrchestrationExportedUtterance": {
      "description": "Represents an utterance of an orchestration project.",
      "required": [
        "text",
        "intent"
      ],
      "type": "object",
      "properties": {
        "text": {
          "description": "The utterance text.",
          "type": "string"
        },
        "language": {
          "description": "Represents the utterance's language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.",
          "type": "string"
        },
        "intent": {
          "description": "The intent of the utterance.",
          "type": "string"
        },
        "dataset": {
          "description": "The dataset for this utterance. Allowed values are 'Train' and 'Test'.",
          "type": "string"
        }
      }
    },
    "OrchestrationTargetProjectKind": {
      "enum": [
        "Luis",
        "Conversation",
        "QuestionAnswering"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "OrchestrationTargetProjectKind",
        "modelAsString": true
      }
    },
    "PrebuiltEntities": {
      "description": "Represents a list of the retrieved supported prebuilt entities.",
      "required": [
        "value",
        "nextLink"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The supported prebuilt entities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrebuiltEntity"
          }
        },
        "nextLink": {
          "description": "The next page link.",
          "type": "string"
        }
      }
    },
    "PrebuiltEntity": {
      "description": "Represents a supported prebuilt entity.",
      "required": [
        "category",
        "description",
        "examples"
      ],
      "type": "object",
      "properties": {
        "category": {
          "description": "The prebuilt entity category.",
          "type": "string"
        },
        "description": {
          "description": "The description.",
          "type": "string"
        },
        "examples": {
          "description": "English examples for the entity.",
          "type": "string"
        }
      }
    },
    "ProjectDeletionJobState": {
      "description": "Represents the state of a project deletion job.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobState"
        }
      ]
    },
    "ProjectDeployment": {
      "description": "Represents a project deployment.",
      "required": [
        "deploymentName",
        "modelId",
        "lastTrainedDateTime",
        "lastDeployedDateTime",
        "deploymentExpirationDate",
        "modelTrainingConfigVersion",
        "assignedResources"
      ],
      "type": "object",
      "properties": {
        "deploymentName": {
          "description": "Represents deployment name.",
          "type": "string"
        },
        "modelId": {
          "description": "Represents deployment modelId.",
          "type": "string"
        },
        "lastTrainedDateTime": {
          "format": "date-time",
          "description": "Represents deployment last trained time.",
          "type": "string"
        },
        "lastDeployedDateTime": {
          "format": "date-time",
          "description": "Represents deployment last deployed time.",
          "type": "string"
        },
        "deploymentExpirationDate": {
          "format": "date",
          "description": "Represents deployment expiration date in the runtime.",
          "type": "string"
        },
        "modelTrainingConfigVersion": {
          "description": "Represents model training config version.",
          "type": "string"
        },
        "assignedResources": {
          "description": "Represents the metadata of the assigned Azure resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentResource"
          }
        }
      }
    },
    "ProjectDeployments": {
      "description": "Represents a list of retrieved deployments.",
      "required": [
        "value",
        "nextLink"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of retrieved deployments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectDeployment"
          }
        },
        "nextLink": {
          "description": "The next page link.",
          "type": "string"
        }
      }
    },
    "ProjectKind": {
      "enum": [
        "Conversation",
        "Orchestration",
        "CustomConversationSummarization"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ProjectKind",
        "modelAsString": true,
        "values": [
          {
            "value": "Conversation",
            "description": "A project to build natural language into apps, bots, and IoT devices."
          },
          {
            "value": "Orchestration",
            "description": "A project to connect and orchestrate Conversation, Custom question answering and LUIS projects together in one single project."
          },
          {
            "value": "CustomConversationSummarization",
            "description": "A project to build conversation summarization models which are able to summarize long conversations."
          }
        ]
      }
    },
    "ProjectMetadata": {
      "description": "Represents the metadata of a project.",
      "required": [
        "createdDateTime",
        "lastModifiedDateTime",
        "projectKind",
        "projectName",
        "language"
      ],
      "type": "object",
      "properties": {
        "createdDateTime": {
          "format": "date-time",
          "description": "Represents the project creation datetime.",
          "type": "string"
        },
        "lastModifiedDateTime": {
          "format": "date-time",
          "description": "Represents the project creation datetime.",
          "type": "string"
        },
        "lastTrainedDateTime": {
          "format": "date-time",
          "description": "Represents the project last trained datetime.",
          "type": "string"
        },
        "lastDeployedDateTime": {
          "format": "date-time",
          "description": "Represents the project last deployed datetime.",
          "type": "string"
        },
        "projectKind": {
          "description": "Represents the project kind.",
          "$ref": "#/definitions/ProjectKind"
        },
        "settings": {
          "description": "The project settings.",
          "$ref": "#/definitions/ProjectSettings"
        },
        "storageInputContainerName": {
          "description": "The storage container name in case of conversation summarization.",
          "type": "string"
        },
        "projectName": {
          "description": "The new project name.",
          "type": "string"
        },
        "multilingual": {
          "description": "Whether the project would be used for multiple languages or not.",
          "type": "boolean"
        },
        "description": {
          "description": "The project description.",
          "type": "string"
        },
        "language": {
          "description": "The project language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.",
          "type": "string"
        }
      }
    },
    "ProjectSettings": {
      "description": "Represents the settings used to define the project behavior.",
      "required": [
        "confidenceThreshold"
      ],
      "type": "object",
      "properties": {
        "confidenceThreshold": {
          "format": "float",
          "description": "The threshold of the intent with the highest confidence, at which the prediction will automatically be changed to \"None\". The value of the threshold should be between 0 and 1 inclusive.",
          "type": "number"
        },
        "normalizeCasing": {
          "description": "Gets or sets normalize casing flag",
          "type": "boolean"
        },
        "augmentDiacritics": {
          "description": "Gets or sets the augment diacritics flag.",
          "type": "boolean"
        }
      }
    },
    "ProjectsMetadata": {
      "description": "Represents a list of retrieved projects' metadata.",
      "required": [
        "value",
        "nextLink"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of projects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectMetadata"
          }
        },
        "nextLink": {
          "description": "The next page link.",
          "type": "string"
        }
      }
    },
    "ProjectTrainedModel": {
      "description": "Represents a trained model.",
      "required": [
        "label",
        "modelId",
        "lastTrainedDateTime",
        "lastTrainingDurationInSeconds",
        "modelExpirationDate",
        "modelTrainingConfigVersion",
        "hasSnapshot"
      ],
      "type": "object",
      "properties": {
        "label": {
          "description": "The trained model label.",
          "type": "string"
        },
        "modelId": {
          "description": "The model ID.",
          "type": "string"
        },
        "lastTrainedDateTime": {
          "format": "date-time",
          "description": "The last trained date time of the model.",
          "type": "string"
        },
        "lastTrainingDurationInSeconds": {
          "format": "int32",
          "description": "The duration of the model's last training request in seconds.",
          "type": "integer"
        },
        "modelExpirationDate": {
          "format": "date",
          "description": "The model expiration date.",
          "type": "string"
        },
        "modelTrainingConfigVersion": {
          "description": "The model training config version.",
          "type": "string"
        },
        "hasSnapshot": {
          "description": "The flag to indicate if the trained model has a snapshot ready.",
          "type": "boolean"
        }
      }
    },
    "ProjectTrainedModels": {
      "description": "Represents a list of retrieved trained models.",
      "required": [
        "value",
        "nextLink"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of trained models.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectTrainedModel"
          }
        },
        "nextLink": {
          "description": "The next page link.",
          "type": "string"
        }
      }
    },
    "ResourceMetadata": {
      "description": "Represents metadata for the Azure resource..",
      "required": [
        "azureResourceId",
        "customDomain",
        "region"
      ],
      "type": "object",
      "properties": {
        "azureResourceId": {
          "description": "Represents the Azure resource ID.",
          "type": "string"
        },
        "customDomain": {
          "description": "Represents the Azure resource custom domain.",
          "type": "string"
        },
        "region": {
          "description": "Represents the Azure resource region.",
          "type": "string"
        }
      }
    },
    "StringIndexType": {
      "enum": [
        "Utf16CodeUnit"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "StringIndexType",
        "modelAsString": true,
        "values": [
          {
            "value": "Utf16CodeUnit",
            "description": "The offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript."
          }
        ]
      }
    },
    "SubTrainingJobState": {
      "description": "Represents the detailed state of a training sub-operation.",
      "required": [
        "percentComplete",
        "status"
      ],
      "type": "object",
      "properties": {
        "percentComplete": {
          "format": "int32",
          "description": "Represents progress percentage.",
          "type": "integer"
        },
        "startDateTime": {
          "format": "date-time",
          "description": "Represents the start date time.",
          "type": "string"
        },
        "endDateTime": {
          "format": "date-time",
          "description": "Represents the end date time.",
          "type": "string"
        },
        "status": {
          "description": "Represents the status of the sub-operation.",
          "$ref": "#/definitions/JobStatus"
        }
      }
    },
    "SupportedLanguage": {
      "description": "Represents a supported language.",
      "required": [
        "languageName",
        "languageCode"
      ],
      "type": "object",
      "properties": {
        "languageName": {
          "description": "The language name.",
          "type": "string"
        },
        "languageCode": {
          "description": "The language code. This is BCP-47 representation of a language. For example, \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.",
          "type": "string"
        }
      }
    },
    "SupportedLanguages": {
      "description": "Represents a list of retrieved languages.",
      "required": [
        "value",
        "nextLink"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of the languages.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SupportedLanguage"
          }
        },
        "nextLink": {
          "description": "The next page link.",
          "type": "string"
        }
      }
    },
    "SwapDeploymentsOptions": {
      "description": "Represents the options for swapping two deployments together.",
      "required": [
        "firstDeploymentName",
        "secondDeploymentName"
      ],
      "type": "object",
      "properties": {
        "firstDeploymentName": {
          "description": "Represents the first deployment name.",
          "type": "string"
        },
        "secondDeploymentName": {
          "description": "Represents the second deployment name.",
          "type": "string"
        }
      }
    },
    "TrainingConfigVersion": {
      "description": "Represents a training config version.",
      "required": [
        "trainingConfigVersion",
        "modelExpirationDate"
      ],
      "type": "object",
      "properties": {
        "trainingConfigVersion": {
          "description": "Represents the version of the config.",
          "type": "string"
        },
        "modelExpirationDate": {
          "format": "date",
          "description": "Represents the training config version expiration date.",
          "type": "string"
        }
      }
    },
    "TrainingConfigVersions": {
      "description": "Represents a list of training config versions.",
      "required": [
        "value",
        "nextLink"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of the training config versions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrainingConfigVersion"
          }
        },
        "nextLink": {
          "description": "The next page link.",
          "type": "string"
        }
      }
    },
    "TrainingJobOptions": {
      "description": "Represents the options for starting a new training job.",
      "required": [
        "modelLabel",
        "trainingMode"
      ],
      "type": "object",
      "properties": {
        "modelLabel": {
          "description": "Represents the output model label.",
          "type": "string"
        },
        "trainingConfigVersion": {
          "description": "Represents training config version. By default, \"latest\" value is used which uses the latest released training config version.",
          "type": "string"
        },
        "trainingMode": {
          "description": "Represents the mode of the training operation.",
          "$ref": "#/definitions/TrainingMode"
        },
        "evaluationOptions": {
          "description": "Represents the evaluation options. By default, the evaluation kind is percentage, with training split percentage as 80, and testing split percentage as 20.",
          "$ref": "#/definitions/EvaluationOptions"
        }
      }
    },
    "TrainingJobResult": {
      "description": "Represents the output of a training job.",
      "required": [
        "modelLabel",
        "trainingConfigVersion",
        "trainingStatus"
      ],
      "type": "object",
      "properties": {
        "modelLabel": {
          "description": "Represents trained model label.",
          "type": "string"
        },
        "trainingConfigVersion": {
          "description": "Represents training config version.",
          "type": "string"
        },
        "trainingMode": {
          "description": "Represents the mode of the training operation.",
          "$ref": "#/definitions/TrainingMode"
        },
        "trainingStatus": {
          "description": "Represents the model training status.",
          "$ref": "#/definitions/SubTrainingJobState"
        },
        "evaluationStatus": {
          "description": "Represents model evaluation status.",
          "$ref": "#/definitions/SubTrainingJobState"
        },
        "estimatedEndDateTime": {
          "format": "date-time",
          "description": "Represents the estimated end date time for training and evaluation.",
          "type": "string"
        }
      }
    },
    "TrainingJobs": {
      "description": "Represents a list of retrieved training jobs.",
      "required": [
        "value",
        "nextLink"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of jobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrainingJobState"
          }
        },
        "nextLink": {
          "description": "The next page link.",
          "type": "string"
        }
      }
    },
    "TrainingJobState": {
      "description": "Represents the state of a training job.",
      "required": [
        "result"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobState"
        }
      ],
      "properties": {
        "result": {
          "description": "Represents training tasks detailed result.",
          "$ref": "#/definitions/TrainingJobResult"
        }
      }
    },
    "TrainingMode": {
      "enum": [
        "advanced",
        "standard"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "TrainingMode",
        "modelAsString": true,
        "values": [
          {
            "value": "advanced",
            "description": "Trains using fine-tuned neural network transformer models. Can train multilingual projects."
          },
          {
            "value": "standard",
            "description": "Faster training times for quicker iterations."
          }
        ]
      }
    },
    "UnassignDeploymentResourcesOptions": {
      "description": "Represents the options to unassign Azure resources from a project.",
      "required": [
        "assignedResourceIds"
      ],
      "type": "object",
      "properties": {
        "assignedResourceIds": {
          "description": "Represents the assigned resource IDs to be unassigned.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UtteranceEntitiesEvaluationResult": {
      "description": "Represents the comparison between the expected and predicted entities for an utterance.",
      "required": [
        "expectedEntities",
        "predictedEntities"
      ],
      "type": "object",
      "properties": {
        "expectedEntities": {
          "description": "Represents the expected entity labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UtteranceEntityEvaluationResult"
          }
        },
        "predictedEntities": {
          "description": "Represents the predicted entity labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UtteranceEntityEvaluationResult"
          }
        }
      }
    },
    "UtteranceEntityEvaluationResult": {
      "description": "Represents the evaluation output of an entity label or prediction.",
      "required": [
        "category",
        "offset",
        "length"
      ],
      "type": "object",
      "properties": {
        "category": {
          "description": "Represents the entity category.",
          "type": "string"
        },
        "offset": {
          "format": "int32",
          "description": "Represents the entity offset index relative to the original text.",
          "type": "integer"
        },
        "length": {
          "format": "int32",
          "description": "Represents the entity length.",
          "type": "integer"
        }
      }
    },
    "UtteranceEvaluationResult": {
      "description": "Represents the evaluation result for an utterance.",
      "required": [
        "text",
        "location",
        "language",
        "entitiesResult",
        "intentsResult",
        "labeledSummaryLocation",
        "predictedSummaryLocation"
      ],
      "type": "object",
      "properties": {
        "text": {
          "description": "Represents the utterance text.",
          "type": "string"
        },
        "location": {
          "description": "Represents the conversation location.",
          "type": "string"
        },
        "language": {
          "description": "Represents the utterance language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.",
          "type": "string"
        },
        "entitiesResult": {
          "description": "Represents the entities results for the utterance.",
          "$ref": "#/definitions/UtteranceEntitiesEvaluationResult"
        },
        "intentsResult": {
          "description": "Represents the intents results for the utterance.",
          "$ref": "#/definitions/UtteranceIntentsEvaluationResult"
        },
        "labeledSummaryLocation": {
          "description": "Represents the location of the labeled summary.",
          "type": "string"
        },
        "predictedSummaryLocation": {
          "description": "Represents the location of the predicted summary.",
          "type": "string"
        }
      }
    },
    "UtteranceIntentsEvaluationResult": {
      "description": "Represents the comparison between the expected and the predicted intent for an utterance.",
      "required": [
        "expectedIntent",
        "predictedIntent"
      ],
      "type": "object",
      "properties": {
        "expectedIntent": {
          "description": "Represents the utterance's expected intent.",
          "type": "string"
        },
        "predictedIntent": {
          "description": "Represents the utterance's predicted intent.",
          "type": "string"
        }
      }
    },
    "Warning": {
      "description": "Represents a warning that was encountered while executing the request.",
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "The warning code.",
          "type": "string"
        },
        "message": {
          "description": "The warning message.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "Endpoint": {
      "name": "Endpoint",
      "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    }
  }
}