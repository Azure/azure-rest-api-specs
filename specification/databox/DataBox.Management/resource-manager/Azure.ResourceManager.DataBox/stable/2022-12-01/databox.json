{
  "swagger": "2.0",
  "info": {
    "title": "DataBoxManagementClient",
    "version": "2022-12-01",
    "description": "// FIXME: (miissing-service-description) Add service description",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "Jobs"
    },
    {
      "name": "DataBoxJobs"
    }
  ],
  "paths": {
    "/providers/Azure.ResourceManager.DataBox/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.DataBox/jobs": {
      "get": {
        "operationId": "Jobs_List",
        "tags": [
          "Jobs"
        ],
        "description": "Lists all the jobs available under the subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/JobResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration": {
      "post": {
        "operationId": "ServiceOperations_RegionConfiguration",
        "description": "This API provides configuration details specific to given region/location at Subscription level.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The Subscription Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "path",
            "description": "The location of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "regionConfigurationRequest",
            "in": "body",
            "description": "Request body to get the configuration for the region.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegionConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RegionConfigurationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress": {
      "post": {
        "operationId": "ServiceOperations_ValidateAddress",
        "description": "[DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer shipping address and provide alternate addresses if any.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The Subscription Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "path",
            "description": "The location of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "validateAddress",
            "in": "body",
            "description": "Shipping address of the customer.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AddressValidationOutput"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs": {
      "post": {
        "operationId": "ServiceOperations_ValidateInputs",
        "description": "This method does all necessary pre-job creation validation under subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The Subscription Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "path",
            "description": "The location of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "validationRequest",
            "in": "body",
            "description": "Inputs of the customer.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ValidationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.DataBox": {
      "get": {
        "operationId": "Jobs_Get",
        "tags": [
          "Jobs"
        ],
        "description": "Gets information about the specified job.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "$expand is supported on details parameter for job, which provides details on the job stages.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/JobResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "Jobs_Create",
        "tags": [
          "Jobs"
        ],
        "description": "Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'JobResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/JobResource"
            }
          },
          "201": {
            "description": "Resource 'JobResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/JobResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Jobs_Update",
        "tags": [
          "Jobs"
        ],
        "description": "Updates the properties of an existing job.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "if-match",
            "in": "header",
            "description": "Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "If-Match"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobResourceUpdateParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/JobResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "Jobs_Delete",
        "tags": [
          "Jobs"
        ],
        "description": "Deletes a job.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.DataBox/bookShipmentPickUp": {
      "post": {
        "operationId": "Jobs_BookShipmentPickUp",
        "tags": [
          "Jobs"
        ],
        "description": "Book shipment pick up.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShipmentPickUpRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ShipmentPickUpResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.DataBox/cancel": {
      "post": {
        "operationId": "Jobs_Cancel",
        "tags": [
          "Jobs"
        ],
        "description": "CancelJob.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancellationReason"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action completed successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.DataBox/jobs": {
      "get": {
        "operationId": "Jobs_ListByResourceGroup",
        "tags": [
          "Jobs"
        ],
        "description": "Lists all the jobs available under the given resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "$skipToken",
            "in": "query",
            "description": "$skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/JobResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.DataBox/listCredentials": {
      "post": {
        "operationId": "Jobs_ListCredentials",
        "tags": [
          "Jobs"
        ],
        "description": "This method gets the unencrypted secrets related to the job.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/PagedUnencryptedCredentials"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.DataBox/markDevicesShipped": {
      "post": {
        "operationId": "Jobs_MarkDevicesShipped",
        "tags": [
          "Jobs"
        ],
        "description": "Request to mark devices for a given job as shipped",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MarkDevicesShippedRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action completed successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.DataBox/mitigate": {
      "post": {
        "operationId": "DataBoxJobs_Mitigate",
        "tags": [
          "DataBoxJobs"
        ],
        "description": "Request to mitigate for a given job",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MitigateJobRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action completed successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/availableSkus": {
      "post": {
        "operationId": "ServiceOperations_ListAvailableSkusByResourceGroup",
        "description": "This method provides the list of available skus for the given subscription, resource group and location.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The Subscription Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The Resource Group Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "path",
            "description": "The location of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "availableSkuRequest",
            "in": "body",
            "description": "Filters for showing the available skus.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AvailableSkuRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedSkuInformation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration": {
      "post": {
        "operationId": "ServiceOperations_RegionConfigurationByResourceGroup",
        "description": "This API provides configuration details specific to given region/location at Resource group level.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The Subscription Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The Resource Group Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "path",
            "description": "The location of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "regionConfigurationRequest",
            "in": "body",
            "description": "Request body to get the configuration for the region at resource group level.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegionConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RegionConfigurationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/validateInputs": {
      "post": {
        "operationId": "ServiceOperations_ValidateInputsByResourceGroup",
        "description": "This method does all necessary pre-job creation validation under resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The Subscription Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The Resource Group Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "path",
            "description": "The location of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "validationRequest",
            "in": "body",
            "description": "Inputs of the customer.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ValidationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessProtocol": {
      "type": "string",
      "enum": [
        "SMB",
        "NFS"
      ],
      "x-ms-enum": {
        "name": "AccessProtocol",
        "modelAsString": false,
        "values": [
          {
            "name": "SMB",
            "value": "SMB",
            "description": "Server Message Block protocol(SMB)."
          },
          {
            "name": "NFS",
            "value": "NFS",
            "description": "Network File System protocol(NFS)."
          }
        ]
      }
    },
    "AccountCredentialDetails": {
      "type": "object",
      "description": "Credential details of the account.",
      "properties": {
        "accountName": {
          "type": "string",
          "description": "Name of the account.",
          "readOnly": true
        },
        "dataAccountType": {
          "$ref": "#/definitions/DataAccountType",
          "description": "Type of the account.",
          "readOnly": true
        },
        "accountConnectionString": {
          "type": "string",
          "description": "Connection string of the account endpoint to use the account as a storage endpoint on the device.",
          "readOnly": true
        },
        "shareCredentialDetails": {
          "type": "array",
          "description": "Per share level unencrypted access credentials.",
          "items": {
            "$ref": "#/definitions/ShareCredentialDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "AdditionalErrorInfo": {
      "type": "object",
      "description": "This class represents additional info which Resource Providers pass when an error occurs.",
      "properties": {
        "info": {
          "type": "object",
          "description": "Additional information of the type of error.",
          "additionalProperties": {}
        },
        "type": {
          "type": "string",
          "description": "Type of error (e.g. CustomerIntervention, PolicyViolation, SecurityViolation)."
        }
      }
    },
    "AddressType": {
      "type": "string",
      "enum": [
        "None",
        "Residential",
        "Commercial"
      ],
      "x-ms-enum": {
        "name": "AddressType",
        "modelAsString": false,
        "values": [
          {
            "name": "None",
            "value": "None",
            "description": "Address type not known."
          },
          {
            "name": "Residential",
            "value": "Residential",
            "description": "Residential Address."
          },
          {
            "name": "Commercial",
            "value": "Commercial",
            "description": "Commercial Address."
          }
        ]
      }
    },
    "AddressValidationOutput": {
      "type": "object",
      "description": "Output of the address validation api.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/AddressValidationProperties",
          "description": "The address validation properties.",
          "readOnly": true
        }
      }
    },
    "AddressValidationProperties": {
      "type": "object",
      "description": "The address validation output.",
      "properties": {
        "validationStatus": {
          "$ref": "#/definitions/AddressValidationStatus",
          "description": "The address validation status.",
          "readOnly": true
        },
        "alternateAddresses": {
          "type": "array",
          "description": "List of alternate addresses.",
          "items": {
            "$ref": "#/definitions/ShippingAddress"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputResponse"
        }
      ],
      "x-ms-discriminator-value": "ValidateAddress"
    },
    "AddressValidationStatus": {
      "type": "string",
      "enum": [
        "Valid",
        "Invalid",
        "Ambiguous"
      ],
      "x-ms-enum": {
        "name": "AddressValidationStatus",
        "modelAsString": false,
        "values": [
          {
            "name": "Valid",
            "value": "Valid",
            "description": "Address provided is valid."
          },
          {
            "name": "Invalid",
            "value": "Invalid",
            "description": "Address provided is invalid or not supported."
          },
          {
            "name": "Ambiguous",
            "value": "Ambiguous",
            "description": "Address provided is ambiguous, please choose one of the alternate addresses returned."
          }
        ]
      }
    },
    "ApiError": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorDetail"
        }
      },
      "required": [
        "error"
      ]
    },
    "ApplianceNetworkConfiguration": {
      "type": "object",
      "description": "The Network Adapter configuration of a DataBox.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the network.",
          "readOnly": true
        },
        "macAddress": {
          "type": "string",
          "description": "Mac Address.",
          "readOnly": true
        }
      }
    },
    "ArmBaseObject": {
      "type": "object",
      "description": "Base class for all objects under resource.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the object.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "Id of the object.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Type of the object.",
          "readOnly": true
        }
      }
    },
    "AvailableSkuRequest": {
      "type": "object",
      "description": "The filters for showing the available skus.",
      "properties": {
        "transferType": {
          "$ref": "#/definitions/TransferType",
          "description": "Type of the transfer."
        },
        "country": {
          "type": "string",
          "description": "ISO country code. Country for hardware shipment. For codes check: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements"
        },
        "location": {
          "type": "string",
          "description": "Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01"
        },
        "skuNames": {
          "type": "array",
          "description": "Sku Names to filter for available skus",
          "items": {
            "$ref": "#/definitions/SkuName"
          }
        }
      },
      "required": [
        "transferType",
        "country",
        "location"
      ]
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "Azure.ResourceManager.Foundations.UserAssignedIdentity": {
      "type": "object",
      "description": "A managed identity assigned by the user.",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "The active directory client identifier for this principal."
        },
        "principalId": {
          "type": "string",
          "description": "The active directory identifier for this principal."
        }
      }
    },
    "AzureFileFilterDetails": {
      "type": "object",
      "description": "Filter details to transfer Azure files",
      "properties": {
        "filePrefixList": {
          "type": "array",
          "description": "Prefix list of the Azure files to be transferred.",
          "items": {
            "type": "string"
          }
        },
        "filePathList": {
          "type": "array",
          "description": "List of full path of the files to be transferred.",
          "items": {
            "type": "string"
          }
        },
        "fileShareList": {
          "type": "array",
          "description": "List of file shares to be transferred.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BlobFilterDetails": {
      "type": "object",
      "description": "Filter details to transfer Azure Blobs",
      "properties": {
        "blobPrefixList": {
          "type": "array",
          "description": "Prefix list of the Azure blobs to be transferred.",
          "items": {
            "type": "string"
          }
        },
        "blobPathList": {
          "type": "array",
          "description": "List of full path of the blobs to be transferred.",
          "items": {
            "type": "string"
          }
        },
        "containerList": {
          "type": "array",
          "description": "List of blob containers to be transferred.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CancellationReason": {
      "type": "object",
      "description": "Reason for cancellation.",
      "properties": {
        "reason": {
          "type": "string",
          "description": "Reason for cancellation."
        }
      },
      "required": [
        "reason"
      ]
    },
    "ClassDiscriminator": {
      "type": "string",
      "enum": [
        "DataBox",
        "DataBoxDisk",
        "DataBoxHeavy",
        "DataBoxCustomerDisk"
      ],
      "x-ms-enum": {
        "name": "ClassDiscriminator",
        "modelAsString": false,
        "values": [
          {
            "name": "DataBox",
            "value": "DataBox",
            "description": "Data Box orders."
          },
          {
            "name": "DataBoxDisk",
            "value": "DataBoxDisk",
            "description": "Data Box Disk orders."
          },
          {
            "name": "DataBoxHeavy",
            "value": "DataBoxHeavy",
            "description": "Data Box Heavy orders."
          },
          {
            "name": "DataBoxCustomerDisk",
            "value": "DataBoxCustomerDisk",
            "description": "Data Box Customer Disk orders."
          }
        ]
      }
    },
    "CloudError": {
      "type": "object",
      "description": "Provides additional information about an http error response.",
      "properties": {
        "additionalInfo": {
          "type": "array",
          "description": "Gets or sets additional error info.",
          "items": {
            "$ref": "#/definitions/AdditionalErrorInfo"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "code": {
          "type": "string",
          "description": "Error code."
        },
        "details": {
          "type": "array",
          "description": "Gets or sets details for the error.",
          "items": {
            "$ref": "#/definitions/CloudError"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "message": {
          "type": "string",
          "description": "The error message parsed from the body of the http error response."
        },
        "target": {
          "type": "string",
          "description": "Gets or sets the target of the error."
        }
      }
    },
    "ContactDetails": {
      "type": "object",
      "description": "Contact Details.",
      "properties": {
        "contactName": {
          "type": "string",
          "description": "Contact name of the person."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the contact person."
        },
        "phoneExtension": {
          "type": "string",
          "description": "Phone extension number of the contact person."
        },
        "mobile": {
          "type": "string",
          "description": "Mobile number of the contact person."
        },
        "emailList": {
          "type": "array",
          "description": "List of Email-ids to be notified about job progress.",
          "items": {
            "type": "string"
          }
        },
        "notificationPreference": {
          "type": "array",
          "description": "Notification preference for a job stage.",
          "items": {
            "$ref": "#/definitions/NotificationPreference"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "contactName",
        "phone",
        "emailList"
      ]
    },
    "ContactDetailsUpdate": {
      "type": "object",
      "description": "Contact Details.",
      "properties": {
        "contactName": {
          "type": "string",
          "description": "Contact name of the person."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the contact person."
        },
        "phoneExtension": {
          "type": "string",
          "description": "Phone extension number of the contact person."
        },
        "mobile": {
          "type": "string",
          "description": "Mobile number of the contact person."
        },
        "emailList": {
          "type": "array",
          "description": "List of Email-ids to be notified about job progress.",
          "items": {
            "type": "string"
          }
        },
        "notificationPreference": {
          "type": "array",
          "description": "Notification preference for a job stage.",
          "items": {
            "$ref": "#/definitions/NotificationPreference"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ContactInfo": {
      "type": "object",
      "description": "Contact Info.",
      "properties": {
        "contactName": {
          "type": "string",
          "description": "Contact name of the person.",
          "minLength": 1
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the contact person.",
          "minLength": 1
        },
        "phoneExtension": {
          "type": "string",
          "description": "Phone extension number of the contact person."
        },
        "mobile": {
          "type": "string",
          "description": "Mobile number of the contact person."
        }
      },
      "required": [
        "contactName",
        "phone"
      ]
    },
    "ContactInfoUpdate": {
      "type": "object",
      "description": "Contact Info.",
      "properties": {
        "contactName": {
          "type": "string",
          "description": "Contact name of the person.",
          "minLength": 1
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the contact person.",
          "minLength": 1
        },
        "phoneExtension": {
          "type": "string",
          "description": "Phone extension number of the contact person."
        },
        "mobile": {
          "type": "string",
          "description": "Mobile number of the contact person."
        }
      }
    },
    "CopyLogDetails": {
      "type": "object",
      "description": "Details for log generated during copy.",
      "properties": {
        "copyLogDetailsType": {
          "type": "string",
          "description": "Discriminator property for CopyLogDetails."
        }
      },
      "discriminator": "copyLogDetailsType",
      "required": [
        "copyLogDetailsType"
      ]
    },
    "CopyProgress": {
      "type": "object",
      "description": "Copy progress.",
      "properties": {
        "storageAccountName": {
          "type": "string",
          "description": "Name of the storage account. This will be empty for data account types other than storage account.",
          "readOnly": true
        },
        "transferType": {
          "$ref": "#/definitions/TransferType",
          "description": "Transfer type of data",
          "readOnly": true
        },
        "dataAccountType": {
          "$ref": "#/definitions/DataAccountType",
          "description": "Data Account Type.",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "description": "Id of the account where the data needs to be uploaded.",
          "readOnly": true
        },
        "bytesProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "To indicate bytes transferred.",
          "readOnly": true
        },
        "totalBytesToProcess": {
          "type": "integer",
          "format": "int32",
          "description": "Total amount of data to be processed by the job.",
          "readOnly": true
        },
        "filesProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "Number of files processed",
          "readOnly": true
        },
        "totalFilesToProcess": {
          "type": "integer",
          "format": "int32",
          "description": "Total files to process",
          "readOnly": true
        },
        "invalidFilesProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "Number of files not adhering to azure naming conventions which were processed by automatic renaming",
          "readOnly": true
        },
        "invalidFileBytesUploaded": {
          "type": "integer",
          "format": "int32",
          "description": "Total amount of data not adhering to azure naming conventions which were processed by automatic renaming",
          "readOnly": true
        },
        "renamedContainerCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of folders not adhering to azure naming conventions which were processed by automatic renaming",
          "readOnly": true
        },
        "filesErroredOut": {
          "type": "integer",
          "format": "int32",
          "description": "Number of files which could not be copied",
          "readOnly": true
        },
        "directoriesErroredOut": {
          "type": "integer",
          "format": "int32",
          "description": "To indicate directories errored out in the job.",
          "readOnly": true
        },
        "invalidDirectoriesProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "To indicate directories renamed",
          "readOnly": true
        },
        "isEnumerationInProgress": {
          "type": "boolean",
          "description": "To indicate if enumeration of data is in progress. \nUntil this is true, the TotalBytesToProcess may not be valid.",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/CloudError",
          "description": "Error, if any, in the stage",
          "readOnly": true
        },
        "actions": {
          "type": "array",
          "description": "Available actions on the job.",
          "items": {
            "$ref": "#/definitions/CustomerResolutionCode"
          },
          "readOnly": true
        }
      }
    },
    "CopyStatus": {
      "type": "string",
      "enum": [
        "NotStarted",
        "InProgress",
        "Completed",
        "CompletedWithErrors",
        "Failed",
        "NotReturned",
        "HardwareError",
        "DeviceFormatted",
        "DeviceMetadataModified",
        "StorageAccountNotAccessible",
        "UnsupportedData",
        "DriveNotReceived",
        "UnsupportedDrive",
        "OtherServiceError",
        "OtherUserError",
        "DriveNotDetected",
        "DriveCorrupted",
        "MetadataFilesModifiedOrRemoved"
      ],
      "x-ms-enum": {
        "name": "CopyStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "NotStarted",
            "value": "NotStarted",
            "description": "Data copy hasn't started yet."
          },
          {
            "name": "InProgress",
            "value": "InProgress",
            "description": "Data copy is in progress."
          },
          {
            "name": "Completed",
            "value": "Completed",
            "description": "Data copy completed."
          },
          {
            "name": "CompletedWithErrors",
            "value": "CompletedWithErrors",
            "description": "Data copy completed with errors."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Data copy failed. No data was copied."
          },
          {
            "name": "NotReturned",
            "value": "NotReturned",
            "description": "No copy triggered as device was not returned."
          },
          {
            "name": "HardwareError",
            "value": "HardwareError",
            "description": "The Device has hit hardware issues."
          },
          {
            "name": "DeviceFormatted",
            "value": "DeviceFormatted",
            "description": "Data copy failed. The Device was formatted by user."
          },
          {
            "name": "DeviceMetadataModified",
            "value": "DeviceMetadataModified",
            "description": "Data copy failed. Device metadata was modified by user."
          },
          {
            "name": "StorageAccountNotAccessible",
            "value": "StorageAccountNotAccessible",
            "description": "Data copy failed. Storage Account was not accessible during copy."
          },
          {
            "name": "UnsupportedData",
            "value": "UnsupportedData",
            "description": "Data copy failed. The Device data content is not supported."
          },
          {
            "name": "DriveNotReceived",
            "value": "DriveNotReceived",
            "description": "No copy triggered as device was not received."
          },
          {
            "name": "UnsupportedDrive",
            "value": "UnsupportedDrive",
            "description": "No copy triggered as device type is not supported."
          },
          {
            "name": "OtherServiceError",
            "value": "OtherServiceError",
            "description": "Copy failed due to service error."
          },
          {
            "name": "OtherUserError",
            "value": "OtherUserError",
            "description": "Copy failed due to user error."
          },
          {
            "name": "DriveNotDetected",
            "value": "DriveNotDetected",
            "description": "Copy failed due to disk detection error."
          },
          {
            "name": "DriveCorrupted",
            "value": "DriveCorrupted",
            "description": "Copy failed due to corrupted drive."
          },
          {
            "name": "MetadataFilesModifiedOrRemoved",
            "value": "MetadataFilesModifiedOrRemoved",
            "description": "Copy failed due to modified or removed metadata files."
          }
        ]
      }
    },
    "CreateJobValidations": {
      "type": "object",
      "description": "It does all pre-job creation validations.",
      "allOf": [
        {
          "$ref": "#/definitions/ValidationRequest"
        }
      ],
      "x-ms-discriminator-value": "JobCreationValidation"
    },
    "CreateOrderLimitForSubscriptionValidationRequest": {
      "type": "object",
      "description": "Request to validate create order limit for current subscription.",
      "properties": {
        "deviceType": {
          "$ref": "#/definitions/SkuName",
          "description": "Device type to be used for the job."
        }
      },
      "required": [
        "deviceType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputRequest"
        }
      ],
      "x-ms-discriminator-value": "ValidateCreateOrderLimit"
    },
    "CreateOrderLimitForSubscriptionValidationResponseProperties": {
      "type": "object",
      "description": "Properties of create order limit for subscription validation response.",
      "properties": {
        "status": {
          "$ref": "#/definitions/ValidationStatus",
          "description": "Create order limit validation status.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputResponse"
        }
      ],
      "x-ms-discriminator-value": "ValidateCreateOrderLimit"
    },
    "CustomerDiskJobSecrets": {
      "type": "object",
      "description": "The secrets related to customer disk job.",
      "properties": {
        "diskSecrets": {
          "type": "array",
          "description": "Contains the list of secrets object for that device.",
          "items": {
            "$ref": "#/definitions/DiskSecret"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "carrierAccountNumber": {
          "type": "string",
          "description": "Carrier Account Number of the customer",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/JobSecrets"
        }
      ],
      "x-ms-discriminator-value": "DataBoxCustomerDisk"
    },
    "CustomerResolutionCode": {
      "type": "string",
      "enum": [
        "None",
        "MoveToCleanUpDevice",
        "Resume",
        "Restart",
        "ReachOutToOperation"
      ],
      "x-ms-enum": {
        "name": "CustomerResolutionCode",
        "modelAsString": false,
        "values": [
          {
            "name": "None",
            "value": "None",
            "description": "No Resolution Yet"
          },
          {
            "name": "MoveToCleanUpDevice",
            "value": "MoveToCleanUpDevice",
            "description": "Clean the device"
          },
          {
            "name": "Resume",
            "value": "Resume",
            "description": "Resume the job to same stage"
          },
          {
            "name": "Restart",
            "value": "Restart",
            "description": "Restart whole action."
          },
          {
            "name": "ReachOutToOperation",
            "value": "ReachOutToOperation",
            "description": "Reach out to operation for further action."
          }
        ]
      }
    },
    "DataAccountDetails": {
      "type": "object",
      "description": "Account details of the data to be transferred",
      "properties": {
        "dataAccountType": {
          "type": "string",
          "description": "Discriminator property for DataAccountDetails."
        },
        "sharePassword": {
          "type": "string",
          "description": "Password for all the shares to be created on the device. Should not be passed for TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements :  Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets, numbers and these characters : @#\\-$%^!+=;:_()]+",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "discriminator": "dataAccountType",
      "required": [
        "dataAccountType"
      ]
    },
    "DataAccountType": {
      "type": "string",
      "enum": [
        "StorageAccount",
        "ManagedDisk"
      ],
      "x-ms-enum": {
        "name": "DataAccountType",
        "modelAsString": false,
        "values": [
          {
            "name": "StorageAccount",
            "value": "StorageAccount",
            "description": "Storage Accounts ."
          },
          {
            "name": "ManagedDisk",
            "value": "ManagedDisk",
            "description": "Azure Managed disk storage."
          }
        ]
      }
    },
    "DataBoxAccountCopyLogDetails": {
      "type": "object",
      "description": "Copy log details for a storage account of a DataBox job",
      "properties": {
        "accountName": {
          "type": "string",
          "description": "Account name.",
          "readOnly": true
        },
        "copyLogLink": {
          "type": "string",
          "description": "Link for copy logs.",
          "readOnly": true
        },
        "copyVerboseLogLink": {
          "type": "string",
          "description": "Link for copy verbose logs. This will be set only when LogCollectionLevel is set to Verbose.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CopyLogDetails"
        }
      ],
      "x-ms-discriminator-value": "DataBox"
    },
    "DataBoxCustomerDiskCopyLogDetails": {
      "type": "object",
      "description": "Copy Log Details for customer disk",
      "properties": {
        "serialNumber": {
          "type": "string",
          "description": "Disk Serial Number.",
          "readOnly": true
        },
        "errorLogLink": {
          "type": "string",
          "description": "Link for copy error logs.",
          "readOnly": true
        },
        "verboseLogLink": {
          "type": "string",
          "description": "Link for copy verbose logs.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CopyLogDetails"
        }
      ],
      "x-ms-discriminator-value": "DataBoxCustomerDisk"
    },
    "DataBoxCustomerDiskCopyProgress": {
      "type": "object",
      "description": "DataBox CustomerDisk Copy Progress",
      "properties": {
        "serialNumber": {
          "type": "string",
          "description": "Disk Serial Number.",
          "readOnly": true
        },
        "copyStatus": {
          "$ref": "#/definitions/CopyStatus",
          "description": "The Status of the copy",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CopyProgress"
        }
      ]
    },
    "DataBoxCustomerDiskJobDetails": {
      "type": "object",
      "description": "Customer disk job details.",
      "properties": {
        "importDiskDetailsCollection": {
          "type": "object",
          "description": "Contains the map of disk serial number to the disk details for import jobs.",
          "additionalProperties": {
            "$ref": "#/definitions/ImportDiskDetails"
          }
        },
        "exportDiskDetailsCollection": {
          "type": "object",
          "description": "Contains the map of disk serial number to the disk details for export jobs.",
          "additionalProperties": {
            "$ref": "#/definitions/ExportDiskDetails"
          },
          "readOnly": true
        },
        "copyProgress": {
          "type": "array",
          "description": "Copy progress per disk.",
          "items": {
            "$ref": "#/definitions/DataBoxCustomerDiskCopyProgress"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "deliverToDcPackageDetails": {
          "$ref": "#/definitions/PackageCarrierInfo",
          "description": "Delivery package shipping details.",
          "readOnly": true
        },
        "returnToCustomerPackageDetails": {
          "$ref": "#/definitions/PackageCarrierDetails",
          "description": "Return package shipping details."
        },
        "enableManifestBackup": {
          "type": "boolean",
          "description": "Flag to indicate if disk manifest should be backed-up in the Storage Account."
        }
      },
      "required": [
        "returnToCustomerPackageDetails"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/JobDetails"
        }
      ],
      "x-ms-discriminator-value": "DataBoxCustomerDisk"
    },
    "DataBoxDiskCopyLogDetails": {
      "type": "object",
      "description": "Copy Log Details for a disk",
      "properties": {
        "diskSerialNumber": {
          "type": "string",
          "description": "Disk Serial Number.",
          "readOnly": true
        },
        "errorLogLink": {
          "type": "string",
          "description": "Link for copy error logs.",
          "readOnly": true
        },
        "verboseLogLink": {
          "type": "string",
          "description": "Link for copy verbose logs.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CopyLogDetails"
        }
      ],
      "x-ms-discriminator-value": "DataBoxDisk"
    },
    "DataBoxDiskCopyProgress": {
      "type": "object",
      "description": "DataBox Disk Copy Progress",
      "properties": {
        "serialNumber": {
          "type": "string",
          "description": "The serial number of the disk",
          "readOnly": true
        },
        "bytesCopied": {
          "type": "integer",
          "format": "int32",
          "description": "Bytes copied during the copy of disk.",
          "readOnly": true
        },
        "percentComplete": {
          "type": "integer",
          "format": "int32",
          "description": "Indicates the percentage completed for the copy of the disk.",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/CopyStatus",
          "description": "The Status of the copy",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/CloudError",
          "description": "Error, if any, in the stage",
          "readOnly": true
        },
        "actions": {
          "type": "array",
          "description": "Available actions on the job.",
          "items": {
            "$ref": "#/definitions/CustomerResolutionCode"
          },
          "readOnly": true
        }
      }
    },
    "DataBoxDiskGranularCopyLogDetails": {
      "type": "object",
      "description": "Granular Copy Log Details for customer disk",
      "properties": {
        "serialNumber": {
          "type": "string",
          "description": "Disk Serial Number.",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "description": "Account id.",
          "readOnly": true
        },
        "errorLogLink": {
          "type": "string",
          "description": "Link for copy error logs.",
          "readOnly": true
        },
        "verboseLogLink": {
          "type": "string",
          "description": "Link for copy verbose logs.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/GranularCopyLogDetails"
        }
      ],
      "x-ms-discriminator-value": "DataBoxCustomerDisk"
    },
    "DataBoxDiskGranularCopyProgress": {
      "type": "object",
      "description": "DataBox Disk Granular Copy Progress",
      "properties": {
        "serialNumber": {
          "type": "string",
          "description": "Disk Serial Number.",
          "readOnly": true
        },
        "copyStatus": {
          "$ref": "#/definitions/CopyStatus",
          "description": "The Status of the copy",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/GranularCopyProgress"
        }
      ]
    },
    "DataBoxDiskJobDetails": {
      "type": "object",
      "description": "DataBox Disk Job Details.",
      "properties": {
        "preferredDisks": {
          "type": "object",
          "description": "User preference on what size disks are needed for the job. The map is from the disk size in TB to the count. Eg. {2,5} means 5 disks of 2 TB size. Key is string but will be checked against an int.",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "copyProgress": {
          "type": "array",
          "description": "Copy progress per disk.",
          "items": {
            "$ref": "#/definitions/DataBoxDiskCopyProgress"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "granularCopyProgress": {
          "type": "array",
          "description": "Copy progress per disk.",
          "items": {
            "$ref": "#/definitions/DataBoxDiskGranularCopyProgress"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "granularCopyLogDetails": {
          "type": "array",
          "description": "Copy progress per disk.",
          "items": {
            "$ref": "#/definitions/DataBoxDiskGranularCopyLogDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "disksAndSizeDetails": {
          "type": "object",
          "description": "Contains the map of disk serial number to the disk size being used for the job. Is returned only after the disks are shipped to the customer.",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "readOnly": true
        },
        "passkey": {
          "type": "string",
          "description": "User entered passkey for DataBox Disk job."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/JobDetails"
        }
      ],
      "x-ms-discriminator-value": "DataBoxDisk"
    },
    "DataBoxDiskJobSecrets": {
      "type": "object",
      "description": "The secrets related to disk job.",
      "properties": {
        "diskSecrets": {
          "type": "array",
          "description": "Contains the list of secrets object for that device.",
          "items": {
            "$ref": "#/definitions/DiskSecret"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "passKey": {
          "type": "string",
          "description": "PassKey for the disk Job.",
          "readOnly": true
        },
        "isPasskeyUserDefined": {
          "type": "boolean",
          "description": "Whether passkey was provided by user.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/JobSecrets"
        }
      ],
      "x-ms-discriminator-value": "DataBoxDisk"
    },
    "DataBoxHeavyAccountCopyLogDetails": {
      "type": "object",
      "description": "Copy log details for a storage account for Databox heavy",
      "properties": {
        "accountName": {
          "type": "string",
          "description": "Account name.",
          "readOnly": true
        },
        "copyLogLink": {
          "type": "array",
          "description": "Link for copy logs.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "copyVerboseLogLink": {
          "type": "array",
          "description": "Link for copy verbose logs. This will be set only when the LogCollectionLevel is set to verbose.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CopyLogDetails"
        }
      ],
      "x-ms-discriminator-value": "DataBoxHeavy"
    },
    "DataBoxHeavyJobDetails": {
      "type": "object",
      "description": "Databox Heavy Device Job Details",
      "properties": {
        "copyProgress": {
          "type": "array",
          "description": "Copy progress per account.",
          "items": {
            "$ref": "#/definitions/CopyProgress"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "devicePassword": {
          "type": "string",
          "description": "Set Device password for unlocking Databox Heavy. Should not be passed for TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements :  Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets, numbers and these characters : @#\\-$%^!+=;:_()]+"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/JobDetails"
        }
      ],
      "x-ms-discriminator-value": "DataBoxHeavy"
    },
    "DataBoxHeavyJobSecrets": {
      "type": "object",
      "description": "The secrets related to a databox heavy job.",
      "properties": {
        "cabinetPodSecrets": {
          "type": "array",
          "description": "Contains the list of secret objects for a databox heavy job.",
          "items": {
            "$ref": "#/definitions/DataBoxHeavySecret"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/JobSecrets"
        }
      ],
      "x-ms-discriminator-value": "DataBoxHeavy"
    },
    "DataBoxHeavySecret": {
      "type": "object",
      "description": "The secrets related to a databox heavy.",
      "properties": {
        "deviceSerialNumber": {
          "type": "string",
          "description": "Serial number of the assigned device.",
          "readOnly": true
        },
        "devicePassword": {
          "type": "string",
          "description": "Password for out of the box experience on device.",
          "readOnly": true
        },
        "networkConfigurations": {
          "type": "array",
          "description": "Network configuration of the appliance.",
          "items": {
            "$ref": "#/definitions/ApplianceNetworkConfiguration"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "encodedValidationCertPubKey": {
          "type": "string",
          "description": "The base 64 encoded public key to authenticate with the device",
          "readOnly": true
        },
        "accountCredentialDetails": {
          "type": "array",
          "description": "Per account level access credentials.",
          "items": {
            "$ref": "#/definitions/AccountCredentialDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "DataBoxJobDetails": {
      "type": "object",
      "description": "Databox Job Details",
      "properties": {
        "copyProgress": {
          "type": "array",
          "description": "Copy progress per storage account.",
          "items": {
            "$ref": "#/definitions/CopyProgress"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "devicePassword": {
          "type": "string",
          "description": "Set Device password for unlocking Databox. Should not be passed for TransferType:ExportFromAzure jobs. If this is not passed, the service will generate password itself. This will not be returned in Get Call. Password Requirements :  Password must be minimum of 12 and maximum of 64 characters. Password must have at least one uppercase alphabet, one number and one special character. Password cannot have the following characters : IilLoO0 Password can have only alphabets, numbers and these characters : @#\\-$%^!+=;:_()]+"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/JobDetails"
        }
      ],
      "x-ms-discriminator-value": "DataBox"
    },
    "DataBoxScheduleAvailabilityRequest": {
      "type": "object",
      "description": "Request body to get the availability for scheduling data box orders orders.",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleAvailabilityRequest"
        }
      ],
      "x-ms-discriminator-value": "DataBox"
    },
    "DataBoxSecret": {
      "type": "object",
      "description": "The secrets related to a DataBox.",
      "properties": {
        "deviceSerialNumber": {
          "type": "string",
          "description": "Serial number of the assigned device.",
          "readOnly": true
        },
        "devicePassword": {
          "type": "string",
          "description": "Password for out of the box experience on device.",
          "readOnly": true
        },
        "networkConfigurations": {
          "type": "array",
          "description": "Network configuration of the appliance.",
          "items": {
            "$ref": "#/definitions/ApplianceNetworkConfiguration"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "encodedValidationCertPubKey": {
          "type": "string",
          "description": "The base 64 encoded public key to authenticate with the device",
          "readOnly": true
        },
        "accountCredentialDetails": {
          "type": "array",
          "description": "Per account level access credentials.",
          "items": {
            "$ref": "#/definitions/AccountCredentialDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "DataCenterCode": {
      "type": "string",
      "enum": [
        "Invalid",
        "BY2",
        "BY1",
        "ORK70",
        "AM2",
        "AMS20",
        "BY21",
        "BY24",
        "MWH01",
        "AMS06",
        "SSE90",
        "SYD03",
        "SYD23",
        "CBR20",
        "YTO20",
        "CWL20",
        "LON24",
        "BOM01",
        "BL20",
        "BL7",
        "SEL20",
        "TYO01",
        "BN1",
        "SN5",
        "CYS04",
        "TYO22",
        "YTO21",
        "YQB20",
        "FRA22",
        "MAA01",
        "CPQ02",
        "CPQ20",
        "SIN20",
        "HKG20",
        "SG2",
        "MEL23",
        "SEL21",
        "OSA20",
        "SHA03",
        "BJB",
        "JNB22",
        "JNB21",
        "MNZ21",
        "SN8",
        "AUH20",
        "ZRH20",
        "PUS20",
        "AdHoc",
        "CH1",
        "DSM05",
        "DUB07",
        "PNQ01",
        "SVG20",
        "OSA02",
        "OSA22",
        "PAR22",
        "BN7",
        "SN6",
        "BJS20"
      ],
      "x-ms-enum": {
        "name": "DataCenterCode",
        "modelAsString": true
      }
    },
    "DataExportDetails": {
      "type": "object",
      "description": "Details of the data to be used for exporting data from azure.",
      "properties": {
        "transferConfiguration": {
          "$ref": "#/definitions/TransferConfiguration",
          "description": "Configuration for the data transfer."
        },
        "logCollectionLevel": {
          "$ref": "#/definitions/LogCollectionLevel",
          "description": "Level of the logs to be collected."
        },
        "accountDetails": {
          "$ref": "#/definitions/DataAccountDetails",
          "description": "Account details of the data to be transferred"
        }
      },
      "required": [
        "transferConfiguration",
        "accountDetails"
      ]
    },
    "DataImportDetails": {
      "type": "object",
      "description": "Details of the data to be used for importing data to azure.",
      "properties": {
        "accountDetails": {
          "$ref": "#/definitions/DataAccountDetails",
          "description": "Account details of the data to be transferred"
        },
        "logCollectionLevel": {
          "$ref": "#/definitions/LogCollectionLevel",
          "description": "Level of the logs to be collected."
        }
      },
      "required": [
        "accountDetails"
      ]
    },
    "DataLocationToServiceLocationMap": {
      "type": "object",
      "description": "Map of data location to service location",
      "properties": {
        "dataLocation": {
          "type": "string",
          "description": "Location of the data.",
          "readOnly": true
        },
        "serviceLocation": {
          "type": "string",
          "description": "Location of the service.",
          "readOnly": true
        }
      }
    },
    "DataTransferDetailsValidationRequest": {
      "type": "object",
      "description": "Request to validate export and import data details.",
      "properties": {
        "dataExportDetails": {
          "type": "array",
          "description": "List of DataTransfer details to be used to export data from azure.",
          "items": {
            "$ref": "#/definitions/DataExportDetails"
          },
          "x-ms-identifiers": []
        },
        "dataImportDetails": {
          "type": "array",
          "description": "List of DataTransfer details to be used to import data to azure.",
          "items": {
            "$ref": "#/definitions/DataImportDetails"
          },
          "x-ms-identifiers": []
        },
        "deviceType": {
          "$ref": "#/definitions/SkuName",
          "description": "Device type."
        },
        "transferType": {
          "$ref": "#/definitions/TransferType",
          "description": "Type of the transfer."
        }
      },
      "required": [
        "deviceType",
        "transferType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputRequest"
        }
      ],
      "x-ms-discriminator-value": "ValidateDataTransferDetails"
    },
    "DataTransferDetailsValidationResponseProperties": {
      "type": "object",
      "description": "Properties of data transfer details validation response.",
      "properties": {
        "status": {
          "$ref": "#/definitions/ValidationStatus",
          "description": "Data transfer details validation status.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputResponse"
        }
      ],
      "x-ms-discriminator-value": "ValidateDataTransferDetails"
    },
    "DataboxJobSecrets": {
      "type": "object",
      "description": "The secrets related to a databox job.",
      "properties": {
        "podSecrets": {
          "type": "array",
          "description": "Contains the list of secret objects for a job.",
          "items": {
            "$ref": "#/definitions/DataBoxSecret"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/JobSecrets"
        }
      ],
      "x-ms-discriminator-value": "DataBox"
    },
    "DatacenterAddressInstructionResponse": {
      "type": "object",
      "description": "Datacenter instruction for given storage location.",
      "properties": {
        "communicationInstruction": {
          "type": "string",
          "description": "Data center communication instruction",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DatacenterAddressResponse"
        }
      ],
      "x-ms-discriminator-value": "DatacenterAddressInstruction"
    },
    "DatacenterAddressLocationResponse": {
      "type": "object",
      "description": "Datacenter address for given storage location.",
      "properties": {
        "contactPersonName": {
          "type": "string",
          "description": "Contact person name",
          "readOnly": true
        },
        "company": {
          "type": "string",
          "description": "Company name",
          "readOnly": true
        },
        "street1": {
          "type": "string",
          "description": "Street address line 1",
          "readOnly": true
        },
        "street2": {
          "type": "string",
          "description": "Street address line 2",
          "readOnly": true
        },
        "street3": {
          "type": "string",
          "description": "Street address line 3",
          "readOnly": true
        },
        "city": {
          "type": "string",
          "description": "City name",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "description": "name of the state",
          "readOnly": true
        },
        "zip": {
          "type": "string",
          "description": "Zip code",
          "readOnly": true
        },
        "country": {
          "type": "string",
          "description": "name of the country",
          "readOnly": true
        },
        "phone": {
          "type": "string",
          "description": "Phone number",
          "readOnly": true
        },
        "phoneExtension": {
          "type": "string",
          "description": "Phone extension",
          "readOnly": true
        },
        "addressType": {
          "type": "string",
          "description": "Address type",
          "readOnly": true
        },
        "additionalShippingInformation": {
          "type": "string",
          "description": "Special instruction for shipping",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DatacenterAddressResponse"
        }
      ],
      "x-ms-discriminator-value": "DatacenterAddressLocation"
    },
    "DatacenterAddressRequest": {
      "type": "object",
      "description": "Request body to get the datacenter address.",
      "properties": {
        "storageLocation": {
          "type": "string",
          "description": "Storage location. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01"
        },
        "skuName": {
          "$ref": "#/definitions/SkuName",
          "description": "Sku Name for which the data center address requested."
        }
      },
      "required": [
        "storageLocation",
        "skuName"
      ]
    },
    "DatacenterAddressResponse": {
      "type": "object",
      "description": "Datacenter address for given storage location.",
      "properties": {
        "datacenterAddressType": {
          "type": "string",
          "description": "Discriminator property for DatacenterAddressResponse."
        },
        "supportedCarriersForReturnShipment": {
          "type": "array",
          "description": "List of supported carriers for return shipment.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "dataCenterAzureLocation": {
          "type": "string",
          "description": "Azure Location where the Data Center serves primarily.",
          "readOnly": true
        }
      },
      "discriminator": "datacenterAddressType",
      "required": [
        "datacenterAddressType"
      ]
    },
    "DatacenterAddressType": {
      "type": "string",
      "enum": [
        "DatacenterAddressLocation",
        "DatacenterAddressInstruction"
      ],
      "x-ms-enum": {
        "name": "DatacenterAddressType",
        "modelAsString": false,
        "values": [
          {
            "name": "DatacenterAddressLocation",
            "value": "DatacenterAddressLocation",
            "description": "Data center address location."
          },
          {
            "name": "DatacenterAddressInstruction",
            "value": "DatacenterAddressInstruction",
            "description": "Data center address instruction."
          }
        ]
      }
    },
    "DcAccessSecurityCode": {
      "type": "object",
      "description": "Dc access security code",
      "properties": {
        "reverseDCAccessCode": {
          "type": "string",
          "description": "Reverse Dc access security code."
        },
        "forwardDCAccessCode": {
          "type": "string",
          "description": "Forward Dc access security code."
        }
      }
    },
    "Details": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "DeviceErasureDetails": {
      "type": "object",
      "description": "Device erasure details with erasure completion status and erasureordestructionlog sas key",
      "properties": {
        "deviceErasureStatus": {
          "$ref": "#/definitions/StageStatus",
          "description": "Holds the device erasure completion status",
          "readOnly": true
        },
        "erasureOrDestructionCertificateSasKey": {
          "type": "string",
          "description": "Shared access key to download cleanup or destruction certificate for device",
          "readOnly": true
        }
      }
    },
    "DiskScheduleAvailabilityRequest": {
      "type": "object",
      "description": "Request body to get the availability for scheduling disk orders.",
      "properties": {
        "expectedDataSizeInTeraBytes": {
          "type": "integer",
          "format": "int32",
          "description": "The expected size of the data, which needs to be transferred in this job, in terabytes."
        }
      },
      "required": [
        "expectedDataSizeInTeraBytes"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleAvailabilityRequest"
        }
      ],
      "x-ms-discriminator-value": "DataBoxDisk"
    },
    "DiskSecret": {
      "type": "object",
      "description": "Contains all the secrets of a Disk.",
      "properties": {
        "diskSerialNumber": {
          "type": "string",
          "description": "Serial number of the assigned disk.",
          "readOnly": true
        },
        "bitLockerKey": {
          "type": "string",
          "description": "Bit Locker key of the disk which can be used to unlock the disk to copy data.",
          "readOnly": true
        }
      }
    },
    "DoubleEncryption": {
      "type": "string",
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "x-ms-enum": {
        "name": "DoubleEncryption",
        "modelAsString": false,
        "values": [
          {
            "name": "Enabled",
            "value": "Enabled",
            "description": "Software-based encryption is enabled."
          },
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "Software-based encryption is disabled."
          }
        ]
      }
    },
    "EncryptionPreferences": {
      "type": "object",
      "description": "Preferences related to the Encryption.",
      "properties": {
        "doubleEncryption": {
          "$ref": "#/definitions/DoubleEncryption",
          "description": "Defines secondary layer of software-based encryption enablement."
        },
        "hardwareEncryption": {
          "$ref": "#/definitions/HardwareEncryption",
          "description": "Defines Hardware level encryption (Only for disk)"
        }
      }
    },
    "ExportDiskDetails": {
      "type": "object",
      "description": "Export disk details",
      "properties": {
        "manifestFile": {
          "type": "string",
          "description": "The relative path of the manifest file on the disk.",
          "readOnly": true
        },
        "manifestHash": {
          "type": "string",
          "description": "The Base16-encoded MD5 hash of the manifest file on the disk.",
          "readOnly": true
        },
        "backupManifestCloudPath": {
          "type": "string",
          "description": "Path to backed up manifest, only returned if enableManifestBackup is true.",
          "readOnly": true
        }
      }
    },
    "FilterFileDetails": {
      "type": "object",
      "description": "Details of the filter files to be used for data transfer.",
      "properties": {
        "filterFileType": {
          "$ref": "#/definitions/FilterFileType",
          "description": "Type of the filter file."
        },
        "filterFilePath": {
          "type": "string",
          "description": "Path of the file that contains the details of all items to transfer."
        }
      },
      "required": [
        "filterFileType",
        "filterFilePath"
      ]
    },
    "FilterFileType": {
      "type": "string",
      "enum": [
        "AzureBlob",
        "AzureFile"
      ],
      "x-ms-enum": {
        "name": "FilterFileType",
        "modelAsString": false,
        "values": [
          {
            "name": "AzureBlob",
            "value": "AzureBlob",
            "description": "Filter file is of the type AzureBlob."
          },
          {
            "name": "AzureFile",
            "value": "AzureFile",
            "description": "Filter file is of the type AzureFiles."
          }
        ]
      }
    },
    "GranularCopyLogDetails": {
      "type": "object",
      "description": "Granular Details for log generated during copy.",
      "properties": {
        "copyLogDetailsType": {
          "type": "string",
          "description": "Discriminator property for GranularCopyLogDetails."
        }
      },
      "discriminator": "copyLogDetailsType",
      "required": [
        "copyLogDetailsType"
      ]
    },
    "GranularCopyProgress": {
      "type": "object",
      "description": "Granular Copy progress.",
      "properties": {
        "storageAccountName": {
          "type": "string",
          "description": "Name of the storage account. This will be empty for data account types other than storage account.",
          "readOnly": true
        },
        "transferType": {
          "$ref": "#/definitions/TransferType",
          "description": "Transfer type of data",
          "readOnly": true
        },
        "dataAccountType": {
          "$ref": "#/definitions/DataAccountType",
          "description": "Data Account Type.",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "description": "Id of the account where the data needs to be uploaded.",
          "readOnly": true
        },
        "bytesProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "To indicate bytes transferred.",
          "readOnly": true
        },
        "totalBytesToProcess": {
          "type": "integer",
          "format": "int32",
          "description": "Total amount of data to be processed by the job.",
          "readOnly": true
        },
        "filesProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "Number of files processed",
          "readOnly": true
        },
        "totalFilesToProcess": {
          "type": "integer",
          "format": "int32",
          "description": "Total files to process",
          "readOnly": true
        },
        "invalidFilesProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "Number of files not adhering to azure naming conventions which were processed by automatic renaming",
          "readOnly": true
        },
        "invalidFileBytesUploaded": {
          "type": "integer",
          "format": "int32",
          "description": "Total amount of data not adhering to azure naming conventions which were processed by automatic renaming",
          "readOnly": true
        },
        "renamedContainerCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of folders not adhering to azure naming conventions which were processed by automatic renaming",
          "readOnly": true
        },
        "filesErroredOut": {
          "type": "integer",
          "format": "int32",
          "description": "Number of files which could not be copied",
          "readOnly": true
        },
        "directoriesErroredOut": {
          "type": "integer",
          "format": "int32",
          "description": "To indicate directories errored out in the job.",
          "readOnly": true
        },
        "invalidDirectoriesProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "To indicate directories renamed",
          "readOnly": true
        },
        "isEnumerationInProgress": {
          "type": "boolean",
          "description": "To indicate if enumeration of data is in progress. \nUntil this is true, the TotalBytesToProcess may not be valid.",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/CloudError",
          "description": "Error, if any, in the stage",
          "readOnly": true
        },
        "actions": {
          "type": "array",
          "description": "Available actions on the job.",
          "items": {
            "$ref": "#/definitions/CustomerResolutionCode"
          },
          "readOnly": true
        }
      }
    },
    "HardwareEncryption": {
      "type": "string",
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "x-ms-enum": {
        "name": "HardwareEncryption",
        "modelAsString": false,
        "values": [
          {
            "name": "Enabled",
            "value": "Enabled",
            "description": "Hardware-based encryption is enabled."
          },
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "Hardware-based encryption is enabled."
          }
        ]
      }
    },
    "HeavyScheduleAvailabilityRequest": {
      "type": "object",
      "description": "Request body to get the availability for scheduling heavy orders.",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleAvailabilityRequest"
        }
      ],
      "x-ms-discriminator-value": "DataBoxHeavy"
    },
    "IdentityProperties": {
      "type": "object",
      "description": "Managed identity properties.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Managed service identity type."
        },
        "userAssigned": {
          "$ref": "#/definitions/UserAssignedProperties",
          "description": "User assigned identity properties."
        }
      }
    },
    "ImportDiskDetails": {
      "type": "object",
      "description": "Import disk details",
      "properties": {
        "manifestFile": {
          "type": "string",
          "description": "The relative path of the manifest file on the disk."
        },
        "manifestHash": {
          "type": "string",
          "description": "The Base16-encoded MD5 hash of the manifest file on the disk."
        },
        "bitLockerKey": {
          "type": "string",
          "description": "BitLocker key used to encrypt the disk."
        },
        "backupManifestCloudPath": {
          "type": "string",
          "description": "Path to backed up manifest, only returned if enableManifestBackup is true.",
          "readOnly": true
        }
      },
      "required": [
        "manifestFile",
        "manifestHash",
        "bitLockerKey"
      ]
    },
    "JobDeliveryInfo": {
      "type": "object",
      "description": "Additional delivery info.",
      "properties": {
        "scheduledDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Scheduled date time."
        }
      }
    },
    "JobDeliveryType": {
      "type": "string",
      "enum": [
        "NonScheduled",
        "Scheduled"
      ],
      "x-ms-enum": {
        "name": "JobDeliveryType",
        "modelAsString": false,
        "values": [
          {
            "name": "NonScheduled",
            "value": "NonScheduled",
            "description": "Non Scheduled job."
          },
          {
            "name": "Scheduled",
            "value": "Scheduled",
            "description": "Scheduled job."
          }
        ]
      }
    },
    "JobDetails": {
      "type": "object",
      "description": "Job details.",
      "properties": {
        "jobDetailsType": {
          "type": "string",
          "description": "Discriminator property for JobDetails."
        },
        "jobStages": {
          "type": "array",
          "description": "List of stages that run in the job.",
          "items": {
            "$ref": "#/definitions/JobStages"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "contactDetails": {
          "$ref": "#/definitions/ContactDetails",
          "description": "Contact details for notification and shipping."
        },
        "shippingAddress": {
          "$ref": "#/definitions/ShippingAddress",
          "description": "Shipping address of the customer."
        },
        "deliveryPackage": {
          "$ref": "#/definitions/PackageShippingDetails",
          "description": "Delivery package shipping details.",
          "readOnly": true
        },
        "returnPackage": {
          "$ref": "#/definitions/PackageShippingDetails",
          "description": "Return package shipping details.",
          "readOnly": true
        },
        "dataImportDetails": {
          "type": "array",
          "description": "Details of the data to be imported into azure.",
          "items": {
            "$ref": "#/definitions/DataImportDetails"
          },
          "x-ms-identifiers": []
        },
        "dataExportDetails": {
          "type": "array",
          "description": "Details of the data to be exported from azure.",
          "items": {
            "$ref": "#/definitions/DataExportDetails"
          },
          "x-ms-identifiers": []
        },
        "preferences": {
          "$ref": "#/definitions/Preferences",
          "description": "Preferences for the order."
        },
        "reverseShippingDetails": {
          "$ref": "#/definitions/ReverseShippingDetails",
          "description": "Optional Reverse Shipping details for order."
        },
        "copyLogDetails": {
          "type": "array",
          "description": "List of copy log details.",
          "items": {
            "$ref": "#/definitions/CopyLogDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "reverseShipmentLabelSasKey": {
          "type": "string",
          "description": "Shared access key to download the return shipment label",
          "readOnly": true
        },
        "chainOfCustodySasKey": {
          "type": "string",
          "description": "Shared access key to download the chain of custody logs",
          "readOnly": true
        },
        "deviceErasureDetails": {
          "$ref": "#/definitions/DeviceErasureDetails",
          "description": "Holds device data erasure details",
          "readOnly": true
        },
        "keyEncryptionKey": {
          "$ref": "#/definitions/KeyEncryptionKey",
          "description": "Details about which key encryption type is being used."
        },
        "expectedDataSizeInTeraBytes": {
          "type": "integer",
          "format": "int32",
          "description": "The expected size of the data, which needs to be transferred in this job, in terabytes."
        },
        "actions": {
          "type": "array",
          "description": "Available actions on the job.",
          "items": {
            "$ref": "#/definitions/CustomerResolutionCode"
          },
          "readOnly": true
        },
        "lastMitigationActionOnJob": {
          "$ref": "#/definitions/LastMitigationActionOnJob",
          "description": "Last mitigation action performed on the job.",
          "readOnly": true
        },
        "datacenterAddress": {
          "$ref": "#/definitions/DatacenterAddressResponse",
          "description": "Datacenter address to ship to, for the given sku and storage location.",
          "readOnly": true
        },
        "dataCenterCode": {
          "$ref": "#/definitions/DataCenterCode",
          "description": "DataCenter code.",
          "readOnly": true
        }
      },
      "discriminator": "jobDetailsType",
      "required": [
        "jobDetailsType",
        "contactDetails"
      ]
    },
    "JobProperties": {
      "type": "object",
      "description": "Job Properties",
      "properties": {
        "transferType": {
          "$ref": "#/definitions/TransferType",
          "description": "Type of the data transfer."
        },
        "isCancellable": {
          "type": "boolean",
          "description": "Describes whether the job is cancellable or not.",
          "readOnly": true
        },
        "isDeletable": {
          "type": "boolean",
          "description": "Describes whether the job is deletable or not.",
          "readOnly": true
        },
        "isShippingAddressEditable": {
          "type": "boolean",
          "description": "Describes whether the shipping address is editable or not.",
          "readOnly": true
        },
        "reverseShippingDetailsUpdate": {
          "$ref": "#/definitions/ReverseShippingDetailsEditStatus",
          "description": "The Editable status for Reverse Shipping Address and Contact Info",
          "readOnly": true
        },
        "reverseTransportPreferenceUpdate": {
          "$ref": "#/definitions/ReverseTransportPreferenceEditStatus",
          "description": "The Editable status for Reverse Transport preferences",
          "readOnly": true
        },
        "isPrepareToShipEnabled": {
          "type": "boolean",
          "description": "Is Prepare To Ship Enabled on this job",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/StageName",
          "description": "Name of the stage which is in progress.",
          "readOnly": true
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time at which the job was started in UTC ISO 8601 format.",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/CloudError",
          "description": "Top level error for the job.",
          "readOnly": true
        },
        "details": {
          "$ref": "#/definitions/JobDetails",
          "description": "Details of a job run. This field will only be sent for expand details filter."
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason for cancellation.",
          "readOnly": true
        },
        "deliveryType": {
          "$ref": "#/definitions/JobDeliveryType",
          "description": "Delivery type of Job."
        },
        "deliveryInfo": {
          "$ref": "#/definitions/JobDeliveryInfo",
          "description": "Delivery Info of Job."
        },
        "isCancellableWithoutFee": {
          "type": "boolean",
          "description": "Flag to indicate cancellation of scheduled job.",
          "readOnly": true
        }
      },
      "required": [
        "transferType"
      ]
    },
    "JobResource": {
      "type": "object",
      "description": "Job Resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/JobProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only",
          "minLength": 3,
          "maxLength": 24,
          "pattern": "^[-\\w\\.]+$",
          "readOnly": true
        }
      },
      "required": [
        "name"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "JobResourceListResult": {
      "type": "object",
      "description": "The response of a JobResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The JobResource items on this page",
          "items": {
            "$ref": "#/definitions/JobResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "JobResourceUpdateParameter": {
      "type": "object",
      "description": "The JobResourceUpdateParameter.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/UpdateJobProperties",
          "description": "Properties of a job to be updated."
        },
        "tags": {
          "type": "object",
          "description": "The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups).",
          "additionalProperties": {
            "type": "string"
          }
        },
        "identity": {
          "$ref": "#/definitions/ResourceIdentity",
          "description": "Msi identity of the resource"
        }
      }
    },
    "JobSecrets": {
      "type": "object",
      "description": "The base class for the secrets",
      "properties": {
        "jobSecretsType": {
          "type": "string",
          "description": "Discriminator property for JobSecrets."
        },
        "dcAccessSecurityCode": {
          "$ref": "#/definitions/DcAccessSecurityCode",
          "description": "Dc Access Security Code for Customer Managed Shipping",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/CloudError",
          "description": "Error while fetching the secrets.",
          "readOnly": true
        }
      },
      "discriminator": "jobSecretsType",
      "required": [
        "jobSecretsType"
      ]
    },
    "JobStages": {
      "type": "object",
      "description": "Job stages.",
      "properties": {
        "stageName": {
          "$ref": "#/definitions/StageName",
          "description": "Name of the job stage.",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the job stage.",
          "readOnly": true
        },
        "stageStatus": {
          "$ref": "#/definitions/StageStatus",
          "description": "Status of the job stage.",
          "readOnly": true
        },
        "stageTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time for the job stage in UTC ISO 8601 format.",
          "readOnly": true
        },
        "jobStageDetails": {
          "type": "object",
          "description": "Job Stage Details",
          "additionalProperties": {},
          "readOnly": true
        }
      }
    },
    "KekType": {
      "type": "string",
      "enum": [
        "MicrosoftManaged",
        "CustomerManaged"
      ],
      "x-ms-enum": {
        "name": "KekType",
        "modelAsString": false,
        "values": [
          {
            "name": "MicrosoftManaged",
            "value": "MicrosoftManaged",
            "description": "Key encryption key is managed by Microsoft."
          },
          {
            "name": "CustomerManaged",
            "value": "CustomerManaged",
            "description": "Key encryption key is managed by the Customer."
          }
        ]
      }
    },
    "KeyEncryptionKey": {
      "type": "object",
      "description": "Encryption key containing details about key to encrypt different keys.",
      "properties": {
        "kekType": {
          "$ref": "#/definitions/KekType",
          "description": "Type of encryption key used for key encryption."
        },
        "identityProperties": {
          "$ref": "#/definitions/IdentityProperties",
          "description": "Managed identity properties used for key encryption."
        },
        "kekUrl": {
          "type": "string",
          "description": "Key encryption key. It is required in case of Customer managed KekType."
        },
        "kekVaultResourceID": {
          "type": "string",
          "description": "Kek vault resource id. It is required in case of Customer managed KekType."
        }
      },
      "required": [
        "kekType"
      ]
    },
    "KeyEncryptionKeyUpdate": {
      "type": "object",
      "description": "Encryption key containing details about key to encrypt different keys.",
      "properties": {
        "kekType": {
          "$ref": "#/definitions/KekType",
          "description": "Type of encryption key used for key encryption."
        },
        "identityProperties": {
          "$ref": "#/definitions/IdentityProperties",
          "description": "Managed identity properties used for key encryption."
        },
        "kekUrl": {
          "type": "string",
          "description": "Key encryption key. It is required in case of Customer managed KekType."
        },
        "kekVaultResourceID": {
          "type": "string",
          "description": "Kek vault resource id. It is required in case of Customer managed KekType."
        }
      }
    },
    "LastMitigationActionOnJob": {
      "type": "object",
      "description": "Last Mitigation Action Performed On Job",
      "properties": {
        "actionDateTimeInUtc": {
          "type": "string",
          "format": "date-time",
          "description": "Action performed date time"
        },
        "isPerformedByCustomer": {
          "type": "boolean",
          "description": "Action performed by customer,\npossibility is that mitigation might happen by customer or service or by ops"
        },
        "customerResolution": {
          "$ref": "#/definitions/CustomerResolutionCode",
          "description": "Resolution code provided by customer"
        }
      }
    },
    "LogCollectionLevel": {
      "type": "string",
      "enum": [
        "Error",
        "Verbose"
      ],
      "x-ms-enum": {
        "name": "LogCollectionLevel",
        "modelAsString": false,
        "values": [
          {
            "name": "Error",
            "value": "Error",
            "description": "Only Errors will be collected in the logs."
          },
          {
            "name": "Verbose",
            "value": "Verbose",
            "description": "Verbose logging (includes Errors, CRC, size information and others)."
          }
        ]
      }
    },
    "ManagedDiskDetails": {
      "type": "object",
      "description": "Details of the managed disks.",
      "properties": {
        "resourceGroupId": {
          "type": "string",
          "description": "Resource Group Id of the compute disks."
        },
        "stagingStorageAccountId": {
          "type": "string",
          "description": "Resource Id of the storage account that can be used to copy the vhd for staging."
        }
      },
      "required": [
        "resourceGroupId",
        "stagingStorageAccountId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DataAccountDetails"
        }
      ],
      "x-ms-discriminator-value": "ManagedDisk"
    },
    "MarkDevicesShippedRequest": {
      "type": "object",
      "description": "The request body to provide the delivery package details of job",
      "properties": {
        "deliverToDcPackageDetails": {
          "$ref": "#/definitions/PackageCarrierInfo",
          "description": "Delivery package details"
        }
      },
      "required": [
        "deliverToDcPackageDetails"
      ]
    },
    "MitigateJobRequest": {
      "type": "object",
      "description": "The Mitigate Job captured from request body for Mitigate API",
      "properties": {
        "customerResolutionCode": {
          "$ref": "#/definitions/CustomerResolutionCode",
          "description": "Resolution code for the job"
        },
        "serialNumberCustomerResolutionMap": {
          "type": "object",
          "description": "Serial number and the customer resolution code corresponding to each serial number",
          "additionalProperties": {
            "$ref": "#/definitions/CustomerResolutionCode"
          }
        }
      },
      "required": [
        "customerResolutionCode"
      ]
    },
    "NotificationPreference": {
      "type": "object",
      "description": "Notification preference for a job stage.",
      "properties": {
        "stageName": {
          "$ref": "#/definitions/NotificationStageName",
          "description": "Name of the stage."
        },
        "sendNotification": {
          "type": "boolean",
          "description": "Notification is required or not."
        }
      },
      "required": [
        "stageName",
        "sendNotification"
      ]
    },
    "NotificationStageName": {
      "type": "string",
      "enum": [
        "DevicePrepared",
        "Dispatched",
        "Delivered",
        "PickedUp",
        "AtAzureDC",
        "DataCopy",
        "Created",
        "ShippedToCustomer"
      ],
      "x-ms-enum": {
        "name": "NotificationStageName",
        "modelAsString": true,
        "values": [
          {
            "name": "DevicePrepared",
            "value": "DevicePrepared",
            "description": "Notification at device prepared stage."
          },
          {
            "name": "Dispatched",
            "value": "Dispatched",
            "description": "Notification at device dispatched stage."
          },
          {
            "name": "Delivered",
            "value": "Delivered",
            "description": "Notification at device delivered stage."
          },
          {
            "name": "PickedUp",
            "value": "PickedUp",
            "description": "Notification at device picked up from user stage."
          },
          {
            "name": "AtAzureDC",
            "value": "AtAzureDC",
            "description": "Notification at device received at Azure datacenter stage."
          },
          {
            "name": "DataCopy",
            "value": "DataCopy",
            "description": "Notification at data copy started stage."
          },
          {
            "name": "Created",
            "value": "Created",
            "description": "Notification at job created stage."
          },
          {
            "name": "ShippedToCustomer",
            "value": "ShippedToCustomer",
            "description": "Notification at shipped devices to customer stage."
          }
        ]
      }
    },
    "OverallValidationStatus": {
      "type": "string",
      "enum": [
        "AllValidToProceed",
        "InputsRevisitRequired",
        "CertainInputValidationsSkipped"
      ],
      "x-ms-enum": {
        "name": "OverallValidationStatus",
        "modelAsString": false,
        "values": [
          {
            "name": "AllValidToProceed",
            "value": "AllValidToProceed",
            "description": "Every input request is valid."
          },
          {
            "name": "InputsRevisitRequired",
            "value": "InputsRevisitRequired",
            "description": "Some input requests are not valid."
          },
          {
            "name": "CertainInputValidationsSkipped",
            "value": "CertainInputValidationsSkipped",
            "description": "Certain input validations skipped."
          }
        ]
      }
    },
    "PackageCarrierDetails": {
      "type": "object",
      "description": "Package carrier details.",
      "properties": {
        "carrierAccountNumber": {
          "type": "string",
          "description": "Carrier Account Number of customer for customer disk."
        },
        "carrierName": {
          "type": "string",
          "description": "Name of the carrier."
        },
        "trackingId": {
          "type": "string",
          "description": "Tracking Id of shipment."
        }
      }
    },
    "PackageCarrierInfo": {
      "type": "object",
      "description": "package carrier info",
      "properties": {
        "carrierName": {
          "type": "string",
          "description": "Name of the carrier."
        },
        "trackingId": {
          "type": "string",
          "description": "Tracking Id of shipment."
        }
      }
    },
    "PackageShippingDetails": {
      "type": "object",
      "description": "package shipping details",
      "properties": {
        "trackingUrl": {
          "type": "string",
          "description": "Url where shipment can be tracked.",
          "readOnly": true
        },
        "carrierName": {
          "type": "string",
          "description": "Name of the carrier.",
          "readOnly": true
        },
        "trackingId": {
          "type": "string",
          "description": "Tracking Id of shipment.",
          "readOnly": true
        }
      }
    },
    "PagedSkuInformation": {
      "type": "object",
      "description": "The available skus operation response.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The SkuInformation items on this page",
          "items": {
            "$ref": "#/definitions/SkuInformation"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedUnencryptedCredentials": {
      "type": "object",
      "description": "List of unencrypted credentials for accessing device.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The UnencryptedCredentials items on this page",
          "items": {
            "$ref": "#/definitions/UnencryptedCredentials"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "Preferences": {
      "type": "object",
      "description": "Preferences related to the order",
      "properties": {
        "preferredDataCenterRegion": {
          "type": "array",
          "description": "Preferred data center region.",
          "items": {
            "type": "string"
          }
        },
        "transportPreferences": {
          "$ref": "#/definitions/TransportPreferences",
          "description": "Preferences related to the shipment logistics of the sku."
        },
        "reverseTransportPreferences": {
          "$ref": "#/definitions/TransportPreferences",
          "description": "Optional Preferences related to the reverse shipment logistics of the sku."
        },
        "encryptionPreferences": {
          "$ref": "#/definitions/EncryptionPreferences",
          "description": "Preferences related to the Encryption."
        },
        "storageAccountAccessTierPreferences": {
          "type": "array",
          "description": "Preferences related to the Access Tier of storage accounts.",
          "items": {
            "type": "string",
            "enum": [
              "Archive"
            ],
            "x-ms-enum": {
              "modelAsString": false
            }
          }
        }
      }
    },
    "PreferencesUpdate": {
      "type": "object",
      "description": "Preferences related to the order",
      "properties": {
        "preferredDataCenterRegion": {
          "type": "array",
          "description": "Preferred data center region.",
          "items": {
            "type": "string"
          }
        },
        "transportPreferences": {
          "$ref": "#/definitions/TransportPreferencesUpdate",
          "description": "Preferences related to the shipment logistics of the sku."
        },
        "reverseTransportPreferences": {
          "$ref": "#/definitions/TransportPreferencesUpdate",
          "description": "Optional Preferences related to the reverse shipment logistics of the sku."
        },
        "encryptionPreferences": {
          "$ref": "#/definitions/EncryptionPreferences",
          "description": "Preferences related to the Encryption."
        },
        "storageAccountAccessTierPreferences": {
          "type": "array",
          "description": "Preferences related to the Access Tier of storage accounts.",
          "items": {
            "type": "string",
            "enum": [
              "Archive"
            ],
            "x-ms-enum": {
              "modelAsString": false
            }
          }
        }
      }
    },
    "PreferencesValidationRequest": {
      "type": "object",
      "description": "Request to validate preference of transport and data center.",
      "properties": {
        "preference": {
          "$ref": "#/definitions/Preferences",
          "description": "Preference of transport and data center."
        },
        "deviceType": {
          "$ref": "#/definitions/SkuName",
          "description": "Device type to be used for the job."
        }
      },
      "required": [
        "deviceType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputRequest"
        }
      ],
      "x-ms-discriminator-value": "ValidatePreferences"
    },
    "PreferencesValidationResponseProperties": {
      "type": "object",
      "description": "Properties of data center and transport preference validation response.",
      "properties": {
        "status": {
          "$ref": "#/definitions/ValidationStatus",
          "description": "Validation status of requested data center and transport.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputResponse"
        }
      ],
      "x-ms-discriminator-value": "ValidatePreferences"
    },
    "RegionConfigurationRequest": {
      "type": "object",
      "description": "Request body to get the configuration for the region.",
      "properties": {
        "scheduleAvailabilityRequest": {
          "$ref": "#/definitions/ScheduleAvailabilityRequest",
          "description": "Request body to get the availability for scheduling orders."
        },
        "transportAvailabilityRequest": {
          "$ref": "#/definitions/TransportAvailabilityRequest",
          "description": "Request body to get the transport availability for given sku."
        },
        "datacenterAddressRequest": {
          "$ref": "#/definitions/DatacenterAddressRequest",
          "description": "Request body to get the datacenter address for given sku."
        }
      }
    },
    "RegionConfigurationResponse": {
      "type": "object",
      "description": "Configuration response specific to a region.",
      "properties": {
        "scheduleAvailabilityResponse": {
          "$ref": "#/definitions/ScheduleAvailabilityResponse",
          "description": "Schedule availability for given sku in a region.",
          "readOnly": true
        },
        "transportAvailabilityResponse": {
          "$ref": "#/definitions/TransportAvailabilityResponse",
          "description": "Transport options available for given sku in a region.",
          "readOnly": true
        },
        "datacenterAddressResponse": {
          "$ref": "#/definitions/DatacenterAddressResponse",
          "description": "Datacenter address for given sku in a region.",
          "readOnly": true
        }
      }
    },
    "Resource": {
      "type": "object",
      "description": "Model of the Resource.",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the resource. This will be one of the supported and registered Azure Regions (e.g. West US, East US, Southeast Asia, etc.). The region of a resource cannot be changed once it is created, but if an identical region is specified on update the request will succeed.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "description": "The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups).",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "The sku type."
        },
        "identity": {
          "$ref": "#/definitions/ResourceIdentity",
          "description": "Msi identity of the resource"
        }
      },
      "required": [
        "location",
        "sku"
      ]
    },
    "ResourceIdentity": {
      "type": "object",
      "description": "Msi identity details of the resource",
      "properties": {
        "type": {
          "type": "string",
          "description": "Identity type"
        },
        "principalId": {
          "type": "string",
          "description": "Service Principal Id backing the Msi",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "description": "Home Tenant Id",
          "readOnly": true
        },
        "userAssignedIdentities": {
          "type": "object",
          "description": "User Assigned Identities",
          "additionalProperties": {
            "$ref": "#/definitions/Azure.ResourceManager.Foundations.UserAssignedIdentity"
          }
        }
      }
    },
    "ReverseShippingDetails": {
      "type": "object",
      "description": "Reverse Shipping Address and contact details for a job.",
      "properties": {
        "contactDetails": {
          "$ref": "#/definitions/ContactInfo",
          "description": "Contact Info."
        },
        "shippingAddress": {
          "$ref": "#/definitions/ShippingAddress",
          "description": "Shipping address where customer wishes to receive the device."
        },
        "isUpdated": {
          "type": "boolean",
          "description": "A flag to indicate whether Reverse Shipping details are updated or not after device has been prepared.\nRead only field",
          "readOnly": true
        }
      }
    },
    "ReverseShippingDetailsEditStatus": {
      "type": "string",
      "enum": [
        "Enabled",
        "Disabled",
        "NotSupported"
      ],
      "x-ms-enum": {
        "name": "ReverseShippingDetailsEditStatus",
        "modelAsString": false,
        "values": [
          {
            "name": "Enabled",
            "value": "Enabled",
            "description": "Reverse shipping details can be edited."
          },
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "Edit is disabled for Reverse shipping details."
          },
          {
            "name": "NotSupported",
            "value": "NotSupported",
            "description": "Edit is not supported for Reverse shipping details. Either subscription feature is not available or SKU doesn't support this feature."
          }
        ]
      }
    },
    "ReverseShippingDetailsUpdate": {
      "type": "object",
      "description": "Reverse Shipping Address and contact details for a job.",
      "properties": {
        "contactDetails": {
          "$ref": "#/definitions/ContactInfoUpdate",
          "description": "Contact Info."
        },
        "shippingAddress": {
          "$ref": "#/definitions/ShippingAddressUpdate",
          "description": "Shipping address where customer wishes to receive the device."
        }
      }
    },
    "ReverseTransportPreferenceEditStatus": {
      "type": "string",
      "enum": [
        "Enabled",
        "Disabled",
        "NotSupported"
      ],
      "x-ms-enum": {
        "name": "ReverseTransportPreferenceEditStatus",
        "modelAsString": false,
        "values": [
          {
            "name": "Enabled",
            "value": "Enabled",
            "description": "Reverse Transport Preferences can be edited."
          },
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "Edit is disabled for Reverse Transport Preferences."
          },
          {
            "name": "NotSupported",
            "value": "NotSupported",
            "description": "Edit is not supported for Reverse Transport Preferences. Either subscription feature is not available or SKU doesn't support this feature."
          }
        ]
      }
    },
    "ScheduleAvailabilityRequest": {
      "type": "object",
      "description": "Request body to get the availability for scheduling orders.",
      "properties": {
        "skuName": {
          "type": "string",
          "description": "Discriminator property for ScheduleAvailabilityRequest."
        },
        "storageLocation": {
          "type": "string",
          "description": "Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01"
        },
        "country": {
          "type": "string",
          "description": "Country in which storage location should be supported."
        }
      },
      "discriminator": "skuName",
      "required": [
        "skuName",
        "storageLocation"
      ]
    },
    "ScheduleAvailabilityResponse": {
      "type": "object",
      "description": "Schedule availability for given sku in a region.",
      "properties": {
        "availableDates": {
          "type": "array",
          "description": "List of dates available to schedule",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "readOnly": true
        }
      }
    },
    "ShareCredentialDetails": {
      "type": "object",
      "description": "Credential details of the shares in account.",
      "properties": {
        "shareName": {
          "type": "string",
          "description": "Name of the share.",
          "readOnly": true
        },
        "shareType": {
          "$ref": "#/definitions/ShareDestinationFormatType",
          "description": "Type of the share.",
          "readOnly": true
        },
        "userName": {
          "type": "string",
          "description": "User name for the share.",
          "readOnly": true
        },
        "password": {
          "type": "string",
          "description": "Password for the share.",
          "readOnly": true
        },
        "supportedAccessProtocols": {
          "type": "array",
          "description": "Access protocols supported on the device.",
          "items": {
            "$ref": "#/definitions/AccessProtocol"
          },
          "readOnly": true
        }
      }
    },
    "ShareDestinationFormatType": {
      "type": "string",
      "enum": [
        "UnknownType",
        "HCS",
        "BlockBlob",
        "PageBlob",
        "AzureFile",
        "ManagedDisk"
      ],
      "x-ms-enum": {
        "name": "ShareDestinationFormatType",
        "modelAsString": false,
        "values": [
          {
            "name": "UnknownType",
            "value": "UnknownType",
            "description": "Unknown format."
          },
          {
            "name": "HCS",
            "value": "HCS",
            "description": "Storsimple data format."
          },
          {
            "name": "BlockBlob",
            "value": "BlockBlob",
            "description": "Azure storage block blob format."
          },
          {
            "name": "PageBlob",
            "value": "PageBlob",
            "description": "Azure storage page blob format."
          },
          {
            "name": "AzureFile",
            "value": "AzureFile",
            "description": "Azure storage file format."
          },
          {
            "name": "ManagedDisk",
            "value": "ManagedDisk",
            "description": "Azure Compute Disk."
          }
        ]
      }
    },
    "ShipmentPickUpRequest": {
      "type": "object",
      "description": "Shipment pick up request details.",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Minimum date after which the pick up should commence, this must be in local time of pick up area."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Maximum date before which the pick up should commence, this must be in local time of pick up area."
        },
        "shipmentLocation": {
          "type": "string",
          "description": "Shipment Location in the pickup place. Eg.front desk"
        }
      },
      "required": [
        "startTime",
        "endTime",
        "shipmentLocation"
      ]
    },
    "ShipmentPickUpResponse": {
      "type": "object",
      "description": "Shipment pick up response.",
      "properties": {
        "confirmationNumber": {
          "type": "string",
          "description": "Confirmation number for the pick up request.",
          "readOnly": true
        },
        "readyByTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time by which shipment should be ready for pick up, this is in local time of pick up area.",
          "readOnly": true
        }
      }
    },
    "ShippingAddress": {
      "type": "object",
      "description": "Shipping address where customer wishes to receive the device.",
      "properties": {
        "streetAddress1": {
          "type": "string",
          "description": "Street Address line 1."
        },
        "streetAddress2": {
          "type": "string",
          "description": "Street Address line 2."
        },
        "streetAddress3": {
          "type": "string",
          "description": "Street Address line 3."
        },
        "city": {
          "type": "string",
          "description": "Name of the City."
        },
        "stateOrProvince": {
          "type": "string",
          "description": "Name of the State or Province."
        },
        "country": {
          "type": "string",
          "description": "Name of the Country."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "zipExtendedCode": {
          "type": "string",
          "description": "Extended Zip Code."
        },
        "companyName": {
          "type": "string",
          "description": "Name of the company."
        },
        "addressType": {
          "$ref": "#/definitions/AddressType",
          "description": "Type of address."
        },
        "skipAddressValidation": {
          "type": "boolean",
          "description": "Flag to indicate if customer has chosen to skip default address validation"
        },
        "taxIdentificationNumber": {
          "type": "string",
          "description": "Tax Identification Number"
        }
      },
      "required": [
        "streetAddress1",
        "country"
      ]
    },
    "ShippingAddressUpdate": {
      "type": "object",
      "description": "Shipping address where customer wishes to receive the device.",
      "properties": {
        "streetAddress1": {
          "type": "string",
          "description": "Street Address line 1."
        },
        "streetAddress2": {
          "type": "string",
          "description": "Street Address line 2."
        },
        "streetAddress3": {
          "type": "string",
          "description": "Street Address line 3."
        },
        "city": {
          "type": "string",
          "description": "Name of the City."
        },
        "stateOrProvince": {
          "type": "string",
          "description": "Name of the State or Province."
        },
        "country": {
          "type": "string",
          "description": "Name of the Country."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "zipExtendedCode": {
          "type": "string",
          "description": "Extended Zip Code."
        },
        "companyName": {
          "type": "string",
          "description": "Name of the company."
        },
        "addressType": {
          "$ref": "#/definitions/AddressType",
          "description": "Type of address."
        },
        "skipAddressValidation": {
          "type": "boolean",
          "description": "Flag to indicate if customer has chosen to skip default address validation"
        },
        "taxIdentificationNumber": {
          "type": "string",
          "description": "Tax Identification Number"
        }
      }
    },
    "Sku": {
      "type": "object",
      "description": "The Sku.",
      "properties": {
        "name": {
          "$ref": "#/definitions/SkuName",
          "description": "The sku name."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the sku."
        },
        "family": {
          "type": "string",
          "description": "The sku family."
        }
      },
      "required": [
        "name"
      ]
    },
    "SkuAvailabilityValidationRequest": {
      "type": "object",
      "description": "Request to validate sku availability.",
      "properties": {
        "deviceType": {
          "$ref": "#/definitions/SkuName",
          "description": "Device type to be used for the job."
        },
        "transferType": {
          "$ref": "#/definitions/TransferType",
          "description": "Type of the transfer."
        },
        "country": {
          "type": "string",
          "description": "ISO country code. Country for hardware shipment. For codes check: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements"
        },
        "location": {
          "type": "string",
          "description": "Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01"
        }
      },
      "required": [
        "deviceType",
        "transferType",
        "country",
        "location"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputRequest"
        }
      ],
      "x-ms-discriminator-value": "ValidateSkuAvailability"
    },
    "SkuAvailabilityValidationResponseProperties": {
      "type": "object",
      "description": "Properties of sku availability validation response.",
      "properties": {
        "status": {
          "$ref": "#/definitions/ValidationStatus",
          "description": "Sku availability validation status.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputResponse"
        }
      ],
      "x-ms-discriminator-value": "ValidateSkuAvailability"
    },
    "SkuCapacity": {
      "type": "object",
      "description": "Capacity of the sku.",
      "properties": {
        "usable": {
          "type": "string",
          "description": "Usable capacity in TB.",
          "readOnly": true
        },
        "maximum": {
          "type": "string",
          "description": "Maximum capacity in TB.",
          "readOnly": true
        }
      }
    },
    "SkuCost": {
      "type": "object",
      "description": "Describes metadata for retrieving price info.",
      "properties": {
        "meterId": {
          "type": "string",
          "description": "Meter id of the Sku.",
          "readOnly": true
        },
        "meterType": {
          "type": "string",
          "description": "The type of the meter.",
          "readOnly": true
        },
        "multiplier": {
          "type": "number",
          "format": "float",
          "description": "Multiplier specifies the region specific value to be multiplied with 1$ guid. Eg: Our new regions will be using 1$ shipping guid with appropriate multiplier specific to region.",
          "readOnly": true
        }
      }
    },
    "SkuDisabledReason": {
      "type": "string",
      "enum": [
        "None",
        "Country",
        "Region",
        "Feature",
        "OfferType",
        "NoSubscriptionInfo"
      ],
      "x-ms-enum": {
        "name": "SkuDisabledReason",
        "modelAsString": false,
        "values": [
          {
            "name": "None",
            "value": "None",
            "description": "SKU is not disabled."
          },
          {
            "name": "Country",
            "value": "Country",
            "description": "SKU is not available in the requested country."
          },
          {
            "name": "Region",
            "value": "Region",
            "description": "SKU is not available to push data to the requested Azure region."
          },
          {
            "name": "Feature",
            "value": "Feature",
            "description": "Required features are not enabled for the SKU."
          },
          {
            "name": "OfferType",
            "value": "OfferType",
            "description": "Subscription does not have required offer types for the SKU."
          },
          {
            "name": "NoSubscriptionInfo",
            "value": "NoSubscriptionInfo",
            "description": "Subscription has not registered to Microsoft.DataBox and Service does not have the subscription notification."
          }
        ]
      }
    },
    "SkuInformation": {
      "type": "object",
      "description": "Information of the sku.",
      "properties": {
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "The Sku.",
          "readOnly": true
        },
        "enabled": {
          "type": "boolean",
          "description": "The sku is enabled or not.",
          "readOnly": true
        },
        "properties": {
          "$ref": "#/definitions/SkuProperties",
          "description": "Properties of the sku.",
          "readOnly": true
        }
      }
    },
    "SkuName": {
      "type": "string",
      "enum": [
        "DataBox",
        "DataBoxDisk",
        "DataBoxHeavy",
        "DataBoxCustomerDisk"
      ],
      "x-ms-enum": {
        "name": "SkuName",
        "modelAsString": false,
        "values": [
          {
            "name": "DataBox",
            "value": "DataBox",
            "description": "Data Box."
          },
          {
            "name": "DataBoxDisk",
            "value": "DataBoxDisk",
            "description": "Data Box Disk."
          },
          {
            "name": "DataBoxHeavy",
            "value": "DataBoxHeavy",
            "description": "Data Box Heavy."
          },
          {
            "name": "DataBoxCustomerDisk",
            "value": "DataBoxCustomerDisk",
            "description": "Data Box Customer Disk"
          }
        ]
      }
    },
    "SkuProperties": {
      "type": "object",
      "description": "Properties of the sku.",
      "properties": {
        "dataLocationToServiceLocationMap": {
          "type": "array",
          "description": "The map of data location to service location.",
          "items": {
            "$ref": "#/definitions/DataLocationToServiceLocationMap"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "capacity": {
          "$ref": "#/definitions/SkuCapacity",
          "description": "Capacity of the Sku.",
          "readOnly": true
        },
        "costs": {
          "type": "array",
          "description": "Cost of the Sku.",
          "items": {
            "$ref": "#/definitions/SkuCost"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "apiVersions": {
          "type": "array",
          "description": "Api versions that support this Sku.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "disabledReason": {
          "$ref": "#/definitions/SkuDisabledReason",
          "description": "Reason why the Sku is disabled.",
          "readOnly": true
        },
        "disabledReasonMessage": {
          "type": "string",
          "description": "Message for why the Sku is disabled.",
          "readOnly": true
        },
        "requiredFeature": {
          "type": "string",
          "description": "Required feature to access the sku.",
          "readOnly": true
        },
        "countriesWithinCommerceBoundary": {
          "type": "array",
          "description": "List of all the Countries in the SKU specific commerce boundary",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "StageName": {
      "type": "string",
      "enum": [
        "DeviceOrdered",
        "DevicePrepared",
        "Dispatched",
        "Delivered",
        "PickedUp",
        "AtAzureDC",
        "DataCopy",
        "Completed",
        "CompletedWithErrors",
        "Cancelled",
        "Failed_IssueReportedAtCustomer",
        "Failed_IssueDetectedAtAzureDC",
        "Aborted",
        "CompletedWithWarnings",
        "ReadyToDispatchFromAzureDC",
        "ReadyToReceiveAtAzureDC",
        "Created",
        "ShippedToAzureDC",
        "AwaitingShipmentDetails",
        "PreparingToShipFromAzureDC",
        "ShippedToCustomer"
      ],
      "x-ms-enum": {
        "name": "StageName",
        "modelAsString": true,
        "values": [
          {
            "name": "DeviceOrdered",
            "value": "DeviceOrdered",
            "description": "An order has been created."
          },
          {
            "name": "DevicePrepared",
            "value": "DevicePrepared",
            "description": "A device has been prepared for the order."
          },
          {
            "name": "Dispatched",
            "value": "Dispatched",
            "description": "Device has been dispatched to the user of the order."
          },
          {
            "name": "Delivered",
            "value": "Delivered",
            "description": "Device has been delivered to the user of the order."
          },
          {
            "name": "PickedUp",
            "value": "PickedUp",
            "description": "Device has been picked up from user and in transit to Azure datacenter."
          },
          {
            "name": "AtAzureDC",
            "value": "AtAzureDC",
            "description": "Device has been received at Azure datacenter from the user."
          },
          {
            "name": "DataCopy",
            "value": "DataCopy",
            "description": "Data copy from the device at Azure datacenter."
          },
          {
            "name": "Completed",
            "value": "Completed",
            "description": "Order has completed."
          },
          {
            "name": "CompletedWithErrors",
            "value": "CompletedWithErrors",
            "description": "Order has completed with errors."
          },
          {
            "name": "Cancelled",
            "value": "Cancelled",
            "description": "Order has been cancelled."
          },
          {
            "name": "Failed_IssueReportedAtCustomer",
            "value": "Failed_IssueReportedAtCustomer",
            "description": "Order has failed due to issue reported by user."
          },
          {
            "name": "Failed_IssueDetectedAtAzureDC",
            "value": "Failed_IssueDetectedAtAzureDC",
            "description": "Order has failed due to issue detected at Azure datacenter."
          },
          {
            "name": "Aborted",
            "value": "Aborted",
            "description": "Order has been aborted."
          },
          {
            "name": "CompletedWithWarnings",
            "value": "CompletedWithWarnings",
            "description": "Order has completed with warnings."
          },
          {
            "name": "ReadyToDispatchFromAzureDC",
            "value": "ReadyToDispatchFromAzureDC",
            "description": "Device is ready to be handed to customer from Azure DC."
          },
          {
            "name": "ReadyToReceiveAtAzureDC",
            "value": "ReadyToReceiveAtAzureDC",
            "description": "Device can be dropped off at Azure DC."
          },
          {
            "name": "Created",
            "value": "Created",
            "description": "Job created by the customer."
          },
          {
            "name": "ShippedToAzureDC",
            "value": "ShippedToAzureDC",
            "description": "User shipped the device to AzureDC."
          },
          {
            "name": "AwaitingShipmentDetails",
            "value": "AwaitingShipmentDetails",
            "description": "Awaiting shipment details of device from customer."
          },
          {
            "name": "PreparingToShipFromAzureDC",
            "value": "PreparingToShipFromAzureDC",
            "description": "Preparing the device to ship to customer."
          },
          {
            "name": "ShippedToCustomer",
            "value": "ShippedToCustomer",
            "description": "Shipped the device to customer."
          }
        ]
      }
    },
    "StageStatus": {
      "type": "string",
      "enum": [
        "None",
        "InProgress",
        "Succeeded",
        "Failed",
        "Cancelled",
        "Cancelling",
        "SucceededWithErrors",
        "WaitingForCustomerAction",
        "SucceededWithWarnings",
        "WaitingForCustomerActionForKek",
        "WaitingForCustomerActionForCleanUp",
        "CustomerActionPerformedForCleanUp",
        "CustomerActionPerformed"
      ],
      "x-ms-enum": {
        "name": "StageStatus",
        "modelAsString": false,
        "values": [
          {
            "name": "None",
            "value": "None",
            "description": "No status available yet."
          },
          {
            "name": "InProgress",
            "value": "InProgress",
            "description": "Stage is in progress."
          },
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Stage has succeeded."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Stage has failed."
          },
          {
            "name": "Cancelled",
            "value": "Cancelled",
            "description": "Stage has been cancelled."
          },
          {
            "name": "Cancelling",
            "value": "Cancelling",
            "description": "Stage is cancelling."
          },
          {
            "name": "SucceededWithErrors",
            "value": "SucceededWithErrors",
            "description": "Stage has succeeded with errors."
          },
          {
            "name": "WaitingForCustomerAction",
            "value": "WaitingForCustomerAction",
            "description": "Stage is stuck until customer takes some action."
          },
          {
            "name": "SucceededWithWarnings",
            "value": "SucceededWithWarnings",
            "description": "Stage has succeeded with warnings."
          },
          {
            "name": "WaitingForCustomerActionForKek",
            "value": "WaitingForCustomerActionForKek",
            "description": "Stage is waiting for customer action for kek action items."
          },
          {
            "name": "WaitingForCustomerActionForCleanUp",
            "value": "WaitingForCustomerActionForCleanUp",
            "description": "Stage is waiting for customer action for clean up."
          },
          {
            "name": "CustomerActionPerformedForCleanUp",
            "value": "CustomerActionPerformedForCleanUp",
            "description": "Stage has performed customer action for clean up."
          },
          {
            "name": "CustomerActionPerformed",
            "value": "CustomerActionPerformed",
            "description": "Stage has performed customer action for clean up."
          }
        ]
      }
    },
    "StorageAccountDetails": {
      "type": "object",
      "description": "Details for the storage account.",
      "properties": {
        "storageAccountId": {
          "type": "string",
          "description": "Storage Account Resource Id."
        }
      },
      "required": [
        "storageAccountId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DataAccountDetails"
        }
      ],
      "x-ms-discriminator-value": "StorageAccount"
    },
    "SubscriptionIsAllowedToCreateJobValidationRequest": {
      "type": "object",
      "description": "Request to validate subscription permission to create jobs.",
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputRequest"
        }
      ],
      "x-ms-discriminator-value": "ValidateSubscriptionIsAllowedToCreateJob"
    },
    "SubscriptionIsAllowedToCreateJobValidationResponseProperties": {
      "type": "object",
      "description": "Properties of subscription permission to create job validation response.",
      "properties": {
        "status": {
          "$ref": "#/definitions/ValidationStatus",
          "description": "Validation status of subscription permission to create job.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputResponse"
        }
      ],
      "x-ms-discriminator-value": "ValidateSubscriptionIsAllowedToCreateJob"
    },
    "TransferAllDetails": {
      "type": "object",
      "description": "Details to transfer all data.",
      "properties": {
        "dataAccountType": {
          "$ref": "#/definitions/DataAccountType",
          "description": "Type of the account of data"
        },
        "transferAllBlobs": {
          "type": "boolean",
          "description": "To indicate if all Azure blobs have to be transferred"
        },
        "transferAllFiles": {
          "type": "boolean",
          "description": "To indicate if all Azure Files have to be transferred"
        }
      },
      "required": [
        "dataAccountType"
      ]
    },
    "TransferConfiguration": {
      "type": "object",
      "description": "Configuration for defining the transfer of data.",
      "properties": {
        "transferConfigurationType": {
          "$ref": "#/definitions/TransferConfigurationType",
          "description": "Type of the configuration for transfer."
        },
        "transferFilterDetails": {
          "$ref": "#/definitions/TransferConfigurationTransferFilterDetails",
          "description": "Map of filter type and the details to filter. This field is required only if the TransferConfigurationType is given as TransferUsingFilter."
        },
        "transferAllDetails": {
          "$ref": "#/definitions/TransferConfigurationTransferAllDetails",
          "description": "Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType is given as TransferAll"
        }
      },
      "required": [
        "transferConfigurationType"
      ]
    },
    "TransferConfigurationTransferAllDetails": {
      "type": "object",
      "description": "Map of filter type and the details to transfer all data. This field is required only if the TransferConfigurationType is given as TransferAll",
      "properties": {
        "include": {
          "$ref": "#/definitions/TransferAllDetails",
          "description": "Details to transfer all data."
        }
      }
    },
    "TransferConfigurationTransferFilterDetails": {
      "type": "object",
      "description": "Map of filter type and the details to filter. This field is required only if the TransferConfigurationType is given as TransferUsingFilter.",
      "properties": {
        "include": {
          "$ref": "#/definitions/TransferFilterDetails",
          "description": "Details of the filtering the transfer of data."
        }
      }
    },
    "TransferConfigurationType": {
      "type": "string",
      "enum": [
        "TransferAll",
        "TransferUsingFilter"
      ],
      "x-ms-enum": {
        "name": "TransferConfigurationType",
        "modelAsString": false,
        "values": [
          {
            "name": "TransferAll",
            "value": "TransferAll",
            "description": "Transfer all the data."
          },
          {
            "name": "TransferUsingFilter",
            "value": "TransferUsingFilter",
            "description": "Transfer using filter."
          }
        ]
      }
    },
    "TransferFilterDetails": {
      "type": "object",
      "description": "Details of the filtering the transfer of data.",
      "properties": {
        "dataAccountType": {
          "$ref": "#/definitions/DataAccountType",
          "description": "Type of the account of data."
        },
        "blobFilterDetails": {
          "$ref": "#/definitions/BlobFilterDetails",
          "description": "Filter details to transfer blobs."
        },
        "azureFileFilterDetails": {
          "$ref": "#/definitions/AzureFileFilterDetails",
          "description": "Filter details to transfer Azure files."
        },
        "filterFileDetails": {
          "type": "array",
          "description": "Details of the filter files to be used for data transfer.",
          "items": {
            "$ref": "#/definitions/FilterFileDetails"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "dataAccountType"
      ]
    },
    "TransferType": {
      "type": "string",
      "enum": [
        "ImportToAzure",
        "ExportFromAzure"
      ],
      "x-ms-enum": {
        "name": "TransferType",
        "modelAsString": false,
        "values": [
          {
            "name": "ImportToAzure",
            "value": "ImportToAzure",
            "description": "Import data to azure."
          },
          {
            "name": "ExportFromAzure",
            "value": "ExportFromAzure",
            "description": "Export data from azure."
          }
        ]
      }
    },
    "TransportAvailabilityDetails": {
      "type": "object",
      "description": "Transport options availability details for given region.",
      "properties": {
        "shipmentType": {
          "$ref": "#/definitions/TransportShipmentTypes",
          "description": "Transport Shipment Type supported for given region.",
          "readOnly": true
        }
      }
    },
    "TransportAvailabilityRequest": {
      "type": "object",
      "description": "Request body to get the transport availability for given sku.",
      "properties": {
        "skuName": {
          "$ref": "#/definitions/SkuName",
          "description": "Type of the device."
        }
      }
    },
    "TransportAvailabilityResponse": {
      "type": "object",
      "description": "Transport options available for given sku in a region.",
      "properties": {
        "transportAvailabilityDetails": {
          "type": "array",
          "description": "List of transport availability details for given region",
          "items": {
            "$ref": "#/definitions/TransportAvailabilityDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "TransportPreferences": {
      "type": "object",
      "description": "Preferences related to the shipment logistics of the sku",
      "properties": {
        "preferredShipmentType": {
          "$ref": "#/definitions/TransportShipmentTypes",
          "description": "Indicates Shipment Logistics type that the customer preferred."
        },
        "isUpdated": {
          "type": "boolean",
          "description": "Read only property which indicates whether transport preferences has been updated or not after device is prepared.",
          "readOnly": true
        }
      },
      "required": [
        "preferredShipmentType"
      ]
    },
    "TransportPreferencesUpdate": {
      "type": "object",
      "description": "Preferences related to the shipment logistics of the sku",
      "properties": {
        "preferredShipmentType": {
          "$ref": "#/definitions/TransportShipmentTypes",
          "description": "Indicates Shipment Logistics type that the customer preferred."
        }
      }
    },
    "TransportShipmentTypes": {
      "type": "string",
      "enum": [
        "CustomerManaged",
        "MicrosoftManaged"
      ],
      "x-ms-enum": {
        "name": "TransportShipmentTypes",
        "modelAsString": false,
        "values": [
          {
            "name": "CustomerManaged",
            "value": "CustomerManaged",
            "description": "Shipment Logistics is handled by the customer."
          },
          {
            "name": "MicrosoftManaged",
            "value": "MicrosoftManaged",
            "description": "Shipment Logistics is handled by Microsoft."
          }
        ]
      }
    },
    "UnencryptedCredentials": {
      "type": "object",
      "description": "Unencrypted credentials for accessing device.",
      "properties": {
        "jobName": {
          "type": "string",
          "description": "Name of the job.",
          "readOnly": true
        },
        "jobSecrets": {
          "$ref": "#/definitions/JobSecrets",
          "description": "Secrets related to this job.",
          "readOnly": true
        }
      }
    },
    "UpdateJobDetails": {
      "type": "object",
      "description": "Job details for update.",
      "properties": {
        "contactDetails": {
          "$ref": "#/definitions/ContactDetailsUpdate",
          "description": "Contact details for notification and shipping."
        },
        "shippingAddress": {
          "$ref": "#/definitions/ShippingAddressUpdate",
          "description": "Shipping address of the customer."
        },
        "reverseShippingDetails": {
          "$ref": "#/definitions/ReverseShippingDetailsUpdate",
          "description": "Reverse Shipping Address and contact details for a job."
        },
        "preferences": {
          "$ref": "#/definitions/PreferencesUpdate",
          "description": "Preferences related to the order"
        },
        "keyEncryptionKey": {
          "$ref": "#/definitions/KeyEncryptionKeyUpdate",
          "description": "Key encryption key for the job."
        },
        "returnToCustomerPackageDetails": {
          "$ref": "#/definitions/PackageCarrierDetails",
          "description": "Return package details of job."
        }
      }
    },
    "UpdateJobProperties": {
      "type": "object",
      "description": "Job Properties for update",
      "properties": {
        "details": {
          "$ref": "#/definitions/UpdateJobDetails",
          "description": "Details of a job to be updated."
        }
      }
    },
    "UserAssignedProperties": {
      "type": "object",
      "description": "User assigned identity properties.",
      "properties": {
        "resourceId": {
          "type": "string",
          "description": "Arm resource id for user assigned identity to be used to fetch MSI token."
        }
      }
    },
    "ValidateAddress": {
      "type": "object",
      "description": "The requirements to validate customer address where the device needs to be shipped.",
      "properties": {
        "shippingAddress": {
          "$ref": "#/definitions/ShippingAddress",
          "description": "Shipping address of the customer."
        },
        "deviceType": {
          "$ref": "#/definitions/SkuName",
          "description": "Device type to be used for the job."
        },
        "transportPreferences": {
          "$ref": "#/definitions/TransportPreferences",
          "description": "Preferences related to the shipment logistics of the sku."
        }
      },
      "required": [
        "shippingAddress",
        "deviceType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ValidationInputRequest"
        }
      ],
      "x-ms-discriminator-value": "ValidateAddress"
    },
    "ValidationInputDiscriminator": {
      "type": "string",
      "enum": [
        "ValidateAddress",
        "ValidateSubscriptionIsAllowedToCreateJob",
        "ValidatePreferences",
        "ValidateCreateOrderLimit",
        "ValidateSkuAvailability",
        "ValidateDataTransferDetails"
      ],
      "x-ms-enum": {
        "name": "ValidationInputDiscriminator",
        "modelAsString": false,
        "values": [
          {
            "name": "ValidateAddress",
            "value": "ValidateAddress",
            "description": "Identify request and response of address validation."
          },
          {
            "name": "ValidateSubscriptionIsAllowedToCreateJob",
            "value": "ValidateSubscriptionIsAllowedToCreateJob",
            "description": "Identify request and response for validation of subscription permission to create job."
          },
          {
            "name": "ValidatePreferences",
            "value": "ValidatePreferences",
            "description": "Identify request and response of preference validation."
          },
          {
            "name": "ValidateCreateOrderLimit",
            "value": "ValidateCreateOrderLimit",
            "description": "Identify request and response of create order limit for subscription validation."
          },
          {
            "name": "ValidateSkuAvailability",
            "value": "ValidateSkuAvailability",
            "description": "Identify request and response of active job limit for sku availability."
          },
          {
            "name": "ValidateDataTransferDetails",
            "value": "ValidateDataTransferDetails",
            "description": "Identify request and response of data transfer details validation."
          }
        ]
      }
    },
    "ValidationInputRequest": {
      "type": "object",
      "description": "Minimum fields that must be present in any type of validation request.",
      "properties": {
        "validationType": {
          "type": "string",
          "description": "Discriminator property for ValidationInputRequest."
        }
      },
      "discriminator": "validationType",
      "required": [
        "validationType"
      ]
    },
    "ValidationInputResponse": {
      "type": "object",
      "description": "Minimum properties that should be present in each individual validation response.",
      "properties": {
        "validationType": {
          "type": "string",
          "description": "Discriminator property for ValidationInputResponse."
        },
        "error": {
          "$ref": "#/definitions/CloudError",
          "description": "Error code and message of validation response.",
          "readOnly": true
        }
      },
      "discriminator": "validationType",
      "required": [
        "validationType"
      ]
    },
    "ValidationRequest": {
      "type": "object",
      "description": "Minimum request requirement of any validation category.",
      "properties": {
        "validationCategory": {
          "type": "string",
          "description": "Discriminator property for ValidationRequest."
        },
        "individualRequestDetails": {
          "type": "array",
          "description": "List of request details contain validationType and its request as key and value respectively.",
          "items": {
            "$ref": "#/definitions/ValidationInputRequest"
          },
          "x-ms-identifiers": []
        }
      },
      "discriminator": "validationCategory",
      "required": [
        "validationCategory",
        "individualRequestDetails"
      ]
    },
    "ValidationResponse": {
      "type": "object",
      "description": "Response of pre job creation validations.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ValidationResponseProperties",
          "description": "Properties of pre job creation validation response.",
          "readOnly": true
        }
      }
    },
    "ValidationResponseProperties": {
      "type": "object",
      "description": "Properties of pre job creation validation response.",
      "properties": {
        "status": {
          "$ref": "#/definitions/OverallValidationStatus",
          "description": "Overall validation status.",
          "readOnly": true
        },
        "individualResponseDetails": {
          "type": "array",
          "description": "List of response details contain validationType and its response as key and value respectively.",
          "items": {
            "$ref": "#/definitions/ValidationInputResponse"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "ValidationStatus": {
      "type": "string",
      "enum": [
        "Valid",
        "Invalid",
        "Skipped"
      ],
      "x-ms-enum": {
        "name": "ValidationStatus",
        "modelAsString": false,
        "values": [
          {
            "name": "Valid",
            "value": "Valid",
            "description": "Validation is successful"
          },
          {
            "name": "Invalid",
            "value": "Invalid",
            "description": "Validation is not successful"
          },
          {
            "name": "Skipped",
            "value": "Skipped",
            "description": "Validation is skipped"
          }
        ]
      }
    },
    "Versions": {
      "type": "string",
      "description": "The available API versions.",
      "enum": [
        "2022-12-01"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v2022_12_01",
            "value": "2022-12-01"
          }
        ]
      }
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    }
  }
}
