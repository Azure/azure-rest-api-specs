{
  "swagger": "2.0",
  "info": {
    "title": "Azure AgFoodPlatform Data Plane Service",
    "description": "APIs documentation for Azure AgPlatform DataPlane Service.",
    "version": "2022-11-01-preview"
  },
  "paths": {
    "/application-data": {
      "get": {
        "tags": [
          "ApplicationData"
        ],
        "description": "Returns a paginated list of application data resources across all parties.",
        "operationId": "ApplicationData_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "minAvgMaterial",
            "description": "Minimum average amount of material applied during the application (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgMaterial",
            "description": "Maximum average amount of material applied during the application (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minTotalMaterial",
            "description": "Minimum total amount of material applied during the application (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTotalMaterial",
            "description": "Maximum total amount of material applied during the application (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "associatedBoundaryIds",
            "description": "Boundary IDs associated with operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minOperationStartDateTime",
            "description": "Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationStartDateTime",
            "description": "Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationEndDateTime",
            "description": "Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationEndDateTime",
            "description": "Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationModifiedDateTime",
            "description": "Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationModifiedDateTime",
            "description": "Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minArea",
            "description": "Minimum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxArea",
            "description": "Maximum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApplicationDataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ApplicationData_List": {
            "$ref": "./examples/ApplicationData_List.json"
          }
        }
      }
    },
    "/application-data/cascade-delete/{jobId}": {
      "put": {
        "tags": [
          "ApplicationData"
        ],
        "description": "Create cascade delete job for application data resource.",
        "operationId": "ApplicationData_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job Id supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "applicationDataId",
            "description": "Id of the application data.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "ApplicationData_CreateCascadeDeleteJob": {
            "$ref": "./examples/ApplicationData_CreateCascadeDeleteJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "ApplicationData"
        ],
        "description": "Get cascade delete job for application data resource.",
        "operationId": "ApplicationData_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ApplicationData_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/ApplicationData_GetCascadeDeleteJobDetails.json"
          }
        }
      }
    },
    "/parties/{partyId}/application-data": {
      "get": {
        "tags": [
          "ApplicationData"
        ],
        "description": "Returns a paginated list of application data resources under a particular party.",
        "operationId": "ApplicationData_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minAvgMaterial",
            "description": "Minimum average amount of material applied during the application (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgMaterial",
            "description": "Maximum average amount of material applied during the application (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minTotalMaterial",
            "description": "Minimum total amount of material applied during the application (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTotalMaterial",
            "description": "Maximum total amount of material applied during the application (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "associatedBoundaryIds",
            "description": "Boundary IDs associated with operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minOperationStartDateTime",
            "description": "Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationStartDateTime",
            "description": "Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationEndDateTime",
            "description": "Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationEndDateTime",
            "description": "Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationModifiedDateTime",
            "description": "Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationModifiedDateTime",
            "description": "Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minArea",
            "description": "Minimum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxArea",
            "description": "Maximum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApplicationDataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ApplicationData_ListByPartyId": {
            "$ref": "./examples/ApplicationData_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/application-data/{applicationDataId}": {
      "get": {
        "tags": [
          "ApplicationData"
        ],
        "description": "Get a specified application data resource under a particular party.",
        "operationId": "ApplicationData_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "applicationDataId",
            "description": "ID of the application data resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApplicationData"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ApplicationData_Get": {
            "$ref": "./examples/ApplicationData_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "ApplicationData"
        ],
        "description": "Creates or updates an application data resource under a particular party.",
        "operationId": "ApplicationData_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "applicationDataId",
            "description": "ID of the application data resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "applicationData",
            "description": "Application data resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApplicationData"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApplicationData"
            }
          }
        },
        "x-ms-examples": {
          "ApplicationData_CreateOrUpdate": {
            "$ref": "./examples/ApplicationData_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ApplicationData"
        ],
        "description": "Deletes a specified application data resource under a particular party.",
        "operationId": "ApplicationData_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "applicationDataId",
            "description": "ID of the application data.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ApplicationData_Delete": {
            "$ref": "./examples/ApplicationData_Delete.json"
          }
        }
      }
    },
    "/parties/{partyId}/attachments": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "description": "Returns a paginated list of attachment resources under a particular party.",
        "operationId": "Attachments_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resourceIds",
            "description": "Resource Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "resourceTypes",
            "description": "Resource Types of the resource.\r\ni.e. Party, Farm, Field, SeasonalField, Boundary, ApplicationData, HarvestData, TillageData, PlantingData, PlantTissueAnalysis.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttachmentListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Attachments_ListByPartyId": {
            "$ref": "./examples/Attachments_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "description": "Gets a specified attachment resource under a particular party.",
        "operationId": "Attachments_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "attachmentId",
            "description": "Id of the attachment.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Attachments_Get": {
            "$ref": "./examples/Attachments_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Attachments"
        ],
        "description": "Creates or updates an attachment resource under a particular party.",
        "operationId": "Attachments_CreateOrUpdate",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "attachmentId",
            "description": "Id of the attachment resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "format": "binary",
            "description": "File to be uploaded."
          },
          {
            "in": "formData",
            "name": "resourceId",
            "description": "Associated Resource id for this attachment.",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "resourceType",
            "description": "Associated Resource type for this attachment.",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "originalFileName",
            "description": "Original File Name for this attachment.",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "id",
            "description": "Unique id.",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "status",
            "description": "Status of the resource.",
            "type": "string",
            "maxLength": 100,
            "minLength": 0
          },
          {
            "in": "formData",
            "name": "createdDateTime",
            "description": "Date when resource was created.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "formData",
            "name": "modifiedDateTime",
            "description": "Date when resource was last modified.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "formData",
            "name": "source",
            "description": "Source of the resource.",
            "type": "string",
            "maxLength": 100,
            "minLength": 2
          },
          {
            "in": "formData",
            "name": "name",
            "description": "Name to identify resource.",
            "type": "string",
            "maxLength": 100,
            "minLength": 0
          },
          {
            "in": "formData",
            "name": "description",
            "description": "Textual description of resource.",
            "type": "string",
            "maxLength": 500,
            "minLength": 0
          },
          {
            "in": "formData",
            "name": "createdBy",
            "description": "Created by user/tenant id.",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "modifiedBy",
            "description": "Modified by user/tenant id.",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Attachments_CreateOrUpdate": {
            "$ref": "./examples/Attachments_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Attachments"
        ],
        "description": "Deletes a specified attachment resource under a particular party.",
        "operationId": "Attachments_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "attachmentId",
            "description": "Id of the attachment.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Attachments_Delete": {
            "$ref": "./examples/Attachments_Delete.json"
          }
        }
      }
    },
    "/parties/{partyId}/attachments/{attachmentId}/file": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "description": "Downloads and returns attachment as response for the given input filePath.",
        "operationId": "Attachments_Download",
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "attachmentId",
            "description": "Id of attachment to be downloaded.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary",
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Attachments_Download": {
            "$ref": "./examples/Attachments_Download.json"
          }
        }
      }
    },
    "/boundaries": {
      "get": {
        "tags": [
          "Boundaries"
        ],
        "description": "Returns a paginated list of boundary resources across all parties.",
        "operationId": "Boundaries_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "parentType",
            "description": "Type of the parent it belongs to.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Type it belongs to.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "parentIds",
            "description": "Parent Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minArea",
            "description": "Minimum area of the boundary (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxArea",
            "description": "Maximum acreage of the boundary (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BoundaryMetadataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Boundaries_List": {
            "$ref": "./examples/Boundaries_List.json"
          }
        }
      },
      "post": {
        "tags": [
          "Boundaries"
        ],
        "description": "Search for boundaries across all parties by fields and intersecting geometry.",
        "operationId": "Boundaries_Search",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchBoundaryQuery",
            "description": "Query filters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchBoundaryQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BoundaryMetadataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Boundaries_Search": {
            "$ref": "./examples/Boundaries_Search.json"
          }
        }
      }
    },
    "/boundaries/cascade-delete/{jobId}": {
      "put": {
        "tags": [
          "Boundaries"
        ],
        "description": "Create a cascade delete job for specified boundary.",
        "operationId": "Boundaries_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "boundaryId",
            "description": "ID of the boundary to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Boundaries_CreateCascadeDeleteJob": {
            "$ref": "./examples/Boundaries_CreateCascadeDeleteJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "Boundaries"
        ],
        "description": "Get cascade delete job for specified boundary.",
        "operationId": "Boundaries_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Boundaries_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/Boundaries_GetCascadeDeleteJobDetails.json"
          }
        }
      }
    },
    "/parties/{partyId}/boundaries": {
      "get": {
        "tags": [
          "Boundaries"
        ],
        "description": "Returns a paginated list of boundary resources under a particular party.",
        "operationId": "Boundaries_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "parentType",
            "description": "Type of the parent it belongs to.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Type it belongs to.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "parentIds",
            "description": "Parent Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minArea",
            "description": "Minimum area of the boundary (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxArea",
            "description": "Maximum acreage of the boundary (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BoundaryMetadataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Boundaries_ListByPartyId": {
            "$ref": "./examples/Boundaries_ListByPartyId.json"
          }
        }
      },
      "post": {
        "tags": [
          "Boundaries"
        ],
        "description": "Search for boundaries by fields and intersecting geometry.",
        "operationId": "Boundaries_SearchByPartyId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchBoundaryQuery",
            "description": "Query filters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchBoundaryQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BoundaryMetadataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Boundaries_SearchByPartyId": {
            "$ref": "./examples/Boundaries_SearchByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/boundaries/{boundaryId}": {
      "patch": {
        "tags": [
          "Boundaries"
        ],
        "description": "Creates or updates a boundary resource.",
        "operationId": "Boundaries_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "boundaryId",
            "description": "Id of the boundary resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "boundary",
            "description": "Boundary resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Boundary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Boundary"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Boundary"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Boundaries_CreateOrUpdate": {
            "$ref": "./examples/Boundaries_CreateOrUpdate.json"
          }
        }
      },
      "get": {
        "tags": [
          "Boundaries"
        ],
        "description": "Gets a specified boundary resource under a particular party.",
        "operationId": "Boundaries_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "boundaryId",
            "description": "Id of the boundary.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Boundary"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Boundaries_Get": {
            "$ref": "./examples/Boundaries_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Boundaries"
        ],
        "description": "Deletes a specified boundary resource under a particular party.",
        "operationId": "Boundaries_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "boundaryId",
            "description": "Id of the boundary.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Boundaries_Delete": {
            "$ref": "./examples/Boundaries_Delete.json"
          }
        }
      }
    },
    "/parties/{partyId}/boundaries/{boundaryId}/overlap": {
      "get": {
        "tags": [
          "Boundaries"
        ],
        "description": "Returns overlapping area between two boundary Ids.",
        "operationId": "Boundaries_GetOverlap",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "boundaryId",
            "description": "Id of the boundary.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "otherPartyId",
            "description": "PartyId of the other field.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "otherBoundaryId",
            "description": "Id of the other boundary.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BoundaryOverlapResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Boundaries_GetOverlap": {
            "$ref": "./examples/Boundaries_GetOverlap.json"
          }
        }
      }
    },
    "/crop-products": {
      "get": {
        "tags": [
          "CropProducts"
        ],
        "description": "Returns a paginated list of crop product resources.",
        "operationId": "CropProducts_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cropIds",
            "description": "CropIds of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "brands",
            "description": "Brands of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "products",
            "description": "Products of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "traits",
            "description": "Traits of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CropProductListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "CropProducts_List": {
            "$ref": "./examples/CropProducts_List.json"
          }
        }
      }
    },
    "/crop-products/{cropProductId}": {
      "get": {
        "tags": [
          "CropProducts"
        ],
        "description": "Gets a specified crop Product resource.",
        "operationId": "CropProducts_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cropProductId",
            "description": "Id of the crop Product.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CropProduct"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "CropProducts_Get": {
            "$ref": "./examples/CropProducts_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "CropProducts"
        ],
        "description": "Creates or updates a crop Product resource.",
        "operationId": "CropProducts_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cropProductId",
            "description": "Id of the crop Product resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "cropProduct",
            "description": "Crop Product resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CropProduct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CropProduct"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CropProduct"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "CropProducts_CreateOrUpdate": {
            "$ref": "./examples/CropProducts_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "CropProducts"
        ],
        "description": "Deletes a specified crop Product resource.",
        "operationId": "CropProducts_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cropProductId",
            "description": "Id of the crop Product.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "CropProducts_Delete": {
            "$ref": "./examples/CropProducts_Delete.json"
          }
        }
      }
    },
    "/crops": {
      "get": {
        "tags": [
          "Crops"
        ],
        "description": "Returns a paginated list of crop resources.",
        "operationId": "Crops_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "phenotypes",
            "description": "Crop phenotypes of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "breedingMethods",
            "description": "Breeding method of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CropListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Crops_List": {
            "$ref": "./examples/Crops_List.json"
          }
        }
      }
    },
    "/crops/{cropId}": {
      "get": {
        "tags": [
          "Crops"
        ],
        "description": "Gets a specified crop resource.",
        "operationId": "Crops_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cropId",
            "description": "Id of the crop.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Crop"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Crops_Get": {
            "$ref": "./examples/Crops_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Crops"
        ],
        "description": "Creates or updates a crop resource.",
        "operationId": "Crops_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cropId",
            "description": "Id of the crop resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "crop",
            "description": "Crop resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Crop"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Crop"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Crop"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Crops_CreateOrUpdate": {
            "$ref": "./examples/Crops_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Crops"
        ],
        "description": "Deletes Crop for given crop id.",
        "operationId": "Crops_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cropId",
            "description": "Id of crop to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Crops_Delete": {
            "$ref": "./examples/Crops_Delete.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/device-data-models": {
      "get": {
        "tags": [
          "DeviceDataModels"
        ],
        "description": "Returns a paginated list of device data model resources.",
        "operationId": "DeviceDataModels_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the associated sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceDataModelListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "DeviceDataModels_List": {
            "$ref": "./examples/DeviceDataModels_List.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/device-data-models/{deviceDataModelId}": {
      "patch": {
        "tags": [
          "DeviceDataModels"
        ],
        "description": "Create a device data model entity.",
        "operationId": "DeviceDataModels_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deviceDataModelId",
            "description": "Id of the device data model.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "deviceDataModelObject",
            "description": "Device data model object details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceDataModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DeviceDataModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceDataModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "DeviceDataModels_CreateOrUpdate": {
            "$ref": "./examples/DeviceDataModels_CreateOrUpdate.json"
          }
        }
      },
      "get": {
        "tags": [
          "DeviceDataModels"
        ],
        "description": "Gets a device data model entity.",
        "operationId": "DeviceDataModels_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deviceDataModelId",
            "description": "Id of the device data model resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceDataModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "DeviceDataModels_Get": {
            "$ref": "./examples/DeviceDataModels_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "DeviceDataModels"
        ],
        "description": "Deletes a device data model entity.",
        "operationId": "DeviceDataModels_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deviceDataModelId",
            "description": "Id of the device data model resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "DeviceDataModels_Delete": {
            "$ref": "./examples/DeviceDataModels_Delete.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "description": "Returns a paginated list of device resources.",
        "operationId": "Devices_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "parentDeviceIds",
            "description": "Id's of the parent devices.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "deviceDataModelIds",
            "description": "Id's of the device data models.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the associated sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Devices_List": {
            "$ref": "./examples/Devices_List.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/devices/{deviceId}": {
      "patch": {
        "tags": [
          "Devices"
        ],
        "description": "Create a device entity.",
        "operationId": "Devices_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deviceId",
            "description": "Id of the device resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "deviceDetails",
            "description": "Device object details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Devices_CreateOrUpdate": {
            "$ref": "./examples/Devices_CreateOrUpdate.json"
          }
        }
      },
      "get": {
        "tags": [
          "Devices"
        ],
        "description": "Gets a device entity.",
        "operationId": "Devices_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deviceId",
            "description": "Id of the device resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Devices_Get": {
            "$ref": "./examples/Devices_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "description": "Deletes a device entity.",
        "operationId": "Devices_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deviceId",
            "description": "Id of the device resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Devices_Delete": {
            "$ref": "./examples/Devices_Delete.json"
          }
        }
      }
    },
    "/farm-operations/ingest-data/{jobId}": {
      "put": {
        "tags": [
          "FarmOperations"
        ],
        "description": "Create a farm operation data ingestion job.",
        "operationId": "FarmOperations_CreateDataIngestionJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job Id supplied by user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "job",
            "description": "Job parameters supplied by user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FarmOperationDataIngestionJob"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/FarmOperationDataIngestionJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "FarmOperations_CreateDataIngestionJob": {
            "$ref": "./examples/FarmOperations_CreateDataIngestionJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "FarmOperations"
        ],
        "description": "Get a farm operation data ingestion job.",
        "operationId": "FarmOperations_GetDataIngestionJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FarmOperationDataIngestionJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "FarmOperations_GetDataIngestionJobDetails": {
            "$ref": "./examples/FarmOperations_GetDataIngestionJobDetails.json"
          }
        }
      }
    },
    "/farms": {
      "get": {
        "tags": [
          "Farms"
        ],
        "description": "Returns a paginated list of farm resources across all parties.",
        "operationId": "Farms_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FarmListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Farms_List": {
            "$ref": "./examples/Farms_List.json"
          }
        }
      }
    },
    "/farms/cascade-delete/{jobId}": {
      "put": {
        "tags": [
          "Farms"
        ],
        "description": "Create a cascade delete job for specified farm.",
        "operationId": "Farms_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "farmId",
            "description": "ID of the farm to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Farms_CreateCascadeDeleteJob": {
            "$ref": "./examples/Farms_CreateCascadeDeleteJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "Farms"
        ],
        "description": "Get a cascade delete job for specified farm.",
        "operationId": "Farms_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Farms_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/Farms_GetCascadeDeleteJobDetails.json"
          }
        }
      }
    },
    "/parties/{partyId}/farms": {
      "get": {
        "tags": [
          "Farms"
        ],
        "description": "Returns a paginated list of farm resources under a particular party.",
        "operationId": "Farms_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FarmListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Farms_ListByPartyId": {
            "$ref": "./examples/Farms_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/farms/{farmId}": {
      "get": {
        "tags": [
          "Farms"
        ],
        "description": "Gets a specified farm resource under a particular party.",
        "operationId": "Farms_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "farmId",
            "description": "ID of the farm resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Farm"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Farms_Get": {
            "$ref": "./examples/Farms_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Farms"
        ],
        "description": "Creates or updates a farm resource under a particular party.",
        "operationId": "Farms_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "farmId",
            "description": "Id of the farm resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "farm",
            "description": "Farm resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Farm"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Farm"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Farm"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Farms_CreateOrUpdate": {
            "$ref": "./examples/Farms_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Farms"
        ],
        "description": "Deletes a specified farm resource under a particular party.",
        "operationId": "Farms_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "farmId",
            "description": "Id of the farm.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Farms_Delete": {
            "$ref": "./examples/Farms_Delete.json"
          }
        }
      }
    },
    "/fields": {
      "get": {
        "tags": [
          "Fields"
        ],
        "description": "Returns a paginated list of field resources across all parties.",
        "operationId": "Fields_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "farmIds",
            "description": "Farm Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FieldListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Fields_List": {
            "$ref": "./examples/Fields_List.json"
          }
        }
      }
    },
    "/fields/cascade-delete/{jobId}": {
      "get": {
        "tags": [
          "Fields"
        ],
        "description": "Get a cascade delete job for specified field.",
        "operationId": "Fields_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Fields_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/Fields_GetCascadeDeleteJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "Fields"
        ],
        "description": "Create a cascade delete job for specified field.",
        "operationId": "Fields_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fieldId",
            "description": "ID of the field to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Fields_CreateCascadeDeleteJob": {
            "$ref": "./examples/Fields_CreateCascadeDeleteJob.json"
          }
        }
      }
    },
    "/parties/{partyId}/fields": {
      "get": {
        "tags": [
          "Fields"
        ],
        "description": "Returns a paginated list of field resources under a particular party.",
        "operationId": "Fields_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "farmIds",
            "description": "Farm Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FieldListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Fields_ListByPartyId": {
            "$ref": "./examples/Fields_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/fields/{fieldId}": {
      "get": {
        "tags": [
          "Fields"
        ],
        "description": "Gets a specified field resource under a particular party.",
        "operationId": "Fields_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fieldId",
            "description": "Id of the field.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Field"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Fields_Get": {
            "$ref": "./examples/Fields_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Fields"
        ],
        "description": "Creates or Updates a field resource under a particular party.",
        "operationId": "Fields_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fieldId",
            "description": "Id of the field resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "field",
            "description": "Field resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Field"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Field"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Field"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Fields_CreateOrUpdate": {
            "$ref": "./examples/Fields_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Fields"
        ],
        "description": "Deletes a specified field resource under a particular party.",
        "operationId": "Fields_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fieldId",
            "description": "Id of the field.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Fields_Delete": {
            "$ref": "./examples/Fields_Delete.json"
          }
        }
      }
    },
    "/harvest-data": {
      "get": {
        "tags": [
          "HarvestData"
        ],
        "description": "Returns a paginated list of harvest data resources across all parties.",
        "operationId": "HarvestData_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "minTotalYield",
            "description": "Minimum Yield value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTotalYield",
            "description": "Maximum Yield value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minAvgYield",
            "description": "Minimum AvgYield value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgYield",
            "description": "Maximum AvgYield value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minTotalWetMass",
            "description": "Minimum Total WetMass value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTotalWetMass",
            "description": "Maximum Total WetMass value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minAvgWetMass",
            "description": "Minimum AvgWetMass value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgWetMass",
            "description": "Maximum AvgWetMass value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minAvgMoisture",
            "description": "Minimum AvgMoisture value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgMoisture",
            "description": "Maximum AvgMoisture value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minAvgSpeed",
            "description": "Minimum AvgSpeed value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgSpeed",
            "description": "Maximum AvgSpeed value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "associatedBoundaryIds",
            "description": "Boundary IDs associated with operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minOperationStartDateTime",
            "description": "Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationStartDateTime",
            "description": "Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationEndDateTime",
            "description": "Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationEndDateTime",
            "description": "Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationModifiedDateTime",
            "description": "Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationModifiedDateTime",
            "description": "Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minArea",
            "description": "Minimum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxArea",
            "description": "Maximum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HarvestDataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "HarvestData_List": {
            "$ref": "./examples/HarvestData_List.json"
          }
        }
      }
    },
    "/harvest-data/cascade-delete/{jobId}": {
      "put": {
        "tags": [
          "HarvestData"
        ],
        "description": "Create cascade delete job for harvest data resource.",
        "operationId": "HarvestData_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job Id supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "harvestDataId",
            "description": "Id of the harvest data.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "HarvestData_CreateCascadeDeleteJob": {
            "$ref": "./examples/HarvestData_CreateCascadeDeleteJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "HarvestData"
        ],
        "description": "Get cascade delete job for harvest data resource.",
        "operationId": "HarvestData_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "HarvestData_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/HarvestData_GetCascadeDeleteJobDetails.json"
          }
        }
      }
    },
    "/parties/{partyId}/harvest-data": {
      "get": {
        "tags": [
          "HarvestData"
        ],
        "description": "Returns a paginated list of harvest data resources under a particular farm.",
        "operationId": "HarvestData_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minTotalYield",
            "description": "Minimum Yield value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTotalYield",
            "description": "Maximum Yield value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minAvgYield",
            "description": "Minimum AvgYield value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgYield",
            "description": "Maximum AvgYield value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minTotalWetMass",
            "description": "Minimum Total WetMass value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTotalWetMass",
            "description": "Maximum Total WetMass value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minAvgWetMass",
            "description": "Minimum AvgWetMass value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgWetMass",
            "description": "Maximum AvgWetMass value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minAvgMoisture",
            "description": "Minimum AvgMoisture value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgMoisture",
            "description": "Maximum AvgMoisture value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minAvgSpeed",
            "description": "Minimum AvgSpeed value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgSpeed",
            "description": "Maximum AvgSpeed value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "associatedBoundaryIds",
            "description": "Boundary IDs associated with operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minOperationStartDateTime",
            "description": "Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationStartDateTime",
            "description": "Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationEndDateTime",
            "description": "Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationEndDateTime",
            "description": "Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationModifiedDateTime",
            "description": "Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationModifiedDateTime",
            "description": "Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minArea",
            "description": "Minimum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxArea",
            "description": "Maximum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HarvestDataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "HarvestData_ListByPartyId": {
            "$ref": "./examples/HarvestData_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/harvest-data/{harvestDataId}": {
      "get": {
        "tags": [
          "HarvestData"
        ],
        "description": "Get a specified harvest data resource under a particular party.",
        "operationId": "HarvestData_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "harvestDataId",
            "description": "ID of the harvest data resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HarvestData"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "HarvestData_Get": {
            "$ref": "./examples/HarvestData_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "HarvestData"
        ],
        "description": "Creates or updates harvest data resource under a particular party.",
        "operationId": "HarvestData_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "harvestDataId",
            "description": "ID of the harvest data resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "harvestData",
            "description": "Harvest data resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HarvestData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HarvestData"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/HarvestData"
            }
          }
        },
        "x-ms-examples": {
          "HarvestData_CreateOrUpdate": {
            "$ref": "./examples/HarvestData_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "HarvestData"
        ],
        "description": "Deletes a specified harvest data resource under a particular party.",
        "operationId": "HarvestData_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "harvestDataId",
            "description": "ID of the harvest data.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "HarvestData_Delete": {
            "$ref": "./examples/HarvestData_Delete.json"
          }
        }
      }
    },
    "/image-processing/rasterize/{jobId}": {
      "put": {
        "tags": [
          "ImageProcessing"
        ],
        "description": "Create a ImageProcessing Rasterize job.",
        "operationId": "ImageProcessing_CreateRasterizeJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "JobId provided by user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "job",
            "description": "Job parameters supplied by user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageProcessingRasterizeJob"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/ImageProcessingRasterizeJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "ImageProcessing_CreateRasterizeJob": {
            "$ref": "./examples/ImageProcessing_CreateRasterizeJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "ImageProcessing"
        ],
        "description": "Get ImageProcessing Rasterize job's details.",
        "operationId": "ImageProcessing_GetRasterizeJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ImageProcessingRasterizeJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ImageProcessing_GetRasterizeJob": {
            "$ref": "./examples/ImageProcessing_GetRasterizeJob.json"
          }
        }
      }
    },
    "/parties/{partyId}/models/{modelId}/resource-types/{resourceType}/resources/{resourceId}/insight-attachments": {
      "get": {
        "tags": [
          "InsightAttachments"
        ],
        "description": "Returns a paginated list of insight resources.",
        "operationId": "InsightAttachments_ListByPartyIdModelIdAndResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "modelId",
            "description": "Id of the associated model.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceType",
            "description": "Resource type associated with the record.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "Id of the associated resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "insightIds",
            "description": "List of insight IDs.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InsightAttachmentListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "InsightAttachments_ListByPartyIdModelIdAndResource": {
            "$ref": "./examples/InsightAttachments_ListByPartyIdModelIdAndResource.json"
          }
        }
      }
    },
    "/parties/{partyId}/models/{modelId}/resource-types/{resourceType}/resources/{resourceId}/insight-attachments/{insightAttachmentId}": {
      "patch": {
        "tags": [
          "InsightAttachments"
        ],
        "description": "Creates or updates insight entity.",
        "operationId": "InsightAttachments_CreateOrUpdate",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "modelId",
            "description": "Id of the associated model.\r\nIt can be either 'BiomassModelId', 'SensorPlacementModelId', 'SoilMoistureModelId' or any solution id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceType",
            "description": "Resource type associated with the record.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "Id of the associated resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "insightAttachmentId",
            "description": "Id of the insight resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "format": "binary",
            "description": "File to be uploaded."
          },
          {
            "in": "formData",
            "name": "insightId",
            "description": "InsightID for this InsightAttachment.",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "originalFileName",
            "description": "Original File Name for this attachment.",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "id",
            "description": "Unique id.",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "status",
            "description": "Status of the resource.",
            "type": "string",
            "maxLength": 100,
            "minLength": 0
          },
          {
            "in": "formData",
            "name": "createdDateTime",
            "description": "Date when resource was created.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "formData",
            "name": "modifiedDateTime",
            "description": "Date when resource was last modified.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "formData",
            "name": "source",
            "description": "Source of the resource.",
            "type": "string",
            "maxLength": 100,
            "minLength": 2
          },
          {
            "in": "formData",
            "name": "name",
            "description": "Name to identify resource.",
            "type": "string",
            "maxLength": 100,
            "minLength": 0
          },
          {
            "in": "formData",
            "name": "description",
            "description": "Textual description of resource.",
            "type": "string",
            "maxLength": 500,
            "minLength": 0
          },
          {
            "in": "formData",
            "name": "createdBy",
            "description": "Created by user/tenant id.",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "modifiedBy",
            "description": "Modified by user/tenant id.",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/InsightAttachment"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InsightAttachment"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "InsightAttachments_CreateOrUpdate": {
            "$ref": "./examples/InsightAttachments_CreateOrUpdate.json"
          }
        }
      },
      "get": {
        "tags": [
          "InsightAttachments"
        ],
        "description": "Gets a specified insight resource under a particular party.",
        "operationId": "InsightAttachments_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "modelId",
            "description": "Id of the associated model.\r\nIt can be either 'BiomassModelId', 'SensorPlacementModelId', 'SoilMoistureModelId' or any solution id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceType",
            "description": "Resource type associated with the record.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "Id of the associated resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "insightAttachmentId",
            "description": "Id of the insight attachment resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InsightAttachment"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "InsightAttachments_Get": {
            "$ref": "./examples/InsightAttachments_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "InsightAttachments"
        ],
        "description": "Deletes a specified insight resource.",
        "operationId": "InsightAttachments_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "modelId",
            "description": "Id of the associated model.\r\nIt can be either 'BiomassModelId', 'SensorPlacementModelId', 'SoilMoistureModelId' or any solution id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceType",
            "description": "Resource type associated with the record.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "Id of the associated resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "insightAttachmentId",
            "description": "Id of the insight attachment resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "InsightAttachments_Delete": {
            "$ref": "./examples/InsightAttachments_Delete.json"
          }
        }
      }
    },
    "/parties/{partyId}/models/{modelId}/resource-types/{resourceType}/resources/{resourceId}/insight-attachments/{insightAttachmentId}/file": {
      "get": {
        "tags": [
          "InsightAttachments"
        ],
        "description": "Downloads and returns insight-attachment as response for the given input filePath.",
        "operationId": "InsightAttachments_Download",
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "modelId",
            "description": "Id of the associated model.\r\nIt can be either 'BiomassModelId', 'SensorPlacementModelId', 'SoilMoistureModelId' or any solution id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceType",
            "description": "Resource type associated with the record.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "Id of the associated resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "insightAttachmentId",
            "description": "Id of the insight attachment resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary",
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "InsightAttachments_Download": {
            "$ref": "./examples/InsightAttachments_Download.json"
          }
        }
      }
    },
    "/insights/cascade-delete/{jobId}": {
      "put": {
        "tags": [
          "Insights"
        ],
        "description": "Create a cascade delete job for insights specified partyId/modelId/resourceType/resourceId.",
        "operationId": "Insights_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "modelId",
            "description": "Id of the associated model.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resourceType",
            "description": "Resource Type.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resourceId",
            "description": "Id of the associated resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "insightId",
            "description": "Insight id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Insights_CreateCascadeDeleteJob": {
            "$ref": "./examples/Insights_CreateCascadeDeleteJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "Insights"
        ],
        "description": "Get a cascade delete job for specified insight.",
        "operationId": "Insights_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Insights_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/Insights_GetCascadeDeleteJobDetails.json"
          }
        }
      }
    },
    "/parties/{partyId}/models/{modelId}/resource-types/{resourceType}/resources/{resourceId}/insights": {
      "get": {
        "tags": [
          "Insights"
        ],
        "description": "Returns a paginated list of insight resources.",
        "operationId": "Insights_ListByPartyIdModelIdAndResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "modelId",
            "description": "Id of the associated model.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceType",
            "description": "Resource type associated with the record.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "Id of the associated resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minInsightStartDateTime",
            "description": "Minimum insightStartDateTime time of insight resources (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxInsightStartDateTime",
            "description": "Maximum insightStartDateTime time of insight resources (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minInsightEndDateTime",
            "description": "Minimum insightEndDateTime time of insight resources (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxInsightEndDateTime",
            "description": "Maximum insightEndDateTime time of insight resources (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "measurementFilters",
            "description": "Filters on measureKey.unit/unitValue or measureKey.value/value pairs within the Measures object.\r\neg. \"measureKey.unit eq {testValue}\" where testValue is string.\r\neg. \"measureKey.value eq {testValue}\" where testValue = double.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InsightListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Insights_ListByPartyIdModelIdAndResource": {
            "$ref": "./examples/Insights_ListByPartyIdModelIdAndResource.json"
          }
        }
      }
    },
    "/parties/{partyId}/models/{modelId}/resource-types/{resourceType}/resources/{resourceId}/insights/{insightId}": {
      "patch": {
        "tags": [
          "Insights"
        ],
        "description": "Creates or updates insight entity.",
        "operationId": "Insights_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "modelId",
            "description": "Id of the associated model.\r\nIt can be either 'BiomassModelId', 'SensorPlacementModelId', 'SoilMoistureModelId' or any solution id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceType",
            "description": "Resource type associated with the record.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "Id of the associated resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "insightId",
            "description": "Id of the insight resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "insightData",
            "description": "Insight data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Insight"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Insight"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Insight"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Insights_CreateOrUpdate": {
            "$ref": "./examples/Insights_CreateOrUpdate.json"
          }
        }
      },
      "get": {
        "tags": [
          "Insights"
        ],
        "description": "Gets a specified insight resource under a particular party.",
        "operationId": "Insights_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "modelId",
            "description": "Id of the associated model.\r\nIt can be either 'BiomassModelId', 'SensorPlacementModelId', 'SoilMoistureModelId' or any solution id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceType",
            "description": "Resource type associated with the record.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "Id of the associated resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "insightId",
            "description": "Id of the insight resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Insight"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Insights_Get": {
            "$ref": "./examples/Insights_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Insights"
        ],
        "description": "Deletes a specified insight resource.",
        "operationId": "Insights_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "modelId",
            "description": "Id of the associated model.\r\nIt can be either 'BiomassModelId', 'SensorPlacementModelId', 'SoilMoistureModelId' or any solution id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceType",
            "description": "Resource type associated with the record.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "Id of the associated resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "insightId",
            "description": "Id of the insight resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Insights_Delete": {
            "$ref": "./examples/Insights_Delete.json"
          }
        }
      }
    },
    "/management-zones": {
      "get": {
        "tags": [
          "ManagementZones"
        ],
        "description": "Returns a paginated list of management zone resources across all parties.",
        "operationId": "ManagementZones_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "types",
            "description": "Types of the ManagementZone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropIds",
            "description": "CropIds of the ManagementZone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "seasonIds",
            "description": "SeasonIds of the ManagementZone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "fieldIds",
            "description": "FieldIds of the ManagementZone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the ManagementZone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ManagementZoneListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ManagementZones_List": {
            "$ref": "./examples/ManagementZones_List.json"
          }
        }
      }
    },
    "/management-zones/cascade-delete/{jobId}": {
      "get": {
        "tags": [
          "ManagementZones"
        ],
        "description": "Get a cascade delete job for specified job id.",
        "operationId": "ManagementZones_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ManagementZones_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/ManagementZones_GetCascadeDeleteJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "ManagementZones"
        ],
        "description": "Create a cascade delete job for specified management zone.",
        "operationId": "ManagementZones_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "managementZoneId",
            "description": "ID of the management zone to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "ManagementZones_CreateCascadeDeleteJob": {
            "$ref": "./examples/ManagementZones_CreateCascadeDeleteJob.json"
          }
        }
      }
    },
    "/parties/{partyId}/management-zones": {
      "get": {
        "tags": [
          "ManagementZones"
        ],
        "description": "Returns a paginated list of management zone resources under a particular party.",
        "operationId": "ManagementZones_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "types",
            "description": "Types of the ManagementZone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropIds",
            "description": "CropIds of the ManagementZone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "seasonIds",
            "description": "SeasonIds of the ManagementZone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "fieldIds",
            "description": "FieldIds of the ManagementZone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the ManagementZone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ManagementZoneListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ManagementZones_ListByPartyId": {
            "$ref": "./examples/ManagementZones_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/management-zones/{managementZoneId}": {
      "get": {
        "tags": [
          "ManagementZones"
        ],
        "description": "Gets a specified management zone resource under a particular party.",
        "operationId": "ManagementZones_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "managementZoneId",
            "description": "Id of the management zone.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ManagementZone"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ManagementZones_Get": {
            "$ref": "./examples/ManagementZones_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "ManagementZones"
        ],
        "description": "Creates or updates a management zone resource.",
        "operationId": "ManagementZones_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "managementZoneId",
            "description": "Id of the management zone resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "managementZone",
            "description": "ManagementZone resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManagementZone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ManagementZone"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ManagementZone"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ManagementZones_CreateOrUpdate": {
            "$ref": "./examples/ManagementZones_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ManagementZones"
        ],
        "description": "Deletes a specified management zone resource under a particular party.",
        "operationId": "ManagementZones_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "managementZoneId",
            "description": "Id of the management zone.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ManagementZones_Delete": {
            "$ref": "./examples/ManagementZones_Delete.json"
          }
        }
      }
    },
    "/model-inference/models/microsoft-biomass/infer-data/{jobId}": {
      "put": {
        "tags": [
          "ModelInference"
        ],
        "description": "Create a Biomass Model job.",
        "operationId": "ModelInference_CreateBiomassModelJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "JobId provided by user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "job",
            "description": "Job parameters supplied by user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BiomassModelJob"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/BiomassModelJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "ModelInference_CreateBiomassModelJob": {
            "$ref": "./examples/ModelInference_CreateBiomassModelJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "ModelInference"
        ],
        "description": "Get Biomass Model job's details.",
        "operationId": "ModelInference_GetBiomassModelJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BiomassModelJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ModelInference_GetBiomassModelJob": {
            "$ref": "./examples/ModelInference_GetBiomassModelJob.json"
          }
        }
      }
    },
    "/model-inference/models/microsoft-sensor-placement/infer-data/{jobId}": {
      "put": {
        "tags": [
          "ModelInference"
        ],
        "description": "Create a Sensor Placement Model job.",
        "operationId": "ModelInference_CreateSensorPlacementModelJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "JobId provided by user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "job",
            "description": "Job parameters supplied by user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SensorPlacementModelJob"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/SensorPlacementModelJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "ModelInference_CreateSensorPlacementModelJob": {
            "$ref": "./examples/ModelInference_CreateSensorPlacementModelJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "ModelInference"
        ],
        "description": "Get Sensor Placement Model job's details.",
        "operationId": "ModelInference_GetSensorPlacementModelJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorPlacementModelJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ModelInference_GetSensorPlacementModelJob": {
            "$ref": "./examples/ModelInference_GetSensorPlacementModelJob.json"
          }
        }
      }
    },
    "/model-inference/models/microsoft-soil-moisture/infer-data/{jobId}": {
      "put": {
        "tags": [
          "ModelInference"
        ],
        "description": "Create a SoilMoisture Model job.",
        "operationId": "ModelInference_CreateSoilMoistureModelJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "JobId provided by user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "job",
            "description": "Job parameters supplied by user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SoilMoistureModelJob"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/SoilMoistureModelJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "ModelInference_CreateSoilMoistureModelJob": {
            "$ref": "./examples/ModelInference_CreateSoilMoistureModelJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "ModelInference"
        ],
        "description": "Get SoilMoisture Model job's details.",
        "operationId": "ModelInference_GetSoilMoistureModelJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SoilMoistureModelJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "ModelInference_GetSoilMoistureModelJob": {
            "$ref": "./examples/ModelInference_GetSoilMoistureModelJob.json"
          }
        }
      }
    },
    "/nutrient-analyses": {
      "get": {
        "tags": [
          "NutrientAnalyses"
        ],
        "description": "Returns a paginated list of nutrient analysis resources across all parties.",
        "operationId": "NutrientAnalyses_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "parentType",
            "description": "Type of the parent it belongs to.\r\ni.e. PlantTissueAnalysis.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "parentIds",
            "description": "Parent ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "classifications",
            "description": "Classifications for nutrient analyses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NutrientAnalysisListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "NutrientAnalyses_List": {
            "$ref": "./examples/NutrientAnalyses_List.json"
          }
        }
      }
    },
    "/parties/{partyId}/nutrient-analyses": {
      "get": {
        "tags": [
          "NutrientAnalyses"
        ],
        "description": "Returns a paginated list of nutrient analysis resources under a particular party.",
        "operationId": "NutrientAnalyses_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "parentType",
            "description": "Type of the parent it belongs to.\r\ni.e. PlantTissueAnalysis.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "parentIds",
            "description": "Parent ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "classifications",
            "description": "Classifications for nutrient analyses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NutrientAnalysisListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "NutrientAnalyses_ListByPartyId": {
            "$ref": "./examples/NutrientAnalyses_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/nutrient-analyses/{nutrientAnalysisId}": {
      "get": {
        "tags": [
          "NutrientAnalyses"
        ],
        "description": "Gets a specified nutrient analysis resource under a particular party.",
        "operationId": "NutrientAnalyses_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "nutrientAnalysisId",
            "description": "Id of the nutrient analysis.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NutrientAnalysis"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "NutrientAnalyses_Get": {
            "$ref": "./examples/NutrientAnalyses_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "NutrientAnalyses"
        ],
        "description": "Creates or updates a nutrient analysis resource.",
        "operationId": "NutrientAnalyses_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "nutrientAnalysisId",
            "description": "Id of the nutrient analysis resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "nutrientAnalysis",
            "description": "NutrientAnalysis resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NutrientAnalysis"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NutrientAnalysis"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NutrientAnalysis"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "NutrientAnalyses_CreateOrUpdate": {
            "$ref": "./examples/NutrientAnalyses_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "NutrientAnalyses"
        ],
        "description": "Deletes a specified nutrient analysis resource under a particular party.",
        "operationId": "NutrientAnalyses_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "nutrientAnalysisId",
            "description": "Id of the nutrient analysis.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "NutrientAnalyses_Delete": {
            "$ref": "./examples/NutrientAnalyses_Delete.json"
          }
        }
      }
    },
    "/oauth/providers": {
      "get": {
        "tags": [
          "OAuthProviders"
        ],
        "description": "Returns a paginated list of oauthProvider resources.",
        "operationId": "OAuthProviders_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OAuthProviderListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "OAuthProviders_List": {
            "$ref": "./examples/OAuthProviders_List.json"
          }
        }
      }
    },
    "/oauth/providers/{oauthProviderId}": {
      "get": {
        "tags": [
          "OAuthProviders"
        ],
        "description": "Get a specified oauthProvider resource.",
        "operationId": "OAuthProviders_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "oauthProviderId",
            "description": "ID of the oauthProvider resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OAuthProvider"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "OAuthProviders_Get": {
            "$ref": "./examples/OAuthProviders_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "OAuthProviders"
        ],
        "description": "Creates or updates an oauthProvider resource.",
        "operationId": "OAuthProviders_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "oauthProviderId",
            "description": "ID of oauthProvider resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "oauthProvider",
            "description": "OauthProvider resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuthProvider"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OAuthProvider"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OAuthProvider"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "OAuthProviders_CreateOrUpdate": {
            "$ref": "./examples/OAuthProviders_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "OAuthProviders"
        ],
        "description": "Deletes an specified oauthProvider resource.",
        "operationId": "OAuthProviders_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "oauthProviderId",
            "description": "ID of oauthProvider.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "OAuthProviders_Delete": {
            "$ref": "./examples/OAuthProviders_Delete.json"
          }
        }
      }
    },
    "/oauth/providers/cascade-delete/{jobId}": {
      "get": {
        "tags": [
          "OAuthProviders"
        ],
        "description": "Get cascade delete job for oauthProvider resource.",
        "operationId": "OAuthProviders_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OAuthProviderCascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "OAuthProviders_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/OAuthProviders_GetCascadeDeleteJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "OAuthProviders"
        ],
        "description": "Create cascade delete job for oauthProvider resource.",
        "operationId": "OAuthProviders_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job Id supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "oauthProviderId",
            "description": "Id of the application data.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/OAuthProviderCascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "OAuthProviders_CreateCascadeDeleteJob": {
            "$ref": "./examples/OAuthProviders_CreateCascadeDeleteJob.json"
          }
        }
      }
    },
    "/oauth/tokens": {
      "get": {
        "tags": [
          "OAuthTokens"
        ],
        "description": "Returns a list of OAuthToken documents.",
        "operationId": "OAuthTokens_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "authProviderIds",
            "description": "Name of AuthProvider.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "partyIds",
            "description": "List of parties.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "isValid",
            "description": "If the token object is valid.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OAuthTokenListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "OAuthTokens_List": {
            "$ref": "./examples/OAuthTokens_List.json"
          }
        }
      }
    },
    "/oauth/tokens/:connect": {
      "post": {
        "tags": [
          "OAuthTokens"
        ],
        "description": "Returns Connection link needed in the OAuth flow.",
        "operationId": "OAuthTokens_GetOAuthConnectionLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "oauthConnectRequest",
            "description": "OAuth Connect Request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuthConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "OAuthTokens_GetOAuthConnectionLink": {
            "$ref": "./examples/OAuthTokens_GetOAuthConnectionLink.json"
          }
        }
      }
    },
    "/oauth/tokens/remove/{jobId}": {
      "get": {
        "tags": [
          "OAuthTokens"
        ],
        "description": "Get remove job for OAuth token.",
        "operationId": "OAuthTokens_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "OAuthTokens_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/OAuthTokens_GetCascadeDeleteJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "OAuthTokens"
        ],
        "description": "Create remove job for OAuth token.",
        "operationId": "OAuthTokens_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job Id supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "oauthProviderId",
            "description": "Id of the OAuthProvider.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "OAuthTokens_CreateCascadeDeleteJob": {
            "$ref": "./examples/OAuthTokens_CreateCascadeDeleteJob.json"
          }
        }
      }
    },
    "/parties": {
      "get": {
        "tags": [
          "Parties"
        ],
        "description": "Returns a paginated list of party resources.",
        "operationId": "Parties_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PartyListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Parties_List": {
            "$ref": "./examples/Parties_List.json"
          }
        }
      }
    },
    "/parties/{partyId}": {
      "get": {
        "tags": [
          "Parties"
        ],
        "description": "Gets a specified party resource.",
        "operationId": "Parties_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Party"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Parties_Get": {
            "$ref": "./examples/Parties_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Parties"
        ],
        "description": "Creates or updates a party resource.",
        "operationId": "Parties_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "party",
            "description": "Party resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Party"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Party"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Party"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Parties_CreateOrUpdate": {
            "$ref": "./examples/Parties_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Parties"
        ],
        "description": "Deletes a specified party resource.",
        "operationId": "Parties_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of party to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Parties_Delete": {
            "$ref": "./examples/Parties_Delete.json"
          }
        }
      }
    },
    "/parties/cascade-delete/{jobId}": {
      "get": {
        "tags": [
          "Parties"
        ],
        "description": "Get a cascade delete job for specified party.",
        "operationId": "Parties_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Parties_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/Parties_GetCascadeDeleteJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "Parties"
        ],
        "description": "Create a cascade delete job for specified party.",
        "operationId": "Parties_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the party to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Parties_CreateCascadeDeleteJob": {
            "$ref": "./examples/Parties_CreateCascadeDeleteJob.json"
          }
        }
      }
    },
    "/parties/{partyId}/planting-data": {
      "get": {
        "tags": [
          "PlantingData"
        ],
        "description": "Returns a paginated list of planting data resources under a particular party.",
        "operationId": "PlantingData_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minAvgPlantingRate",
            "description": "Minimum AvgPlantingRate value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgPlantingRate",
            "description": "Maximum AvgPlantingRate value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minTotalMaterial",
            "description": "Minimum TotalMaterial value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTotalMaterial",
            "description": "Maximum TotalMaterial value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minAvgMaterial",
            "description": "Minimum AvgMaterial value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgMaterial",
            "description": "Maximum AvgMaterial value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "associatedBoundaryIds",
            "description": "Boundary IDs associated with operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minOperationStartDateTime",
            "description": "Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationStartDateTime",
            "description": "Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationEndDateTime",
            "description": "Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationEndDateTime",
            "description": "Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationModifiedDateTime",
            "description": "Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationModifiedDateTime",
            "description": "Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minArea",
            "description": "Minimum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxArea",
            "description": "Maximum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PlantingDataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "PlantingData_ListByPartyId": {
            "$ref": "./examples/PlantingData_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/planting-data/{plantingDataId}": {
      "get": {
        "tags": [
          "PlantingData"
        ],
        "description": "Get a specified planting data resource under a particular party.",
        "operationId": "PlantingData_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "plantingDataId",
            "description": "ID of the planting data resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PlantingData"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PlantingData_Get": {
            "$ref": "./examples/PlantingData_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "PlantingData"
        ],
        "description": "Creates or updates an planting data resource under a particular party.",
        "operationId": "PlantingData_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "plantingDataId",
            "description": "ID of the planting data resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "plantingData",
            "description": "Planting data resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlantingData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PlantingData"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PlantingData"
            }
          }
        },
        "x-ms-examples": {
          "PlantingData_CreateOrUpdate": {
            "$ref": "./examples/PlantingData_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "PlantingData"
        ],
        "description": "Deletes a specified planting data resource under a particular party.",
        "operationId": "PlantingData_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "plantingDataId",
            "description": "ID of the planting data.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PlantingData_Delete": {
            "$ref": "./examples/PlantingData_Delete.json"
          }
        }
      }
    },
    "/planting-data": {
      "get": {
        "tags": [
          "PlantingData"
        ],
        "description": "Returns a paginated list of planting data resources across all parties.",
        "operationId": "PlantingData_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "minAvgPlantingRate",
            "description": "Minimum AvgPlantingRate value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgPlantingRate",
            "description": "Maximum AvgPlantingRate value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minTotalMaterial",
            "description": "Minimum TotalMaterial value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTotalMaterial",
            "description": "Maximum TotalMaterial value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minAvgMaterial",
            "description": "Minimum AvgMaterial value(inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxAvgMaterial",
            "description": "Maximum AvgMaterial value (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "associatedBoundaryIds",
            "description": "Boundary IDs associated with operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minOperationStartDateTime",
            "description": "Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationStartDateTime",
            "description": "Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationEndDateTime",
            "description": "Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationEndDateTime",
            "description": "Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationModifiedDateTime",
            "description": "Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationModifiedDateTime",
            "description": "Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minArea",
            "description": "Minimum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxArea",
            "description": "Maximum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PlantingDataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "PlantingData_List": {
            "$ref": "./examples/PlantingData_List.json"
          }
        }
      }
    },
    "/planting-data/cascade-delete/{jobId}": {
      "put": {
        "tags": [
          "PlantingData"
        ],
        "description": "Create cascade delete job for planting data resource.",
        "operationId": "PlantingData_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job Id supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "plantingDataId",
            "description": "Id of the planting data.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "PlantingData_CreateCascadeDeleteJob": {
            "$ref": "./examples/PlantingData_CreateCascadeDeleteJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "PlantingData"
        ],
        "description": "Get cascade delete job for planting data resource.",
        "operationId": "PlantingData_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PlantingData_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/PlantingData_GetCascadeDeleteJobDetails.json"
          }
        }
      }
    },
    "/parties/{partyId}/plant-tissue-analyses": {
      "get": {
        "tags": [
          "PlantTissueAnalyses"
        ],
        "description": "Returns a paginated list of plant tissue analysis resources under a particular party.",
        "operationId": "PlantTissueAnalyses_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "seasonIds",
            "description": "Season ids of the plant tissue analyses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropIds",
            "description": "Crop ids of the plant tissue analyses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropProductsIds",
            "description": "Crop products ids of the plant tissue analyses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "fieldIds",
            "description": "Field ids of the plant tissue analyses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PlantTissueAnalysisListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "PlantTissueAnalyses_ListByPartyId": {
            "$ref": "./examples/PlantTissueAnalyses_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/plant-tissue-analyses/{plantTissueAnalysisId}": {
      "get": {
        "tags": [
          "PlantTissueAnalyses"
        ],
        "description": "Gets a specified plant tissue analysis resource under a particular party.",
        "operationId": "PlantTissueAnalyses_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "plantTissueAnalysisId",
            "description": "Id of the plant tissue analysis.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PlantTissueAnalysis"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PlantTissueAnalyses_Get": {
            "$ref": "./examples/PlantTissueAnalyses_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "PlantTissueAnalyses"
        ],
        "description": "Creates or updates a plant tissue analysis resource.",
        "operationId": "PlantTissueAnalyses_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "plantTissueAnalysisId",
            "description": "Id of the plant tissue analysis resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "plantTissueAnalysis",
            "description": "PlantTissueAnalysis resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlantTissueAnalysis"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PlantTissueAnalysis"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PlantTissueAnalysis"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PlantTissueAnalyses_CreateOrUpdate": {
            "$ref": "./examples/PlantTissueAnalyses_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "PlantTissueAnalyses"
        ],
        "description": "Deletes a specified plant tissue analysis resource under a particular party.",
        "operationId": "PlantTissueAnalyses_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "plantTissueAnalysisId",
            "description": "Id of the plant tissue analysis.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PlantTissueAnalyses_Delete": {
            "$ref": "./examples/PlantTissueAnalyses_Delete.json"
          }
        }
      }
    },
    "/plant-tissue-analyses": {
      "get": {
        "tags": [
          "PlantTissueAnalyses"
        ],
        "description": "Returns a paginated list of plant tissue analysis resources across all parties.",
        "operationId": "PlantTissueAnalyses_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "seasonIds",
            "description": "Season ids of the plant tissue analyses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropIds",
            "description": "Crop ids of the plant tissue analyses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropProductsIds",
            "description": "Crop products ids of the plant tissue analyses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "fieldIds",
            "description": "Field ids of the plant tissue analyses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PlantTissueAnalysisListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "PlantTissueAnalyses_List": {
            "$ref": "./examples/PlantTissueAnalyses_List.json"
          }
        }
      }
    },
    "/plant-tissue-analyses/cascade-delete/{jobId}": {
      "put": {
        "tags": [
          "PlantTissueAnalyses"
        ],
        "description": "Create a cascade delete job for specified plant tissue analysis.",
        "operationId": "PlantTissueAnalyses_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "plantTissueAnalysisId",
            "description": "ID of the plant tissue analysis to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "PlantTissueAnalyses_CreateCascadeDeleteJob": {
            "$ref": "./examples/PlantTissueAnalyses_CreateCascadeDeleteJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "PlantTissueAnalyses"
        ],
        "description": "Get a cascade delete job for specified plant tissue analysis.",
        "operationId": "PlantTissueAnalyses_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PlantTissueAnalyses_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/PlantTissueAnalyses_GetCascadeDeleteJobDetails.json"
          }
        }
      }
    },
    "/parties/{partyId}/prescription-maps": {
      "get": {
        "tags": [
          "PrescriptionMaps"
        ],
        "description": "Returns a paginated list of prescription map resources under a particular party.",
        "operationId": "PrescriptionMaps_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "types",
            "description": "Types of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropIds",
            "description": "Crop Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "seasonIds",
            "description": "Season Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "fieldIds",
            "description": "Field Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources for the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrescriptionMapListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "PrescriptionMaps_ListByPartyId": {
            "$ref": "./examples/PrescriptionMaps_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/prescription-maps/{prescriptionMapId}": {
      "get": {
        "tags": [
          "PrescriptionMaps"
        ],
        "description": "Gets a specified prescription map resource under a particular party.",
        "operationId": "PrescriptionMaps_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "prescriptionMapId",
            "description": "Id of the prescription map.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrescriptionMap"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PrescriptionMaps_Get": {
            "$ref": "./examples/PrescriptionMaps_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "PrescriptionMaps"
        ],
        "description": "Creates or Updates a prescription map resource under a particular party.",
        "operationId": "PrescriptionMaps_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "prescriptionMapId",
            "description": "Id of the prescription map resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "prescriptionMap",
            "description": "PrescriptionMap resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrescriptionMap"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PrescriptionMap"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrescriptionMap"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PrescriptionMaps_CreateOrUpdate": {
            "$ref": "./examples/PrescriptionMaps_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "PrescriptionMaps"
        ],
        "description": "Deletes a specified prescription map resource under a particular party.",
        "operationId": "PrescriptionMaps_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "prescriptionMapId",
            "description": "Id of the prescriptionMap.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PrescriptionMaps_Delete": {
            "$ref": "./examples/PrescriptionMaps_Delete.json"
          }
        }
      }
    },
    "/prescription-maps": {
      "get": {
        "tags": [
          "PrescriptionMaps"
        ],
        "description": "Returns a paginated list of prescription map resources across all parties.",
        "operationId": "PrescriptionMaps_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "types",
            "description": "Types of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropIds",
            "description": "Crop Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "seasonIds",
            "description": "Season Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "fieldIds",
            "description": "Field Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources for the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrescriptionMapListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "PrescriptionMaps_List": {
            "$ref": "./examples/PrescriptionMaps_List.json"
          }
        }
      }
    },
    "/prescription-maps/cascade-delete/{jobId}": {
      "get": {
        "tags": [
          "PrescriptionMaps"
        ],
        "description": "Get a cascade delete job for specified prescription map.",
        "operationId": "PrescriptionMaps_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "PrescriptionMaps_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/PrescriptionMaps_GetCascadeDeleteJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "PrescriptionMaps"
        ],
        "description": "Create a cascade delete job for specified prescription map.",
        "operationId": "PrescriptionMaps_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "prescriptionMapId",
            "description": "ID of the prescription map to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "PrescriptionMaps_CreateCascadeDeleteJob": {
            "$ref": "./examples/PrescriptionMaps_CreateCascadeDeleteJob.json"
          }
        }
      }
    },
    "/parties/{partyId}/prescriptions": {
      "get": {
        "tags": [
          "Prescriptions"
        ],
        "description": "Returns a paginated list of prescription resources under a particular party.",
        "operationId": "Prescriptions_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "prescriptionMapIds",
            "description": "Prescription Map Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "types",
            "description": "Types of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "productCodes",
            "description": "Product Codes of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "productNames",
            "description": "Product Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources for the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrescriptionListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Prescriptions_ListByPartyId": {
            "$ref": "./examples/Prescriptions_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/prescriptions/{prescriptionId}": {
      "get": {
        "tags": [
          "Prescriptions"
        ],
        "description": "Gets a specified prescription resource under a particular party.",
        "operationId": "Prescriptions_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "prescriptionId",
            "description": "Id of the prescription.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Prescription"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Prescriptions_Get": {
            "$ref": "./examples/Prescriptions_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Prescriptions"
        ],
        "description": "Creates or Updates a prescription resource under a particular party.",
        "operationId": "Prescriptions_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "prescriptionId",
            "description": "Id of the prescription resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "prescription",
            "description": "Prescription resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Prescription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Prescription"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Prescription"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Prescriptions_CreateOrUpdate": {
            "$ref": "./examples/Prescriptions_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Prescriptions"
        ],
        "description": "Deletes a specified prescription resource under a particular party.",
        "operationId": "Prescriptions_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "prescriptionId",
            "description": "Id of the prescription.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Prescriptions_Delete": {
            "$ref": "./examples/Prescriptions_Delete.json"
          }
        }
      }
    },
    "/prescriptions": {
      "get": {
        "tags": [
          "Prescriptions"
        ],
        "description": "Returns a paginated list of prescription resources across all parties.",
        "operationId": "Prescriptions_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "prescriptionMapIds",
            "description": "Prescription Map Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "types",
            "description": "Types of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "productCodes",
            "description": "Product Codes of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "productNames",
            "description": "Product Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources for the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrescriptionListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Prescriptions_List": {
            "$ref": "./examples/Prescriptions_List.json"
          }
        }
      }
    },
    "/prescriptions/cascade-delete/{jobId}": {
      "get": {
        "tags": [
          "Prescriptions"
        ],
        "description": "Get a cascade delete job for specified prescription.",
        "operationId": "Prescriptions_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Prescriptions_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/Prescriptions_GetCascadeDeleteJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "Prescriptions"
        ],
        "description": "Create a cascade delete job for specified prescription.",
        "operationId": "Prescriptions_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "prescriptionId",
            "description": "ID of the prescription to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Prescriptions_CreateCascadeDeleteJob": {
            "$ref": "./examples/Prescriptions_CreateCascadeDeleteJob.json"
          }
        }
      }
    },
    "/scenes": {
      "get": {
        "tags": [
          "Scenes"
        ],
        "description": "Returns a paginated list of scene resources.",
        "operationId": "Scenes_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "provider",
            "description": "Provider name of scene data.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "PartyId.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "boundaryId",
            "description": "BoundaryId.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "source",
            "description": "Source name of scene data, Available Values: Sentinel_2_L2A, Sentinel_2_L1C.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "startDateTime",
            "description": "Scene start UTC datetime (inclusive), sample format: yyyy-MM-ddThh:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "endDateTime",
            "description": "Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCloudCoveragePercentage",
            "description": "Filter scenes with cloud coverage percentage less than max value. Range [0 to 100.0].",
            "type": "number",
            "format": "double",
            "default": 100,
            "maximum": 100,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "maxDarkPixelCoveragePercentage",
            "description": "Filter scenes with dark pixel coverage percentage less than max value. Range [0 to 100.0].",
            "type": "number",
            "format": "double",
            "default": 100,
            "maximum": 100,
            "minimum": 0
          },
          {
            "in": "query",
            "name": "imageNames",
            "description": "List of image names to be filtered.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "imageResolutions",
            "description": "List of image resolutions in meters to be filtered.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "imageFormats",
            "description": "List of image formats to be filtered.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SceneListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Scenes_List": {
            "$ref": "./examples/Scenes_List.json"
          }
        }
      }
    },
    "/scenes/downloadFiles": {
      "get": {
        "tags": [
          "Scenes"
        ],
        "description": "Downloads and returns file Stream as response for the given input filePath.",
        "operationId": "Scenes_Download",
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filePath",
            "description": "cloud storage path of scene file.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary",
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Scenes_Download": {
            "$ref": "./examples/Scenes_Download.json"
          }
        }
      }
    },
    "/scenes/satellite/ingest-data/{jobId}": {
      "put": {
        "tags": [
          "Scenes"
        ],
        "description": "Create a satellite data ingestion job.",
        "operationId": "Scenes_CreateSatelliteDataIngestionJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "JobId provided by user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "job",
            "description": "Job parameters supplied by user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SatelliteDataIngestionJob"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/SatelliteDataIngestionJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Scenes_CreateSatelliteDataIngestionJob": {
            "$ref": "./examples/Scenes_CreateSatelliteDataIngestionJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "Scenes"
        ],
        "description": "Get a satellite data ingestion job.",
        "operationId": "Scenes_GetSatelliteDataIngestionJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SatelliteDataIngestionJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Scenes_GetSatelliteDataIngestionJobDetails": {
            "$ref": "./examples/Scenes_GetSatelliteDataIngestionJobDetails.json"
          }
        }
      }
    },
    "/scenes/stac-collections/{collectionId}:search": {
      "post": {
        "tags": [
          "Scenes"
        ],
        "description": "Search for STAC features by collection id, bbox, intersecting geometry, start and end datetime.",
        "operationId": "Scenes_SearchFeatures",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "description": "Collection Id to be searched.",
            "required": true,
            "type": "string",
            "enum": [
              "Sentinel_2_L2A",
              "Sentinel_2_L1C"
            ],
            "x-ms-enum": {
              "name": "collectionId",
              "modelAsString": true
            }
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "Maximum number of features needed (inclusive). Minimum = 1, Maximum = 100, Default value = 10.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Skip token for getting next set of results.",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchFeaturesQuery",
            "description": "Query filters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchFeaturesQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchFeaturesResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Scenes_SearchFeatures": {
            "$ref": "./examples/Scenes_SearchFeatures.json"
          }
        }
      }
    },
    "/scenes/stac-collections/{collectionId}/features/{featureId}": {
      "get": {
        "tags": [
          "Scenes"
        ],
        "description": "Get a feature(SpatioTemporal Asset Catalog (STAC) Item) for given collection and feature id.",
        "operationId": "Scenes_GetStacFeature",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "description": "Collection Id to be fetched.",
            "required": true,
            "type": "string",
            "enum": [
              "Sentinel_2_L2A",
              "Sentinel_2_L1C"
            ],
            "x-ms-enum": {
              "name": "collectionId",
              "modelAsString": true
            }
          },
          {
            "in": "path",
            "name": "featureId",
            "description": "Feature Id to be fetched.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StacFeature"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Scenes_GetStacFeature": {
            "$ref": "./examples/Scenes_GetStacFeature.json"
          }
        }
      }
    },
    "/parties/{partyId}/seasonal-fields": {
      "get": {
        "tags": [
          "SeasonalFields"
        ],
        "description": "Returns a paginated list of seasonal field resources under a particular party.",
        "operationId": "SeasonalFields_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "farmIds",
            "description": "Farm Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "fieldIds",
            "description": "Field Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "seasonIds",
            "description": "Season Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropProductIds",
            "description": "CropProductIds of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropIds",
            "description": "Ids of the crop it belongs to.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SeasonalFieldListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "SeasonalFields_ListByPartyId": {
            "$ref": "./examples/SeasonalFields_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/seasonal-fields/{seasonalFieldId}": {
      "get": {
        "tags": [
          "SeasonalFields"
        ],
        "description": "Gets a specified seasonal field resource under a particular party.",
        "operationId": "SeasonalFields_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "seasonalFieldId",
            "description": "Id of the seasonal field.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SeasonalField"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SeasonalFields_Get": {
            "$ref": "./examples/SeasonalFields_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "SeasonalFields"
        ],
        "description": "Creates or Updates a seasonal field resource under a particular party.",
        "operationId": "SeasonalFields_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "seasonalFieldId",
            "description": "Id of the seasonal field resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "seasonalField",
            "description": "Seasonal field resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SeasonalField"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SeasonalField"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SeasonalField"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SeasonalFields_CreateOrUpdate": {
            "$ref": "./examples/SeasonalFields_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "SeasonalFields"
        ],
        "description": "Deletes a specified seasonal-field resource under a particular party.",
        "operationId": "SeasonalFields_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "seasonalFieldId",
            "description": "Id of the seasonal field.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SeasonalFields_Delete": {
            "$ref": "./examples/SeasonalFields_Delete.json"
          }
        }
      }
    },
    "/seasonal-fields": {
      "get": {
        "tags": [
          "SeasonalFields"
        ],
        "description": "Returns a paginated list of seasonal field resources across all parties.",
        "operationId": "SeasonalFields_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "farmIds",
            "description": "Farm Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "fieldIds",
            "description": "Field Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "seasonIds",
            "description": "Season Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropProductIds",
            "description": "CropProductIds of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "cropIds",
            "description": "Ids of the crop it belongs to.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SeasonalFieldListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "SeasonalFields_List": {
            "$ref": "./examples/SeasonalFields_List.json"
          }
        }
      }
    },
    "/seasonal-fields/cascade-delete/{jobId}": {
      "get": {
        "tags": [
          "SeasonalFields"
        ],
        "description": "Get cascade delete job for specified seasonal field.",
        "operationId": "SeasonalFields_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SeasonalFields_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/SeasonalFields_GetCascadeDeleteJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "SeasonalFields"
        ],
        "description": "Create a cascade delete job for specified seasonal field.",
        "operationId": "SeasonalFields_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "seasonalFieldId",
            "description": "ID of the seasonalField to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "SeasonalFields_CreateCascadeDeleteJob": {
            "$ref": "./examples/SeasonalFields_CreateCascadeDeleteJob.json"
          }
        }
      }
    },
    "/seasons": {
      "get": {
        "tags": [
          "Seasons"
        ],
        "description": "Returns a paginated list of season resources.",
        "operationId": "Seasons_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "minStartDateTime",
            "description": "Minimum season start datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxStartDateTime",
            "description": "Maximum season start datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minEndDateTime",
            "description": "Minimum season end datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxEndDateTime",
            "description": "Maximum season end datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "years",
            "description": "Years of the resource.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SeasonListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Seasons_List": {
            "$ref": "./examples/Seasons_List.json"
          }
        }
      }
    },
    "/seasons/{seasonId}": {
      "get": {
        "tags": [
          "Seasons"
        ],
        "description": "Gets a specified season resource.",
        "operationId": "Seasons_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "seasonId",
            "description": "Id of the season.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Season"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Seasons_Get": {
            "$ref": "./examples/Seasons_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Seasons"
        ],
        "description": "Creates or updates a season resource.",
        "operationId": "Seasons_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "seasonId",
            "description": "Id of the season resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "season",
            "description": "Season resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Season"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Season"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Season"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Seasons_CreateOrUpdate": {
            "$ref": "./examples/Seasons_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Seasons"
        ],
        "description": "Deletes a specified season resource.",
        "operationId": "Seasons_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "seasonId",
            "description": "Id of the season.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Seasons_Delete": {
            "$ref": "./examples/Seasons_Delete.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/sensor-data-models": {
      "get": {
        "tags": [
          "SensorDataModels"
        ],
        "description": "Returns a paginated list of sensor data model resources.",
        "operationId": "SensorDataModels_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the associated sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorDataModelListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "SensorDataModels_List": {
            "$ref": "./examples/SensorDataModels_List.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/sensor-data-models/{sensorDataModelId}": {
      "patch": {
        "tags": [
          "SensorDataModels"
        ],
        "description": "Create a sensor data model entity.",
        "operationId": "SensorDataModels_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sensorDataModelId",
            "description": "Id of the sensor data model.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "sensorDataModelObject",
            "description": "Sensor data model object details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SensorDataModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SensorDataModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorDataModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorDataModels_CreateOrUpdate": {
            "$ref": "./examples/SensorDataModels_CreateOrUpdate.json"
          }
        }
      },
      "get": {
        "tags": [
          "SensorDataModels"
        ],
        "description": "Gets a sensor data model entity.",
        "operationId": "SensorDataModels_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sensorDataModelId",
            "description": "Id of the sensor data model resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorDataModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorDataModels_Get": {
            "$ref": "./examples/SensorDataModels_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "SensorDataModels"
        ],
        "description": "Deletes a sensor data model entity.",
        "operationId": "SensorDataModels_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sensorDataModelId",
            "description": "Id of the sensor data model resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorDataModels_Delete": {
            "$ref": "./examples/SensorDataModels_Delete.json"
          }
        }
      }
    },
    "/sensor-events": {
      "get": {
        "tags": [
          "SensorEvents"
        ],
        "description": "Returns a list of sensor events data. Time span for query is limited to 90 days at a time.\r\nReturns last 90 days events when startDateTime and endDateTime are not provided.",
        "operationId": "SensorEvents_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sensorId",
            "description": "Id of the associated sensor.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sensorPartnerId",
            "description": "Id of the associated sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "startDateTime",
            "description": "Search span start time of sensor events (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.\r\nIt is truncated upto seconds if fraction is provided.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "endDateTime",
            "description": "Search span end time of sensor events (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.\r\nIt is truncated upto seconds if fraction is provided.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "excludeDuplicateEvents",
            "description": "Flag to exclude duplicate events and take the latest ones only (Default: true).",
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorEventListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorEvents_List": {
            "$ref": "./examples/SensorEvents_List.json"
          }
        }
      }
    },
    "/sensor-mappings": {
      "get": {
        "tags": [
          "SensorMappings"
        ],
        "description": "Returns a paginated list of sensor mapping resources.",
        "operationId": "SensorMappings_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sensorIds",
            "description": "Id of the sensors.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "sensorPartnerIds",
            "description": "Id of the sensor partners.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "partyIds",
            "description": "Id of the parties.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "boundaryIds",
            "description": "Id of the boundaries.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorMappingListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "SensorMappings_List": {
            "$ref": "./examples/SensorMappings_List.json"
          }
        }
      }
    },
    "/sensor-mappings/{sensorMappingId}": {
      "patch": {
        "tags": [
          "SensorMappings"
        ],
        "description": "Create a sensor mapping entity.",
        "operationId": "SensorMappings_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorMappingId",
            "description": "Id of the sensor mapping.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "sensorMappingObject",
            "description": "Sensor mapping object details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SensorMapping"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SensorMapping"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorMapping"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorMappings_CreateOrUpdate": {
            "$ref": "./examples/SensorMappings_CreateOrUpdate.json"
          }
        }
      },
      "get": {
        "tags": [
          "SensorMappings"
        ],
        "description": "Gets a sensor mapping entity.",
        "operationId": "SensorMappings_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorMappingId",
            "description": "Id of the sensor mapping resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorMapping"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorMappings_Get": {
            "$ref": "./examples/SensorMappings_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "SensorMappings"
        ],
        "description": "Deletes a sensor mapping entity.",
        "operationId": "SensorMappings_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorMappingId",
            "description": "Id of the sensor mapping resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorMappings_Delete": {
            "$ref": "./examples/SensorMappings_Delete.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/integrations": {
      "get": {
        "tags": [
          "SensorPartnerIntegrations"
        ],
        "description": "Gets partner integration models.",
        "operationId": "SensorPartnerIntegrations_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the associated sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "integrationIds",
            "description": "Ids of the partner integration models.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "partyIds",
            "description": "Ids of the parties.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorPartnerIntegrationModelListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "SensorPartnerIntegrations_List": {
            "$ref": "./examples/SensorPartnerIntegrations_List.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/integrations/{integrationId}": {
      "patch": {
        "tags": [
          "SensorPartnerIntegrations"
        ],
        "description": "Create or update an integration with a sensor partner.",
        "operationId": "SensorPartnerIntegrations_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "integrationId",
            "description": "Id of the integration to be created.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "sensorPartnerIntegrationModel",
            "description": "Partner integration model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SensorPartnerIntegrationModel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SensorPartnerIntegrationModel"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorPartnerIntegrationModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorPartnerIntegrations_CreateOrUpdate": {
            "$ref": "./examples/SensorPartnerIntegrations_CreateOrUpdate.json"
          }
        }
      },
      "get": {
        "tags": [
          "SensorPartnerIntegrations"
        ],
        "description": "Gets a partner integration model entity.",
        "operationId": "SensorPartnerIntegrations_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "integrationId",
            "description": "Id of the integration object.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorPartnerIntegrationModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorPartnerIntegrations_Get": {
            "$ref": "./examples/SensorPartnerIntegrations_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "SensorPartnerIntegrations"
        ],
        "description": "Deletes a partner integration model entity.",
        "operationId": "SensorPartnerIntegrations_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "integrationId",
            "description": "Id of the integration to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorPartnerIntegrations_Delete": {
            "$ref": "./examples/SensorPartnerIntegrations_Delete.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/integrations/{integrationId}/:check-consent": {
      "post": {
        "tags": [
          "SensorPartnerIntegrations"
        ],
        "description": "Checks consent for partner integration.",
        "operationId": "SensorPartnerIntegrations_CheckConsent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "integrationId",
            "description": "Id of the integration object.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "key",
            "description": "Partner integration key.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorPartnerIntegrationCheckConsentResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorPartnerIntegrations_CheckConsent": {
            "$ref": "./examples/SensorPartnerIntegrations_CheckConsent.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/integrations/{integrationId}/:generate-consent-link": {
      "post": {
        "tags": [
          "SensorPartnerIntegrations"
        ],
        "description": "Generates partner integration consent link.",
        "operationId": "SensorPartnerIntegrations_GenerateConsentLink",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "integrationId",
            "description": "Id of the integration object.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorPartnerIntegrationGenerateConsentLinkResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SensorPartnerIntegrations_GenerateConsentLink": {
            "$ref": "./examples/SensorPartnerIntegrations_GenerateConsentLink.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/sensors": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "description": "Returns a paginated list of sensor resources.",
        "operationId": "Sensors_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sensorDataModelIds",
            "description": "Id's of the sensor data models.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "sensorMappingIds",
            "description": "Ids of the sensor mappings.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the associated sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "deviceIds",
            "description": "Id's of the devices.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SensorListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Sensors_List": {
            "$ref": "./examples/Sensors_List.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/sensors/{sensorId}": {
      "patch": {
        "tags": [
          "Sensors"
        ],
        "description": "Create a sensor entity.",
        "operationId": "Sensors_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sensorId",
            "description": "Id of the sensor resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "sensorDetails",
            "description": "Sensor object details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Sensors_CreateOrUpdate": {
            "$ref": "./examples/Sensors_CreateOrUpdate.json"
          }
        }
      },
      "get": {
        "tags": [
          "Sensors"
        ],
        "description": "Gets a sensor entity.",
        "operationId": "Sensors_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sensorId",
            "description": "Id of the sensor resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Sensors_Get": {
            "$ref": "./examples/Sensors_Get.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Sensors"
        ],
        "description": "Deletes a sensor entity.",
        "operationId": "Sensors_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sensorId",
            "description": "Id of the sensor resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Sensors_Delete": {
            "$ref": "./examples/Sensors_Delete.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/sensors/{sensorId}/connection-strings": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "description": "Gets a sensor connection string.",
        "operationId": "Sensors_GetConnectionString",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sensorId",
            "description": "Id of the sensor resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IoTHubDeviceAuthentication"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Sensors_GetConnectionString": {
            "$ref": "./examples/Sensors_GetConnectionString.json"
          }
        }
      }
    },
    "/sensor-partners/{sensorPartnerId}/sensors/{sensorId}/connection-strings/:renew": {
      "post": {
        "tags": [
          "Sensors"
        ],
        "description": "Renews a sensor connection string.",
        "operationId": "Sensors_RenewConnectionString",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sensorPartnerId",
            "description": "Id of the sensor partner.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sensorId",
            "description": "Id of the sensor resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "renewConnectionStringModel",
            "description": "Sensor's connection string model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SensorRenewConnectionStringModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IoTHubDeviceAuthentication"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Sensors_RenewConnectionString": {
            "$ref": "./examples/Sensors_RenewConnectionString.json"
          }
        }
      }
    },
    "/solutions/{solutionId}:cancel": {
      "post": {
        "tags": [
          "SolutionInference"
        ],
        "description": "Cancels a job for given solution id.",
        "operationId": "SolutionInference_Cancel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solutionId",
            "description": "Id of solution for which job is to be cancelled.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z]{3,50}[.][a-zA-Z]{3,100}$"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "solutionInferenceRequest",
            "description": "solutionInferenceRequest containing input needed for job request processing.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SolutionInference"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SolutionInference_Cancel": {
            "$ref": "./examples/SolutionInference_Cancel.json"
          }
        }
      }
    },
    "/solutions/{solutionId}:create": {
      "post": {
        "tags": [
          "SolutionInference"
        ],
        "description": "Creates a job trigger for a solution.",
        "operationId": "SolutionInference_CreateOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solutionId",
            "description": "Id of the solution resource.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z]{3,50}[.][a-zA-Z]{3,100}$"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "solutionInferenceRequest",
            "description": "solutionInferenceRequest containing input needed for job request processing.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SolutionInference"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "SolutionInference_CreateOrUpdate": {
            "$ref": "./examples/SolutionInference_CreateOrUpdate.json"
          }
        }
      }
    },
    "/solutions/{solutionId}:fetch": {
      "post": {
        "tags": [
          "SolutionInference"
        ],
        "description": "Fetches details of triggered job for a solution.",
        "operationId": "SolutionInference_Fetch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solutionId",
            "description": "Id of the solution.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z]{3,50}[.][a-zA-Z]{3,100}$"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "solutionInferenceRequest",
            "description": "solutionInferenceRequest containing input needed for job request processing.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SolutionInference"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "SolutionInference_Fetch": {
            "$ref": "./examples/SolutionInference_Fetch.json"
          }
        }
      }
    },
    "/parties/{partyId}/tillage-data": {
      "get": {
        "tags": [
          "TillageData"
        ],
        "description": "Returns a paginated list of tillage data resources under a particular farm.",
        "operationId": "TillageData_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minTillageDepth",
            "description": "Minimum measured tillage depth (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTillageDepth",
            "description": "Maximum measured tillage depth (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minTillagePressure",
            "description": "Minimum pressure applied to a tillage implement (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTillagePressure",
            "description": "Maximum pressure applied to a tillage implement (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "associatedBoundaryIds",
            "description": "Boundary IDs associated with operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minOperationStartDateTime",
            "description": "Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationStartDateTime",
            "description": "Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationEndDateTime",
            "description": "Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationEndDateTime",
            "description": "Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationModifiedDateTime",
            "description": "Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationModifiedDateTime",
            "description": "Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minArea",
            "description": "Minimum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxArea",
            "description": "Maximum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TillageDataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "TillageData_ListByPartyId": {
            "$ref": "./examples/TillageData_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/tillage-data/{tillageDataId}": {
      "get": {
        "tags": [
          "TillageData"
        ],
        "description": "Get a specified tillage data resource under a particular party.",
        "operationId": "TillageData_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tillageDataId",
            "description": "ID of the tillage data resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TillageData"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "TillageData_Get": {
            "$ref": "./examples/TillageData_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "TillageData"
        ],
        "description": "Creates or updates an tillage data resource under a particular party.",
        "operationId": "TillageData_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tillageDataId",
            "description": "ID of the tillage data resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "tillageData",
            "description": "Tillage data resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TillageData"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TillageData"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TillageData"
            }
          }
        },
        "x-ms-examples": {
          "TillageData_CreateOrUpdate": {
            "$ref": "./examples/TillageData_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "TillageData"
        ],
        "description": "Deletes a specified tillage data resource under a particular party.",
        "operationId": "TillageData_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "ID of the associated party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tillageDataId",
            "description": "ID of the tillage data.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "TillageData_Delete": {
            "$ref": "./examples/TillageData_Delete.json"
          }
        }
      }
    },
    "/tillage-data": {
      "get": {
        "tags": [
          "TillageData"
        ],
        "description": "Returns a paginated list of tillage data resources across all parties.",
        "operationId": "TillageData_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "minTillageDepth",
            "description": "Minimum measured tillage depth (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTillageDepth",
            "description": "Maximum measured tillage depth (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "minTillagePressure",
            "description": "Minimum pressure applied to a tillage implement (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxTillagePressure",
            "description": "Maximum pressure applied to a tillage implement (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "associatedBoundaryIds",
            "description": "Boundary IDs associated with operation data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minOperationStartDateTime",
            "description": "Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationStartDateTime",
            "description": "Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationEndDateTime",
            "description": "Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationEndDateTime",
            "description": "Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minOperationModifiedDateTime",
            "description": "Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxOperationModifiedDateTime",
            "description": "Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minArea",
            "description": "Minimum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "maxArea",
            "description": "Maximum area for which operation was applied (inclusive).",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TillageDataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "TillageData_List": {
            "$ref": "./examples/TillageData_List.json"
          }
        }
      }
    },
    "/tillage-data/cascade-delete/{jobId}": {
      "put": {
        "tags": [
          "TillageData"
        ],
        "description": "Create cascade delete job for tillage data resource.",
        "operationId": "TillageData_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job Id supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tillageDataId",
            "description": "Id of the tillage data.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "TillageData_CreateCascadeDeleteJob": {
            "$ref": "./examples/TillageData_CreateCascadeDeleteJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "TillageData"
        ],
        "description": "Get cascade delete job for tillage data resource.",
        "operationId": "TillageData_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "TillageData_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/TillageData_GetCascadeDeleteJobDetails.json"
          }
        }
      }
    },
    "/weather": {
      "get": {
        "tags": [
          "Weather"
        ],
        "description": "Returns a paginated list of weather data.",
        "operationId": "Weather_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "partyId",
            "description": "Party ID.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "boundaryId",
            "description": "Boundary ID.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "extensionId",
            "description": "ID of the weather extension.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z]{3,50}[.][a-zA-Z]{3,100}$"
          },
          {
            "in": "query",
            "name": "weatherDataType",
            "description": "Type of weather data (forecast/historical).",
            "required": true,
            "type": "string",
            "maxLength": 50,
            "minLength": 0
          },
          {
            "in": "query",
            "name": "granularity",
            "description": "Granularity of weather data (daily/hourly).",
            "required": true,
            "type": "string",
            "maxLength": 50,
            "minLength": 0
          },
          {
            "in": "query",
            "name": "startDateTime",
            "description": "Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "endDateTime",
            "description": "Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WeatherDataListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Weather_List": {
            "$ref": "./examples/Weather_List.json"
          }
        }
      }
    },
    "/weather/delete-data/{jobId}": {
      "get": {
        "tags": [
          "Weather"
        ],
        "description": "Get weather data delete job.",
        "operationId": "Weather_GetDataDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WeatherDataDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Weather_GetDataDeleteJobDetails": {
            "$ref": "./examples/Weather_GetDataDeleteJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "Weather"
        ],
        "description": "Create a weather data delete job.",
        "operationId": "Weather_CreateDataDeleteJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job Id supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "job",
            "description": "Job parameters supplied by user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WeatherDataDeleteJob"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/WeatherDataDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Weather_CreateDataDeleteJob": {
            "$ref": "./examples/Weather_CreateDataDeleteJob.json"
          }
        }
      }
    },
    "/weather/ingest-data/{jobId}": {
      "get": {
        "tags": [
          "Weather"
        ],
        "description": "Get weather ingestion job.",
        "operationId": "Weather_GetDataIngestionJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WeatherDataIngestionJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Weather_GetDataIngestionJobDetails": {
            "$ref": "./examples/Weather_GetDataIngestionJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "Weather"
        ],
        "description": "Create a weather data ingestion job.",
        "operationId": "Weather_CreateDataIngestionJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job id supplied by user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "job",
            "description": "Job parameters supplied by user.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WeatherDataIngestionJob"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/WeatherDataIngestionJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Weather_CreateDataIngestionJob": {
            "$ref": "./examples/Weather_CreateDataIngestionJob.json"
          }
        }
      }
    },
    "/weather-data/:fetch": {
      "post": {
        "tags": [
          "WeatherData"
        ],
        "description": "Returns a list of WeatherData.",
        "operationId": "WeatherData_Get",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "weatherDataProviderRequest",
            "description": "Weather data provider request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WeatherDataProviderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WeatherDataProviderResponse"
            },
            "headers": {
              "x-ms-cache-hit": {
                "description": "Indicate whether the request was cache hit or cache miss.",
                "type": "boolean"
              },
              "x-ms-response-latency-in-milliseconds": {
                "description": "Time taken in milliseconds for processing the request at server side.",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "WeatherData_Get": {
            "$ref": "./examples/WeatherData_Get.json"
          }
        }
      }
    },
    "/parties/{partyId}/zones": {
      "get": {
        "tags": [
          "Zones"
        ],
        "description": "Returns a paginated list of zone resources under a particular party.",
        "operationId": "Zones_ListByPartyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "types",
            "description": "Types of the Zones.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "managementZoneIds",
            "description": "ManagementZoneIds of the Zones.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the Zones.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ZoneListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Zones_ListByPartyId": {
            "$ref": "./examples/Zones_ListByPartyId.json"
          }
        }
      }
    },
    "/parties/{partyId}/zones/{zoneId}": {
      "get": {
        "tags": [
          "Zones"
        ],
        "description": "Gets a specified zone resource under a particular party.",
        "operationId": "Zones_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "zoneId",
            "description": "Id of the zone.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Zones_Get": {
            "$ref": "./examples/Zones_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Zones"
        ],
        "description": "Creates or updates a Zone resource.",
        "operationId": "Zones_CreateOrUpdate",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "zoneId",
            "description": "Id of the zone resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "zone",
            "description": "Zone resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Zones_CreateOrUpdate": {
            "$ref": "./examples/Zones_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Zones"
        ],
        "description": "Deletes a specified zone resource under a particular party.",
        "operationId": "Zones_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "partyId",
            "description": "Id of the party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "zoneId",
            "description": "Id of the zone.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Zones_Delete": {
            "$ref": "./examples/Zones_Delete.json"
          }
        }
      }
    },
    "/zones": {
      "get": {
        "tags": [
          "Zones"
        ],
        "description": "Returns a paginated list of zone resources across all parties.",
        "operationId": "Zones_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "types",
            "description": "Types of the Zones.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "managementZoneIds",
            "description": "ManagementZoneIds of the Zones.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "sources",
            "description": "Sources of the Zones.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ZoneListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Zones_List": {
            "$ref": "./examples/Zones_List.json"
          }
        }
      }
    },
    "/zones/cascade-delete/{jobId}": {
      "get": {
        "tags": [
          "Zones"
        ],
        "description": "Get a cascade delete job for specified job id.",
        "operationId": "Zones_GetCascadeDeleteJobDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-examples": {
          "Zones_GetCascadeDeleteJobDetails": {
            "$ref": "./examples/Zones_GetCascadeDeleteJobDetails.json"
          }
        }
      },
      "put": {
        "tags": [
          "Zones"
        ],
        "description": "Create a cascade delete job for specified zone.",
        "operationId": "Zones_CreateCascadeDeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID supplied by end user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partyId",
            "description": "ID of the associated party.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "zoneId",
            "description": "ID of the zone to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CascadeDeleteJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Zones_CreateCascadeDeleteJob": {
            "$ref": "./examples/Zones_CreateCascadeDeleteJob.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AdditionalProviderParameters": {
      "description": "Schema of additional parameters for weather data provider request.",
      "type": "object",
      "properties": {
        "iconResolution": {
          "description": "Icon Resolution (Only applicable for AzureWeatherMaps).",
          "type": "string"
        },
        "details": {
          "description": "Details (Only applicable for AzureWeatherMaps).",
          "default": true,
          "type": "boolean"
        }
      }
    },
    "ApplicationData": {
      "description": "Schema of application data resource.",
      "type": "object",
      "properties": {
        "applicationProductDetails": {
          "description": "Application product details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationProductDetail"
          }
        },
        "avgMaterial": {
          "$ref": "#/definitions/Measure"
        },
        "totalMaterial": {
          "$ref": "#/definitions/Measure"
        },
        "area": {
          "$ref": "#/definitions/Measure"
        },
        "operationModifiedDateTime": {
          "format": "date-time",
          "description": "Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.\r\nNote: this will be specified by the source provider itself.",
          "type": "string",
          "example": "2021-02-10T11:10:21Z"
        },
        "operationStartDateTime": {
          "format": "date-time",
          "description": "Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "example": "2020-12-31T11:10:21Z"
        },
        "operationEndDateTime": {
          "format": "date-time",
          "description": "End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "example": "2021-01-31T11:10:21Z"
        },
        "attachmentsLink": {
          "description": "Link for attachments.",
          "type": "string",
          "readOnly": true
        },
        "associatedBoundaryId": {
          "description": "Optional boundary ID of the field for which operation was applied.",
          "type": "string"
        },
        "partyId": {
          "description": "Party ID which belongs to the operation data.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "ApplicationDataListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationData"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "ApplicationProductDetail": {
      "description": "Schema of product used during application.",
      "type": "object",
      "properties": {
        "productName": {
          "description": "Name of the product applied.",
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "isCarrier": {
          "description": "A flag indicating whether product is a carrier for a tank mix.",
          "default": false,
          "type": "boolean"
        },
        "avgMaterial": {
          "$ref": "#/definitions/Measure"
        },
        "totalMaterial": {
          "$ref": "#/definitions/Measure"
        }
      }
    },
    "Attachment": {
      "description": "Schema of attachment resource.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "Associated Resource id for this attachment.",
          "type": "string"
        },
        "resourceType": {
          "description": "Associated Resource type for this attachment.",
          "enum": [
            "Party",
            "Farm",
            "Field",
            "SeasonalField",
            "Boundary",
            "ApplicationData",
            "HarvestData",
            "TillageData",
            "PlantingData",
            "PlantTissueAnalysis"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AttachmentResourceType",
            "modelAsString": true
          }
        },
        "originalFileName": {
          "description": "Original File Name for this attachment.",
          "type": "string",
          "readOnly": true
        },
        "partyId": {
          "description": "PartyId id for this attachment.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date when resource was created.",
          "type": "string",
          "readOnly": true
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date when resource was last modified.",
          "type": "string",
          "readOnly": true
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AttachmentListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "BiomassModelJob": {
      "description": "Schema of biomass model job.",
      "required": [
        "boundaryId",
        "cropName",
        "imageFormat",
        "imageResolution",
        "inferenceEndDateTime",
        "modelVersion",
        "partyId",
        "plantingStartDateTime",
        "satelliteProvider",
        "satelliteSource",
        "weatherExtensionId"
      ],
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "minLength": 1,
          "type": "string"
        },
        "boundaryId": {
          "description": "The id of the boundary object for which biomass is being calculated.",
          "minLength": 1,
          "type": "string"
        },
        "modelVersion": {
          "description": "The version of the biomass model to be run. Available Value: 1.0 .",
          "minLength": 1,
          "type": "string"
        },
        "cropName": {
          "description": "Crop name for biomass model. Available Value: Corn.",
          "minLength": 1,
          "enum": [
            "Corn"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "CropName",
            "modelAsString": true
          }
        },
        "plantingStartDateTime": {
          "format": "date-time",
          "description": "Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string"
        },
        "inferenceEndDateTime": {
          "format": "date-time",
          "description": "End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string"
        },
        "weatherExtensionId": {
          "description": "ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.",
          "maxLength": 100,
          "minLength": 2,
          "pattern": "^[a-zA-Z]{3,50}[.][a-zA-Z]{3,100}$",
          "type": "string"
        },
        "satelliteProvider": {
          "description": "Provider of satellite data. Available Value: Microsoft.",
          "minLength": 1,
          "enum": [
            "Microsoft"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DataProvider",
            "modelAsString": true
          }
        },
        "satelliteSource": {
          "description": "Source of satellite data. Available Value: Sentinel_2_L2A.",
          "minLength": 1,
          "enum": [
            "Sentinel_2_L2A",
            "Sentinel_2_L1C"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "Source",
            "modelAsString": true
          }
        },
        "imageResolution": {
          "format": "double",
          "description": "ImageResolution in meters. Available values: 10, 20, 60.",
          "type": "number"
        },
        "imageFormat": {
          "description": "ImageFormat. Available value: TIF.",
          "minLength": 1,
          "enum": [
            "TIF"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ImageFormat",
            "modelAsString": true
          }
        },
        "id": {
          "description": "Unique job id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the job.\r\nPossible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.",
          "type": "string",
          "readOnly": true
        },
        "durationInSeconds": {
          "format": "double",
          "description": "Duration of the job in seconds.",
          "type": "number",
          "readOnly": true
        },
        "message": {
          "description": "Status message to capture more details of the job.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "Error Code when job failed.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "lastActionDateTime": {
          "format": "date-time",
          "description": "Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "Boundary": {
      "description": "Schema of boundary resource.",
      "type": "object",
      "properties": {
        "geometry": {
          "$ref": "#/definitions/GeoJsonObject"
        },
        "type": {
          "description": "Indicates the type of boundary belonging to a parent.",
          "type": "string"
        },
        "crs": {
          "description": "Coordinate  Reference System.",
          "type": "string",
          "readOnly": true
        },
        "centroid": {
          "$ref": "#/definitions/GeoJsonObject"
        },
        "bbox": {
          "$ref": "#/definitions/GeoJsonObject"
        },
        "partyId": {
          "description": "Party Id.",
          "type": "string",
          "readOnly": true
        },
        "parentId": {
          "description": "Id of the parent it belongs to.",
          "type": "string"
        },
        "area": {
          "$ref": "#/definitions/Measure"
        },
        "parentType": {
          "description": "Type of the parent it belongs to.\r\ni.e. Field, SeasonalField, Zone, Prescription, PlantTissueAnalysis, ApplicationData, HarvestData, TillageData, PlantingData.",
          "enum": [
            "Field",
            "SeasonalField",
            "Zone",
            "Prescription",
            "PlantTissueAnalysis",
            "ApplicationData",
            "PlantingData",
            "TillageData",
            "HarvestData"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "BoundaryParentType",
            "modelAsString": true
          }
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {}
        }
      },
      "example": {
        "name": "string",
        "description": "string",
        "source": "string",
        "parentId": "string",
        "parentType": "Field",
        "type": "string",
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                73.70457172393799,
                20.545385304358106
              ],
              [
                73.70457172393799,
                20.545385304358106
              ],
              [
                73.70448589324951,
                20.542411534243367
              ],
              [
                73.70877742767334,
                20.541688176010233
              ],
              [
                73.71023654937744,
                20.545083911372505
              ],
              [
                73.70663166046143,
                20.546992723579137
              ],
              [
                73.70457172393799,
                20.545385304358106
              ]
            ]
          ]
        }
      }
    },
    "BoundaryMetadata": {
      "description": "Schema of boundary resource metadata.",
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "type": "string",
          "readOnly": true
        },
        "parentId": {
          "description": "Id of the parent it belongs to.",
          "type": "string"
        },
        "area": {
          "$ref": "#/definitions/Measure"
        },
        "parentType": {
          "description": "Type of the parent it belongs to.",
          "enum": [
            "Field",
            "SeasonalField",
            "Zone",
            "Prescription",
            "PlantTissueAnalysis",
            "ApplicationData",
            "PlantingData",
            "TillageData",
            "HarvestData"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "BoundaryParentType",
            "modelAsString": true
          }
        },
        "type": {
          "description": "Type it belongs to.",
          "type": "string"
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {}
        }
      },
      "example": {
        "name": "string",
        "description": "string",
        "source": "string",
        "parentId": "string",
        "isPrimary": false,
        "type": "string",
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                73.70457172393799,
                20.545385304358106
              ],
              [
                73.70457172393799,
                20.545385304358106
              ],
              [
                73.70448589324951,
                20.542411534243367
              ],
              [
                73.70877742767334,
                20.541688176010233
              ],
              [
                73.71023654937744,
                20.545083911372505
              ],
              [
                73.70663166046143,
                20.546992723579137
              ],
              [
                73.70457172393799,
                20.545385304358106
              ]
            ]
          ]
        }
      }
    },
    "BoundaryMetadataListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoundaryMetadata"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "BoundaryOverlapResponse": {
      "description": "Schema of boundary overlap response.",
      "type": "object",
      "properties": {
        "boundaryArea": {
          "format": "double",
          "description": "Acreage of Main boundary.",
          "type": "number"
        },
        "otherBoundaryArea": {
          "format": "double",
          "description": "Acreage of other boundary.",
          "type": "number"
        },
        "intersectingArea": {
          "format": "double",
          "description": "Acreage of intersecting boundary.",
          "type": "number"
        }
      }
    },
    "CascadeDeleteJob": {
      "description": "Schema of cascade delete job.",
      "required": [
        "partyId",
        "resourceId",
        "resourceType"
      ],
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "minLength": 1,
          "type": "string"
        },
        "resourceId": {
          "description": "The id of the resource.",
          "minLength": 1,
          "type": "string"
        },
        "resourceType": {
          "description": "The type of the resource.",
          "minLength": 1,
          "type": "string"
        },
        "id": {
          "description": "Unique job id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the job.\r\nPossible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.",
          "enum": [
            "Waiting",
            "Running",
            "Succeeded",
            "Failed",
            "Cancelled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "JobStatus",
            "modelAsString": true
          }
        },
        "durationInSeconds": {
          "format": "double",
          "description": "Duration of the job in seconds.",
          "type": "number",
          "readOnly": true
        },
        "message": {
          "description": "Status message to capture more details of the job.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "Error Code when job failed.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "lastActionDateTime": {
          "format": "date-time",
          "description": "Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Crop": {
      "description": "Schema of crop resource.",
      "type": "object",
      "properties": {
        "phenotype": {
          "description": "Crop phenotype.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "breedingMethod": {
          "description": "Breeding Method.",
          "enum": [
            "VARIETY",
            "HYBRID",
            "UNKNOWN"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "BreedingMethod",
            "modelAsString": true
          }
        },
        "measurements": {
          "description": "Measurements.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Measure"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "CropListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Crop"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "CropProduct": {
      "description": "Schema of crop product resource.",
      "type": "object",
      "properties": {
        "cropIds": {
          "description": "Ids of the crops it belongs to.\r\nNote: A maximum of 25 crops can be associated with a cropProduct.",
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "brand": {
          "description": "CropProduct Brand.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "product": {
          "description": "CropProduct product.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "trait": {
          "description": "CropProduct trait.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "relativeMaturity": {
          "$ref": "#/definitions/Measure"
        },
        "treatments": {
          "description": "CropProduct treatments.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "CropProductListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CropProduct"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "DataProvider": {
      "description": "Provider of satellite data.",
      "enum": [
        "Microsoft"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "DataProvider",
        "modelAsString": true
      }
    },
    "Device": {
      "description": "Device API model.",
      "type": "object",
      "properties": {
        "deviceDataModelId": {
          "description": "Id of the associated device data model.",
          "type": "string"
        },
        "integrationId": {
          "description": "Integration id for the device.",
          "type": "string"
        },
        "type": {
          "description": "Type of device.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "hardwareId": {
          "description": "Device hardwareId.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "reportingIntervalInSeconds": {
          "format": "int32",
          "description": "Interval at which the device sends data in seconds.",
          "type": "integer"
        },
        "parentDeviceId": {
          "description": "Parent device Id for this device.",
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "sensorPartnerId": {
          "description": "Id of the associated sensor partner.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and\r\nonly string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "DeviceDataModel": {
      "description": "DeviceDataModel API model.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of device.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "manufacturer": {
          "description": "Device manufacturer.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "productCode": {
          "description": "Device productCode.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "ports": {
          "description": "List of device ports supported.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          }
        },
        "sensorPartnerId": {
          "description": "Id of the associated sensor partner.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and\r\nonly string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "DeviceDataModelListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceDataModel"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "DeviceListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "Error": {
      "description": "An error from the Azure AgPlatform service.",
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Server-defined set of error codes.",
          "minLength": 1,
          "type": "string"
        },
        "message": {
          "description": "Human-readable representation of the error.",
          "minLength": 1,
          "type": "string"
        },
        "target": {
          "description": "Target of the error.",
          "type": "string"
        },
        "details": {
          "description": "Array of details about specific errors that led to this reported error.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "ErrorForLocation": {
      "description": "Model for error information for a failed location.",
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/WeatherLocation"
        },
        "code": {
          "format": "int32",
          "description": "Status code returned by data provider.",
          "type": "integer"
        },
        "description": {
          "description": "Description of the error.",
          "type": "string"
        },
        "retryable": {
          "description": "Flag suggesting if retry attempt with same request body should be made to fetch required data.",
          "type": "boolean"
        }
      }
    },
    "ErrorResponse": {
      "description": "An error response from the Azure AgPlatform service. See https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses for ErrorResponse reference document.",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        },
        "traceId": {
          "description": "Unique trace Id.",
          "type": "string"
        }
      }
    },
    "Farm": {
      "description": "Schema of farm resource.",
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "FarmListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Farm"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "FarmOperationDataIngestionJob": {
      "description": "Schema of farm operation data ingestion job.",
      "required": [
        "authProviderId",
        "partyId",
        "startYear"
      ],
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "minLength": 1,
          "type": "string"
        },
        "authProviderId": {
          "description": "Authentication provider Id.",
          "minLength": 1,
          "type": "string"
        },
        "operations": {
          "description": "List of operation types for which data needs to be downloaded. Available values: AllOperations, Application, Planting, Harvest, Tillage.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startYear": {
          "format": "int32",
          "description": "Start Year (Minimum = 2000, Maximum = CurrentYear).",
          "type": "integer"
        },
        "isIncremental": {
          "description": "Use this to pull only the incremental changes from the last run.",
          "default": false,
          "type": "boolean"
        },
        "id": {
          "description": "Unique job id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the job.\r\nPossible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.",
          "type": "string",
          "readOnly": true
        },
        "durationInSeconds": {
          "format": "double",
          "description": "Duration of the job in seconds.",
          "type": "number",
          "readOnly": true
        },
        "message": {
          "description": "Status message to capture more details of the job.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "Error Code when job failed.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "lastActionDateTime": {
          "format": "date-time",
          "description": "Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "Field": {
      "description": "Schema of field resource.",
      "type": "object",
      "properties": {
        "farmId": {
          "description": "Id of the associated Farm.",
          "type": "string"
        },
        "partyId": {
          "description": "Party Id.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "FieldListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "GeoJsonObject": {
      "description": "GeoJSON (For more details: https://geojson.org/). Note: Coordinates are expected in [Longitude, Latitude] format.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/GeoJsonObjectType"
        }
      },
      "discriminator": "type"
    },
    "GeoJsonObjectType": {
      "description": "GeoJSON object type.",
      "enum": [
        "Point",
        "Polygon",
        "MultiPolygon"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "GeoJsonObjectType",
        "modelAsString": true
      }
    },
    "HarvestData": {
      "description": "Schema of harvest data resource.",
      "type": "object",
      "properties": {
        "totalYield": {
          "$ref": "#/definitions/Measure"
        },
        "avgYield": {
          "$ref": "#/definitions/Measure"
        },
        "totalWetMass": {
          "$ref": "#/definitions/Measure"
        },
        "avgWetMass": {
          "$ref": "#/definitions/Measure"
        },
        "avgMoisture": {
          "$ref": "#/definitions/Measure"
        },
        "avgSpeed": {
          "$ref": "#/definitions/Measure"
        },
        "harvestProductDetails": {
          "description": "Harvest product details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HarvestProductDetail"
          }
        },
        "area": {
          "$ref": "#/definitions/Measure"
        },
        "operationModifiedDateTime": {
          "format": "date-time",
          "description": "Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.\r\nNote: this will be specified by the source provider itself.",
          "type": "string",
          "example": "2021-02-10T11:10:21Z"
        },
        "operationStartDateTime": {
          "format": "date-time",
          "description": "Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "example": "2020-12-31T11:10:21Z"
        },
        "operationEndDateTime": {
          "format": "date-time",
          "description": "End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "example": "2021-01-31T11:10:21Z"
        },
        "attachmentsLink": {
          "description": "Link for attachments.",
          "type": "string",
          "readOnly": true
        },
        "associatedBoundaryId": {
          "description": "Optional boundary ID of the field for which operation was applied.",
          "type": "string"
        },
        "partyId": {
          "description": "Party ID which belongs to the operation data.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "HarvestDataListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HarvestData"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "HarvestProductDetail": {
      "description": "Schema of product used during harvesting.",
      "type": "object",
      "properties": {
        "productName": {
          "description": "Name of the product.",
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "area": {
          "$ref": "#/definitions/Measure"
        },
        "totalYield": {
          "$ref": "#/definitions/Measure"
        },
        "avgYield": {
          "$ref": "#/definitions/Measure"
        },
        "avgMoisture": {
          "$ref": "#/definitions/Measure"
        },
        "totalWetMass": {
          "$ref": "#/definitions/Measure"
        },
        "avgWetMass": {
          "$ref": "#/definitions/Measure"
        }
      }
    },
    "ImageFile": {
      "description": "Schema of image file resource.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "fileLink": {
          "description": "Link of the image file.",
          "type": "string"
        },
        "name": {
          "description": "Name of the image file.",
          "minLength": 1,
          "type": "string"
        },
        "imageFormat": {
          "$ref": "#/definitions/ImageFormat"
        },
        "resolution": {
          "format": "double",
          "description": "Resolution of image file in meters.",
          "type": "number"
        }
      }
    },
    "ImageFormat": {
      "description": "Supported image formats for scene resource.",
      "enum": [
        "TIF"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ImageFormat",
        "modelAsString": true
      }
    },
    "ImageProcessingRasterizeJob": {
      "description": "Image Processing Rasterize Job to convert shapefile into tiff file.",
      "required": [
        "partyId",
        "shapefileAttachmentId",
        "shapefileColumnNames"
      ],
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "minLength": 1,
          "type": "string"
        },
        "shapefileAttachmentId": {
          "description": "Shapefile attachment Id.",
          "minLength": 1,
          "type": "string"
        },
        "shapefileColumnNames": {
          "description": "List of shapefile column names to create raster attachments.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "Unique job id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the job.\r\nPossible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.",
          "type": "string",
          "readOnly": true
        },
        "durationInSeconds": {
          "format": "double",
          "description": "Duration of the job in seconds.",
          "type": "number",
          "readOnly": true
        },
        "message": {
          "description": "Status message to capture more details of the job.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "Error Code when job failed.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "lastActionDateTime": {
          "format": "date-time",
          "description": "Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "InnerError": {
      "description": "Inner error containing list of errors.See https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#innererror--object for InnerError reference document.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Specific error code than was provided by the containing error.",
          "type": "string"
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "Insight": {
      "description": "Schema of insight resource.",
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Id of the associated party.",
          "type": "string",
          "readOnly": true
        },
        "modelId": {
          "description": "Id of the associated model.",
          "type": "string",
          "readOnly": true
        },
        "resourceType": {
          "description": "Resource type associated with the record.",
          "enum": [
            "Party",
            "Farm",
            "Field",
            "SeasonalField",
            "Boundary"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "FarmHierarchyResourceType",
            "modelAsString": true
          }
        },
        "resourceId": {
          "description": "Id of the associated resource.",
          "type": "string",
          "readOnly": true
        },
        "modelVersion": {
          "description": "Version of the associated model.",
          "type": "string"
        },
        "attachmentsLink": {
          "description": "Gets link for attachments.",
          "type": "string",
          "readOnly": true
        },
        "insightStartDateTime": {
          "format": "date-time",
          "description": "Start date to which the insight is related.",
          "type": "string"
        },
        "insightEndDateTime": {
          "format": "date-time",
          "description": "End date to which the insight is related.",
          "type": "string"
        },
        "measurements": {
          "description": "Measures to capture insights results.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Measure"
          }
        },
        "id": {
          "description": "Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and\r\nonly string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "InsightAttachment": {
      "description": "Schema of insight attachment resource.",
      "required": [
        "insightId"
      ],
      "type": "object",
      "properties": {
        "insightId": {
          "description": "InsightID for this InsightAttachment.",
          "minLength": 1,
          "type": "string"
        },
        "modelId": {
          "description": "ModelID for this InsightAttachment.",
          "type": "string",
          "readOnly": true
        },
        "resourceType": {
          "description": "Associated Resource type for this attachment.",
          "enum": [
            "Party",
            "Farm",
            "Field",
            "SeasonalField",
            "Boundary"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "FarmHierarchyResourceType",
            "modelAsString": true
          }
        },
        "resourceId": {
          "description": "Associated Resource id for this attachment.",
          "type": "string",
          "readOnly": true
        },
        "originalFileName": {
          "description": "Original File Name for this attachment.",
          "type": "string",
          "readOnly": true
        },
        "partyId": {
          "description": "PartyId id for this attachment.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date when resource was created.",
          "type": "string",
          "readOnly": true
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date when resource was last modified.",
          "type": "string",
          "readOnly": true
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "InsightAttachmentListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsightAttachment"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "InsightListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Insight"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "IoTHubDeviceAuthentication": {
      "description": "Authentication via connection string to IoTHub devices.",
      "type": "object",
      "properties": {
        "primaryDeviceConnectionString": {
          "description": "Primary connection string of the ioTHub device.",
          "type": "string",
          "readOnly": true
        },
        "secondaryDeviceConnectionString": {
          "description": "Secondary connection string of the ioTHub device.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "LabDetails": {
      "description": "Model for representing LabDetails object.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Code of the resource.",
          "maxLength": 150,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "description": "Name of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "address": {
          "description": "Address of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "Location": {
      "description": "Location model class.",
      "required": [
        "latitude",
        "longitude"
      ],
      "type": "object",
      "properties": {
        "latitude": {
          "format": "double",
          "description": "Latitude of the location.",
          "maximum": 90,
          "minimum": -90,
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "description": "Longitude of the location.",
          "maximum": 180,
          "minimum": -180,
          "type": "number"
        }
      }
    },
    "ManagementZone": {
      "description": "Api Model for ManagementZone object.",
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id associated with the ManagementZone.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Type of the ManagementZone.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "seasonId": {
          "description": "Season Id associated with the ManagementZone.",
          "type": "string"
        },
        "cropId": {
          "description": "Crop Id associated with the ManagementZone.",
          "type": "string"
        },
        "fieldId": {
          "description": "Field Id associated with the ManagementZone.",
          "type": "string"
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "ManagementZoneListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManagementZone"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "Measure": {
      "description": "Schema for storing measurement reading and unit.",
      "type": "object",
      "properties": {
        "unit": {
          "description": "Data unit.",
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "format": "double",
          "description": "Data value.",
          "type": "number"
        }
      }
    },
    "Measures": {
      "description": "Schema for storing measurement readings and unit.",
      "type": "object",
      "properties": {
        "unit": {
          "description": "Data unit.",
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        },
        "values": {
          "description": "Data values.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        }
      }
    },
    "MultiPolygon": {
      "description": "MultiPolygon geometry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "required": [
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "coordinates": {
              "description": "Gets or sets Coordinates of GeoJSON Object.\r\nIt must be an array of polygons, each polygon contains list of linear rings.\r\nFor Polygons with more than one of these rings, the first MUST be the exterior ring,\r\nand any others MUST be interior rings.",
              "minItems": 1,
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "format": "double",
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "MultiPolygon"
    },
    "NutrientAnalysis": {
      "description": "Api Model for nutrient analysis object.",
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party id for this nutrient analysis.",
          "type": "string",
          "readOnly": true
        },
        "parentId": {
          "description": "Parent id for this nutrient analysis.",
          "type": "string"
        },
        "parentType": {
          "description": "Parent type for this nutrient analysis.\r\ni.e. PlantTissueAnalysis.",
          "enum": [
            "PlantTissueAnalysis"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NutrientAnalysisParentType",
            "modelAsString": true
          }
        },
        "unit": {
          "description": "Unit for this nutrient analysis.",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "value": {
          "format": "double",
          "description": "Value for this nutrient analysis.",
          "type": "number"
        },
        "referenceValueLow": {
          "format": "double",
          "description": "Reference value low for this nutrient analysis.",
          "type": "number"
        },
        "referenceValueHigh": {
          "format": "double",
          "description": "Reference value high for this nutrient analysis.",
          "type": "number"
        },
        "classification": {
          "description": "Classification for this nutrient analysis.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "recommendation": {
          "description": "Recommendation for this nutrient analysis.",
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "products": {
          "description": "Products for this nutrient analysis.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductDetails"
          }
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "NutrientAnalysisListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NutrientAnalysis"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "OAuthConnectRequest": {
      "description": "Get OAuth config query parameters.",
      "required": [
        "oAuthProviderId",
        "partyId",
        "userRedirectLink"
      ],
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Id of the party.",
          "minLength": 1,
          "type": "string"
        },
        "oAuthProviderId": {
          "description": "Id of the OAuthProvider.",
          "minLength": 1,
          "type": "string"
        },
        "userRedirectLink": {
          "description": "Link to redirect the user to, at the end of the oauth flow.",
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "userRedirectState": {
          "description": "State to provide back when redirecting the user, at the end of the oauth flow.",
          "maxLength": 200,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "OAuthProvider": {
      "description": "Schema of OAuth provider resource.",
      "type": "object",
      "properties": {
        "appId": {
          "description": "OAuth App Id for given OAuth Provider.",
          "maxLength": 200,
          "minLength": 2,
          "type": "string"
        },
        "appSecret": {
          "description": "OAuth App secret for given Provider.\r\nNote: Won't be sent in response.",
          "maxLength": 200,
          "minLength": 2,
          "type": "string"
        },
        "apiKey": {
          "description": "OAuth Api key for given Provider.\r\nNote: currently Applicable to Climate provider. Won't be sent in response.",
          "maxLength": 200,
          "minLength": 2,
          "type": "string"
        },
        "isProductionApp": {
          "description": "An optional flag to determine if the App is ready to be used for Production scenarios in the provider side or not. (Default value: false)\r\nNote: Currently applicable for JohnDeere.",
          "default": false,
          "type": "boolean"
        },
        "id": {
          "description": "Unique OAuth provider ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and\r\nonly string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "OAuthProviderCascadeDeleteJob": {
      "description": "Schema of oauth provider cascade delete job.",
      "required": [
        "oauthProviderId"
      ],
      "type": "object",
      "properties": {
        "oauthProviderId": {
          "description": "The id of the oauth provider.",
          "minLength": 1,
          "type": "string"
        },
        "id": {
          "description": "Unique job id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the job.\r\nPossible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.",
          "type": "string",
          "readOnly": true
        },
        "durationInSeconds": {
          "format": "double",
          "description": "Duration of the job in seconds.",
          "type": "number",
          "readOnly": true
        },
        "message": {
          "description": "Status message to capture more details of the job.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "Error Code when job failed.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "lastActionDateTime": {
          "format": "date-time",
          "description": "Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "OAuthProviderListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OAuthProvider"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "OAuthToken": {
      "description": "Schema of OAuth token resource.",
      "required": [
        "authProviderId",
        "partyId"
      ],
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party ID for this OAuth config.",
          "type": "string"
        },
        "authProviderId": {
          "description": "ID of the OAuth provider resource containing app information.",
          "minLength": 1,
          "type": "string"
        },
        "isValid": {
          "description": "An optional flag indicating whether the token is a valid or expired (Default value: true).",
          "default": true,
          "type": "boolean"
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        }
      }
    },
    "OAuthTokenListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OAuthToken"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "Party": {
      "description": "Schema of party resource.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "PartyListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Party"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "PlantTissueAnalysis": {
      "description": "Api Model for plant tissue analysis object.",
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Id of the associated Party.",
          "type": "string",
          "readOnly": true
        },
        "fieldId": {
          "description": "Id of the associated Field.",
          "type": "string"
        },
        "cropId": {
          "description": "Id of the associated Crop.",
          "type": "string"
        },
        "cropProductId": {
          "description": "Id of the associated Crop product.",
          "type": "string"
        },
        "seasonId": {
          "description": "Id of the associated Season.",
          "type": "string"
        },
        "plantingDateTime": {
          "format": "date-time",
          "description": "Planting datetime for this plant tissue analysis.",
          "type": "string"
        },
        "growthStage": {
          "description": "Growth stage for this plant tissue analysis.",
          "maxLength": 200,
          "minLength": 0,
          "type": "string"
        },
        "plantPart": {
          "description": "Plant part for this plant tissue analysis.",
          "maxLength": 200,
          "minLength": 0,
          "type": "string"
        },
        "plantPosition": {
          "description": "Plant position for this plant tissue analysis.",
          "maxLength": 200,
          "minLength": 0,
          "type": "string"
        },
        "plantAppearance": {
          "description": "Plant appearance for this plant tissue analysis.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "sampleCollectionCondition": {
          "description": "Sample collection condition for this plant tissue analysis.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "sampleCollectionDateTime": {
          "format": "date-time",
          "description": "Sample collection dateTime for this plant tissue analysis.",
          "type": "string"
        },
        "sampleReceivedDateTime": {
          "format": "date-time",
          "description": "Sample received dateTime.",
          "type": "string"
        },
        "sampleTestResultDateTime": {
          "format": "date-time",
          "description": "Sample test result dateTime for this plant tissue analysis.",
          "type": "string"
        },
        "labDetails": {
          "$ref": "#/definitions/LabDetails"
        },
        "attachmentsLink": {
          "description": "Link for attachments.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "PlantTissueAnalysisListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlantTissueAnalysis"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "PlantingData": {
      "description": "Schema of planting data resource.",
      "type": "object",
      "properties": {
        "avgPlantingRate": {
          "$ref": "#/definitions/Measure"
        },
        "totalMaterial": {
          "$ref": "#/definitions/Measure"
        },
        "avgMaterial": {
          "$ref": "#/definitions/Measure"
        },
        "plantingProductDetails": {
          "description": "Planting product details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlantingProductDetail"
          }
        },
        "area": {
          "$ref": "#/definitions/Measure"
        },
        "operationModifiedDateTime": {
          "format": "date-time",
          "description": "Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.\r\nNote: this will be specified by the source provider itself.",
          "type": "string",
          "example": "2021-02-10T11:10:21Z"
        },
        "operationStartDateTime": {
          "format": "date-time",
          "description": "Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "example": "2020-12-31T11:10:21Z"
        },
        "operationEndDateTime": {
          "format": "date-time",
          "description": "End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "example": "2021-01-31T11:10:21Z"
        },
        "attachmentsLink": {
          "description": "Link for attachments.",
          "type": "string",
          "readOnly": true
        },
        "associatedBoundaryId": {
          "description": "Optional boundary ID of the field for which operation was applied.",
          "type": "string"
        },
        "partyId": {
          "description": "Party ID which belongs to the operation data.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "PlantingDataListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlantingData"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "PlantingProductDetail": {
      "description": "Schema for Planting product detail.",
      "type": "object",
      "properties": {
        "productName": {
          "description": "Name of the product.",
          "type": "string"
        },
        "area": {
          "$ref": "#/definitions/Measure"
        },
        "totalMaterial": {
          "$ref": "#/definitions/Measure"
        },
        "avgMaterial": {
          "$ref": "#/definitions/Measure"
        }
      }
    },
    "Point": {
      "description": "Point geometry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "required": [
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "coordinates": {
              "description": "Gets or sets the coordinate of this point.\r\nIt must be an array of 2 or 3 elements for a 2D or 3D system.",
              "maximum": 3,
              "minimum": 2,
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Point"
    },
    "Polygon": {
      "description": "Polygon geometry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "required": [
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "coordinates": {
              "description": "Gets or sets type of the GeoJSON Object.\r\nIt must be an array of linear ring coordinate arrays.\r\nFor Polygons with more than one of these rings, the first MUST be the exterior ring,\r\nand any others MUST be interior rings.",
              "minItems": 1,
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "format": "double",
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Polygon"
    },
    "Port": {
      "description": "Schema for storing port values.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the port.",
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Type of port digital/analog.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "Prescription": {
      "description": "Api Model for Prescription object.",
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "type": "string",
          "readOnly": true
        },
        "prescriptionMapId": {
          "description": "Prescription map Id.",
          "type": "string"
        },
        "productCode": {
          "description": "Product Code.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "productName": {
          "description": "Product name.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "type": {
          "description": "Prescription type.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "measurements": {
          "description": "Measures.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Measure"
          }
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "PrescriptionListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Prescription"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "PrescriptionMap": {
      "description": "Api Model for Prescription Map object.",
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Prescription map type.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "seasonId": {
          "description": "Season Id.",
          "type": "string"
        },
        "cropId": {
          "description": "Crop Id.",
          "type": "string"
        },
        "fieldId": {
          "description": "Field Id.",
          "type": "string"
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "PrescriptionMapListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrescriptionMap"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "ProductDetails": {
      "description": "Model for representing ProductDetails object.",
      "type": "object",
      "properties": {
        "rate": {
          "description": "Rate of the product.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "instruction": {
          "description": "Instruction of the resource.",
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "product": {
          "description": "Product of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "SatelliteData": {
      "description": "Data Model for SatelliteIngestionJobRequest.",
      "type": "object",
      "properties": {
        "imageNames": {
          "description": "List of ImageNames.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "NDVI"
          ]
        },
        "imageFormats": {
          "description": "List of ImageFormats. Available value: TIF.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "TIF"
          ]
        },
        "imageResolutions": {
          "description": "List of ImageResolutions in meters. Available values: 10, 20, 60.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          },
          "example": [
            10
          ]
        }
      }
    },
    "SatelliteDataIngestionJob": {
      "description": "Schema of satellite data ingestion job.",
      "required": [
        "boundaryId",
        "endDateTime",
        "partyId",
        "source",
        "startDateTime"
      ],
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "minLength": 1,
          "type": "string"
        },
        "boundaryId": {
          "description": "The id of the boundary object for which satellite data is being fetched.",
          "minLength": 1,
          "type": "string"
        },
        "startDateTime": {
          "format": "date-time",
          "description": "Start Date.",
          "type": "string"
        },
        "endDateTime": {
          "format": "date-time",
          "description": "End Date.",
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/DataProvider"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "data": {
          "$ref": "#/definitions/SatelliteData"
        },
        "id": {
          "description": "Unique job id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the job.\r\nPossible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.",
          "type": "string",
          "readOnly": true
        },
        "durationInSeconds": {
          "format": "double",
          "description": "Duration of the job in seconds.",
          "type": "number",
          "readOnly": true
        },
        "message": {
          "description": "Status message to capture more details of the job.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "Error Code when job failed.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "lastActionDateTime": {
          "format": "date-time",
          "description": "Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "Scene": {
      "description": "Schema of scene resource.",
      "type": "object",
      "properties": {
        "sceneDateTime": {
          "format": "date-time",
          "description": "Date-time of the scene, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string"
        },
        "provider": {
          "description": "Data provider of the scene.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "source": {
          "description": "Data source of the scene.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "imageFiles": {
          "description": "Collection of image files.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageFile"
          }
        },
        "imageFormat": {
          "$ref": "#/definitions/ImageFormat"
        },
        "cloudCoverPercentage": {
          "format": "double",
          "description": "Cloud cover percentage of the scene.",
          "maximum": 100,
          "minimum": 0,
          "type": "number"
        },
        "darkPixelPercentage": {
          "format": "double",
          "description": "Dark pixel percentage of the scene.",
          "maximum": 100,
          "minimum": 0,
          "type": "number"
        },
        "ndviMedianValue": {
          "format": "double",
          "description": "Median of NDVI of the scene.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        },
        "boundaryId": {
          "description": "Boundary ID which belongs to the scene.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "partyId": {
          "description": "Party ID which belongs to the scene.",
          "type": "string"
        },
        "id": {
          "description": "Unique scene resource ID.",
          "type": "string"
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SceneListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Scene"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "SearchBoundaryQuery": {
      "description": "SearchAllBoundaries and SearchBoundaries parameters.",
      "type": "object",
      "properties": {
        "ids": {
          "description": "Ids of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "names": {
          "description": "Names of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "propertyFilters": {
          "description": "Filters on key-value pairs within the Properties object.\r\ne.g. \"{testKey} eq {testValue}\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statuses": {
          "description": "Statuses of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minCreatedDateTime": {
          "format": "date-time",
          "description": "Minimum creation date of resource (inclusive).",
          "type": "string"
        },
        "maxCreatedDateTime": {
          "format": "date-time",
          "description": "Maximum creation date of resource (inclusive).",
          "type": "string"
        },
        "minLastModifiedDateTime": {
          "format": "date-time",
          "description": "Minimum last modified date of resource (inclusive).",
          "type": "string"
        },
        "maxLastModifiedDateTime": {
          "format": "date-time",
          "description": "Maximum last modified date of resource (inclusive).",
          "type": "string"
        },
        "maxPageSize": {
          "format": "int32",
          "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
          "default": 50,
          "maximum": 1000,
          "minimum": 10,
          "type": "integer"
        },
        "skipToken": {
          "description": "Skip token for getting next set of results.",
          "type": "string"
        },
        "parentType": {
          "description": "Type of the parent it belongs to.",
          "enum": [
            "Field",
            "SeasonalField",
            "Zone",
            "Prescription",
            "PlantTissueAnalysis",
            "ApplicationData",
            "PlantingData",
            "TillageData",
            "HarvestData"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "BoundaryParentType",
            "modelAsString": true
          }
        },
        "type": {
          "description": "Type it belongs to.",
          "type": "string"
        },
        "parentIds": {
          "description": "Parent Ids of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minArea": {
          "format": "double",
          "description": "Minimum acreage of the boundary (inclusive).",
          "type": "number"
        },
        "maxArea": {
          "format": "double",
          "description": "Maximum acreage of the boundary (inclusive).",
          "type": "number"
        },
        "intersectsWithGeometry": {
          "$ref": "#/definitions/GeoJsonObject"
        }
      }
    },
    "SearchFeaturesQuery": {
      "description": "Search stac Features parameters.",
      "required": [
        "endDateTime",
        "startDateTime"
      ],
      "type": "object",
      "properties": {
        "startDateTime": {
          "format": "date-time",
          "description": "Start datetime of the time interval in which to search for Features.",
          "type": "string"
        },
        "endDateTime": {
          "format": "date-time",
          "description": "End datetime of the time interval in which to search for Features.",
          "type": "string"
        },
        "intersects": {
          "$ref": "#/definitions/GeoJsonObject"
        },
        "bbox": {
          "description": "Only features that have a geometry that intersects the bounding box are selected.\r\nThe bounding box is provided as four numbers. The coordinate reference system of the values is WGS84 longitude/latitude.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "featureIds": {
          "description": "Array of feature ids to return.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SearchFeaturesResponse": {
      "description": "Paged response contains list of features and next property to get the next set of results.",
      "required": [
        "features"
      ],
      "type": "object",
      "properties": {
        "features": {
          "description": "List of features.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StacFeature"
          }
        },
        "nextLink": {
          "description": "URL to do the POST request with same filters,\r\nto get next set of features.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Season": {
      "description": "Schema of season resource.",
      "type": "object",
      "properties": {
        "startDateTime": {
          "format": "date-time",
          "description": "Season start datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string"
        },
        "endDateTime": {
          "format": "date-time",
          "description": "Season end datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string"
        },
        "year": {
          "format": "int32",
          "description": "Season year.",
          "type": "integer"
        },
        "geographicIdentifier": {
          "description": "Geographic Identifier.",
          "type": "string"
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "SeasonListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Season"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "SeasonalField": {
      "description": "Schema of seasonal field resource.",
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "type": "string",
          "readOnly": true
        },
        "farmId": {
          "description": "Id of the associated Farm.",
          "type": "string"
        },
        "fieldId": {
          "description": "Id of the associated Field.",
          "type": "string"
        },
        "seasonId": {
          "description": "Id of the season it belongs to.",
          "type": "string"
        },
        "cropProductIds": {
          "description": "CropProduct ids.",
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cropId": {
          "description": "Id of the crop it belongs to.",
          "type": "string"
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "SeasonalFieldListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeasonalField"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "Sensor": {
      "description": "Sensor API model.",
      "type": "object",
      "properties": {
        "sensorDataModelId": {
          "description": "Id of the associated sensor data model.",
          "type": "string"
        },
        "integrationId": {
          "description": "Integration id for the device.",
          "type": "string"
        },
        "hardwareId": {
          "description": "Id of the associated hardware.",
          "type": "string"
        },
        "deviceId": {
          "description": "Id of the associated device.",
          "type": "string"
        },
        "type": {
          "description": "Type of sensor.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "port": {
          "$ref": "#/definitions/Port"
        },
        "depthInMeters": {
          "description": "Depth of each sensor measure in meters.\r\nLike sensor moisture at 2m, 4m, 6m.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "sensorPartnerId": {
          "description": "Id of the associated sensor partner.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and\r\nonly string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "SensorDataModel": {
      "description": "SensorModel API model.",
      "required": [
        "measures"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of sensor.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "manufacturer": {
          "description": "Sensor manufacturer.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "productCode": {
          "description": "Sensor productCode.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "measures": {
          "description": "Map of sensor type to sensor measures.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SensorDataModelMeasure"
          }
        },
        "sensorPartnerId": {
          "description": "Id of the associated sensor partner.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and\r\nonly string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "SensorDataModelListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SensorDataModel"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "SensorDataModelMeasure": {
      "description": "Sensor model measure details.",
      "required": [
        "dataType"
      ],
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of sensor measure.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "dataType": {
          "description": "Sensor measure data type.",
          "maxLength": 100,
          "minLength": 2,
          "enum": [
            "Bool",
            "Double",
            "DateTime",
            "Long",
            "String"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SensorDataType",
            "modelAsString": true
          }
        },
        "type": {
          "description": "Measurement type of sensor data.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "unit": {
          "description": "Unit of sensor measure.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "properties": {
          "description": "A collection of key value pairs for sensor data model.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a model and\r\nonly string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        }
      }
    },
    "SensorEvent": {
      "description": "Sensor event response model.",
      "type": "object",
      "properties": {
        "sensorId": {
          "description": "Id of the sensor.",
          "type": "string"
        },
        "sensorPartnerId": {
          "description": "Id of the sensor partner.",
          "type": "string"
        },
        "partyId": {
          "description": "Id of the associated party.",
          "type": "string"
        },
        "boundaryId": {
          "description": "Id of the associated boundary.",
          "type": "string"
        },
        "eventDateTime": {
          "format": "date-time",
          "description": "DateTime of sensor event observation.",
          "type": "string"
        },
        "ingestionDateTime": {
          "format": "date-time",
          "description": "DateTime of sensor event ingestion to data store.",
          "type": "string"
        },
        "measures": {
          "description": "Sensor measures.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "SensorEventListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SensorEvent"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "SensorListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sensor"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "SensorMapping": {
      "description": "SensorMapping API model.",
      "type": "object",
      "properties": {
        "sensorId": {
          "description": "Id of the associated sensor.",
          "type": "string"
        },
        "sensorPartnerId": {
          "description": "Id of the associated sensor partner.",
          "type": "string"
        },
        "partyId": {
          "description": "Id of the associated party.",
          "type": "string"
        },
        "boundaryId": {
          "description": "Id of the associated boundary.",
          "type": "string"
        },
        "id": {
          "description": "Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and\r\nonly string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "SensorMappingListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SensorMapping"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "SensorPartnerIntegrationCheckConsentResponse": {
      "description": "Sensor partner integration check consent response.",
      "type": "object",
      "properties": {
        "consented": {
          "description": "Flag to determine the status of partner integration consent.",
          "type": "boolean"
        },
        "sensorPartnerId": {
          "description": "Id of the associated sensor partner.",
          "type": "string",
          "readOnly": true
        },
        "integrationId": {
          "description": "Id of the integration.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SensorPartnerIntegrationGenerateConsentLinkResponse": {
      "description": "Sensor partner integration generate consent link response.",
      "type": "object",
      "properties": {
        "consentLink": {
          "description": "Consent link.",
          "type": "string",
          "readOnly": true
        },
        "consentExpiryDateTime": {
          "format": "date-time",
          "description": "Consent expiry date time, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string"
        }
      }
    },
    "SensorPartnerIntegrationModel": {
      "description": "Sensor partner integration model.",
      "type": "object",
      "properties": {
        "integrationId": {
          "description": "Id of the integration.",
          "type": "string",
          "readOnly": true
        },
        "partyId": {
          "description": "Id of the party.",
          "type": "string"
        },
        "sensorPartnerId": {
          "description": "Id of the associated sensor partner.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id of the resource.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and\r\nonly string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "SensorPartnerIntegrationModelListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SensorPartnerIntegrationModel"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "SensorPlacementModelJob": {
      "description": "Schema of sensor placement model job.",
      "required": [
        "boundaryId",
        "inferenceEndDateTime",
        "inferenceStartDateTime",
        "isRanked",
        "modelVersion",
        "partyId",
        "satelliteProvider",
        "satelliteSource",
        "sensorType"
      ],
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "minLength": 1,
          "type": "string"
        },
        "boundaryId": {
          "description": "The id of the boundary object for which sensor placement is being calculated.",
          "minLength": 1,
          "type": "string"
        },
        "modelVersion": {
          "description": "The version of the sensor placement model to be run.",
          "minLength": 1,
          "type": "string"
        },
        "inferenceStartDateTime": {
          "format": "date-time",
          "description": "Start datetime for satellite data to be pulled.",
          "type": "string"
        },
        "inferenceEndDateTime": {
          "format": "date-time",
          "description": "End datetime for satellite data to be pulled.",
          "type": "string"
        },
        "satelliteProvider": {
          "description": "Provider of satellite data. Available Value: Microsoft.",
          "minLength": 1,
          "enum": [
            "Microsoft"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DataProvider",
            "modelAsString": true
          }
        },
        "satelliteSource": {
          "description": "Source of satellite data. Available Value: Sentinel_2_L2A.",
          "minLength": 1,
          "enum": [
            "Sentinel_2_L2A",
            "Sentinel_2_L1C"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "Source",
            "modelAsString": true
          }
        },
        "sensorType": {
          "description": "SensorType. The sensor placement map generated for sensor type (e.g., soil moisture, soil temperature, npk). Available Value: SoilMoisture.",
          "minLength": 1,
          "type": "string"
        },
        "isRanked": {
          "description": "IsRanked, if True the sensor placements will be ranked.",
          "type": "boolean"
        },
        "id": {
          "description": "Unique job id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the job.\r\nPossible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.",
          "type": "string",
          "readOnly": true
        },
        "durationInSeconds": {
          "format": "double",
          "description": "Duration of the job in seconds.",
          "type": "number",
          "readOnly": true
        },
        "message": {
          "description": "Status message to capture more details of the job.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "Error Code when job failed.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "lastActionDateTime": {
          "format": "date-time",
          "description": "Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "SensorRenewConnectionStringModel": {
      "description": "Model for renewing sensor's connection string.",
      "required": [
        "connectionStringType"
      ],
      "type": "object",
      "properties": {
        "connectionStringType": {
          "description": "Specifies the type of connection string key to be renewed valid values - Primary/Secondary/Both.",
          "maxLength": 100,
          "minLength": 0,
          "enum": [
            "Primary",
            "Secondary",
            "Both"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RenewConnectionStringType",
            "modelAsString": true
          }
        }
      }
    },
    "SoilMoistureModelJob": {
      "description": "Schema of soil moisture model job.",
      "required": [
        "boundaryId",
        "imageFormat",
        "imageResolution",
        "inferenceEndDateTime",
        "inferenceStartDateTime",
        "modelVersion",
        "partyId",
        "satelliteProvider",
        "satelliteSource",
        "sensorDataModelId",
        "sensorDefinition",
        "sensorPartnerId"
      ],
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id.",
          "minLength": 1,
          "type": "string"
        },
        "boundaryId": {
          "description": "The id of the boundary object for which soil moisture is being calculated.",
          "minLength": 1,
          "type": "string"
        },
        "sensorDataModelId": {
          "description": "Sensor data model Id.",
          "minLength": 1,
          "type": "string"
        },
        "sensorPartnerId": {
          "description": "Sensor partner Id.",
          "minLength": 1,
          "type": "string"
        },
        "inferenceStartDateTime": {
          "format": "date-time",
          "description": "Inference start date time for soil moisture calculations.",
          "type": "string"
        },
        "inferenceEndDateTime": {
          "format": "date-time",
          "description": "Inference end date time for soil moisture calculations.",
          "type": "string"
        },
        "satelliteProvider": {
          "description": "Provider of satellite data. Available Value: Microsoft.",
          "minLength": 1,
          "enum": [
            "Microsoft"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DataProvider",
            "modelAsString": true
          }
        },
        "satelliteSource": {
          "description": "Source of satellite data. Available Value: Sentinel_2_L2A.",
          "minLength": 1,
          "enum": [
            "Sentinel_2_L2A",
            "Sentinel_2_L1C"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "Source",
            "modelAsString": true
          }
        },
        "imageResolution": {
          "format": "double",
          "description": "ImageResolution in meters. Available values: 10, 20, 60.",
          "type": "number"
        },
        "imageFormat": {
          "description": "ImageFormat. Available value: TIF.",
          "minLength": 1,
          "enum": [
            "TIF"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ImageFormat",
            "modelAsString": true
          }
        },
        "modelVersion": {
          "description": "The version of the soil moisture model to be run.",
          "minLength": 1,
          "type": "string"
        },
        "sensorDefinition": {
          "$ref": "#/definitions/SoilMoistureModelSensorDefinition"
        },
        "id": {
          "description": "Unique job id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the job.\r\nPossible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.",
          "type": "string",
          "readOnly": true
        },
        "durationInSeconds": {
          "format": "double",
          "description": "Duration of the job in seconds.",
          "type": "number",
          "readOnly": true
        },
        "message": {
          "description": "Status message to capture more details of the job.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "Error Code when job failed.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "lastActionDateTime": {
          "format": "date-time",
          "description": "Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "SoilMoistureModelSensorDefinition": {
      "description": "Schema for storing sensor definition keywords.",
      "required": [
        "maxProperty",
        "minProperty",
        "sensorMeasurement"
      ],
      "type": "object",
      "properties": {
        "sensorMeasurement": {
          "description": "The measurement name for sensor measure in sensorDataModel.",
          "minLength": 1,
          "type": "string"
        },
        "minProperty": {
          "description": "The measurement name for minimum measurement value.",
          "minLength": 1,
          "type": "string"
        },
        "maxProperty": {
          "description": "The measurement name for maximum measurement value.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "SolutionInference": {
      "description": "SolutionInference request model.",
      "required": [
        "requestPath"
      ],
      "type": "object",
      "properties": {
        "requestPath": {
          "description": "RequestPath containing the api-version, query parameters and path route to be called for partner request.\r\nExpected format is \"/{api-version}/{resourceExposedByPartner}/{customerDefinedJobId}?query1=value1\".\r\nNot following this format may result into validation errors.",
          "minLength": 1,
          "type": "string"
        },
        "partnerRequestBody": {
          "description": "Api input parameters required by partner to trigger/cancel job request.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "Source": {
      "description": "Source of satellite data.",
      "enum": [
        "Sentinel_2_L2A",
        "Sentinel_2_L1C"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "Source",
        "modelAsString": true
      }
    },
    "StacFeature": {
      "description": "Schema of STAC Feature(Item).\r\nRefer for spec: https://github.com/radiantearth/stac-spec/blob/v1.0.0-beta.2/item-spec/item-spec.md#item-fields.",
      "required": [
        "assets",
        "id",
        "links",
        "properties",
        "stacVersion",
        "type"
      ],
      "type": "object",
      "properties": {
        "stacVersion": {
          "description": "The STAC version the Feature implements.",
          "minLength": 1,
          "type": "string"
        },
        "stacExtensions": {
          "description": "A list of extensions the Feature implements.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "Provider identifier. Globally unique ID by Data provider.",
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Type of the GeoJSON Object. It's value is always Feature.",
          "minLength": 1,
          "type": "string"
        },
        "geometry": {
          "description": "Defines the full footprint of the asset represented by this item.\r\nIts a GeoJSON geometry.",
          "type": "object"
        },
        "bbox": {
          "description": "Bounding box of the feature.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "properties": {
          "description": "A dictionary of additional metadata for the item.",
          "type": "object"
        },
        "links": {
          "description": "List of link objects to resources and related URLs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StacFeatureLink"
          }
        },
        "assets": {
          "description": "Dictionary of asset objects, each with a unique key.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/StacFeatureAsset"
          }
        },
        "collection": {
          "description": "The id of the STAC Collection this Feature references.",
          "type": "string"
        }
      }
    },
    "StacFeatureAsset": {
      "description": "Schema of STAC Feature's Asset.\r\nRefer for spec: https://github.com/radiantearth/stac-spec/blob/v1.0.0-beta.2/item-spec/item-spec.md#asset-object.",
      "required": [
        "href"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to the asset object.",
          "minLength": 1,
          "type": "string"
        },
        "title": {
          "description": "The displayed title for clients and users.",
          "type": "string"
        },
        "description": {
          "description": "A description of the Asset providing additional details, such as how it was processed or created.",
          "type": "string"
        },
        "type": {
          "description": "Media type of the asset.",
          "type": "string"
        },
        "roles": {
          "description": "The semantic roles of the asset, similar to the use of rel in links.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "StacFeatureLink": {
      "description": "The Link object describes a relationship of this Feature with another entity.\r\nRefer for spec: https://github.com/radiantearth/stac-spec/blob/v1.0.0-beta.2/item-spec/item-spec.md#link-object.",
      "required": [
        "href",
        "rel"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "The actual link in the format of an URL.",
          "minLength": 1,
          "type": "string"
        },
        "rel": {
          "description": "Relationship between the current document and the linked document.",
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Media type of the referenced entity.",
          "type": "string"
        },
        "title": {
          "description": "A human readable title to be used in rendered displays of the link.",
          "type": "string"
        }
      }
    },
    "TillageData": {
      "description": "Schema of tillage data resource.",
      "type": "object",
      "properties": {
        "tillageDepth": {
          "$ref": "#/definitions/Measure"
        },
        "tillagePressure": {
          "$ref": "#/definitions/Measure"
        },
        "area": {
          "$ref": "#/definitions/Measure"
        },
        "operationModifiedDateTime": {
          "format": "date-time",
          "description": "Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.\r\nNote: this will be specified by the source provider itself.",
          "type": "string",
          "example": "2021-02-10T11:10:21Z"
        },
        "operationStartDateTime": {
          "format": "date-time",
          "description": "Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "example": "2020-12-31T11:10:21Z"
        },
        "operationEndDateTime": {
          "format": "date-time",
          "description": "End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "example": "2021-01-31T11:10:21Z"
        },
        "attachmentsLink": {
          "description": "Link for attachments.",
          "type": "string",
          "readOnly": true
        },
        "associatedBoundaryId": {
          "description": "Optional boundary ID of the field for which operation was applied.",
          "type": "string"
        },
        "partyId": {
          "description": "Party ID which belongs to the operation data.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "TillageDataListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TillageData"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "WeatherDataDeleteJob": {
      "description": "Schema of weather data delete job.",
      "required": [
        "boundaryId",
        "extensionId",
        "partyId"
      ],
      "type": "object",
      "properties": {
        "extensionId": {
          "description": "Id of the extension to be used for the providerInput. eg. DTN.ClearAg.",
          "maxLength": 100,
          "minLength": 2,
          "pattern": "^[a-zA-Z]{3,50}[.][a-zA-Z]{3,100}$",
          "type": "string"
        },
        "partyId": {
          "description": "The id of the party for which weather data is being fetched.",
          "minLength": 1,
          "type": "string"
        },
        "boundaryId": {
          "description": "The id of the boundary object for which weather data is being fetched.",
          "minLength": 1,
          "type": "string"
        },
        "weatherDataType": {
          "description": "Type of weather data. Possible values include: 'forecast' , 'historical'.",
          "type": "string"
        },
        "granularity": {
          "description": "Granularity of weather data. Possible values include: 'daily' , 'hourly'.",
          "type": "string"
        },
        "startDateTime": {
          "format": "date-time",
          "description": "Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string"
        },
        "endDateTime": {
          "format": "date-time",
          "description": "Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string"
        },
        "id": {
          "description": "Unique job id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the job.\r\nPossible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.",
          "type": "string",
          "readOnly": true
        },
        "durationInSeconds": {
          "format": "double",
          "description": "Duration of the job in seconds.",
          "type": "number",
          "readOnly": true
        },
        "message": {
          "description": "Status message to capture more details of the job.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "Error Code when job failed.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "lastActionDateTime": {
          "format": "date-time",
          "description": "Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "WeatherDataErrors": {
      "description": "Model for errors encountered for all failed locations.",
      "type": "object",
      "properties": {
        "locations": {
          "description": "List of errors encountered for all failed locations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorForLocation"
          }
        }
      }
    },
    "WeatherDataForPassthrough": {
      "description": "Schema of weather data.",
      "type": "object",
      "properties": {
        "wetBulbTemperature": {
          "$ref": "#/definitions/Measures"
        },
        "cloudCover": {
          "$ref": "#/definitions/Measures"
        },
        "dayOfWeek": {
          "description": "Day of week.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dayOrNight": {
          "description": "This data field indicates whether it is daytime or nighttime based on the Local Apparent Time of the location.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expirationTime": {
          "description": "Expiration time in Utc format.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "iconCode": {
          "description": "This number is the key to the weather icon lookup. The data field shows the icon number that is matched to represent the observed weather conditions.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "iconCodeExtend": {
          "description": "Code representing full set sensible weather.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasPrecipitation": {
          "description": "Indicates whether there is precipitation or not.",
          "type": "array",
          "items": {
            "type": "boolean"
          }
        },
        "pressureMeanSeaLevel": {
          "$ref": "#/definitions/Measures"
        },
        "relativeHumidity": {
          "$ref": "#/definitions/Measures"
        },
        "temperature": {
          "$ref": "#/definitions/Measures"
        },
        "temperatureDewPoint": {
          "$ref": "#/definitions/Measures"
        },
        "temperatureFeelsLike": {
          "$ref": "#/definitions/Measures"
        },
        "temperatureHeatIndex": {
          "$ref": "#/definitions/Measures"
        },
        "temperatureWindChill": {
          "$ref": "#/definitions/Measures"
        },
        "uvDescription": {
          "description": "The UV Index Description which complements the UV Index value by providing an associated level of risk of skin damage due to exposure (-2 = Not Available, -1 = No Report, 0 to 2 = Low, 3 to 5 = Moderate, 6 to 7 = High, 8 to 10 = Very High, 11 to 16 = Extreme).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uvIndex": {
          "description": "Hourly maximum UV index.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validTimeLocal": {
          "description": "Time forecast is valid in local apparent time.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validTime": {
          "description": "Time forecast is valid in Utc format.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "visibility": {
          "$ref": "#/definitions/Measures"
        },
        "windDirection": {
          "$ref": "#/definitions/Measures"
        },
        "windGust": {
          "$ref": "#/definitions/Measures"
        },
        "windSpeed": {
          "$ref": "#/definitions/Measures"
        },
        "wxPhraseLong": {
          "description": "Hourly sensible weather phrase containing longer description.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "wxPhraseShort": {
          "description": "Hourly sensible weather phrase containing short description.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "additionalAttributes": {
          "description": "A collection of key value pairs that belongs to the resource. Each pair must not have a key greater than 50 characters and must not have a value greater than 250 characters. Note: A maximum of 100 key value pairs can be provided for a resource and only string and numeral values are supported.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "WeatherDataIngestionJob": {
      "description": "Schema of weather ingestion job.",
      "required": [
        "boundaryId",
        "extensionApiInput",
        "extensionApiName",
        "extensionId",
        "partyId"
      ],
      "type": "object",
      "properties": {
        "boundaryId": {
          "description": "The id of the boundary object for which weather data is being fetched.",
          "minLength": 1,
          "type": "string"
        },
        "partyId": {
          "description": "The id of the party for which weather data is being fetched.",
          "minLength": 1,
          "type": "string"
        },
        "extensionId": {
          "description": "Id of the extension to be used for the providerInput. eg. DTN.ClearAg.",
          "maxLength": 100,
          "minLength": 2,
          "pattern": "^[a-zA-Z]{3,50}[.][a-zA-Z]{3,100}$",
          "type": "string"
        },
        "extensionApiName": {
          "description": "Extension api name to which request is to be made.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "extensionApiInput": {
          "description": "Extension api input dictionary which would be used to feed request query/body/parameter information.",
          "type": "object",
          "additionalProperties": {}
        },
        "extensionDataProviderAppId": {
          "description": "App id of the weather data provider.",
          "maxLength": 200,
          "minLength": 2,
          "type": "string"
        },
        "extensionDataProviderApiKey": {
          "description": "Api key of the weather data provider.",
          "maxLength": 200,
          "minLength": 2,
          "type": "string"
        },
        "id": {
          "description": "Unique job id.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the job.\r\nPossible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.",
          "type": "string",
          "readOnly": true
        },
        "durationInSeconds": {
          "format": "double",
          "description": "Duration of the job in seconds.",
          "type": "number",
          "readOnly": true
        },
        "message": {
          "description": "Status message to capture more details of the job.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "Error Code when job failed.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "lastActionDateTime": {
          "format": "date-time",
          "description": "Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "WeatherData": {
      "description": "Schema of weather data.",
      "required": [
        "boundaryId",
        "dateTime",
        "extensionId",
        "extensionVersion",
        "granularity",
        "location",
        "partyId",
        "weatherDataType"
      ],
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party ID.",
          "minLength": 1,
          "type": "string"
        },
        "boundaryId": {
          "description": "Boundary ID.",
          "minLength": 1,
          "type": "string"
        },
        "extensionId": {
          "description": "ID of the weather extension.",
          "minLength": 1,
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "dateTime": {
          "format": "date-time",
          "description": "Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string"
        },
        "unitSystemCode": {
          "description": "Unit System like US/SI etc.",
          "type": "string"
        },
        "extensionVersion": {
          "description": "Version of the weather data extension.",
          "minLength": 1,
          "type": "string"
        },
        "weatherDataType": {
          "description": "Type of weather data (forecast/historical).",
          "minLength": 1,
          "type": "string"
        },
        "granularity": {
          "description": "Granularity of weather data (daily/hourly).",
          "minLength": 1,
          "type": "string"
        },
        "cloudCover": {
          "$ref": "#/definitions/Measure"
        },
        "dewPoint": {
          "$ref": "#/definitions/Measure"
        },
        "growingDegreeDay": {
          "$ref": "#/definitions/Measure"
        },
        "precipitation": {
          "$ref": "#/definitions/Measure"
        },
        "pressure": {
          "$ref": "#/definitions/Measure"
        },
        "relativeHumidity": {
          "$ref": "#/definitions/Measure"
        },
        "soilMoisture": {
          "$ref": "#/definitions/Measure"
        },
        "soilTemperature": {
          "$ref": "#/definitions/Measure"
        },
        "temperature": {
          "$ref": "#/definitions/Measure"
        },
        "visibility": {
          "$ref": "#/definitions/Measure"
        },
        "wetBulbTemperature": {
          "$ref": "#/definitions/Measure"
        },
        "windChill": {
          "$ref": "#/definitions/Measure"
        },
        "windDirection": {
          "$ref": "#/definitions/Measure"
        },
        "windGust": {
          "$ref": "#/definitions/Measure"
        },
        "windSpeed": {
          "$ref": "#/definitions/Measure"
        },
        "id": {
          "description": "Weather data ID.",
          "type": "string"
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 250 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "WeatherDataListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeatherData"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    },
    "WeatherDataProviderRequest": {
      "description": "Schema of weather data provider request.",
      "required": [
        "extensionApiName",
        "extensionId",
        "providerApiKey",
        "units"
      ],
      "type": "object",
      "properties": {
        "locations": {
          "description": "List of locations for which weather data need to be fetched from the provider.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeatherLocation"
          }
        },
        "providerAppId": {
          "description": "App id of the weather data provider.",
          "maxLength": 200,
          "minLength": 2,
          "type": "string"
        },
        "providerApiKey": {
          "description": "Api key of the weather data provider.",
          "maxLength": 200,
          "minLength": 2,
          "type": "string"
        },
        "extensionId": {
          "description": "Id of the extension to be used for the providerInput. eg. DTN.ClearAg.",
          "minLength": 1,
          "type": "string"
        },
        "extensionApiName": {
          "description": "Extension api name to which request is to be made.",
          "minLength": 1,
          "type": "string"
        },
        "language": {
          "description": "Language (IETF BCP 47 language tag) in which search results should be returned by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.",
          "type": "string"
        },
        "startTimeHours": {
          "format": "int32",
          "description": "Start of time range. Hour 0 represents the current hour. (Only applicable for DTN.ClearAg extension.)",
          "maximum": 240,
          "minimum": 0,
          "type": "integer"
        },
        "endTimeHours": {
          "format": "int32",
          "description": "End of time range. Supported ranges are from 0 to 240. (Only applicable for DTN.ClearAg extension.)",
          "maximum": 240,
          "minimum": 0,
          "type": "integer"
        },
        "duration": {
          "format": "int32",
          "description": "Specifies for how many days the daily forecast responses are returned. Available values are 1, 5, 10, 25 and 45. (Only applicable for Azure Weather Maps extension.)",
          "type": "integer"
        },
        "units": {
          "description": "Units for which request to data provider is to be sent. Supported values are 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's' for Metric SI units.",
          "minLength": 1,
          "type": "string"
        },
        "additionalParams": {
          "$ref": "#/definitions/AdditionalProviderParameters"
        }
      }
    },
    "WeatherDataProviderResponse": {
      "description": "Schema of Weather Data Provider Response.",
      "required": [
        "weatherMetadata"
      ],
      "type": "object",
      "properties": {
        "weatherMetadata": {
          "$ref": "#/definitions/WeatherMetadata"
        },
        "status": {
          "description": "Indicates a Succeeded, Failed, or PartiallySucceeded response.",
          "enum": [
            "Succeeded",
            "Failed",
            "PartiallySucceeded"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "Status",
            "modelAsString": true
          }
        },
        "locations": {
          "description": "List of weather data for all the weather locations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeatherLocationData"
          }
        },
        "errors": {
          "$ref": "#/definitions/WeatherDataErrors"
        }
      }
    },
    "WeatherLocation": {
      "description": "Schema of Location data.",
      "required": [
        "type",
        "value"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Location Type eg. LatLong/IataCode/IcaoCode/Placeid/PostalKey.",
          "maxLength": 25,
          "minLength": 2,
          "enum": [
            "LatLong",
            "IataCode",
            "IcaoCode",
            "PlaceId",
            "PostalKey"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LocationType",
            "modelAsString": true
          }
        },
        "value": {
          "description": "Location Value eg. \"10,-25\" for LocationType Type \"LatLong\".",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "WeatherLocationData": {
      "description": "Schema of WeatherLocationData data.",
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/WeatherLocation"
        },
        "requestCompletionTime": {
          "description": "Request Completion Time in Utc of the location.",
          "type": "string"
        },
        "lastRefreshedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last requested, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "example": "2020-12-31T11:10:21Z."
        },
        "data": {
          "$ref": "#/definitions/WeatherDataForPassthrough"
        }
      }
    },
    "WeatherMetadata": {
      "description": "Schema of Weather Metadata.",
      "required": [
        "extensionApiName",
        "extensionId",
        "extensionVersion",
        "units",
        "weatherDataType"
      ],
      "type": "object",
      "properties": {
        "extensionVersion": {
          "description": "Version of the weather data extension.",
          "minLength": 1,
          "type": "string"
        },
        "weatherDataType": {
          "description": "Type of weather data (forecast/historical).",
          "minLength": 1,
          "type": "string"
        },
        "extensionId": {
          "description": "Id of the extension to be used for the providerInput. eg. DTN.ClearAg.",
          "minLength": 1,
          "type": "string"
        },
        "extensionApiName": {
          "description": "Extension api name to which request is to be made.",
          "minLength": 1,
          "type": "string"
        },
        "language": {
          "description": "Language (IETF BCP 47 language tag) in which search results should be returned by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.",
          "type": "string"
        },
        "startTimeHours": {
          "format": "int32",
          "description": "Start of time range. Hour 0 represents the current hour. (Only applicable for DTN.ClearAg extension.)",
          "maximum": 240,
          "minimum": 0,
          "type": "integer"
        },
        "endTimeHours": {
          "format": "int32",
          "description": "End of time range. (Only applicable for DTN.ClearAg extension.)",
          "maximum": 240,
          "minimum": 0,
          "type": "integer"
        },
        "duration": {
          "format": "int32",
          "description": "Specifies for how many days the daily forecast responses are returned. Available values are 1, 5, 10, 25 and 45. (Only applicable for Azure Weather Maps extension.)",
          "type": "integer"
        },
        "units": {
          "description": "Units for which request to data provider is to be sent. Supported values are 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's' for Metric SI units.",
          "minLength": 1,
          "type": "string"
        },
        "additionalParams": {
          "$ref": "#/definitions/AdditionalProviderParameters"
        }
      }
    },
    "Zone": {
      "description": "Api Model for Zone object.",
      "type": "object",
      "properties": {
        "partyId": {
          "description": "Party Id associated with the Zone.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Type of the Zone.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "managementZoneId": {
          "description": "Management Zone Id associated with the Zone.",
          "type": "string"
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "ZoneListResponse": {
      "description": "Paged response contains list of requested objects and a URL link to get the next set of results.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "List of requested objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Zone"
          }
        },
        "skipToken": {
          "description": "Token used in retrieving the next page. If null, there are no additional pages.",
          "type": "string"
        },
        "nextLink": {
          "description": "Continuation link (absolute URI) to the next page of results in the list.",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Please provide a valid bearer token for authorized API calls. Note that you might need to clear your browser cache if you tried un-authenticated calls before."
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
