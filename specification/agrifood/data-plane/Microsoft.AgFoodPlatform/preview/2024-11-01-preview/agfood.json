{
    "swagger": "2.0",
    "info": {
      "title": "Azure AgFoodPlatform Data Plane Service",
      "description": "APIs documentation for Azure AgPlatform DataPlane Service.",
      "version": "2024-11-01-preview"
    },
    "x-ms-parameterized-host": {
        "hostTemplate": "{endpoint}",
        "useSchemePrefix": false,
        "parameters": [
          {
            "name": "endpoint",
            "in": "path",
            "description": "The host name of the namespace, e.g. admaInstanceName.farmbeats.azure.net",
            "required": true,
            "type": "string",
            "format": "uri",
            "x-ms-skip-url-encoding": true
          }
        ]
    },
    "paths": {
      "/catalogs": {
        "get": {
          "tags": [
            "Catalogs"
          ],
          "description": "Returns a paginated list of Catalog resources.",
          "operationId": "Catalogs_List",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "ids",
              "description": "Ids of the resource.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "names",
              "description": "Names of the resource.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "propertyFilters",
              "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "statuses",
              "description": "Statuses of the resource.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "minCreatedDateTime",
              "description": "Minimum creation date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "maxCreatedDateTime",
              "description": "Maximum creation date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "minLastModifiedDateTime",
              "description": "Minimum last modified date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "maxLastModifiedDateTime",
              "description": "Maximum last modified date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "maxPageSize",
              "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
              "type": "integer",
              "format": "int32",
              "default": 50,
              "maximum": 1000,
              "minimum": 10
            },
            {
              "in": "query",
              "name": "skipToken",
              "description": "Skip token for getting next set of results.",
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/CatalogListResponse"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-pageable": {
            "nextLinkName": "nextLink"
          },
          "x-ms-examples": {
            "Catalogs_List": {
              "$ref": "./examples/Catalogs_List.json"
            }
          }
        }
      },
      "/catalogs/{catalogId}": {
        "get": {
          "tags": [
            "Catalogs"
          ],
          "description": "Gets a specified Catalog resource.",
          "operationId": "Catalogs_Get",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "catalogId",
              "description": "Id of the Catalog.",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/Catalog"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Catalogs_Get": {
              "$ref": "./examples/Catalogs_Get.json"
            }
          }
        },
        "patch": {
          "tags": [
            "Catalogs"
          ],
          "description": "Creates or updates a Catalog resource.",
          "operationId": "Catalogs_CreateOrUpdate",
          "consumes": [
            "application/merge-patch+json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "catalogId",
              "description": "Id of the Catalog resource.",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "catalog",
              "description": "Catalog resource payload to create or update.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Catalog"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/Catalog"
              }
            },
            "201": {
              "description": "Created",
              "schema": {
                "$ref": "#/definitions/Catalog"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Catalogs_CreateOrUpdate": {
              "$ref": "./examples/Catalogs_CreateOrUpdate.json"
            }
          }
        },
        "delete": {
          "tags": [
            "Catalogs"
          ],
          "description": "Deletes Catalog for given Catalog id.",
          "operationId": "Catalogs_Delete",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "catalogId",
              "description": "Id of Catalog to be deleted.",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "No Content"
            },
            "200": {
              "description": "Success"
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Catalogs_Delete": {
              "$ref": "./examples/Catalogs_Delete.json"
            }
          }
        }
      },
      "/catalogs/{catalogId}/collections": {
        "get": {
          "tags": [
            "Collections"
          ],
          "description": "Returns a paginated list of Collection resources.",
          "operationId": "Collections_List",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "ids",
              "description": "Ids of the resource.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "names",
              "description": "Names of the resource.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "propertyFilters",
              "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "statuses",
              "description": "Statuses of the resource.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "minCreatedDateTime",
              "description": "Minimum creation date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "maxCreatedDateTime",
              "description": "Maximum creation date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "minLastModifiedDateTime",
              "description": "Minimum last modified date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "maxLastModifiedDateTime",
              "description": "Maximum last modified date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "maxPageSize",
              "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
              "type": "integer",
              "format": "int32",
              "default": 50,
              "maximum": 1000,
              "minimum": 10
            },
            {
              "in": "query",
              "name": "skipToken",
              "description": "Skip token for getting next set of results.",
              "type": "string"
            },
            {
              "in": "path",
              "name": "catalogId",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/CollectionListResponse"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-pageable": {
            "nextLinkName": "nextLink"
          },
          "x-ms-examples": {
            "Collections_List": {
              "$ref": "./examples/Collections_List.json"
            }
          }
        }
      },
      "/catalogs/{catalogId}/collections/{collectionId}": {
        "get": {
          "tags": [
            "Collections"
          ],
          "description": "Gets a specified Collection resource.",
          "operationId": "Collections_Get",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "collectionId",
              "description": "Id of the Collection.",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "catalogId",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/Collection"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Collections_Get": {
              "$ref": "./examples/Collections_Get.json"
            }
          }
        },
        "patch": {
          "tags": [
            "Collections"
          ],
          "description": "Creates or updates a Collection resource.",
          "operationId": "Collections_CreateOrUpdate",
          "consumes": [
            "application/merge-patch+json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "collectionId",
              "description": "Id of the Collection resource.",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "catalogId",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "collection",
              "description": "Collection resource payload to create or update.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Collection"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/Collection"
              }
            },
            "201": {
              "description": "Created",
              "schema": {
                "$ref": "#/definitions/Collection"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Collections_CreateOrUpdate": {
              "$ref": "./examples/Collections_CreateOrUpdate.json"
            }
          }
        },
        "delete": {
          "tags": [
            "Collections"
          ],
          "description": "Deletes Collection for a given Collection id.",
          "operationId": "Collections_Delete",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "collectionId",
              "description": "Id of Collection to be deleted.",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "catalogId",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "No Content"
            },
            "200": {
              "description": "Success"
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Collections_Delete": {
              "$ref": "./examples/Collections_Delete.json"
            }
          }
        }
      },
      "/catalogs/{catalogId}/collections/{collectionId}/items": {
        "post": {
          "tags": [
            "Items"
          ],
          "description": "Search for Items across all parties by intersecting geometry.",
          "operationId": "Items_GetAllItemsUnderCollection",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "maxPageSize",
              "description": "Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000, Default Value = 50.",
              "type": "integer",
              "format": "int32",
              "default": 50,
              "maximum": 1000,
              "minimum": 10
            },
            {
              "in": "path",
              "name": "catalogId",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "collectionId",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "searchItemQuery",
              "description": "Query filters.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ItemQuery"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/ItemListResponse"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Items_GetAllItemsUnderCollection": {
              "$ref": "./examples/Items_GetAllItemsUnderCollection.json"
            }
          }
        }
      },
      "/catalogs/{catalogId}/collections/{collectionId}/items/{itemId}": {
        "get": {
          "tags": [
            "Items"
          ],
          "description": "Gets a specified Item resource.",
          "operationId": "Items_Get",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "itemId",
              "description": "Id of the Item.",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "catalogId",
              "description": "Id of catalog.",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "collectionId",
              "description": "Id of collection.",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/Item"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Items_Get": {
              "$ref": "./examples/Items_Get.json"
            }
          }
        },
        "patch": {
          "tags": [
            "Items"
          ],
          "description": "Creates or updates a Item resource.",
          "operationId": "Items_CreateOrUpdate",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "itemId",
              "description": "Id of the Item resource.",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "catalogId",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "collectionId",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "item",
              "description": "Item resource payload to create or update.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Item"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/Item"
              }
            },
            "201": {
              "description": "Created",
              "schema": {
                "$ref": "#/definitions/Item"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Items_CreateOrUpdate": {
              "$ref": "./examples/Items_CreateOrUpdate.json"
            }
          }
        },
        "delete": {
          "tags": [
            "Items"
          ],
          "description": "Deletes Item for given Item id.",
          "operationId": "Items_Delete",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "itemId",
              "description": "Id of Item to be deleted.",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "catalogId",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "collectionId",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "204": {
              "description": "No Content"
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Items_Delete": {
              "$ref": "./examples/Items_Delete.json"
            }
          }
        }
      },
      "/catalogs/{catalogId}/items:search": {
        "post": {
          "tags": [
            "Items"
          ],
          "description": "Search for Items across all parties by intersecting geometry.",
          "operationId": "Items_SearchByGeo",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "maxPageSize",
              "description": "Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000, Default Value = 50.",
              "type": "integer",
              "format": "int32",
              "default": 50,
              "maximum": 1000,
              "minimum": 10
            },
            {
              "in": "path",
              "name": "catalogId",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "searchItemQuery",
              "description": "Query filters.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SearchItemQuery"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/ItemListResponse"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Items_SearchByGeo": {
              "$ref": "./examples/Items_SearchByGeo.json"
            }
          }
        }
      },
      "/Schemas": {
        "get": {
          "tags": [
            "Schemas"
          ],
          "description": "Returns a paginated list of Schema resources.",
          "operationId": "Schemas_List",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "ids",
              "description": "Ids of the resource.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "names",
              "description": "Names of the resource.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "propertyFilters",
              "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "statuses",
              "description": "Statuses of the resource.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "query",
              "name": "minCreatedDateTime",
              "description": "Minimum creation date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "maxCreatedDateTime",
              "description": "Maximum creation date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "minLastModifiedDateTime",
              "description": "Minimum last modified date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "maxLastModifiedDateTime",
              "description": "Maximum last modified date of resource (inclusive).",
              "type": "string",
              "format": "date-time"
            },
            {
              "in": "query",
              "name": "maxPageSize",
              "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
              "type": "integer",
              "format": "int32",
              "default": 50,
              "maximum": 1000,
              "minimum": 10
            },
            {
              "in": "query",
              "name": "skipToken",
              "description": "Skip token for getting next set of results.",
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/SchemaListResponse"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-pageable": {
            "nextLinkName": "nextLink"
          },
          "x-ms-examples": {
            "Schemas_List": {
              "$ref": "./examples/Schemas_List.json"
            }
          }
        }
      },
      "/Schemas/{schemaId}": {
        "get": {
          "tags": [
            "Schemas"
          ],
          "description": "Gets a specified Schema resource.",
          "operationId": "Schemas_Get",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "schemaId",
              "description": "Id of the Schema.",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/Schema"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Schemas_Get": {
              "$ref": "./examples/Schemas_Get.json"
            }
          }
        },
        "patch": {
          "tags": [
            "Schemas"
          ],
          "description": "Creates or updates a Schema resource.",
          "operationId": "Schemas_CreateOrUpdate",
          "consumes": [
            "application/merge-patch+json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "schemaId",
              "description": "Id of the Schema resource.",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "schema",
              "description": "Schema resource payload to create or update.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Schema"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/Schema"
              }
            },
            "201": {
              "description": "Created",
              "schema": {
                "$ref": "#/definitions/Schema"
              }
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Schemas_CreateOrUpdate": {
              "$ref": "./examples/Schemas_CreateOrUpdate.json"
            }
          }
        },
        "delete": {
          "tags": [
            "Schemas"
          ],
          "description": "Deletes Schema for given Schema id.",
          "operationId": "Schemas_Delete",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "schemaId",
              "description": "Id of Schema to be deleted.",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "api-version",
              "description": "The requested API version",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "No Content"
            },
            "200": {
              "description": "Success"
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              },
              "headers": {
                "x-ms-error-code": {
                  "type": "string",
                  "x-ms-client-name": "ErrorCode"
                }
              },
              "x-ms-error-response": true
            }
          },
          "x-ms-examples": {
            "Schemas_Delete": {
              "$ref": "./examples/Schemas_Delete.json"
            }
          }
        }
      }
    },
    "definitions": {
      "ApiKeyAuthCredentials": {
        "description": "Api Key Auth Credentials class for API Key based Auth.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/AuthCredentials"
          },
          {
            "required": [
              "apiKey"
            ],
            "type": "object",
            "properties": {
              "apiKey": {
                "$ref": "#/definitions/KeyVaultProperties"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "ApiKeyAuthCredentials"
      },
      "Asset": {
        "description": "Asset.",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/definitions/DataFormat"
          },
          "name": {
            "description": "Name.",
            "type": "string"
          },
          "href": {
            "description": "Href.",
            "type": "string"
          }
        }
      },
      "AuthCredentials": {
        "description": "AuthCredentials abstract base class for Auth Purpose.",
        "required": [
          "kind"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "$ref": "#/definitions/AuthCredentialsKind"
          }
        },
        "discriminator": "kind"
      },
      "AuthCredentialsKind": {
        "description": "Enum for different types of AuthCredentials supported.",
        "enum": [
          "OAuthClientCredentials",
          "ApiKeyAuthCredentials"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "AuthCredentialsKind",
          "modelAsString": true
        }
      },
      "Catalog": {
        "description": "Catalog.",
        "type": "object",
        "properties": {
          "links": {
            "description": "Links for referencing other objects.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Link"
            }
          },
          "id": {
            "description": "Unique resource ID.",
            "type": "string",
            "readOnly": true
          },
          "eTag": {
            "description": "The ETag value to implement optimistic concurrency.",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "description": "Status of the resource.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "createdDateTime": {
            "format": "date-time",
            "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "readOnly": true,
            "example": "2020-12-31T11:10:21Z"
          },
          "modifiedDateTime": {
            "format": "date-time",
            "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "readOnly": true,
            "example": "2020-12-31T11:10:21Z"
          },
          "source": {
            "description": "Source of the resource.",
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "name": {
            "description": "Name to identify resource.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Textual description of the resource.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "createdBy": {
            "description": "Created by user/tenant id.",
            "type": "string",
            "readOnly": true
          },
          "modifiedBy": {
            "description": "Modified by user/tenant id.",
            "type": "string",
            "readOnly": true
          },
          "properties": {
            "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
            "type": "object",
            "additionalProperties": { },
            "example": {
              "key1": "value1",
              "key2": 123.45
            }
          }
        }
      },
      "CatalogCollection": {
        "description": "Schema for storing catalog and collection id.",
        "type": "object",
        "properties": {
          "catalogId": {
            "description": "Catalog Id.",
            "type": "string"
          },
          "collectionId": {
            "description": "Collection Id.",
            "type": "string"
          }
        }
      },
      "CatalogListResponse": {
        "description": "Paged response contains list of requested objects and a skipToken to get the next set of results.",
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "description": "List of requested objects.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "skipToken": {
            "description": "Token used in retrieving the next page. If null, there are no additional pages.",
            "type": "string"
          }
        }
      },
      "Collection": {
        "description": "Collection.",
        "required": [
          "schemaId",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of Collection.",
            "minLength": 1,
            "enum": [
              "Blob",
              "Timeseries",
              "External"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "DataSource",
              "modelAsString": true
            }
          },
          "schemaId": {
            "description": "Schema Foreign Key.",
            "minLength": 1,
            "type": "string"
          },
          "catalogId": {
            "description": "CatalogId.",
            "type": "string",
            "readOnly": true
          },
          "links": {
            "description": "Links for referencing other objects.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Link"
            }
          },
          "id": {
            "description": "Unique resource ID.",
            "type": "string",
            "readOnly": true
          },
          "eTag": {
            "description": "The ETag value to implement optimistic concurrency.",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "description": "Status of the resource.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "createdDateTime": {
            "format": "date-time",
            "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "readOnly": true,
            "example": "2020-12-31T11:10:21Z"
          },
          "modifiedDateTime": {
            "format": "date-time",
            "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "readOnly": true,
            "example": "2020-12-31T11:10:21Z"
          },
          "source": {
            "description": "Source of the resource.",
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "name": {
            "description": "Name to identify resource.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Textual description of the resource.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "createdBy": {
            "description": "Created by user/tenant id.",
            "type": "string",
            "readOnly": true
          },
          "modifiedBy": {
            "description": "Modified by user/tenant id.",
            "type": "string",
            "readOnly": true
          },
          "properties": {
            "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
            "type": "object",
            "additionalProperties": { },
            "example": {
              "key1": "value1",
              "key2": 123.45
            }
          }
        }
      },
      "CollectionListResponse": {
        "description": "Paged response contains list of requested objects and a skipToken to get the next set of results.",
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "description": "List of requested objects.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Collection"
            }
          },
          "skipToken": {
            "description": "Token used in retrieving the next page. If null, there are no additional pages.",
            "type": "string"
          }
        }
      },
      "DataFormat": {
        "description": "Type of dataset.",
        "enum": [
          "Image",
          "Shapefile",
          "Binary"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "DataFormat",
          "modelAsString": true
        }
      },
      "DestinationType": {
        "description": "DestinationType.",
        "enum": [
          "Catalog",
          "Collection",
          "Item",
          "Asset"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "DestinationType",
          "modelAsString": true
        }
      },
      "Error": {
        "description": "An error from the Azure AgPlatform service.",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "description": "Server-defined set of error codes.",
            "minLength": 1,
            "type": "string"
          },
          "message": {
            "description": "Human-readable representation of the error.",
            "minLength": 1,
            "type": "string"
          },
          "target": {
            "description": "Target of the error.",
            "type": "string"
          },
          "details": {
            "description": "Array of details about specific errors that led to this reported error.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "innererror": {
            "$ref": "#/definitions/InnerError"
          }
        }
      },
      "ErrorResponse": {
        "description": "An error response from the Azure AgPlatform service. See https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses for ErrorResponse reference document.",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/definitions/Error"
          },
          "traceId": {
            "description": "Unique trace Id.",
            "type": "string"
          }
        }
      },
      "GeoJsonObject": {
        "description": "GeoJSON (For more details: https://geojson.org/). Note: Coordinates are expected in [Longitude, Latitude] format.",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/definitions/GeoJsonObjectType"
          }
        },
        "discriminator": "type"
      },
      "GeoJsonObjectType": {
        "description": "GeoJSON object type.",
        "enum": [
          "Point",
          "Polygon",
          "MultiPolygon"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "GeoJsonObjectType",
          "modelAsString": true
        }
      },
      "InnerError": {
        "description": "Inner error containing list of errors.See https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#innererror--object for InnerError reference document.",
        "type": "object",
        "properties": {
          "code": {
            "description": "Specific error code than was provided by the containing error.",
            "type": "string"
          },
          "innererror": {
            "$ref": "#/definitions/InnerError"
          }
        }
      },
      "Item": {
        "description": "Item.",
        "required": [
          "data",
          "ownerItemId"
        ],
        "type": "object",
        "properties": {
          "links": {
            "description": "Links.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Link"
            }
          },
          "data": {
            "description": "Schema for records under the dataset.",
            "type": "object",
            "additionalProperties": { }
          },
          "ownerItemId": {
            "description": "OwnerItemId.",
            "minLength": 1,
            "type": "string"
          },
          "catalogId": {
            "description": "CatalogId.",
            "type": "string",
            "readOnly": true
          },
          "collectionId": {
            "description": "CollectionId.",
            "type": "string",
            "readOnly": true
          },
          "assets": {
            "description": "Assets.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Asset"
            }
          },
          "id": {
            "description": "Unique resource ID.",
            "type": "string",
            "readOnly": true
          },
          "eTag": {
            "description": "The ETag value to implement optimistic concurrency.",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "description": "Status of the resource.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "createdDateTime": {
            "format": "date-time",
            "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "readOnly": true,
            "example": "2020-12-31T11:10:21Z"
          },
          "modifiedDateTime": {
            "format": "date-time",
            "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "readOnly": true,
            "example": "2020-12-31T11:10:21Z"
          },
          "source": {
            "description": "Source of the resource.",
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "name": {
            "description": "Name to identify resource.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Textual description of the resource.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "createdBy": {
            "description": "Created by user/tenant id.",
            "type": "string",
            "readOnly": true
          },
          "modifiedBy": {
            "description": "Modified by user/tenant id.",
            "type": "string",
            "readOnly": true
          },
          "properties": {
            "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
            "type": "object",
            "additionalProperties": { },
            "example": {
              "key1": "value1",
              "key2": 123.45
            }
          }
        }
      },
      "ItemListResponse": {
        "description": "Paged response contains list of requested objects and a skipToken to get the next set of results.",
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "description": "List of requested objects.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Item"
            }
          },
          "skipToken": {
            "description": "Token used in retrieving the next page. If null, there are no additional pages.",
            "type": "string"
          }
        }
      },
      "ItemQuery": {
        "description": "ItemQuery.",
        "type": "object",
        "properties": {
          "ids": {
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ownerItemIds": {
            "description": "Owner Item Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "names": {
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertyFilters": {
            "description": "Filters on key-value pairs within the Properties object.\r\ne.g. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dataFilters": {
            "description": "Filters on key-value pairs within the Data object.\r\ne.g. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "statuses": {
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minCreatedDateTime": {
            "format": "date-time",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string"
          },
          "maxCreatedDateTime": {
            "format": "date-time",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string"
          },
          "minLastModifiedDateTime": {
            "format": "date-time",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string"
          },
          "maxLastModifiedDateTime": {
            "format": "date-time",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string"
          },
          "skipToken": {
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          "intersectsWithGeometry": {
            "$ref": "#/definitions/GeoJsonObject"
          }
        }
      },
      "KeyVaultProperties": {
        "description": "Properties of the key vault.",
        "required": [
          "keyName",
          "keyVaultUri",
          "keyVersion"
        ],
        "type": "object",
        "properties": {
          "keyVaultUri": {
            "description": "Uri of the key vault.",
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "keyName": {
            "description": "Name of Key Vault key.",
            "maxLength": 256,
            "minLength": 2,
            "type": "string"
          },
          "keyVersion": {
            "description": "Version of Key Vault key.",
            "maxLength": 256,
            "minLength": 2,
            "type": "string"
          }
        }
      },
      "Link": {
        "description": "Link.",
        "type": "object",
        "properties": {
          "rel": {
            "$ref": "#/definitions/RelationshipType"
          },
          "href": {
            "description": "Href.",
            "type": "string"
          },
          "type": {
            "$ref": "#/definitions/DestinationType"
          }
        }
      },
      "MultiPolygon": {
        "description": "MultiPolygon geometry.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/GeoJsonObject"
          },
          {
            "required": [
              "coordinates"
            ],
            "type": "object",
            "properties": {
              "coordinates": {
                "description": "Gets or sets Coordinates of GeoJSON Object.\r\nIt must be an array of polygons, each polygon contains list of linear rings.\r\nFor Polygons with more than one of these rings, the first MUST be the exterior ring,\r\nand any others MUST be interior rings.",
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "format": "double",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "x-ms-discriminator-value": "MultiPolygon"
      },
      "OAuthClientCredentials": {
        "description": "OAuthClientCredentials for clientId clientSecret auth.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/AuthCredentials"
          },
          {
            "required": [
              "clientId",
              "clientSecret"
            ],
            "type": "object",
            "properties": {
              "clientId": {
                "description": "ClientId associated with the provider.",
                "minLength": 1,
                "type": "string"
              },
              "clientSecret": {
                "$ref": "#/definitions/KeyVaultProperties"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "OAuthClientCredentials"
      },
      "Point": {
        "description": "Point geometry.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/GeoJsonObject"
          },
          {
            "required": [
              "coordinates"
            ],
            "type": "object",
            "properties": {
              "coordinates": {
                "description": "Gets or sets the coordinate of this point.\r\nIt must be an array of 2 or 3 elements for a 2D or 3D system.",
                "maximum": 3,
                "minimum": 2,
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                }
              }
            }
          }
        ],
        "x-ms-discriminator-value": "Point"
      },
      "Polygon": {
        "description": "Polygon geometry.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/GeoJsonObject"
          },
          {
            "required": [
              "coordinates"
            ],
            "type": "object",
            "properties": {
              "coordinates": {
                "description": "Gets or sets type of the GeoJSON Object.\r\nIt must be an array of linear ring coordinate arrays.\r\nFor Polygons with more than one of these rings, the first MUST be the exterior ring,\r\nand any others MUST be interior rings.",
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "format": "double",
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        ],
        "x-ms-discriminator-value": "Polygon"
      },
      "RelationshipType": {
        "description": "Type of relationship.",
        "enum": [
          "DerivedFrom",
          "Child",
          "Parent"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "RelationshipType",
          "modelAsString": true
        }
      },
      "Schema": {
        "description": "SchemaModel.",
        "required": [
          "schemaModel"
        ],
        "type": "object",
        "properties": {
          "dependentCollections": {
            "description": "Dependent Collections.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CatalogCollection"
            },
            "readOnly": true
          },
          "schemaModel": {
            "description": "Schema.",
            "type": "object",
            "additionalProperties": { }
          },
          "id": {
            "description": "Unique resource ID.",
            "type": "string",
            "readOnly": true
          },
          "eTag": {
            "description": "The ETag value to implement optimistic concurrency.",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "description": "Status of the resource.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "createdDateTime": {
            "format": "date-time",
            "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "readOnly": true,
            "example": "2020-12-31T11:10:21Z"
          },
          "modifiedDateTime": {
            "format": "date-time",
            "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
            "type": "string",
            "readOnly": true,
            "example": "2020-12-31T11:10:21Z"
          },
          "source": {
            "description": "Source of the resource.",
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "name": {
            "description": "Name to identify resource.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Textual description of the resource.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "createdBy": {
            "description": "Created by user/tenant id.",
            "type": "string",
            "readOnly": true
          },
          "modifiedBy": {
            "description": "Modified by user/tenant id.",
            "type": "string",
            "readOnly": true
          },
          "properties": {
            "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
            "type": "object",
            "additionalProperties": { }
          }
        },
        "example": {
          "schemaModel": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 2,
                "maxLength": 100
              }
            },
            "company": {
              "type": "string"
            },
            "substanceNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "substancePercentages": {
              "type": "number",
              "maximum": 100,
              "minimum": 0
            },
            "required": [
              "company",
              "name"
            ]
          }
        }
      },
      "SchemaListResponse": {
        "description": "Paged response contains list of requested objects and a skipToken to get the next set of results.",
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "description": "List of requested objects.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Schema"
            }
          },
          "skipToken": {
            "description": "Token used in retrieving the next page. If null, there are no additional pages.",
            "type": "string"
          }
        }
      },
      "SearchItemQuery": {
        "description": "ItemQuery.",
        "type": "object",
        "properties": {
          "collectionIds": {
            "description": "Collection Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ids": {
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ownerItemIds": {
            "description": "Owner Item Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "names": {
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertyFilters": {
            "description": "Filters on key-value pairs within the Properties object.\r\ne.g. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dataFilters": {
            "description": "Filters on key-value pairs within the Data object.\r\ne.g. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "statuses": {
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minCreatedDateTime": {
            "format": "date-time",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string"
          },
          "maxCreatedDateTime": {
            "format": "date-time",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string"
          },
          "minLastModifiedDateTime": {
            "format": "date-time",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string"
          },
          "maxLastModifiedDateTime": {
            "format": "date-time",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string"
          },
          "skipToken": {
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          "intersectsWithGeometry": {
            "$ref": "#/definitions/GeoJsonObject"
          }
        }
      }
    },
    "securityDefinitions": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Please provide a valid bearer token for authorized API calls. Note that you might need to clear your browser cache if you tried un-authenticated calls before."
      }
    },
    "security": [
      {
        "Bearer": [ ]
      }
    ]
  }