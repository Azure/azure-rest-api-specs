{
  "swagger": "2.0",
  "info": {
    "title": "ConfluentManagementClient",
    "version": "2021-12-01",
    "description": "// FIXME: (miissing-service-description) Add service description",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "Organization"
    }
  ],
  "paths": {
    "/providers/Azure.ResourceManager.Confluent/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Confluent/organizations": {
      "get": {
        "operationId": "Organization_ListBySubscription",
        "tags": [
          "Organization"
        ],
        "description": "List all organizations under the specified subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrganizationResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements": {
      "get": {
        "operationId": "MarketplaceAgreementsOperations_List",
        "summary": "List Confluent marketplace agreements in the subscription.",
        "description": "List Confluent marketplace agreements in the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Microsoft Azure subscription id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedConfluentAgreementResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements/default": {
      "put": {
        "operationId": "MarketplaceAgreementsOperations_Create",
        "summary": "Create Confluent Marketplace agreement in the subscription.",
        "description": "Create Confluent Marketplace agreement in the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Microsoft Azure subscription id",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Confluent Marketplace Agreement resource",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfluentAgreementResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ConfluentAgreementResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Confluent/organizations": {
      "get": {
        "operationId": "Organization_ListByResourceGroup",
        "tags": [
          "Organization"
        ],
        "description": "List all Organizations under the specified resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrganizationResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Confluent/organizations/{organizationName}": {
      "get": {
        "operationId": "Organization_Get",
        "tags": [
          "Organization"
        ],
        "description": "Get the properties of a specific Organization resource.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "organizationName",
            "in": "path",
            "description": "Organization resource name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "Organization_Create",
        "tags": [
          "Organization"
        ],
        "description": "Create Organization resource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "organizationName",
            "in": "path",
            "description": "Organization resource name",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'OrganizationResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            }
          },
          "201": {
            "description": "Resource 'OrganizationResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "Organization_Update",
        "tags": [
          "Organization"
        ],
        "description": "Update Organization resource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "organizationName",
            "in": "path",
            "description": "Organization resource name",
            "required": true,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "operationId": "Organization_Delete",
        "tags": [
          "Organization"
        ],
        "description": "Delete Organization resource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "organizationName",
            "in": "path",
            "description": "Organization resource name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/validations/{organizationName}/orgvalidate": {
      "post": {
        "operationId": "ValidationsOperations_ValidateOrganization",
        "summary": "Organization Validate proxy resource",
        "description": "Organization Validate proxy resource",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Microsoft Azure subscription id",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "Resource group name",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationName",
            "in": "path",
            "description": "Organization resource name",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Organization resource model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OrganizationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "ConfluentAgreementProperties": {
      "type": "object",
      "description": "Terms properties for Marketplace and Confluent.",
      "properties": {
        "publisher": {
          "type": "string",
          "description": "Publisher identifier string."
        },
        "product": {
          "type": "string",
          "description": "Product identifier string."
        },
        "plan": {
          "type": "string",
          "description": "Plan identifier string."
        },
        "licenseTextLink": {
          "type": "string",
          "description": "Link to HTML with Microsoft and Publisher terms."
        },
        "privacyPolicyLink": {
          "type": "string",
          "description": "Link to the privacy policy of the publisher."
        },
        "retrieveDatetime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time in UTC of when the terms were accepted. This is empty if Accepted is false."
        },
        "signature": {
          "type": "string",
          "description": "Terms signature."
        },
        "accepted": {
          "type": "boolean",
          "description": "If any version of the terms have been accepted, otherwise false."
        }
      }
    },
    "ConfluentAgreementResource": {
      "type": "object",
      "description": "Agreement Terms definition",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ARM id of the resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the agreement.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the agreement.",
          "readOnly": true
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/systemData",
          "description": "Metadata pertaining to creation and last modification of the resource",
          "readOnly": true
        },
        "properties": {
          "$ref": "#/definitions/ConfluentAgreementProperties",
          "description": "Represents the properties of the resource."
        }
      }
    },
    "CreatedByType": {
      "type": "string",
      "enum": [
        "User",
        "Application",
        "ManagedIdentity",
        "Key"
      ],
      "x-ms-enum": {
        "name": "CreatedByType",
        "modelAsString": true
      }
    },
    "ErrorResponseBody": {
      "type": "object",
      "description": "Response body of Error",
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "Error message",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "Error target",
          "readOnly": true
        },
        "details": {
          "type": "array",
          "description": "Error detail",
          "items": {
            "$ref": "#/definitions/ErrorResponseBody"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "OfferDetail": {
      "type": "object",
      "description": "Confluent Offer detail",
      "properties": {
        "publisherId": {
          "type": "string",
          "description": "Publisher Id",
          "maxLength": 50
        },
        "id": {
          "type": "string",
          "description": "Offer Id",
          "maxLength": 50
        },
        "planId": {
          "type": "string",
          "description": "Offer Plan Id",
          "maxLength": 50
        },
        "planName": {
          "type": "string",
          "description": "Offer Plan Name",
          "maxLength": 50
        },
        "termUnit": {
          "type": "string",
          "description": "Offer Plan Term unit",
          "maxLength": 25
        },
        "status": {
          "$ref": "#/definitions/SaaSOfferStatus",
          "description": "SaaS Offer Status",
          "readOnly": true
        }
      },
      "required": [
        "publisherId",
        "id",
        "planId",
        "planName",
        "termUnit"
      ]
    },
    "OperationResult": {
      "type": "object",
      "description": "An Confluent REST API operation.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Operation name: {provider}/{resource}/{operation}"
        },
        "display": {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationDisplay",
          "description": "The object that represents the operation."
        },
        "isDataAction": {
          "type": "boolean",
          "description": "Indicates whether the operation is a data action"
        }
      }
    },
    "OrganizationResource": {
      "type": "object",
      "description": "Organization resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/OrganizationResourceProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "name": {
          "type": "string",
          "description": "Organization resource name",
          "readOnly": true
        }
      },
      "required": [
        "name"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "OrganizationResourceListResult": {
      "type": "object",
      "description": "The response of a OrganizationResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The OrganizationResource items on this page",
          "items": {
            "$ref": "#/definitions/OrganizationResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "OrganizationResourceProperties": {
      "type": "object",
      "description": "Organization resource property",
      "properties": {
        "createdTime": {
          "type": "string",
          "format": "date-time",
          "description": "The creation time of the resource.",
          "readOnly": true
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisionState",
          "description": "Provision states for confluent RP",
          "readOnly": true
        },
        "organizationId": {
          "type": "string",
          "description": "Id of the Confluent organization.",
          "readOnly": true
        },
        "ssoUrl": {
          "type": "string",
          "description": "SSO url for the Confluent organization.",
          "readOnly": true
        },
        "offerDetail": {
          "$ref": "#/definitions/OfferDetail",
          "description": "Confluent offer detail"
        },
        "userDetail": {
          "$ref": "#/definitions/UserDetail",
          "description": "Subscriber detail"
        }
      },
      "required": [
        "offerDetail",
        "userDetail"
      ]
    },
    "OrganizationResourceUpdate": {
      "type": "object",
      "description": "Organization Resource update",
      "properties": {
        "tags": {
          "type": "object",
          "description": "ARM resource tags",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PagedConfluentAgreementResource": {
      "type": "object",
      "description": "Response of a list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ConfluentAgreementResource items on this page",
          "items": {
            "$ref": "#/definitions/ConfluentAgreementResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ProvisionState": {
      "type": "string",
      "enum": [
        "Accepted",
        "Creating",
        "Updating",
        "Deleting",
        "Succeeded",
        "Failed",
        "Canceled",
        "Deleted",
        "NotSpecified"
      ],
      "x-ms-enum": {
        "name": "ProvisionState",
        "modelAsString": true
      }
    },
    "ResourceProviderDefaultErrorResponse": {
      "type": "object",
      "description": "Default error response for resource provider",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorResponseBody",
          "description": "Response body of Error",
          "readOnly": true
        }
      }
    },
    "SaaSOfferStatus": {
      "type": "string",
      "enum": [
        "Started",
        "PendingFulfillmentStart",
        "InProgress",
        "Subscribed",
        "Suspended",
        "Reinstated",
        "Succeeded",
        "Failed",
        "Unsubscribed",
        "Updating"
      ],
      "x-ms-enum": {
        "name": "SaaSOfferStatus",
        "modelAsString": true
      }
    },
    "UserDetail": {
      "type": "object",
      "description": "Subscriber detail",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name",
          "maxLength": 50
        },
        "lastName": {
          "type": "string",
          "description": "Last name",
          "maxLength": 50
        },
        "emailAddress": {
          "type": "string",
          "description": "Email address",
          "pattern": "^\\S+@\\S+\\.\\S+$"
        }
      },
      "required": [
        "emailAddress"
      ]
    },
    "Versions": {
      "type": "string",
      "description": "The available API versions.",
      "enum": [
        "2021-12-01"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v2021_12_01",
            "value": "2021-12-01"
          }
        ]
      }
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    }
  }
}
