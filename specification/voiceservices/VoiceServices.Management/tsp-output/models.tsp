import "@typespec/rest";
import "@typespec/http";
import "@azure-tools/typespec-azure-resource-manager";

using TypeSpec.Rest;
using TypeSpec.Http;
using Azure.ResourceManager;

namespace Azure.ResourceManager.VoiceServices;

interface Operations extends Azure.ResourceManager.Operations {}

enum ProvisioningState {
  Succeeded,
  Failed,
  Canceled,
}

enum Status {
  @doc("The resource has been created or updated, but the CommunicationsGateway service has not yet been updated to reflect the changes.")
  ChangePending,
  @doc("The CommunicationsGateway service is up and running with the parameters specified in the resource.")
  Complete,
}

enum Connectivity {
  @doc("This deployment connects to the operator network using a Public IP address, e.g. when using MAPS")
  PublicAddress,
}

enum TeamsCodecs {
  PCMA,
  PCMU,
  G722,
  G722_2,
  SILK_8,
  SILK_16,
}

enum E911Type {
  @doc("Emergency calls are not handled different from other calls") Standard,
  @doc("Emergency calls are routed directly to the ESRP") DirectToEsrp,
}

enum CommunicationsPlatform {
  OperatorConnect,
  TeamsPhoneMobile,
}

enum AutoGeneratedDomainNameLabelScope {
  TenantReuse,
  SubscriptionReuse,
  ResourceGroupReuse,
  NoReuse,
}

enum CreatedByType {
  User,
  Application,
  ManagedIdentity,
  Key,
}

enum CheckNameAvailabilityReason {
  Invalid,
  AlreadyExists,
}

enum TestLinePurpose {
  Manual,
  Automated,
}

@doc("Details of the CommunicationsGateway resource.")
model CommunicationsGatewayProperties {
  @doc("Resource provisioning state.")
  @visibility("read")
  provisioningState?: ProvisioningState;

  @doc("The current status of the deployment.")
  @visibility("read")
  status?: Status;

  @doc("The regions in which to deploy the resources needed for Teams Calling")
  @visibility("read", "create", "update")
  serviceLocations: ServiceRegionProperties[];

  @doc("How to connect back to the operator network, e.g. MAPS")
  @visibility("read", "create")
  connectivity: Connectivity;

  @doc("Voice codecs to support")
  @visibility("read", "create", "update")
  codecs: TeamsCodecs[];

  @doc("How to handle 911 calls")
  @visibility("read", "create", "update")
  e911Type: E911Type;

  @doc("What platforms to support")
  @visibility("read", "create", "update")
  platforms: CommunicationsPlatform[];

  @doc("Details of API bridge functionality, if required")
  @visibility("read", "create", "update")
  apiBridge?: Record<unknown>;

  @doc("The scope at which the auto-generated domain name can be re-used")
  @visibility("read", "create")
  autoGeneratedDomainNameLabelScope?: AutoGeneratedDomainNameLabelScope;

  @doc("The autogenerated label used as part of the FQDNs for accessing the Communications Gateway")
  @visibility("read")
  autoGeneratedDomainNameLabel?: string;

  @doc("This number is used in Teams Phone Mobile scenarios for access to the voicemail IVR from the native dialer.")
  @visibility("read", "create", "update")
  teamsVoicemailPilotNumber?: string;

  @doc("Whether an on-premises Mobile Control Point is in use.")
  @visibility("read", "create", "update")
  onPremMcpEnabled?: boolean;

  @doc("A list of dial strings used for emergency calling.")
  @visibility("read", "create", "update")
  emergencyDialStrings?: string[];
}

@doc("The service region configuration needed for Teams Callings.")
model ServiceRegionProperties {
  @doc("The name of the region in which the resources needed for Teams Calling will be deployed.")
  @visibility("read", "create")
  name: string;

  @doc("The configuration used in this region as primary, and other regions as backup.")
  @visibility("read", "create", "update")
  primaryRegionProperties: PrimaryRegionProperties;
}

@doc("The configuration used in this region as primary, and other regions as backup.")
model PrimaryRegionProperties {
  @doc("IP address to use to contact the operator network from this region")
  @visibility("read", "create", "update")
  operatorAddresses: string[];

  @doc("IP address to use to contact the ESRP from this region")
  @visibility("read", "create", "update")
  esrpAddresses?: string[];

  @doc("The allowed source IP address or CIDR ranges for signaling")
  @visibility("read", "create", "update")
  allowedSignalingSourceAddressPrefixes?: string[];

  @doc("The allowed source IP address or CIDR ranges for media")
  @visibility("read", "create", "update")
  allowedMediaSourceAddressPrefixes?: string[];
}

@doc("The check availability request body.")
model CheckNameAvailabilityRequest {
  @doc("The name of the resource for which availability needs to be checked.")
  name?: string;

  @doc("The resource type.")
  type?: string;
}

@doc("The check availability result.")
model CheckNameAvailabilityResponse {
  @doc("Indicates if the resource name is available.")
  nameAvailable?: boolean;

  @doc("The reason why the given name is not available.")
  reason?: CheckNameAvailabilityReason;

  @doc("Detailed reason why the given name is not available.")
  message?: string;
}

@doc("Details of the TestLine resource.")
model TestLineProperties {
  @doc("Resource provisioning state.")
  @visibility("read")
  provisioningState?: ProvisioningState;

  @doc("The phone number")
  @visibility("read", "create", "update")
  phoneNumber: string;

  @doc("Purpose of this test line, e.g. automated or manual testing")
  @visibility("read", "create", "update")
  purpose: TestLinePurpose;
}
