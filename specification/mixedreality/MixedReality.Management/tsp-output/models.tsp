import "@typespec/rest";
import "@typespec/http";
import "@azure-tools/typespec-azure-core";
import "@azure-tools/typespec-azure-resource-manager";

using TypeSpec.Rest;
using TypeSpec.Http;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Foundations;

namespace Microsoft.MixedReality;

interface Operations extends Azure.ResourceManager.Operations {}

/**
 * reason of name unavailable.
 */
enum NameUnavailableReason {
  Invalid,
  AlreadyExists,
}

/**
 * serial of key to be regenerated
 */
@fixed
enum Serial {
  /**
   * The Primary Key
   */
  Primary: 1,

  /**
   * The Secondary Key
   */
  Secondary: 2,
}

/**
 * Operation properties.
 */
model OperationProperties {
  /**
   * Service specification.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * Service specification payload
 */
model ServiceSpecification {
  /**
   * Specifications of the Log for Azure Monitoring
   */
  logSpecifications?: LogSpecification[];

  /**
   * Specifications of the Metrics for Azure Monitoring
   */
  metricSpecifications?: MetricSpecification[];
}

/**
 * Specifications of the Log for Azure Monitoring
 */
model LogSpecification {
  /**
   * Name of the log
   */
  name?: string;

  /**
   * Localized friendly display name of the log
   */
  displayName?: string;

  /**
   * Blob duration of the log
   */
  blobDuration?: string;
}

/**
 * Specifications of the Metrics for Azure Monitoring
 */
model MetricSpecification {
  /**
   * Name of the metric
   */
  name?: string;

  /**
   * Localized friendly display name of the metric
   */
  displayName?: string;

  /**
   * Localized friendly description of the metric
   */
  displayDescription?: string;

  /**
   * Unit that makes sense for the metric
   */
  unit?: string;

  /**
   * Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.
   */
  aggregationType?: string;

  /**
   * Supported aggregation types. Valid values: Average, Minimum, Maximum, Total, Count.
   */
  supportedAggregationTypes?: string[];

  /**
   * Supported time grains. Valid values: PT1M, PT5M, PT15M, PT30M, PT1H, PT6H, PT12H, P1D
   */
  supportedTimeGrainTypes?: string[];

  /**
   * Flag to indicate use of regional Mdm accounts
   */
  enableRegionalMdmAccount?: boolean;

  /**
   * Source mdm account
   */
  sourceMdmAccount?: string;

  /**
   * Source mdm namespace
   */
  sourceMdmNamespace?: string;

  /**
   * Metric filter regex pattern
   */
  metricFilterPattern?: string;

  /**
   * Flag to determine is Zero is returned for time duration where no metric is emitted
   */
  fillGapWithZero?: boolean;

  /**
   * Metric category
   */
  category?: string;

  /**
   * Internal metric name.
   */
  internalMetricName?: string;

  /**
   * Dimensions of the metric
   */
  dimensions?: MetricDimension[];

  /**
   * Locked aggregation type of the metric
   */
  lockedAggregationType?: string;
}

/**
 * Specifications of the Dimension of metrics
 */
model MetricDimension {
  /**
   * Name of the dimension
   */
  name?: string;

  /**
   * Localized friendly display name of the dimension
   */
  displayName?: string;

  /**
   * Internal name of the dimension.
   */
  internalName?: string;

  /**
   * Whether the dimension should be included for the shoebox export scenario.
   */
  toBeExportedForShoebox?: boolean;
}

/**
 * An Error response.
 */
@error
model CloudError {
  /**
   * An Error response.
   */
  error?: CloudErrorBody;
}

/**
 * An error response from Azure.
 */
model CloudErrorBody {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
   */
  code?: string;

  /**
   * A message describing the error, intended to be suitable for displaying in a user interface.
   */
  message?: string;

  /**
   * The target of the particular error. For example, the name of the property in error.
   */
  target?: string;

  /**
   * A list of additional details about the error.
   */
  details?: CloudErrorBody[];
}

/**
 * Check Name Availability Request
 */
model CheckNameAvailabilityRequest {
  /**
   * Resource Name To Verify
   */
  name: string;

  /**
   * Fully qualified resource type which includes provider namespace
   */
  type: string;
}

/**
 * Check Name Availability Response
 */
model CheckNameAvailabilityResponse {
  /**
   * if name Available
   */
  nameAvailable: boolean;

  /**
   * Resource Name To Verify
   */
  reason?: NameUnavailableReason;

  /**
   * detail message
   */
  message?: string;
}

/**
 * Common Properties shared by Mixed Reality Accounts
 */
model MixedRealityAccountProperties {
  /**
   * The name of the storage account associated with this accountId
   */
  storageAccountName?: string;

  /**
   * unique id of certain account.
   */
  @visibility("read")
  accountId?: string;

  /**
   * Correspond domain name of certain Spatial Anchors Account
   */
  @visibility("read")
  accountDomain?: string;
}

/**
 * Identity for the resource.
 */
model Identity {
  /**
   * The principal ID of resource identity.
   */
  @visibility("read")
  principalId?: string;

  /**
   * The tenant ID of resource.
   */
  @visibility("read")
  tenantId?: string;

  /**
   * The identity type.
   */
  type?: "SystemAssigned";
}

/**
 * The resource model definition representing SKU
 */
model Sku {
  /**
   * The name of the SKU. Ex - P3. It is typically a letter+number code
   */
  name: string;

  /**
   * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
   */
  tier?: SkuTier;

  /**
   * The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
   */
  size?: string;

  /**
   * If the service has different generations of hardware, for the same SKU, then that can be captured here.
   */
  family?: string;

  /**
   * If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
   */
  capacity?: int32;
}

/**
 * Common fields that are returned in the response for all Azure Resource Manager resources
 */
model Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   */
  @visibility("read")
  id?: string;

  /**
   * The name of the resource
   */
  @visibility("read")
  name?: string;

  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   */
  @visibility("read")
  type?: string;
}

/**
 * Developer Keys of account
 */
model AccountKeys {
  /**
   * value of primary key.
   */
  @visibility("read")
  primaryKey?: string;

  /**
   * value of secondary key.
   */
  @visibility("read")
  secondaryKey?: string;
}

/**
 * Request for account key regeneration
 */
model AccountKeyRegenerateRequest {
  /**
   * serial of key to be regenerated
   */
  serial?: Serial;
}
