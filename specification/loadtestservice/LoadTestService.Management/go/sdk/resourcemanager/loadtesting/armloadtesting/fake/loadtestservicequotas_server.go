// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/loadtesting/armloadtesting"
	"net/http"
	"net/url"
	"regexp"
)

// LoadTestServiceQuotasServer is a fake server for instances of the armloadtesting.LoadTestServiceQuotasClient type.
type LoadTestServiceQuotasServer struct {
	// CheckAvailability is the fake for method LoadTestServiceQuotasClient.CheckAvailability
	// HTTP status codes to indicate success: http.StatusOK
	CheckAvailability func(ctx context.Context, subscriptionID string, location string, quotaBucketName string, body armloadtesting.QuotaBucketRequest, options *armloadtesting.LoadTestServiceQuotasClientCheckAvailabilityOptions) (resp azfake.Responder[armloadtesting.LoadTestServiceQuotasClientCheckAvailabilityResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method LoadTestServiceQuotasClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, subscriptionID string, location string, quotaBucketName string, options *armloadtesting.LoadTestServiceQuotasClientGetOptions) (resp azfake.Responder[armloadtesting.LoadTestServiceQuotasClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method LoadTestServiceQuotasClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(subscriptionID string, location string, options *armloadtesting.LoadTestServiceQuotasClientListOptions) (resp azfake.PagerResponder[armloadtesting.LoadTestServiceQuotasClientListResponse])
}

// NewLoadTestServiceQuotasServerTransport creates a new instance of LoadTestServiceQuotasServerTransport with the provided implementation.
// The returned LoadTestServiceQuotasServerTransport instance is connected to an instance of armloadtesting.LoadTestServiceQuotasClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewLoadTestServiceQuotasServerTransport(srv *LoadTestServiceQuotasServer) *LoadTestServiceQuotasServerTransport {
	return &LoadTestServiceQuotasServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armloadtesting.LoadTestServiceQuotasClientListResponse]](),
	}
}

// LoadTestServiceQuotasServerTransport connects instances of armloadtesting.LoadTestServiceQuotasClient to instances of LoadTestServiceQuotasServer.
// Don't use this type directly, use NewLoadTestServiceQuotasServerTransport instead.
type LoadTestServiceQuotasServerTransport struct {
	srv          *LoadTestServiceQuotasServer
	newListPager *tracker[azfake.PagerResponder[armloadtesting.LoadTestServiceQuotasClientListResponse]]
}

// Do implements the policy.Transporter interface for LoadTestServiceQuotasServerTransport.
func (l *LoadTestServiceQuotasServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return l.dispatchToMethodFake(req, method)
}

func (l *LoadTestServiceQuotasServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "LoadTestServiceQuotasClient.CheckAvailability":
		resp, err = l.dispatchCheckAvailability(req)
	case "LoadTestServiceQuotasClient.Get":
		resp, err = l.dispatchGet(req)
	case "LoadTestServiceQuotasClient.NewListPager":
		resp, err = l.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (l *LoadTestServiceQuotasServerTransport) dispatchCheckAvailability(req *http.Request) (*http.Response, error) {
	if l.srv.CheckAvailability == nil {
		return nil, &nonRetriableError{errors.New("fake for method CheckAvailability not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotas/(?P<quotaBucketName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/checkAvailability`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armloadtesting.QuotaBucketRequest](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	quotaBucketNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("quotaBucketName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.CheckAvailability(req.Context(), subscriptionIDParam, locationParam, quotaBucketNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CheckQuotaAvailabilityResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LoadTestServiceQuotasServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if l.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotas/(?P<quotaBucketName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	quotaBucketNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("quotaBucketName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := l.srv.Get(req.Context(), subscriptionIDParam, locationParam, quotaBucketNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).QuotaResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (l *LoadTestServiceQuotasServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if l.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := l.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotas`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		resp := l.srv.NewListPager(subscriptionIDParam, locationParam, nil)
		newListPager = &resp
		l.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armloadtesting.LoadTestServiceQuotasClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		l.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		l.newListPager.remove(req)
	}
	return resp, nil
}
