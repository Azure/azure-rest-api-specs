// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armloadtesting

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// LoadTestServiceQuotasClient contains the methods for the Microsoft.LoadTestService namespace.
// Don't use this type directly, use NewLoadTestServiceQuotasClient() instead.
type LoadTestServiceQuotasClient struct {
	internal *arm.Client
}

// NewLoadTestServiceQuotasClient creates a new instance of LoadTestServiceQuotasClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewLoadTestServiceQuotasClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*LoadTestServiceQuotasClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &LoadTestServiceQuotasClient{
		internal: cl,
	}
	return client, nil
}

// CheckAvailability - Check Quota Availability on quota bucket per region per subscription.
//   - subscriptionID - The ID of the target subscription.
//   - location - The location name.
//   - quotaBucketName - The quota name.
//   - body - The content of the action request
//   - options - LoadTestServiceQuotasClientCheckAvailabilityOptions contains the optional parameters for the LoadTestServiceQuotasClient.CheckAvailability
//     method.
func (client *LoadTestServiceQuotasClient) CheckAvailability(ctx context.Context, subscriptionID string, location string, quotaBucketName string, body QuotaBucketRequest, options *LoadTestServiceQuotasClientCheckAvailabilityOptions) (LoadTestServiceQuotasClientCheckAvailabilityResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestServiceQuotasClient.CheckAvailability")
	req, err := client.checkAvailabilityCreateRequest(ctx, subscriptionID, location, quotaBucketName, body, options)
	if err != nil {
		return LoadTestServiceQuotasClientCheckAvailabilityResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LoadTestServiceQuotasClientCheckAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LoadTestServiceQuotasClientCheckAvailabilityResponse{}, err
	}
	resp, err := client.checkAvailabilityHandleResponse(httpResp)
	return resp, err
}

// checkAvailabilityCreateRequest creates the CheckAvailability request.
func (client *LoadTestServiceQuotasClient) checkAvailabilityCreateRequest(ctx context.Context, subscriptionID string, location string, quotaBucketName string, body QuotaBucketRequest, options *LoadTestServiceQuotasClientCheckAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/quotas/{quotaBucketName}/checkAvailability"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if quotaBucketName == "" {
		return nil, errors.New("parameter quotaBucketName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{quotaBucketName}", url.PathEscape(quotaBucketName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// checkAvailabilityHandleResponse handles the CheckAvailability response.
func (client *LoadTestServiceQuotasClient) checkAvailabilityHandleResponse(resp *http.Response) (LoadTestServiceQuotasClientCheckAvailabilityResponse, error) {
	result := LoadTestServiceQuotasClientCheckAvailabilityResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckQuotaAvailabilityResponse); err != nil {
		return LoadTestServiceQuotasClientCheckAvailabilityResponse{}, err
	}
	return result, nil
}

// Get - Get the available quota for a quota bucket per region per subscription.
//   - subscriptionID - The ID of the target subscription.
//   - location - The location name.
//   - quotaBucketName - The quota name.
//   - options - LoadTestServiceQuotasClientGetOptions contains the optional parameters for the LoadTestServiceQuotasClient.Get
//     method.
func (client *LoadTestServiceQuotasClient) Get(ctx context.Context, subscriptionID string, location string, quotaBucketName string, options *LoadTestServiceQuotasClientGetOptions) (LoadTestServiceQuotasClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestServiceQuotasClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, location, quotaBucketName, options)
	if err != nil {
		return LoadTestServiceQuotasClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LoadTestServiceQuotasClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LoadTestServiceQuotasClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *LoadTestServiceQuotasClient) getCreateRequest(ctx context.Context, subscriptionID string, location string, quotaBucketName string, options *LoadTestServiceQuotasClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/quotas/{quotaBucketName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if quotaBucketName == "" {
		return nil, errors.New("parameter quotaBucketName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{quotaBucketName}", url.PathEscape(quotaBucketName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *LoadTestServiceQuotasClient) getHandleResponse(resp *http.Response) (LoadTestServiceQuotasClientGetResponse, error) {
	result := LoadTestServiceQuotasClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QuotaResource); err != nil {
		return LoadTestServiceQuotasClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List quotas for a given subscription Id.
//   - subscriptionID - The ID of the target subscription.
//   - location - The location name.
//   - options - LoadTestServiceQuotasClientListOptions contains the optional parameters for the LoadTestServiceQuotasClient.NewListPager
//     method.
func (client *LoadTestServiceQuotasClient) NewListPager(subscriptionID string, location string, options *LoadTestServiceQuotasClientListOptions) *runtime.Pager[LoadTestServiceQuotasClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[LoadTestServiceQuotasClientListResponse]{
		More: func(page LoadTestServiceQuotasClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LoadTestServiceQuotasClientListResponse) (LoadTestServiceQuotasClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestServiceQuotasClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, subscriptionID, location, options)
			}, nil)
			if err != nil {
				return LoadTestServiceQuotasClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *LoadTestServiceQuotasClient) listCreateRequest(ctx context.Context, subscriptionID string, location string, options *LoadTestServiceQuotasClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/quotas"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *LoadTestServiceQuotasClient) listHandleResponse(resp *http.Response) (LoadTestServiceQuotasClientListResponse, error) {
	result := LoadTestServiceQuotasClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QuotaResourceListResult); err != nil {
		return LoadTestServiceQuotasClientListResponse{}, err
	}
	return result, nil
}
