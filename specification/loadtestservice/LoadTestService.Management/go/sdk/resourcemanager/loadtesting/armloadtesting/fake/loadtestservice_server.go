// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// LoadTestServiceServer is a fake server for instances of the armloadtesting.LoadTestServiceClient type.
type LoadTestServiceServer struct {
	// LoadTestServiceLoadTestsServer contains the fakes for client LoadTestServiceLoadTestsClient
	LoadTestServiceLoadTestsServer LoadTestServiceLoadTestsServer

	// LoadTestServiceOperationsServer contains the fakes for client LoadTestServiceOperationsClient
	LoadTestServiceOperationsServer LoadTestServiceOperationsServer

	// LoadTestServiceQuotasServer contains the fakes for client LoadTestServiceQuotasClient
	LoadTestServiceQuotasServer LoadTestServiceQuotasServer
}

// NewLoadTestServiceServerTransport creates a new instance of LoadTestServiceServerTransport with the provided implementation.
// The returned LoadTestServiceServerTransport instance is connected to an instance of armloadtesting.LoadTestServiceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewLoadTestServiceServerTransport(srv *LoadTestServiceServer) *LoadTestServiceServerTransport {
	return &LoadTestServiceServerTransport{srv: srv}
}

// LoadTestServiceServerTransport connects instances of armloadtesting.LoadTestServiceClient to instances of LoadTestServiceServer.
// Don't use this type directly, use NewLoadTestServiceServerTransport instead.
type LoadTestServiceServerTransport struct {
	srv                               *LoadTestServiceServer
	trMu                              sync.Mutex
	trLoadTestServiceLoadTestsServer  *LoadTestServiceLoadTestsServerTransport
	trLoadTestServiceOperationsServer *LoadTestServiceOperationsServerTransport
	trLoadTestServiceQuotasServer     *LoadTestServiceQuotasServerTransport
}

// Do implements the policy.Transporter interface for LoadTestServiceServerTransport.
func (l *LoadTestServiceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return l.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (l *LoadTestServiceServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "LoadTestServiceLoadTestsClient":
		initServer(&l.trMu, &l.trLoadTestServiceLoadTestsServer, func() *LoadTestServiceLoadTestsServerTransport {
			return NewLoadTestServiceLoadTestsServerTransport(&l.srv.LoadTestServiceLoadTestsServer)
		})
		resp, err = l.trLoadTestServiceLoadTestsServer.Do(req)
	case "LoadTestServiceOperationsClient":
		initServer(&l.trMu, &l.trLoadTestServiceOperationsServer, func() *LoadTestServiceOperationsServerTransport {
			return NewLoadTestServiceOperationsServerTransport(&l.srv.LoadTestServiceOperationsServer)
		})
		resp, err = l.trLoadTestServiceOperationsServer.Do(req)
	case "LoadTestServiceQuotasClient":
		initServer(&l.trMu, &l.trLoadTestServiceQuotasServer, func() *LoadTestServiceQuotasServerTransport {
			return NewLoadTestServiceQuotasServerTransport(&l.srv.LoadTestServiceQuotasServer)
		})
		resp, err = l.trLoadTestServiceQuotasServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
