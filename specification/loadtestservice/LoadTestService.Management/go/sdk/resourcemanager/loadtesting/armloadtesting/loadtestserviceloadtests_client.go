// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armloadtesting

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// LoadTestServiceLoadTestsClient contains the methods for the Microsoft.LoadTestService namespace.
// Don't use this type directly, use NewLoadTestServiceLoadTestsClient() instead.
type LoadTestServiceLoadTestsClient struct {
	internal *arm.Client
}

// NewLoadTestServiceLoadTestsClient creates a new instance of LoadTestServiceLoadTestsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewLoadTestServiceLoadTestsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*LoadTestServiceLoadTestsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &LoadTestServiceLoadTestsClient{
		internal: cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a LoadTestResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - loadTestName - Load Test name
//   - resource - Resource create parameters.
//   - options - LoadTestServiceLoadTestsClientCreateOrUpdateOptions contains the optional parameters for the LoadTestServiceLoadTestsClient.CreateOrUpdate
//     method.
func (client *LoadTestServiceLoadTestsClient) BeginCreateOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, resource LoadTestResource, options *LoadTestServiceLoadTestsClientCreateOrUpdateOptions) (*runtime.Poller[LoadTestServiceLoadTestsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, subscriptionID, resourceGroupName, loadTestName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[LoadTestServiceLoadTestsClientCreateOrUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[LoadTestServiceLoadTestsClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Create a LoadTestResource
func (client *LoadTestServiceLoadTestsClient) createOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, resource LoadTestResource, options *LoadTestServiceLoadTestsClientCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestServiceLoadTestsClient.BeginCreateOrUpdate")
	req, err := client.createOrUpdateCreateRequest(ctx, subscriptionID, resourceGroupName, loadTestName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *LoadTestServiceLoadTestsClient) createOrUpdateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, resource LoadTestResource, options *LoadTestServiceLoadTestsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if loadTestName == "" {
		return nil, errors.New("parameter loadTestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestName}", url.PathEscape(loadTestName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a LoadTestResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - loadTestName - Load Test name
//   - options - LoadTestServiceLoadTestsClientDeleteOptions contains the optional parameters for the LoadTestServiceLoadTestsClient.Delete
//     method.
func (client *LoadTestServiceLoadTestsClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, options *LoadTestServiceLoadTestsClientDeleteOptions) (*runtime.Poller[LoadTestServiceLoadTestsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, loadTestName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[LoadTestServiceLoadTestsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[LoadTestServiceLoadTestsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a LoadTestResource
func (client *LoadTestServiceLoadTestsClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, options *LoadTestServiceLoadTestsClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestServiceLoadTestsClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, loadTestName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *LoadTestServiceLoadTestsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, options *LoadTestServiceLoadTestsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if loadTestName == "" {
		return nil, errors.New("parameter loadTestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestName}", url.PathEscape(loadTestName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a LoadTestResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - loadTestName - Load Test name
//   - options - LoadTestServiceLoadTestsClientGetOptions contains the optional parameters for the LoadTestServiceLoadTestsClient.Get
//     method.
func (client *LoadTestServiceLoadTestsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, options *LoadTestServiceLoadTestsClientGetOptions) (LoadTestServiceLoadTestsClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestServiceLoadTestsClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, loadTestName, options)
	if err != nil {
		return LoadTestServiceLoadTestsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LoadTestServiceLoadTestsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LoadTestServiceLoadTestsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *LoadTestServiceLoadTestsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, options *LoadTestServiceLoadTestsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if loadTestName == "" {
		return nil, errors.New("parameter loadTestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestName}", url.PathEscape(loadTestName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *LoadTestServiceLoadTestsClient) getHandleResponse(resp *http.Response) (LoadTestServiceLoadTestsClientGetResponse, error) {
	result := LoadTestServiceLoadTestsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LoadTestResource); err != nil {
		return LoadTestServiceLoadTestsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List LoadTestResource resources by resource group
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - LoadTestServiceLoadTestsClientListByResourceGroupOptions contains the optional parameters for the LoadTestServiceLoadTestsClient.NewListByResourceGroupPager
//     method.
func (client *LoadTestServiceLoadTestsClient) NewListByResourceGroupPager(subscriptionID string, resourceGroupName string, options *LoadTestServiceLoadTestsClientListByResourceGroupOptions) *runtime.Pager[LoadTestServiceLoadTestsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[LoadTestServiceLoadTestsClientListByResourceGroupResponse]{
		More: func(page LoadTestServiceLoadTestsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LoadTestServiceLoadTestsClientListByResourceGroupResponse) (LoadTestServiceLoadTestsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestServiceLoadTestsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return LoadTestServiceLoadTestsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *LoadTestServiceLoadTestsClient) listByResourceGroupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *LoadTestServiceLoadTestsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *LoadTestServiceLoadTestsClient) listByResourceGroupHandleResponse(resp *http.Response) (LoadTestServiceLoadTestsClientListByResourceGroupResponse, error) {
	result := LoadTestServiceLoadTestsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LoadTestResourceListResult); err != nil {
		return LoadTestServiceLoadTestsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List LoadTestResource resources by subscription ID
//   - subscriptionID - The ID of the target subscription.
//   - options - LoadTestServiceLoadTestsClientListBySubscriptionOptions contains the optional parameters for the LoadTestServiceLoadTestsClient.NewListBySubscriptionPager
//     method.
func (client *LoadTestServiceLoadTestsClient) NewListBySubscriptionPager(subscriptionID string, options *LoadTestServiceLoadTestsClientListBySubscriptionOptions) *runtime.Pager[LoadTestServiceLoadTestsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[LoadTestServiceLoadTestsClientListBySubscriptionResponse]{
		More: func(page LoadTestServiceLoadTestsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LoadTestServiceLoadTestsClientListBySubscriptionResponse) (LoadTestServiceLoadTestsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestServiceLoadTestsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return LoadTestServiceLoadTestsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *LoadTestServiceLoadTestsClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *LoadTestServiceLoadTestsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/loadTests"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *LoadTestServiceLoadTestsClient) listBySubscriptionHandleResponse(resp *http.Response) (LoadTestServiceLoadTestsClientListBySubscriptionResponse, error) {
	result := LoadTestServiceLoadTestsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LoadTestResourceListResult); err != nil {
		return LoadTestServiceLoadTestsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// NewOutboundNetworkDependenciesEndpointsPager - Lists the endpoints that agents may call as part of load testing.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - loadTestName - Load Test name
//   - body - The content of the action request
//   - options - LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsOptions contains the optional parameters for
//     the LoadTestServiceLoadTestsClient.NewOutboundNetworkDependenciesEndpointsPager method.
func (client *LoadTestServiceLoadTestsClient) NewOutboundNetworkDependenciesEndpointsPager(subscriptionID string, resourceGroupName string, loadTestName string, body any, options *LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsOptions) *runtime.Pager[LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsResponse] {
	return runtime.NewPager(runtime.PagingHandler[LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsResponse]{
		More: func(page LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsResponse) (LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestServiceLoadTestsClient.NewOutboundNetworkDependenciesEndpointsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.outboundNetworkDependenciesEndpointsCreateRequest(ctx, subscriptionID, resourceGroupName, loadTestName, body, options)
			}, nil)
			if err != nil {
				return LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsResponse{}, err
			}
			return client.outboundNetworkDependenciesEndpointsHandleResponse(resp)
		},
	})
}

// outboundNetworkDependenciesEndpointsCreateRequest creates the OutboundNetworkDependenciesEndpoints request.
func (client *LoadTestServiceLoadTestsClient) outboundNetworkDependenciesEndpointsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, body any, options *LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}/outboundNetworkDependenciesEndpoints"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if loadTestName == "" {
		return nil, errors.New("parameter loadTestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestName}", url.PathEscape(loadTestName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// outboundNetworkDependenciesEndpointsHandleResponse handles the OutboundNetworkDependenciesEndpoints response.
func (client *LoadTestServiceLoadTestsClient) outboundNetworkDependenciesEndpointsHandleResponse(resp *http.Response) (LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsResponse, error) {
	result := LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedOutboundEnvironmentEndpoint); err != nil {
		return LoadTestServiceLoadTestsClientOutboundNetworkDependenciesEndpointsResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a LoadTestResource
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - loadTestName - Load Test name
//   - properties - The resource properties to be updated.
//   - options - LoadTestServiceLoadTestsClientUpdateOptions contains the optional parameters for the LoadTestServiceLoadTestsClient.Update
//     method.
func (client *LoadTestServiceLoadTestsClient) BeginUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, properties LoadTestResourceUpdate, options *LoadTestServiceLoadTestsClientUpdateOptions) (*runtime.Poller[LoadTestServiceLoadTestsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, subscriptionID, resourceGroupName, loadTestName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[LoadTestServiceLoadTestsClientUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[LoadTestServiceLoadTestsClientUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Update - Update a LoadTestResource
func (client *LoadTestServiceLoadTestsClient) update(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, properties LoadTestResourceUpdate, options *LoadTestServiceLoadTestsClientUpdateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LoadTestServiceLoadTestsClient.BeginUpdate")
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, loadTestName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *LoadTestServiceLoadTestsClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, loadTestName string, properties LoadTestResourceUpdate, options *LoadTestServiceLoadTestsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if loadTestName == "" {
		return nil, errors.New("parameter loadTestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{loadTestName}", url.PathEscape(loadTestName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
