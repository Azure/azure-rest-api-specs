{
  "swagger": "2.0",
  "info": {
    "title": "Defender EASM",
    "version": "2023-03-01-preview",
    "description": "Defender EASM discovers and maps your digital attack surface to provide an \"outside-in\" perspective using probes to discover assets. The assets are provided with detailed metadata associated, including vulnerabilities, configurations and web components, allowing customers to view and prioritize external risk. The EASM REST API enables you to develop clients that integrate with your application.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "The endpoint hosting the requested resource. For example, https://{region}.easm.defender.microsoft.com",
        "required": true,
        "type": "string"
      },
      {
        "name": "subscriptionId",
        "in": "path",
        "description": "The ID of the target subscription.",
        "required": true,
        "type": "string"
      },
      {
        "name": "resourceGroupName",
        "in": "path",
        "description": "The name of the Resource Group.",
        "required": true,
        "type": "string"
      },
      {
        "name": "workspaceName",
        "in": "path",
        "description": "The name of the Workspace.",
        "required": true,
        "type": "string"
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://easm.defender.microsoft.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "https://easm.defender.microsoft.com/.default": ""
      }
    }
  },
  "tags": [
    {
      "name": "Assets"
    },
    {
      "name": "Data Connections"
    },
    {
      "name": "Discovery Groups"
    },
    {
      "name": "Discovery Templates"
    },
    {
      "name": "Reports"
    },
    {
      "name": "Saved Filters"
    },
    {
      "name": "Tasks"
    }
  ],
  "paths": {
    "/assets": {
      "get": {
        "operationId": "Assets_ListAssetResource",
        "tags": [
          "Assets"
        ],
        "description": "Retrieve a list of assets for the provided search parameters.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/OrderByParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/MarkParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedAssetResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Assets_ListAssetResource": {
            "$ref": "./examples/Assets_ListAssetResource_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "operationId": "Assets_UpdateAssets",
        "tags": [
          "Assets"
        ],
        "description": "Update labels on assets matching the provided filter.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RequiredFilterParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetUpdateData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Assets_UpdateAssets": {
            "$ref": "./examples/Assets_UpdateAssets_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/assets/{assetId}": {
      "get": {
        "operationId": "Assets_GetAssetResource",
        "tags": [
          "Assets"
        ],
        "description": "Retrieve an asset by assetId.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The system generated unique id for the resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AssetResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Assets_GetAssetResource": {
            "$ref": "./examples/Assets_GetAssetResource_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/dataConnections": {
      "get": {
        "operationId": "DataConnections_ListDataConnection",
        "tags": [
          "Data Connections"
        ],
        "description": "Retrieve a list of data connections.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDataConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DataConnections_ListDataConnection": {
            "$ref": "./examples/DataConnections_ListDataConnection_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/dataConnections/{dataConnectionName}": {
      "get": {
        "operationId": "DataConnections_GetDataConnection",
        "tags": [
          "Data Connections"
        ],
        "description": "Retrieve a data connection with a given dataConnectionName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "dataConnectionName",
            "in": "path",
            "description": "The caller provided unique name for the resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DataConnections_GetDataConnection": {
            "$ref": "./examples/DataConnections_GetDataConnection_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "DataConnections_CreateOrReplaceDataConnection",
        "tags": [
          "Data Connections"
        ],
        "description": "Create or replace a data connection with a given dataConnectionName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "dataConnectionName",
            "in": "path",
            "description": "The caller provided unique name for the resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataConnectionData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DataConnections_CreateOrReplaceDataConnection": {
            "$ref": "./examples/DataConnections_CreateOrReplaceDataConnection_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "DataConnections_DeleteDataConnection",
        "tags": [
          "Data Connections"
        ],
        "description": "Delete a data connection with a given dataConnectionName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "dataConnectionName",
            "in": "path",
            "description": "The caller provided unique name for the resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DataConnections_DeleteDataConnection": {
            "$ref": "./examples/DataConnections_DeleteDataConnection_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/dataConnections:validate": {
      "post": {
        "operationId": "DataConnections_ValidateDataConnection",
        "tags": [
          "Data Connections"
        ],
        "description": "Validate a data connection with a given dataConnectionName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataConnectionData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ValidateResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DataConnections_ValidateDataConnection": {
            "$ref": "./examples/DataConnections_ValidateDataConnection_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/discoGroups": {
      "get": {
        "operationId": "DiscoveryGroups_ListDiscoGroup",
        "tags": [
          "Discovery Groups"
        ],
        "description": "Retrieve a list of discovery group for the provided search parameters.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDiscoGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DiscoveryGroups_ListDiscoGroup": {
            "$ref": "./examples/DiscoveryGroups_ListDiscoGroup_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/discoGroups/{groupName}": {
      "get": {
        "operationId": "DiscoveryGroups_GetDiscoGroup",
        "tags": [
          "Discovery Groups"
        ],
        "description": "Retrieve a discovery group with a given groupName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "groupName",
            "in": "path",
            "description": "The caller provided unique name for the resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DiscoGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DiscoveryGroups_GetDiscoGroup": {
            "$ref": "./examples/DiscoveryGroups_GetDiscoGroup_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "DiscoveryGroups_CreateOrReplaceDiscoGroup",
        "tags": [
          "Discovery Groups"
        ],
        "description": "Create a discovery group with a given groupName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "groupName",
            "in": "path",
            "description": "The caller provided unique name for the resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscoGroupData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DiscoGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DiscoveryGroups_CreateOrReplaceDiscoGroup": {
            "$ref": "./examples/DiscoveryGroups_CreateOrReplaceDiscoGroup_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/discoGroups/{groupName}:run": {
      "post": {
        "operationId": "DiscoveryGroups_RunDiscoGroup",
        "tags": [
          "Discovery Groups"
        ],
        "description": "Run a discovery group with a given groupName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "groupName",
            "in": "path",
            "description": "The caller provided unique name for the resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DiscoveryGroups_RunDiscoGroup": {
            "$ref": "./examples/DiscoveryGroups_RunDiscoGroup_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/discoGroups/{groupName}/runs": {
      "get": {
        "operationId": "DiscoveryGroups_ListRuns",
        "tags": [
          "Discovery Groups"
        ],
        "description": "Retrieve a collection of discovery run results for a discovery group with a given groupName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/DiscoGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DiscoRunPageResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DiscoveryGroups_ListRuns": {
            "$ref": "./examples/DiscoveryGroups_ListRuns_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/discoGroups:validate": {
      "post": {
        "operationId": "DiscoveryGroups_ValidateDiscoGroup",
        "tags": [
          "Discovery Groups"
        ],
        "description": "Validate a discovery group with a given groupName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscoGroupData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ValidateResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DiscoveryGroups_ValidateDiscoGroup": {
            "$ref": "./examples/DiscoveryGroups_ValidateDiscoGroup_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/discoTemplates": {
      "get": {
        "operationId": "DiscoveryTemplates_ListDiscoTemplate",
        "tags": [
          "Discovery Templates"
        ],
        "description": "Retrieve a list of disco templates for the provided search parameters.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDiscoTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DiscoveryTemplates_ListDiscoTemplate": {
            "$ref": "./examples/DiscoveryTemplates_ListDiscoTemplate_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/discoTemplates/{templateId}": {
      "get": {
        "operationId": "DiscoveryTemplates_GetDiscoTemplate",
        "tags": [
          "Discovery Templates"
        ],
        "description": "Retrieve a disco template with a given templateId.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "The system generated unique id for the resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DiscoTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DiscoveryTemplates_GetDiscoTemplate": {
            "$ref": "./examples/DiscoveryTemplates_GetDiscoTemplate_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/reports/assets:getBillable": {
      "post": {
        "operationId": "Reports_GetBillable",
        "tags": [
          "Reports"
        ],
        "description": "Get billable assets summary for the workspace.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ReportBillableAssetSummaryResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Reports_GetBillable": {
            "$ref": "./examples/Reports_GetBillable_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/reports/assets:getSnapshot": {
      "post": {
        "operationId": "Reports_GetSnapshot",
        "tags": [
          "Reports"
        ],
        "description": "Get the most recent snapshot of asset summary values for the snapshot request.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportAssetSnapshotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ReportAssetSnapshotResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Reports_GetSnapshot": {
            "$ref": "./examples/Reports_GetSnapshot_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/reports/assets:getSummary": {
      "post": {
        "operationId": "Reports_GetSummary",
        "tags": [
          "Reports"
        ],
        "description": "Get asset summary details for the summary request.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportAssetSummaryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ReportAssetSummaryResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Reports_GetSummary": {
            "$ref": "./examples/Reports_GetSummary_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/savedFilters": {
      "get": {
        "operationId": "SavedFilters_ListSavedFilter",
        "tags": [
          "Saved Filters"
        ],
        "description": "Retrieve a list of saved filters for the provided search parameters.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedSavedFilter"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "SavedFilters_ListSavedFilter": {
            "$ref": "./examples/SavedFilters_ListSavedFilter_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/savedFilters/{filterName}": {
      "get": {
        "operationId": "SavedFilters_GetSavedFilter",
        "tags": [
          "Saved Filters"
        ],
        "description": "Retrieve a saved filter by filterName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "The caller provided unique name for the resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SavedFilter"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "SavedFilters_GetSavedFilter": {
            "$ref": "./examples/SavedFilters_GetSavedFilter_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "SavedFilters_CreateOrReplaceSavedFilter",
        "tags": [
          "Saved Filters"
        ],
        "description": "Create or replace a saved filter with a given filterName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "The caller provided unique name for the resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SavedFilterData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SavedFilter"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "SavedFilters_CreateOrReplaceSavedFilter": {
            "$ref": "./examples/SavedFilters_CreateOrReplaceSavedFilter_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "SavedFilters_DeleteSavedFilter",
        "tags": [
          "Saved Filters"
        ],
        "description": "Delete a saved filter with a given filterName.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "filterName",
            "in": "path",
            "description": "The caller provided unique name for the resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "SavedFilters_DeleteSavedFilter": {
            "$ref": "./examples/SavedFilters_DeleteSavedFilter_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "operationId": "Tasks_ListTask",
        "tags": [
          "Tasks"
        ],
        "description": "Retrieve a list of tasks for the provided search parameters.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/OrderByParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedTask"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Tasks_ListTask": {
            "$ref": "./examples/Tasks_ListTask_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/tasks/{taskId}": {
      "get": {
        "operationId": "Tasks_GetTask",
        "tags": [
          "Tasks"
        ],
        "description": "Retrieve a task by taskId.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the task.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Tasks_GetTask": {
            "$ref": "./examples/Tasks_GetTask_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/tasks/{taskId}:cancel": {
      "post": {
        "operationId": "Tasks_CancelTask",
        "tags": [
          "Tasks"
        ],
        "description": "Cancel a task by taskId.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the task.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Tasks_CancelTask": {
            "$ref": "./examples/Tasks_CancelTask_MaximumSet_Gen.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AlexaInfo": {
      "type": "object",
      "properties": {
        "alexaRank": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "type": "string"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "recent": {
          "type": "boolean"
        }
      }
    },
    "AsAsset": {
      "type": "object",
      "properties": {
        "asn": {
          "type": "integer",
          "format": "int64"
        },
        "asNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "orgNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "orgIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "registrarCreatedAt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "registrarUpdatedAt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "registrantContacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminContacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalContacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registrarNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registrantNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminOrgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalOrgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registrantPhones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminPhones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalPhones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "detailedFromWhoisAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InventoryAsset"
        }
      ]
    },
    "AsAssetResource": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/AsAsset",
          "description": "asset"
        }
      },
      "required": [
        "asset"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        }
      ],
      "x-ms-discriminator-value": "as"
    },
    "AssetKind": {
      "type": "string",
      "description": "The kind of asset.",
      "enum": [
        "as",
        "contact",
        "domain",
        "host",
        "ipAddress",
        "ipBlock",
        "page",
        "sslCert"
      ],
      "x-ms-enum": {
        "name": "AssetKind",
        "modelAsString": true
      }
    },
    "AssetPageResult": {
      "type": "object",
      "description": "The page of assets that match the provided metric.",
      "properties": {
        "totalElements": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items available in the full result set."
        },
        "mark": {
          "type": "string",
          "description": "The cursor mark to be used on the next request.  Not set if using paging."
        },
        "nextLink": {
          "type": "string",
          "description": "The link to access the next page of results.  Not set if at the end of the result set."
        },
        "value": {
          "type": "array",
          "description": "The items in the current page of results.",
          "items": {
            "$ref": "#/definitions/AssetResource"
          }
        }
      }
    },
    "AssetResource": {
      "type": "object",
      "description": "The items in the current page of results.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for AssetResource."
        },
        "id": {
          "type": "string",
          "description": "The system generated unique id for the resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The caller provided unique name for the resource."
        },
        "displayName": {
          "type": "string",
          "description": "The name that can be used for display purposes."
        },
        "uuid": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Global UUID for the asset."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date this asset was first added to this workspace."
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date this asset was last updated for this workspace."
        },
        "state": {
          "$ref": "#/definitions/AssetState"
        },
        "externalId": {
          "type": "string",
          "description": "An optional customer provided identifier for this asset."
        },
        "labels": {
          "type": "array",
          "description": "Customer labels assigned to this asset.",
          "items": {
            "type": "string"
          }
        },
        "wildcard": {
          "type": "boolean",
          "description": "An indicator of whether this asset represents a wildcard rollup of assets on this domain."
        },
        "discoGroupName": {
          "type": "string",
          "description": "The name of the DiscoGroup that brought added this asset to the workspace."
        },
        "auditTrail": {
          "type": "array",
          "description": "The history of how this asset was pulled into the workspace through the discovery process.",
          "items": {
            "$ref": "#/definitions/AuditTrailItem"
          }
        },
        "reason": {
          "type": "string"
        }
      },
      "discriminator": "kind",
      "required": [
        "kind",
        "id"
      ]
    },
    "AssetSecurityPolicy": {
      "type": "object",
      "properties": {
        "policyName": {
          "type": "string"
        },
        "isAffected": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "recent": {
          "type": "boolean"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "AssetState": {
      "type": "string",
      "enum": [
        "candidate",
        "confirmed",
        "dismissed",
        "candidateInvestigate",
        "associatedPartner",
        "associatedThirdparty",
        "archived"
      ],
      "x-ms-enum": {
        "name": "AssetState",
        "modelAsString": true
      }
    },
    "AssetSummaryResult": {
      "type": "object",
      "description": "The collection of asset summaries.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The name of the summary response.  Depending on the request time this will either be the asset filter, risk category, or risk metric."
        },
        "description": {
          "type": "string",
          "description": "The description of the summary response.  Filters don't have a description."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The last time risk categories or risk metrics were captured. Set to the current time for asset filter requests, which always pull the live asset data."
        },
        "metricCategory": {
          "type": "string",
          "description": "If the request is for a metric category, this will contain the requested unique category name."
        },
        "metric": {
          "type": "string",
          "description": "If the request is for a metric, this will contain the requested unique metric name."
        },
        "filter": {
          "type": "string",
          "description": "If the request is for an asset filter, this will contain the corresponding filter."
        },
        "labelName": {
          "type": "string",
          "description": "An optional label used to filter requests results."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The count of assets matching the request parameters."
        },
        "link": {
          "type": "string",
          "description": "The link to the corresponding asset details."
        },
        "children": {
          "type": "array",
          "description": "The corresponding child entities.  For metric categories this will contain metrics.  For filters with groupBy and segmentBy this will contain facets.",
          "items": {
            "$ref": "#/definitions/AssetSummaryResult"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "AssetUpdateData": {
      "type": "object",
      "description": "A request body used to update an asset.",
      "properties": {
        "state": {
          "$ref": "#/definitions/AssetUpdateState",
          "description": "The state to update the asset to."
        },
        "externalId": {
          "type": "string",
          "description": "A string which can be used to identify the asset in external systems."
        },
        "labels": {
          "type": "object",
          "description": "Any Labels to update the asset with.",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "transfers": {
          "$ref": "#/definitions/AssetUpdateTransfers",
          "description": "A list of asset types to cascade the updates to."
        }
      }
    },
    "AssetUpdateState": {
      "type": "string",
      "description": "The state to update the asset to.",
      "enum": [
        "candidate",
        "confirmed",
        "dismissed",
        "candidateInvestigate",
        "associatedPartner",
        "associatedThirdparty"
      ],
      "x-ms-enum": {
        "name": "AssetUpdateState",
        "modelAsString": true
      }
    },
    "AssetUpdateTransfers": {
      "type": "string",
      "description": "A list of asset types to cascade the updates to.",
      "enum": [
        "as",
        "contact",
        "domain",
        "host",
        "ipAddress",
        "ipBlock",
        "page",
        "sslCert"
      ],
      "x-ms-enum": {
        "name": "AssetUpdateTransfers",
        "modelAsString": true
      }
    },
    "Attribute": {
      "type": "object",
      "properties": {
        "attributeType": {
          "type": "string"
        },
        "attributeValue": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "recent": {
          "type": "boolean"
        }
      }
    },
    "AuditTrailItem": {
      "type": "object",
      "description": "The history of how this asset was pulled into the workspace through the discovery process.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system generated unique id for the resource."
        },
        "name": {
          "type": "string",
          "description": "The caller provided unique name for the resource."
        },
        "displayName": {
          "type": "string",
          "description": "The name that can be used for display purposes."
        },
        "kind": {
          "$ref": "#/definitions/AuditTrailItemKind",
          "description": "The kind of asset."
        },
        "reason": {
          "type": "string",
          "description": "An explanation of why this audit trail node was discovered from the previous node."
        }
      }
    },
    "AuditTrailItemKind": {
      "type": "string",
      "description": "The kind of asset.",
      "enum": [
        "as",
        "contact",
        "domain",
        "host",
        "ipAddress",
        "ipBlock",
        "page",
        "sslCert"
      ],
      "x-ms-enum": {
        "name": "AuditTrailItemKind",
        "modelAsString": true
      }
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "Azure.Core.uuid": {
      "type": "string",
      "format": "uuid",
      "description": "Universally Unique Identifier"
    },
    "AzureDataExplorerDataConnection": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/AzureDataExplorerDataConnectionProperties",
          "description": "properties"
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DataConnection"
        }
      ],
      "x-ms-discriminator-value": "azureDataExplorer"
    },
    "AzureDataExplorerDataConnectionData": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/AzureDataExplorerDataConnectionProperties",
          "description": "properties"
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DataConnectionData"
        }
      ],
      "x-ms-discriminator-value": "azureDataExplorer"
    },
    "AzureDataExplorerDataConnectionProperties": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string",
          "description": "The azure data explorer cluster name"
        },
        "region": {
          "type": "string",
          "description": "The azure data explorer region"
        },
        "databaseName": {
          "type": "string",
          "description": "The azure data explorer database name"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DataConnectionProperties"
        }
      ]
    },
    "Banner": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "banner": {
          "type": "string"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "scanType": {
          "type": "string"
        },
        "bannerMetadata": {
          "type": "string"
        },
        "recent": {
          "type": "boolean"
        },
        "sha256": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ContactAsset": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "names": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "organizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InventoryAsset"
        }
      ]
    },
    "ContactAssetResource": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/ContactAsset",
          "description": "asset"
        }
      },
      "required": [
        "asset"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        }
      ],
      "x-ms-discriminator-value": "contact"
    },
    "Cookie": {
      "type": "object",
      "properties": {
        "cookieName": {
          "type": "string"
        },
        "cookieDomain": {
          "type": "string"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "recent": {
          "type": "boolean"
        },
        "cookieExpiryDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Cve": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "cweId": {
          "type": "string"
        },
        "cvssScore": {
          "type": "number",
          "format": "float"
        },
        "cvss3Summary": {
          "$ref": "#/definitions/Cvss3Summary"
        }
      }
    },
    "Cvss3Summary": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "vectorString": {
          "type": "string"
        },
        "attackVector": {
          "type": "string"
        },
        "attackComplexity": {
          "type": "string"
        },
        "privilegesRequired": {
          "type": "string"
        },
        "userInteraction": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "confidentialityImpact": {
          "type": "string"
        },
        "integrityImpact": {
          "type": "string"
        },
        "availabilityImpact": {
          "type": "string"
        },
        "baseScore": {
          "type": "number",
          "format": "float"
        },
        "baseSeverity": {
          "type": "string"
        },
        "exploitCodeMaturity": {
          "type": "string"
        },
        "remediationLevel": {
          "type": "string"
        },
        "reportConfidence": {
          "type": "string"
        },
        "exploitabilityScore": {
          "type": "number",
          "format": "float"
        },
        "impactScore": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "DataConnection": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for DataConnection."
        },
        "id": {
          "type": "string",
          "description": "The system generated unique id for the resource."
        },
        "name": {
          "type": "string",
          "description": "The caller provided unique name for the resource.",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "The name that can be used for display purposes."
        },
        "content": {
          "$ref": "#/definitions/DataConnectionContent",
          "description": "The type of data the data connection will transfer"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the data connection was created.",
          "readOnly": true
        },
        "frequency": {
          "$ref": "#/definitions/DataConnectionFrequency",
          "description": "The rate at which the data connection will receive updates."
        },
        "frequencyOffset": {
          "type": "integer",
          "format": "int32",
          "description": "The day to update the data connection on."
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the data connection was last updated.",
          "readOnly": true
        },
        "userUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date the data connection was last updated by user.",
          "readOnly": true
        },
        "active": {
          "type": "boolean",
          "description": "An indicator of whether the data connection is active."
        },
        "inactiveMessage": {
          "type": "string",
          "description": "A message that specifies details about data connection if inactive.",
          "readOnly": true
        }
      },
      "discriminator": "kind",
      "required": [
        "kind",
        "name"
      ]
    },
    "DataConnectionContent": {
      "type": "string",
      "description": "The type of data the data connection will transfer",
      "enum": [
        "assets",
        "attackSurfaceInsights"
      ],
      "x-ms-enum": {
        "name": "DataConnectionContent",
        "modelAsString": true
      }
    },
    "DataConnectionData": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for DataConnectionData."
        },
        "name": {
          "type": "string",
          "description": "The name of data connection"
        },
        "content": {
          "$ref": "#/definitions/DataConnectionContent",
          "description": "The type of data the data connection will transfer."
        },
        "frequency": {
          "$ref": "#/definitions/DataConnectionFrequency",
          "description": "The rate at which the data connection will receive updates."
        },
        "frequencyOffset": {
          "type": "integer",
          "format": "int32",
          "description": "The day to update the data connection on. (1-7 for weekly, 1-31 for monthly)"
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "DataConnectionFrequency": {
      "type": "string",
      "description": "The rate at which the data connection will receive updates.",
      "enum": [
        "daily",
        "weekly",
        "monthly"
      ],
      "x-ms-enum": {
        "name": "DataConnectionFrequency",
        "modelAsString": true
      }
    },
    "DataConnectionKind": {
      "type": "string",
      "description": "The kind of data connection.",
      "enum": [
        "logAnalytics",
        "azureDataExplorer"
      ],
      "x-ms-enum": {
        "name": "DataConnectionKind",
        "modelAsString": true
      }
    },
    "DataConnectionProperties": {
      "type": "object",
      "description": "The properties required to establish connection to a particular service"
    },
    "DependentResource": {
      "type": "object",
      "properties": {
        "md5": {
          "type": "string"
        },
        "responseBodySize": {
          "type": "integer",
          "format": "int64"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "firstSeenCrawlGuid": {
          "type": "string"
        },
        "firstSeenPageGuid": {
          "type": "string"
        },
        "firstSeenResourceGuid": {
          "type": "string"
        },
        "lastSeenCrawlGuid": {
          "type": "string"
        },
        "lastSeenPageGuid": {
          "type": "string"
        },
        "lastSeenResourceGuid": {
          "type": "string"
        },
        "responseBodyMinhash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "contentType": {
          "type": "string"
        },
        "sha256": {
          "type": "string"
        },
        "sha384": {
          "type": "string"
        },
        "sha512": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "format": "uri"
        },
        "cached": {
          "type": "boolean"
        },
        "sriChecks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubResourceIntegrityCheck"
          },
          "x-ms-identifiers": []
        },
        "host": {
          "type": "string"
        },
        "lastObservedViolation": {
          "type": "string",
          "format": "date-time"
        },
        "lastObservedValidation": {
          "type": "string",
          "format": "date-time"
        },
        "lastObservedActualSriHash": {
          "type": "string"
        },
        "lastObservedExpectedSriHash": {
          "type": "string"
        }
      }
    },
    "DiscoGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system generated unique id for the resource."
        },
        "name": {
          "type": "string",
          "description": "The caller provided unique name for the resource.",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "The name that can be used for display purposes."
        },
        "description": {
          "type": "string",
          "description": "The description for a disco group."
        },
        "tier": {
          "type": "string",
          "description": "The tier for the disco group which will affect the algorithm used for the disco runs in this group."
        },
        "frequencyMilliseconds": {
          "type": "integer",
          "format": "int64",
          "description": "The frequency at which the disco group is supposed to be rerun in milliseconds."
        },
        "seeds": {
          "type": "array",
          "description": "The list of seeds used for the disco group runs.",
          "items": {
            "$ref": "#/definitions/DiscoSource"
          },
          "x-ms-identifiers": []
        },
        "names": {
          "type": "array",
          "description": "The list of names used for the disco group runs.",
          "items": {
            "type": "string"
          }
        },
        "excludes": {
          "type": "array",
          "description": "The list of excludes used for the disco group runs, aka assets to exclude from the discovery algorithm.",
          "items": {
            "$ref": "#/definitions/DiscoSource"
          },
          "x-ms-identifiers": []
        },
        "latestRun": {
          "$ref": "#/definitions/DiscoRunResult",
          "description": "The latest run of this disco group with some limited information, null if the group has never been run."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date for the disco group was created."
        },
        "templateId": {
          "type": "string",
          "description": "The unique identifier for the disco template used for the disco group creation."
        }
      },
      "required": [
        "name"
      ]
    },
    "DiscoGroupData": {
      "type": "object",
      "description": "A request body used to create a discovery group.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for a disco group."
        },
        "description": {
          "type": "string",
          "description": "The description for a disco group."
        },
        "tier": {
          "type": "string",
          "description": "The tier for the disco group which will affect the algorithm used for the disco runs in this group."
        },
        "frequencyMilliseconds": {
          "type": "integer",
          "format": "int64",
          "description": "The frequency at which the disco group is supposed to be rerun in milliseconds."
        },
        "seeds": {
          "type": "array",
          "description": "The list of seeds used for the disco group runs.",
          "items": {
            "$ref": "#/definitions/DiscoSource"
          },
          "x-ms-identifiers": []
        },
        "names": {
          "type": "array",
          "description": "The list of names used for the disco group runs.",
          "items": {
            "type": "string"
          }
        },
        "excludes": {
          "type": "array",
          "description": "The list of excludes used for the disco group runs, aka assets to exclude from the discovery algorithm.",
          "items": {
            "$ref": "#/definitions/DiscoSource"
          },
          "x-ms-identifiers": []
        },
        "templateId": {
          "type": "string",
          "description": "The unique identifier for the disco template used for the disco group creation."
        }
      }
    },
    "DiscoRunPageResult": {
      "type": "object",
      "properties": {
        "totalElements": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items available in the full result set."
        },
        "nextLink": {
          "type": "string",
          "description": "The link to access the next page of results.  Not set if at the end of the result set."
        },
        "value": {
          "type": "array",
          "description": "The items in the current page of results.",
          "items": {
            "$ref": "#/definitions/DiscoRunResult"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "DiscoRunResult": {
      "type": "object",
      "description": "The latest run of this disco group with some limited information, null if the group has never been run.",
      "properties": {
        "submittedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date for when the disco run was created in the system."
        },
        "startedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date for when the disco run was actually started by the system."
        },
        "completedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date for when the disco run was completed by the system."
        },
        "tier": {
          "type": "string",
          "description": "The tier which will affect the algorithm used for the disco run."
        },
        "state": {
          "$ref": "#/definitions/DiscoRunState",
          "description": "The State of the disco run."
        },
        "totalAssetsFoundCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total count of assets that were found this disco run."
        },
        "seeds": {
          "type": "array",
          "description": "The list of seeds used for the disco run.",
          "items": {
            "$ref": "#/definitions/DiscoSource"
          },
          "x-ms-identifiers": []
        },
        "excludes": {
          "type": "array",
          "description": "The list of excludes used for the disco run, aka assets to exclude from the discovery algorithm.",
          "items": {
            "$ref": "#/definitions/DiscoSource"
          },
          "x-ms-identifiers": []
        },
        "names": {
          "type": "array",
          "description": "The list of names used for the disco run.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DiscoRunState": {
      "type": "string",
      "description": "The State of the disco run.",
      "enum": [
        "pending",
        "running",
        "completed",
        "failed"
      ],
      "x-ms-enum": {
        "name": "DiscoRunState",
        "modelAsString": true
      }
    },
    "DiscoSource": {
      "type": "object",
      "description": "Source entity used to drive discovery.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/DiscoSourceKind",
          "description": "The kind of disco source."
        },
        "name": {
          "type": "string",
          "description": "The name for the disco source."
        }
      }
    },
    "DiscoSourceKind": {
      "type": "string",
      "description": "The kind of disco source.",
      "enum": [
        "as",
        "attribute",
        "contact",
        "domain",
        "host",
        "ipBlock"
      ],
      "x-ms-enum": {
        "name": "DiscoSourceKind",
        "modelAsString": true
      }
    },
    "DiscoTemplate": {
      "type": "object",
      "description": "The items in the current page of results.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system generated unique id for the resource.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The caller provided unique name for the resource."
        },
        "displayName": {
          "type": "string",
          "description": "The name that can be used for display purposes."
        },
        "industry": {
          "type": "string",
          "description": "The name of the industry."
        },
        "region": {
          "type": "string",
          "description": "The name of the region."
        },
        "countryCode": {
          "type": "string",
          "description": "The country code."
        },
        "stateCode": {
          "type": "string",
          "description": "The state code."
        },
        "city": {
          "type": "string",
          "description": "The name of the city."
        },
        "seeds": {
          "type": "array",
          "description": "The list of disco template seeds.",
          "items": {
            "$ref": "#/definitions/DiscoSource"
          },
          "x-ms-identifiers": []
        },
        "names": {
          "type": "array",
          "description": "The list of disco template names.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "DomainAsset": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "whoisId": {
          "type": "integer",
          "format": "int64"
        },
        "registrarIanaIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedInteger"
          },
          "x-ms-identifiers": []
        },
        "registrantContacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registrantOrgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminContacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalContacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "alexaInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlexaInfo"
          },
          "x-ms-identifiers": []
        },
        "nameServers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "mailServers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "whoisServers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "domainStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registrarCreatedAt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "registrarUpdatedAt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "registrarExpiresAt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "soaRecords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SoaRecord"
          },
          "x-ms-identifiers": []
        },
        "detailedFromWhoisAt": {
          "type": "string",
          "format": "date-time"
        },
        "registrarNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "parkedDomain": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "registrantNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminOrgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalOrgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registrantPhones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminPhones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalPhones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InventoryAsset"
        }
      ]
    },
    "DomainAssetResource": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/DomainAsset",
          "description": "asset"
        }
      },
      "required": [
        "asset"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        }
      ],
      "x-ms-discriminator-value": "domain"
    },
    "ErrorDetail": {
      "type": "object",
      "description": "This is the top-level error object whose code matches the x-ms-error-code response header.",
      "properties": {
        "code": {
          "type": "string",
          "description": "This is one of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "This is a human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "This is the error target."
        },
        "details": {
          "type": "array",
          "description": "This is an array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/InnerError",
          "description": "This is an object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "GuidPair": {
      "type": "object",
      "properties": {
        "pageGuid": {
          "type": "string"
        },
        "crawlStateGuid": {
          "type": "string"
        },
        "loadDate": {
          "type": "string",
          "format": "date-time"
        },
        "recent": {
          "type": "boolean"
        }
      }
    },
    "HostAsset": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "ipAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "webComponents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebComponent"
          },
          "x-ms-identifiers": []
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedHeader"
          },
          "x-ms-identifiers": []
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          },
          "x-ms-identifiers": []
        },
        "cookies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cookie"
          },
          "x-ms-identifiers": []
        },
        "sslCerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SslCertAsset"
          },
          "x-ms-identifiers": []
        },
        "parentHosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "childHosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "hostCore": {
          "$ref": "#/definitions/HostCore"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          },
          "x-ms-identifiers": []
        },
        "cnames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "resourceUrls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceUrl"
          },
          "x-ms-identifiers": []
        },
        "scanMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScanMetadata"
          },
          "x-ms-identifiers": []
        },
        "asns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "ipBlocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpBlock"
          },
          "x-ms-identifiers": []
        },
        "responseBodies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "domainAsset": {
          "$ref": "#/definitions/DomainAsset"
        },
        "nsRecord": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "mxRecord": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "webserver": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "location": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLocation"
          },
          "x-ms-identifiers": []
        },
        "nxdomain": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "sslServerConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SslServerConfig"
          },
          "x-ms-identifiers": []
        },
        "isWildcard": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "banners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Banner"
          },
          "x-ms-identifiers": []
        },
        "ipv4": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "ipv6": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InventoryAsset"
        }
      ]
    },
    "HostAssetResource": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/HostAsset",
          "description": "asset"
        }
      },
      "required": [
        "asset"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        }
      ],
      "x-ms-discriminator-value": "host"
    },
    "HostCore": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "blacklistCauseFirstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "blacklistCauseLastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "blacklistCauseCount": {
          "type": "integer",
          "format": "int64"
        },
        "blacklistResourceFirstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "blacklistResourceLastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "blacklistResourceCount": {
          "type": "integer",
          "format": "int64"
        },
        "blacklistSequenceFirstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "blacklistSequenceLastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "blacklistSequenceCount": {
          "type": "integer",
          "format": "int64"
        },
        "phishCauseCount": {
          "type": "integer",
          "format": "int64"
        },
        "malwareCauseCount": {
          "type": "integer",
          "format": "int64"
        },
        "spamCauseCount": {
          "type": "integer",
          "format": "int64"
        },
        "scamCauseCount": {
          "type": "integer",
          "format": "int64"
        },
        "phishResourceCount": {
          "type": "integer",
          "format": "int64"
        },
        "malwareResourceCount": {
          "type": "integer",
          "format": "int64"
        },
        "spamResourceCount": {
          "type": "integer",
          "format": "int64"
        },
        "scamResourceCount": {
          "type": "integer",
          "format": "int64"
        },
        "phishSequenceCount": {
          "type": "integer",
          "format": "int64"
        },
        "malwareSequenceCount": {
          "type": "integer",
          "format": "int64"
        },
        "spamSequenceCount": {
          "type": "integer",
          "format": "int64"
        },
        "scamSequenceCount": {
          "type": "integer",
          "format": "int64"
        },
        "alexaRank": {
          "type": "integer",
          "format": "int32"
        },
        "hostReputationScore": {
          "type": "integer",
          "format": "int32"
        },
        "hostPhishReputationScore": {
          "type": "integer",
          "format": "int32"
        },
        "hostMalwareReputationScore": {
          "type": "integer",
          "format": "int32"
        },
        "hostSpamReputationScore": {
          "type": "integer",
          "format": "int32"
        },
        "hostScamReputationScore": {
          "type": "integer",
          "format": "int32"
        },
        "domainReputationScore": {
          "type": "integer",
          "format": "int32"
        },
        "domainPhishReputationScore": {
          "type": "integer",
          "format": "int32"
        },
        "domainMalwareReputationScore": {
          "type": "integer",
          "format": "int32"
        },
        "domainSpamReputationScore": {
          "type": "integer",
          "format": "int32"
        },
        "domainScamReputationScore": {
          "type": "integer",
          "format": "int32"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "InnerError": {
      "type": "object",
      "description": "This is an object containing more specific information than the current object about the error.",
      "properties": {
        "code": {
          "type": "string",
          "description": "This is a more specific error code than was provided by the containing error."
        },
        "value": {
          "description": "This is an additional field representing the value that caused the error to help with debugging."
        }
      }
    },
    "InventoryAsset": {
      "type": "object"
    },
    "IpAddressAsset": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "type": "string"
        },
        "asns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "reputations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reputation"
          },
          "x-ms-identifiers": []
        },
        "webComponents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebComponent"
          },
          "x-ms-identifiers": []
        },
        "netRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedHeader"
          },
          "x-ms-identifiers": []
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          },
          "x-ms-identifiers": []
        },
        "cookies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cookie"
          },
          "x-ms-identifiers": []
        },
        "sslCerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SslCertAsset"
          },
          "x-ms-identifiers": []
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          },
          "x-ms-identifiers": []
        },
        "ipBlocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpBlock"
          },
          "x-ms-identifiers": []
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "banners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Banner"
          },
          "x-ms-identifiers": []
        },
        "scanMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScanMetadata"
          },
          "x-ms-identifiers": []
        },
        "nsRecord": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "mxRecord": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "location": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLocation"
          },
          "x-ms-identifiers": []
        },
        "hosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "nxdomain": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "sslServerConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SslServerConfig"
          },
          "x-ms-identifiers": []
        },
        "ipv4": {
          "type": "boolean"
        },
        "ipv6": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InventoryAsset"
        }
      ]
    },
    "IpAddressAssetResource": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/IpAddressAsset",
          "description": "asset"
        }
      },
      "required": [
        "asset"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        }
      ],
      "x-ms-discriminator-value": "ipAddress"
    },
    "IpBlock": {
      "type": "object",
      "properties": {
        "ipBlock": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "recent": {
          "type": "boolean"
        }
      }
    },
    "IpBlockAsset": {
      "type": "object",
      "properties": {
        "ipBlock": {
          "type": "string"
        },
        "asns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "bgpPrefixes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "netNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registrantContacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registrantOrgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminContacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalContacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registrarCreatedAt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "registrarUpdatedAt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "netRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "startIp": {
          "type": "string"
        },
        "endIp": {
          "type": "string"
        },
        "reputations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reputation"
          },
          "x-ms-identifiers": []
        },
        "detailedFromWhoisAt": {
          "type": "string",
          "format": "date-time"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "location": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLocation"
          },
          "x-ms-identifiers": []
        },
        "registrarExpiresAt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "registrantNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminOrgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalOrgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "registrantPhones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "adminPhones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "technicalPhones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "ipv4": {
          "type": "boolean"
        },
        "ipv6": {
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InventoryAsset"
        }
      ]
    },
    "IpBlockAssetResource": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/IpBlockAsset",
          "description": "asset"
        }
      },
      "required": [
        "asset"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        }
      ],
      "x-ms-discriminator-value": "ipBlock"
    },
    "Location": {
      "type": "object",
      "properties": {
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "regionName": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "areaCode": {
          "type": "integer",
          "format": "int32"
        },
        "postalCode": {
          "type": "string"
        },
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "longitude": {
          "type": "number",
          "format": "float"
        },
        "dmaCode": {
          "type": "integer",
          "format": "int32"
        },
        "metroCodeId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LogAnalyticsDataConnection": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/LogAnalyticsDataConnectionProperties",
          "description": "properties"
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DataConnection"
        }
      ],
      "x-ms-discriminator-value": "logAnalytics"
    },
    "LogAnalyticsDataConnectionData": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/LogAnalyticsDataConnectionProperties",
          "description": "properties"
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DataConnectionData"
        }
      ],
      "x-ms-discriminator-value": "logAnalytics"
    },
    "LogAnalyticsDataConnectionProperties": {
      "type": "object",
      "properties": {
        "apiKey": {
          "type": "string",
          "description": "log analytics api key"
        },
        "workspaceId": {
          "type": "string",
          "description": "log analytics workspace id"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DataConnectionProperties"
        }
      ]
    },
    "ObservedBoolean": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ObservedValue"
        }
      ]
    },
    "ObservedHeader": {
      "type": "object",
      "properties": {
        "headerName": {
          "type": "string"
        },
        "headerValue": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ObservedValue"
        }
      ]
    },
    "ObservedInteger": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ObservedValue"
        }
      ]
    },
    "ObservedIntegers": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ObservedValue"
        }
      ]
    },
    "ObservedLocation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Location"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ObservedValue"
        }
      ]
    },
    "ObservedLong": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int64"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ObservedValue"
        }
      ]
    },
    "ObservedPortState": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ObservedPortStateValue"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ObservedValue"
        }
      ]
    },
    "ObservedPortStateValue": {
      "type": "string",
      "enum": [
        "open",
        "closed",
        "filtered"
      ],
      "x-ms-enum": {
        "name": "ObservedPortStateValue",
        "modelAsString": true
      }
    },
    "ObservedString": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ObservedValue"
        }
      ]
    },
    "ObservedValue": {
      "type": "object",
      "description": "Template model for observed values",
      "properties": {
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "recent": {
          "type": "boolean"
        }
      }
    },
    "PageAsset": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri"
        },
        "httpMethod": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "ipAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "successful": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "httpResponseCodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedInteger"
          },
          "x-ms-identifiers": []
        },
        "httpResponseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "responseTimes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "frames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "windows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "nonHtmlFrames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "undirectedContent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "contentTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "contentLengths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "windowNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "charsets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "titles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "responseHeaders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedHeader"
          },
          "x-ms-identifiers": []
        },
        "cookies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cookie"
          },
          "x-ms-identifiers": []
        },
        "webComponents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebComponent"
          },
          "x-ms-identifiers": []
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          },
          "x-ms-identifiers": []
        },
        "assetSecurityPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetSecurityPolicy"
          },
          "x-ms-identifiers": []
        },
        "responseBodyMinhashSignatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedIntegers"
          },
          "x-ms-identifiers": []
        },
        "fullDomMinhashSignatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedIntegers"
          },
          "x-ms-identifiers": []
        },
        "responseBodyHashSignatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "sslCerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SslCertAsset"
          },
          "x-ms-identifiers": []
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "cause": {
          "$ref": "#/definitions/PageCause"
        },
        "referrer": {
          "type": "string"
        },
        "redirectUrls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "redirectType": {
          "$ref": "#/definitions/PageAssetRedirectType"
        },
        "finalUrls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "finalResponseCodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedInteger"
          },
          "x-ms-identifiers": []
        },
        "parkedPage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "resourceUrls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceUrl"
          },
          "x-ms-identifiers": []
        },
        "guids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GuidPair"
          },
          "x-ms-identifiers": []
        },
        "finalIpAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "asns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "ipBlocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpBlock"
          },
          "x-ms-identifiers": []
        },
        "finalAsns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLong"
          },
          "x-ms-identifiers": []
        },
        "finalIpBlocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpBlock"
          },
          "x-ms-identifiers": []
        },
        "responseBodies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "domainAsset": {
          "$ref": "#/definitions/DomainAsset"
        },
        "rootUrl": {
          "$ref": "#/definitions/ObservedBoolean"
        },
        "isRootUrl": {
          "type": "boolean"
        },
        "location": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedLocation"
          },
          "x-ms-identifiers": []
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          },
          "x-ms-identifiers": []
        },
        "siteStatus": {
          "type": "string"
        },
        "cnames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "cdns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "host": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "sslServerConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SslServerConfig"
          },
          "x-ms-identifiers": []
        },
        "gdprAssetSecurityPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetSecurityPolicy"
          },
          "x-ms-identifiers": []
        },
        "ipv4": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        },
        "ipv6": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedBoolean"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InventoryAsset"
        }
      ]
    },
    "PageAssetRedirectType": {
      "type": "string",
      "enum": [
        "httpHeader",
        "metaRefresh",
        "javascript",
        "final"
      ],
      "x-ms-enum": {
        "name": "PageAssetRedirectType",
        "modelAsString": true
      }
    },
    "PageAssetResource": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/PageAsset",
          "description": "asset"
        }
      },
      "required": [
        "asset"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        }
      ],
      "x-ms-discriminator-value": "page"
    },
    "PageCause": {
      "type": "object",
      "properties": {
        "cause": {
          "type": "string"
        },
        "causeElementXPath": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "possibleMatches": {
          "type": "integer",
          "format": "int32"
        },
        "loopDetected": {
          "type": "boolean"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "domChangeIndex": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PagedAssetResource": {
      "type": "object",
      "description": "Paged collection of AssetResource items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The AssetResource items on this page",
          "items": {
            "$ref": "#/definitions/AssetResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items available in the full result set."
        },
        "mark": {
          "type": "string",
          "description": "The cursor mark to be used on the next request.  Not set if using paging."
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDataConnection": {
      "type": "object",
      "description": "Paged collection of DataConnection items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DataConnection items on this page",
          "items": {
            "$ref": "#/definitions/DataConnection"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items available in the full result set."
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDiscoGroup": {
      "type": "object",
      "description": "Paged collection of DiscoGroup items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DiscoGroup items on this page",
          "items": {
            "$ref": "#/definitions/DiscoGroup"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items available in the full result set."
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDiscoTemplate": {
      "type": "object",
      "description": "Paged collection of DiscoTemplate items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DiscoTemplate items on this page",
          "items": {
            "$ref": "#/definitions/DiscoTemplate"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items available in the full result set."
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedSavedFilter": {
      "type": "object",
      "description": "Paged collection of SavedFilter items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The SavedFilter items on this page",
          "items": {
            "$ref": "#/definitions/SavedFilter"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items available in the full result set."
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedTask": {
      "type": "object",
      "description": "Paged collection of Task items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Task items on this page",
          "items": {
            "$ref": "#/definitions/Task"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items available in the full result set."
        }
      },
      "required": [
        "value"
      ]
    },
    "Port": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ReportAssetSnapshotExportRequest": {
      "type": "object",
      "description": "A request body used for an asset report snapshot export.",
      "properties": {
        "metric": {
          "type": "string",
          "description": "The metric to retrieve a snapshot for."
        },
        "fileName": {
          "type": "string",
          "description": "The filename of the exported file."
        },
        "columns": {
          "type": "array",
          "description": "The columns to include in the export",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReportAssetSnapshotRequest": {
      "type": "object",
      "description": "A request body used to retrieve an asset report snapshot.",
      "properties": {
        "metric": {
          "type": "string",
          "description": "The metric to retrieve a snapshot for."
        },
        "labelName": {
          "type": "string",
          "description": "The name of the label to retrieve a snapshot for."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The number of assets per page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page to retrieve."
        }
      }
    },
    "ReportAssetSnapshotResult": {
      "type": "object",
      "description": "A snapshot of assets captured daily for the provided metric.  Asset details only contain primary properties.  Detailed asset data can be retrieved from the asset endpoints.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The name of the metric."
        },
        "metric": {
          "type": "string",
          "description": "The unique metric name."
        },
        "labelName": {
          "type": "string",
          "description": "The customer label that was filtered on, if one was provided."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The last time this asset data was updated on this metric."
        },
        "description": {
          "type": "string",
          "description": "A description of what the metric represents."
        },
        "assets": {
          "$ref": "#/definitions/AssetPageResult",
          "description": "The page of assets that match the provided metric."
        }
      }
    },
    "ReportAssetSummaryRequest": {
      "type": "object",
      "description": "A request body used to retrieve summary asset information. One and only one collection of summary identifiers must be provided: filters, metrics, or metricCategories.",
      "properties": {
        "metricCategories": {
          "type": "array",
          "description": "Categories to retrieve risk reporting data for.",
          "items": {
            "type": "string"
          }
        },
        "metrics": {
          "type": "array",
          "description": "Metrics to retrieve risk reporting data for.",
          "items": {
            "type": "string"
          }
        },
        "filters": {
          "type": "array",
          "description": "Query filters to apply to the asset summary.",
          "items": {
            "type": "string"
          }
        },
        "groupBy": {
          "type": "string",
          "description": "A parameter to group the assets by (first level facet field), only used when the chosen summary identifier is filters."
        },
        "segmentBy": {
          "type": "string",
          "description": "A parameter to segment the assets by (second level facet field), only used when the chosen summary identifier is filters."
        },
        "labelName": {
          "type": "string",
          "description": "Currently unused."
        }
      }
    },
    "ReportAssetSummaryResult": {
      "type": "object",
      "properties": {
        "assetSummaries": {
          "type": "array",
          "description": "The collection of asset summaries.",
          "items": {
            "$ref": "#/definitions/AssetSummaryResult"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ReportBillableAssetBreakdown": {
      "type": "object",
      "description": "The breakdown of billable asset counts for each asset type.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ReportBillableAssetBreakdownKind",
          "description": "The kind of billable asset."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The number of assets of this type."
        }
      }
    },
    "ReportBillableAssetBreakdownKind": {
      "type": "string",
      "description": "The kind of billable asset.",
      "enum": [
        "domain",
        "host",
        "ipAddress"
      ],
      "x-ms-enum": {
        "name": "ReportBillableAssetBreakdownKind",
        "modelAsString": true
      }
    },
    "ReportBillableAssetSnapshotResult": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date these assets were billed on."
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of billable assets for this date."
        },
        "assetBreakdown": {
          "type": "array",
          "description": "The breakdown of billable asset counts for each asset type.",
          "items": {
            "$ref": "#/definitions/ReportBillableAssetBreakdown"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ReportBillableAssetSummaryResult": {
      "type": "object",
      "properties": {
        "assetSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportBillableAssetSnapshotResult"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "Reputation": {
      "type": "object",
      "properties": {
        "listName": {
          "type": "string"
        },
        "threatType": {
          "type": "string"
        },
        "trusted": {
          "type": "boolean"
        },
        "cidr": {
          "type": "string"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "listUpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "recent": {
          "type": "boolean"
        }
      }
    },
    "ResourceUrl": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependentResource"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "recent": {
          "type": "boolean"
        }
      }
    },
    "SavedFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system generated unique id for the resource."
        },
        "name": {
          "type": "string",
          "description": "The caller provided unique name for the resource.",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "The name that can be used for display purposes."
        },
        "filter": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "SavedFilterData": {
      "type": "object",
      "description": "A request body used to create a saved filter.",
      "properties": {
        "filter": {
          "type": "string",
          "description": "An expression on the resource type that selects the resources to be returned."
        },
        "description": {
          "type": "string",
          "description": "A human readable description of the saved filter."
        }
      },
      "required": [
        "filter",
        "description"
      ]
    },
    "ScanMetadata": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "bannerMetadata": {
          "type": "string"
        },
        "startScan": {
          "type": "string",
          "format": "date-time"
        },
        "endScan": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Service": {
      "type": "object",
      "properties": {
        "scheme": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "webComponents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebComponent"
          },
          "x-ms-identifiers": []
        },
        "sslCerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SslCertAsset"
          },
          "x-ms-identifiers": []
        },
        "exceptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedString"
          },
          "x-ms-identifiers": []
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "recent": {
          "type": "boolean"
        },
        "portStates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObservedPortState"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "SoaRecord": {
      "type": "object",
      "properties": {
        "nameServer": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "serialNumber": {
          "type": "integer",
          "format": "int64"
        },
        "recent": {
          "type": "boolean"
        }
      }
    },
    "Source": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "SslCertAsset": {
      "type": "object",
      "properties": {
        "sha1": {
          "type": "string"
        },
        "subjectCommonNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "organizations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "organizationalUnits": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issuerCommonNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sigAlgName": {
          "type": "string"
        },
        "invalidAfter": {
          "type": "string",
          "format": "date-time"
        },
        "serialNumber": {
          "type": "string"
        },
        "subjectAlternativeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issuerAlternativeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "invalidBefore": {
          "type": "string",
          "format": "date-time"
        },
        "keySize": {
          "type": "integer",
          "format": "int32"
        },
        "keyAlgorithm": {
          "type": "string"
        },
        "subjectLocality": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectState": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectCountry": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issuerLocality": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issuerState": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issuerCountry": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectOrganizations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectOrganizationalUnits": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issuerOrganizations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issuerOrganizationalUnits": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "certificateAuthority": {
          "type": "boolean"
        },
        "selfSigned": {
          "type": "boolean"
        },
        "sigAlgOid": {
          "type": "string"
        },
        "recent": {
          "type": "boolean"
        },
        "validationType": {
          "$ref": "#/definitions/SslCertAssetValidationType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InventoryAsset"
        }
      ]
    },
    "SslCertAssetResource": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/SslCertAsset",
          "description": "asset"
        }
      },
      "required": [
        "asset"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        }
      ],
      "x-ms-discriminator-value": "sslCert"
    },
    "SslCertAssetValidationType": {
      "type": "string",
      "enum": [
        "domainValidation",
        "organizationValidation",
        "extendedValidation"
      ],
      "x-ms-enum": {
        "name": "SslCertAssetValidationType",
        "modelAsString": true
      }
    },
    "SslServerConfig": {
      "type": "object",
      "properties": {
        "tlsVersions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cipherSuites": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "SubResourceIntegrityCheck": {
      "type": "object",
      "properties": {
        "violation": {
          "type": "boolean"
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "causePageUrl": {
          "type": "string"
        },
        "crawlGuid": {
          "type": "string"
        },
        "pageGuid": {
          "type": "string"
        },
        "resourceGuid": {
          "type": "string"
        },
        "expectedHash": {
          "type": "string"
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the task.",
          "readOnly": true
        },
        "startedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time the task started."
        },
        "completedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time the task completed."
        },
        "lastPolledAt": {
          "type": "string",
          "format": "date-time",
          "description": "The last time the status of the task was updated."
        },
        "state": {
          "$ref": "#/definitions/TaskState",
          "description": "The state the task is in."
        },
        "phase": {
          "$ref": "#/definitions/TaskPhase",
          "description": "The phase the task is in."
        },
        "reason": {
          "type": "string",
          "description": "The reason the task was moved into its current state, if the task wasn't completed."
        },
        "metadata": {
          "type": "object",
          "description": "Attributes unique to the task.  This differs by task type.",
          "additionalProperties": {}
        }
      },
      "required": [
        "id"
      ]
    },
    "TaskPhase": {
      "type": "string",
      "description": "The phase the task is in.",
      "enum": [
        "running",
        "polling",
        "complete"
      ],
      "x-ms-enum": {
        "name": "TaskPhase",
        "modelAsString": true
      }
    },
    "TaskState": {
      "type": "string",
      "description": "The state the task is in.",
      "enum": [
        "pending",
        "running",
        "paused",
        "complete",
        "incomplete",
        "failed",
        "warning"
      ],
      "x-ms-enum": {
        "name": "TaskState",
        "modelAsString": true
      }
    },
    "ValidateResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "This is the top-level error object whose code matches the x-ms-error-code response header."
        }
      }
    },
    "Versions": {
      "type": "string",
      "description": "The EASM Defender service version.",
      "enum": [
        "2023-03-01-preview"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v2023_03_01_preview",
            "value": "2023-03-01-preview",
            "description": "Version 2023-03-01-preview"
          }
        ]
      }
    },
    "WebComponent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "ruleId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "firstSeen": {
          "type": "string",
          "format": "date-time"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "cve": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cve"
          },
          "x-ms-identifiers": []
        },
        "endOfLife": {
          "type": "integer",
          "format": "int64"
        },
        "recent": {
          "type": "boolean"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-ms-identifiers": []
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          },
          "x-ms-identifiers": []
        },
        "service": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "Azure.Core.FilterQueryParameter": {
      "name": "filter",
      "in": "query",
      "description": "Filter the result list using the given expression.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "Azure.Core.MaxPageSizeQueryParameter": {
      "name": "maxpagesize",
      "in": "query",
      "description": "The maximum number of result items per page.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.SkipQueryParameter": {
      "name": "skip",
      "in": "query",
      "description": "The number of result items to skip.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "DiscoGroupNameParameter": {
      "name": "groupName",
      "in": "path",
      "description": "The unique identifier for the discovery group.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "MarkParameter": {
      "name": "mark",
      "in": "query",
      "description": "Specify this value instead of 'skip' to use cursor-based searching. Initial value is '*' and subsequent values are returned in the response.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "OrderByParameter": {
      "name": "orderby",
      "in": "query",
      "description": "A list of expressions that specify the order of the returned resources.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "RequiredFilterParameter": {
      "name": "filter",
      "in": "query",
      "description": "An expression on the resource type that selects the resources to be returned.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
