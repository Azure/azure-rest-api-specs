{
  "swagger": "2.0",
  "info": {
    "title": "Azure AI Search",
    "version": "2025-11-01-preview",
    "description": "Client that can be used to manage and query indexes and documents, as well as manage other resources, on a search service.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "OAuth2Auth": [
        "https://search.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "api-key",
      "in": "header"
    },
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://search.azure.com/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/aliases": {
      "get": {
        "operationId": "Aliases_List",
        "description": "Lists all aliases available for a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListAliasesResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceListAliases": {
            "$ref": "./examples/SearchServiceListAliases.json"
          }
        }
      },
      "post": {
        "operationId": "Aliases_Create",
        "description": "Creates a new search alias.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "alias",
            "in": "body",
            "description": "The definition of the alias to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchAlias"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SearchAlias"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateAlias": {
            "$ref": "./examples/SearchServiceCreateAlias.json"
          }
        }
      }
    },
    "/aliases('{aliasName}')": {
      "get": {
        "operationId": "Aliases_Get",
        "description": "Retrieves an alias definition.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "aliasName",
            "in": "path",
            "description": "The name of the alias.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchAlias"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceGetAlias": {
            "$ref": "./examples/SearchServiceGetAlias.json"
          }
        }
      },
      "put": {
        "operationId": "Aliases_CreateOrUpdate",
        "description": "Creates a new search alias or updates an alias if it already exists.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "Prefer",
            "in": "header",
            "description": "For HTTP PUT requests, instructs the service to return the created/updated resource on success.",
            "required": true,
            "type": "string",
            "enum": [
              "return=representation"
            ],
            "x-ms-enum": {
              "modelAsString": false
            },
            "x-ms-client-name": "prefer"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "aliasName",
            "in": "path",
            "description": "The name of the alias.",
            "required": true,
            "type": "string"
          },
          {
            "name": "alias",
            "in": "body",
            "description": "The definition of the alias to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchAlias"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchAlias"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SearchAlias"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateOrUpdateAlias": {
            "$ref": "./examples/SearchServiceCreateOrUpdateAlias.json"
          }
        }
      },
      "delete": {
        "operationId": "Aliases_Delete",
        "description": "Deletes a search alias and its associated mapping to an index. This operation is permanent, with no recovery option. The mapped index is untouched by this operation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "aliasName",
            "in": "path",
            "description": "The name of the alias.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceDeleteAlias": {
            "$ref": "./examples/SearchServiceDeleteAlias.json"
          }
        }
      }
    },
    "/datasources": {
      "get": {
        "operationId": "DataSources_List",
        "description": "Lists all datasources available for a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which top-level properties to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListDataSourcesResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceListDataSources": {
            "$ref": "./examples/SearchServiceListDataSources.json"
          }
        }
      },
      "post": {
        "operationId": "DataSources_Create",
        "description": "Creates a new datasource.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "dataSource",
            "in": "body",
            "description": "The definition of the datasource to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchIndexerDataSource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SearchIndexerDataSource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateDataSource": {
            "$ref": "./examples/SearchServiceCreateDataSource.json"
          }
        }
      }
    },
    "/datasources('{dataSourceName}')": {
      "get": {
        "operationId": "DataSources_Get",
        "description": "Retrieves a datasource definition.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "dataSourceName",
            "in": "path",
            "description": "The name of the datasource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchIndexerDataSource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceGetDataSource": {
            "$ref": "./examples/SearchServiceGetDataSource.json"
          }
        }
      },
      "put": {
        "operationId": "DataSources_CreateOrUpdate",
        "description": "Creates a new datasource or updates a datasource if it already exists.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "Prefer",
            "in": "header",
            "description": "For HTTP PUT requests, instructs the service to return the created/updated resource on success.",
            "required": true,
            "type": "string",
            "enum": [
              "return=representation"
            ],
            "x-ms-enum": {
              "modelAsString": false
            },
            "x-ms-client-name": "prefer"
          },
          {
            "name": "ignoreResetRequirements",
            "in": "query",
            "description": "Ignores cache reset requirements.",
            "required": false,
            "type": "boolean",
            "x-ms-client-name": "skipIndexerResetRequirementForCache"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "dataSourceName",
            "in": "path",
            "description": "The name of the datasource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataSource",
            "in": "body",
            "description": "The definition of the datasource to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchIndexerDataSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchIndexerDataSource"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SearchIndexerDataSource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateOrUpdateDataSource": {
            "$ref": "./examples/SearchServiceCreateOrUpdateDataSource.json"
          }
        }
      },
      "delete": {
        "operationId": "DataSources_Delete",
        "description": "Deletes a datasource.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "dataSourceName",
            "in": "path",
            "description": "The name of the datasource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceDeleteDataSource": {
            "$ref": "./examples/SearchServiceDeleteDataSource.json"
          }
        }
      }
    },
    "/indexers": {
      "get": {
        "operationId": "Indexers_List",
        "description": "Lists all indexers available for a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which top-level properties to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListIndexersResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceListIndexers": {
            "$ref": "./examples/SearchServiceListIndexers.json"
          }
        }
      },
      "post": {
        "operationId": "Indexers_Create",
        "description": "Creates a new indexer.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexer",
            "in": "body",
            "description": "The definition of the indexer to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchIndexer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SearchIndexer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateIndexer": {
            "$ref": "./examples/SearchServiceCreateIndexer.json"
          }
        }
      }
    },
    "/indexers('{indexerName}')": {
      "get": {
        "operationId": "Indexers_Get",
        "description": "Retrieves an indexer definition.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexerName",
            "in": "path",
            "description": "The name of the indexer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchIndexer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceGetIndexer": {
            "$ref": "./examples/SearchServiceGetIndexer.json"
          }
        }
      },
      "put": {
        "operationId": "Indexers_CreateOrUpdate",
        "description": "Creates a new indexer or updates an indexer if it already exists.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "Prefer",
            "in": "header",
            "description": "For HTTP PUT requests, instructs the service to return the created/updated resource on success.",
            "required": true,
            "type": "string",
            "enum": [
              "return=representation"
            ],
            "x-ms-enum": {
              "modelAsString": false
            },
            "x-ms-client-name": "prefer"
          },
          {
            "name": "ignoreResetRequirements",
            "in": "query",
            "description": "Ignores cache reset requirements.",
            "required": false,
            "type": "boolean",
            "x-ms-client-name": "skipIndexerResetRequirementForCache"
          },
          {
            "name": "disableCacheReprocessingChangeDetection",
            "in": "query",
            "description": "Disables cache reprocessing change detection.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexerName",
            "in": "path",
            "description": "The name of the indexer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "indexer",
            "in": "body",
            "description": "The definition of the indexer to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchIndexer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchIndexer"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SearchIndexer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateOrUpdateIndexer": {
            "$ref": "./examples/SearchServiceCreateOrUpdateIndexer.json"
          }
        }
      },
      "delete": {
        "operationId": "Indexers_Delete",
        "description": "Deletes an indexer.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexerName",
            "in": "path",
            "description": "The name of the indexer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceDeleteIndexer": {
            "$ref": "./examples/SearchServiceDeleteIndexer.json"
          }
        }
      }
    },
    "/indexers('{indexerName}')/search.reset": {
      "post": {
        "operationId": "Indexers_Reset",
        "description": "Resets the change tracking state associated with an indexer.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexerName",
            "in": "path",
            "description": "The name of the indexer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceResetIndexer": {
            "$ref": "./examples/SearchServiceResetIndexer.json"
          }
        }
      }
    },
    "/indexers('{indexerName}')/search.resetdocs": {
      "post": {
        "operationId": "Indexers_ResetDocs",
        "description": "Resets specific documents in the datasource to be selectively re-ingested by the indexer.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "If false, keys or ids will be appended to existing ones. If true, only the keys or ids in this payload will be queued to be re-ingested.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexerName",
            "in": "path",
            "description": "The name of the indexer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "keysOrIds",
            "in": "body",
            "description": "The keys or ids of the documents to be re-ingested. If keys are provided, the document key field must be specified in the indexer configuration. If ids are provided, the document key field is ignored.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DocumentKeysOrIds"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceResetDocs": {
            "$ref": "./examples/SearchServiceResetDocs.json"
          }
        }
      }
    },
    "/indexers('{indexerName}')/search.resync": {
      "post": {
        "operationId": "Indexers_Resync",
        "description": "Resync selective options from the datasource to be re-ingested by the indexer.\"",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexerName",
            "in": "path",
            "description": "The name of the indexer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/indexers('{indexerName}')/search.run": {
      "post": {
        "operationId": "Indexers_Run",
        "description": "Runs an indexer on-demand.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexerName",
            "in": "path",
            "description": "The name of the indexer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceRunIndexer": {
            "$ref": "./examples/SearchServiceRunIndexer.json"
          }
        }
      }
    },
    "/indexers('{indexerName}')/search.status": {
      "get": {
        "operationId": "Indexers_GetStatus",
        "description": "Returns the current status and execution history of an indexer.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexerName",
            "in": "path",
            "description": "The name of the indexer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchIndexerStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceGetIndexerStatus": {
            "$ref": "./examples/SearchServiceGetIndexerStatus.json"
          }
        }
      }
    },
    "/indexes": {
      "get": {
        "operationId": "Indexes_List",
        "description": "Lists all indexes available for a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which top-level properties to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListIndexesResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceListIndexes": {
            "$ref": "./examples/SearchServiceListIndexes.json"
          }
        }
      },
      "post": {
        "operationId": "Indexes_Create",
        "description": "Creates a new search index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "index",
            "in": "body",
            "description": "The definition of the index to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchIndex"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SearchIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateIndex": {
            "$ref": "./examples/SearchServiceCreateIndex.json"
          }
        }
      }
    },
    "/indexes('{indexName}')": {
      "get": {
        "operationId": "Indexes_Get",
        "description": "Retrieves an index definition.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceGetIndex": {
            "$ref": "./examples/SearchServiceGetIndex.json"
          }
        }
      },
      "put": {
        "operationId": "Indexes_CreateOrUpdate",
        "description": "Creates a new search index or updates an index if it already exists.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "allowIndexDowntime",
            "in": "query",
            "description": "Allows new analyzers, tokenizers, token filters, or char filters to be added to an index by taking the index offline for at least a few seconds. This temporarily causes indexing and query requests to fail. Performance and write availability of the index can be impaired for several minutes after the index is updated, or longer for very large indexes.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Prefer",
            "in": "header",
            "description": "For HTTP PUT requests, instructs the service to return the created/updated resource on success.",
            "required": true,
            "type": "string",
            "enum": [
              "return=representation"
            ],
            "x-ms-enum": {
              "modelAsString": false
            },
            "x-ms-client-name": "prefer"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          },
          {
            "name": "index",
            "in": "body",
            "description": "The definition of the index to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchIndex"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchIndex"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SearchIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateOrUpdateIndex": {
            "$ref": "./examples/SearchServiceCreateOrUpdateIndex.json"
          }
        }
      },
      "delete": {
        "operationId": "Indexes_Delete",
        "description": "Deletes a search index and all the documents it contains. This operation is permanent, with no recovery option. Make sure you have a master copy of your index definition, data ingestion code, and a backup of the primary data source in case you need to re-build the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceDeleteIndex": {
            "$ref": "./examples/SearchServiceDeleteIndex.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs": {
      "get": {
        "operationId": "Documents_SearchGet",
        "description": "Searches for documents in the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "search",
            "in": "query",
            "description": "A full-text search query expression; Use \"*\" or omit this parameter to match all documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "searchText"
          },
          {
            "$ref": "#/parameters/SearchOptions.includeTotalResultCount"
          },
          {
            "$ref": "#/parameters/SearchOptions.facets"
          },
          {
            "$ref": "#/parameters/SearchOptions.filter"
          },
          {
            "$ref": "#/parameters/SearchOptions.highlightFields"
          },
          {
            "$ref": "#/parameters/SearchOptions.highlightPostTag"
          },
          {
            "$ref": "#/parameters/SearchOptions.highlightPreTag"
          },
          {
            "$ref": "#/parameters/SearchOptions.minimumCoverage"
          },
          {
            "$ref": "#/parameters/SearchOptions.orderBy"
          },
          {
            "$ref": "#/parameters/SearchOptions.queryType"
          },
          {
            "$ref": "#/parameters/SearchOptions.scoringParameters"
          },
          {
            "$ref": "#/parameters/SearchOptions.scoringProfile"
          },
          {
            "$ref": "#/parameters/SearchOptions.searchFields"
          },
          {
            "$ref": "#/parameters/SearchOptions.searchMode"
          },
          {
            "$ref": "#/parameters/SearchOptions.scoringStatistics"
          },
          {
            "$ref": "#/parameters/SearchOptions.sessionId"
          },
          {
            "$ref": "#/parameters/SearchOptions.select"
          },
          {
            "$ref": "#/parameters/SearchOptions.skip"
          },
          {
            "$ref": "#/parameters/SearchOptions.top"
          },
          {
            "$ref": "#/parameters/SearchOptions.semanticConfiguration"
          },
          {
            "$ref": "#/parameters/SearchOptions.semanticErrorHandling"
          },
          {
            "$ref": "#/parameters/SearchOptions.semanticMaxWaitInMilliseconds"
          },
          {
            "$ref": "#/parameters/SearchOptions.answers"
          },
          {
            "$ref": "#/parameters/SearchOptions.captions"
          },
          {
            "$ref": "#/parameters/SearchOptions.semanticQuery"
          },
          {
            "$ref": "#/parameters/SearchOptions.queryRewrites"
          },
          {
            "$ref": "#/parameters/SearchOptions.debug"
          },
          {
            "$ref": "#/parameters/SearchOptions.queryLanguage"
          },
          {
            "$ref": "#/parameters/SearchOptions.speller"
          },
          {
            "$ref": "#/parameters/SearchOptions.semanticFields"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexSearchDocumentsGet": {
            "$ref": "./examples/SearchIndexSearchDocumentsGet.json"
          },
          "SearchIndexSearchDocumentsSemanticGet": {
            "$ref": "./examples/SearchIndexSearchDocumentsSemanticGet.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/$count": {
      "get": {
        "operationId": "Documents_Count",
        "description": "Queries the number of documents in the index.",
        "produces": [
          "text/plain",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexCountDocuments": {
            "$ref": "./examples/SearchIndexCountDocuments.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.autocomplete": {
      "get": {
        "operationId": "Documents_AutocompleteGet",
        "description": "Autocompletes incomplete query terms based on input text and matching terms in the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "search",
            "in": "query",
            "description": "The incomplete term which should be auto-completed.",
            "required": true,
            "type": "string",
            "x-ms-client-name": "searchText"
          },
          {
            "name": "suggesterName",
            "in": "query",
            "description": "The name of the suggester as specified in the suggesters collection that's part of the index definition.",
            "required": true,
            "type": "string"
          },
          {
            "name": "autocompleteMode",
            "in": "query",
            "description": "Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms.",
            "required": false,
            "type": "string",
            "enum": [
              "oneTerm",
              "twoTerms",
              "oneTermWithContext"
            ],
            "x-ms-enum": {
              "name": "AutocompleteMode",
              "modelAsString": true,
              "values": [
                {
                  "name": "OneTerm",
                  "value": "oneTerm",
                  "description": "Only one term is suggested. If the query has two terms, only the last term is completed. For example, if the input is 'washington medic', the suggested terms could include 'medicaid', 'medicare', and 'medicine'."
                },
                {
                  "name": "TwoTerms",
                  "value": "twoTerms",
                  "description": "Matching two-term phrases in the index will be suggested. For example, if the input is 'medic', the suggested terms could include 'medicare coverage' and 'medical assistant'."
                },
                {
                  "name": "OneTermWithContext",
                  "value": "oneTermWithContext",
                  "description": "Completes the last term in a query with two or more terms, where the last two terms are a phrase that exists in the index. For example, if the input is 'washington medic', the suggested terms could include 'washington medicaid' and 'washington medical'."
                }
              ]
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "An OData expression that filters the documents used to produce completed terms for the Autocomplete result.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.",
            "required": false,
            "type": "boolean",
            "x-ms-client-name": "useFuzzyMatching"
          },
          {
            "name": "highlightPostTag",
            "in": "query",
            "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "highlightPreTag",
            "in": "query",
            "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "minimumCoverage",
            "in": "query",
            "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AutocompleteResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexAutocompleteDocumentsGet": {
            "$ref": "./examples/SearchIndexAutocompleteDocumentsGet.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.index": {
      "post": {
        "operationId": "Documents_Index",
        "description": "Sends a batch of document write actions to the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          },
          {
            "name": "batch",
            "in": "body",
            "description": "The batch of index actions.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndexBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response containing the status of operations for all documents in the indexing request.",
            "schema": {
              "$ref": "#/definitions/IndexDocumentsResult"
            }
          },
          "207": {
            "description": "Response containing the status of operations for all documents in the indexing request.",
            "schema": {
              "$ref": "#/definitions/IndexDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexIndexDocuments": {
            "$ref": "./examples/SearchIndexIndexDocuments.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.post.autocomplete": {
      "post": {
        "operationId": "Documents_AutocompletePost",
        "description": "Autocompletes incomplete query terms based on input text and matching terms in the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutocompleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AutocompleteResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexAutocompleteDocumentsPost": {
            "$ref": "./examples/SearchIndexAutocompleteDocumentsPost.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.post.search": {
      "post": {
        "operationId": "Documents_SearchPost",
        "description": "Searches for documents in the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexSearchDocumentsPost": {
            "$ref": "./examples/SearchIndexSearchDocumentsPost.json"
          },
          "SearchIndexSearchDocumentsSemanticPost": {
            "$ref": "./examples/SearchIndexSearchDocumentsSemanticPost.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.post.suggest": {
      "post": {
        "operationId": "Documents_SuggestPost",
        "description": "Suggests documents in the index that match the given partial query text.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuggestRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuggestDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexSuggestDocumentsPost": {
            "$ref": "./examples/SearchIndexSuggestDocumentsPost.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.suggest": {
      "get": {
        "operationId": "Documents_SuggestGet",
        "description": "Suggests documents in the index that match the given partial query text.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "search",
            "in": "query",
            "description": "The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.",
            "required": true,
            "type": "string",
            "x-ms-client-name": "searchText"
          },
          {
            "name": "suggesterName",
            "in": "query",
            "description": "The name of the suggester as specified in the suggesters collection that's part of the index definition.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/SuggestOptions.filter"
          },
          {
            "$ref": "#/parameters/SuggestOptions.useFuzzyMatching"
          },
          {
            "$ref": "#/parameters/SuggestOptions.highlightPostTag"
          },
          {
            "$ref": "#/parameters/SuggestOptions.highlightPreTag"
          },
          {
            "$ref": "#/parameters/SuggestOptions.minimumCoverage"
          },
          {
            "$ref": "#/parameters/SuggestOptions.orderBy"
          },
          {
            "$ref": "#/parameters/SuggestOptions.searchFields"
          },
          {
            "$ref": "#/parameters/SuggestOptions.select"
          },
          {
            "$ref": "#/parameters/SuggestOptions.top"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuggestDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexSuggestDocumentsGet": {
            "$ref": "./examples/SearchIndexSuggestDocumentsGet.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs('{key}')": {
      "get": {
        "operationId": "Documents_Get",
        "description": "Retrieves a document from the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the document to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "x-ms-client-name": "selectedFields"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LookupDocument"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexGetDocument": {
            "$ref": "./examples/SearchIndexGetDocument.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/search.analyze": {
      "post": {
        "operationId": "Indexes_Analyze",
        "description": "Shows how an analyzer breaks text into tokens.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The text and analyzer or analysis components to test.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyzeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AnalyzeResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceIndexAnalyze": {
            "$ref": "./examples/SearchServiceIndexAnalyze.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/search.stats": {
      "get": {
        "operationId": "Indexes_GetStatistics",
        "description": "Returns statistics for the given index, including a document count and storage usage.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/GetIndexStatisticsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceGetIndexStatistics": {
            "$ref": "./examples/SearchServiceGetIndexStatistics.json"
          }
        }
      }
    },
    "/indexstats": {
      "get": {
        "operationId": "GetIndexStatsSummary",
        "description": "Retrieves a summary of statistics for all indexes in the search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListIndexStatsSummary"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceGetIndexStatsSummary": {
            "$ref": "./examples/SearchServiceGetIndexStatsSummary.json"
          }
        }
      }
    },
    "/knowledgebases": {
      "get": {
        "operationId": "KnowledgeBases_List",
        "description": "Lists all knowledge bases available for a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListKnowledgeBasesResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "operationId": "KnowledgeBases_Create",
        "description": "Creates a new knowledge base.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "knowledgeBase",
            "in": "body",
            "description": "The definition of the knowledge base to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KnowledgeBase"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/KnowledgeBase"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/knowledgebases('{knowledgeBaseName}')": {
      "get": {
        "operationId": "KnowledgeBases_Get",
        "description": "Retrieves a knowledge base definition.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "knowledgeBaseName",
            "in": "path",
            "description": "The name of the knowledge base.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/KnowledgeBase"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "KnowledgeBases_CreateOrUpdate",
        "description": "Creates a new knowledge base or updates a knowledge base if it already exists.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "Prefer",
            "in": "header",
            "description": "For HTTP PUT requests, instructs the service to return the created/updated resource on success.",
            "required": true,
            "type": "string",
            "enum": [
              "return=representation"
            ],
            "x-ms-enum": {
              "modelAsString": false
            },
            "x-ms-client-name": "prefer"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "knowledgeBaseName",
            "in": "path",
            "description": "The name of the knowledge base.",
            "required": true,
            "type": "string"
          },
          {
            "name": "knowledgeBase",
            "in": "body",
            "description": "The definition of the knowledge base to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KnowledgeBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/KnowledgeBase"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/KnowledgeBase"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "operationId": "KnowledgeBases_Delete",
        "description": "Deletes a knowledge base.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "knowledgeBaseName",
            "in": "path",
            "description": "The name of the knowledge base.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/knowledgebases('{knowledgeBaseName}')/retrieve": {
      "post": {
        "operationId": "KnowledgeRetrieval_Retrieve",
        "description": "KnowledgeBase retrieves relevant data from backing stores.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "knowledgeBaseName",
            "in": "path",
            "description": "The name of the knowledge base.",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-ms-query-source-authorization",
            "in": "header",
            "description": "Token identifying the user for which the query is being executed. This token is used to enforce security restrictions on documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "querySourceAuthorization"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "retrievalRequest",
            "in": "body",
            "description": "The retrieval request to process.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KnowledgeBaseRetrievalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval response.",
            "schema": {
              "$ref": "#/definitions/KnowledgeBaseRetrievalResponse"
            }
          },
          "206": {
            "description": "Partial retrieval response.",
            "schema": {
              "$ref": "#/definitions/KnowledgeBaseRetrievalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "KnowledgeBaseRetrieve": {
            "$ref": "./examples/KnowledgeBaseRetrieve.json"
          },
          "KnowledgeBaseRetrieveWithIntents": {
            "$ref": "./examples/KnowledgeBaseRetrieveWithIntents.json"
          }
        }
      }
    },
    "/knowledgesources": {
      "get": {
        "operationId": "Sources_List",
        "description": "Lists all knowledge sources available for a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListKnowledgeSourcesResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "operationId": "Sources_Create",
        "description": "Creates a new knowledge source.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "knowledgeSource",
            "in": "body",
            "description": "The definition of the knowledge source to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KnowledgeSource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/KnowledgeSource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/knowledgesources('{sourceName}')": {
      "get": {
        "operationId": "Sources_Get",
        "description": "Retrieves a knowledge source definition.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "sourceName",
            "in": "path",
            "description": "The name of the knowledge source.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/KnowledgeSource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "Sources_CreateOrUpdate",
        "description": "Creates a new knowledge source or updates an knowledge source if it already exists.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "Prefer",
            "in": "header",
            "description": "For HTTP PUT requests, instructs the service to return the created/updated resource on success.",
            "required": true,
            "type": "string",
            "enum": [
              "return=representation"
            ],
            "x-ms-enum": {
              "modelAsString": false
            },
            "x-ms-client-name": "prefer"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "sourceName",
            "in": "path",
            "description": "The name of the knowledge source.",
            "required": true,
            "type": "string"
          },
          {
            "name": "knowledgeSource",
            "in": "body",
            "description": "The definition of the knowledge source to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KnowledgeSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/KnowledgeSource"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/KnowledgeSource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "operationId": "Sources_Delete",
        "description": "Deletes an existing knowledge source.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "sourceName",
            "in": "path",
            "description": "The name of the knowledge source.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/servicestats": {
      "get": {
        "operationId": "GetServiceStatistics",
        "description": "Gets service level statistics for a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchServiceStatistics"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceGetServiceStatistics": {
            "$ref": "./examples/SearchServiceGetServiceStatistics.json"
          }
        }
      }
    },
    "/skillsets": {
      "get": {
        "operationId": "Skillsets_List",
        "description": "List all skillsets in a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which top-level properties to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListSkillsetsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceListSkillsets": {
            "$ref": "./examples/SearchServiceListSkillsets.json"
          }
        }
      },
      "post": {
        "operationId": "Skillsets_Create",
        "description": "Creates a new skillset in a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "skillset",
            "in": "body",
            "description": "The skillset containing one or more skills to create in a search service.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchIndexerSkillset"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SearchIndexerSkillset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateSkillset": {
            "$ref": "./examples/SearchServiceCreateSkillset.json"
          }
        }
      }
    },
    "/skillsets('{skillsetName}')": {
      "get": {
        "operationId": "Skillsets_Get",
        "description": "Retrieves a skillset in a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "skillsetName",
            "in": "path",
            "description": "The name of the skillset.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchIndexerSkillset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceGetSkillset": {
            "$ref": "./examples/SearchServiceGetSkillset.json"
          }
        }
      },
      "put": {
        "operationId": "Skillsets_CreateOrUpdate",
        "description": "Creates a new skillset in a search service or updates the skillset if it already exists.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "Prefer",
            "in": "header",
            "description": "For HTTP PUT requests, instructs the service to return the created/updated resource on success.",
            "required": true,
            "type": "string",
            "enum": [
              "return=representation"
            ],
            "x-ms-enum": {
              "modelAsString": false
            },
            "x-ms-client-name": "prefer"
          },
          {
            "name": "ignoreResetRequirements",
            "in": "query",
            "description": "Ignores cache reset requirements.",
            "required": false,
            "type": "boolean",
            "x-ms-client-name": "skipIndexerResetRequirementForCache"
          },
          {
            "name": "disableCacheReprocessingChangeDetection",
            "in": "query",
            "description": "Disables cache reprocessing change detection.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "skillsetName",
            "in": "path",
            "description": "The name of the skillset.",
            "required": true,
            "type": "string"
          },
          {
            "name": "skillset",
            "in": "body",
            "description": "The skillset containing one or more skills to create or update in a search service.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchIndexerSkillset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchIndexerSkillset"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SearchIndexerSkillset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateOrUpdateSkillset": {
            "$ref": "./examples/SearchServiceCreateOrUpdateSkillset.json"
          }
        }
      },
      "delete": {
        "operationId": "Skillsets_Delete",
        "description": "Deletes a skillset in a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "skillsetName",
            "in": "path",
            "description": "The name of the skillset.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceDeleteSkillset": {
            "$ref": "./examples/SearchServiceDeleteSkillset.json"
          }
        }
      }
    },
    "/skillsets('{skillsetName}')/search.resetskills": {
      "post": {
        "operationId": "Skillsets_ResetSkills",
        "description": "Reset an existing skillset in a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "skillsetName",
            "in": "path",
            "description": "The name of the skillset.",
            "required": true,
            "type": "string"
          },
          {
            "name": "skillNames",
            "in": "body",
            "description": "The names of the skills to reset. If not specified, all skills in the skillset will be reset.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SkillNames"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceResetSkills": {
            "$ref": "./examples/SearchServiceResetSkills.json"
          }
        }
      }
    },
    "/synonymmaps": {
      "get": {
        "operationId": "SynonymMaps_List",
        "description": "Lists all synonym maps available for a search service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which top-level properties to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ListSynonymMapsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceListSynonymMaps": {
            "$ref": "./examples/SearchServiceListSynonymMaps.json"
          }
        }
      },
      "post": {
        "operationId": "SynonymMaps_Create",
        "description": "Creates a new synonym map.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "synonymMap",
            "in": "body",
            "description": "The definition of the synonym map to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SynonymMap"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SynonymMap"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateSynonymMap": {
            "$ref": "./examples/SearchServiceCreateSynonymMap.json"
          }
        }
      }
    },
    "/synonymmaps('{synonymMapName}')": {
      "get": {
        "operationId": "SynonymMaps_Get",
        "description": "Retrieves a synonym map definition.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "synonymMapName",
            "in": "path",
            "description": "The name of the synonym map.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SynonymMap"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceGetSynonymMap": {
            "$ref": "./examples/SearchServiceGetSynonymMap.json"
          }
        }
      },
      "put": {
        "operationId": "SynonymMaps_CreateOrUpdate",
        "description": "Creates a new synonym map or updates a synonym map if it already exists.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "name": "Prefer",
            "in": "header",
            "description": "For HTTP PUT requests, instructs the service to return the created/updated resource on success.",
            "required": true,
            "type": "string",
            "enum": [
              "return=representation"
            ],
            "x-ms-enum": {
              "modelAsString": false
            },
            "x-ms-client-name": "prefer"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "synonymMapName",
            "in": "path",
            "description": "The name of the synonym map.",
            "required": true,
            "type": "string"
          },
          {
            "name": "synonymMap",
            "in": "body",
            "description": "The definition of the synonym map to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SynonymMap"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SynonymMap"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/SynonymMap"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceCreateOrUpdateSynonymMap": {
            "$ref": "./examples/SearchServiceCreateOrUpdateSynonymMap.json"
          }
        }
      },
      "delete": {
        "operationId": "SynonymMaps_Delete",
        "description": "Deletes a synonym map.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifMatch"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "ifNoneMatch"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "synonymMapName",
            "in": "path",
            "description": "The name of the synonym map.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchServiceDeleteSynonymMap": {
            "$ref": "./examples/SearchServiceDeleteSynonymMap.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AIFoundryModelCatalogName": {
      "type": "string",
      "description": "The name of the embedding model from the Azure AI Foundry Catalog that will be called.",
      "enum": [
        "OpenAI-CLIP-Image-Text-Embeddings-vit-base-patch32",
        "OpenAI-CLIP-Image-Text-Embeddings-ViT-Large-Patch14-336",
        "Facebook-DinoV2-Image-Embeddings-ViT-Base",
        "Facebook-DinoV2-Image-Embeddings-ViT-Giant",
        "Cohere-embed-v3-english",
        "Cohere-embed-v3-multilingual"
      ],
      "x-ms-enum": {
        "name": "AIFoundryModelCatalogName",
        "modelAsString": true,
        "values": [
          {
            "name": "OpenAICLIPImageTextEmbeddingsVitBasePatch32",
            "value": "OpenAI-CLIP-Image-Text-Embeddings-vit-base-patch32",
            "description": "OpenAI-CLIP-Image-Text-Embeddings-vit-base-patch32"
          },
          {
            "name": "OpenAICLIPImageTextEmbeddingsViTLargePatch14336",
            "value": "OpenAI-CLIP-Image-Text-Embeddings-ViT-Large-Patch14-336",
            "description": "OpenAI-CLIP-Image-Text-Embeddings-ViT-Large-Patch14-336"
          },
          {
            "name": "FacebookDinoV2ImageEmbeddingsViTBase",
            "value": "Facebook-DinoV2-Image-Embeddings-ViT-Base",
            "description": "Facebook-DinoV2-Image-Embeddings-ViT-Base"
          },
          {
            "name": "FacebookDinoV2ImageEmbeddingsViTGiant",
            "value": "Facebook-DinoV2-Image-Embeddings-ViT-Giant",
            "description": "Facebook-DinoV2-Image-Embeddings-ViT-Giant"
          },
          {
            "name": "CohereEmbedV3English",
            "value": "Cohere-embed-v3-english",
            "description": "Cohere-embed-v3-english"
          },
          {
            "name": "CohereEmbedV3Multilingual",
            "value": "Cohere-embed-v3-multilingual",
            "description": "Cohere-embed-v3-multilingual"
          }
        ]
      }
    },
    "AIServicesAccountIdentity": {
      "type": "object",
      "description": "The multi-region account of an Azure AI service resource that's attached to a skillset.",
      "properties": {
        "identity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "The user-assigned managed identity used for connections to AI Service. If not specified, the system-assigned managed identity is used. On updates to the skillset, if the identity is unspecified, the value remains unchanged. If set to \"none\", the value of this property is cleared."
        },
        "subdomainUrl": {
          "type": "string",
          "description": "The subdomain url for the corresponding AI Service."
        }
      },
      "required": [
        "subdomainUrl"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CognitiveServicesAccount"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.AIServicesByIdentity"
    },
    "AIServicesAccountKey": {
      "type": "object",
      "description": "The account key of an Azure AI service resource that's attached to a skillset, to be used with the resource's subdomain.",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key used to provision the Azure AI service resource attached to a skillset."
        },
        "subdomainUrl": {
          "type": "string",
          "description": "The subdomain url for the corresponding AI Service."
        }
      },
      "required": [
        "key",
        "subdomainUrl"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CognitiveServicesAccount"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.AIServicesByKey"
    },
    "AIServicesVisionParameters": {
      "type": "object",
      "description": "Specifies the AI Services Vision parameters for vectorizing a query image or text.",
      "properties": {
        "modelVersion": {
          "type": "string",
          "description": "The version of the model to use when calling the AI Services Vision service. It will default to the latest available when not specified."
        },
        "resourceUri": {
          "type": "string",
          "format": "uri",
          "description": "The resource URI of the AI Services resource."
        },
        "apiKey": {
          "type": "string",
          "description": "API key of the designated AI Services resource."
        },
        "authIdentity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "The user-assigned managed identity used for outbound connections. If an authResourceId is provided and it's not specified, the system-assigned managed identity is used. On updates to the index, if the identity is unspecified, the value remains unchanged. If set to \"none\", the value of this property is cleared."
        }
      },
      "required": [
        "modelVersion",
        "resourceUri"
      ]
    },
    "AIServicesVisionVectorizer": {
      "type": "object",
      "description": "Clears the identity property of a datasource.",
      "properties": {
        "AIServicesVisionParameters": {
          "$ref": "#/definitions/AIServicesVisionParameters",
          "description": "Contains the parameters specific to AI Services Vision embedding vectorization."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorSearchVectorizer"
        }
      ],
      "x-ms-discriminator-value": "aiServicesVision"
    },
    "AMLParameters": {
      "type": "object",
      "description": "Specifies the properties for connecting to an AML vectorizer.",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "(Required for no authentication or key authentication) The scoring URI of the AML service to which the JSON payload will be sent. Only the https URI scheme is allowed."
        },
        "key": {
          "type": "string",
          "description": "(Required for key authentication) The key for the AML service."
        },
        "resourceId": {
          "type": "string",
          "description": "(Required for token authentication). The Azure Resource Manager resource ID of the AML service. It should be in the format subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.MachineLearningServices/workspaces/{workspace-name}/services/{service_name}."
        },
        "timeout": {
          "type": "string",
          "format": "duration",
          "description": "(Optional) When specified, indicates the timeout for the http client making the API call."
        },
        "region": {
          "type": "string",
          "description": "(Optional for token authentication). The region the AML service is deployed in."
        },
        "modelName": {
          "$ref": "#/definitions/AIFoundryModelCatalogName",
          "description": "The name of the embedding model from the Azure AI Foundry Catalog that is deployed at the provided endpoint."
        }
      },
      "required": [
        "uri"
      ]
    },
    "AMLVectorizer": {
      "type": "object",
      "description": "Specifies an Azure Machine Learning endpoint deployed via the Azure AI Foundry Model Catalog for generating the vector embedding of a query string.",
      "properties": {
        "amlParameters": {
          "$ref": "#/definitions/AMLParameters",
          "description": "Specifies the properties of the AML vectorizer."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorSearchVectorizer"
        }
      ],
      "x-ms-discriminator-value": "aml"
    },
    "AnalyzeRequest": {
      "type": "object",
      "description": "Specifies some text and analysis components used to break that text into tokens.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text to break into tokens."
        },
        "analyzer": {
          "$ref": "#/definitions/LexicalAnalyzerName",
          "description": "The name of the analyzer to use to break the given text. If this parameter is not specified, you must specify a tokenizer instead. The tokenizer and analyzer parameters are mutually exclusive."
        },
        "tokenizer": {
          "$ref": "#/definitions/LexicalTokenizerName",
          "description": "The name of the tokenizer to use to break the given text. If this parameter is not specified, you must specify an analyzer instead. The tokenizer and analyzer parameters are mutually exclusive."
        },
        "normalizer": {
          "$ref": "#/definitions/LexicalNormalizerName",
          "description": "The name of the normalizer to use to normalize the given text."
        },
        "tokenFilters": {
          "type": "array",
          "description": "An optional list of token filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter.",
          "items": {
            "$ref": "#/definitions/TokenFilterName"
          }
        },
        "charFilters": {
          "type": "array",
          "description": "An optional list of character filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter.",
          "items": {
            "$ref": "#/definitions/CharFilterName"
          }
        }
      },
      "required": [
        "text"
      ]
    },
    "AnalyzeResult": {
      "type": "object",
      "description": "The result of testing an analyzer on text.",
      "properties": {
        "tokens": {
          "type": "array",
          "description": "The list of tokens returned by the analyzer specified in the request.",
          "items": {
            "$ref": "#/definitions/AnalyzedTokenInfo"
          }
        }
      },
      "required": [
        "tokens"
      ]
    },
    "AnalyzedTokenInfo": {
      "type": "object",
      "description": "Information about a token returned by an analyzer.",
      "properties": {
        "token": {
          "type": "string",
          "description": "The token returned by the analyzer."
        },
        "startOffset": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the first character of the token in the input text."
        },
        "endOffset": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the last character of the token in the input text."
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The position of the token in the input text relative to other tokens. The first token in the input text has position 0, the next has position 1, and so on. Depending on the analyzer used, some tokens might have the same position, for example if they are synonyms of each other."
        }
      },
      "required": [
        "token",
        "startOffset",
        "endOffset",
        "position"
      ]
    },
    "AsciiFoldingTokenFilter": {
      "type": "object",
      "description": "Converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127 ASCII characters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if such equivalents exist. This token filter is implemented using Apache Lucene.",
      "properties": {
        "preserveOriginal": {
          "type": "boolean",
          "description": "A value indicating whether the original token will be kept. Default is false."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.AsciiFoldingTokenFilter"
    },
    "AutocompleteItem": {
      "type": "object",
      "description": "The result of Autocomplete requests.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The completed term."
        },
        "queryPlusText": {
          "type": "string",
          "description": "The query along with the completed term."
        }
      },
      "required": [
        "text",
        "queryPlusText"
      ]
    },
    "AutocompleteMode": {
      "type": "string",
      "description": "Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context in producing autocomplete terms.",
      "enum": [
        "oneTerm",
        "twoTerms",
        "oneTermWithContext"
      ],
      "x-ms-enum": {
        "name": "AutocompleteMode",
        "modelAsString": true,
        "values": [
          {
            "name": "OneTerm",
            "value": "oneTerm",
            "description": "Only one term is suggested. If the query has two terms, only the last term is completed. For example, if the input is 'washington medic', the suggested terms could include 'medicaid', 'medicare', and 'medicine'."
          },
          {
            "name": "TwoTerms",
            "value": "twoTerms",
            "description": "Matching two-term phrases in the index will be suggested. For example, if the input is 'medic', the suggested terms could include 'medicare coverage' and 'medical assistant'."
          },
          {
            "name": "OneTermWithContext",
            "value": "oneTermWithContext",
            "description": "Completes the last term in a query with two or more terms, where the last two terms are a phrase that exists in the index. For example, if the input is 'washington medic', the suggested terms could include 'washington medicaid' and 'washington medical'."
          }
        ]
      }
    },
    "AutocompleteOptions": {
      "type": "object",
      "description": "Parameters grouped for autocomplete operations.",
      "properties": {
        "autocompleteMode": {
          "$ref": "#/definitions/AutocompleteMode",
          "description": "Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms."
        },
        "filter": {
          "type": "string",
          "description": "An OData expression that filters the documents used to produce completed terms for the Autocomplete result."
        },
        "useFuzzyMatching": {
          "type": "boolean",
          "description": "A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources."
        },
        "highlightPostTag": {
          "type": "string",
          "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled."
        },
        "highlightPreTag": {
          "type": "string",
          "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled."
        },
        "minimumCoverage": {
          "type": "number",
          "format": "double",
          "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80."
        },
        "searchFields": {
          "type": "array",
          "description": "The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.",
          "items": {
            "type": "string"
          }
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5."
        }
      }
    },
    "AutocompleteRequest": {
      "type": "object",
      "description": "Parameters for fuzzy matching, and other autocomplete query behaviors.",
      "properties": {
        "search": {
          "type": "string",
          "description": "The search text on which to base autocomplete results."
        },
        "autocompleteMode": {
          "$ref": "#/definitions/AutocompleteMode",
          "description": "Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms."
        },
        "filter": {
          "type": "string",
          "description": "An OData expression that filters the documents used to produce completed terms for the Autocomplete result."
        },
        "fuzzy": {
          "type": "boolean",
          "description": "A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources."
        },
        "highlightPostTag": {
          "type": "string",
          "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled."
        },
        "highlightPreTag": {
          "type": "string",
          "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled."
        },
        "minimumCoverage": {
          "type": "number",
          "format": "double",
          "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80."
        },
        "searchFields": {
          "type": "string",
          "description": "The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester."
        },
        "suggesterName": {
          "type": "string",
          "description": "The name of the suggester as specified in the suggesters collection that's part of the index definition."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5."
        }
      },
      "required": [
        "search",
        "suggesterName"
      ]
    },
    "AutocompleteResult": {
      "type": "object",
      "description": "The result of Autocomplete query.",
      "properties": {
        "@search.coverage": {
          "type": "number",
          "format": "double",
          "description": "A value indicating the percentage of the index that was considered by the autocomplete request, or null if minimumCoverage was not specified in the request.",
          "x-ms-client-name": "coverage"
        },
        "value": {
          "type": "array",
          "description": "The list of returned Autocompleted items.",
          "items": {
            "$ref": "#/definitions/AutocompleteItem"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          }
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Azure REST API guidelines - https://aka.ms/AzureRestApiGuidelines#handling-errors.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "AzureActiveDirectoryApplicationCredentials": {
      "type": "object",
      "description": "Credentials of a registered application created for your search service, used for authenticated access to the encryption keys stored in Azure Key Vault.",
      "properties": {
        "applicationId": {
          "type": "string",
          "description": "An AAD Application ID that was granted the required access permissions to the Azure Key Vault that is to be used when encrypting your data at rest. The Application ID should not be confused with the Object ID for your AAD Application."
        },
        "applicationSecret": {
          "type": "string",
          "description": "The authentication key of the specified AAD application."
        }
      },
      "required": [
        "applicationId"
      ]
    },
    "AzureBlobKnowledgeSource": {
      "type": "object",
      "description": "Configuration for Azure Blob Storage knowledge source.",
      "properties": {
        "azureBlobParameters": {
          "$ref": "#/definitions/AzureBlobKnowledgeSourceParameters",
          "description": "The type of the knowledge source."
        }
      },
      "required": [
        "azureBlobParameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeSource"
        }
      ],
      "x-ms-discriminator-value": "azureBlob"
    },
    "AzureBlobKnowledgeSourceParameters": {
      "type": "object",
      "description": "Parameters for Azure Blob Storage knowledge source.",
      "properties": {
        "identity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "An explicit identity to use for this knowledge source. "
        },
        "connectionString": {
          "type": "string",
          "description": "Key-based connection string or the ResourceId format if using a managed identity."
        },
        "containerName": {
          "type": "string",
          "description": "The name of the blob storage container."
        },
        "folderPath": {
          "type": "string",
          "description": "Optional folder path within the container."
        },
        "embeddingModel": {
          "$ref": "#/definitions/VectorSearchVectorizer",
          "description": "Optional vectorizer configuration for vectorizing content."
        },
        "chatCompletionModel": {
          "$ref": "#/definitions/KnowledgeBaseModel",
          "description": "Optional chat completion model for image verbalization or context extraction."
        },
        "ingestionSchedule": {
          "$ref": "#/definitions/IndexingSchedule",
          "description": "Optional schedule for data ingestion."
        },
        "createdResources": {
          "$ref": "#/definitions/CreatedResources",
          "description": "Resources created by the knowledge source.",
          "readOnly": true
        },
        "disableImageVerbalization": {
          "type": "boolean",
          "description": "Indicates whether image verbalization should be disabled."
        }
      },
      "required": [
        "connectionString",
        "containerName"
      ]
    },
    "AzureBlobKnowledgeSourceParams": {
      "type": "object",
      "description": "Specifies runtime parameters for a azure blob knowledge source",
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeSourceParams"
        }
      ],
      "x-ms-discriminator-value": "azureBlob"
    },
    "AzureMachineLearningSkill": {
      "type": "object",
      "description": "The AML skill allows you to extend AI enrichment with a custom Azure Machine Learning (AML) model. Once an AML model is trained and deployed, an AML skill integrates it into AI enrichment.",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "(Required for no authentication or key authentication) The scoring URI of the AML service to which the JSON payload will be sent. Only the https URI scheme is allowed."
        },
        "key": {
          "type": "string",
          "description": "(Required for key authentication) The key for the AML service."
        },
        "resourceId": {
          "type": "string",
          "description": "(Required for token authentication). The Azure Resource Manager resource ID of the AML service. It should be in the format subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.MachineLearningServices/workspaces/{workspace-name}/services/{service_name}."
        },
        "timeout": {
          "type": "string",
          "format": "duration",
          "description": "(Optional) When specified, indicates the timeout for the http client making the API call."
        },
        "region": {
          "type": "string",
          "description": "(Optional for token authentication). The region the AML service is deployed in."
        },
        "degreeOfParallelism": {
          "type": "integer",
          "format": "int32",
          "description": "(Optional) When specified, indicates the number of calls the indexer will make in parallel to the endpoint you have provided. You can decrease this value if your endpoint is failing under too high of a request load, or raise it if your endpoint is able to accept more requests and you would like an increase in the performance of the indexer. If not set, a default value of 5 is used. The degreeOfParallelism can be set to a maximum of 10 and a minimum of 1."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Custom.AmlSkill"
    },
    "AzureOpenAIEmbeddingSkill": {
      "type": "object",
      "description": "Allows you to generate a vector embedding for a given text input using the Azure OpenAI resource.",
      "properties": {
        "resourceUri": {
          "type": "string",
          "format": "uri",
          "description": "The resource URI of the Azure OpenAI resource."
        },
        "deploymentId": {
          "type": "string",
          "description": "ID of the Azure OpenAI model deployment on the designated resource."
        },
        "apiKey": {
          "type": "string",
          "description": "API key of the designated Azure OpenAI resource."
        },
        "authIdentity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "The user-assigned managed identity used for outbound connections."
        },
        "modelName": {
          "$ref": "#/definitions/AzureOpenAIModelName",
          "description": "The name of the embedding model that is deployed at the provided deploymentId path."
        },
        "dimensions": {
          "type": "integer",
          "format": "int32",
          "description": "The number of dimensions the resulting output embeddings should have. Only supported in text-embedding-3 and later models."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.AzureOpenAIEmbeddingSkill"
    },
    "AzureOpenAIModelName": {
      "type": "string",
      "description": "The Azure Open AI model name that will be called.",
      "enum": [
        "text-embedding-ada-002",
        "text-embedding-3-large",
        "text-embedding-3-small"
      ],
      "x-ms-enum": {
        "name": "AzureOpenAIModelName",
        "modelAsString": true,
        "values": [
          {
            "name": "TextEmbeddingAda002",
            "value": "text-embedding-ada-002",
            "description": "TextEmbeddingAda002 model."
          },
          {
            "name": "TextEmbedding3Large",
            "value": "text-embedding-3-large",
            "description": "TextEmbedding3Large model."
          },
          {
            "name": "TextEmbedding3Small",
            "value": "text-embedding-3-small",
            "description": "TextEmbedding3Small model."
          }
        ]
      }
    },
    "AzureOpenAITokenizerParameters": {
      "type": "object",
      "description": "Azure OpenAI Tokenizer parameters.",
      "properties": {
        "encoderModelName": {
          "$ref": "#/definitions/SplitSkillEncoderModelName",
          "description": "Only applies if the unit is set to azureOpenAITokens. Options include 'R50k_base', 'P50k_base', 'P50k_edit' and 'CL100k_base'. The default value is 'CL100k_base'."
        },
        "allowedSpecialTokens": {
          "type": "array",
          "description": "(Optional) Only applies if the unit is set to azureOpenAITokens. This parameter defines a collection of special tokens that are permitted within the tokenization process.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AzureOpenAIVectorizer": {
      "type": "object",
      "description": "Specifies the Azure OpenAI resource used to vectorize a query string.",
      "properties": {
        "azureOpenAIParameters": {
          "$ref": "#/definitions/AzureOpenAIVectorizerParameters",
          "description": "Contains the parameters specific to Azure OpenAI embedding vectorization."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorSearchVectorizer"
        }
      ],
      "x-ms-discriminator-value": "azureOpenAI"
    },
    "AzureOpenAIVectorizerParameters": {
      "type": "object",
      "description": "Specifies the parameters for connecting to the Azure OpenAI resource.",
      "properties": {
        "resourceUri": {
          "type": "string",
          "format": "uri",
          "description": "The resource URI of the Azure OpenAI resource."
        },
        "deploymentId": {
          "type": "string",
          "description": "ID of the Azure OpenAI model deployment on the designated resource."
        },
        "apiKey": {
          "type": "string",
          "description": "API key of the designated Azure OpenAI resource."
        },
        "authIdentity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "The user-assigned managed identity used for outbound connections."
        },
        "modelName": {
          "$ref": "#/definitions/AzureOpenAIModelName",
          "description": "The name of the embedding model that is deployed at the provided deploymentId path."
        }
      }
    },
    "AzureOpenAiParameters": {
      "type": "object",
      "description": "Specifies the parameters for connecting to the Azure OpenAI resource.",
      "properties": {
        "resourceUri": {
          "type": "string",
          "format": "uri",
          "description": "The resource URI of the Azure OpenAI resource."
        },
        "deploymentId": {
          "type": "string",
          "description": "ID of the Azure OpenAI model deployment on the designated resource."
        },
        "apiKey": {
          "type": "string",
          "description": "API key of the designated Azure OpenAI resource."
        },
        "authIdentity": {
          "type": "string",
          "description": "The user-assigned managed identity used for outbound connections."
        },
        "modelName": {
          "$ref": "#/definitions/AzureOpenAIModelName",
          "description": "The name of the embedding model that is deployed at the provided deploymentId path."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "The authentication method to use when connecting to the Azure OpenAI resource."
        }
      },
      "required": [
        "resourceUri",
        "deploymentId"
      ]
    },
    "BM25SimilarityAlgorithm": {
      "type": "object",
      "description": "Ranking function based on the Okapi BM25 similarity algorithm. BM25 is a TF-IDF-like algorithm that includes length normalization (controlled by the 'b' parameter) as well as term frequency saturation (controlled by the 'k1' parameter).",
      "properties": {
        "k1": {
          "type": "number",
          "format": "double",
          "description": "This property controls the scaling function between the term frequency of each matching terms and the final relevance score of a document-query pair. By default, a value of 1.2 is used. A value of 0.0 means the score does not scale with an increase in term frequency."
        },
        "b": {
          "type": "number",
          "format": "double",
          "description": "This property controls how the length of a document affects the relevance score. By default, a value of 0.75 is used. A value of 0.0 means no length normalization is applied, while a value of 1.0 means the score is fully normalized by the length of the document."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SimilarityAlgorithm"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.BM25Similarity"
    },
    "BinaryQuantizationCompression": {
      "type": "object",
      "description": "Contains configuration options specific to the binary quantization compression method used during indexing and querying.",
      "allOf": [
        {
          "$ref": "#/definitions/VectorSearchCompression"
        }
      ],
      "x-ms-discriminator-value": "binaryQuantization"
    },
    "BlobIndexerDataToExtract": {
      "type": "string",
      "description": "Specifies the data to extract from Azure blob storage and tells the indexer which data to extract from image content when \"imageAction\" is set to a value other than \"none\".  This applies to embedded image content in a .PDF or other application, or image files such as .jpg and .png, in Azure blobs.",
      "enum": [
        "storageMetadata",
        "allMetadata",
        "contentAndMetadata"
      ],
      "x-ms-enum": {
        "name": "BlobIndexerDataToExtract",
        "modelAsString": true,
        "values": [
          {
            "name": "StorageMetadata",
            "value": "storageMetadata",
            "description": "Indexes just the standard blob properties and user-specified metadata."
          },
          {
            "name": "AllMetadata",
            "value": "allMetadata",
            "description": "Extracts metadata provided by the Azure blob storage subsystem and the content-type specific metadata (for example, metadata unique to just .png files are indexed)."
          },
          {
            "name": "ContentAndMetadata",
            "value": "contentAndMetadata",
            "description": "Extracts all metadata and textual content from each blob."
          }
        ]
      }
    },
    "BlobIndexerImageAction": {
      "type": "string",
      "description": "Determines how to process embedded images and image files in Azure blob storage.  Setting the \"imageAction\" configuration to any value other than \"none\" requires that a skillset also be attached to that indexer.",
      "enum": [
        "none",
        "generateNormalizedImages",
        "generateNormalizedImagePerPage"
      ],
      "x-ms-enum": {
        "name": "BlobIndexerImageAction",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Ignores embedded images or image files in the data set.  This is the default."
          },
          {
            "name": "GenerateNormalizedImages",
            "value": "generateNormalizedImages",
            "description": "Extracts text from images (for example, the word \"STOP\" from a traffic stop sign), and embeds it into the content field.  This action requires that \"dataToExtract\" is set to \"contentAndMetadata\".  A normalized image refers to additional processing resulting in uniform image output, sized and rotated to promote consistent rendering when you include images in visual search results. This information is generated for each image when you use this option."
          },
          {
            "name": "GenerateNormalizedImagePerPage",
            "value": "generateNormalizedImagePerPage",
            "description": "Extracts text from images (for example, the word \"STOP\" from a traffic stop sign), and embeds it into the content field, but treats PDF files differently in that each page will be rendered as an image and normalized accordingly, instead of extracting embedded images.  Non-PDF file types will be treated the same as if \"generateNormalizedImages\" was set."
          }
        ]
      }
    },
    "BlobIndexerPDFTextRotationAlgorithm": {
      "type": "string",
      "description": "Determines algorithm for text extraction from PDF files in Azure blob storage.",
      "enum": [
        "none",
        "detectAngles"
      ],
      "x-ms-enum": {
        "name": "BlobIndexerPDFTextRotationAlgorithm",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Leverages normal text extraction.  This is the default."
          },
          {
            "name": "DetectAngles",
            "value": "detectAngles",
            "description": "May produce better and more readable text extraction from PDF files that have rotated text within them.  Note that there may be a small performance speed impact when this parameter is used.  This parameter only applies to PDF files, and only to PDFs with embedded text.  If the rotated text appears within an embedded image in the PDF, this parameter does not apply."
          }
        ]
      }
    },
    "BlobIndexerParsingMode": {
      "type": "string",
      "description": "Represents the parsing mode for indexing from an Azure blob data source.",
      "enum": [
        "default",
        "text",
        "delimitedText",
        "json",
        "jsonArray",
        "jsonLines",
        "markdown"
      ],
      "x-ms-enum": {
        "name": "BlobIndexerParsingMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Default",
            "value": "default",
            "description": "Set to default for normal file processing."
          },
          {
            "name": "Text",
            "value": "text",
            "description": "Set to text to improve indexing performance on plain text files in blob storage."
          },
          {
            "name": "DelimitedText",
            "value": "delimitedText",
            "description": "Set to delimitedText when blobs are plain CSV files."
          },
          {
            "name": "Json",
            "value": "json",
            "description": "Set to json to extract structured content from JSON files."
          },
          {
            "name": "JsonArray",
            "value": "jsonArray",
            "description": "Set to jsonArray to extract individual elements of a JSON array as separate documents."
          },
          {
            "name": "JsonLines",
            "value": "jsonLines",
            "description": "Set to jsonLines to extract individual JSON entities, separated by a new line, as separate documents."
          },
          {
            "name": "Markdown",
            "value": "markdown",
            "description": "Set to markdown to extract content from markdown files."
          }
        ]
      }
    },
    "CharFilter": {
      "type": "object",
      "description": "Base type for character filters.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "The discriminator for derived types."
        },
        "name": {
          "type": "string",
          "description": "The name of the char filter. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters."
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type",
        "name"
      ]
    },
    "CharFilterName": {
      "type": "string",
      "description": "Defines the names of all character filters supported by the search engine.",
      "enum": [
        "html_strip"
      ],
      "x-ms-enum": {
        "name": "CharFilterName",
        "modelAsString": true,
        "values": [
          {
            "name": "HtmlStrip",
            "value": "html_strip",
            "description": "A character filter that attempts to strip out HTML constructs. See https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.html"
          }
        ]
      }
    },
    "ChatCompletionCommonModelParameters": {
      "type": "object",
      "description": "Common language model parameters for Chat Completions. If omitted, default values are used.",
      "properties": {
        "modelName": {
          "type": "string",
          "description": "The name of the model to use (e.g., 'gpt-4o', etc.). Default is null if not specified."
        },
        "frequencyPenalty": {
          "type": "number",
          "format": "double",
          "description": "A float in the range [-2,2] that reduces or increases likelihood of repeated tokens. Default is 0.",
          "default": 0
        },
        "presencePenalty": {
          "type": "number",
          "format": "double",
          "description": "A float in the range [-2,2] that penalizes new tokens based on their existing presence. Default is 0.",
          "default": 0
        },
        "maxTokens": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of tokens to generate."
        },
        "temperature": {
          "type": "number",
          "format": "double",
          "description": "Sampling temperature. Default is 0.7.",
          "default": 0.7
        },
        "seed": {
          "type": "integer",
          "format": "int32",
          "description": "Random seed for controlling deterministic outputs. If omitted, randomization is used."
        },
        "stop": {
          "type": "array",
          "description": "List of stop sequences that will cut off text generation. Default is none.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ChatCompletionExtraParametersBehavior": {
      "type": "string",
      "description": "Specifies how 'extraParameters' should be handled by Azure AI Foundry. Defaults to 'error'.",
      "enum": [
        "passThrough",
        "drop",
        "error"
      ],
      "x-ms-enum": {
        "name": "ChatCompletionExtraParametersBehavior",
        "modelAsString": true,
        "values": [
          {
            "name": "PassThrough",
            "value": "passThrough",
            "description": "Passes any extra parameters directly to the model."
          },
          {
            "name": "Drop",
            "value": "drop",
            "description": "Drops all extra parameters."
          },
          {
            "name": "Error",
            "value": "error",
            "description": "Raises an error if any extra parameter is present."
          }
        ]
      }
    },
    "ChatCompletionResponseFormat": {
      "type": "object",
      "description": "Determines how the language model's response should be serialized. Defaults to 'text'.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Specifies how the LLM should format the response.",
          "default": "text",
          "enum": [
            "text",
            "jsonObject",
            "jsonSchema"
          ],
          "x-ms-enum": {
            "name": "ChatCompletionResponseFormatType",
            "modelAsString": true,
            "values": [
              {
                "name": "Text",
                "value": "text",
                "description": "Plain text response format."
              },
              {
                "name": "JsonObject",
                "value": "jsonObject",
                "description": "Arbitrary JSON object response format."
              },
              {
                "name": "JsonSchema",
                "value": "jsonSchema",
                "description": "JSON schema-adhering response format."
              }
            ]
          }
        },
        "jsonSchemaProperties": {
          "$ref": "#/definitions/ChatCompletionSchemaProperties",
          "description": "An open dictionary for extended properties. Required if 'type' == 'json_schema'"
        }
      }
    },
    "ChatCompletionResponseFormatType": {
      "type": "string",
      "description": "Specifies how the LLM should format the response.",
      "enum": [
        "text",
        "jsonObject",
        "jsonSchema"
      ],
      "x-ms-enum": {
        "name": "ChatCompletionResponseFormatType",
        "modelAsString": true,
        "values": [
          {
            "name": "Text",
            "value": "text",
            "description": "Plain text response format."
          },
          {
            "name": "JsonObject",
            "value": "jsonObject",
            "description": "Arbitrary JSON object response format."
          },
          {
            "name": "JsonSchema",
            "value": "jsonSchema",
            "description": "JSON schema-adhering response format."
          }
        ]
      }
    },
    "ChatCompletionSchema": {
      "type": "object",
      "description": "Object defining the custom schema the model will use to structure its output.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of schema representation. Usually 'object'. Default is 'object'.",
          "default": "object"
        },
        "properties": {
          "type": "string",
          "description": "A JSON-formatted string that defines the output schema's properties and constraints for the model."
        },
        "required": {
          "type": "array",
          "description": "An array of the property names that are required to be part of the model's response.",
          "items": {
            "type": "string"
          }
        },
        "additionalProperties": {
          "type": "boolean",
          "description": "Controls whether it is allowable for an object to contain additional keys / values that were not defined in the JSON Schema. Default is false.",
          "default": false
        }
      }
    },
    "ChatCompletionSchemaProperties": {
      "type": "object",
      "description": "Properties for JSON schema response format.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the json schema the model will adhere to."
        },
        "description": {
          "type": "string",
          "description": "Description of the json schema the model will adhere to."
        },
        "strict": {
          "type": "boolean",
          "description": "Whether or not the model's response should use structured outputs. Default is true.",
          "default": true
        },
        "schema": {
          "$ref": "#/definitions/ChatCompletionSchema",
          "description": "The schema definition."
        }
      }
    },
    "ChatCompletionSkill": {
      "type": "object",
      "description": "A skill that calls a language model via Azure AI Foundry's Chat Completions endpoint.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The url for the Web API."
        },
        "httpHeaders": {
          "$ref": "#/definitions/WebApiHttpHeaders",
          "description": "The headers required to make the http request."
        },
        "httpMethod": {
          "type": "string",
          "description": "The method for the http request."
        },
        "timeout": {
          "type": "string",
          "format": "duration",
          "description": "The desired timeout for the request. Default is 30 seconds."
        },
        "batchSize": {
          "type": "integer",
          "format": "int32",
          "description": "The desired batch size which indicates number of documents."
        },
        "degreeOfParallelism": {
          "type": "integer",
          "format": "int32",
          "description": "If set, the number of parallel calls that can be made to the Web API."
        },
        "authResourceId": {
          "type": "string",
          "description": "Applies to custom skills that connect to external code in an Azure function or some other application that provides the transformations."
        },
        "authIdentity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "The user-assigned managed identity used for outbound connections."
        },
        "apiKey": {
          "type": "string",
          "description": "API key for authenticating to the model. Both apiKey and authIdentity cannot be specified at the same time."
        },
        "commonModelParameters": {
          "$ref": "#/definitions/ChatCompletionCommonModelParameters",
          "description": "Common language model parameters that customers can tweak. If omitted, reasonable defaults will be applied."
        },
        "extraParameters": {
          "type": "object",
          "description": "Open-type dictionary for model-specific parameters that should be appended to the chat completions call. Follows Azure AI Foundry's extensibility pattern.",
          "additionalProperties": {}
        },
        "extraParametersBehavior": {
          "type": "string",
          "description": "How extra parameters are handled by Azure AI Foundry. Default is 'error'.",
          "default": "error",
          "enum": [
            "passThrough",
            "drop",
            "error"
          ],
          "x-ms-enum": {
            "name": "ChatCompletionExtraParametersBehavior",
            "modelAsString": true,
            "values": [
              {
                "name": "PassThrough",
                "value": "passThrough",
                "description": "Passes any extra parameters directly to the model."
              },
              {
                "name": "Drop",
                "value": "drop",
                "description": "Drops all extra parameters."
              },
              {
                "name": "Error",
                "value": "error",
                "description": "Raises an error if any extra parameter is present."
              }
            ]
          }
        },
        "responseFormat": {
          "$ref": "#/definitions/ChatCompletionResponseFormat",
          "description": "Determines how the LLM should format its response. Defaults to 'text' response type."
        }
      },
      "required": [
        "uri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Custom.ChatCompletionSkill"
    },
    "CjkBigramTokenFilter": {
      "type": "object",
      "description": "Forms bigrams of CJK terms that are generated from the standard tokenizer. This token filter is implemented using Apache Lucene.",
      "properties": {
        "ignoreScripts": {
          "type": "array",
          "description": "The scripts to ignore.",
          "items": {
            "$ref": "#/definitions/CjkBigramTokenFilterScripts"
          }
        },
        "outputUnigrams": {
          "type": "boolean",
          "description": "A value indicating whether to output both unigrams and bigrams (if true), or just bigrams (if false). Default is false."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.CjkBigramTokenFilter"
    },
    "CjkBigramTokenFilterScripts": {
      "type": "string",
      "description": "Scripts that can be ignored by CjkBigramTokenFilter.",
      "enum": [
        "han",
        "hiragana",
        "katakana",
        "hangul"
      ],
      "x-ms-enum": {
        "name": "CjkBigramTokenFilterScripts",
        "modelAsString": true,
        "values": [
          {
            "name": "Han",
            "value": "han",
            "description": "Ignore Han script when forming bigrams of CJK terms."
          },
          {
            "name": "Hiragana",
            "value": "hiragana",
            "description": "Ignore Hiragana script when forming bigrams of CJK terms."
          },
          {
            "name": "Katakana",
            "value": "katakana",
            "description": "Ignore Katakana script when forming bigrams of CJK terms."
          },
          {
            "name": "Hangul",
            "value": "hangul",
            "description": "Ignore Hangul script when forming bigrams of CJK terms."
          }
        ]
      }
    },
    "ClassicSimilarityAlgorithm": {
      "type": "object",
      "description": "Legacy similarity algorithm which uses the Lucene TFIDFSimilarity implementation of TF-IDF. This variation of TF-IDF introduces static document length normalization as well as coordinating factors that penalize documents that only partially match the searched queries.",
      "allOf": [
        {
          "$ref": "#/definitions/SimilarityAlgorithm"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.ClassicSimilarity"
    },
    "ClassicTokenizer": {
      "type": "object",
      "description": "Grammar-based tokenizer that is suitable for processing most European-language documents. This tokenizer is implemented using Apache Lucene.",
      "properties": {
        "maxTokenLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum token length. Default is 255. Tokens longer than the maximum length are split. The maximum token length that can be used is 300 characters.",
          "default": 255,
          "maximum": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalTokenizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.ClassicTokenizer"
    },
    "CognitiveServicesAccount": {
      "type": "object",
      "description": "Base type for describing any Azure AI service resource attached to a skillset.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "The discriminator for derived types."
        },
        "description": {
          "type": "string",
          "description": "Description of the Azure AI service resource attached to a skillset."
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type"
      ]
    },
    "CognitiveServicesAccountKey": {
      "type": "object",
      "description": "The multi-region account key of an Azure AI service resource that's attached to a skillset.",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key used to provision the Azure AI service resource attached to a skillset."
        }
      },
      "required": [
        "key"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CognitiveServicesAccount"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.CognitiveServicesByKey"
    },
    "CommonGramTokenFilter": {
      "type": "object",
      "description": "Construct bigrams for frequently occurring terms while indexing. Single terms are still indexed too, with bigrams overlaid. This token filter is implemented using Apache Lucene.",
      "properties": {
        "commonWords": {
          "type": "array",
          "description": "The set of common words.",
          "items": {
            "type": "string"
          }
        },
        "ignoreCase": {
          "type": "boolean",
          "description": "A value indicating whether common words matching will be case insensitive. Default is false."
        },
        "queryMode": {
          "type": "boolean",
          "description": "A value that indicates whether the token filter is in query mode. When in query mode, the token filter generates bigrams and then removes common words and single terms followed by a common word. Default is false."
        }
      },
      "required": [
        "commonWords"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.CommonGramTokenFilter"
    },
    "ConditionalSkill": {
      "type": "object",
      "description": "A skill that enables scenarios that require a Boolean operation to determine the data to assign to an output.",
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Util.ConditionalSkill"
    },
    "CorsOptions": {
      "type": "object",
      "description": "Defines options to control Cross-Origin Resource Sharing (CORS) for an index.",
      "properties": {
        "allowedOrigins": {
          "type": "array",
          "description": "The list of origins from which JavaScript code will be granted access to your index. Can contain a list of hosts of the form {protocol}://{fully-qualified-domain-name}[:{port#}], or a single '*' to allow all origins (not recommended).",
          "items": {
            "type": "string"
          }
        },
        "maxAgeInSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The duration for which browsers should cache CORS preflight responses. Defaults to 5 minutes."
        }
      },
      "required": [
        "allowedOrigins"
      ]
    },
    "CreatedResources": {
      "type": "object",
      "description": "Resources created by the knowledge source. Keys represent resource types (e.g., 'datasource', 'indexer', 'skillset', 'index') and values represent resource names.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "CustomAnalyzer": {
      "type": "object",
      "description": "Allows you to take control over the process of converting text into indexable/searchable tokens. It's a user-defined configuration consisting of a single predefined tokenizer and one or more filters. The tokenizer is responsible for breaking text into tokens, and the filters for modifying tokens emitted by the tokenizer.",
      "properties": {
        "tokenizer": {
          "$ref": "#/definitions/LexicalTokenizerName",
          "description": "The name of the tokenizer to use to divide continuous text into a sequence of tokens, such as breaking a sentence into words."
        },
        "tokenFilters": {
          "type": "array",
          "description": "A list of token filters used to filter out or modify the tokens generated by a tokenizer. For example, you can specify a lowercase filter that converts all characters to lowercase. The filters are run in the order in which they are listed.",
          "items": {
            "$ref": "#/definitions/TokenFilterName"
          }
        },
        "charFilters": {
          "type": "array",
          "description": "A list of character filters used to prepare input text before it is processed by the tokenizer. For instance, they can replace certain characters or symbols. The filters are run in the order in which they are listed.",
          "items": {
            "$ref": "#/definitions/CharFilterName"
          }
        }
      },
      "required": [
        "tokenizer"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/LexicalAnalyzer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.CustomAnalyzer"
    },
    "CustomEntity": {
      "type": "object",
      "description": "An object that contains information about the matches that were found, and related metadata.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The top-level entity descriptor. Matches in the skill output will be grouped by this name, and it should represent the \"normalized\" form of the text being found."
        },
        "description": {
          "type": "string",
          "description": "This field can be used as a passthrough for custom metadata about the matched text(s). The value of this field will appear with every match of its entity in the skill output."
        },
        "type": {
          "type": "string",
          "description": "This field can be used as a passthrough for custom metadata about the matched text(s). The value of this field will appear with every match of its entity in the skill output."
        },
        "subtype": {
          "type": "string",
          "description": "This field can be used as a passthrough for custom metadata about the matched text(s). The value of this field will appear with every match of its entity in the skill output."
        },
        "id": {
          "type": "string",
          "description": "This field can be used as a passthrough for custom metadata about the matched text(s). The value of this field will appear with every match of its entity in the skill output."
        },
        "caseSensitive": {
          "type": "boolean",
          "description": "Defaults to false. Boolean value denoting whether comparisons with the entity name should be sensitive to character casing. Sample case insensitive matches of \"Microsoft\" could be: microsoft, microSoft, MICROSOFT."
        },
        "accentSensitive": {
          "type": "boolean",
          "description": "Defaults to false. Boolean value denoting whether comparisons with the entity name should be sensitive to accent."
        },
        "fuzzyEditDistance": {
          "type": "integer",
          "format": "int32",
          "description": "Defaults to 0. Maximum value of 5. Denotes the acceptable number of divergent characters that would still constitute a match with the entity name. The smallest possible fuzziness for any given match is returned. For instance, if the edit distance is set to 3, \"Windows10\" would still match \"Windows\", \"Windows10\" and \"Windows 7\". When case sensitivity is set to false, case differences do NOT count towards fuzziness tolerance, but otherwise do."
        },
        "defaultCaseSensitive": {
          "type": "boolean",
          "description": "Changes the default case sensitivity value for this entity. It be used to change the default value of all aliases caseSensitive values."
        },
        "defaultAccentSensitive": {
          "type": "boolean",
          "description": "Changes the default accent sensitivity value for this entity. It be used to change the default value of all aliases accentSensitive values."
        },
        "defaultFuzzyEditDistance": {
          "type": "integer",
          "format": "int32",
          "description": "Changes the default fuzzy edit distance value for this entity. It can be used to change the default value of all aliases fuzzyEditDistance values."
        },
        "aliases": {
          "type": "array",
          "description": "An array of complex objects that can be used to specify alternative spellings or synonyms to the root entity name.",
          "items": {
            "$ref": "#/definitions/CustomEntityAlias"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "CustomEntityAlias": {
      "type": "object",
      "description": "A complex object that can be used to specify alternative spellings or synonyms to the root entity name.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text of the alias."
        },
        "caseSensitive": {
          "type": "boolean",
          "description": "Determine if the alias is case sensitive."
        },
        "accentSensitive": {
          "type": "boolean",
          "description": "Determine if the alias is accent sensitive."
        },
        "fuzzyEditDistance": {
          "type": "integer",
          "format": "int32",
          "description": "Determine the fuzzy edit distance of the alias."
        }
      },
      "required": [
        "text"
      ]
    },
    "CustomEntityLookupSkill": {
      "type": "object",
      "description": "A skill looks for text from a custom, user-defined list of words and phrases.",
      "properties": {
        "defaultLanguageCode": {
          "$ref": "#/definitions/CustomEntityLookupSkillLanguage",
          "description": "A value indicating which language code to use. Default is `en`."
        },
        "entitiesDefinitionUri": {
          "type": "string",
          "description": "Path to a JSON or CSV file containing all the target text to match against. This entity definition is read at the beginning of an indexer run. Any updates to this file during an indexer run will not take effect until subsequent runs. This config must be accessible over HTTPS."
        },
        "inlineEntitiesDefinition": {
          "type": "array",
          "description": "The inline CustomEntity definition.",
          "items": {
            "$ref": "#/definitions/CustomEntity"
          }
        },
        "globalDefaultCaseSensitive": {
          "type": "boolean",
          "description": "A global flag for CaseSensitive. If CaseSensitive is not set in CustomEntity, this value will be the default value."
        },
        "globalDefaultAccentSensitive": {
          "type": "boolean",
          "description": "A global flag for AccentSensitive. If AccentSensitive is not set in CustomEntity, this value will be the default value."
        },
        "globalDefaultFuzzyEditDistance": {
          "type": "integer",
          "format": "int32",
          "description": "A global flag for FuzzyEditDistance. If FuzzyEditDistance is not set in CustomEntity, this value will be the default value."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.CustomEntityLookupSkill"
    },
    "CustomEntityLookupSkillLanguage": {
      "type": "string",
      "description": "The language codes supported for input text by CustomEntityLookupSkill.",
      "enum": [
        "da",
        "de",
        "en",
        "es",
        "fi",
        "fr",
        "it",
        "ko",
        "pt"
      ],
      "x-ms-enum": {
        "name": "CustomEntityLookupSkillLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "da",
            "value": "da",
            "description": "Danish"
          },
          {
            "name": "de",
            "value": "de",
            "description": "German"
          },
          {
            "name": "en",
            "value": "en",
            "description": "English"
          },
          {
            "name": "es",
            "value": "es",
            "description": "Spanish"
          },
          {
            "name": "fi",
            "value": "fi",
            "description": "Finnish"
          },
          {
            "name": "fr",
            "value": "fr",
            "description": "French"
          },
          {
            "name": "it",
            "value": "it",
            "description": "Italian"
          },
          {
            "name": "ko",
            "value": "ko",
            "description": "Korean"
          },
          {
            "name": "pt",
            "value": "pt",
            "description": "Portuguese"
          }
        ]
      }
    },
    "CustomNormalizer": {
      "type": "object",
      "description": "Allows you to configure normalization for filterable, sortable, and facetable fields, which by default operate with strict matching. This is a user-defined configuration consisting of at least one or more filters, which modify the token that is stored.",
      "properties": {
        "tokenFilters": {
          "type": "array",
          "description": "A list of token filters used to filter out or modify the input token. For example, you can specify a lowercase filter that converts all characters to lowercase. The filters are run in the order in which they are listed.",
          "items": {
            "$ref": "#/definitions/TokenFilterName"
          }
        },
        "charFilters": {
          "type": "array",
          "description": "A list of character filters used to prepare input text before it is processed. For instance, they can replace certain characters or symbols. The filters are run in the order in which they are listed.",
          "items": {
            "$ref": "#/definitions/CharFilterName"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalNormalizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.CustomNormalizer"
    },
    "DataChangeDetectionPolicy": {
      "type": "object",
      "description": "Base type for data change detection policies.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "The discriminator for derived types."
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type"
      ]
    },
    "DataDeletionDetectionPolicy": {
      "type": "object",
      "description": "Base type for data deletion detection policies.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "The discriminator for derived types."
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type"
      ]
    },
    "DataSourceCredentials": {
      "type": "object",
      "description": "Represents credentials that can be used to connect to a datasource.",
      "properties": {
        "connectionString": {
          "type": "string",
          "description": "The connection string for the datasource. Set to `<unchanged>` (with brackets) if you don't want the connection string updated. Set to `<redacted>` if you want to remove the connection string value from the datasource."
        }
      }
    },
    "DebugInfo": {
      "type": "object",
      "description": "Contains debugging information that can be used to further explore your search results.",
      "properties": {
        "queryRewrites": {
          "$ref": "#/definitions/QueryRewritesDebugInfo",
          "description": "Contains debugging information specific to query rewrites.",
          "readOnly": true
        }
      }
    },
    "DefaultCognitiveServicesAccount": {
      "type": "object",
      "description": "An empty object that represents the default Azure AI service resource for a skillset.",
      "allOf": [
        {
          "$ref": "#/definitions/CognitiveServicesAccount"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.DefaultCognitiveServices"
    },
    "DictionaryDecompounderTokenFilter": {
      "type": "object",
      "description": "Decomposes compound words found in many Germanic languages. This token filter is implemented using Apache Lucene.",
      "properties": {
        "wordList": {
          "type": "array",
          "description": "The list of words to match against.",
          "items": {
            "type": "string"
          }
        },
        "minWordSize": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum word size. Only words longer than this get processed. Default is 5. Maximum is 300.",
          "default": 5,
          "maximum": 300
        },
        "minSubwordSize": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum subword size. Only subwords longer than this are outputted. Default is 2. Maximum is 300.",
          "default": 2,
          "maximum": 300
        },
        "maxSubwordSize": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum subword size. Only subwords shorter than this are outputted. Default is 15. Maximum is 300.",
          "default": 15,
          "maximum": 300
        },
        "onlyLongestMatch": {
          "type": "boolean",
          "description": "A value indicating whether to add only the longest matching subword to the output. Default is false."
        }
      },
      "required": [
        "wordList"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter"
    },
    "DistanceScoringFunction": {
      "type": "object",
      "description": "Defines a function that boosts scores based on distance from a geographic location.",
      "properties": {
        "distance": {
          "$ref": "#/definitions/DistanceScoringParameters",
          "description": "Parameter values for the distance scoring function."
        }
      },
      "required": [
        "distance"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ScoringFunction"
        }
      ],
      "x-ms-discriminator-value": "distance"
    },
    "DistanceScoringParameters": {
      "type": "object",
      "description": "Provides parameter values to a distance scoring function.",
      "properties": {
        "referencePointParameter": {
          "type": "string",
          "description": "The name of the parameter passed in search queries to specify the reference location."
        },
        "boostingDistance": {
          "type": "number",
          "format": "double",
          "description": "The distance in kilometers from the reference location where the boosting range ends."
        }
      },
      "required": [
        "referencePointParameter",
        "boostingDistance"
      ]
    },
    "DocumentDebugInfo": {
      "type": "object",
      "description": "Contains debugging information that can be used to further explore your search results.",
      "properties": {
        "semantic": {
          "$ref": "#/definitions/SemanticDebugInfo",
          "description": "Contains debugging information specific to semantic ranking requests.",
          "readOnly": true
        },
        "vectors": {
          "$ref": "#/definitions/VectorsDebugInfo",
          "description": "Contains debugging information specific to vector and hybrid search.",
          "readOnly": true
        },
        "innerHits": {
          "type": "object",
          "description": "Contains debugging information specific to vectors matched within a collection of complex types.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/QueryResultDocumentInnerHit"
            },
            "type": "array"
          },
          "readOnly": true
        }
      }
    },
    "DocumentExtractionSkill": {
      "type": "object",
      "description": "A skill that extracts content from a file within the enrichment pipeline.",
      "properties": {
        "parsingMode": {
          "type": "string",
          "description": "The parsingMode for the skill. Will be set to 'default' if not defined."
        },
        "dataToExtract": {
          "type": "string",
          "description": "The type of data to be extracted for the skill. Will be set to 'contentAndMetadata' if not defined."
        },
        "configuration": {
          "type": "object",
          "description": "A dictionary of configurations for the skill.",
          "additionalProperties": {}
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Util.DocumentExtractionSkill"
    },
    "DocumentIntelligenceLayoutSkill": {
      "type": "object",
      "description": "A skill that extracts content and layout information, via Azure AI Services, from files within the enrichment pipeline.",
      "properties": {
        "outputFormat": {
          "$ref": "#/definitions/DocumentIntelligenceLayoutSkillOutputFormat",
          "description": "Controls the cardinality of the output produced by the skill. Default is 'oneToMany'."
        },
        "outputMode": {
          "type": "string",
          "description": "Controls the cardinality of the output produced by the skill. Default is 'oneToMany'.",
          "default": "oneToMany",
          "enum": [
            "oneToMany"
          ],
          "x-ms-enum": {
            "name": "DocumentIntelligenceLayoutSkillOutputMode",
            "modelAsString": true,
            "values": [
              {
                "name": "OneToMany",
                "value": "oneToMany",
                "description": "Specify that the output should be parsed as 'oneToMany'."
              }
            ]
          }
        },
        "markdownHeaderDepth": {
          "type": "string",
          "description": "The depth of headers in the markdown output. Default is h6.",
          "default": "h6",
          "enum": [
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6"
          ],
          "x-ms-enum": {
            "name": "DocumentIntelligenceLayoutSkillMarkdownHeaderDepth",
            "modelAsString": true,
            "values": [
              {
                "name": "H1",
                "value": "h1",
                "description": "Header level 1."
              },
              {
                "name": "H2",
                "value": "h2",
                "description": "Header level 2."
              },
              {
                "name": "H3",
                "value": "h3",
                "description": "Header level 3."
              },
              {
                "name": "H4",
                "value": "h4",
                "description": "Header level 4."
              },
              {
                "name": "H5",
                "value": "h5",
                "description": "Header level 5."
              },
              {
                "name": "H6",
                "value": "h6",
                "description": "Header level 6."
              }
            ]
          }
        },
        "extractionOptions": {
          "type": "array",
          "description": "Controls the cardinality of the content extracted from the document by the skill.",
          "items": {
            "$ref": "#/definitions/DocumentIntelligenceLayoutSkillExtractionOptions"
          }
        },
        "chunkingProperties": {
          "$ref": "#/definitions/DocumentIntelligenceLayoutSkillChunkingProperties",
          "description": "Controls the cardinality for chunking the content."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Util.DocumentIntelligenceLayoutSkill"
    },
    "DocumentIntelligenceLayoutSkillChunkingProperties": {
      "type": "object",
      "description": "Controls the cardinality for chunking the content.",
      "properties": {
        "unit": {
          "$ref": "#/definitions/DocumentIntelligenceLayoutSkillChunkingUnit",
          "description": "The unit of the chunk."
        },
        "maximumLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum chunk length in characters. Default is 500."
        },
        "overlapLength": {
          "type": "integer",
          "format": "int32",
          "description": "The length of overlap provided between two text chunks. Default is 0."
        }
      }
    },
    "DocumentIntelligenceLayoutSkillChunkingUnit": {
      "type": "string",
      "description": "Controls the cardinality of the chunk unit. Default is 'characters'",
      "enum": [
        "characters"
      ],
      "x-ms-enum": {
        "name": "DocumentIntelligenceLayoutSkillChunkingUnit",
        "modelAsString": true,
        "values": [
          {
            "name": "Characters",
            "value": "characters",
            "description": "Specifies chunk by characters."
          }
        ]
      }
    },
    "DocumentIntelligenceLayoutSkillExtractionOptions": {
      "type": "string",
      "description": "Controls the cardinality of the content extracted from the document by the skill.",
      "enum": [
        "images",
        "locationMetadata"
      ],
      "x-ms-enum": {
        "name": "DocumentIntelligenceLayoutSkillExtractionOptions",
        "modelAsString": true,
        "values": [
          {
            "name": "Images",
            "value": "images",
            "description": "Specify that image content should be extracted from the document."
          },
          {
            "name": "LocationMetadata",
            "value": "locationMetadata",
            "description": "Specify that location metadata should be extracted from the document."
          }
        ]
      }
    },
    "DocumentIntelligenceLayoutSkillMarkdownHeaderDepth": {
      "type": "string",
      "description": "The depth of headers in the markdown output. Default is h6.",
      "enum": [
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6"
      ],
      "x-ms-enum": {
        "name": "DocumentIntelligenceLayoutSkillMarkdownHeaderDepth",
        "modelAsString": true,
        "values": [
          {
            "name": "H1",
            "value": "h1",
            "description": "Header level 1."
          },
          {
            "name": "H2",
            "value": "h2",
            "description": "Header level 2."
          },
          {
            "name": "H3",
            "value": "h3",
            "description": "Header level 3."
          },
          {
            "name": "H4",
            "value": "h4",
            "description": "Header level 4."
          },
          {
            "name": "H5",
            "value": "h5",
            "description": "Header level 5."
          },
          {
            "name": "H6",
            "value": "h6",
            "description": "Header level 6."
          }
        ]
      }
    },
    "DocumentIntelligenceLayoutSkillOutputFormat": {
      "type": "string",
      "description": "Controls the cardinality of the output format. Default is 'markdown'.",
      "enum": [
        "text",
        "markdown"
      ],
      "x-ms-enum": {
        "name": "DocumentIntelligenceLayoutSkillOutputFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "Text",
            "value": "text",
            "description": "Specify the format of the output as text."
          },
          {
            "name": "Markdown",
            "value": "markdown",
            "description": "Specify the format of the output as markdown."
          }
        ]
      }
    },
    "DocumentIntelligenceLayoutSkillOutputMode": {
      "type": "string",
      "description": "Controls the cardinality of the output produced by the skill. Default is 'oneToMany'.",
      "enum": [
        "oneToMany"
      ],
      "x-ms-enum": {
        "name": "DocumentIntelligenceLayoutSkillOutputMode",
        "modelAsString": true,
        "values": [
          {
            "name": "OneToMany",
            "value": "oneToMany",
            "description": "Specify that the output should be parsed as 'oneToMany'."
          }
        ]
      }
    },
    "DocumentKeysOrIds": {
      "type": "object",
      "description": "The type of the keysOrIds.",
      "properties": {
        "documentKeys": {
          "type": "array",
          "description": "document keys to be reset",
          "items": {
            "type": "string"
          }
        },
        "datasourceDocumentIds": {
          "type": "array",
          "description": "datasource document identifiers to be reset",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EdgeNGramTokenFilter": {
      "type": "object",
      "description": "Generates n-grams of the given size(s) starting from the front or the back of an input token. This token filter is implemented using Apache Lucene.",
      "properties": {
        "minGram": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum n-gram length. Default is 1. Maximum is 300. Must be less than the value of maxGram.",
          "default": 1,
          "maximum": 300
        },
        "maxGram": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum n-gram length. Default is 2. Maximum is 300.",
          "default": 2,
          "maximum": 300
        },
        "side": {
          "$ref": "#/definitions/EdgeNGramTokenFilterSide",
          "description": "Specifies which side of the input the n-gram should be generated from. Default is \"front\"."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.EdgeNGramTokenFilterV2"
    },
    "EdgeNGramTokenFilterSide": {
      "type": "string",
      "description": "Specifies which side of the input an n-gram should be generated from.",
      "enum": [
        "front",
        "back"
      ],
      "x-ms-enum": {
        "name": "EdgeNGramTokenFilterSide",
        "modelAsString": true,
        "values": [
          {
            "name": "Front",
            "value": "front",
            "description": "Specifies that the n-gram should be generated from the front of the input."
          },
          {
            "name": "Back",
            "value": "back",
            "description": "Specifies that the n-gram should be generated from the back of the input."
          }
        ]
      }
    },
    "EdgeNGramTokenizer": {
      "type": "object",
      "description": "Tokenizes the input from an edge into n-grams of the given size(s). This tokenizer is implemented using Apache Lucene.",
      "properties": {
        "minGram": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum n-gram length. Default is 1. Maximum is 300. Must be less than the value of maxGram.",
          "default": 1,
          "maximum": 300
        },
        "maxGram": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum n-gram length. Default is 2. Maximum is 300.",
          "default": 2,
          "maximum": 300
        },
        "tokenChars": {
          "type": "array",
          "description": "Character classes to keep in the tokens.",
          "items": {
            "$ref": "#/definitions/TokenCharacterKind"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalTokenizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.EdgeNGramTokenizer"
    },
    "ElisionTokenFilter": {
      "type": "object",
      "description": "Removes elisions. For example, \"l'avion\" (the plane) will be converted to \"avion\" (plane). This token filter is implemented using Apache Lucene.",
      "properties": {
        "articles": {
          "type": "array",
          "description": "The set of articles to remove.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.ElisionTokenFilter"
    },
    "EntityCategory": {
      "type": "string",
      "description": "A string indicating what entity categories to return.",
      "enum": [
        "location",
        "organization",
        "person",
        "quantity",
        "datetime",
        "url",
        "email"
      ],
      "x-ms-enum": {
        "name": "EntityCategory",
        "modelAsString": true,
        "values": [
          {
            "name": "Location",
            "value": "location",
            "description": "Entities describing a physical location."
          },
          {
            "name": "Organization",
            "value": "organization",
            "description": "Entities describing an organization."
          },
          {
            "name": "Person",
            "value": "person",
            "description": "Entities describing a person."
          },
          {
            "name": "Quantity",
            "value": "quantity",
            "description": "Entities describing a quantity."
          },
          {
            "name": "Datetime",
            "value": "datetime",
            "description": "Entities describing a date and time."
          },
          {
            "name": "Url",
            "value": "url",
            "description": "Entities describing a URL."
          },
          {
            "name": "Email",
            "value": "email",
            "description": "Entities describing an email address."
          }
        ]
      }
    },
    "EntityLinkingSkill": {
      "type": "object",
      "description": "Using the Text Analytics API, extracts linked entities from text.",
      "properties": {
        "defaultLanguageCode": {
          "type": "string",
          "description": "A value indicating which language code to use. Default is `en`."
        },
        "minimumPrecision": {
          "type": "number",
          "format": "double",
          "description": "A value between 0 and 1 that be used to only include entities whose confidence score is greater than the value specified. If not set (default), or if explicitly set to null, all entities will be included.",
          "maximum": 1
        },
        "modelVersion": {
          "type": "string",
          "description": "The version of the model to use when calling the Text Analytics service. It will default to the latest available when not specified. We recommend you do not specify this value unless absolutely necessary."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.V3.EntityLinkingSkill"
    },
    "EntityRecognitionSkill": {
      "type": "object",
      "description": "This skill is deprecated. Use the V3.EntityRecognitionSkill instead.",
      "properties": {
        "categories": {
          "type": "array",
          "description": "A list of entity categories that should be extracted.",
          "items": {
            "$ref": "#/definitions/EntityCategory"
          }
        },
        "defaultLanguageCode": {
          "$ref": "#/definitions/EntityRecognitionSkillLanguage",
          "description": "A value indicating which language code to use. Default is `en`."
        },
        "includeTypelessEntities": {
          "type": "boolean",
          "description": "Determines whether or not to include entities which are well known but don't conform to a pre-defined type. If this configuration is not set (default), set to null or set to false, entities which don't conform to one of the pre-defined types will not be surfaced."
        },
        "minimumPrecision": {
          "type": "number",
          "format": "double",
          "description": "A value between 0 and 1 that be used to only include entities whose confidence score is greater than the value specified. If not set (default), or if explicitly set to null, all entities will be included."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.EntityRecognitionSkill"
    },
    "EntityRecognitionSkillLanguage": {
      "type": "string",
      "description": "Deprecated. The language codes supported for input text by EntityRecognitionSkill.",
      "enum": [
        "ar",
        "cs",
        "zh-Hans",
        "zh-Hant",
        "da",
        "nl",
        "en",
        "fi",
        "fr",
        "de",
        "el",
        "hu",
        "it",
        "ja",
        "ko",
        "no",
        "pl",
        "pt-PT",
        "pt-BR",
        "ru",
        "es",
        "sv",
        "tr"
      ],
      "x-ms-enum": {
        "name": "EntityRecognitionSkillLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "ar",
            "value": "ar",
            "description": "Arabic"
          },
          {
            "name": "cs",
            "value": "cs",
            "description": "Czech"
          },
          {
            "name": "zh-Hans",
            "value": "zh-Hans",
            "description": "Chinese-Simplified"
          },
          {
            "name": "zh-Hant",
            "value": "zh-Hant",
            "description": "Chinese-Traditional"
          },
          {
            "name": "da",
            "value": "da",
            "description": "Danish"
          },
          {
            "name": "nl",
            "value": "nl",
            "description": "Dutch"
          },
          {
            "name": "en",
            "value": "en",
            "description": "English"
          },
          {
            "name": "fi",
            "value": "fi",
            "description": "Finnish"
          },
          {
            "name": "fr",
            "value": "fr",
            "description": "French"
          },
          {
            "name": "de",
            "value": "de",
            "description": "German"
          },
          {
            "name": "el",
            "value": "el",
            "description": "Greek"
          },
          {
            "name": "hu",
            "value": "hu",
            "description": "Hungarian"
          },
          {
            "name": "it",
            "value": "it",
            "description": "Italian"
          },
          {
            "name": "ja",
            "value": "ja",
            "description": "Japanese"
          },
          {
            "name": "ko",
            "value": "ko",
            "description": "Korean"
          },
          {
            "name": "no",
            "value": "no",
            "description": "Norwegian (Bokmaal)"
          },
          {
            "name": "pl",
            "value": "pl",
            "description": "Polish"
          },
          {
            "name": "pt-PT",
            "value": "pt-PT",
            "description": "Portuguese (Portugal)"
          },
          {
            "name": "pt-BR",
            "value": "pt-BR",
            "description": "Portuguese (Brazil)"
          },
          {
            "name": "ru",
            "value": "ru",
            "description": "Russian"
          },
          {
            "name": "es",
            "value": "es",
            "description": "Spanish"
          },
          {
            "name": "sv",
            "value": "sv",
            "description": "Swedish"
          },
          {
            "name": "tr",
            "value": "tr",
            "description": "Turkish"
          }
        ]
      }
    },
    "EntityRecognitionSkillV3": {
      "type": "object",
      "description": "Using the Text Analytics API, extracts entities of different types from text.",
      "properties": {
        "categories": {
          "type": "array",
          "description": "A list of entity categories that should be extracted.",
          "items": {
            "type": "string"
          }
        },
        "defaultLanguageCode": {
          "type": "string",
          "description": "A value indicating which language code to use. Default is `en`."
        },
        "minimumPrecision": {
          "type": "number",
          "format": "double",
          "description": "A value between 0 and 1 that be used to only include entities whose confidence score is greater than the value specified. If not set (default), or if explicitly set to null, all entities will be included.",
          "maximum": 1
        },
        "modelVersion": {
          "type": "string",
          "description": "The version of the model to use when calling the Text Analytics API. It will default to the latest available when not specified. We recommend you do not specify this value unless absolutely necessary."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.V3.EntityRecognitionSkill"
    },
    "ErrorAdditionalInfo": {
      "type": "object",
      "description": "The resource management error additional info.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The additional info type."
        },
        "info": {
          "type": "object",
          "description": "The additional info.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "description": "The error detail.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        },
        "target": {
          "type": "string",
          "description": "The error target."
        },
        "details": {
          "type": "array",
          "description": "The error details.",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          }
        },
        "additionalInfo": {
          "type": "array",
          "description": "The error additional info.",
          "items": {
            "$ref": "#/definitions/ErrorAdditionalInfo"
          }
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "description": "Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "The error object."
        }
      }
    },
    "ExhaustiveKnnAlgorithmConfiguration": {
      "type": "object",
      "description": "Contains configuration options specific to the exhaustive KNN algorithm used during querying, which will perform brute-force search across the entire vector index.",
      "properties": {
        "exhaustiveKnnParameters": {
          "$ref": "#/definitions/ExhaustiveKnnParameters",
          "description": "Contains the parameters specific to exhaustive KNN algorithm."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorSearchAlgorithmConfiguration"
        }
      ],
      "x-ms-discriminator-value": "exhaustiveKnn"
    },
    "ExhaustiveKnnParameters": {
      "type": "object",
      "description": "Contains the parameters specific to exhaustive KNN algorithm.",
      "properties": {
        "metric": {
          "$ref": "#/definitions/VectorSearchAlgorithmMetric",
          "description": "The similarity metric to use for vector comparisons."
        }
      }
    },
    "FacetResult": {
      "type": "object",
      "description": "A single bucket of a facet query result. Reports the number of documents with a field value falling within a particular range or having a particular value or interval.",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The approximate count of documents falling within the bucket described by this facet."
        },
        "@search.facets": {
          "type": "object",
          "description": "The nested facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not contain any nested facets.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FacetResult"
            },
            "type": "array"
          },
          "readOnly": true,
          "x-ms-client-name": "facets"
        },
        "sum": {
          "type": "integer",
          "format": "int64",
          "description": "The resulting total sum for the facet when a sum metric is requested.",
          "readOnly": true
        }
      },
      "additionalProperties": {}
    },
    "FieldMapping": {
      "type": "object",
      "description": "Defines a mapping between a field in a data source and a target field in an index.",
      "properties": {
        "sourceFieldName": {
          "type": "string",
          "description": "The name of the field in the data source."
        },
        "targetFieldName": {
          "type": "string",
          "description": "The name of the target field in the index. Same as the source field name by default."
        },
        "mappingFunction": {
          "$ref": "#/definitions/FieldMappingFunction",
          "description": "A function to apply to each source field value before indexing."
        }
      },
      "required": [
        "sourceFieldName"
      ]
    },
    "FieldMappingFunction": {
      "type": "object",
      "description": "Represents a function that transforms a value from a data source before indexing.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field mapping function."
        },
        "parameters": {
          "type": "object",
          "description": "A dictionary of parameter name/value pairs to pass to the function. Each value must be of a primitive type.",
          "additionalProperties": {}
        }
      },
      "required": [
        "name"
      ]
    },
    "FreshnessScoringFunction": {
      "type": "object",
      "description": "Defines a function that boosts scores based on the value of a date-time field.",
      "properties": {
        "freshness": {
          "$ref": "#/definitions/FreshnessScoringParameters",
          "description": "Parameter values for the freshness scoring function."
        }
      },
      "required": [
        "freshness"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ScoringFunction"
        }
      ],
      "x-ms-discriminator-value": "freshness"
    },
    "FreshnessScoringParameters": {
      "type": "object",
      "description": "Provides parameter values to a freshness scoring function.",
      "properties": {
        "boostingDuration": {
          "type": "string",
          "format": "duration",
          "description": "The expiration period after which boosting will stop for a particular document."
        }
      },
      "required": [
        "boostingDuration"
      ]
    },
    "GetIndexStatisticsResult": {
      "type": "object",
      "description": "Statistics for a given index. Statistics are collected periodically and are not guaranteed to always be up-to-date.",
      "properties": {
        "documentCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of documents in the index."
        },
        "storageSize": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of storage in bytes consumed by the index."
        },
        "vectorIndexSize": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of memory in bytes consumed by vectors in the index."
        }
      },
      "required": [
        "documentCount",
        "storageSize",
        "vectorIndexSize"
      ]
    },
    "HighWaterMarkChangeDetectionPolicy": {
      "type": "object",
      "description": "Defines a data change detection policy that captures changes based on the value of a high water mark column.",
      "properties": {
        "highWaterMarkColumnName": {
          "type": "string",
          "description": "The name of the high water mark column."
        }
      },
      "required": [
        "highWaterMarkColumnName"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DataChangeDetectionPolicy"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy"
    },
    "HnswAlgorithmConfiguration": {
      "type": "object",
      "description": "Contains configuration options specific to the HNSW approximate nearest neighbors algorithm used during indexing and querying. The HNSW algorithm offers a tunable trade-off between search speed and accuracy.",
      "properties": {
        "hnswParameters": {
          "$ref": "#/definitions/HnswParameters",
          "description": "Contains the parameters specific to HNSW algorithm."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorSearchAlgorithmConfiguration"
        }
      ],
      "x-ms-discriminator-value": "hnsw"
    },
    "HnswParameters": {
      "type": "object",
      "description": "Contains the parameters specific to the HNSW algorithm.",
      "properties": {
        "m": {
          "type": "integer",
          "format": "int32",
          "description": "The number of bi-directional links created for every new element during construction. Increasing this parameter value may improve recall and reduce retrieval times for datasets with high intrinsic dimensionality at the expense of increased memory consumption and longer indexing time.",
          "default": 4,
          "minimum": 4,
          "maximum": 10
        },
        "efConstruction": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the dynamic list containing the nearest neighbors, which is used during index time. Increasing this parameter may improve index quality, at the expense of increased indexing time. At a certain point, increasing this parameter leads to diminishing returns.",
          "default": 400,
          "minimum": 100,
          "maximum": 1000
        },
        "efSearch": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the dynamic list containing the nearest neighbors, which is used during search time. Increasing this parameter may improve search results, at the expense of slower search. At a certain point, increasing this parameter leads to diminishing returns.",
          "default": 500,
          "minimum": 100,
          "maximum": 1000
        },
        "metric": {
          "$ref": "#/definitions/VectorSearchAlgorithmMetric",
          "description": "The similarity metric to use for vector comparisons."
        }
      }
    },
    "HybridCountAndFacetMode": {
      "type": "string",
      "description": "Determines whether the count and facets should includes all documents that matched the search query, or only the documents that are retrieved within the 'maxTextRecallSize' window. The default value is 'countAllResults'.",
      "enum": [
        "countRetrievableResults",
        "countAllResults"
      ],
      "x-ms-enum": {
        "name": "HybridCountAndFacetMode",
        "modelAsString": true,
        "values": [
          {
            "name": "CountRetrievableResults",
            "value": "countRetrievableResults",
            "description": "Only include documents that were matched within the 'maxTextRecallSize' retrieval window when computing 'count' and 'facets'."
          },
          {
            "name": "CountAllResults",
            "value": "countAllResults",
            "description": "Include all documents that were matched by the search query when computing 'count' and 'facets', regardless of whether or not those documents are within the 'maxTextRecallSize' retrieval window."
          }
        ]
      }
    },
    "HybridSearch": {
      "type": "object",
      "description": "TThe query parameters to configure hybrid search behaviors.",
      "properties": {
        "maxTextRecallSize": {
          "type": "integer",
          "format": "int32",
          "description": "Determines the maximum number of documents to be retrieved by the text query portion of a hybrid search request. Those documents will be combined with the documents matching the vector queries to produce a single final list of results. Choosing a larger maxTextRecallSize value will allow retrieving and paging through more documents (using the top and skip parameters), at the cost of higher resource utilization and higher latency. The value needs to be between 1 and 10,000. Default is 1000."
        },
        "countAndFacetMode": {
          "$ref": "#/definitions/HybridCountAndFacetMode",
          "description": "Determines whether the count and facets should includes all documents that matched the search query, or only the documents that are retrieved within the 'maxTextRecallSize' window."
        }
      }
    },
    "ImageAnalysisSkill": {
      "type": "object",
      "description": "A skill that analyzes image files. It extracts a rich set of visual features based on the image content.",
      "properties": {
        "defaultLanguageCode": {
          "$ref": "#/definitions/ImageAnalysisSkillLanguage",
          "description": "A value indicating which language code to use. Default is `en`."
        },
        "visualFeatures": {
          "type": "array",
          "description": "A list of visual features.",
          "items": {
            "$ref": "#/definitions/VisualFeature"
          }
        },
        "details": {
          "type": "array",
          "description": "A string indicating which domain-specific details to return.",
          "items": {
            "$ref": "#/definitions/ImageDetail"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Vision.ImageAnalysisSkill"
    },
    "ImageAnalysisSkillLanguage": {
      "type": "string",
      "description": "The language codes supported for input by ImageAnalysisSkill.",
      "enum": [
        "ar",
        "az",
        "bg",
        "bs",
        "ca",
        "cs",
        "cy",
        "da",
        "de",
        "el",
        "en",
        "es",
        "et",
        "eu",
        "fi",
        "fr",
        "ga",
        "gl",
        "he",
        "hi",
        "hr",
        "hu",
        "id",
        "it",
        "ja",
        "kk",
        "ko",
        "lt",
        "lv",
        "mk",
        "ms",
        "nb",
        "nl",
        "pl",
        "prs",
        "pt-BR",
        "pt",
        "pt-PT",
        "ro",
        "ru",
        "sk",
        "sl",
        "sr-Cyrl",
        "sr-Latn",
        "sv",
        "th",
        "tr",
        "uk",
        "vi",
        "zh",
        "zh-Hans",
        "zh-Hant"
      ],
      "x-ms-enum": {
        "name": "ImageAnalysisSkillLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "ar",
            "value": "ar",
            "description": "Arabic"
          },
          {
            "name": "az",
            "value": "az",
            "description": "Azerbaijani"
          },
          {
            "name": "bg",
            "value": "bg",
            "description": "Bulgarian"
          },
          {
            "name": "bs",
            "value": "bs",
            "description": "Bosnian Latin"
          },
          {
            "name": "ca",
            "value": "ca",
            "description": "Catalan"
          },
          {
            "name": "cs",
            "value": "cs",
            "description": "Czech"
          },
          {
            "name": "cy",
            "value": "cy",
            "description": "Welsh"
          },
          {
            "name": "da",
            "value": "da",
            "description": "Danish"
          },
          {
            "name": "de",
            "value": "de",
            "description": "German"
          },
          {
            "name": "el",
            "value": "el",
            "description": "Greek"
          },
          {
            "name": "en",
            "value": "en",
            "description": "English"
          },
          {
            "name": "es",
            "value": "es",
            "description": "Spanish"
          },
          {
            "name": "et",
            "value": "et",
            "description": "Estonian"
          },
          {
            "name": "eu",
            "value": "eu",
            "description": "Basque"
          },
          {
            "name": "fi",
            "value": "fi",
            "description": "Finnish"
          },
          {
            "name": "fr",
            "value": "fr",
            "description": "French"
          },
          {
            "name": "ga",
            "value": "ga",
            "description": "Irish"
          },
          {
            "name": "gl",
            "value": "gl",
            "description": "Galician"
          },
          {
            "name": "he",
            "value": "he",
            "description": "Hebrew"
          },
          {
            "name": "hi",
            "value": "hi",
            "description": "Hindi"
          },
          {
            "name": "hr",
            "value": "hr",
            "description": "Croatian"
          },
          {
            "name": "hu",
            "value": "hu",
            "description": "Hungarian"
          },
          {
            "name": "id",
            "value": "id",
            "description": "Indonesian"
          },
          {
            "name": "it",
            "value": "it",
            "description": "Italian"
          },
          {
            "name": "ja",
            "value": "ja",
            "description": "Japanese"
          },
          {
            "name": "kk",
            "value": "kk",
            "description": "Kazakh"
          },
          {
            "name": "ko",
            "value": "ko",
            "description": "Korean"
          },
          {
            "name": "lt",
            "value": "lt",
            "description": "Lithuanian"
          },
          {
            "name": "lv",
            "value": "lv",
            "description": "Latvian"
          },
          {
            "name": "mk",
            "value": "mk",
            "description": "Macedonian"
          },
          {
            "name": "ms",
            "value": "ms",
            "description": "Malay Malaysia"
          },
          {
            "name": "nb",
            "value": "nb",
            "description": "Norwegian (Bokmal)"
          },
          {
            "name": "nl",
            "value": "nl",
            "description": "Dutch"
          },
          {
            "name": "pl",
            "value": "pl",
            "description": "Polish"
          },
          {
            "name": "prs",
            "value": "prs",
            "description": "Dari"
          },
          {
            "name": "pt-BR",
            "value": "pt-BR",
            "description": "Portuguese-Brazil"
          },
          {
            "name": "pt",
            "value": "pt",
            "description": "Portuguese-Portugal"
          },
          {
            "name": "pt-PT",
            "value": "pt-PT",
            "description": "Portuguese-Portugal"
          },
          {
            "name": "ro",
            "value": "ro",
            "description": "Romanian"
          },
          {
            "name": "ru",
            "value": "ru",
            "description": "Russian"
          },
          {
            "name": "sk",
            "value": "sk",
            "description": "Slovak"
          },
          {
            "name": "sl",
            "value": "sl",
            "description": "Slovenian"
          },
          {
            "name": "sr-Cyrl",
            "value": "sr-Cyrl",
            "description": "Serbian - Cyrillic RS"
          },
          {
            "name": "sr-Latn",
            "value": "sr-Latn",
            "description": "Serbian - Latin RS"
          },
          {
            "name": "sv",
            "value": "sv",
            "description": "Swedish"
          },
          {
            "name": "th",
            "value": "th",
            "description": "Thai"
          },
          {
            "name": "tr",
            "value": "tr",
            "description": "Turkish"
          },
          {
            "name": "uk",
            "value": "uk",
            "description": "Ukrainian"
          },
          {
            "name": "vi",
            "value": "vi",
            "description": "Vietnamese"
          },
          {
            "name": "zh",
            "value": "zh",
            "description": "Chinese Simplified"
          },
          {
            "name": "zh-Hans",
            "value": "zh-Hans",
            "description": "Chinese Simplified"
          },
          {
            "name": "zh-Hant",
            "value": "zh-Hant",
            "description": "Chinese Traditional"
          }
        ]
      }
    },
    "ImageDetail": {
      "type": "string",
      "description": "A string indicating which domain-specific details to return.",
      "enum": [
        "celebrities",
        "landmarks"
      ],
      "x-ms-enum": {
        "name": "ImageDetail",
        "modelAsString": true,
        "values": [
          {
            "name": "Celebrities",
            "value": "celebrities",
            "description": "Details recognized as celebrities."
          },
          {
            "name": "Landmarks",
            "value": "landmarks",
            "description": "Details recognized as landmarks."
          }
        ]
      }
    },
    "IndexAction": {
      "type": "object",
      "description": "Represents an index action that operates on a document.",
      "properties": {
        "@search.action": {
          "$ref": "#/definitions/IndexActionType",
          "description": "The operation to perform on a document in an indexing batch.",
          "x-ms-client-name": "actionType"
        }
      },
      "additionalProperties": {}
    },
    "IndexActionType": {
      "type": "string",
      "description": "The operation to perform on a document in an indexing batch.",
      "enum": [
        "upload",
        "merge",
        "mergeOrUpload",
        "delete"
      ],
      "x-ms-enum": {
        "name": "IndexActionType",
        "modelAsString": true,
        "values": [
          {
            "name": "Upload",
            "value": "upload",
            "description": "Inserts the document into the index if it is new and updates it if it exists. All fields are replaced in the update case."
          },
          {
            "name": "Merge",
            "value": "merge",
            "description": "Merges the specified field values with an existing document. If the document does not exist, the merge will fail. Any field you specify in a merge will replace the existing field in the document. This also applies to collections of primitive and complex types."
          },
          {
            "name": "MergeOrUpload",
            "value": "mergeOrUpload",
            "description": "Behaves like merge if a document with the given key already exists in the index. If the document does not exist, it behaves like upload with a new document."
          },
          {
            "name": "Delete",
            "value": "delete",
            "description": "Removes the specified document from the index. Any field you specify in a delete operation other than the key field will be ignored. If you want to remove an individual field from a document, use merge instead and set the field explicitly to null."
          }
        ]
      }
    },
    "IndexBatch": {
      "type": "object",
      "description": "Contains a batch of document write actions to send to the index.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The actions in the batch.",
          "items": {
            "$ref": "#/definitions/IndexAction"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "IndexDocumentsResult": {
      "type": "object",
      "description": "Response containing the status of operations for all documents in the indexing request.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of status information for each document in the indexing request.",
          "items": {
            "$ref": "#/definitions/IndexingResult"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "IndexProjectionMode": {
      "type": "string",
      "description": "Defines behavior of the index projections in relation to the rest of the indexer.",
      "enum": [
        "skipIndexingParentDocuments",
        "includeIndexingParentDocuments"
      ],
      "x-ms-enum": {
        "name": "IndexProjectionMode",
        "modelAsString": true,
        "values": [
          {
            "name": "SkipIndexingParentDocuments",
            "value": "skipIndexingParentDocuments",
            "description": "The source document will be skipped from writing into the indexer's target index."
          },
          {
            "name": "IncludeIndexingParentDocuments",
            "value": "includeIndexingParentDocuments",
            "description": "The source document will be written into the indexer's target index. This is the default pattern."
          }
        ]
      }
    },
    "IndexStatisticsSummary": {
      "type": "object",
      "description": "Statistics for a given index. Statistics are collected periodically and are not guaranteed to always be up-to-date.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the index.",
          "readOnly": true
        },
        "documentCount": {
          "type": "integer",
          "format": "int64",
          "description": "The number of documents in the index.",
          "readOnly": true
        },
        "storageSize": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of storage in bytes consumed by the index.",
          "readOnly": true
        },
        "vectorIndexSize": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of memory in bytes consumed by vectors in the index.",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "documentCount",
        "storageSize"
      ]
    },
    "IndexedOneLakeKnowledgeSourceParams": {
      "type": "object",
      "description": "Specifies runtime parameters for a indexed OneLake knowledge source",
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeSourceParams"
        }
      ],
      "x-ms-discriminator-value": "indexedOneLake"
    },
    "IndexedSharePointKnowledgeSourceParams": {
      "type": "object",
      "description": "Specifies runtime parameters for a indexed SharePoint knowledge source",
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeSourceParams"
        }
      ],
      "x-ms-discriminator-value": "indexedSharePoint"
    },
    "IndexerCurrentState": {
      "type": "object",
      "description": "Represents all of the state that defines and dictates the indexer's current execution.",
      "properties": {
        "mode": {
          "$ref": "#/definitions/IndexingMode",
          "description": "The mode the indexer is running in.",
          "readOnly": true
        },
        "allDocsInitialTrackingState": {
          "type": "string",
          "description": "Change tracking state used when indexing starts on all documents in the datasource.",
          "readOnly": true
        },
        "allDocsFinalTrackingState": {
          "type": "string",
          "description": "Change tracking state value when indexing finishes on all documents in the datasource.",
          "readOnly": true
        },
        "resetDocsInitialTrackingState": {
          "type": "string",
          "description": "Change tracking state used when indexing starts on select, reset documents in the datasource.",
          "readOnly": true
        },
        "resetDocsFinalTrackingState": {
          "type": "string",
          "description": "Change tracking state value when indexing finishes on select, reset documents in the datasource.",
          "readOnly": true
        },
        "resyncInitialTrackingState": {
          "type": "string",
          "description": "Change tracking state used when indexing starts on selective options from the datasource.",
          "readOnly": true
        },
        "resyncFinalTrackingState": {
          "type": "string",
          "description": "Change tracking state value when indexing finishes on selective options from the datasource.",
          "readOnly": true
        },
        "resetDocumentKeys": {
          "type": "array",
          "description": "The list of document keys that have been reset. The document key is the document's unique identifier for the data in the search index. The indexer will prioritize selectively re-ingesting these keys.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "resetDatasourceDocumentIds": {
          "type": "array",
          "description": "The list of datasource document ids that have been reset. The datasource document id is the unique identifier for the data in the datasource. The indexer will prioritize selectively re-ingesting these ids.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "IndexerExecutionEnvironment": {
      "type": "string",
      "description": "Specifies the environment in which the indexer should execute.",
      "enum": [
        "standard",
        "private"
      ],
      "x-ms-enum": {
        "name": "IndexerExecutionEnvironment",
        "modelAsString": true,
        "values": [
          {
            "name": "standard",
            "value": "standard",
            "description": "Indicates that the search service can determine where the indexer should execute. This is the default environment when nothing is specified and is the recommended value."
          },
          {
            "name": "private",
            "value": "private",
            "description": "Indicates that the indexer should run with the environment provisioned specifically for the search service. This should only be specified as the execution environment if the indexer needs to access resources securely over shared private link resources."
          }
        ]
      }
    },
    "IndexerExecutionResult": {
      "type": "object",
      "description": "Represents the result of an individual indexer execution.",
      "properties": {
        "status": {
          "$ref": "#/definitions/IndexerExecutionStatus",
          "description": "The outcome of this indexer execution."
        },
        "statusDetail": {
          "$ref": "#/definitions/IndexerExecutionStatusDetail",
          "description": "The outcome of this indexer execution.",
          "readOnly": true
        },
        "mode": {
          "$ref": "#/definitions/IndexingMode",
          "description": "The mode the indexer is running in.",
          "readOnly": true
        },
        "currentState": {
          "$ref": "#/definitions/IndexerCurrentState",
          "description": "All of the state that defines and dictates the indexer's current execution.",
          "readOnly": true
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message indicating the top-level error, if any."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of this indexer execution."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of this indexer execution, if the execution has already completed."
        },
        "errors": {
          "type": "array",
          "description": "The item-level indexing errors.",
          "items": {
            "$ref": "#/definitions/SearchIndexerError"
          }
        },
        "warnings": {
          "type": "array",
          "description": "The item-level indexing warnings.",
          "items": {
            "$ref": "#/definitions/SearchIndexerWarning"
          }
        },
        "itemsProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items that were processed during this indexer execution. This includes both successfully processed items and items where indexing was attempted but failed."
        },
        "itemsFailed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items that failed to be indexed during this indexer execution."
        },
        "initialTrackingState": {
          "type": "string",
          "description": "Change tracking state with which an indexer execution started."
        },
        "finalTrackingState": {
          "type": "string",
          "description": "Change tracking state with which an indexer execution finished."
        }
      },
      "required": [
        "status",
        "errors",
        "warnings",
        "itemsProcessed",
        "itemsFailed"
      ]
    },
    "IndexerExecutionStatus": {
      "type": "string",
      "description": "Represents the status of an individual indexer execution.",
      "enum": [
        "transientFailure",
        "success",
        "inProgress",
        "reset"
      ],
      "x-ms-enum": {
        "name": "IndexerExecutionStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "TransientFailure",
            "value": "transientFailure",
            "description": "An indexer invocation has failed, but the failure may be transient. Indexer invocations will continue per schedule."
          },
          {
            "name": "Success",
            "value": "success",
            "description": "Indexer execution completed successfully."
          },
          {
            "name": "InProgress",
            "value": "inProgress",
            "description": "Indexer execution is in progress."
          },
          {
            "name": "Reset",
            "value": "reset",
            "description": "Indexer has been reset."
          }
        ]
      }
    },
    "IndexerExecutionStatusDetail": {
      "type": "string",
      "description": "Details the status of an individual indexer execution.",
      "enum": [
        "resetDocs",
        "resync"
      ],
      "x-ms-enum": {
        "name": "IndexerExecutionStatusDetail",
        "modelAsString": true,
        "values": [
          {
            "name": "ResetDocs",
            "value": "resetDocs",
            "description": "Indicates that the reset that occurred was for a call to ResetDocs."
          },
          {
            "name": "Resync",
            "value": "resync",
            "description": "Indicates to selectively resync based on option(s) from data source."
          }
        ]
      }
    },
    "IndexerPermissionOption": {
      "type": "string",
      "description": "Options with various types of permission data to index.",
      "enum": [
        "userIds",
        "groupIds",
        "rbacScope"
      ],
      "x-ms-enum": {
        "name": "IndexerPermissionOption",
        "modelAsString": true,
        "values": [
          {
            "name": "UserIds",
            "value": "userIds",
            "description": "Indexer to ingest ACL userIds from data source to index."
          },
          {
            "name": "GroupIds",
            "value": "groupIds",
            "description": "Indexer to ingest ACL groupIds from data source to index."
          },
          {
            "name": "RbacScope",
            "value": "rbacScope",
            "description": "Indexer to ingest Azure RBAC scope from data source to index."
          }
        ]
      }
    },
    "IndexerResyncBody": {
      "type": "object",
      "description": "Request body for resync indexer operation.",
      "properties": {
        "options": {
          "type": "array",
          "description": "Indexer to re-ingest pre-selected permissions data from data source to index.",
          "items": {
            "$ref": "#/definitions/IndexerResyncOption"
          }
        }
      }
    },
    "IndexerResyncOption": {
      "type": "string",
      "description": "Options with various types of permission data to index.",
      "enum": [
        "permissions"
      ],
      "x-ms-enum": {
        "name": "IndexerResyncOption",
        "modelAsString": true,
        "values": [
          {
            "name": "Permissions",
            "value": "permissions",
            "description": "Indexer to re-ingest pre-selected permissions data from data source to index."
          }
        ]
      }
    },
    "IndexerStatus": {
      "type": "string",
      "description": "Represents the overall indexer status.",
      "enum": [
        "unknown",
        "error",
        "running"
      ],
      "x-ms-enum": {
        "name": "IndexerStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "Unknown",
            "value": "unknown",
            "description": "Indicates that the indexer is in an unknown state."
          },
          {
            "name": "Error",
            "value": "error",
            "description": "Indicates that the indexer experienced an error that cannot be corrected without human intervention."
          },
          {
            "name": "Running",
            "value": "running",
            "description": "Indicates that the indexer is running normally."
          }
        ]
      }
    },
    "IndexingMode": {
      "type": "string",
      "description": "Represents the mode the indexer is executing in.",
      "enum": [
        "indexingAllDocs",
        "indexingResetDocs",
        "indexingResync"
      ],
      "x-ms-enum": {
        "name": "IndexingMode",
        "modelAsString": true,
        "values": [
          {
            "name": "IndexingAllDocs",
            "value": "indexingAllDocs",
            "description": "The indexer is indexing all documents in the datasource."
          },
          {
            "name": "IndexingResetDocs",
            "value": "indexingResetDocs",
            "description": "The indexer is indexing selective, reset documents in the datasource. The documents being indexed are defined on indexer status."
          },
          {
            "name": "IndexingResync",
            "value": "indexingResync",
            "description": "The indexer is resyncing and indexing selective option(s) from the datasource."
          }
        ]
      }
    },
    "IndexingParameters": {
      "type": "object",
      "description": "Represents parameters for indexer execution.",
      "properties": {
        "batchSize": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items that are read from the data source and indexed as a single batch in order to improve performance. The default depends on the data source type."
        },
        "maxFailedItems": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that can fail indexing for indexer execution to still be considered successful. -1 means no limit. Default is 0."
        },
        "maxFailedItemsPerBatch": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items in a single batch that can fail indexing for the batch to still be considered successful. -1 means no limit. Default is 0."
        },
        "configuration": {
          "$ref": "#/definitions/IndexingParametersConfiguration",
          "description": "A dictionary of indexer-specific configuration properties. Each name is the name of a specific property. Each value must be of a primitive type."
        }
      }
    },
    "IndexingParametersConfiguration": {
      "type": "object",
      "description": "A dictionary of indexer-specific configuration properties. Each name is the name of a specific property. Each value must be of a primitive type.",
      "properties": {
        "parsingMode": {
          "type": "string",
          "description": "Represents the parsing mode for indexing from an Azure blob data source.",
          "default": "default",
          "enum": [
            "default",
            "text",
            "delimitedText",
            "json",
            "jsonArray",
            "jsonLines",
            "markdown"
          ],
          "x-ms-enum": {
            "name": "BlobIndexerParsingMode",
            "modelAsString": true,
            "values": [
              {
                "name": "Default",
                "value": "default",
                "description": "Set to default for normal file processing."
              },
              {
                "name": "Text",
                "value": "text",
                "description": "Set to text to improve indexing performance on plain text files in blob storage."
              },
              {
                "name": "DelimitedText",
                "value": "delimitedText",
                "description": "Set to delimitedText when blobs are plain CSV files."
              },
              {
                "name": "Json",
                "value": "json",
                "description": "Set to json to extract structured content from JSON files."
              },
              {
                "name": "JsonArray",
                "value": "jsonArray",
                "description": "Set to jsonArray to extract individual elements of a JSON array as separate documents."
              },
              {
                "name": "JsonLines",
                "value": "jsonLines",
                "description": "Set to jsonLines to extract individual JSON entities, separated by a new line, as separate documents."
              },
              {
                "name": "Markdown",
                "value": "markdown",
                "description": "Set to markdown to extract content from markdown files."
              }
            ]
          }
        },
        "excludedFileNameExtensions": {
          "type": "string",
          "description": "Comma-delimited list of filename extensions to ignore when processing from Azure blob storage.  For example, you could exclude \".png, .mp4\" to skip over those files during indexing."
        },
        "indexedFileNameExtensions": {
          "type": "string",
          "description": "Comma-delimited list of filename extensions to select when processing from Azure blob storage.  For example, you could focus indexing on specific application files \".docx, .pptx, .msg\" to specifically include those file types."
        },
        "failOnUnsupportedContentType": {
          "type": "boolean",
          "description": "For Azure blobs, set to false if you want to continue indexing when an unsupported content type is encountered, and you don't know all the content types (file extensions) in advance."
        },
        "failOnUnprocessableDocument": {
          "type": "boolean",
          "description": "For Azure blobs, set to false if you want to continue indexing if a document fails indexing."
        },
        "indexStorageMetadataOnlyForOversizedDocuments": {
          "type": "boolean",
          "description": "For Azure blobs, set this property to true to still index storage metadata for blob content that is too large to process. Oversized blobs are treated as errors by default. For limits on blob size, see https://learn.microsoft.com/azure/search/search-limits-quotas-capacity."
        },
        "delimitedTextHeaders": {
          "type": "string",
          "description": "For CSV blobs, specifies a comma-delimited list of column headers, useful for mapping source fields to destination fields in an index."
        },
        "delimitedTextDelimiter": {
          "type": "string",
          "description": "For CSV blobs, specifies the end-of-line single-character delimiter for CSV files where each line starts a new document (for example, \"|\")."
        },
        "firstLineContainsHeaders": {
          "type": "boolean",
          "description": "For CSV blobs, indicates that the first (non-blank) line of each blob contains headers.",
          "default": true
        },
        "markdownParsingSubmode": {
          "type": "string",
          "description": "Specifies the submode that will determine whether a markdown file will be parsed into exactly one search document or multiple search documents. Default is `oneToMany`.",
          "default": "oneToMany",
          "enum": [
            "oneToMany",
            "oneToOne"
          ],
          "x-ms-enum": {
            "name": "MarkdownParsingSubmode",
            "modelAsString": true,
            "values": [
              {
                "name": "OneToMany",
                "value": "oneToMany",
                "description": "Indicates that each section of the markdown file (up to a specified depth) will be parsed into individual search documents. This can result in a single markdown file producing multiple search documents. This is the default sub-mode."
              },
              {
                "name": "OneToOne",
                "value": "oneToOne",
                "description": "Indicates that each markdown file will be parsed into a single search document."
              }
            ]
          }
        },
        "markdownHeaderDepth": {
          "type": "string",
          "description": "Specifies the max header depth that will be considered while grouping markdown content. Default is `h6`.",
          "default": "h6",
          "enum": [
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6"
          ],
          "x-ms-enum": {
            "name": "MarkdownHeaderDepth",
            "modelAsString": true,
            "values": [
              {
                "name": "h1",
                "value": "h1",
                "description": "Indicates that headers up to a level of h1 will be considered while grouping markdown content."
              },
              {
                "name": "h2",
                "value": "h2",
                "description": "Indicates that headers up to a level of h2 will be considered while grouping markdown content."
              },
              {
                "name": "h3",
                "value": "h3",
                "description": "Indicates that headers up to a level of h3 will be considered while grouping markdown content."
              },
              {
                "name": "h4",
                "value": "h4",
                "description": "Indicates that headers up to a level of h4 will be considered while grouping markdown content."
              },
              {
                "name": "h5",
                "value": "h5",
                "description": "Indicates that headers up to a level of h5 will be considered while grouping markdown content."
              },
              {
                "name": "h6",
                "value": "h6",
                "description": "Indicates that headers up to a level of h6 will be considered while grouping markdown content. This is the default."
              }
            ]
          }
        },
        "documentRoot": {
          "type": "string",
          "description": "For JSON arrays, given a structured or semi-structured document, you can specify a path to the array using this property."
        },
        "dataToExtract": {
          "type": "string",
          "description": "Specifies the data to extract from Azure blob storage and tells the indexer which data to extract from image content when \"imageAction\" is set to a value other than \"none\".  This applies to embedded image content in a .PDF or other application, or image files such as .jpg and .png, in Azure blobs.",
          "default": "contentAndMetadata",
          "enum": [
            "storageMetadata",
            "allMetadata",
            "contentAndMetadata"
          ],
          "x-ms-enum": {
            "name": "BlobIndexerDataToExtract",
            "modelAsString": true,
            "values": [
              {
                "name": "StorageMetadata",
                "value": "storageMetadata",
                "description": "Indexes just the standard blob properties and user-specified metadata."
              },
              {
                "name": "AllMetadata",
                "value": "allMetadata",
                "description": "Extracts metadata provided by the Azure blob storage subsystem and the content-type specific metadata (for example, metadata unique to just .png files are indexed)."
              },
              {
                "name": "ContentAndMetadata",
                "value": "contentAndMetadata",
                "description": "Extracts all metadata and textual content from each blob."
              }
            ]
          }
        },
        "imageAction": {
          "type": "string",
          "description": "Determines how to process embedded images and image files in Azure blob storage.  Setting the \"imageAction\" configuration to any value other than \"none\" requires that a skillset also be attached to that indexer.",
          "default": "none",
          "enum": [
            "none",
            "generateNormalizedImages",
            "generateNormalizedImagePerPage"
          ],
          "x-ms-enum": {
            "name": "BlobIndexerImageAction",
            "modelAsString": true,
            "values": [
              {
                "name": "None",
                "value": "none",
                "description": "Ignores embedded images or image files in the data set.  This is the default."
              },
              {
                "name": "GenerateNormalizedImages",
                "value": "generateNormalizedImages",
                "description": "Extracts text from images (for example, the word \"STOP\" from a traffic stop sign), and embeds it into the content field.  This action requires that \"dataToExtract\" is set to \"contentAndMetadata\".  A normalized image refers to additional processing resulting in uniform image output, sized and rotated to promote consistent rendering when you include images in visual search results. This information is generated for each image when you use this option."
              },
              {
                "name": "GenerateNormalizedImagePerPage",
                "value": "generateNormalizedImagePerPage",
                "description": "Extracts text from images (for example, the word \"STOP\" from a traffic stop sign), and embeds it into the content field, but treats PDF files differently in that each page will be rendered as an image and normalized accordingly, instead of extracting embedded images.  Non-PDF file types will be treated the same as if \"generateNormalizedImages\" was set."
              }
            ]
          }
        },
        "allowSkillsetToReadFileData": {
          "type": "boolean",
          "description": "If true, will create a path //document//file_data that is an object representing the original file data downloaded from your blob data source. This allows you to pass the original file data to a custom skill for processing within the enrichment pipeline, or to the Document Extraction skill."
        },
        "pdfTextRotationAlgorithm": {
          "type": "string",
          "description": "Determines algorithm for text extraction from PDF files in Azure blob storage.",
          "default": "none",
          "enum": [
            "none",
            "detectAngles"
          ],
          "x-ms-enum": {
            "name": "BlobIndexerPDFTextRotationAlgorithm",
            "modelAsString": true,
            "values": [
              {
                "name": "None",
                "value": "none",
                "description": "Leverages normal text extraction.  This is the default."
              },
              {
                "name": "DetectAngles",
                "value": "detectAngles",
                "description": "May produce better and more readable text extraction from PDF files that have rotated text within them.  Note that there may be a small performance speed impact when this parameter is used.  This parameter only applies to PDF files, and only to PDFs with embedded text.  If the rotated text appears within an embedded image in the PDF, this parameter does not apply."
              }
            ]
          }
        },
        "executionEnvironment": {
          "type": "string",
          "description": "Specifies the environment in which the indexer should execute.",
          "default": "standard",
          "enum": [
            "standard",
            "private"
          ],
          "x-ms-enum": {
            "name": "IndexerExecutionEnvironment",
            "modelAsString": true,
            "values": [
              {
                "name": "standard",
                "value": "standard",
                "description": "Indicates that the search service can determine where the indexer should execute. This is the default environment when nothing is specified and is the recommended value."
              },
              {
                "name": "private",
                "value": "private",
                "description": "Indicates that the indexer should run with the environment provisioned specifically for the search service. This should only be specified as the execution environment if the indexer needs to access resources securely over shared private link resources."
              }
            ]
          }
        },
        "queryTimeout": {
          "type": "string",
          "description": "Increases the timeout beyond the 5-minute default for Azure SQL database data sources, specified in the format \"hh:mm:ss\".",
          "default": "00:05:00"
        }
      },
      "additionalProperties": {}
    },
    "IndexingResult": {
      "type": "object",
      "description": "Status of an indexing operation for a single document.",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of a document that was in the indexing request."
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded."
        },
        "status": {
          "type": "boolean",
          "description": "A value indicating whether the indexing operation succeeded for the document identified by the key."
        },
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy."
        }
      },
      "required": [
        "key",
        "status",
        "statusCode"
      ]
    },
    "IndexingSchedule": {
      "type": "object",
      "description": "Represents a schedule for indexer execution.",
      "properties": {
        "interval": {
          "type": "string",
          "format": "duration",
          "description": "The interval of time between indexer executions."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time when an indexer should start running."
        }
      },
      "required": [
        "interval"
      ]
    },
    "InputFieldMappingEntry": {
      "type": "object",
      "description": "Input field mapping for a skill.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the input."
        },
        "source": {
          "type": "string",
          "description": "The source of the input."
        },
        "sourceContext": {
          "type": "string",
          "description": "The source context used for selecting recursive inputs."
        },
        "inputs": {
          "type": "array",
          "description": "The recursive inputs used when creating a complex type.",
          "items": {
            "$ref": "#/definitions/InputFieldMappingEntry"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "KeepTokenFilter": {
      "type": "object",
      "description": "A token filter that only keeps tokens with text contained in a specified list of words. This token filter is implemented using Apache Lucene.",
      "properties": {
        "keepWords": {
          "type": "array",
          "description": "The list of words to keep.",
          "items": {
            "type": "string"
          }
        },
        "keepWordsCase": {
          "type": "boolean",
          "description": "A value indicating whether to lower case all words first. Default is false."
        }
      },
      "required": [
        "keepWords"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.KeepTokenFilter"
    },
    "KeyPhraseExtractionSkill": {
      "type": "object",
      "description": "A skill that uses text analytics for key phrase extraction.",
      "properties": {
        "defaultLanguageCode": {
          "$ref": "#/definitions/KeyPhraseExtractionSkillLanguage",
          "description": "A value indicating which language code to use. Default is `en`."
        },
        "maxKeyPhraseCount": {
          "type": "integer",
          "format": "int32",
          "description": "A number indicating how many key phrases to return. If absent, all identified key phrases will be returned."
        },
        "modelVersion": {
          "type": "string",
          "description": "The version of the model to use when calling the Text Analytics service. It will default to the latest available when not specified. We recommend you do not specify this value unless absolutely necessary."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.KeyPhraseExtractionSkill"
    },
    "KeyPhraseExtractionSkillLanguage": {
      "type": "string",
      "description": "The language codes supported for input text by KeyPhraseExtractionSkill.",
      "enum": [
        "da",
        "nl",
        "en",
        "fi",
        "fr",
        "de",
        "it",
        "ja",
        "ko",
        "no",
        "pl",
        "pt-PT",
        "pt-BR",
        "ru",
        "es",
        "sv"
      ],
      "x-ms-enum": {
        "name": "KeyPhraseExtractionSkillLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "da",
            "value": "da",
            "description": "Danish"
          },
          {
            "name": "nl",
            "value": "nl",
            "description": "Dutch"
          },
          {
            "name": "en",
            "value": "en",
            "description": "English"
          },
          {
            "name": "fi",
            "value": "fi",
            "description": "Finnish"
          },
          {
            "name": "fr",
            "value": "fr",
            "description": "French"
          },
          {
            "name": "de",
            "value": "de",
            "description": "German"
          },
          {
            "name": "it",
            "value": "it",
            "description": "Italian"
          },
          {
            "name": "ja",
            "value": "ja",
            "description": "Japanese"
          },
          {
            "name": "ko",
            "value": "ko",
            "description": "Korean"
          },
          {
            "name": "no",
            "value": "no",
            "description": "Norwegian (Bokmaal)"
          },
          {
            "name": "pl",
            "value": "pl",
            "description": "Polish"
          },
          {
            "name": "pt-PT",
            "value": "pt-PT",
            "description": "Portuguese (Portugal)"
          },
          {
            "name": "pt-BR",
            "value": "pt-BR",
            "description": "Portuguese (Brazil)"
          },
          {
            "name": "ru",
            "value": "ru",
            "description": "Russian"
          },
          {
            "name": "es",
            "value": "es",
            "description": "Spanish"
          },
          {
            "name": "sv",
            "value": "sv",
            "description": "Swedish"
          }
        ]
      }
    },
    "KeywordMarkerTokenFilter": {
      "type": "object",
      "description": "Marks terms as keywords. This token filter is implemented using Apache Lucene.",
      "properties": {
        "keywords": {
          "type": "array",
          "description": "A list of words to mark as keywords.",
          "items": {
            "type": "string"
          }
        },
        "ignoreCase": {
          "type": "boolean",
          "description": "A value indicating whether to ignore case. If true, all words are converted to lower case first. Default is false."
        }
      },
      "required": [
        "keywords"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.KeywordMarkerTokenFilter"
    },
    "KeywordTokenizer": {
      "type": "object",
      "description": "Emits the entire input as a single token. This tokenizer is implemented using Apache Lucene.",
      "properties": {
        "maxTokenLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum token length. Default is 256. Tokens longer than the maximum length are split. The maximum token length that can be used is 300 characters.",
          "default": 256,
          "maximum": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalTokenizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.KeywordTokenizerV2"
    },
    "KnowledgeBase": {
      "type": "object",
      "description": "Represents a knowledge base definition.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the knowledge base.",
          "readOnly": true
        },
        "knowledgeSources": {
          "type": "array",
          "description": "Knowledge sources referenced by this knowledge base.",
          "items": {
            "$ref": "#/definitions/KnowledgeSourceReference"
          }
        },
        "models": {
          "type": "array",
          "description": "Contains configuration options on how to connect to AI models.",
          "items": {
            "$ref": "#/definitions/KnowledgeBaseModel"
          }
        },
        "retrievalReasoningEffort": {
          "$ref": "#/definitions/KnowledgeRetrievalReasoningEffort",
          "description": "The retrieval reasoning effort configuration."
        },
        "outputMode": {
          "$ref": "#/definitions/KnowledgeRetrievalOutputMode",
          "description": "The output mode for the knowledge base."
        },
        "eTag": {
          "type": "string",
          "description": "The ETag of the knowledge base."
        },
        "encryptionKey": {
          "$ref": "#/definitions/SearchResourceEncryptionKey",
          "description": "A description of an encryption key that you create in Azure Key Vault."
        },
        "description": {
          "type": "string",
          "description": "The description of the knowledge base."
        },
        "retrievalInstructions": {
          "type": "string",
          "description": "Instructions considered by the knowledge base when developing query plan."
        },
        "answerInstructions": {
          "type": "string",
          "description": "Instructions considered by the knowledge base when generating answers."
        }
      },
      "required": [
        "name",
        "knowledgeSources"
      ]
    },
    "KnowledgeBaseActivityRecord": {
      "type": "object",
      "description": "Base type for activity records.",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the activity record."
        },
        "type": {
          "type": "string",
          "description": "The type of the activity record."
        },
        "elapsedMs": {
          "type": "integer",
          "format": "int32",
          "description": "The elapsed time in milliseconds for the retrieval activity."
        },
        "error": {
          "$ref": "#/definitions/KnowledgeBaseErrorDetail",
          "description": "The error detail explaining why the operation failed. This property is only included when the activity does not succeed."
        }
      },
      "discriminator": "type",
      "required": [
        "id",
        "type"
      ]
    },
    "KnowledgeBaseAgenticReasoningActivityRecord": {
      "type": "object",
      "description": "Represents an agentic reasoning activity record.",
      "properties": {
        "reasoningTokens": {
          "type": "integer",
          "format": "int32",
          "description": "The number of input tokens for agentic reasoning."
        },
        "retrievalReasoningEffort": {
          "$ref": "#/definitions/KnowledgeRetrievalReasoningEffort",
          "description": "The retrieval reasoning effort configuration."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseActivityRecord"
        }
      ],
      "x-ms-discriminator-value": "agenticReasoning"
    },
    "KnowledgeBaseAzureBlobActivityArguments": {
      "type": "object",
      "description": "Represents the arguments the azure blob retrieval activity was run with.",
      "properties": {
        "search": {
          "type": "string",
          "description": "The search string used to query blob contents."
        }
      }
    },
    "KnowledgeBaseAzureBlobActivityRecord": {
      "type": "object",
      "description": "Represents a azure blob retrieval activity record.",
      "properties": {
        "azureBlobArguments": {
          "$ref": "#/definitions/KnowledgeBaseAzureBlobActivityArguments",
          "description": "The azure blob arguments for the retrieval activity."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseRetrievalActivityRecord"
        }
      ],
      "x-ms-discriminator-value": "azureBlob"
    },
    "KnowledgeBaseAzureBlobReference": {
      "type": "object",
      "description": "Represents an Azure Blob Storage document reference.",
      "properties": {
        "blobUrl": {
          "type": "string",
          "description": "The blob URL for the reference."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseReference"
        }
      ],
      "x-ms-discriminator-value": "azureBlob"
    },
    "KnowledgeBaseAzureOpenAIModel": {
      "type": "object",
      "description": "Specifies the Azure OpenAI resource used to do query planning.",
      "properties": {
        "azureOpenAIParameters": {
          "$ref": "#/definitions/AzureOpenAiParameters",
          "description": "Azure OpenAI parameters."
        }
      },
      "required": [
        "azureOpenAIParameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseModel"
        }
      ],
      "x-ms-discriminator-value": "azureOpenAI"
    },
    "KnowledgeBaseErrorAdditionalInfo": {
      "type": "object",
      "description": "The resource management error additional info.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The additional info type."
        },
        "info": {
          "type": "object",
          "description": "The additional info.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "KnowledgeBaseErrorDetail": {
      "type": "object",
      "description": "The error details.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        },
        "target": {
          "type": "string",
          "description": "The error target."
        },
        "details": {
          "type": "array",
          "description": "The error details.",
          "items": {
            "$ref": "#/definitions/KnowledgeBaseErrorDetail"
          }
        },
        "additionalInfo": {
          "type": "array",
          "description": "The error additional info.",
          "items": {
            "$ref": "#/definitions/KnowledgeBaseErrorAdditionalInfo"
          }
        }
      }
    },
    "KnowledgeBaseImageContent": {
      "type": "object",
      "description": "Image content.",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The url of the image."
        }
      },
      "required": [
        "url"
      ]
    },
    "KnowledgeBaseIndexedOneLakeActivityArguments": {
      "type": "object",
      "description": "Represents the arguments the indexed OneLake retrieval activity was run with.",
      "properties": {
        "search": {
          "type": "string",
          "description": "The search string used to query indexed OneLake contents."
        }
      }
    },
    "KnowledgeBaseIndexedOneLakeActivityRecord": {
      "type": "object",
      "description": "Represents a indexed OneLake retrieval activity record.",
      "properties": {
        "indexedOneLakeArguments": {
          "$ref": "#/definitions/KnowledgeBaseIndexedOneLakeActivityArguments",
          "description": "The indexed OneLake arguments for the retrieval activity."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseRetrievalActivityRecord"
        }
      ],
      "x-ms-discriminator-value": "indexedOneLake"
    },
    "KnowledgeBaseIndexedOneLakeReference": {
      "type": "object",
      "description": "Represents an indexed OneLake document reference.",
      "properties": {
        "docUrl": {
          "type": "string",
          "description": "The document URL for the reference."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseReference"
        }
      ],
      "x-ms-discriminator-value": "indexedOneLake"
    },
    "KnowledgeBaseIndexedSharePointActivityArguments": {
      "type": "object",
      "description": "Represents the arguments the indexed SharePoint retrieval activity was run with.",
      "properties": {
        "search": {
          "type": "string",
          "description": "The search string used to query indexed SharePoint contents."
        }
      }
    },
    "KnowledgeBaseIndexedSharePointActivityRecord": {
      "type": "object",
      "description": "Represents a indexed SharePoint retrieval activity record.",
      "properties": {
        "indexedSharePointArguments": {
          "$ref": "#/definitions/KnowledgeBaseIndexedSharePointActivityArguments",
          "description": "The indexed SharePoint arguments for the retrieval activity."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseRetrievalActivityRecord"
        }
      ],
      "x-ms-discriminator-value": "indexedSharePoint"
    },
    "KnowledgeBaseIndexedSharePointReference": {
      "type": "object",
      "description": "Represents an indexed SharePoint document reference.",
      "properties": {
        "docUrl": {
          "type": "string",
          "description": "The document URL for the reference."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseReference"
        }
      ],
      "x-ms-discriminator-value": "indexedSharePoint"
    },
    "KnowledgeBaseMessage": {
      "type": "object",
      "description": "The natural language message style object.",
      "properties": {
        "role": {
          "type": "string",
          "description": "The role of the tool response."
        },
        "content": {
          "type": "array",
          "description": "The content of the message.",
          "items": {
            "$ref": "#/definitions/KnowledgeBaseMessageContent"
          }
        }
      },
      "required": [
        "content"
      ]
    },
    "KnowledgeBaseMessageContent": {
      "type": "object",
      "description": "Specifies the type of the message content.",
      "properties": {
        "type": {
          "$ref": "#/definitions/KnowledgeBaseMessageContentType",
          "description": "The type of the message"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "KnowledgeBaseMessageContentType": {
      "type": "string",
      "description": "The type of message content.",
      "enum": [
        "text",
        "image"
      ],
      "x-ms-enum": {
        "name": "KnowledgeBaseMessageContentType",
        "modelAsString": true,
        "values": [
          {
            "name": "text",
            "value": "text",
            "description": "Text message content kind."
          },
          {
            "name": "image",
            "value": "image",
            "description": "Image message content kind."
          }
        ]
      }
    },
    "KnowledgeBaseMessageImageContent": {
      "type": "object",
      "description": "Image message type.",
      "properties": {
        "image": {
          "$ref": "#/definitions/KnowledgeBaseImageContent",
          "description": "The image content."
        }
      },
      "required": [
        "image"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseMessageContent"
        }
      ],
      "x-ms-discriminator-value": "image"
    },
    "KnowledgeBaseMessageTextContent": {
      "type": "object",
      "description": "Text message type.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text content."
        }
      },
      "required": [
        "text"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseMessageContent"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "KnowledgeBaseModel": {
      "type": "object",
      "description": "Specifies the connection parameters for the model to use for query planning.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/KnowledgeBaseModelKind",
          "description": "The AI model to be used for query planning."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "KnowledgeBaseModelAnswerSynthesisActivityRecord": {
      "type": "object",
      "description": "Represents an LLM answer synthesis activity record.",
      "properties": {
        "inputTokens": {
          "type": "integer",
          "format": "int32",
          "description": "The number of input tokens for the LLM answer synthesis activity."
        },
        "outputTokens": {
          "type": "integer",
          "format": "int32",
          "description": "The number of output tokens for the LLM answer synthesis activity."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseActivityRecord"
        }
      ],
      "x-ms-discriminator-value": "modelAnswerSynthesis"
    },
    "KnowledgeBaseModelKind": {
      "type": "string",
      "description": "The AI model to be used for query planning.",
      "enum": [
        "azureOpenAI"
      ],
      "x-ms-enum": {
        "name": "KnowledgeBaseModelKind",
        "modelAsString": true,
        "values": [
          {
            "name": "AzureOpenAI",
            "value": "azureOpenAI",
            "description": "Use Azure Open AI models for query planning."
          }
        ]
      }
    },
    "KnowledgeBaseModelQueryPlanningActivityRecord": {
      "type": "object",
      "description": "Represents an LLM query planning activity record.",
      "properties": {
        "inputTokens": {
          "type": "integer",
          "format": "int32",
          "description": "The number of input tokens for the LLM query planning activity."
        },
        "outputTokens": {
          "type": "integer",
          "format": "int32",
          "description": "The number of output tokens for the LLM query planning activity."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseActivityRecord"
        }
      ],
      "x-ms-discriminator-value": "modelQueryPlanning"
    },
    "KnowledgeBaseReference": {
      "type": "object",
      "description": "Base type for references.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the reference."
        },
        "id": {
          "type": "string",
          "description": "The ID of the reference."
        },
        "activitySource": {
          "type": "integer",
          "format": "int32",
          "description": "The source activity ID for the reference."
        },
        "sourceData": {
          "type": "object",
          "description": "The source data for the reference.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "rerankerScore": {
          "type": "number",
          "format": "float",
          "description": "The reranker score for the document reference."
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "id",
        "activitySource"
      ]
    },
    "KnowledgeBaseRemoteSharePointActivityArguments": {
      "type": "object",
      "description": "Represents the arguments the remote SharePoint retrieval activity was run with.",
      "properties": {
        "search": {
          "type": "string",
          "description": "The search string used to query the remote SharePoint knowledge source."
        },
        "filterExpressionAddOn": {
          "type": "string",
          "description": "The filter expression add-on for the retrieval activity."
        }
      }
    },
    "KnowledgeBaseRemoteSharePointActivityRecord": {
      "type": "object",
      "description": "Represents a remote SharePoint retrieval activity record.",
      "properties": {
        "remoteSharePointArguments": {
          "$ref": "#/definitions/KnowledgeBaseRemoteSharePointActivityArguments",
          "description": "The remote SharePoint arguments for the retrieval activity."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseRetrievalActivityRecord"
        }
      ],
      "x-ms-discriminator-value": "remoteSharePoint"
    },
    "KnowledgeBaseRemoteSharePointReference": {
      "type": "object",
      "description": "Represents a remote SharePoint document reference.",
      "properties": {
        "webUrl": {
          "type": "string",
          "format": "uri",
          "description": "The url the reference data originated from."
        },
        "searchSensitivityLabelInfo": {
          "$ref": "#/definitions/SharePointSensitivityLabelInfo",
          "description": "Information about the sensitivity label applied to the SharePoint document."
        }
      },
      "required": [
        "webUrl"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseReference"
        }
      ],
      "x-ms-discriminator-value": "remoteSharePoint"
    },
    "KnowledgeBaseRetrievalActivityRecord": {
      "type": "object",
      "description": "Represents a retrieval activity record.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminator property for KnowledgeBaseRetrievalActivityRecord."
        },
        "knowledgeSourceName": {
          "type": "string",
          "description": "The knowledge source for the retrieval activity."
        },
        "queryTime": {
          "type": "string",
          "format": "date-time",
          "description": "The query time for this retrieval activity."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The count of documents retrieved that were sufficiently relevant to pass the reranker threshold."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseActivityRecord"
        }
      ]
    },
    "KnowledgeBaseRetrievalPartialResponse": {
      "type": "object",
      "description": "Partial retrieval response.",
      "properties": {
        "body": {
          "$ref": "#/definitions/KnowledgeBaseRetrievalResponse",
          "description": "The partial retrieval response body."
        }
      },
      "required": [
        "body"
      ]
    },
    "KnowledgeBaseRetrievalRequest": {
      "type": "object",
      "description": "The input contract for the retrieval request.",
      "properties": {
        "messages": {
          "type": "array",
          "description": "A list of chat message style input.",
          "items": {
            "$ref": "#/definitions/KnowledgeBaseMessage"
          }
        },
        "intents": {
          "type": "array",
          "description": "A list of intended queries to execute without model query planning.",
          "items": {
            "$ref": "#/definitions/KnowledgeRetrievalIntent"
          }
        },
        "maxRuntimeInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum runtime in seconds."
        },
        "maxOutputSize": {
          "type": "integer",
          "format": "int32",
          "description": "Limits the maximum size of the content in the output."
        },
        "retrievalReasoningEffort": {
          "$ref": "#/definitions/KnowledgeRetrievalReasoningEffort",
          "description": "The retrieval reasoning effort configuration."
        },
        "includeActivity": {
          "type": "boolean",
          "description": "Indicates retrieval results should include activity information."
        },
        "outputMode": {
          "$ref": "#/definitions/KnowledgeRetrievalOutputMode",
          "description": "The output configuration for this retrieval."
        },
        "knowledgeSourceParams": {
          "type": "array",
          "description": "A list of runtime parameters for the knowledge sources.",
          "items": {
            "$ref": "#/definitions/KnowledgeSourceParams"
          }
        }
      }
    },
    "KnowledgeBaseRetrievalResponse": {
      "type": "object",
      "description": "The output contract for the retrieval response.",
      "properties": {
        "response": {
          "type": "array",
          "description": "The response messages.",
          "items": {
            "$ref": "#/definitions/KnowledgeBaseMessage"
          }
        },
        "activity": {
          "type": "array",
          "description": "The activity records for tracking progress and billing implications.",
          "items": {
            "$ref": "#/definitions/KnowledgeBaseActivityRecord"
          }
        },
        "references": {
          "type": "array",
          "description": "The references for the retrieval data used in the response.",
          "items": {
            "$ref": "#/definitions/KnowledgeBaseReference"
          }
        }
      }
    },
    "KnowledgeBaseRetrievalSuccessResponse": {
      "type": "object",
      "description": "Successful retrieval response.",
      "properties": {
        "body": {
          "$ref": "#/definitions/KnowledgeBaseRetrievalResponse",
          "description": "The retrieval response body."
        }
      },
      "required": [
        "body"
      ]
    },
    "KnowledgeBaseSearchIndexActivityArguments": {
      "type": "object",
      "description": "Represents the arguments the search index retrieval activity was run with.",
      "properties": {
        "search": {
          "type": "string",
          "description": "The search string used to query the search index."
        },
        "filter": {
          "type": "string",
          "description": "The filter string."
        }
      }
    },
    "KnowledgeBaseSearchIndexActivityRecord": {
      "type": "object",
      "description": "Represents a search index retrieval activity record.",
      "properties": {
        "searchIndexArguments": {
          "$ref": "#/definitions/KnowledgeBaseSearchIndexActivityArguments",
          "description": "The search index arguments for the retrieval activity."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseRetrievalActivityRecord"
        }
      ],
      "x-ms-discriminator-value": "searchIndex"
    },
    "KnowledgeBaseSearchIndexReference": {
      "type": "object",
      "description": "Represents an Azure Search document reference.",
      "properties": {
        "docKey": {
          "type": "string",
          "description": "The document key for the reference."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseReference"
        }
      ],
      "x-ms-discriminator-value": "searchIndex"
    },
    "KnowledgeBaseWebActivityArguments": {
      "type": "object",
      "description": "Represents the arguments the web retrieval activity was run with.",
      "properties": {
        "search": {
          "type": "string",
          "description": "The search string used to query the web."
        },
        "language": {
          "type": "string",
          "description": "The language for the retrieval activity."
        },
        "market": {
          "type": "string",
          "description": "The market for the retrieval activity."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of web results returned."
        },
        "freshness": {
          "type": "string",
          "description": "The freshness for the retrieval activity."
        }
      }
    },
    "KnowledgeBaseWebActivityRecord": {
      "type": "object",
      "description": "Represents a web retrieval activity record.",
      "properties": {
        "webArguments": {
          "$ref": "#/definitions/KnowledgeBaseWebActivityArguments",
          "description": "The web arguments for the retrieval activity."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseRetrievalActivityRecord"
        }
      ],
      "x-ms-discriminator-value": "web"
    },
    "KnowledgeBaseWebReference": {
      "type": "object",
      "description": "Represents a web document reference.",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The url the reference data originated from."
        },
        "title": {
          "type": "string",
          "description": "The title of the web document."
        }
      },
      "required": [
        "url"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeBaseReference"
        }
      ],
      "x-ms-discriminator-value": "web"
    },
    "KnowledgeRetrievalHighReasoningEffort": {
      "type": "object",
      "description": "Run knowledge retrieval with high reasoning effort.",
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeRetrievalReasoningEffort"
        }
      ],
      "x-ms-discriminator-value": "high"
    },
    "KnowledgeRetrievalIntent": {
      "type": "object",
      "description": "An intended query to execute without model query planning.",
      "properties": {
        "type": {
          "$ref": "#/definitions/KnowledgeRetrievalIntentType",
          "description": "The type of the intent."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "KnowledgeRetrievalIntentType": {
      "type": "string",
      "description": "The kind of knowledge base configuration to use.",
      "enum": [
        "semantic"
      ],
      "x-ms-enum": {
        "name": "KnowledgeRetrievalIntentType",
        "modelAsString": true,
        "values": [
          {
            "name": "semantic",
            "value": "semantic",
            "description": "A natural language semantic query intent."
          }
        ]
      }
    },
    "KnowledgeRetrievalLowReasoningEffort": {
      "type": "object",
      "description": "Run knowledge retrieval with low reasoning effort.",
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeRetrievalReasoningEffort"
        }
      ],
      "x-ms-discriminator-value": "low"
    },
    "KnowledgeRetrievalMediumReasoningEffort": {
      "type": "object",
      "description": "Run knowledge retrieval with medium reasoning effort.",
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeRetrievalReasoningEffort"
        }
      ],
      "x-ms-discriminator-value": "medium"
    },
    "KnowledgeRetrievalMinimalReasoningEffort": {
      "type": "object",
      "description": "Run knowledge retrieval with minimal reasoning effort.",
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeRetrievalReasoningEffort"
        }
      ],
      "x-ms-discriminator-value": "minimal"
    },
    "KnowledgeRetrievalOutputMode": {
      "type": "string",
      "description": "The output configuration for this retrieval.",
      "enum": [
        "extractiveData",
        "answerSynthesis"
      ],
      "x-ms-enum": {
        "name": "KnowledgeRetrievalOutputMode",
        "modelAsString": true,
        "values": [
          {
            "name": "extractiveData",
            "value": "extractiveData",
            "description": "Return data from the knowledge sources directly without generative alteration."
          },
          {
            "name": "answerSynthesis",
            "value": "answerSynthesis",
            "description": "Synthesize an answer for the response payload."
          }
        ]
      }
    },
    "KnowledgeRetrievalReasoningEffort": {
      "type": "object",
      "description": "Base type for reasoning effort.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/KnowledgeRetrievalReasoningEffortKind",
          "description": "The kind of reasoning effort."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "KnowledgeRetrievalReasoningEffortKind": {
      "type": "string",
      "description": "The amount of effort to use during retrieval.",
      "enum": [
        "minimal",
        "low",
        "medium",
        "high"
      ],
      "x-ms-enum": {
        "name": "KnowledgeRetrievalReasoningEffortKind",
        "modelAsString": true,
        "values": [
          {
            "name": "minimal",
            "value": "minimal",
            "description": "Does not perform any source selections, any query planning, or any iterative search."
          },
          {
            "name": "low",
            "value": "low",
            "description": "Use low reasoning during retrieval."
          },
          {
            "name": "medium",
            "value": "medium",
            "description": "Use a moderate amount of reasoning during retrieval."
          },
          {
            "name": "high",
            "value": "high",
            "description": "Use a high amount of reasoning during retrieval."
          }
        ]
      }
    },
    "KnowledgeRetrievalSemanticIntent": {
      "type": "object",
      "description": "A semantic query intent.",
      "properties": {
        "search": {
          "type": "string",
          "description": "The semantic query to execute"
        }
      },
      "required": [
        "search"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeRetrievalIntent"
        }
      ],
      "x-ms-discriminator-value": "semantic"
    },
    "KnowledgeSource": {
      "type": "object",
      "description": "Represents a knowledge source definition.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the knowledge source.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Optional user-defined description."
        },
        "kind": {
          "$ref": "#/definitions/KnowledgeSourceKind",
          "description": "The type of the knowledge source."
        },
        "eTag": {
          "type": "string",
          "description": "The ETag of the agent."
        },
        "encryptionKey": {
          "$ref": "#/definitions/SearchResourceEncryptionKey",
          "description": "A description of an encryption key that you create in Azure Key Vault."
        }
      },
      "discriminator": "kind",
      "required": [
        "name",
        "kind"
      ]
    },
    "KnowledgeSourceKind": {
      "type": "string",
      "description": "The kind of the knowledge source.",
      "enum": [
        "searchIndex",
        "azureBlob",
        "indexedSharePoint",
        "indexedOneLake",
        "web",
        "remoteSharePoint"
      ],
      "x-ms-enum": {
        "name": "KnowledgeSourceKind",
        "modelAsString": true,
        "values": [
          {
            "name": "SearchIndex",
            "value": "searchIndex",
            "description": "A knowledge source that reads data from a Search Index."
          },
          {
            "name": "AzureBlob",
            "value": "azureBlob",
            "description": "A knowledge source that read and ingest data from Azure Blob Storage to a Search Index."
          },
          {
            "name": "IndexedSharePoint",
            "value": "indexedSharePoint",
            "description": "A knowledge source that reads data from indexed SharePoint."
          },
          {
            "name": "IndexedOneLake",
            "value": "indexedOneLake",
            "description": "A knowledge source that reads data from indexed OneLake."
          },
          {
            "name": "Web",
            "value": "web",
            "description": "A knowledge source that reads data from the web."
          },
          {
            "name": "RemoteSharePoint",
            "value": "remoteSharePoint",
            "description": "A knowledge source that reads data from remote SharePoint."
          }
        ]
      }
    },
    "KnowledgeSourceParams": {
      "type": "object",
      "description": "Base type for knowledge source runtime parameters.",
      "properties": {
        "knowledgeSourceName": {
          "type": "string",
          "description": "The name of the index the params apply to."
        },
        "includeReferences": {
          "type": "boolean",
          "description": "Indicates whether references should be included for data retrieved from this source."
        },
        "includeReferenceSourceData": {
          "type": "boolean",
          "description": "Indicates whether references should include the structured data obtained during retrieval in their payload."
        },
        "alwaysQuerySource": {
          "type": "boolean",
          "description": "Indicates that this knowledge source should bypass source selection and always be queried at retrieval time."
        },
        "rerankerThreshold": {
          "type": "number",
          "format": "float",
          "description": "The reranker threshold all retrieved documents must meet to be included in the response."
        },
        "kind": {
          "$ref": "#/definitions/KnowledgeSourceKind",
          "description": "The type of the knowledge source."
        }
      },
      "discriminator": "kind",
      "required": [
        "knowledgeSourceName",
        "kind"
      ]
    },
    "KnowledgeSourceReference": {
      "type": "object",
      "description": "Reference to a knowledge source.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the knowledge source."
        }
      },
      "required": [
        "name"
      ]
    },
    "LanguageDetectionSkill": {
      "type": "object",
      "description": "A skill that detects the language of input text and reports a single language code for every document submitted on the request. The language code is paired with a score indicating the confidence of the analysis.",
      "properties": {
        "defaultCountryHint": {
          "type": "string",
          "description": "A country code to use as a hint to the language detection model if it cannot disambiguate the language."
        },
        "modelVersion": {
          "type": "string",
          "description": "The version of the model to use when calling the Text Analytics service. It will default to the latest available when not specified. We recommend you do not specify this value unless absolutely necessary."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.LanguageDetectionSkill"
    },
    "LengthTokenFilter": {
      "type": "object",
      "description": "Removes words that are too long or too short. This token filter is implemented using Apache Lucene.",
      "properties": {
        "min": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum length in characters. Default is 0. Maximum is 300. Must be less than the value of max.",
          "maximum": 300
        },
        "max": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum length in characters. Default and maximum is 300.",
          "default": 300,
          "maximum": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.LengthTokenFilter"
    },
    "LexicalAnalyzer": {
      "type": "object",
      "description": "Base type for analyzers.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "The discriminator for derived types."
        },
        "name": {
          "type": "string",
          "description": "The name of the analyzer. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters."
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type",
        "name"
      ]
    },
    "LexicalAnalyzerName": {
      "type": "string",
      "description": "Defines the names of all text analyzers supported by the search engine.",
      "enum": [
        "ar.microsoft",
        "ar.lucene",
        "hy.lucene",
        "bn.microsoft",
        "eu.lucene",
        "bg.microsoft",
        "bg.lucene",
        "ca.microsoft",
        "ca.lucene",
        "zh-Hans.microsoft",
        "zh-Hans.lucene",
        "zh-Hant.microsoft",
        "zh-Hant.lucene",
        "hr.microsoft",
        "cs.microsoft",
        "cs.lucene",
        "da.microsoft",
        "da.lucene",
        "nl.microsoft",
        "nl.lucene",
        "en.microsoft",
        "en.lucene",
        "et.microsoft",
        "fi.microsoft",
        "fi.lucene",
        "fr.microsoft",
        "fr.lucene",
        "gl.lucene",
        "de.microsoft",
        "de.lucene",
        "el.microsoft",
        "el.lucene",
        "gu.microsoft",
        "he.microsoft",
        "hi.microsoft",
        "hi.lucene",
        "hu.microsoft",
        "hu.lucene",
        "is.microsoft",
        "id.microsoft",
        "id.lucene",
        "ga.lucene",
        "it.microsoft",
        "it.lucene",
        "ja.microsoft",
        "ja.lucene",
        "kn.microsoft",
        "ko.microsoft",
        "ko.lucene",
        "lv.microsoft",
        "lv.lucene",
        "lt.microsoft",
        "ml.microsoft",
        "ms.microsoft",
        "mr.microsoft",
        "nb.microsoft",
        "no.lucene",
        "fa.lucene",
        "pl.microsoft",
        "pl.lucene",
        "pt-BR.microsoft",
        "pt-BR.lucene",
        "pt-PT.microsoft",
        "pt-PT.lucene",
        "pa.microsoft",
        "ro.microsoft",
        "ro.lucene",
        "ru.microsoft",
        "ru.lucene",
        "sr-cyrillic.microsoft",
        "sr-latin.microsoft",
        "sk.microsoft",
        "sl.microsoft",
        "es.microsoft",
        "es.lucene",
        "sv.microsoft",
        "sv.lucene",
        "ta.microsoft",
        "te.microsoft",
        "th.microsoft",
        "th.lucene",
        "tr.microsoft",
        "tr.lucene",
        "uk.microsoft",
        "ur.microsoft",
        "vi.microsoft",
        "standard.lucene",
        "standardasciifolding.lucene",
        "keyword",
        "pattern",
        "simple",
        "stop",
        "whitespace"
      ],
      "x-ms-enum": {
        "name": "LexicalAnalyzerName",
        "modelAsString": true,
        "values": [
          {
            "name": "ArMicrosoft",
            "value": "ar.microsoft",
            "description": "Microsoft analyzer for Arabic."
          },
          {
            "name": "ArLucene",
            "value": "ar.lucene",
            "description": "Lucene analyzer for Arabic."
          },
          {
            "name": "HyLucene",
            "value": "hy.lucene",
            "description": "Lucene analyzer for Armenian."
          },
          {
            "name": "BnMicrosoft",
            "value": "bn.microsoft",
            "description": "Microsoft analyzer for Bangla."
          },
          {
            "name": "EuLucene",
            "value": "eu.lucene",
            "description": "Lucene analyzer for Basque."
          },
          {
            "name": "BgMicrosoft",
            "value": "bg.microsoft",
            "description": "Microsoft analyzer for Bulgarian."
          },
          {
            "name": "BgLucene",
            "value": "bg.lucene",
            "description": "Lucene analyzer for Bulgarian."
          },
          {
            "name": "CaMicrosoft",
            "value": "ca.microsoft",
            "description": "Microsoft analyzer for Catalan."
          },
          {
            "name": "CaLucene",
            "value": "ca.lucene",
            "description": "Lucene analyzer for Catalan."
          },
          {
            "name": "ZhHansMicrosoft",
            "value": "zh-Hans.microsoft",
            "description": "Microsoft analyzer for Chinese (Simplified)."
          },
          {
            "name": "ZhHansLucene",
            "value": "zh-Hans.lucene",
            "description": "Lucene analyzer for Chinese (Simplified)."
          },
          {
            "name": "ZhHantMicrosoft",
            "value": "zh-Hant.microsoft",
            "description": "Microsoft analyzer for Chinese (Traditional)."
          },
          {
            "name": "ZhHantLucene",
            "value": "zh-Hant.lucene",
            "description": "Lucene analyzer for Chinese (Traditional)."
          },
          {
            "name": "HrMicrosoft",
            "value": "hr.microsoft",
            "description": "Microsoft analyzer for Croatian."
          },
          {
            "name": "CsMicrosoft",
            "value": "cs.microsoft",
            "description": "Microsoft analyzer for Czech."
          },
          {
            "name": "CsLucene",
            "value": "cs.lucene",
            "description": "Lucene analyzer for Czech."
          },
          {
            "name": "DaMicrosoft",
            "value": "da.microsoft",
            "description": "Microsoft analyzer for Danish."
          },
          {
            "name": "DaLucene",
            "value": "da.lucene",
            "description": "Lucene analyzer for Danish."
          },
          {
            "name": "NlMicrosoft",
            "value": "nl.microsoft",
            "description": "Microsoft analyzer for Dutch."
          },
          {
            "name": "NlLucene",
            "value": "nl.lucene",
            "description": "Lucene analyzer for Dutch."
          },
          {
            "name": "EnMicrosoft",
            "value": "en.microsoft",
            "description": "Microsoft analyzer for English."
          },
          {
            "name": "EnLucene",
            "value": "en.lucene",
            "description": "Lucene analyzer for English."
          },
          {
            "name": "EtMicrosoft",
            "value": "et.microsoft",
            "description": "Microsoft analyzer for Estonian."
          },
          {
            "name": "FiMicrosoft",
            "value": "fi.microsoft",
            "description": "Microsoft analyzer for Finnish."
          },
          {
            "name": "FiLucene",
            "value": "fi.lucene",
            "description": "Lucene analyzer for Finnish."
          },
          {
            "name": "FrMicrosoft",
            "value": "fr.microsoft",
            "description": "Microsoft analyzer for French."
          },
          {
            "name": "FrLucene",
            "value": "fr.lucene",
            "description": "Lucene analyzer for French."
          },
          {
            "name": "GlLucene",
            "value": "gl.lucene",
            "description": "Lucene analyzer for Galician."
          },
          {
            "name": "DeMicrosoft",
            "value": "de.microsoft",
            "description": "Microsoft analyzer for German."
          },
          {
            "name": "DeLucene",
            "value": "de.lucene",
            "description": "Lucene analyzer for German."
          },
          {
            "name": "ElMicrosoft",
            "value": "el.microsoft",
            "description": "Microsoft analyzer for Greek."
          },
          {
            "name": "ElLucene",
            "value": "el.lucene",
            "description": "Lucene analyzer for Greek."
          },
          {
            "name": "GuMicrosoft",
            "value": "gu.microsoft",
            "description": "Microsoft analyzer for Gujarati."
          },
          {
            "name": "HeMicrosoft",
            "value": "he.microsoft",
            "description": "Microsoft analyzer for Hebrew."
          },
          {
            "name": "HiMicrosoft",
            "value": "hi.microsoft",
            "description": "Microsoft analyzer for Hindi."
          },
          {
            "name": "HiLucene",
            "value": "hi.lucene",
            "description": "Lucene analyzer for Hindi."
          },
          {
            "name": "HuMicrosoft",
            "value": "hu.microsoft",
            "description": "Microsoft analyzer for Hungarian."
          },
          {
            "name": "HuLucene",
            "value": "hu.lucene",
            "description": "Lucene analyzer for Hungarian."
          },
          {
            "name": "IsMicrosoft",
            "value": "is.microsoft",
            "description": "Microsoft analyzer for Icelandic."
          },
          {
            "name": "IdMicrosoft",
            "value": "id.microsoft",
            "description": "Microsoft analyzer for Indonesian (Bahasa)."
          },
          {
            "name": "IdLucene",
            "value": "id.lucene",
            "description": "Lucene analyzer for Indonesian."
          },
          {
            "name": "GaLucene",
            "value": "ga.lucene",
            "description": "Lucene analyzer for Irish."
          },
          {
            "name": "ItMicrosoft",
            "value": "it.microsoft",
            "description": "Microsoft analyzer for Italian."
          },
          {
            "name": "ItLucene",
            "value": "it.lucene",
            "description": "Lucene analyzer for Italian."
          },
          {
            "name": "JaMicrosoft",
            "value": "ja.microsoft",
            "description": "Microsoft analyzer for Japanese."
          },
          {
            "name": "JaLucene",
            "value": "ja.lucene",
            "description": "Lucene analyzer for Japanese."
          },
          {
            "name": "KnMicrosoft",
            "value": "kn.microsoft",
            "description": "Microsoft analyzer for Kannada."
          },
          {
            "name": "KoMicrosoft",
            "value": "ko.microsoft",
            "description": "Microsoft analyzer for Korean."
          },
          {
            "name": "KoLucene",
            "value": "ko.lucene",
            "description": "Lucene analyzer for Korean."
          },
          {
            "name": "LvMicrosoft",
            "value": "lv.microsoft",
            "description": "Microsoft analyzer for Latvian."
          },
          {
            "name": "LvLucene",
            "value": "lv.lucene",
            "description": "Lucene analyzer for Latvian."
          },
          {
            "name": "LtMicrosoft",
            "value": "lt.microsoft",
            "description": "Microsoft analyzer for Lithuanian."
          },
          {
            "name": "MlMicrosoft",
            "value": "ml.microsoft",
            "description": "Microsoft analyzer for Malayalam."
          },
          {
            "name": "MsMicrosoft",
            "value": "ms.microsoft",
            "description": "Microsoft analyzer for Malay (Latin)."
          },
          {
            "name": "MrMicrosoft",
            "value": "mr.microsoft",
            "description": "Microsoft analyzer for Marathi."
          },
          {
            "name": "NbMicrosoft",
            "value": "nb.microsoft",
            "description": "Microsoft analyzer for Norwegian (BokmÃ¥l)."
          },
          {
            "name": "NoLucene",
            "value": "no.lucene",
            "description": "Lucene analyzer for Norwegian."
          },
          {
            "name": "FaLucene",
            "value": "fa.lucene",
            "description": "Lucene analyzer for Persian."
          },
          {
            "name": "PlMicrosoft",
            "value": "pl.microsoft",
            "description": "Microsoft analyzer for Polish."
          },
          {
            "name": "PlLucene",
            "value": "pl.lucene",
            "description": "Lucene analyzer for Polish."
          },
          {
            "name": "PtBrMicrosoft",
            "value": "pt-BR.microsoft",
            "description": "Microsoft analyzer for Portuguese (Brazil)."
          },
          {
            "name": "PtBrLucene",
            "value": "pt-BR.lucene",
            "description": "Lucene analyzer for Portuguese (Brazil)."
          },
          {
            "name": "PtPtMicrosoft",
            "value": "pt-PT.microsoft",
            "description": "Microsoft analyzer for Portuguese (Portugal)."
          },
          {
            "name": "PtPtLucene",
            "value": "pt-PT.lucene",
            "description": "Lucene analyzer for Portuguese (Portugal)."
          },
          {
            "name": "PaMicrosoft",
            "value": "pa.microsoft",
            "description": "Microsoft analyzer for Punjabi."
          },
          {
            "name": "RoMicrosoft",
            "value": "ro.microsoft",
            "description": "Microsoft analyzer for Romanian."
          },
          {
            "name": "RoLucene",
            "value": "ro.lucene",
            "description": "Lucene analyzer for Romanian."
          },
          {
            "name": "RuMicrosoft",
            "value": "ru.microsoft",
            "description": "Microsoft analyzer for Russian."
          },
          {
            "name": "RuLucene",
            "value": "ru.lucene",
            "description": "Lucene analyzer for Russian."
          },
          {
            "name": "SrCyrillicMicrosoft",
            "value": "sr-cyrillic.microsoft",
            "description": "Microsoft analyzer for Serbian (Cyrillic)."
          },
          {
            "name": "SrLatinMicrosoft",
            "value": "sr-latin.microsoft",
            "description": "Microsoft analyzer for Serbian (Latin)."
          },
          {
            "name": "SkMicrosoft",
            "value": "sk.microsoft",
            "description": "Microsoft analyzer for Slovak."
          },
          {
            "name": "SlMicrosoft",
            "value": "sl.microsoft",
            "description": "Microsoft analyzer for Slovenian."
          },
          {
            "name": "EsMicrosoft",
            "value": "es.microsoft",
            "description": "Microsoft analyzer for Spanish."
          },
          {
            "name": "EsLucene",
            "value": "es.lucene",
            "description": "Lucene analyzer for Spanish."
          },
          {
            "name": "SvMicrosoft",
            "value": "sv.microsoft",
            "description": "Microsoft analyzer for Swedish."
          },
          {
            "name": "SvLucene",
            "value": "sv.lucene",
            "description": "Lucene analyzer for Swedish."
          },
          {
            "name": "TaMicrosoft",
            "value": "ta.microsoft",
            "description": "Microsoft analyzer for Tamil."
          },
          {
            "name": "TeMicrosoft",
            "value": "te.microsoft",
            "description": "Microsoft analyzer for Telugu."
          },
          {
            "name": "ThMicrosoft",
            "value": "th.microsoft",
            "description": "Microsoft analyzer for Thai."
          },
          {
            "name": "ThLucene",
            "value": "th.lucene",
            "description": "Lucene analyzer for Thai."
          },
          {
            "name": "TrMicrosoft",
            "value": "tr.microsoft",
            "description": "Microsoft analyzer for Turkish."
          },
          {
            "name": "TrLucene",
            "value": "tr.lucene",
            "description": "Lucene analyzer for Turkish."
          },
          {
            "name": "UkMicrosoft",
            "value": "uk.microsoft",
            "description": "Microsoft analyzer for Ukrainian."
          },
          {
            "name": "UrMicrosoft",
            "value": "ur.microsoft",
            "description": "Microsoft analyzer for Urdu."
          },
          {
            "name": "ViMicrosoft",
            "value": "vi.microsoft",
            "description": "Microsoft analyzer for Vietnamese."
          },
          {
            "name": "StandardLucene",
            "value": "standard.lucene",
            "description": "Standard Lucene analyzer."
          },
          {
            "name": "StandardAsciiFoldingLucene",
            "value": "standardasciifolding.lucene",
            "description": "Standard ASCII Folding Lucene analyzer. See https://learn.microsoft.com/rest/api/searchservice/Custom-analyzers-in-Azure-Search#Analyzers"
          },
          {
            "name": "Keyword",
            "value": "keyword",
            "description": "Treats the entire content of a field as a single token. This is useful for data like zip codes, ids, and some product names. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/KeywordAnalyzer.html"
          },
          {
            "name": "Pattern",
            "value": "pattern",
            "description": "Flexibly separates text into terms via a regular expression pattern. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.html"
          },
          {
            "name": "Simple",
            "value": "simple",
            "description": "Divides text at non-letters and converts them to lower case. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/SimpleAnalyzer.html"
          },
          {
            "name": "Stop",
            "value": "stop",
            "description": "Divides text at non-letters; Applies the lowercase and stopword token filters. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/StopAnalyzer.html"
          },
          {
            "name": "Whitespace",
            "value": "whitespace",
            "description": "An analyzer that uses the whitespace tokenizer. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/WhitespaceAnalyzer.html"
          }
        ]
      }
    },
    "LexicalNormalizer": {
      "type": "object",
      "description": "Base type for normalizers.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "The discriminator for derived types."
        },
        "name": {
          "type": "string",
          "description": "The name of the char filter. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters."
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type",
        "name"
      ]
    },
    "LexicalNormalizerName": {
      "type": "string",
      "description": "Defines the names of all text normalizers supported by the search engine.",
      "enum": [
        "asciifolding",
        "elision",
        "lowercase",
        "standard",
        "uppercase"
      ],
      "x-ms-enum": {
        "name": "LexicalNormalizerName",
        "modelAsString": true,
        "values": [
          {
            "name": "AsciiFolding",
            "value": "asciifolding",
            "description": "Converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127 ASCII characters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if such equivalents exist. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html"
          },
          {
            "name": "Elision",
            "value": "elision",
            "description": "Removes elisions. For example, \"l'avion\" (the plane) will be converted to \"avion\" (plane). See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/util/ElisionFilter.html"
          },
          {
            "name": "Lowercase",
            "value": "lowercase",
            "description": "Normalizes token text to lowercase. See https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/core/LowerCaseFilter.html"
          },
          {
            "name": "Standard",
            "value": "standard",
            "description": "Standard normalizer, which consists of lowercase and asciifolding. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/reverse/ReverseStringFilter.html"
          },
          {
            "name": "Uppercase",
            "value": "uppercase",
            "description": "Normalizes token text to uppercase. See https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/core/UpperCaseFilter.html"
          }
        ]
      }
    },
    "LexicalTokenizer": {
      "type": "object",
      "description": "Base type for tokenizers.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "The discriminator for derived types."
        },
        "name": {
          "type": "string",
          "description": "The name of the tokenizer. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters."
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type",
        "name"
      ]
    },
    "LexicalTokenizerName": {
      "type": "string",
      "description": "Defines the names of all tokenizers supported by the search engine.",
      "enum": [
        "classic",
        "edgeNGram",
        "keyword_v2",
        "letter",
        "lowercase",
        "microsoft_language_tokenizer",
        "microsoft_language_stemming_tokenizer",
        "nGram",
        "path_hierarchy_v2",
        "pattern",
        "standard_v2",
        "uax_url_email",
        "whitespace"
      ],
      "x-ms-enum": {
        "name": "LexicalTokenizerName",
        "modelAsString": true,
        "values": [
          {
            "name": "Classic",
            "value": "classic",
            "description": "Grammar-based tokenizer that is suitable for processing most European-language documents. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/ClassicTokenizer.html"
          },
          {
            "name": "EdgeNGram",
            "value": "edgeNGram",
            "description": "Tokenizes the input from an edge into n-grams of the given size(s). See https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.html"
          },
          {
            "name": "Keyword",
            "value": "keyword_v2",
            "description": "Emits the entire input as a single token. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/KeywordTokenizer.html"
          },
          {
            "name": "Letter",
            "value": "letter",
            "description": "Divides text at non-letters. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LetterTokenizer.html"
          },
          {
            "name": "Lowercase",
            "value": "lowercase",
            "description": "Divides text at non-letters and converts them to lower case. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LowerCaseTokenizer.html"
          },
          {
            "name": "MicrosoftLanguageTokenizer",
            "value": "microsoft_language_tokenizer",
            "description": "Divides text using language-specific rules."
          },
          {
            "name": "MicrosoftLanguageStemmingTokenizer",
            "value": "microsoft_language_stemming_tokenizer",
            "description": "Divides text using language-specific rules and reduces words to their base forms."
          },
          {
            "name": "NGram",
            "value": "nGram",
            "description": "Tokenizes the input into n-grams of the given size(s). See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/NGramTokenizer.html"
          },
          {
            "name": "PathHierarchy",
            "value": "path_hierarchy_v2",
            "description": "Tokenizer for path-like hierarchies. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/path/PathHierarchyTokenizer.html"
          },
          {
            "name": "Pattern",
            "value": "pattern",
            "description": "Tokenizer that uses regex pattern matching to construct distinct tokens. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/pattern/PatternTokenizer.html"
          },
          {
            "name": "Standard",
            "value": "standard_v2",
            "description": "Standard Lucene analyzer; Composed of the standard tokenizer, lowercase filter and stop filter. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/StandardTokenizer.html"
          },
          {
            "name": "UaxUrlEmail",
            "value": "uax_url_email",
            "description": "Tokenizes urls and emails as one token. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.html"
          },
          {
            "name": "Whitespace",
            "value": "whitespace",
            "description": "Divides text at whitespace. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/WhitespaceTokenizer.html"
          }
        ]
      }
    },
    "LimitTokenFilter": {
      "type": "object",
      "description": "Limits the number of tokens while indexing. This token filter is implemented using Apache Lucene.",
      "properties": {
        "maxTokenCount": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of tokens to produce. Default is 1.",
          "default": 1
        },
        "consumeAllTokens": {
          "type": "boolean",
          "description": "A value indicating whether all tokens from the input must be consumed even if maxTokenCount is reached. Default is false."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.LimitTokenFilter"
    },
    "ListAliasesResult": {
      "type": "object",
      "description": "Response from a List Aliases request. If successful, it includes the associated index mappings for all aliases.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The aliases in the Search service.",
          "items": {
            "$ref": "#/definitions/SearchAlias"
          },
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "ListDataSourcesResult": {
      "type": "object",
      "description": "Response from a List Datasources request. If successful, it includes the full definitions of all datasources.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The datasources in the Search service.",
          "items": {
            "$ref": "#/definitions/SearchIndexerDataSource"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "ListIndexStatsSummary": {
      "type": "object",
      "description": "Response from a request to retrieve stats summary of all indexes. If successful, it includes the stats of each index in the service.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Statistics summary of all indexes in the Search service.",
          "items": {
            "$ref": "#/definitions/IndexStatisticsSummary"
          },
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "ListIndexersResult": {
      "type": "object",
      "description": "Response from a List Indexers request. If successful, it includes the full definitions of all indexers.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The indexers in the Search service.",
          "items": {
            "$ref": "#/definitions/SearchIndexer"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "ListIndexesResult": {
      "type": "object",
      "description": "Response from a List Indexes request. If successful, it includes the full definitions of all indexes.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The indexes in the Search service.",
          "items": {
            "$ref": "#/definitions/SearchIndex"
          },
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "ListKnowledgeBasesResult": {
      "type": "object",
      "description": "Result from listing knowledge bases.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The knowledge bases in the service.",
          "items": {
            "$ref": "#/definitions/KnowledgeBase"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "ListKnowledgeSourcesResult": {
      "type": "object",
      "description": "Result from listing knowledge sources.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The knowledge sources in the service.",
          "items": {
            "$ref": "#/definitions/KnowledgeSource"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "ListSkillsetsResult": {
      "type": "object",
      "description": "Response from a list skillset request. If successful, it includes the full definitions of all skillsets.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The skillsets defined in the Search service.",
          "items": {
            "$ref": "#/definitions/SearchIndexerSkillset"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "ListSynonymMapsResult": {
      "type": "object",
      "description": "Response from a List SynonymMaps request. If successful, it includes the full definitions of all synonym maps.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The synonym maps in the Search service.",
          "items": {
            "$ref": "#/definitions/SynonymMap"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "LookupDocument": {
      "type": "object",
      "description": "A document retrieved via a document lookup operation.",
      "additionalProperties": {}
    },
    "LuceneStandardAnalyzer": {
      "type": "object",
      "description": "Standard Apache Lucene analyzer; Composed of the standard tokenizer, lowercase filter and stop filter.",
      "properties": {
        "maxTokenLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum token length. Default is 255. Tokens longer than the maximum length are split. The maximum token length that can be used is 300 characters.",
          "default": 255,
          "maximum": 300
        },
        "stopwords": {
          "type": "array",
          "description": "A list of stopwords.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalAnalyzer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.StandardAnalyzer"
    },
    "LuceneStandardTokenizer": {
      "type": "object",
      "description": "Breaks text following the Unicode Text Segmentation rules. This tokenizer is implemented using Apache Lucene.",
      "properties": {
        "maxTokenLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum token length. Default is 255. Tokens longer than the maximum length are split. The maximum token length that can be used is 300 characters.",
          "default": 255,
          "maximum": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalTokenizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.StandardTokenizerV2"
    },
    "MagnitudeScoringFunction": {
      "type": "object",
      "description": "Defines a function that boosts scores based on the magnitude of a numeric field.",
      "properties": {
        "magnitude": {
          "$ref": "#/definitions/MagnitudeScoringParameters",
          "description": "Parameter values for the magnitude scoring function."
        }
      },
      "required": [
        "magnitude"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ScoringFunction"
        }
      ],
      "x-ms-discriminator-value": "magnitude"
    },
    "MagnitudeScoringParameters": {
      "type": "object",
      "description": "Provides parameter values to a magnitude scoring function.",
      "properties": {
        "boostingRangeStart": {
          "type": "number",
          "format": "double",
          "description": "The field value at which boosting starts."
        },
        "boostingRangeEnd": {
          "type": "number",
          "format": "double",
          "description": "The field value at which boosting ends."
        },
        "constantBoostBeyondRange": {
          "type": "boolean",
          "description": "A value indicating whether to apply a constant boost for field values beyond the range end value; default is false."
        }
      },
      "required": [
        "boostingRangeStart",
        "boostingRangeEnd"
      ]
    },
    "MappingCharFilter": {
      "type": "object",
      "description": "A character filter that applies mappings defined with the mappings option. Matching is greedy (longest pattern matching at a given point wins). Replacement is allowed to be the empty string. This character filter is implemented using Apache Lucene.",
      "properties": {
        "mappings": {
          "type": "array",
          "description": "A list of mappings of the following format: \"a=>b\" (all occurrences of the character \"a\" will be replaced with character \"b\").",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "mappings"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CharFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.MappingCharFilter"
    },
    "MarkdownHeaderDepth": {
      "type": "string",
      "description": "Specifies the max header depth that will be considered while grouping markdown content. Default is `h6`.",
      "enum": [
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6"
      ],
      "x-ms-enum": {
        "name": "MarkdownHeaderDepth",
        "modelAsString": true,
        "values": [
          {
            "name": "h1",
            "value": "h1",
            "description": "Indicates that headers up to a level of h1 will be considered while grouping markdown content."
          },
          {
            "name": "h2",
            "value": "h2",
            "description": "Indicates that headers up to a level of h2 will be considered while grouping markdown content."
          },
          {
            "name": "h3",
            "value": "h3",
            "description": "Indicates that headers up to a level of h3 will be considered while grouping markdown content."
          },
          {
            "name": "h4",
            "value": "h4",
            "description": "Indicates that headers up to a level of h4 will be considered while grouping markdown content."
          },
          {
            "name": "h5",
            "value": "h5",
            "description": "Indicates that headers up to a level of h5 will be considered while grouping markdown content."
          },
          {
            "name": "h6",
            "value": "h6",
            "description": "Indicates that headers up to a level of h6 will be considered while grouping markdown content. This is the default."
          }
        ]
      }
    },
    "MarkdownParsingSubmode": {
      "type": "string",
      "description": "Specifies the submode that will determine whether a markdown file will be parsed into exactly one search document or multiple search documents. Default is `oneToMany`.",
      "enum": [
        "oneToMany",
        "oneToOne"
      ],
      "x-ms-enum": {
        "name": "MarkdownParsingSubmode",
        "modelAsString": true,
        "values": [
          {
            "name": "OneToMany",
            "value": "oneToMany",
            "description": "Indicates that each section of the markdown file (up to a specified depth) will be parsed into individual search documents. This can result in a single markdown file producing multiple search documents. This is the default sub-mode."
          },
          {
            "name": "OneToOne",
            "value": "oneToOne",
            "description": "Indicates that each markdown file will be parsed into a single search document."
          }
        ]
      }
    },
    "MergeSkill": {
      "type": "object",
      "description": "A skill for merging two or more strings into a single unified string, with an optional user-defined delimiter separating each component part.",
      "properties": {
        "insertPreTag": {
          "type": "string",
          "description": "The tag indicates the start of the merged text. By default, the tag is an empty space.",
          "default": " "
        },
        "insertPostTag": {
          "type": "string",
          "description": "The tag indicates the end of the merged text. By default, the tag is an empty space.",
          "default": " "
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.MergeSkill"
    },
    "MicrosoftLanguageStemmingTokenizer": {
      "type": "object",
      "description": "Divides text using language-specific rules and reduces words to their base forms.",
      "properties": {
        "maxTokenLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum token length. Tokens longer than the maximum length are split. Maximum token length that can be used is 300 characters. Tokens longer than 300 characters are first split into tokens of length 300 and then each of those tokens is split based on the max token length set. Default is 255.",
          "default": 255,
          "maximum": 300
        },
        "isSearchTokenizer": {
          "type": "boolean",
          "description": "A value indicating how the tokenizer is used. Set to true if used as the search tokenizer, set to false if used as the indexing tokenizer. Default is false."
        },
        "language": {
          "$ref": "#/definitions/MicrosoftStemmingTokenizerLanguage",
          "description": "The language to use. The default is English."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalTokenizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.MicrosoftLanguageStemmingTokenizer"
    },
    "MicrosoftLanguageTokenizer": {
      "type": "object",
      "description": "Divides text using language-specific rules.",
      "properties": {
        "maxTokenLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum token length. Tokens longer than the maximum length are split. Maximum token length that can be used is 300 characters. Tokens longer than 300 characters are first split into tokens of length 300 and then each of those tokens is split based on the max token length set. Default is 255.",
          "default": 255,
          "maximum": 300
        },
        "isSearchTokenizer": {
          "type": "boolean",
          "description": "A value indicating how the tokenizer is used. Set to true if used as the search tokenizer, set to false if used as the indexing tokenizer. Default is false."
        },
        "language": {
          "$ref": "#/definitions/MicrosoftTokenizerLanguage",
          "description": "The language to use. The default is English."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalTokenizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.MicrosoftLanguageTokenizer"
    },
    "MicrosoftStemmingTokenizerLanguage": {
      "type": "string",
      "description": "Lists the languages supported by the Microsoft language stemming tokenizer.",
      "enum": [
        "arabic",
        "bangla",
        "bulgarian",
        "catalan",
        "croatian",
        "czech",
        "danish",
        "dutch",
        "english",
        "estonian",
        "finnish",
        "french",
        "german",
        "greek",
        "gujarati",
        "hebrew",
        "hindi",
        "hungarian",
        "icelandic",
        "indonesian",
        "italian",
        "kannada",
        "latvian",
        "lithuanian",
        "malay",
        "malayalam",
        "marathi",
        "norwegianBokmaal",
        "polish",
        "portuguese",
        "portugueseBrazilian",
        "punjabi",
        "romanian",
        "russian",
        "serbianCyrillic",
        "serbianLatin",
        "slovak",
        "slovenian",
        "spanish",
        "swedish",
        "tamil",
        "telugu",
        "turkish",
        "ukrainian",
        "urdu"
      ],
      "x-ms-enum": {
        "name": "MicrosoftStemmingTokenizerLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "Arabic",
            "value": "arabic",
            "description": "Selects the Microsoft stemming tokenizer for Arabic."
          },
          {
            "name": "Bangla",
            "value": "bangla",
            "description": "Selects the Microsoft stemming tokenizer for Bangla."
          },
          {
            "name": "Bulgarian",
            "value": "bulgarian",
            "description": "Selects the Microsoft stemming tokenizer for Bulgarian."
          },
          {
            "name": "Catalan",
            "value": "catalan",
            "description": "Selects the Microsoft stemming tokenizer for Catalan."
          },
          {
            "name": "Croatian",
            "value": "croatian",
            "description": "Selects the Microsoft stemming tokenizer for Croatian."
          },
          {
            "name": "Czech",
            "value": "czech",
            "description": "Selects the Microsoft stemming tokenizer for Czech."
          },
          {
            "name": "Danish",
            "value": "danish",
            "description": "Selects the Microsoft stemming tokenizer for Danish."
          },
          {
            "name": "Dutch",
            "value": "dutch",
            "description": "Selects the Microsoft stemming tokenizer for Dutch."
          },
          {
            "name": "English",
            "value": "english",
            "description": "Selects the Microsoft stemming tokenizer for English."
          },
          {
            "name": "Estonian",
            "value": "estonian",
            "description": "Selects the Microsoft stemming tokenizer for Estonian."
          },
          {
            "name": "Finnish",
            "value": "finnish",
            "description": "Selects the Microsoft stemming tokenizer for Finnish."
          },
          {
            "name": "French",
            "value": "french",
            "description": "Selects the Microsoft stemming tokenizer for French."
          },
          {
            "name": "German",
            "value": "german",
            "description": "Selects the Microsoft stemming tokenizer for German."
          },
          {
            "name": "Greek",
            "value": "greek",
            "description": "Selects the Microsoft stemming tokenizer for Greek."
          },
          {
            "name": "Gujarati",
            "value": "gujarati",
            "description": "Selects the Microsoft stemming tokenizer for Gujarati."
          },
          {
            "name": "Hebrew",
            "value": "hebrew",
            "description": "Selects the Microsoft stemming tokenizer for Hebrew."
          },
          {
            "name": "Hindi",
            "value": "hindi",
            "description": "Selects the Microsoft stemming tokenizer for Hindi."
          },
          {
            "name": "Hungarian",
            "value": "hungarian",
            "description": "Selects the Microsoft stemming tokenizer for Hungarian."
          },
          {
            "name": "Icelandic",
            "value": "icelandic",
            "description": "Selects the Microsoft stemming tokenizer for Icelandic."
          },
          {
            "name": "Indonesian",
            "value": "indonesian",
            "description": "Selects the Microsoft stemming tokenizer for Indonesian."
          },
          {
            "name": "Italian",
            "value": "italian",
            "description": "Selects the Microsoft stemming tokenizer for Italian."
          },
          {
            "name": "Kannada",
            "value": "kannada",
            "description": "Selects the Microsoft stemming tokenizer for Kannada."
          },
          {
            "name": "Latvian",
            "value": "latvian",
            "description": "Selects the Microsoft stemming tokenizer for Latvian."
          },
          {
            "name": "Lithuanian",
            "value": "lithuanian",
            "description": "Selects the Microsoft stemming tokenizer for Lithuanian."
          },
          {
            "name": "Malay",
            "value": "malay",
            "description": "Selects the Microsoft stemming tokenizer for Malay."
          },
          {
            "name": "Malayalam",
            "value": "malayalam",
            "description": "Selects the Microsoft stemming tokenizer for Malayalam."
          },
          {
            "name": "Marathi",
            "value": "marathi",
            "description": "Selects the Microsoft stemming tokenizer for Marathi."
          },
          {
            "name": "NorwegianBokmaal",
            "value": "norwegianBokmaal",
            "description": "Selects the Microsoft stemming tokenizer for Norwegian (BokmÃ¥l)."
          },
          {
            "name": "Polish",
            "value": "polish",
            "description": "Selects the Microsoft stemming tokenizer for Polish."
          },
          {
            "name": "Portuguese",
            "value": "portuguese",
            "description": "Selects the Microsoft stemming tokenizer for Portuguese."
          },
          {
            "name": "PortugueseBrazilian",
            "value": "portugueseBrazilian",
            "description": "Selects the Microsoft stemming tokenizer for Portuguese (Brazil)."
          },
          {
            "name": "Punjabi",
            "value": "punjabi",
            "description": "Selects the Microsoft stemming tokenizer for Punjabi."
          },
          {
            "name": "Romanian",
            "value": "romanian",
            "description": "Selects the Microsoft stemming tokenizer for Romanian."
          },
          {
            "name": "Russian",
            "value": "russian",
            "description": "Selects the Microsoft stemming tokenizer for Russian."
          },
          {
            "name": "SerbianCyrillic",
            "value": "serbianCyrillic",
            "description": "Selects the Microsoft stemming tokenizer for Serbian (Cyrillic)."
          },
          {
            "name": "SerbianLatin",
            "value": "serbianLatin",
            "description": "Selects the Microsoft stemming tokenizer for Serbian (Latin)."
          },
          {
            "name": "Slovak",
            "value": "slovak",
            "description": "Selects the Microsoft stemming tokenizer for Slovak."
          },
          {
            "name": "Slovenian",
            "value": "slovenian",
            "description": "Selects the Microsoft stemming tokenizer for Slovenian."
          },
          {
            "name": "Spanish",
            "value": "spanish",
            "description": "Selects the Microsoft stemming tokenizer for Spanish."
          },
          {
            "name": "Swedish",
            "value": "swedish",
            "description": "Selects the Microsoft stemming tokenizer for Swedish."
          },
          {
            "name": "Tamil",
            "value": "tamil",
            "description": "Selects the Microsoft stemming tokenizer for Tamil."
          },
          {
            "name": "Telugu",
            "value": "telugu",
            "description": "Selects the Microsoft stemming tokenizer for Telugu."
          },
          {
            "name": "Turkish",
            "value": "turkish",
            "description": "Selects the Microsoft stemming tokenizer for Turkish."
          },
          {
            "name": "Ukrainian",
            "value": "ukrainian",
            "description": "Selects the Microsoft stemming tokenizer for Ukrainian."
          },
          {
            "name": "Urdu",
            "value": "urdu",
            "description": "Selects the Microsoft stemming tokenizer for Urdu."
          }
        ]
      }
    },
    "MicrosoftTokenizerLanguage": {
      "type": "string",
      "description": "Lists the languages supported by the Microsoft language tokenizer.",
      "enum": [
        "bangla",
        "bulgarian",
        "catalan",
        "chineseSimplified",
        "chineseTraditional",
        "croatian",
        "czech",
        "danish",
        "dutch",
        "english",
        "french",
        "german",
        "greek",
        "gujarati",
        "hindi",
        "icelandic",
        "indonesian",
        "italian",
        "japanese",
        "kannada",
        "korean",
        "malay",
        "malayalam",
        "marathi",
        "norwegianBokmaal",
        "polish",
        "portuguese",
        "portugueseBrazilian",
        "punjabi",
        "romanian",
        "russian",
        "serbianCyrillic",
        "serbianLatin",
        "slovenian",
        "spanish",
        "swedish",
        "tamil",
        "telugu",
        "thai",
        "ukrainian",
        "urdu",
        "vietnamese"
      ],
      "x-ms-enum": {
        "name": "MicrosoftTokenizerLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "Bangla",
            "value": "bangla",
            "description": "Selects the Microsoft tokenizer for Bangla."
          },
          {
            "name": "Bulgarian",
            "value": "bulgarian",
            "description": "Selects the Microsoft tokenizer for Bulgarian."
          },
          {
            "name": "Catalan",
            "value": "catalan",
            "description": "Selects the Microsoft tokenizer for Catalan."
          },
          {
            "name": "ChineseSimplified",
            "value": "chineseSimplified",
            "description": "Selects the Microsoft tokenizer for Chinese (Simplified)."
          },
          {
            "name": "ChineseTraditional",
            "value": "chineseTraditional",
            "description": "Selects the Microsoft tokenizer for Chinese (Traditional)."
          },
          {
            "name": "Croatian",
            "value": "croatian",
            "description": "Selects the Microsoft tokenizer for Croatian."
          },
          {
            "name": "Czech",
            "value": "czech",
            "description": "Selects the Microsoft tokenizer for Czech."
          },
          {
            "name": "Danish",
            "value": "danish",
            "description": "Selects the Microsoft tokenizer for Danish."
          },
          {
            "name": "Dutch",
            "value": "dutch",
            "description": "Selects the Microsoft tokenizer for Dutch."
          },
          {
            "name": "English",
            "value": "english",
            "description": "Selects the Microsoft tokenizer for English."
          },
          {
            "name": "French",
            "value": "french",
            "description": "Selects the Microsoft tokenizer for French."
          },
          {
            "name": "German",
            "value": "german",
            "description": "Selects the Microsoft tokenizer for German."
          },
          {
            "name": "Greek",
            "value": "greek",
            "description": "Selects the Microsoft tokenizer for Greek."
          },
          {
            "name": "Gujarati",
            "value": "gujarati",
            "description": "Selects the Microsoft tokenizer for Gujarati."
          },
          {
            "name": "Hindi",
            "value": "hindi",
            "description": "Selects the Microsoft tokenizer for Hindi."
          },
          {
            "name": "Icelandic",
            "value": "icelandic",
            "description": "Selects the Microsoft tokenizer for Icelandic."
          },
          {
            "name": "Indonesian",
            "value": "indonesian",
            "description": "Selects the Microsoft tokenizer for Indonesian."
          },
          {
            "name": "Italian",
            "value": "italian",
            "description": "Selects the Microsoft tokenizer for Italian."
          },
          {
            "name": "Japanese",
            "value": "japanese",
            "description": "Selects the Microsoft tokenizer for Japanese."
          },
          {
            "name": "Kannada",
            "value": "kannada",
            "description": "Selects the Microsoft tokenizer for Kannada."
          },
          {
            "name": "Korean",
            "value": "korean",
            "description": "Selects the Microsoft tokenizer for Korean."
          },
          {
            "name": "Malay",
            "value": "malay",
            "description": "Selects the Microsoft tokenizer for Malay."
          },
          {
            "name": "Malayalam",
            "value": "malayalam",
            "description": "Selects the Microsoft tokenizer for Malayalam."
          },
          {
            "name": "Marathi",
            "value": "marathi",
            "description": "Selects the Microsoft tokenizer for Marathi."
          },
          {
            "name": "NorwegianBokmaal",
            "value": "norwegianBokmaal",
            "description": "Selects the Microsoft tokenizer for Norwegian (BokmÃ¥l)."
          },
          {
            "name": "Polish",
            "value": "polish",
            "description": "Selects the Microsoft tokenizer for Polish."
          },
          {
            "name": "Portuguese",
            "value": "portuguese",
            "description": "Selects the Microsoft tokenizer for Portuguese."
          },
          {
            "name": "PortugueseBrazilian",
            "value": "portugueseBrazilian",
            "description": "Selects the Microsoft tokenizer for Portuguese (Brazil)."
          },
          {
            "name": "Punjabi",
            "value": "punjabi",
            "description": "Selects the Microsoft tokenizer for Punjabi."
          },
          {
            "name": "Romanian",
            "value": "romanian",
            "description": "Selects the Microsoft tokenizer for Romanian."
          },
          {
            "name": "Russian",
            "value": "russian",
            "description": "Selects the Microsoft tokenizer for Russian."
          },
          {
            "name": "SerbianCyrillic",
            "value": "serbianCyrillic",
            "description": "Selects the Microsoft tokenizer for Serbian (Cyrillic)."
          },
          {
            "name": "SerbianLatin",
            "value": "serbianLatin",
            "description": "Selects the Microsoft tokenizer for Serbian (Latin)."
          },
          {
            "name": "Slovenian",
            "value": "slovenian",
            "description": "Selects the Microsoft tokenizer for Slovenian."
          },
          {
            "name": "Spanish",
            "value": "spanish",
            "description": "Selects the Microsoft tokenizer for Spanish."
          },
          {
            "name": "Swedish",
            "value": "swedish",
            "description": "Selects the Microsoft tokenizer for Swedish."
          },
          {
            "name": "Tamil",
            "value": "tamil",
            "description": "Selects the Microsoft tokenizer for Tamil."
          },
          {
            "name": "Telugu",
            "value": "telugu",
            "description": "Selects the Microsoft tokenizer for Telugu."
          },
          {
            "name": "Thai",
            "value": "thai",
            "description": "Selects the Microsoft tokenizer for Thai."
          },
          {
            "name": "Ukrainian",
            "value": "ukrainian",
            "description": "Selects the Microsoft tokenizer for Ukrainian."
          },
          {
            "name": "Urdu",
            "value": "urdu",
            "description": "Selects the Microsoft tokenizer for Urdu."
          },
          {
            "name": "Vietnamese",
            "value": "vietnamese",
            "description": "Selects the Microsoft tokenizer for Vietnamese."
          }
        ]
      }
    },
    "NGramTokenFilter": {
      "type": "object",
      "description": "Generates n-grams of the given size(s). This token filter is implemented using Apache Lucene.",
      "properties": {
        "minGram": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum n-gram length. Default is 1. Maximum is 300. Must be less than the value of maxGram.",
          "default": 1,
          "maximum": 300
        },
        "maxGram": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum n-gram length. Default is 2. Maximum is 300.",
          "default": 2,
          "maximum": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.NGramTokenFilterV2"
    },
    "NGramTokenizer": {
      "type": "object",
      "description": "Tokenizes the input into n-grams of the given size(s). This tokenizer is implemented using Apache Lucene.",
      "properties": {
        "minGram": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum n-gram length. Default is 1. Maximum is 300. Must be less than the value of maxGram.",
          "default": 1,
          "maximum": 300
        },
        "maxGram": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum n-gram length. Default is 2. Maximum is 300.",
          "default": 2,
          "maximum": 300
        },
        "tokenChars": {
          "type": "array",
          "description": "Character classes to keep in the tokens.",
          "items": {
            "$ref": "#/definitions/TokenCharacterKind"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalTokenizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.NGramTokenizer"
    },
    "NativeBlobSoftDeleteDeletionDetectionPolicy": {
      "type": "object",
      "description": "Defines a data deletion detection policy utilizing Azure Blob Storage's native soft delete feature for deletion detection.",
      "allOf": [
        {
          "$ref": "#/definitions/DataDeletionDetectionPolicy"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.NativeBlobSoftDeleteDeletionDetectionPolicy"
    },
    "OcrLineEnding": {
      "type": "string",
      "description": "Defines the sequence of characters to use between the lines of text recognized by the OCR skill. The default value is \"space\".",
      "enum": [
        "space",
        "carriageReturn",
        "lineFeed",
        "carriageReturnLineFeed"
      ],
      "x-ms-enum": {
        "name": "OcrLineEnding",
        "modelAsString": true,
        "values": [
          {
            "name": "Space",
            "value": "space",
            "description": "Lines are separated by a single space character."
          },
          {
            "name": "CarriageReturn",
            "value": "carriageReturn",
            "description": "Lines are separated by a carriage return ('\r') character."
          },
          {
            "name": "LineFeed",
            "value": "lineFeed",
            "description": "Lines are separated by a single line feed ('\n') character."
          },
          {
            "name": "CarriageReturnLineFeed",
            "value": "carriageReturnLineFeed",
            "description": "Lines are separated by a carriage return and a line feed ('\r\n') character."
          }
        ]
      }
    },
    "OcrSkill": {
      "type": "object",
      "description": "A skill that extracts text from image files.",
      "properties": {
        "defaultLanguageCode": {
          "$ref": "#/definitions/OcrSkillLanguage",
          "description": "A value indicating which language code to use. Default is `en`."
        },
        "detectOrientation": {
          "type": "boolean",
          "description": "A value indicating to turn orientation detection on or not. Default is false."
        },
        "lineEnding": {
          "$ref": "#/definitions/OcrLineEnding",
          "description": "Defines the sequence of characters to use between the lines of text recognized by the OCR skill. The default value is \"space\"."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Vision.OcrSkill"
    },
    "OcrSkillLanguage": {
      "type": "string",
      "description": "The language codes supported for input by OcrSkill.",
      "enum": [
        "af",
        "sq",
        "anp",
        "ar",
        "ast",
        "awa",
        "az",
        "bfy",
        "eu",
        "be",
        "be-cyrl",
        "be-latn",
        "bho",
        "bi",
        "brx",
        "bs",
        "bra",
        "br",
        "bg",
        "bns",
        "bua",
        "ca",
        "ceb",
        "rab",
        "ch",
        "hne",
        "zh-Hans",
        "zh-Hant",
        "kw",
        "co",
        "crh",
        "hr",
        "cs",
        "da",
        "prs",
        "dhi",
        "doi",
        "nl",
        "en",
        "myv",
        "et",
        "fo",
        "fj",
        "fil",
        "fi",
        "fr",
        "fur",
        "gag",
        "gl",
        "de",
        "gil",
        "gon",
        "el",
        "kl",
        "gvr",
        "ht",
        "hlb",
        "hni",
        "bgc",
        "haw",
        "hi",
        "mww",
        "hoc",
        "hu",
        "is",
        "smn",
        "id",
        "ia",
        "iu",
        "ga",
        "it",
        "ja",
        "Jns",
        "jv",
        "kea",
        "kac",
        "xnr",
        "krc",
        "kaa-cyrl",
        "kaa",
        "csb",
        "kk-cyrl",
        "kk-latn",
        "klr",
        "kha",
        "quc",
        "ko",
        "kfq",
        "kpy",
        "kos",
        "kum",
        "ku-arab",
        "ku-latn",
        "kru",
        "ky",
        "lkt",
        "la",
        "lt",
        "dsb",
        "smj",
        "lb",
        "bfz",
        "ms",
        "mt",
        "kmj",
        "gv",
        "mi",
        "mr",
        "mn",
        "cnr-cyrl",
        "cnr-latn",
        "nap",
        "ne",
        "niu",
        "nog",
        "sme",
        "nb",
        "no",
        "oc",
        "os",
        "ps",
        "fa",
        "pl",
        "pt",
        "pa",
        "ksh",
        "ro",
        "rm",
        "ru",
        "sck",
        "sm",
        "sa",
        "sat",
        "sco",
        "gd",
        "sr",
        "sr-Cyrl",
        "sr-Latn",
        "xsr",
        "srx",
        "sms",
        "sk",
        "sl",
        "so",
        "sma",
        "es",
        "sw",
        "sv",
        "tg",
        "tt",
        "tet",
        "thf",
        "to",
        "tr",
        "tk",
        "tyv",
        "hsb",
        "ur",
        "ug",
        "uz-arab",
        "uz-cyrl",
        "uz",
        "vo",
        "wae",
        "cy",
        "fy",
        "yua",
        "za",
        "zu",
        "unk"
      ],
      "x-ms-enum": {
        "name": "OcrSkillLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "af",
            "value": "af",
            "description": "Afrikaans"
          },
          {
            "name": "sq",
            "value": "sq",
            "description": "Albanian"
          },
          {
            "name": "anp",
            "value": "anp",
            "description": "Angika (Devanagiri)"
          },
          {
            "name": "ar",
            "value": "ar",
            "description": "Arabic"
          },
          {
            "name": "ast",
            "value": "ast",
            "description": "Asturian"
          },
          {
            "name": "awa",
            "value": "awa",
            "description": "Awadhi-Hindi (Devanagiri)"
          },
          {
            "name": "az",
            "value": "az",
            "description": "Azerbaijani (Latin)"
          },
          {
            "name": "bfy",
            "value": "bfy",
            "description": "Bagheli"
          },
          {
            "name": "eu",
            "value": "eu",
            "description": "Basque"
          },
          {
            "name": "be",
            "value": "be",
            "description": "Belarusian (Cyrillic and Latin)"
          },
          {
            "name": "be-cyrl",
            "value": "be-cyrl",
            "description": "Belarusian (Cyrillic)"
          },
          {
            "name": "be-latn",
            "value": "be-latn",
            "description": "Belarusian (Latin)"
          },
          {
            "name": "bho",
            "value": "bho",
            "description": "Bhojpuri-Hindi (Devanagiri)"
          },
          {
            "name": "bi",
            "value": "bi",
            "description": "Bislama"
          },
          {
            "name": "brx",
            "value": "brx",
            "description": "Bodo (Devanagiri)"
          },
          {
            "name": "bs",
            "value": "bs",
            "description": "Bosnian Latin"
          },
          {
            "name": "bra",
            "value": "bra",
            "description": "Brajbha"
          },
          {
            "name": "br",
            "value": "br",
            "description": "Breton"
          },
          {
            "name": "bg",
            "value": "bg",
            "description": "Bulgarian"
          },
          {
            "name": "bns",
            "value": "bns",
            "description": "Bundeli"
          },
          {
            "name": "bua",
            "value": "bua",
            "description": "Buryat (Cyrillic)"
          },
          {
            "name": "ca",
            "value": "ca",
            "description": "Catalan"
          },
          {
            "name": "ceb",
            "value": "ceb",
            "description": "Cebuano"
          },
          {
            "name": "rab",
            "value": "rab",
            "description": "Chamling"
          },
          {
            "name": "ch",
            "value": "ch",
            "description": "Chamorro"
          },
          {
            "name": "hne",
            "value": "hne",
            "description": "Chhattisgarhi (Devanagiri)"
          },
          {
            "name": "zh-Hans",
            "value": "zh-Hans",
            "description": "Chinese Simplified"
          },
          {
            "name": "zh-Hant",
            "value": "zh-Hant",
            "description": "Chinese Traditional"
          },
          {
            "name": "kw",
            "value": "kw",
            "description": "Cornish"
          },
          {
            "name": "co",
            "value": "co",
            "description": "Corsican"
          },
          {
            "name": "crh",
            "value": "crh",
            "description": "Crimean Tatar (Latin)"
          },
          {
            "name": "hr",
            "value": "hr",
            "description": "Croatian"
          },
          {
            "name": "cs",
            "value": "cs",
            "description": "Czech"
          },
          {
            "name": "da",
            "value": "da",
            "description": "Danish"
          },
          {
            "name": "prs",
            "value": "prs",
            "description": "Dari"
          },
          {
            "name": "dhi",
            "value": "dhi",
            "description": "Dhimal (Devanagiri)"
          },
          {
            "name": "doi",
            "value": "doi",
            "description": "Dogri (Devanagiri)"
          },
          {
            "name": "nl",
            "value": "nl",
            "description": "Dutch"
          },
          {
            "name": "en",
            "value": "en",
            "description": "English"
          },
          {
            "name": "myv",
            "value": "myv",
            "description": "Erzya (Cyrillic)"
          },
          {
            "name": "et",
            "value": "et",
            "description": "Estonian"
          },
          {
            "name": "fo",
            "value": "fo",
            "description": "Faroese"
          },
          {
            "name": "fj",
            "value": "fj",
            "description": "Fijian"
          },
          {
            "name": "fil",
            "value": "fil",
            "description": "Filipino"
          },
          {
            "name": "fi",
            "value": "fi",
            "description": "Finnish"
          },
          {
            "name": "fr",
            "value": "fr",
            "description": "French"
          },
          {
            "name": "fur",
            "value": "fur",
            "description": "Frulian"
          },
          {
            "name": "gag",
            "value": "gag",
            "description": "Gagauz (Latin)"
          },
          {
            "name": "gl",
            "value": "gl",
            "description": "Galician"
          },
          {
            "name": "de",
            "value": "de",
            "description": "German"
          },
          {
            "name": "gil",
            "value": "gil",
            "description": "Gilbertese"
          },
          {
            "name": "gon",
            "value": "gon",
            "description": "Gondi (Devanagiri)"
          },
          {
            "name": "el",
            "value": "el",
            "description": "Greek"
          },
          {
            "name": "kl",
            "value": "kl",
            "description": "Greenlandic"
          },
          {
            "name": "gvr",
            "value": "gvr",
            "description": "Gurung (Devanagiri)"
          },
          {
            "name": "ht",
            "value": "ht",
            "description": "Haitian Creole"
          },
          {
            "name": "hlb",
            "value": "hlb",
            "description": "Halbi (Devanagiri)"
          },
          {
            "name": "hni",
            "value": "hni",
            "description": "Hani"
          },
          {
            "name": "bgc",
            "value": "bgc",
            "description": "Haryanvi"
          },
          {
            "name": "haw",
            "value": "haw",
            "description": "Hawaiian"
          },
          {
            "name": "hi",
            "value": "hi",
            "description": "Hindi"
          },
          {
            "name": "mww",
            "value": "mww",
            "description": "Hmong Daw (Latin)"
          },
          {
            "name": "hoc",
            "value": "hoc",
            "description": "Ho (Devanagiri)"
          },
          {
            "name": "hu",
            "value": "hu",
            "description": "Hungarian"
          },
          {
            "name": "is",
            "value": "is",
            "description": "Icelandic"
          },
          {
            "name": "smn",
            "value": "smn",
            "description": "Inari Sami"
          },
          {
            "name": "id",
            "value": "id",
            "description": "Indonesian"
          },
          {
            "name": "ia",
            "value": "ia",
            "description": "Interlingua"
          },
          {
            "name": "iu",
            "value": "iu",
            "description": "Inuktitut (Latin)"
          },
          {
            "name": "ga",
            "value": "ga",
            "description": "Irish"
          },
          {
            "name": "it",
            "value": "it",
            "description": "Italian"
          },
          {
            "name": "ja",
            "value": "ja",
            "description": "Japanese"
          },
          {
            "name": "Jns",
            "value": "Jns",
            "description": "Jaunsari (Devanagiri)"
          },
          {
            "name": "jv",
            "value": "jv",
            "description": "Javanese"
          },
          {
            "name": "kea",
            "value": "kea",
            "description": "Kabuverdianu"
          },
          {
            "name": "kac",
            "value": "kac",
            "description": "Kachin (Latin)"
          },
          {
            "name": "xnr",
            "value": "xnr",
            "description": "Kangri (Devanagiri)"
          },
          {
            "name": "krc",
            "value": "krc",
            "description": "Karachay-Balkar"
          },
          {
            "name": "kaa-cyrl",
            "value": "kaa-cyrl",
            "description": "Kara-Kalpak (Cyrillic)"
          },
          {
            "name": "kaa",
            "value": "kaa",
            "description": "Kara-Kalpak (Latin)"
          },
          {
            "name": "csb",
            "value": "csb",
            "description": "Kashubian"
          },
          {
            "name": "kk-cyrl",
            "value": "kk-cyrl",
            "description": "Kazakh (Cyrillic)"
          },
          {
            "name": "kk-latn",
            "value": "kk-latn",
            "description": "Kazakh (Latin)"
          },
          {
            "name": "klr",
            "value": "klr",
            "description": "Khaling"
          },
          {
            "name": "kha",
            "value": "kha",
            "description": "Khasi"
          },
          {
            "name": "quc",
            "value": "quc",
            "description": "K'iche'"
          },
          {
            "name": "ko",
            "value": "ko",
            "description": "Korean"
          },
          {
            "name": "kfq",
            "value": "kfq",
            "description": "Korku"
          },
          {
            "name": "kpy",
            "value": "kpy",
            "description": "Koryak"
          },
          {
            "name": "kos",
            "value": "kos",
            "description": "Kosraean"
          },
          {
            "name": "kum",
            "value": "kum",
            "description": "Kumyk (Cyrillic)"
          },
          {
            "name": "ku-arab",
            "value": "ku-arab",
            "description": "Kurdish (Arabic)"
          },
          {
            "name": "ku-latn",
            "value": "ku-latn",
            "description": "Kurdish (Latin)"
          },
          {
            "name": "kru",
            "value": "kru",
            "description": "Kurukh (Devanagiri)"
          },
          {
            "name": "ky",
            "value": "ky",
            "description": "Kyrgyz (Cyrillic)"
          },
          {
            "name": "lkt",
            "value": "lkt",
            "description": "Lakota"
          },
          {
            "name": "la",
            "value": "la",
            "description": "Latin"
          },
          {
            "name": "lt",
            "value": "lt",
            "description": "Lithuanian"
          },
          {
            "name": "dsb",
            "value": "dsb",
            "description": "Lower Sorbian"
          },
          {
            "name": "smj",
            "value": "smj",
            "description": "Lule Sami"
          },
          {
            "name": "lb",
            "value": "lb",
            "description": "Luxembourgish"
          },
          {
            "name": "bfz",
            "value": "bfz",
            "description": "Mahasu Pahari (Devanagiri)"
          },
          {
            "name": "ms",
            "value": "ms",
            "description": "Malay (Latin)"
          },
          {
            "name": "mt",
            "value": "mt",
            "description": "Maltese"
          },
          {
            "name": "kmj",
            "value": "kmj",
            "description": "Malto (Devanagiri)"
          },
          {
            "name": "gv",
            "value": "gv",
            "description": "Manx"
          },
          {
            "name": "mi",
            "value": "mi",
            "description": "Maori"
          },
          {
            "name": "mr",
            "value": "mr",
            "description": "Marathi"
          },
          {
            "name": "mn",
            "value": "mn",
            "description": "Mongolian (Cyrillic)"
          },
          {
            "name": "cnr-cyrl",
            "value": "cnr-cyrl",
            "description": "Montenegrin (Cyrillic)"
          },
          {
            "name": "cnr-latn",
            "value": "cnr-latn",
            "description": "Montenegrin (Latin)"
          },
          {
            "name": "nap",
            "value": "nap",
            "description": "Neapolitan"
          },
          {
            "name": "ne",
            "value": "ne",
            "description": "Nepali"
          },
          {
            "name": "niu",
            "value": "niu",
            "description": "Niuean"
          },
          {
            "name": "nog",
            "value": "nog",
            "description": "Nogay"
          },
          {
            "name": "sme",
            "value": "sme",
            "description": "Northern Sami (Latin)"
          },
          {
            "name": "nb",
            "value": "nb",
            "description": "Norwegian"
          },
          {
            "name": "no",
            "value": "no",
            "description": "Norwegian"
          },
          {
            "name": "oc",
            "value": "oc",
            "description": "Occitan"
          },
          {
            "name": "os",
            "value": "os",
            "description": "Ossetic"
          },
          {
            "name": "ps",
            "value": "ps",
            "description": "Pashto"
          },
          {
            "name": "fa",
            "value": "fa",
            "description": "Persian"
          },
          {
            "name": "pl",
            "value": "pl",
            "description": "Polish"
          },
          {
            "name": "pt",
            "value": "pt",
            "description": "Portuguese"
          },
          {
            "name": "pa",
            "value": "pa",
            "description": "Punjabi (Arabic)"
          },
          {
            "name": "ksh",
            "value": "ksh",
            "description": "Ripuarian"
          },
          {
            "name": "ro",
            "value": "ro",
            "description": "Romanian"
          },
          {
            "name": "rm",
            "value": "rm",
            "description": "Romansh"
          },
          {
            "name": "ru",
            "value": "ru",
            "description": "Russian"
          },
          {
            "name": "sck",
            "value": "sck",
            "description": "Sadri (Devanagiri)"
          },
          {
            "name": "sm",
            "value": "sm",
            "description": "Samoan (Latin)"
          },
          {
            "name": "sa",
            "value": "sa",
            "description": "Sanskrit (Devanagiri)"
          },
          {
            "name": "sat",
            "value": "sat",
            "description": "Santali (Devanagiri)"
          },
          {
            "name": "sco",
            "value": "sco",
            "description": "Scots"
          },
          {
            "name": "gd",
            "value": "gd",
            "description": "Scottish Gaelic"
          },
          {
            "name": "sr",
            "value": "sr",
            "description": "Serbian (Latin)"
          },
          {
            "name": "sr-Cyrl",
            "value": "sr-Cyrl",
            "description": "Serbian (Cyrillic)"
          },
          {
            "name": "sr-Latn",
            "value": "sr-Latn",
            "description": "Serbian (Latin)"
          },
          {
            "name": "xsr",
            "value": "xsr",
            "description": "Sherpa (Devanagiri)"
          },
          {
            "name": "srx",
            "value": "srx",
            "description": "Sirmauri (Devanagiri)"
          },
          {
            "name": "sms",
            "value": "sms",
            "description": "Skolt Sami"
          },
          {
            "name": "sk",
            "value": "sk",
            "description": "Slovak"
          },
          {
            "name": "sl",
            "value": "sl",
            "description": "Slovenian"
          },
          {
            "name": "so",
            "value": "so",
            "description": "Somali (Arabic)"
          },
          {
            "name": "sma",
            "value": "sma",
            "description": "Southern Sami"
          },
          {
            "name": "es",
            "value": "es",
            "description": "Spanish"
          },
          {
            "name": "sw",
            "value": "sw",
            "description": "Swahili (Latin)"
          },
          {
            "name": "sv",
            "value": "sv",
            "description": "Swedish"
          },
          {
            "name": "tg",
            "value": "tg",
            "description": "Tajik (Cyrillic)"
          },
          {
            "name": "tt",
            "value": "tt",
            "description": "Tatar (Latin)"
          },
          {
            "name": "tet",
            "value": "tet",
            "description": "Tetum"
          },
          {
            "name": "thf",
            "value": "thf",
            "description": "Thangmi"
          },
          {
            "name": "to",
            "value": "to",
            "description": "Tongan"
          },
          {
            "name": "tr",
            "value": "tr",
            "description": "Turkish"
          },
          {
            "name": "tk",
            "value": "tk",
            "description": "Turkmen (Latin)"
          },
          {
            "name": "tyv",
            "value": "tyv",
            "description": "Tuvan"
          },
          {
            "name": "hsb",
            "value": "hsb",
            "description": "Upper Sorbian"
          },
          {
            "name": "ur",
            "value": "ur",
            "description": "Urdu"
          },
          {
            "name": "ug",
            "value": "ug",
            "description": "Uyghur (Arabic)"
          },
          {
            "name": "uz-arab",
            "value": "uz-arab",
            "description": "Uzbek (Arabic)"
          },
          {
            "name": "uz-cyrl",
            "value": "uz-cyrl",
            "description": "Uzbek (Cyrillic)"
          },
          {
            "name": "uz",
            "value": "uz",
            "description": "Uzbek (Latin)"
          },
          {
            "name": "vo",
            "value": "vo",
            "description": "VolapÃ¼k"
          },
          {
            "name": "wae",
            "value": "wae",
            "description": "Walser"
          },
          {
            "name": "cy",
            "value": "cy",
            "description": "Welsh"
          },
          {
            "name": "fy",
            "value": "fy",
            "description": "Western Frisian"
          },
          {
            "name": "yua",
            "value": "yua",
            "description": "Yucatec Maya"
          },
          {
            "name": "za",
            "value": "za",
            "description": "Zhuang"
          },
          {
            "name": "zu",
            "value": "zu",
            "description": "Zulu"
          },
          {
            "name": "unk",
            "value": "unk",
            "description": "Unknown (All)"
          }
        ]
      }
    },
    "OutputFieldMappingEntry": {
      "type": "object",
      "description": "Output field mapping for a skill.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the output defined by the skill."
        },
        "targetName": {
          "type": "string",
          "description": "The target name of the output. It is optional and default to name."
        }
      },
      "required": [
        "name"
      ]
    },
    "PIIDetectionSkill": {
      "type": "object",
      "description": "Using the Text Analytics API, extracts personal information from an input text and gives you the option of masking it.",
      "properties": {
        "defaultLanguageCode": {
          "type": "string",
          "description": "A value indicating which language code to use. Default is `en`."
        },
        "minimumPrecision": {
          "type": "number",
          "format": "double",
          "description": "A value between 0 and 1 that be used to only include entities whose confidence score is greater than the value specified. If not set (default), or if explicitly set to null, all entities will be included.",
          "maximum": 1
        },
        "maskingMode": {
          "$ref": "#/definitions/PIIDetectionSkillMaskingMode",
          "description": "A parameter that provides various ways to mask the personal information detected in the input text. Default is 'none'."
        },
        "maskingCharacter": {
          "type": "string",
          "description": "The character used to mask the text if the maskingMode parameter is set to replace. Default is '*'.",
          "maxLength": 1
        },
        "modelVersion": {
          "type": "string",
          "description": "The version of the model to use when calling the Text Analytics service. It will default to the latest available when not specified. We recommend you do not specify this value unless absolutely necessary."
        },
        "piiCategories": {
          "type": "array",
          "description": "A list of PII entity categories that should be extracted and masked.",
          "items": {
            "type": "string"
          }
        },
        "domain": {
          "type": "string",
          "description": "If specified, will set the PII domain to include only a subset of the entity categories. Possible values include: 'phi', 'none'. Default is 'none'."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.PIIDetectionSkill"
    },
    "PIIDetectionSkillMaskingMode": {
      "type": "string",
      "description": "A string indicating what maskingMode to use to mask the personal information detected in the input text.",
      "enum": [
        "none",
        "replace"
      ],
      "x-ms-enum": {
        "name": "PIIDetectionSkillMaskingMode",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "No masking occurs and the maskedText output will not be returned."
          },
          {
            "name": "Replace",
            "value": "replace",
            "description": "Replaces the detected entities with the character given in the maskingCharacter parameter. The character will be repeated to the length of the detected entity so that the offsets will correctly correspond to both the input text as well as the output maskedText."
          }
        ]
      }
    },
    "PathHierarchyTokenizer": {
      "type": "object",
      "description": "Tokenizer for path-like hierarchies. This tokenizer is implemented using Apache Lucene.",
      "properties": {
        "delimiter": {
          "type": "string",
          "description": "The delimiter character to use. Default is \"/\".",
          "default": "/"
        },
        "replacement": {
          "type": "string",
          "description": "A value that, if set, replaces the delimiter character. Default is \"/\".",
          "default": "/"
        },
        "maxTokenLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum token length. Default and maximum is 300.",
          "default": 300,
          "maximum": 300
        },
        "reverse": {
          "type": "boolean",
          "description": "A value indicating whether to generate tokens in reverse order. Default is false."
        },
        "skip": {
          "type": "integer",
          "format": "int32",
          "description": "The number of initial tokens to skip. Default is 0."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalTokenizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.PathHierarchyTokenizerV2"
    },
    "PatternAnalyzer": {
      "type": "object",
      "description": "Flexibly separates text into terms via a regular expression pattern. This analyzer is implemented using Apache Lucene.",
      "properties": {
        "lowercase": {
          "type": "boolean",
          "description": "A value indicating whether terms should be lower-cased. Default is true.",
          "default": true
        },
        "pattern": {
          "type": "string",
          "description": "A regular expression pattern to match token separators. Default is an expression that matches one or more non-word characters.",
          "default": "\\W+"
        },
        "flags": {
          "$ref": "#/definitions/RegexFlags",
          "description": "Regular expression flags."
        },
        "stopwords": {
          "type": "array",
          "description": "A list of stopwords.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalAnalyzer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.PatternAnalyzer"
    },
    "PatternCaptureTokenFilter": {
      "type": "object",
      "description": "Uses Java regexes to emit multiple tokens - one for each capture group in one or more patterns. This token filter is implemented using Apache Lucene.",
      "properties": {
        "patterns": {
          "type": "array",
          "description": "A list of patterns to match against each token.",
          "items": {
            "type": "string"
          }
        },
        "preserveOriginal": {
          "type": "boolean",
          "description": "A value indicating whether to return the original token even if one of the patterns matches. Default is true.",
          "default": true
        }
      },
      "required": [
        "patterns"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.PatternCaptureTokenFilter"
    },
    "PatternReplaceCharFilter": {
      "type": "object",
      "description": "A character filter that replaces characters in the input string. It uses a regular expression to identify character sequences to preserve and a replacement pattern to identify characters to replace. For example, given the input text \"aa bb aa bb\", pattern \"(aa)\\s+(bb)\", and replacement \"$1#$2\", the result would be \"aa#bb aa#bb\". This character filter is implemented using Apache Lucene.",
      "properties": {
        "pattern": {
          "type": "string",
          "description": "A regular expression pattern."
        },
        "replacement": {
          "type": "string",
          "description": "The replacement text."
        }
      },
      "required": [
        "pattern",
        "replacement"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/CharFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.PatternReplaceCharFilter"
    },
    "PatternReplaceTokenFilter": {
      "type": "object",
      "description": "A character filter that replaces characters in the input string. It uses a regular expression to identify character sequences to preserve and a replacement pattern to identify characters to replace. For example, given the input text \"aa bb aa bb\", pattern \"(aa)\\s+(bb)\", and replacement \"$1#$2\", the result would be \"aa#bb aa#bb\". This token filter is implemented using Apache Lucene.",
      "properties": {
        "pattern": {
          "type": "string",
          "description": "A regular expression pattern."
        },
        "replacement": {
          "type": "string",
          "description": "The replacement text."
        }
      },
      "required": [
        "pattern",
        "replacement"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.PatternReplaceTokenFilter"
    },
    "PatternTokenizer": {
      "type": "object",
      "description": "Tokenizer that uses regex pattern matching to construct distinct tokens. This tokenizer is implemented using Apache Lucene.",
      "properties": {
        "pattern": {
          "type": "string",
          "description": "A regular expression pattern to match token separators. Default is an expression that matches one or more non-word characters.",
          "default": "\\W+"
        },
        "flags": {
          "$ref": "#/definitions/RegexFlags",
          "description": "Regular expression flags."
        },
        "group": {
          "type": "integer",
          "format": "int32",
          "description": "The zero-based ordinal of the matching group in the regular expression pattern to extract into tokens. Use -1 if you want to use the entire pattern to split the input into tokens, irrespective of matching groups. Default is -1.",
          "default": -1
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalTokenizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.PatternTokenizer"
    },
    "PermissionFilter": {
      "type": "string",
      "description": "A value indicating whether the field should be used as a permission filter.",
      "enum": [
        "userIds",
        "groupIds",
        "rbacScope"
      ],
      "x-ms-enum": {
        "name": "PermissionFilter",
        "modelAsString": true,
        "values": [
          {
            "name": "UserIds",
            "value": "userIds",
            "description": "Field represents user IDs that should be used to filter document access on queries."
          },
          {
            "name": "GroupIds",
            "value": "groupIds",
            "description": "Field represents group IDs that should be used to filter document access on queries."
          },
          {
            "name": "RbacScope",
            "value": "rbacScope",
            "description": "Field represents an RBAC scope that should be used to filter document access on queries."
          }
        ]
      }
    },
    "PhoneticEncoder": {
      "type": "string",
      "description": "Identifies the type of phonetic encoder to use with a PhoneticTokenFilter.",
      "enum": [
        "metaphone",
        "doubleMetaphone",
        "soundex",
        "refinedSoundex",
        "caverphone1",
        "caverphone2",
        "cologne",
        "nysiis",
        "koelnerPhonetik",
        "haasePhonetik",
        "beiderMorse"
      ],
      "x-ms-enum": {
        "name": "PhoneticEncoder",
        "modelAsString": true,
        "values": [
          {
            "name": "Metaphone",
            "value": "metaphone",
            "description": "Encodes a token into a Metaphone value."
          },
          {
            "name": "DoubleMetaphone",
            "value": "doubleMetaphone",
            "description": "Encodes a token into a double metaphone value."
          },
          {
            "name": "Soundex",
            "value": "soundex",
            "description": "Encodes a token into a Soundex value."
          },
          {
            "name": "RefinedSoundex",
            "value": "refinedSoundex",
            "description": "Encodes a token into a Refined Soundex value."
          },
          {
            "name": "Caverphone1",
            "value": "caverphone1",
            "description": "Encodes a token into a Caverphone 1.0 value."
          },
          {
            "name": "Caverphone2",
            "value": "caverphone2",
            "description": "Encodes a token into a Caverphone 2.0 value."
          },
          {
            "name": "Cologne",
            "value": "cologne",
            "description": "Encodes a token into a Cologne Phonetic value."
          },
          {
            "name": "Nysiis",
            "value": "nysiis",
            "description": "Encodes a token into a NYSIIS value."
          },
          {
            "name": "KoelnerPhonetik",
            "value": "koelnerPhonetik",
            "description": "Encodes a token using the KÃ¶lner Phonetik algorithm."
          },
          {
            "name": "HaasePhonetik",
            "value": "haasePhonetik",
            "description": "Encodes a token using the Haase refinement of the KÃ¶lner Phonetik algorithm."
          },
          {
            "name": "BeiderMorse",
            "value": "beiderMorse",
            "description": "Encodes a token into a Beider-Morse value."
          }
        ]
      }
    },
    "PhoneticTokenFilter": {
      "type": "object",
      "description": "Create tokens for phonetic matches. This token filter is implemented using Apache Lucene.",
      "properties": {
        "encoder": {
          "$ref": "#/definitions/PhoneticEncoder",
          "description": "The phonetic encoder to use. Default is \"metaphone\"."
        },
        "replace": {
          "type": "boolean",
          "description": "A value indicating whether encoded tokens should replace original tokens. If false, encoded tokens are added as synonyms. Default is true.",
          "default": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.PhoneticTokenFilter"
    },
    "QueryAnswerResult": {
      "type": "object",
      "description": "An answer is a text passage extracted from the contents of the most relevant documents that matched the query. Answers are extracted from the top search results. Answer candidates are scored and the top answers are selected.",
      "properties": {
        "score": {
          "type": "number",
          "format": "double",
          "description": "The score value represents how relevant the answer is to the query relative to other answers returned for the query."
        },
        "key": {
          "type": "string",
          "description": "The key of the document the answer was extracted from."
        },
        "text": {
          "type": "string",
          "description": "The text passage extracted from the document contents as the answer."
        },
        "highlights": {
          "type": "string",
          "description": "Same text passage as in the Text property with highlighted text phrases most relevant to the query."
        }
      },
      "additionalProperties": {}
    },
    "QueryAnswerType": {
      "type": "string",
      "description": "This parameter is only valid if the query type is `semantic`. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character `|` followed by the `count-<number of answers>` option after the answers parameter value, such as `extractive|count-3`. Default count is 1. The confidence threshold can be configured by appending the pipe character `|` followed by the `threshold-<confidence threshold>` option after the answers parameter value, such as `extractive|threshold-0.9`. Default threshold is 0.7. The maximum character length of answers can be configured by appending the pipe character '|' followed by the 'count-<number of maximum character length>', such as 'extractive|maxcharlength-600'.",
      "enum": [
        "none",
        "extractive"
      ],
      "x-ms-enum": {
        "name": "QueryAnswerType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not return answers for the query."
          },
          {
            "name": "Extractive",
            "value": "extractive",
            "description": "Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language."
          }
        ]
      }
    },
    "QueryCaptionResult": {
      "type": "object",
      "description": "Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type `semantic`.",
      "properties": {
        "text": {
          "type": "string",
          "description": "A representative text passage extracted from the document most relevant to the search query."
        },
        "highlights": {
          "type": "string",
          "description": "Same text passage as in the Text property with highlighted phrases most relevant to the query."
        }
      },
      "additionalProperties": {}
    },
    "QueryCaptionType": {
      "type": "string",
      "description": "This parameter is only valid if the query type is `semantic`. If set, the query returns captions extracted from key passages in the highest ranked documents. When Captions is set to `extractive`, highlighting is enabled by default, and can be configured by appending the pipe character `|` followed by the `highlight-<true/false>` option, such as `extractive|highlight-true`. Defaults to `None`. The maximum character length of captions can be configured by appending the pipe character '|' followed by the 'count-<number of maximum character length>', such as 'extractive|maxcharlength-600'.",
      "enum": [
        "none",
        "extractive"
      ],
      "x-ms-enum": {
        "name": "QueryCaptionType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not return captions for the query."
          },
          {
            "name": "Extractive",
            "value": "extractive",
            "description": "Extracts captions from the matching documents that contain passages relevant to the search query."
          }
        ]
      }
    },
    "QueryDebugMode": {
      "type": "string",
      "description": "Enables a debugging tool that can be used to further explore your search results. You can enable multiple debug modes simultaneously by separating them with a | character, for example: semantic|queryRewrites.",
      "enum": [
        "disabled",
        "semantic",
        "vector",
        "queryRewrites",
        "innerHits",
        "all"
      ],
      "x-ms-enum": {
        "name": "QueryDebugMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Disabled",
            "value": "disabled",
            "description": "No query debugging information will be returned."
          },
          {
            "name": "Semantic",
            "value": "semantic",
            "description": "Allows the user to further explore their reranked results."
          },
          {
            "name": "Vector",
            "value": "vector",
            "description": "Allows the user to further explore their hybrid and vector query results."
          },
          {
            "name": "QueryRewrites",
            "value": "queryRewrites",
            "description": "Allows the user to explore the list of query rewrites generated for their search request."
          },
          {
            "name": "InnerHits",
            "value": "innerHits",
            "description": "Allows the user to retrieve scoring information regarding vectors matched within a collection of complex types."
          },
          {
            "name": "All",
            "value": "all",
            "description": "Turn on all debug options."
          }
        ]
      }
    },
    "QueryLanguage": {
      "type": "string",
      "description": "The language of the query.",
      "enum": [
        "none",
        "en-us",
        "en-gb",
        "en-in",
        "en-ca",
        "en-au",
        "fr-fr",
        "fr-ca",
        "de-de",
        "es-es",
        "es-mx",
        "zh-cn",
        "zh-tw",
        "pt-br",
        "pt-pt",
        "it-it",
        "ja-jp",
        "ko-kr",
        "ru-ru",
        "cs-cz",
        "nl-be",
        "nl-nl",
        "hu-hu",
        "pl-pl",
        "sv-se",
        "tr-tr",
        "hi-in",
        "ar-sa",
        "ar-eg",
        "ar-ma",
        "ar-kw",
        "ar-jo",
        "da-dk",
        "no-no",
        "bg-bg",
        "hr-hr",
        "hr-ba",
        "ms-my",
        "ms-bn",
        "sl-sl",
        "ta-in",
        "vi-vn",
        "el-gr",
        "ro-ro",
        "is-is",
        "id-id",
        "th-th",
        "lt-lt",
        "uk-ua",
        "lv-lv",
        "et-ee",
        "ca-es",
        "fi-fi",
        "sr-ba",
        "sr-me",
        "sr-rs",
        "sk-sk",
        "nb-no",
        "hy-am",
        "bn-in",
        "eu-es",
        "gl-es",
        "gu-in",
        "he-il",
        "ga-ie",
        "kn-in",
        "ml-in",
        "mr-in",
        "fa-ae",
        "pa-in",
        "te-in",
        "ur-pk"
      ],
      "x-ms-enum": {
        "name": "QueryLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Query language not specified."
          },
          {
            "name": "EnUs",
            "value": "en-us",
            "description": "Query language value for English (United States)."
          },
          {
            "name": "EnGb",
            "value": "en-gb",
            "description": "Query language value for English (Great Britain)."
          },
          {
            "name": "EnIn",
            "value": "en-in",
            "description": "Query language value for English (India)."
          },
          {
            "name": "EnCa",
            "value": "en-ca",
            "description": "Query language value for English (Canada)."
          },
          {
            "name": "EnAu",
            "value": "en-au",
            "description": "Query language value for English (Australia)."
          },
          {
            "name": "FrFr",
            "value": "fr-fr",
            "description": "Query language value for French (France)."
          },
          {
            "name": "FrCa",
            "value": "fr-ca",
            "description": "Query language value for French (Canada)."
          },
          {
            "name": "DeDe",
            "value": "de-de",
            "description": "Query language value for German (Germany)."
          },
          {
            "name": "EsEs",
            "value": "es-es",
            "description": "Query language value for Spanish (Spain)."
          },
          {
            "name": "EsMx",
            "value": "es-mx",
            "description": "Query language value for Spanish (Mexico)."
          },
          {
            "name": "ZhCn",
            "value": "zh-cn",
            "description": "Query language value for Chinese (China)."
          },
          {
            "name": "ZhTw",
            "value": "zh-tw",
            "description": "Query language value for Chinese (Taiwan)."
          },
          {
            "name": "PtBr",
            "value": "pt-br",
            "description": "Query language value for Portuguese (Brazil)."
          },
          {
            "name": "PtPt",
            "value": "pt-pt",
            "description": "Query language value for Portuguese (Portugal)."
          },
          {
            "name": "ItIt",
            "value": "it-it",
            "description": "Query language value for Italian (Italy)."
          },
          {
            "name": "JaJp",
            "value": "ja-jp",
            "description": "Query language value for Japanese (Japan)."
          },
          {
            "name": "KoKr",
            "value": "ko-kr",
            "description": "Query language value for Korean (Korea)."
          },
          {
            "name": "RuRu",
            "value": "ru-ru",
            "description": "Query language value for Russian (Russia)."
          },
          {
            "name": "CsCz",
            "value": "cs-cz",
            "description": "Query language value for Czech (Czech Republic)."
          },
          {
            "name": "NlBe",
            "value": "nl-be",
            "description": "Query language value for Dutch (Belgium)."
          },
          {
            "name": "NlNl",
            "value": "nl-nl",
            "description": "Query language value for Dutch (Netherlands)."
          },
          {
            "name": "HuHu",
            "value": "hu-hu",
            "description": "Query language value for Hungarian (Hungary)."
          },
          {
            "name": "PlPl",
            "value": "pl-pl",
            "description": "Query language value for Polish (Poland)."
          },
          {
            "name": "SvSe",
            "value": "sv-se",
            "description": "Query language value for Swedish (Sweden)."
          },
          {
            "name": "TrTr",
            "value": "tr-tr",
            "description": "Query language value for Turkish (Turkey)."
          },
          {
            "name": "HiIn",
            "value": "hi-in",
            "description": "Query language value for Hindi (India)."
          },
          {
            "name": "ArSa",
            "value": "ar-sa",
            "description": "Query language value for Arabic (Saudi Arabia)."
          },
          {
            "name": "ArEg",
            "value": "ar-eg",
            "description": "Query language value for Arabic (Egypt)."
          },
          {
            "name": "ArMa",
            "value": "ar-ma",
            "description": "Query language value for Arabic (Morocco)."
          },
          {
            "name": "ArKw",
            "value": "ar-kw",
            "description": "Query language value for Arabic (Kuwait)."
          },
          {
            "name": "ArJo",
            "value": "ar-jo",
            "description": "Query language value for Arabic (Jordan)."
          },
          {
            "name": "DaDk",
            "value": "da-dk",
            "description": "Query language value for Danish (Denmark)."
          },
          {
            "name": "NoNo",
            "value": "no-no",
            "description": "Query language value for Norwegian (Norway)."
          },
          {
            "name": "BgBg",
            "value": "bg-bg",
            "description": "Query language value for Bulgarian (Bulgaria)."
          },
          {
            "name": "HrHr",
            "value": "hr-hr",
            "description": "Query language value for Croatian (Croatia)."
          },
          {
            "name": "HrBa",
            "value": "hr-ba",
            "description": "Query language value for Croatian (Bosnia and Herzegovina)."
          },
          {
            "name": "MsMy",
            "value": "ms-my",
            "description": "Query language value for Malay (Malaysia)."
          },
          {
            "name": "MsBn",
            "value": "ms-bn",
            "description": "Query language value for Malay (Brunei Darussalam)."
          },
          {
            "name": "SlSl",
            "value": "sl-sl",
            "description": "Query language value for Slovenian (Slovenia)."
          },
          {
            "name": "TaIn",
            "value": "ta-in",
            "description": "Query language value for Tamil (India)."
          },
          {
            "name": "ViVn",
            "value": "vi-vn",
            "description": "Query language value for Vietnamese (Viet Nam)."
          },
          {
            "name": "ElGr",
            "value": "el-gr",
            "description": "Query language value for Greek (Greece)."
          },
          {
            "name": "RoRo",
            "value": "ro-ro",
            "description": "Query language value for Romanian (Romania)."
          },
          {
            "name": "IsIs",
            "value": "is-is",
            "description": "Query language value for Icelandic (Iceland)."
          },
          {
            "name": "IdId",
            "value": "id-id",
            "description": "Query language value for Indonesian (Indonesia)."
          },
          {
            "name": "ThTh",
            "value": "th-th",
            "description": "Query language value for Thai (Thailand)."
          },
          {
            "name": "LtLt",
            "value": "lt-lt",
            "description": "Query language value for Lithuanian (Lithuania)."
          },
          {
            "name": "UkUa",
            "value": "uk-ua",
            "description": "Query language value for Ukrainian (Ukraine)."
          },
          {
            "name": "LvLv",
            "value": "lv-lv",
            "description": "Query language value for Latvian (Latvia)."
          },
          {
            "name": "EtEe",
            "value": "et-ee",
            "description": "Query language value for Estonian (Estonia)."
          },
          {
            "name": "CaEs",
            "value": "ca-es",
            "description": "Query language value for Catalan."
          },
          {
            "name": "FiFi",
            "value": "fi-fi",
            "description": "Query language value for Finnish (Finland)."
          },
          {
            "name": "SrBa",
            "value": "sr-ba",
            "description": "Query language value for Serbian (Bosnia and Herzegovina)."
          },
          {
            "name": "SrMe",
            "value": "sr-me",
            "description": "Query language value for Serbian (Montenegro)."
          },
          {
            "name": "SrRs",
            "value": "sr-rs",
            "description": "Query language value for Serbian (Serbia)."
          },
          {
            "name": "SkSk",
            "value": "sk-sk",
            "description": "Query language value for Slovak (Slovakia)."
          },
          {
            "name": "NbNo",
            "value": "nb-no",
            "description": "Query language value for Norwegian (Norway)."
          },
          {
            "name": "HyAm",
            "value": "hy-am",
            "description": "Query language value for Armenian (Armenia)."
          },
          {
            "name": "BnIn",
            "value": "bn-in",
            "description": "Query language value for Bengali (India)."
          },
          {
            "name": "EuEs",
            "value": "eu-es",
            "description": "Query language value for Basque."
          },
          {
            "name": "GlEs",
            "value": "gl-es",
            "description": "Query language value for Galician."
          },
          {
            "name": "GuIn",
            "value": "gu-in",
            "description": "Query language value for Gujarati (India)."
          },
          {
            "name": "HeIl",
            "value": "he-il",
            "description": "Query language value for Hebrew (Israel)."
          },
          {
            "name": "GaIe",
            "value": "ga-ie",
            "description": "Query language value for Irish (Ireland)."
          },
          {
            "name": "KnIn",
            "value": "kn-in",
            "description": "Query language value for Kannada (India)."
          },
          {
            "name": "MlIn",
            "value": "ml-in",
            "description": "Query language value for Malayalam (India)."
          },
          {
            "name": "MrIn",
            "value": "mr-in",
            "description": "Query language value for Marathi (India)."
          },
          {
            "name": "FaAe",
            "value": "fa-ae",
            "description": "Query language value for Persian (U.A.E.)."
          },
          {
            "name": "PaIn",
            "value": "pa-in",
            "description": "Query language value for Punjabi (India)."
          },
          {
            "name": "TeIn",
            "value": "te-in",
            "description": "Query language value for Telugu (India)."
          },
          {
            "name": "UrPk",
            "value": "ur-pk",
            "description": "Query language value for Urdu (Pakistan)."
          }
        ]
      }
    },
    "QueryResultDocumentInnerHit": {
      "type": "object",
      "description": "Detailed scoring information for an individual element of a complex collection.",
      "properties": {
        "ordinal": {
          "type": "integer",
          "format": "int64",
          "description": "Position of this specific matching element within it's original collection. Position starts at 0.",
          "readOnly": true
        },
        "vectors": {
          "type": "array",
          "description": "Detailed scoring information for an individual element of a complex collection that matched a vector query.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/SingleVectorFieldResult"
            }
          },
          "readOnly": true
        }
      }
    },
    "QueryResultDocumentRerankerInput": {
      "type": "object",
      "description": "The raw concatenated strings that were sent to the semantic enrichment process.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The raw string for the title field that was used for semantic enrichment.",
          "readOnly": true
        },
        "content": {
          "type": "string",
          "description": "The raw concatenated strings for the content fields that were used for semantic enrichment.",
          "readOnly": true
        },
        "keywords": {
          "type": "string",
          "description": "The raw concatenated strings for the keyword fields that were used for semantic enrichment.",
          "readOnly": true
        }
      }
    },
    "QueryResultDocumentSemanticField": {
      "type": "object",
      "description": "Description of fields that were sent to the semantic enrichment process, as well as how they were used",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field that was sent to the semantic enrichment process",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/SemanticFieldState",
          "description": "The way the field was used for the semantic enrichment process (fully used, partially used, or unused)",
          "readOnly": true
        }
      }
    },
    "QueryResultDocumentSubscores": {
      "type": "object",
      "description": "The breakdown of subscores between the text and vector query components of the search query for this document. Each vector query is shown as a separate object in the same order they were received.",
      "properties": {
        "text": {
          "$ref": "#/definitions/TextResult",
          "description": "The BM25 or Classic score for the text portion of the query.",
          "readOnly": true
        },
        "vectors": {
          "type": "array",
          "description": "The vector similarity and @search.score values for each vector query.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/SingleVectorFieldResult"
            }
          },
          "readOnly": true
        },
        "documentBoost": {
          "type": "number",
          "format": "double",
          "description": "The BM25 or Classic score for the text portion of the query.",
          "readOnly": true
        }
      }
    },
    "QueryRewritesDebugInfo": {
      "type": "object",
      "description": "Contains debugging information specific to query rewrites.",
      "properties": {
        "text": {
          "$ref": "#/definitions/QueryRewritesValuesDebugInfo",
          "description": "List of query rewrites generated for the text query.",
          "readOnly": true
        },
        "vectors": {
          "type": "array",
          "description": "List of query rewrites generated for the vectorizable text queries.",
          "items": {
            "$ref": "#/definitions/QueryRewritesValuesDebugInfo"
          },
          "readOnly": true
        }
      }
    },
    "QueryRewritesType": {
      "type": "string",
      "description": "This parameter is only valid if the query type is `semantic`. When QueryRewrites is set to `generative`, the query terms are sent to a generate model which will produce 10 (default) rewrites to help increase the recall of the request. The requested count can be configured by appending the pipe character `|` followed by the `count-<number of rewrites>` option, such as `generative|count-3`. Defaults to `None`.",
      "enum": [
        "none",
        "generative"
      ],
      "x-ms-enum": {
        "name": "QueryRewritesType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not generate additional query rewrites for this query."
          },
          {
            "name": "Generative",
            "value": "generative",
            "description": "Generate alternative query terms to increase the recall of a search request."
          }
        ]
      }
    },
    "QueryRewritesValuesDebugInfo": {
      "type": "object",
      "description": "Contains debugging information specific to query rewrites.",
      "properties": {
        "inputQuery": {
          "type": "string",
          "description": "The input text to the generative query rewriting model. There may be cases where the user query and the input to the generative model are not identical.",
          "readOnly": true
        },
        "rewrites": {
          "type": "array",
          "description": "List of query rewrites.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "QuerySpellerType": {
      "type": "string",
      "description": "Improve search recall by spell-correcting individual search query terms.",
      "enum": [
        "none",
        "lexicon"
      ],
      "x-ms-enum": {
        "name": "QuerySpellerType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Speller not enabled."
          },
          {
            "name": "Lexicon",
            "value": "lexicon",
            "description": "Speller corrects individual query terms using a static lexicon for the language specified by the queryLanguage parameter."
          }
        ]
      }
    },
    "QueryType": {
      "type": "string",
      "description": "Specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax and 'semantic' if query syntax is not needed.",
      "enum": [
        "simple",
        "full",
        "semantic"
      ],
      "x-ms-enum": {
        "name": "QueryType",
        "modelAsString": true,
        "values": [
          {
            "name": "Simple",
            "value": "simple",
            "description": "Uses the simple query syntax for searches. Search text is interpreted using a simple query language that allows for symbols such as +, * and \"\". Queries are evaluated across all searchable fields by default, unless the searchFields parameter is specified."
          },
          {
            "name": "Full",
            "value": "full",
            "description": "Uses the full Lucene query syntax for searches. Search text is interpreted using the Lucene query language which allows field-specific and weighted searches, as well as other advanced features."
          },
          {
            "name": "Semantic",
            "value": "semantic",
            "description": "Best suited for queries expressed in natural language as opposed to keywords. Improves precision of search results by re-ranking the top search results using a ranking model trained on the Web corpus."
          }
        ]
      }
    },
    "RankingOrder": {
      "type": "string",
      "description": "Represents score to use for sort order of documents.",
      "enum": [
        "BoostedRerankerScore",
        "RerankerScore"
      ],
      "x-ms-enum": {
        "name": "RankingOrder",
        "modelAsString": true,
        "values": [
          {
            "name": "BoostedRerankerScore",
            "value": "BoostedRerankerScore",
            "description": "Sets sort order as BoostedRerankerScore"
          },
          {
            "name": "RerankerScore",
            "value": "RerankerScore",
            "description": "Sets sort order as ReRankerScore"
          }
        ]
      }
    },
    "RegexFlags": {
      "type": "string",
      "description": "Defines flags that can be combined to control how regular expressions are used in the pattern analyzer and pattern tokenizer.",
      "enum": [
        "CANON_EQ",
        "CASE_INSENSITIVE",
        "COMMENTS",
        "DOTALL",
        "LITERAL",
        "MULTILINE",
        "UNICODE_CASE",
        "UNIX_LINES"
      ],
      "x-ms-enum": {
        "name": "RegexFlags",
        "modelAsString": true,
        "values": [
          {
            "name": "CanonEq",
            "value": "CANON_EQ",
            "description": "Enables canonical equivalence."
          },
          {
            "name": "CaseInsensitive",
            "value": "CASE_INSENSITIVE",
            "description": "Enables case-insensitive matching."
          },
          {
            "name": "Comments",
            "value": "COMMENTS",
            "description": "Permits whitespace and comments in the pattern."
          },
          {
            "name": "DotAll",
            "value": "DOTALL",
            "description": "Enables dotall mode."
          },
          {
            "name": "Literal",
            "value": "LITERAL",
            "description": "Enables literal parsing of the pattern."
          },
          {
            "name": "Multiline",
            "value": "MULTILINE",
            "description": "Enables multiline mode."
          },
          {
            "name": "UnicodeCase",
            "value": "UNICODE_CASE",
            "description": "Enables Unicode-aware case folding."
          },
          {
            "name": "UnixLines",
            "value": "UNIX_LINES",
            "description": "Enables Unix lines mode."
          }
        ]
      }
    },
    "RemoteSharePointKnowledgeSourceParams": {
      "type": "object",
      "description": "Specifies runtime parameters for a remote SharePoint knowledge source",
      "properties": {
        "filterExpressionAddOn": {
          "type": "string",
          "description": "A filter condition applied to the SharePoint data source. It must be specified in the Keyword Query Language syntax. It will be combined as a conjunction with the filter expression specified in the knowledge source definition."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeSourceParams"
        }
      ],
      "x-ms-discriminator-value": "remoteSharePoint"
    },
    "RescoringOptions": {
      "type": "object",
      "description": "Contains the options for rescoring.",
      "properties": {
        "enableRescoring": {
          "type": "boolean",
          "description": "If set to true, after the initial search on the compressed vectors, the similarity scores are recalculated using the full-precision vectors. This will improve recall at the expense of latency.",
          "default": true
        },
        "defaultOversampling": {
          "type": "number",
          "format": "double",
          "description": "Default oversampling factor. Oversampling retrieves a greater set of potential documents to offset the resolution loss due to quantization. This increases the set of results that will be rescored on full-precision vectors. Minimum value is 1, meaning no oversampling (1x). This parameter can only be set when 'enableRescoring' is true. Higher values improve recall at the expense of latency."
        },
        "rescoreStorageMethod": {
          "$ref": "#/definitions/VectorSearchCompressionRescoreStorageMethod",
          "description": "Controls the storage method for original vectors. This setting is immutable."
        }
      }
    },
    "ResourceCounter": {
      "type": "object",
      "description": "Represents a resource's usage and quota.",
      "properties": {
        "usage": {
          "type": "integer",
          "format": "int64",
          "description": "The resource usage amount."
        },
        "quota": {
          "type": "integer",
          "format": "int64",
          "description": "The resource amount quota."
        }
      },
      "required": [
        "usage"
      ]
    },
    "ScalarQuantizationCompression": {
      "type": "object",
      "description": "Contains configuration options specific to the scalar quantization compression method used during indexing and querying.",
      "properties": {
        "scalarQuantizationParameters": {
          "$ref": "#/definitions/ScalarQuantizationParameters",
          "description": "Contains the parameters specific to Scalar Quantization."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorSearchCompression"
        }
      ],
      "x-ms-discriminator-value": "scalarQuantization"
    },
    "ScalarQuantizationParameters": {
      "type": "object",
      "description": "Contains the parameters specific to Scalar Quantization.",
      "properties": {
        "quantizedDataType": {
          "$ref": "#/definitions/VectorSearchCompressionTarget",
          "description": "The quantized data type of compressed vector values."
        }
      }
    },
    "ScoringFunction": {
      "type": "object",
      "description": "Base type for functions that can modify document scores during ranking.",
      "properties": {
        "fieldName": {
          "type": "string",
          "description": "The name of the field used as input to the scoring function."
        },
        "boost": {
          "type": "number",
          "format": "double",
          "description": "A multiplier for the raw score. Must be a positive number not equal to 1.0."
        },
        "interpolation": {
          "$ref": "#/definitions/ScoringFunctionInterpolation",
          "description": "A value indicating how boosting will be interpolated across document scores; defaults to \"Linear\"."
        },
        "type": {
          "type": "string",
          "description": "Type of ScoringFunction."
        }
      },
      "discriminator": "type",
      "required": [
        "fieldName",
        "boost",
        "type"
      ]
    },
    "ScoringFunctionAggregation": {
      "type": "string",
      "description": "Defines the aggregation function used to combine the results of all the scoring functions in a scoring profile.",
      "enum": [
        "sum",
        "average",
        "minimum",
        "maximum",
        "firstMatching"
      ],
      "x-ms-enum": {
        "name": "ScoringFunctionAggregation",
        "modelAsString": true,
        "values": [
          {
            "name": "Sum",
            "value": "sum",
            "description": "Boost scores by the sum of all scoring function results."
          },
          {
            "name": "Average",
            "value": "average",
            "description": "Boost scores by the average of all scoring function results."
          },
          {
            "name": "Minimum",
            "value": "minimum",
            "description": "Boost scores by the minimum of all scoring function results."
          },
          {
            "name": "Maximum",
            "value": "maximum",
            "description": "Boost scores by the maximum of all scoring function results."
          },
          {
            "name": "FirstMatching",
            "value": "firstMatching",
            "description": "Boost scores using the first applicable scoring function in the scoring profile."
          }
        ]
      }
    },
    "ScoringFunctionInterpolation": {
      "type": "string",
      "description": "Defines the function used to interpolate score boosting across a range of documents.",
      "enum": [
        "linear",
        "constant",
        "quadratic",
        "logarithmic"
      ],
      "x-ms-enum": {
        "name": "ScoringFunctionInterpolation",
        "modelAsString": true,
        "values": [
          {
            "name": "Linear",
            "value": "linear",
            "description": "Boosts scores by a linearly decreasing amount. This is the default interpolation for scoring functions."
          },
          {
            "name": "Constant",
            "value": "constant",
            "description": "Boosts scores by a constant factor."
          },
          {
            "name": "Quadratic",
            "value": "quadratic",
            "description": "Boosts scores by an amount that decreases quadratically. Boosts decrease slowly for higher scores, and more quickly as the scores decrease. This interpolation option is not allowed in tag scoring functions."
          },
          {
            "name": "Logarithmic",
            "value": "logarithmic",
            "description": "Boosts scores by an amount that decreases logarithmically. Boosts decrease quickly for higher scores, and more slowly as the scores decrease. This interpolation option is not allowed in tag scoring functions."
          }
        ]
      }
    },
    "ScoringProfile": {
      "type": "object",
      "description": "Defines parameters for a search index that influence scoring in search queries.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the scoring profile."
        },
        "text": {
          "$ref": "#/definitions/TextWeights",
          "description": "Parameters that boost scoring based on text matches in certain index fields."
        },
        "functions": {
          "type": "array",
          "description": "The collection of functions that influence the scoring of documents.",
          "items": {
            "$ref": "#/definitions/ScoringFunction"
          }
        },
        "functionAggregation": {
          "$ref": "#/definitions/ScoringFunctionAggregation",
          "description": "A value indicating how the results of individual scoring functions should be combined. Defaults to \"Sum\". Ignored if there are no scoring functions."
        }
      },
      "required": [
        "name"
      ]
    },
    "ScoringStatistics": {
      "type": "string",
      "description": "A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries.",
      "enum": [
        "local",
        "global"
      ],
      "x-ms-enum": {
        "name": "ScoringStatistics",
        "modelAsString": true,
        "values": [
          {
            "name": "Local",
            "value": "local",
            "description": "The scoring statistics will be calculated locally for lower latency."
          },
          {
            "name": "Global",
            "value": "global",
            "description": "The scoring statistics will be calculated globally for more consistent scoring."
          }
        ]
      }
    },
    "SearchAlias": {
      "type": "object",
      "description": "Represents an index alias, which describes a mapping from the alias name to an index. The alias name can be used in place of the index name for supported operations.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the alias."
        },
        "indexes": {
          "type": "array",
          "description": "The name of the index this alias maps to. Only one index name may be specified.",
          "items": {
            "type": "string"
          }
        },
        "@odata.etag": {
          "type": "string",
          "description": "The ETag of the alias.",
          "x-ms-client-name": "eTag"
        }
      },
      "required": [
        "name",
        "indexes"
      ]
    },
    "SearchDocumentsResult": {
      "type": "object",
      "description": "Response containing search results from an index.",
      "properties": {
        "@odata.count": {
          "type": "integer",
          "format": "int64",
          "description": "The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if the query can't return all the requested documents in a single response.",
          "readOnly": true,
          "x-ms-client-name": "count"
        },
        "@search.coverage": {
          "type": "number",
          "format": "double",
          "description": "A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.",
          "readOnly": true,
          "x-ms-client-name": "coverage"
        },
        "@search.facets": {
          "type": "object",
          "description": "The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FacetResult"
            },
            "type": "array"
          },
          "readOnly": true,
          "x-ms-client-name": "facets"
        },
        "@search.answers": {
          "type": "array",
          "description": "The answers query results for the search operation; null if the answers query parameter was not specified or set to 'none'.",
          "items": {
            "$ref": "#/definitions/QueryAnswerResult"
          },
          "readOnly": true,
          "x-ms-client-name": "answers"
        },
        "@search.debug": {
          "$ref": "#/definitions/DebugInfo",
          "description": "Debug information that applies to the search results as a whole.",
          "readOnly": true,
          "x-ms-client-name": "debugInfo"
        },
        "@search.nextPageParameters": {
          "$ref": "#/definitions/SearchRequest",
          "description": "Continuation JSON payload returned when the query can't return all the requested results in a single response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get the next part of the search response.",
          "readOnly": true,
          "x-ms-client-name": "nextPageParameters"
        },
        "value": {
          "type": "array",
          "description": "The sequence of results returned by the query.",
          "items": {
            "$ref": "#/definitions/SearchResult"
          },
          "readOnly": true
        },
        "@odata.nextLink": {
          "type": "string",
          "description": "Continuation URL returned when the query can't return all the requested results in a single response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.",
          "readOnly": true,
          "x-ms-client-name": "nextLink"
        },
        "@search.semanticPartialResponseReason": {
          "$ref": "#/definitions/SemanticErrorReason",
          "description": "Reason that a partial response was returned for a semantic ranking request.",
          "readOnly": true,
          "x-ms-client-name": "semanticPartialResponseReason"
        },
        "@search.semanticPartialResponseType": {
          "$ref": "#/definitions/SemanticSearchResultsType",
          "description": "Type of partial response that was returned for a semantic ranking request.",
          "readOnly": true,
          "x-ms-client-name": "semanticPartialResponseType"
        },
        "@search.semanticQueryRewritesResultType": {
          "$ref": "#/definitions/SemanticQueryRewritesResultType",
          "description": "Type of query rewrite that was used to retrieve documents.",
          "readOnly": true,
          "x-ms-client-name": "semanticQueryRewritesResultType"
        }
      },
      "required": [
        "value"
      ]
    },
    "SearchField": {
      "type": "object",
      "description": "Represents a field in an index definition, which describes the name, data type, and search behavior of a field.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field, which must be unique within the fields collection of the index or parent field."
        },
        "type": {
          "$ref": "#/definitions/SearchFieldDataType",
          "description": "The data type of the field."
        },
        "key": {
          "type": "boolean",
          "description": "A value indicating whether the field uniquely identifies documents in the index. Exactly one top-level field in each index must be chosen as the key field and it must be of type Edm.String. Key fields can be used to look up documents directly and update or delete specific documents. Default is false for simple fields and null for complex fields."
        },
        "retrievable": {
          "type": "boolean",
          "description": "A value indicating whether the field can be returned in a search result. You can disable this option if you want to use a field (for example, margin) as a filter, sorting, or scoring mechanism but do not want the field to be visible to the end user. This property must be true for key fields, and it must be null for complex fields. This property can be changed on existing fields. Enabling this property does not cause any increase in index storage requirements. Default is true for simple fields, false for vector fields, and null for complex fields."
        },
        "stored": {
          "type": "boolean",
          "description": "An immutable value indicating whether the field will be persisted separately on disk to be returned in a search result. You can disable this option if you don't plan to return the field contents in a search response to save on storage overhead. This can only be set during index creation and only for vector fields. This property cannot be changed for existing fields or set as false for new fields. If this property is set as false, the property 'retrievable' must also be set to false. This property must be true or unset for key fields, for new fields, and for non-vector fields, and it must be null for complex fields. Disabling this property will reduce index storage requirements. The default is true for vector fields."
        },
        "searchable": {
          "type": "boolean",
          "description": "A value indicating whether the field is full-text searchable. This means it will undergo analysis such as word-breaking during indexing. If you set a searchable field to a value like \"sunny day\", internally it will be split into the individual tokens \"sunny\" and \"day\". This enables full-text searches for these terms. Fields of type Edm.String or Collection(Edm.String) are searchable by default. This property must be false for simple fields of other non-string data types, and it must be null for complex fields. Note: searchable fields consume extra space in your index to accommodate additional tokenized versions of the field value for full-text searches. If you want to save space in your index and you don't need a field to be included in searches, set searchable to false."
        },
        "filterable": {
          "type": "boolean",
          "description": "A value indicating whether to enable the field to be referenced in $filter queries. filterable differs from searchable in how strings are handled. Fields of type Edm.String or Collection(Edm.String) that are filterable do not undergo word-breaking, so comparisons are for exact matches only. For example, if you set such a field f to \"sunny day\", $filter=f eq 'sunny' will find no matches, but $filter=f eq 'sunny day' will. This property must be null for complex fields. Default is true for simple fields and null for complex fields."
        },
        "sortable": {
          "type": "boolean",
          "description": "A value indicating whether to enable the field to be referenced in $orderby expressions. By default, the search engine sorts results by score, but in many experiences users will want to sort by fields in the documents. A simple field can be sortable only if it is single-valued (it has a single value in the scope of the parent document). Simple collection fields cannot be sortable, since they are multi-valued. Simple sub-fields of complex collections are also multi-valued, and therefore cannot be sortable. This is true whether it's an immediate parent field, or an ancestor field, that's the complex collection. Complex fields cannot be sortable and the sortable property must be null for such fields. The default for sortable is true for single-valued simple fields, false for multi-valued simple fields, and null for complex fields."
        },
        "facetable": {
          "type": "boolean",
          "description": "A value indicating whether to enable the field to be referenced in facet queries. Typically used in a presentation of search results that includes hit count by category (for example, search for digital cameras and see hits by brand, by megapixels, by price, and so on). This property must be null for complex fields. Fields of type Edm.GeographyPoint or Collection(Edm.GeographyPoint) cannot be facetable. Default is true for all other simple fields."
        },
        "permissionFilter": {
          "$ref": "#/definitions/PermissionFilter",
          "description": "A value indicating whether the field should be used as a permission filter."
        },
        "analyzer": {
          "$ref": "#/definitions/LexicalAnalyzerName",
          "description": "The name of the analyzer to use for the field. This option can be used only with searchable fields and it can't be set together with either searchAnalyzer or indexAnalyzer. Once the analyzer is chosen, it cannot be changed for the field. Must be null for complex fields."
        },
        "searchAnalyzer": {
          "$ref": "#/definitions/LexicalAnalyzerName",
          "description": "The name of the analyzer used at search time for the field. This option can be used only with searchable fields. It must be set together with indexAnalyzer and it cannot be set together with the analyzer option. This property cannot be set to the name of a language analyzer; use the analyzer property instead if you need a language analyzer. This analyzer can be updated on an existing field. Must be null for complex fields."
        },
        "indexAnalyzer": {
          "$ref": "#/definitions/LexicalAnalyzerName",
          "description": "The name of the analyzer used at indexing time for the field. This option can be used only with searchable fields. It must be set together with searchAnalyzer and it cannot be set together with the analyzer option.  This property cannot be set to the name of a language analyzer; use the analyzer property instead if you need a language analyzer. Once the analyzer is chosen, it cannot be changed for the field. Must be null for complex fields."
        },
        "normalizer": {
          "$ref": "#/definitions/LexicalNormalizerName",
          "description": "The name of the normalizer to use for the field. This option can be used only with fields with filterable, sortable, or facetable enabled. Once the normalizer is chosen, it cannot be changed for the field. Must be null for complex fields."
        },
        "dimensions": {
          "type": "integer",
          "format": "int32",
          "description": "The dimensionality of the vector field.",
          "minimum": 2,
          "maximum": 4096
        },
        "vectorSearchProfile": {
          "type": "string",
          "description": "The name of the vector search profile that specifies the algorithm and vectorizer to use when searching the vector field."
        },
        "vectorEncoding": {
          "$ref": "#/definitions/VectorEncodingFormat",
          "description": "The encoding format to interpret the field contents."
        },
        "synonymMaps": {
          "type": "array",
          "description": "A list of the names of synonym maps to associate with this field. This option can be used only with searchable fields. Currently only one synonym map per field is supported. Assigning a synonym map to a field ensures that query terms targeting that field are expanded at query-time using the rules in the synonym map. This attribute can be changed on existing fields. Must be null or an empty collection for complex fields.",
          "items": {
            "type": "string"
          }
        },
        "fields": {
          "type": "array",
          "description": "A list of sub-fields if this is a field of type Edm.ComplexType or Collection(Edm.ComplexType). Must be null or empty for simple fields.",
          "items": {
            "$ref": "#/definitions/SearchField"
          }
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "SearchFieldDataType": {
      "type": "string",
      "description": "Defines the data type of a field in a search index.",
      "enum": [
        "Edm.String",
        "Edm.Int32",
        "Edm.Int64",
        "Edm.Double",
        "Edm.Boolean",
        "Edm.DateTimeOffset",
        "Edm.GeographyPoint",
        "Edm.ComplexType",
        "Edm.Single",
        "Edm.Half",
        "Edm.Int16",
        "Edm.SByte",
        "Edm.Byte"
      ],
      "x-ms-enum": {
        "name": "SearchFieldDataType",
        "modelAsString": true,
        "values": [
          {
            "name": "String",
            "value": "Edm.String",
            "description": "Indicates that a field contains a string."
          },
          {
            "name": "Int32",
            "value": "Edm.Int32",
            "description": "Indicates that a field contains a 32-bit signed integer."
          },
          {
            "name": "Int64",
            "value": "Edm.Int64",
            "description": "Indicates that a field contains a 64-bit signed integer."
          },
          {
            "name": "Double",
            "value": "Edm.Double",
            "description": "Indicates that a field contains an IEEE double-precision floating point number."
          },
          {
            "name": "Boolean",
            "value": "Edm.Boolean",
            "description": "Indicates that a field contains a Boolean value (true or false)."
          },
          {
            "name": "DateTimeOffset",
            "value": "Edm.DateTimeOffset",
            "description": "Indicates that a field contains a date/time value, including timezone information."
          },
          {
            "name": "GeographyPoint",
            "value": "Edm.GeographyPoint",
            "description": "Indicates that a field contains a geo-location in terms of longitude and latitude."
          },
          {
            "name": "Complex",
            "value": "Edm.ComplexType",
            "description": "Indicates that a field contains one or more complex objects that in turn have sub-fields of other types."
          },
          {
            "name": "Single",
            "value": "Edm.Single",
            "description": "Indicates that a field contains a single-precision floating point number. This is only valid when used with Collection(Edm.Single)."
          },
          {
            "name": "Half",
            "value": "Edm.Half",
            "description": "Indicates that a field contains a half-precision floating point number. This is only valid when used with Collection(Edm.Half)."
          },
          {
            "name": "Int16",
            "value": "Edm.Int16",
            "description": "Indicates that a field contains a 16-bit signed integer. This is only valid when used with Collection(Edm.Int16)."
          },
          {
            "name": "SByte",
            "value": "Edm.SByte",
            "description": "Indicates that a field contains a 8-bit signed integer. This is only valid when used with Collection(Edm.SByte)."
          },
          {
            "name": "Byte",
            "value": "Edm.Byte",
            "description": "Indicates that a field contains a 8-bit unsigned integer. This is only valid when used with Collection(Edm.Byte)."
          }
        ]
      }
    },
    "SearchIndex": {
      "type": "object",
      "description": "Represents a search index definition, which describes the fields and search behavior of an index.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the index."
        },
        "description": {
          "type": "string",
          "description": "The description of the index."
        },
        "fields": {
          "type": "array",
          "description": "The fields of the index.",
          "items": {
            "$ref": "#/definitions/SearchField"
          }
        },
        "scoringProfiles": {
          "type": "array",
          "description": "The scoring profiles for the index.",
          "items": {
            "$ref": "#/definitions/ScoringProfile"
          }
        },
        "defaultScoringProfile": {
          "type": "string",
          "description": "The name of the scoring profile to use if none is specified in the query. If this property is not set and no scoring profile is specified in the query, then default scoring (tf-idf) will be used."
        },
        "corsOptions": {
          "$ref": "#/definitions/CorsOptions",
          "description": "Options to control Cross-Origin Resource Sharing (CORS) for the index."
        },
        "suggesters": {
          "type": "array",
          "description": "The suggesters for the index.",
          "items": {
            "$ref": "#/definitions/SearchSuggester"
          }
        },
        "analyzers": {
          "type": "array",
          "description": "The analyzers for the index.",
          "items": {
            "$ref": "#/definitions/LexicalAnalyzer"
          }
        },
        "tokenizers": {
          "type": "array",
          "description": "The tokenizers for the index.",
          "items": {
            "$ref": "#/definitions/LexicalTokenizer"
          }
        },
        "tokenFilters": {
          "type": "array",
          "description": "The token filters for the index.",
          "items": {
            "$ref": "#/definitions/TokenFilter"
          }
        },
        "charFilters": {
          "type": "array",
          "description": "The character filters for the index.",
          "items": {
            "$ref": "#/definitions/CharFilter"
          }
        },
        "normalizers": {
          "type": "array",
          "description": "The normalizers for the index.",
          "items": {
            "$ref": "#/definitions/LexicalNormalizer"
          }
        },
        "encryptionKey": {
          "$ref": "#/definitions/SearchResourceEncryptionKey",
          "description": "A description of an encryption key that you create in Azure Key Vault. This key is used to provide an additional level of encryption-at-rest for your data when you want full assurance that no one, not even Microsoft, can decrypt your data. Once you have encrypted your data, it will always remain encrypted. The search service will ignore attempts to set this property to null. You can change this property as needed if you want to rotate your encryption key; Your data will be unaffected. Encryption with customer-managed keys is not available for free search services, and is only available for paid services created on or after January 1, 2019."
        },
        "similarity": {
          "$ref": "#/definitions/SimilarityAlgorithm",
          "description": "The type of similarity algorithm to be used when scoring and ranking the documents matching a search query. The similarity algorithm can only be defined at index creation time and cannot be modified on existing indexes. If null, the ClassicSimilarity algorithm is used."
        },
        "semantic": {
          "$ref": "#/definitions/SemanticSearch",
          "description": "Defines parameters for a search index that influence semantic capabilities."
        },
        "vectorSearch": {
          "$ref": "#/definitions/VectorSearch",
          "description": "Contains configuration options related to vector search."
        },
        "permissionFilterOption": {
          "$ref": "#/definitions/SearchIndexPermissionFilterOption",
          "description": "A value indicating whether permission filtering is enabled for the index."
        },
        "@odata.etag": {
          "type": "string",
          "description": "The ETag of the index.",
          "x-ms-client-name": "eTag"
        }
      },
      "required": [
        "name",
        "fields"
      ]
    },
    "SearchIndexClientOptions": {
      "type": "object",
      "description": "Client initialization options for SearchIndexClient.",
      "properties": {
        "indexName": {
          "type": "string",
          "description": "The name of the index."
        }
      },
      "required": [
        "indexName"
      ]
    },
    "SearchIndexKnowledgeSource": {
      "type": "object",
      "description": "Knowledge Source targeting a search index.",
      "properties": {
        "searchIndexParameters": {
          "$ref": "#/definitions/SearchIndexKnowledgeSourceParameters",
          "description": "The parameters for the knowledge source."
        }
      },
      "required": [
        "searchIndexParameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeSource"
        }
      ],
      "x-ms-discriminator-value": "searchIndex"
    },
    "SearchIndexKnowledgeSourceParameters": {
      "type": "object",
      "description": "Parameters for search index knowledge source.",
      "properties": {
        "searchIndexName": {
          "type": "string",
          "description": "The name of the Search index."
        },
        "sourceDataSelect": {
          "type": "string",
          "description": "Used to request additional fields for referenced source data."
        }
      },
      "required": [
        "searchIndexName"
      ]
    },
    "SearchIndexKnowledgeSourceParams": {
      "type": "object",
      "description": "Specifies runtime parameters for a search index knowledge source",
      "properties": {
        "filterAddOn": {
          "type": "string",
          "description": "A filter condition applied to the index (e.g., 'State eq VA')."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeSourceParams"
        }
      ],
      "x-ms-discriminator-value": "searchIndex"
    },
    "SearchIndexPermissionFilterOption": {
      "type": "string",
      "description": "A value indicating whether permission filtering is enabled for the index.",
      "enum": [
        "enabled",
        "disabled"
      ],
      "x-ms-enum": {
        "name": "SearchIndexPermissionFilterOption",
        "modelAsString": true,
        "values": [
          {
            "name": "Enabled",
            "value": "enabled",
            "description": "enabled."
          },
          {
            "name": "Disabled",
            "value": "disabled",
            "description": "disabled."
          }
        ]
      }
    },
    "SearchIndexer": {
      "type": "object",
      "description": "Represents an indexer.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the indexer."
        },
        "description": {
          "type": "string",
          "description": "The description of the indexer."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the datasource from which this indexer reads data."
        },
        "skillsetName": {
          "type": "string",
          "description": "The name of the skillset executing with this indexer."
        },
        "targetIndexName": {
          "type": "string",
          "description": "The name of the index to which this indexer writes data."
        },
        "schedule": {
          "$ref": "#/definitions/IndexingSchedule",
          "description": "The schedule for this indexer."
        },
        "parameters": {
          "$ref": "#/definitions/IndexingParameters",
          "description": "Parameters for indexer execution."
        },
        "fieldMappings": {
          "type": "array",
          "description": "Defines mappings between fields in the data source and corresponding target fields in the index.",
          "items": {
            "$ref": "#/definitions/FieldMapping"
          }
        },
        "outputFieldMappings": {
          "type": "array",
          "description": "Output field mappings are applied after enrichment and immediately before indexing.",
          "items": {
            "$ref": "#/definitions/FieldMapping"
          }
        },
        "disabled": {
          "type": "boolean",
          "description": "A value indicating whether the indexer is disabled. Default is false."
        },
        "@odata.etag": {
          "type": "string",
          "description": "The ETag of the indexer.",
          "x-ms-client-name": "eTag"
        },
        "encryptionKey": {
          "$ref": "#/definitions/SearchResourceEncryptionKey",
          "description": "A description of an encryption key that you create in Azure Key Vault. This key is used to provide an additional level of encryption-at-rest for your indexer definition (as well as indexer execution status) when you want full assurance that no one, not even Microsoft, can decrypt them. Once you have encrypted your indexer definition, it will always remain encrypted. The search service will ignore attempts to set this property to null. You can change this property as needed if you want to rotate your encryption key; Your indexer definition (and indexer execution status) will be unaffected. Encryption with customer-managed keys is not available for free search services, and is only available for paid services created on or after January 1, 2019."
        },
        "cache": {
          "$ref": "#/definitions/SearchIndexerCache",
          "description": "Adds caching to an enrichment pipeline to allow for incremental modification steps without having to rebuild the index every time."
        }
      },
      "required": [
        "name",
        "dataSourceName",
        "targetIndexName"
      ]
    },
    "SearchIndexerCache": {
      "type": "object",
      "description": "The type of the cache.",
      "properties": {
        "storageConnectionString": {
          "type": "string",
          "description": "The connection string to the storage account where the cache data will be persisted."
        },
        "enableReprocessing": {
          "type": "boolean",
          "description": "Specifies whether incremental reprocessing is enabled."
        },
        "identity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "The user-assigned managed identity used for connections to the enrichment cache.  If the connection string indicates an identity (ResourceId) and it's not specified, the system-assigned managed identity is used. On updates to the indexer, if the identity is unspecified, the value remains unchanged. If set to \"none\", the value of this property is cleared."
        },
        "id": {
          "type": "string",
          "description": "A guid for the SearchIndexerCache."
        }
      }
    },
    "SearchIndexerDataContainer": {
      "type": "object",
      "description": "Represents information about the entity (such as Azure SQL table or CosmosDB collection) that will be indexed.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the table or view (for Azure SQL data source) or collection (for CosmosDB data source) that will be indexed."
        },
        "query": {
          "type": "string",
          "description": "A query that is applied to this data container. The syntax and meaning of this parameter is datasource-specific. Not supported by Azure SQL datasources."
        }
      },
      "required": [
        "name"
      ]
    },
    "SearchIndexerDataIdentity": {
      "type": "object",
      "description": "Abstract base type for data identities.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "A URI fragment specifying the type of identity."
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type"
      ]
    },
    "SearchIndexerDataNoneIdentity": {
      "type": "object",
      "description": "Clears the identity property of a datasource.",
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerDataIdentity"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.DataNoneIdentity"
    },
    "SearchIndexerDataSource": {
      "type": "object",
      "description": "Represents a datasource definition, which can be used to configure an indexer.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the datasource."
        },
        "description": {
          "type": "string",
          "description": "The description of the datasource."
        },
        "type": {
          "$ref": "#/definitions/SearchIndexerDataSourceType",
          "description": "The type of the datasource."
        },
        "subType": {
          "type": "string",
          "description": "A specific type of the data source, in case the resource is capable of different modalities. For example, 'MongoDb' for certain 'cosmosDb' accounts."
        },
        "credentials": {
          "$ref": "#/definitions/DataSourceCredentials",
          "description": "Credentials for the datasource.",
          "x-ms-client-flatten": true
        },
        "container": {
          "$ref": "#/definitions/SearchIndexerDataContainer",
          "description": "The data container for the datasource."
        },
        "identity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "An explicit managed identity to use for this datasource. If not specified and the connection string is a managed identity, the system-assigned managed identity is used. If not specified, the value remains unchanged. If \"none\" is specified, the value of this property is cleared."
        },
        "indexerPermissionOptions": {
          "type": "array",
          "description": "Ingestion options with various types of permission data.",
          "items": {
            "$ref": "#/definitions/IndexerPermissionOption"
          }
        },
        "dataChangeDetectionPolicy": {
          "$ref": "#/definitions/DataChangeDetectionPolicy",
          "description": "The data change detection policy for the datasource."
        },
        "dataDeletionDetectionPolicy": {
          "$ref": "#/definitions/DataDeletionDetectionPolicy",
          "description": "The data deletion detection policy for the datasource."
        },
        "@odata.etag": {
          "type": "string",
          "description": "The ETag of the data source.",
          "x-ms-client-name": "eTag"
        },
        "encryptionKey": {
          "$ref": "#/definitions/SearchResourceEncryptionKey",
          "description": "A description of an encryption key that you create in Azure Key Vault. This key is used to provide an additional level of encryption-at-rest for your datasource definition when you want full assurance that no one, not even Microsoft, can decrypt your data source definition. Once you have encrypted your data source definition, it will always remain encrypted. The search service will ignore attempts to set this property to null. You can change this property as needed if you want to rotate your encryption key; Your datasource definition will be unaffected. Encryption with customer-managed keys is not available for free search services, and is only available for paid services created on or after January 1, 2019."
        }
      },
      "required": [
        "name",
        "type",
        "credentials",
        "container"
      ]
    },
    "SearchIndexerDataSourceType": {
      "type": "string",
      "description": "Defines the type of a datasource.",
      "enum": [
        "azuresql",
        "cosmosdb",
        "azureblob",
        "azuretable",
        "mysql",
        "adlsgen2",
        "onelake"
      ],
      "x-ms-enum": {
        "name": "SearchIndexerDataSourceType",
        "modelAsString": true,
        "values": [
          {
            "name": "AzureSql",
            "value": "azuresql",
            "description": "Indicates an Azure SQL datasource."
          },
          {
            "name": "CosmosDb",
            "value": "cosmosdb",
            "description": "Indicates a CosmosDB datasource."
          },
          {
            "name": "AzureBlob",
            "value": "azureblob",
            "description": "Indicates an Azure Blob datasource."
          },
          {
            "name": "AzureTable",
            "value": "azuretable",
            "description": "Indicates an Azure Table datasource."
          },
          {
            "name": "MySql",
            "value": "mysql",
            "description": "Indicates a MySql datasource."
          },
          {
            "name": "AdlsGen2",
            "value": "adlsgen2",
            "description": "Indicates an ADLS Gen2 datasource."
          },
          {
            "name": "OneLake",
            "value": "onelake",
            "description": "Indicates a Microsoft Fabric OneLake datasource."
          }
        ]
      }
    },
    "SearchIndexerDataUserAssignedIdentity": {
      "type": "object",
      "description": "Specifies the identity for a datasource to use.",
      "properties": {
        "userAssignedIdentity": {
          "type": "string",
          "description": "The fully qualified Azure resource Id of a user assigned managed identity typically in the form \"/subscriptions/12345678-1234-1234-1234-1234567890ab/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId\" that should have been assigned to the search service."
        }
      },
      "required": [
        "userAssignedIdentity"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerDataIdentity"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.DataUserAssignedIdentity"
    },
    "SearchIndexerError": {
      "type": "object",
      "description": "Represents an item- or document-level indexing error.",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the item for which indexing failed."
        },
        "errorMessage": {
          "type": "string",
          "description": "The message describing the error that occurred while processing the item."
        },
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "The status code indicating why the indexing operation failed. Possible values include: 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy."
        },
        "name": {
          "type": "string",
          "description": "The name of the source at which the error originated. For example, this could refer to a particular skill in the attached skillset. This may not be always available."
        },
        "details": {
          "type": "string",
          "description": "Additional, verbose details about the error to assist in debugging the indexer. This may not be always available."
        },
        "documentationLink": {
          "type": "string",
          "description": "A link to a troubleshooting guide for these classes of errors. This may not be always available."
        }
      },
      "required": [
        "errorMessage",
        "statusCode"
      ]
    },
    "SearchIndexerIndexProjection": {
      "type": "object",
      "description": "Definition of additional projections to secondary search indexes.",
      "properties": {
        "selectors": {
          "type": "array",
          "description": "A list of projections to be performed to secondary search indexes.",
          "items": {
            "$ref": "#/definitions/SearchIndexerIndexProjectionSelector"
          }
        },
        "parameters": {
          "$ref": "#/definitions/SearchIndexerIndexProjectionsParameters",
          "description": "A dictionary of index projection-specific configuration properties. Each name is the name of a specific property. Each value must be of a primitive type."
        }
      },
      "required": [
        "selectors"
      ]
    },
    "SearchIndexerIndexProjectionSelector": {
      "type": "object",
      "description": "Description for what data to store in the designated search index.",
      "properties": {
        "targetIndexName": {
          "type": "string",
          "description": "Name of the search index to project to. Must have a key field with the 'keyword' analyzer set."
        },
        "parentKeyFieldName": {
          "type": "string",
          "description": "Name of the field in the search index to map the parent document's key value to. Must be a string field that is filterable and not the key field."
        },
        "sourceContext": {
          "type": "string",
          "description": "Source context for the projections. Represents the cardinality at which the document will be split into multiple sub documents."
        },
        "mappings": {
          "type": "array",
          "description": "Mappings for the projection, or which source should be mapped to which field in the target index.",
          "items": {
            "$ref": "#/definitions/InputFieldMappingEntry"
          }
        }
      },
      "required": [
        "targetIndexName",
        "parentKeyFieldName",
        "sourceContext",
        "mappings"
      ]
    },
    "SearchIndexerIndexProjectionsParameters": {
      "type": "object",
      "description": "A dictionary of index projection-specific configuration properties. Each name is the name of a specific property. Each value must be of a primitive type.",
      "properties": {
        "projectionMode": {
          "$ref": "#/definitions/IndexProjectionMode",
          "description": "Defines behavior of the index projections in relation to the rest of the indexer."
        }
      },
      "additionalProperties": {}
    },
    "SearchIndexerKnowledgeStore": {
      "type": "object",
      "description": "Definition of additional projections to azure blob, table, or files, of enriched data.",
      "properties": {
        "storageConnectionString": {
          "type": "string",
          "description": "The connection string to the storage account projections will be stored in."
        },
        "projections": {
          "type": "array",
          "description": "A list of additional projections to perform during indexing.",
          "items": {
            "$ref": "#/definitions/SearchIndexerKnowledgeStoreProjection"
          }
        },
        "identity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "The user-assigned managed identity used for connections to Azure Storage when writing knowledge store projections. If the connection string indicates an identity (ResourceId) and it's not specified, the system-assigned managed identity is used. On updates to the indexer, if the identity is unspecified, the value remains unchanged. If set to \"none\", the value of this property is cleared."
        },
        "parameters": {
          "$ref": "#/definitions/SearchIndexerKnowledgeStoreParameters",
          "description": "A dictionary of knowledge store-specific configuration properties. Each name is the name of a specific property. Each value must be of a primitive type."
        }
      },
      "required": [
        "storageConnectionString",
        "projections"
      ]
    },
    "SearchIndexerKnowledgeStoreBlobProjectionSelector": {
      "type": "object",
      "description": "Abstract class to share properties between concrete selectors.",
      "properties": {
        "storageContainer": {
          "type": "string",
          "description": "Blob container to store projections in."
        }
      },
      "required": [
        "storageContainer"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerKnowledgeStoreProjectionSelector"
        }
      ]
    },
    "SearchIndexerKnowledgeStoreFileProjectionSelector": {
      "type": "object",
      "description": "Projection definition for what data to store in Azure Files.",
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerKnowledgeStoreBlobProjectionSelector"
        }
      ]
    },
    "SearchIndexerKnowledgeStoreObjectProjectionSelector": {
      "type": "object",
      "description": "Projection definition for what data to store in Azure Blob.",
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerKnowledgeStoreBlobProjectionSelector"
        }
      ]
    },
    "SearchIndexerKnowledgeStoreParameters": {
      "type": "object",
      "description": "A dictionary of knowledge store-specific configuration properties. Each name is the name of a specific property. Each value must be of a primitive type.",
      "properties": {
        "synthesizeGeneratedKeyName": {
          "type": "boolean",
          "description": "Whether or not projections should synthesize a generated key name if one isn't already present."
        }
      },
      "additionalProperties": {}
    },
    "SearchIndexerKnowledgeStoreProjection": {
      "type": "object",
      "description": "Container object for various projection selectors.",
      "properties": {
        "tables": {
          "type": "array",
          "description": "Projections to Azure Table storage.",
          "items": {
            "$ref": "#/definitions/SearchIndexerKnowledgeStoreTableProjectionSelector"
          }
        },
        "objects": {
          "type": "array",
          "description": "Projections to Azure Blob storage.",
          "items": {
            "$ref": "#/definitions/SearchIndexerKnowledgeStoreObjectProjectionSelector"
          }
        },
        "files": {
          "type": "array",
          "description": "Projections to Azure File storage.",
          "items": {
            "$ref": "#/definitions/SearchIndexerKnowledgeStoreFileProjectionSelector"
          }
        }
      }
    },
    "SearchIndexerKnowledgeStoreProjectionSelector": {
      "type": "object",
      "description": "Abstract class to share properties between concrete selectors.",
      "properties": {
        "referenceKeyName": {
          "type": "string",
          "description": "Name of reference key to different projection."
        },
        "generatedKeyName": {
          "type": "string",
          "description": "Name of generated key to store projection under."
        },
        "source": {
          "type": "string",
          "description": "Source data to project."
        },
        "sourceContext": {
          "type": "string",
          "description": "Source context for complex projections."
        },
        "inputs": {
          "type": "array",
          "description": "Nested inputs for complex projections.",
          "items": {
            "$ref": "#/definitions/InputFieldMappingEntry"
          }
        }
      }
    },
    "SearchIndexerKnowledgeStoreTableProjectionSelector": {
      "type": "object",
      "description": "Description for what data to store in Azure Tables.",
      "properties": {
        "tableName": {
          "type": "string",
          "description": "Name of the Azure table to store projected data in."
        }
      },
      "required": [
        "tableName"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerKnowledgeStoreProjectionSelector"
        }
      ]
    },
    "SearchIndexerLimits": {
      "type": "object",
      "description": "Represents the limits that can be applied to an indexer.",
      "properties": {
        "maxRunTime": {
          "type": "string",
          "format": "duration",
          "description": "The maximum duration that the indexer is permitted to run for one execution."
        },
        "maxDocumentExtractionSize": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum size of a document, in bytes, which will be considered valid for indexing."
        },
        "maxDocumentContentCharactersToExtract": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of characters that will be extracted from a document picked up for indexing."
        }
      }
    },
    "SearchIndexerSkill": {
      "type": "object",
      "description": "Base type for skills.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "The discriminator for derived types."
        },
        "name": {
          "type": "string",
          "description": "The name of the skill which uniquely identifies it within the skillset. A skill with no name defined will be given a default name of its 1-based index in the skills array, prefixed with the character '#'."
        },
        "description": {
          "type": "string",
          "description": "The description of the skill which describes the inputs, outputs, and usage of the skill."
        },
        "context": {
          "type": "string",
          "description": "Represents the level at which operations take place, such as the document root or document content (for example, /document or /document/content). The default is /document."
        },
        "inputs": {
          "type": "array",
          "description": "Inputs of the skills could be a column in the source data set, or the output of an upstream skill.",
          "items": {
            "$ref": "#/definitions/InputFieldMappingEntry"
          }
        },
        "outputs": {
          "type": "array",
          "description": "The output of a skill is either a field in a search index, or a value that can be consumed as an input by another skill.",
          "items": {
            "$ref": "#/definitions/OutputFieldMappingEntry"
          }
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type",
        "inputs",
        "outputs"
      ]
    },
    "SearchIndexerSkillset": {
      "type": "object",
      "description": "A list of skills.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the skillset."
        },
        "description": {
          "type": "string",
          "description": "The description of the skillset."
        },
        "skills": {
          "type": "array",
          "description": "A list of skills in the skillset.",
          "items": {
            "$ref": "#/definitions/SearchIndexerSkill"
          }
        },
        "cognitiveServices": {
          "$ref": "#/definitions/CognitiveServicesAccount",
          "description": "Details about the Azure AI service to be used when running skills."
        },
        "knowledgeStore": {
          "$ref": "#/definitions/SearchIndexerKnowledgeStore",
          "description": "Definition of additional projections to Azure blob, table, or files, of enriched data."
        },
        "indexProjections": {
          "$ref": "#/definitions/SearchIndexerIndexProjection",
          "description": "Definition of additional projections to secondary search index(es)."
        },
        "@odata.etag": {
          "type": "string",
          "description": "The ETag of the skillset.",
          "x-ms-client-name": "eTag"
        },
        "encryptionKey": {
          "$ref": "#/definitions/SearchResourceEncryptionKey",
          "description": "A description of an encryption key that you create in Azure Key Vault. This key is used to provide an additional level of encryption-at-rest for your skillset definition when you want full assurance that no one, not even Microsoft, can decrypt your skillset definition. Once you have encrypted your skillset definition, it will always remain encrypted. The search service will ignore attempts to set this property to null. You can change this property as needed if you want to rotate your encryption key; Your skillset definition will be unaffected. Encryption with customer-managed keys is not available for free search services, and is only available for paid services created on or after January 1, 2019."
        }
      },
      "required": [
        "name",
        "skills"
      ]
    },
    "SearchIndexerStatus": {
      "type": "object",
      "description": "Represents the current status and execution history of an indexer.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the indexer."
        },
        "status": {
          "$ref": "#/definitions/IndexerStatus",
          "description": "Overall indexer status."
        },
        "lastResult": {
          "$ref": "#/definitions/IndexerExecutionResult",
          "description": "The result of the most recent or an in-progress indexer execution."
        },
        "executionHistory": {
          "type": "array",
          "description": "History of the recent indexer executions, sorted in reverse chronological order.",
          "items": {
            "$ref": "#/definitions/IndexerExecutionResult"
          }
        },
        "limits": {
          "$ref": "#/definitions/SearchIndexerLimits",
          "description": "The execution limits for the indexer."
        }
      },
      "required": [
        "name",
        "status",
        "executionHistory",
        "limits"
      ]
    },
    "SearchIndexerWarning": {
      "type": "object",
      "description": "Represents an item-level warning.",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the item which generated a warning."
        },
        "message": {
          "type": "string",
          "description": "The message describing the warning that occurred while processing the item."
        },
        "name": {
          "type": "string",
          "description": "The name of the source at which the warning originated. For example, this could refer to a particular skill in the attached skillset. This may not be always available."
        },
        "details": {
          "type": "string",
          "description": "Additional, verbose details about the warning to assist in debugging the indexer. This may not be always available."
        },
        "documentationLink": {
          "type": "string",
          "description": "A link to a troubleshooting guide for these classes of warnings. This may not be always available."
        }
      },
      "required": [
        "message"
      ]
    },
    "SearchMode": {
      "type": "string",
      "description": "Specifies whether any or all of the search terms must be matched in order to count the document as a match.",
      "enum": [
        "any",
        "all"
      ],
      "x-ms-enum": {
        "name": "SearchMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Any",
            "value": "any",
            "description": "Any of the search terms must be matched in order to count the document as a match."
          },
          {
            "name": "All",
            "value": "all",
            "description": "All of the search terms must be matched in order to count the document as a match."
          }
        ]
      }
    },
    "SearchRequest": {
      "type": "object",
      "description": "Parameters for filtering, sorting, faceting, paging, and other search query behaviors.",
      "properties": {
        "count": {
          "type": "boolean",
          "description": "A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation."
        },
        "facets": {
          "type": "array",
          "description": "The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.",
          "items": {
            "type": "string"
          }
        },
        "filter": {
          "type": "string",
          "description": "The OData $filter expression to apply to the search query."
        },
        "highlight": {
          "type": "string",
          "description": "The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting."
        },
        "highlightPostTag": {
          "type": "string",
          "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;."
        },
        "highlightPreTag": {
          "type": "string",
          "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;."
        },
        "minimumCoverage": {
          "type": "number",
          "format": "double",
          "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100."
        },
        "orderby": {
          "type": "string",
          "description": "The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses."
        },
        "queryType": {
          "$ref": "#/definitions/QueryType",
          "description": "A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax."
        },
        "scoringStatistics": {
          "$ref": "#/definitions/ScoringStatistics",
          "description": "A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries."
        },
        "sessionId": {
          "type": "string",
          "description": "A value to be used to create a sticky session, which can help getting more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character."
        },
        "scoringParameters": {
          "type": "array",
          "description": "The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation--122.2,44.8\" (without the quotes).",
          "items": {
            "type": "string"
          }
        },
        "scoringProfile": {
          "type": "string",
          "description": "The name of a scoring profile to evaluate match scores for matching documents in order to sort the results."
        },
        "debug": {
          "$ref": "#/definitions/QueryDebugMode",
          "description": "Enables a debugging tool that can be used to further explore your reranked results."
        },
        "search": {
          "type": "string",
          "description": "A full-text search query expression; Use \"*\" or omit this parameter to match all documents."
        },
        "searchFields": {
          "type": "string",
          "description": "The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter."
        },
        "searchMode": {
          "$ref": "#/definitions/SearchMode",
          "description": "A value that specifies whether any or all of the search terms must be matched in order to count the document as a match."
        },
        "queryLanguage": {
          "$ref": "#/definitions/QueryLanguage",
          "description": "A value that specifies the language of the search query."
        },
        "speller": {
          "$ref": "#/definitions/QuerySpellerType",
          "description": "A value that specified the type of the speller to use to spell-correct individual search query terms."
        },
        "select": {
          "type": "string",
          "description": "The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included."
        },
        "skip": {
          "type": "integer",
          "format": "int32",
          "description": "The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results."
        },
        "semanticConfiguration": {
          "type": "string",
          "description": "The name of a semantic configuration that will be used when processing documents for queries of type semantic."
        },
        "semanticErrorHandling": {
          "$ref": "#/definitions/SemanticErrorMode",
          "description": "Allows the user to choose whether a semantic call should fail completely (default / current behavior), or to return partial results."
        },
        "semanticMaxWaitInMilliseconds": {
          "type": "integer",
          "format": "int32",
          "description": "Allows the user to set an upper bound on the amount of time it takes for semantic enrichment to finish processing before the request fails.",
          "minimum": 700
        },
        "semanticQuery": {
          "type": "string",
          "description": "Allows setting a separate search query that will be solely used for semantic reranking, semantic captions and semantic answers. Is useful for scenarios where there is a need to use different queries between the base retrieval and ranking phase, and the L2 semantic phase."
        },
        "answers": {
          "$ref": "#/definitions/QueryAnswerType",
          "description": "A value that specifies whether answers should be returned as part of the search response."
        },
        "captions": {
          "$ref": "#/definitions/QueryCaptionType",
          "description": "A value that specifies whether captions should be returned as part of the search response."
        },
        "queryRewrites": {
          "$ref": "#/definitions/QueryRewritesType",
          "description": "A value that specifies whether query rewrites should be generated to augment the search query."
        },
        "semanticFields": {
          "type": "string",
          "description": "The comma-separated list of field names used for semantic ranking."
        },
        "vectorQueries": {
          "type": "array",
          "description": "The query parameters for vector and hybrid search queries.",
          "items": {
            "$ref": "#/definitions/VectorQuery"
          }
        },
        "vectorFilterMode": {
          "$ref": "#/definitions/VectorFilterMode",
          "description": "Determines whether or not filters are applied before or after the vector search is performed. Default is 'preFilter' for new indexes."
        },
        "hybridSearch": {
          "$ref": "#/definitions/HybridSearch",
          "description": "The query parameters to configure hybrid search behaviors."
        }
      }
    },
    "SearchResourceEncryptionKey": {
      "type": "object",
      "description": "A customer-managed encryption key in Azure Key Vault. Keys that you create and manage can be used to encrypt or decrypt data-at-rest, such as indexes and synonym maps.",
      "properties": {
        "keyVaultKeyName": {
          "type": "string",
          "description": "The name of your Azure Key Vault key to be used to encrypt your data at rest."
        },
        "keyVaultKeyVersion": {
          "type": "string",
          "description": "The version of your Azure Key Vault key to be used to encrypt your data at rest."
        },
        "keyVaultUri": {
          "type": "string",
          "description": "The URI of your Azure Key Vault, also referred to as DNS name, that contains the key to be used to encrypt your data at rest. An example URI might be `https://my-keyvault-name.vault.azure.net`."
        },
        "accessCredentials": {
          "$ref": "#/definitions/AzureActiveDirectoryApplicationCredentials",
          "description": "Optional Azure Active Directory credentials used for accessing your Azure Key Vault. Not required if using managed identity instead.",
          "x-ms-client-flatten": true
        },
        "identity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "An explicit managed identity to use for this encryption key. If not specified and the access credentials property is null, the system-assigned managed identity is used. On update to the resource, if the explicit identity is unspecified, it remains unchanged. If \"none\" is specified, the value of this property is cleared."
        }
      },
      "required": [
        "keyVaultKeyName",
        "keyVaultUri"
      ]
    },
    "SearchResult": {
      "type": "object",
      "description": "Contains a document found by a search query, plus associated metadata.",
      "properties": {
        "@search.score": {
          "type": "number",
          "format": "double",
          "description": "The relevance score of the document compared to other documents returned by the query.",
          "x-ms-client-name": "score"
        },
        "@search.rerankerScore": {
          "type": "number",
          "format": "double",
          "description": "The relevance score computed by the semantic ranker for the top search results. Search results are sorted by the RerankerScore first and then by the Score. RerankerScore is only returned for queries of type 'semantic'.",
          "x-ms-client-name": "rerankerScore"
        },
        "@search.rerankerBoostedScore": {
          "type": "number",
          "format": "double",
          "description": "The relevance score computed by boosting the Reranker Score. Search results are sorted by the RerankerScore/RerankerBoostedScore based on useScoringProfileBoostedRanking in the Semantic Config. RerankerBoostedScore is only returned for queries of type 'semantic'.",
          "x-ms-client-name": "rerankerBoostedScore"
        },
        "@search.highlights": {
          "type": "object",
          "description": "Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.",
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-ms-client-name": "highlights"
        },
        "@search.captions": {
          "type": "array",
          "description": "Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type 'semantic'.",
          "items": {
            "$ref": "#/definitions/QueryCaptionResult"
          },
          "x-ms-client-name": "captions"
        },
        "@search.documentDebugInfo": {
          "type": "array",
          "description": "Contains debugging information that can be used to further explore your search results.",
          "items": {
            "$ref": "#/definitions/DocumentDebugInfo"
          },
          "readOnly": true,
          "x-ms-client-name": "documentDebugInfo"
        }
      },
      "required": [
        "@search.score"
      ],
      "additionalProperties": {}
    },
    "SearchScoreThreshold": {
      "type": "object",
      "description": "The results of the vector query will filter based on the '@search.score' value. Note this is the @search.score returned as part of the search response. The threshold direction will be chosen for higher @search.score.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The threshold will filter based on the '@search.score' value. Note this is the @search.score returned as part of the search response. The threshold direction will be chosen for higher @search.score."
        }
      },
      "required": [
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VectorThreshold"
        }
      ],
      "x-ms-discriminator-value": "searchScore"
    },
    "SearchServiceCounters": {
      "type": "object",
      "description": "Represents service-level resource counters and quotas.",
      "properties": {
        "aliasesCount": {
          "$ref": "#/definitions/ResourceCounter",
          "description": "Total number of aliases."
        },
        "documentCount": {
          "$ref": "#/definitions/ResourceCounter",
          "description": "Total number of documents across all indexes in the service."
        },
        "indexesCount": {
          "$ref": "#/definitions/ResourceCounter",
          "description": "Total number of indexes."
        },
        "indexersCount": {
          "$ref": "#/definitions/ResourceCounter",
          "description": "Total number of indexers."
        },
        "dataSourcesCount": {
          "$ref": "#/definitions/ResourceCounter",
          "description": "Total number of data sources."
        },
        "storageSize": {
          "$ref": "#/definitions/ResourceCounter",
          "description": "Total size of used storage in bytes."
        },
        "synonymMaps": {
          "$ref": "#/definitions/ResourceCounter",
          "description": "Total number of synonym maps."
        },
        "skillsetCount": {
          "$ref": "#/definitions/ResourceCounter",
          "description": "Total number of skillsets."
        },
        "vectorIndexSize": {
          "$ref": "#/definitions/ResourceCounter",
          "description": "Total memory consumption of all vector indexes within the service, in bytes."
        }
      },
      "required": [
        "aliasesCount",
        "documentCount",
        "indexesCount",
        "indexersCount",
        "dataSourcesCount",
        "storageSize",
        "synonymMaps",
        "skillsetCount",
        "vectorIndexSize"
      ]
    },
    "SearchServiceLimits": {
      "type": "object",
      "description": "Represents various service level limits.",
      "properties": {
        "maxFieldsPerIndex": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum allowed fields per index."
        },
        "maxFieldNestingDepthPerIndex": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum depth which you can nest sub-fields in an index, including the top-level complex field. For example, a/b/c has a nesting depth of 3."
        },
        "maxComplexCollectionFieldsPerIndex": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of fields of type Collection(Edm.ComplexType) allowed in an index."
        },
        "maxComplexObjectsInCollectionsPerDocument": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of objects in complex collections allowed per document."
        },
        "maxStoragePerIndex": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of storage in bytes allowed per index."
        }
      }
    },
    "SearchServiceStatistics": {
      "type": "object",
      "description": "Response from a get service statistics request. If successful, it includes service level counters and limits.",
      "properties": {
        "counters": {
          "$ref": "#/definitions/SearchServiceCounters",
          "description": "Service level resource counters."
        },
        "limits": {
          "$ref": "#/definitions/SearchServiceLimits",
          "description": "Service level general limits."
        }
      },
      "required": [
        "counters",
        "limits"
      ]
    },
    "SearchSuggester": {
      "type": "object",
      "description": "Defines how the Suggest API should apply to a group of fields in the index.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the suggester."
        },
        "searchMode": {
          "type": "string",
          "description": "A value indicating the capabilities of the suggester.",
          "enum": [
            "analyzingInfixMatching"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "sourceFields": {
          "type": "array",
          "description": "The list of field names to which the suggester applies. Each field must be searchable.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "name",
        "searchMode",
        "sourceFields"
      ]
    },
    "SemanticConfiguration": {
      "type": "object",
      "description": "Defines a specific configuration to be used in the context of semantic capabilities.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the semantic configuration."
        },
        "prioritizedFields": {
          "$ref": "#/definitions/SemanticPrioritizedFields",
          "description": "Describes the title, content, and keyword fields to be used for semantic ranking, captions, highlights, and answers. At least one of the three sub properties (titleField, prioritizedKeywordsFields and prioritizedContentFields) need to be set."
        },
        "rankingOrder": {
          "$ref": "#/definitions/RankingOrder",
          "description": "Specifies the score type to be used for the sort order of the search results."
        },
        "flightingOptIn": {
          "type": "boolean",
          "description": "Determines which semantic or query rewrite models to use during model flighting/upgrades."
        }
      },
      "required": [
        "name",
        "prioritizedFields"
      ]
    },
    "SemanticDebugInfo": {
      "type": "object",
      "description": "Contains debugging information specific to semantic ranking requests.",
      "properties": {
        "titleField": {
          "$ref": "#/definitions/QueryResultDocumentSemanticField",
          "description": "The title field that was sent to the semantic enrichment process, as well as how it was used",
          "readOnly": true
        },
        "contentFields": {
          "type": "array",
          "description": "The content fields that were sent to the semantic enrichment process, as well as how they were used",
          "items": {
            "$ref": "#/definitions/QueryResultDocumentSemanticField"
          },
          "readOnly": true
        },
        "keywordFields": {
          "type": "array",
          "description": "The keyword fields that were sent to the semantic enrichment process, as well as how they were used",
          "items": {
            "$ref": "#/definitions/QueryResultDocumentSemanticField"
          },
          "readOnly": true
        },
        "rerankerInput": {
          "$ref": "#/definitions/QueryResultDocumentRerankerInput",
          "description": "The raw concatenated strings that were sent to the semantic enrichment process.",
          "readOnly": true
        }
      }
    },
    "SemanticErrorMode": {
      "type": "string",
      "description": "Allows the user to choose whether a semantic call should fail completely, or to return partial results.",
      "enum": [
        "partial",
        "fail"
      ],
      "x-ms-enum": {
        "name": "SemanticErrorMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Partial",
            "value": "partial",
            "description": "If the semantic processing fails, partial results still return. The definition of partial results depends on what semantic step failed and what was the reason for failure."
          },
          {
            "name": "Fail",
            "value": "fail",
            "description": "If there is an exception during the semantic processing step, the query will fail and return the appropriate HTTP code depending on the error."
          }
        ]
      }
    },
    "SemanticErrorReason": {
      "type": "string",
      "description": "Reason that a partial response was returned for a semantic ranking request.",
      "enum": [
        "maxWaitExceeded",
        "capacityOverloaded",
        "transient"
      ],
      "x-ms-enum": {
        "name": "SemanticErrorReason",
        "modelAsString": true,
        "values": [
          {
            "name": "MaxWaitExceeded",
            "value": "maxWaitExceeded",
            "description": "If `semanticMaxWaitInMilliseconds` was set and the semantic processing duration exceeded that value. Only the base results were returned."
          },
          {
            "name": "CapacityOverloaded",
            "value": "capacityOverloaded",
            "description": "The request was throttled. Only the base results were returned."
          },
          {
            "name": "Transient",
            "value": "transient",
            "description": "At least one step of the semantic process failed."
          }
        ]
      }
    },
    "SemanticField": {
      "type": "object",
      "description": "A field that is used as part of the semantic configuration.",
      "properties": {
        "fieldName": {
          "type": "string",
          "description": "File name"
        }
      },
      "required": [
        "fieldName"
      ]
    },
    "SemanticFieldState": {
      "type": "string",
      "description": "The way the field was used for the semantic enrichment process.",
      "enum": [
        "used",
        "unused",
        "partial"
      ],
      "x-ms-enum": {
        "name": "SemanticFieldState",
        "modelAsString": true,
        "values": [
          {
            "name": "Used",
            "value": "used",
            "description": "The field was fully used for semantic enrichment."
          },
          {
            "name": "Unused",
            "value": "unused",
            "description": "The field was not used for semantic enrichment."
          },
          {
            "name": "Partial",
            "value": "partial",
            "description": "The field was partially used for semantic enrichment."
          }
        ]
      }
    },
    "SemanticPrioritizedFields": {
      "type": "object",
      "description": "Describes the title, content, and keywords fields to be used for semantic ranking, captions, highlights, and answers.",
      "properties": {
        "titleField": {
          "$ref": "#/definitions/SemanticField",
          "description": "Defines the title field to be used for semantic ranking, captions, highlights, and answers. If you don't have a title field in your index, leave this blank."
        },
        "prioritizedContentFields": {
          "type": "array",
          "description": "Defines the content fields to be used for semantic ranking, captions, highlights, and answers. For the best result, the selected fields should contain text in natural language form. The order of the fields in the array represents their priority. Fields with lower priority may get truncated if the content is long.",
          "items": {
            "$ref": "#/definitions/SemanticField"
          }
        },
        "prioritizedKeywordsFields": {
          "type": "array",
          "description": "Defines the keyword fields to be used for semantic ranking, captions, highlights, and answers. For the best result, the selected fields should contain a list of keywords. The order of the fields in the array represents their priority. Fields with lower priority may get truncated if the content is long.",
          "items": {
            "$ref": "#/definitions/SemanticField"
          }
        }
      }
    },
    "SemanticQueryRewritesResultType": {
      "type": "string",
      "description": "Type of query rewrite that was used for this request.",
      "enum": [
        "originalQueryOnly"
      ],
      "x-ms-enum": {
        "name": "SemanticQueryRewritesResultType",
        "modelAsString": true,
        "values": [
          {
            "name": "OriginalQueryOnly",
            "value": "originalQueryOnly",
            "description": "Query rewrites were not successfully generated for this request. Only the original query was used to retrieve the results."
          }
        ]
      }
    },
    "SemanticSearch": {
      "type": "object",
      "description": "Defines parameters for a search index that influence semantic capabilities.",
      "properties": {
        "defaultConfiguration": {
          "type": "string",
          "description": "Allows you to set the name of a default semantic configuration in your index, making it optional to pass it on as a query parameter every time."
        },
        "configurations": {
          "type": "array",
          "description": "The semantic configurations for the index.",
          "items": {
            "$ref": "#/definitions/SemanticConfiguration"
          }
        }
      }
    },
    "SemanticSearchResultsType": {
      "type": "string",
      "description": "Type of partial response that was returned for a semantic ranking request.",
      "enum": [
        "baseResults",
        "rerankedResults"
      ],
      "x-ms-enum": {
        "name": "SemanticSearchResultsType",
        "modelAsString": true,
        "values": [
          {
            "name": "BaseResults",
            "value": "baseResults",
            "description": "Results without any semantic enrichment or reranking."
          },
          {
            "name": "RerankedResults",
            "value": "rerankedResults",
            "description": "Results have been reranked with the reranker model and will include semantic captions. They will not include any answers, answers highlights or caption highlights."
          }
        ]
      }
    },
    "SentimentSkill": {
      "type": "object",
      "description": "This skill is deprecated. Use the V3.SentimentSkill instead.",
      "properties": {
        "defaultLanguageCode": {
          "$ref": "#/definitions/SentimentSkillLanguage",
          "description": "A value indicating which language code to use. Default is `en`."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.SentimentSkill"
    },
    "SentimentSkillLanguage": {
      "type": "string",
      "description": "Deprecated. The language codes supported for input text by SentimentSkill.",
      "enum": [
        "da",
        "nl",
        "en",
        "fi",
        "fr",
        "de",
        "el",
        "it",
        "no",
        "pl",
        "pt-PT",
        "ru",
        "es",
        "sv",
        "tr"
      ],
      "x-ms-enum": {
        "name": "SentimentSkillLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "da",
            "value": "da",
            "description": "Danish"
          },
          {
            "name": "nl",
            "value": "nl",
            "description": "Dutch"
          },
          {
            "name": "en",
            "value": "en",
            "description": "English"
          },
          {
            "name": "fi",
            "value": "fi",
            "description": "Finnish"
          },
          {
            "name": "fr",
            "value": "fr",
            "description": "French"
          },
          {
            "name": "de",
            "value": "de",
            "description": "German"
          },
          {
            "name": "el",
            "value": "el",
            "description": "Greek"
          },
          {
            "name": "it",
            "value": "it",
            "description": "Italian"
          },
          {
            "name": "no",
            "value": "no",
            "description": "Norwegian (Bokmaal)"
          },
          {
            "name": "pl",
            "value": "pl",
            "description": "Polish"
          },
          {
            "name": "pt-PT",
            "value": "pt-PT",
            "description": "Portuguese (Portugal)"
          },
          {
            "name": "ru",
            "value": "ru",
            "description": "Russian"
          },
          {
            "name": "es",
            "value": "es",
            "description": "Spanish"
          },
          {
            "name": "sv",
            "value": "sv",
            "description": "Swedish"
          },
          {
            "name": "tr",
            "value": "tr",
            "description": "Turkish"
          }
        ]
      }
    },
    "SentimentSkillV3": {
      "type": "object",
      "description": "Using the Text Analytics API, evaluates unstructured text and for each record, provides sentiment labels (such as \"negative\", \"neutral\" and \"positive\") based on the highest confidence score found by the service at a sentence and document-level.",
      "properties": {
        "defaultLanguageCode": {
          "type": "string",
          "description": "A value indicating which language code to use. Default is `en`."
        },
        "includeOpinionMining": {
          "type": "boolean",
          "description": "If set to true, the skill output will include information from Text Analytics for opinion mining, namely targets (nouns or verbs) and their associated assessment (adjective) in the text. Default is false."
        },
        "modelVersion": {
          "type": "string",
          "description": "The version of the model to use when calling the Text Analytics service. It will default to the latest available when not specified. We recommend you do not specify this value unless absolutely necessary."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.V3.SentimentSkill"
    },
    "ShaperSkill": {
      "type": "object",
      "description": "A skill for reshaping the outputs. It creates a complex type to support composite fields (also known as multipart fields).",
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Util.ShaperSkill"
    },
    "SharePointSensitivityLabelInfo": {
      "type": "object",
      "description": "Information about the sensitivity label applied to a SharePoint document.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The display name for the sensitivity label."
        },
        "sensitivityLabelId": {
          "type": "string",
          "description": "The ID of the sensitivity label."
        },
        "tooltip": {
          "type": "string",
          "description": "The tooltip that should be displayed for the label in a UI."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The priority in which the sensitivity label is applied."
        },
        "color": {
          "type": "string",
          "description": "The color that the UI should display for the label, if configured."
        },
        "isEncrypted": {
          "type": "boolean",
          "description": "Indicates whether the sensitivity label enforces encryption."
        }
      }
    },
    "ShingleTokenFilter": {
      "type": "object",
      "description": "Creates combinations of tokens as a single token. This token filter is implemented using Apache Lucene.",
      "properties": {
        "maxShingleSize": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum shingle size. Default and minimum value is 2.",
          "default": 2,
          "minimum": 2
        },
        "minShingleSize": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum shingle size. Default and minimum value is 2. Must be less than the value of maxShingleSize.",
          "default": 2,
          "minimum": 2
        },
        "outputUnigrams": {
          "type": "boolean",
          "description": "A value indicating whether the output stream will contain the input tokens (unigrams) as well as shingles. Default is true.",
          "default": true
        },
        "outputUnigramsIfNoShingles": {
          "type": "boolean",
          "description": "A value indicating whether to output unigrams for those times when no shingles are available. This property takes precedence when outputUnigrams is set to false. Default is false."
        },
        "tokenSeparator": {
          "type": "string",
          "description": "The string to use when joining adjacent tokens to form a shingle. Default is a single space (\" \").",
          "default": " "
        },
        "filterToken": {
          "type": "string",
          "description": "The string to insert for each position at which there is no token. Default is an underscore (\"_\").",
          "default": "_"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.ShingleTokenFilter"
    },
    "SimilarityAlgorithm": {
      "type": "object",
      "description": "Base type for similarity algorithms. Similarity algorithms are used to calculate scores that tie queries to documents. The higher the score, the more relevant the document is to that specific query. Those scores are used to rank the search results.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "The discriminator for derived types."
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type"
      ]
    },
    "SingleVectorFieldResult": {
      "type": "object",
      "description": "A single vector field result. Both @search.score and vector similarity values are returned. Vector similarity is related to @search.score by an equation.",
      "properties": {
        "searchScore": {
          "type": "number",
          "format": "double",
          "description": "The @search.score value that is calculated from the vector similarity score. This is the score that's visible in a pure single-field single-vector query.",
          "readOnly": true
        },
        "vectorSimilarity": {
          "type": "number",
          "format": "double",
          "description": "The vector similarity score for this document. Note this is the canonical definition of similarity metric, not the 'distance' version. For example, cosine similarity instead of cosine distance.",
          "readOnly": true
        }
      }
    },
    "SkillNames": {
      "type": "object",
      "description": "The type of the skill names.",
      "properties": {
        "skillNames": {
          "type": "array",
          "description": "the names of skills to be reset.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SnowballTokenFilter": {
      "type": "object",
      "description": "A filter that stems words using a Snowball-generated stemmer. This token filter is implemented using Apache Lucene.",
      "properties": {
        "language": {
          "$ref": "#/definitions/SnowballTokenFilterLanguage",
          "description": "The language to use."
        }
      },
      "required": [
        "language"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.SnowballTokenFilter"
    },
    "SnowballTokenFilterLanguage": {
      "type": "string",
      "description": "The language to use for a Snowball token filter.",
      "enum": [
        "armenian",
        "basque",
        "catalan",
        "danish",
        "dutch",
        "english",
        "finnish",
        "french",
        "german",
        "german2",
        "hungarian",
        "italian",
        "kp",
        "lovins",
        "norwegian",
        "porter",
        "portuguese",
        "romanian",
        "russian",
        "spanish",
        "swedish",
        "turkish"
      ],
      "x-ms-enum": {
        "name": "SnowballTokenFilterLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "Armenian",
            "value": "armenian",
            "description": "Selects the Lucene Snowball stemming tokenizer for Armenian."
          },
          {
            "name": "Basque",
            "value": "basque",
            "description": "Selects the Lucene Snowball stemming tokenizer for Basque."
          },
          {
            "name": "Catalan",
            "value": "catalan",
            "description": "Selects the Lucene Snowball stemming tokenizer for Catalan."
          },
          {
            "name": "Danish",
            "value": "danish",
            "description": "Selects the Lucene Snowball stemming tokenizer for Danish."
          },
          {
            "name": "Dutch",
            "value": "dutch",
            "description": "Selects the Lucene Snowball stemming tokenizer for Dutch."
          },
          {
            "name": "English",
            "value": "english",
            "description": "Selects the Lucene Snowball stemming tokenizer for English."
          },
          {
            "name": "Finnish",
            "value": "finnish",
            "description": "Selects the Lucene Snowball stemming tokenizer for Finnish."
          },
          {
            "name": "French",
            "value": "french",
            "description": "Selects the Lucene Snowball stemming tokenizer for French."
          },
          {
            "name": "German",
            "value": "german",
            "description": "Selects the Lucene Snowball stemming tokenizer for German."
          },
          {
            "name": "German2",
            "value": "german2",
            "description": "Selects the Lucene Snowball stemming tokenizer that uses the German variant algorithm."
          },
          {
            "name": "Hungarian",
            "value": "hungarian",
            "description": "Selects the Lucene Snowball stemming tokenizer for Hungarian."
          },
          {
            "name": "Italian",
            "value": "italian",
            "description": "Selects the Lucene Snowball stemming tokenizer for Italian."
          },
          {
            "name": "Kp",
            "value": "kp",
            "description": "Selects the Lucene Snowball stemming tokenizer for Dutch that uses the Kraaij-Pohlmann stemming algorithm."
          },
          {
            "name": "Lovins",
            "value": "lovins",
            "description": "Selects the Lucene Snowball stemming tokenizer for English that uses the Lovins stemming algorithm."
          },
          {
            "name": "Norwegian",
            "value": "norwegian",
            "description": "Selects the Lucene Snowball stemming tokenizer for Norwegian."
          },
          {
            "name": "Porter",
            "value": "porter",
            "description": "Selects the Lucene Snowball stemming tokenizer for English that uses the Porter stemming algorithm."
          },
          {
            "name": "Portuguese",
            "value": "portuguese",
            "description": "Selects the Lucene Snowball stemming tokenizer for Portuguese."
          },
          {
            "name": "Romanian",
            "value": "romanian",
            "description": "Selects the Lucene Snowball stemming tokenizer for Romanian."
          },
          {
            "name": "Russian",
            "value": "russian",
            "description": "Selects the Lucene Snowball stemming tokenizer for Russian."
          },
          {
            "name": "Spanish",
            "value": "spanish",
            "description": "Selects the Lucene Snowball stemming tokenizer for Spanish."
          },
          {
            "name": "Swedish",
            "value": "swedish",
            "description": "Selects the Lucene Snowball stemming tokenizer for Swedish."
          },
          {
            "name": "Turkish",
            "value": "turkish",
            "description": "Selects the Lucene Snowball stemming tokenizer for Turkish."
          }
        ]
      }
    },
    "SoftDeleteColumnDeletionDetectionPolicy": {
      "type": "object",
      "description": "Defines a data deletion detection policy that implements a soft-deletion strategy. It determines whether an item should be deleted based on the value of a designated 'soft delete' column.",
      "properties": {
        "softDeleteColumnName": {
          "type": "string",
          "description": "The name of the column to use for soft-deletion detection."
        },
        "softDeleteMarkerValue": {
          "type": "string",
          "description": "The marker value that identifies an item as deleted."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DataDeletionDetectionPolicy"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy"
    },
    "SplitSkill": {
      "type": "object",
      "description": "A skill to split a string into chunks of text.",
      "properties": {
        "defaultLanguageCode": {
          "$ref": "#/definitions/SplitSkillLanguage",
          "description": "A value indicating which language code to use. Default is `en`."
        },
        "textSplitMode": {
          "$ref": "#/definitions/TextSplitMode",
          "description": "A value indicating which split mode to perform."
        },
        "maximumPageLength": {
          "type": "integer",
          "format": "int32",
          "description": "The desired maximum page length. Default is 10000."
        },
        "pageOverlapLength": {
          "type": "integer",
          "format": "int32",
          "description": "Only applicable when textSplitMode is set to 'pages'. If specified, n+1th chunk will start with this number of characters/tokens from the end of the nth chunk."
        },
        "maximumPagesToTake": {
          "type": "integer",
          "format": "int32",
          "description": "Only applicable when textSplitMode is set to 'pages'. If specified, the SplitSkill will discontinue splitting after processing the first 'maximumPagesToTake' pages, in order to improve performance when only a few initial pages are needed from each document."
        },
        "unit": {
          "$ref": "#/definitions/SplitSkillUnit",
          "description": "Only applies if textSplitMode is set to pages. There are two possible values. The choice of the values will decide the length (maximumPageLength and pageOverlapLength) measurement. The default is 'characters', which means the length will be measured by character."
        },
        "azureOpenAITokenizerParameters": {
          "$ref": "#/definitions/AzureOpenAITokenizerParameters",
          "description": "Only applies if the unit is set to azureOpenAITokens. If specified, the splitSkill will use these parameters when performing the tokenization. The parameters are a valid 'encoderModelName' and an optional 'allowedSpecialTokens' property."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.SplitSkill"
    },
    "SplitSkillEncoderModelName": {
      "type": "string",
      "description": "A value indicating which tokenizer to use.",
      "enum": [
        "r50k_base",
        "p50k_base",
        "p50k_edit",
        "cl100k_base"
      ],
      "x-ms-enum": {
        "name": "SplitSkillEncoderModelName",
        "modelAsString": true,
        "values": [
          {
            "name": "R50kBase",
            "value": "r50k_base",
            "description": "Refers to a base model trained with a 50,000 token vocabulary, often used in general natural language processing tasks."
          },
          {
            "name": "P50kBase",
            "value": "p50k_base",
            "description": "A base model with a 50,000 token vocabulary, optimized for prompt-based tasks."
          },
          {
            "name": "P50kEdit",
            "value": "p50k_edit",
            "description": "Similar to p50k_base but fine-tuned for editing or rephrasing tasks with a 50,000 token vocabulary."
          },
          {
            "name": "CL100kBase",
            "value": "cl100k_base",
            "description": "A base model with a 100,000 token vocabulary."
          }
        ]
      }
    },
    "SplitSkillLanguage": {
      "type": "string",
      "description": "The language codes supported for input text by SplitSkill.",
      "enum": [
        "am",
        "bs",
        "cs",
        "da",
        "de",
        "en",
        "es",
        "et",
        "fi",
        "fr",
        "he",
        "hi",
        "hr",
        "hu",
        "id",
        "is",
        "it",
        "ja",
        "ko",
        "lv",
        "nb",
        "nl",
        "pl",
        "pt",
        "pt-br",
        "ru",
        "sk",
        "sl",
        "sr",
        "sv",
        "tr",
        "ur",
        "zh"
      ],
      "x-ms-enum": {
        "name": "SplitSkillLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "am",
            "value": "am",
            "description": "Amharic"
          },
          {
            "name": "bs",
            "value": "bs",
            "description": "Bosnian"
          },
          {
            "name": "cs",
            "value": "cs",
            "description": "Czech"
          },
          {
            "name": "da",
            "value": "da",
            "description": "Danish"
          },
          {
            "name": "de",
            "value": "de",
            "description": "German"
          },
          {
            "name": "en",
            "value": "en",
            "description": "English"
          },
          {
            "name": "es",
            "value": "es",
            "description": "Spanish"
          },
          {
            "name": "et",
            "value": "et",
            "description": "Estonian"
          },
          {
            "name": "fi",
            "value": "fi",
            "description": "Finnish"
          },
          {
            "name": "fr",
            "value": "fr",
            "description": "French"
          },
          {
            "name": "he",
            "value": "he",
            "description": "Hebrew"
          },
          {
            "name": "hi",
            "value": "hi",
            "description": "Hindi"
          },
          {
            "name": "hr",
            "value": "hr",
            "description": "Croatian"
          },
          {
            "name": "hu",
            "value": "hu",
            "description": "Hungarian"
          },
          {
            "name": "id",
            "value": "id",
            "description": "Indonesian"
          },
          {
            "name": "is",
            "value": "is",
            "description": "Icelandic"
          },
          {
            "name": "it",
            "value": "it",
            "description": "Italian"
          },
          {
            "name": "ja",
            "value": "ja",
            "description": "Japanese"
          },
          {
            "name": "ko",
            "value": "ko",
            "description": "Korean"
          },
          {
            "name": "lv",
            "value": "lv",
            "description": "Latvian"
          },
          {
            "name": "nb",
            "value": "nb",
            "description": "Norwegian"
          },
          {
            "name": "nl",
            "value": "nl",
            "description": "Dutch"
          },
          {
            "name": "pl",
            "value": "pl",
            "description": "Polish"
          },
          {
            "name": "pt",
            "value": "pt",
            "description": "Portuguese (Portugal)"
          },
          {
            "name": "pt-br",
            "value": "pt-br",
            "description": "Portuguese (Brazil)"
          },
          {
            "name": "ru",
            "value": "ru",
            "description": "Russian"
          },
          {
            "name": "sk",
            "value": "sk",
            "description": "Slovak"
          },
          {
            "name": "sl",
            "value": "sl",
            "description": "Slovenian"
          },
          {
            "name": "sr",
            "value": "sr",
            "description": "Serbian"
          },
          {
            "name": "sv",
            "value": "sv",
            "description": "Swedish"
          },
          {
            "name": "tr",
            "value": "tr",
            "description": "Turkish"
          },
          {
            "name": "ur",
            "value": "ur",
            "description": "Urdu"
          },
          {
            "name": "zh",
            "value": "zh",
            "description": "Chinese (Simplified)"
          }
        ]
      }
    },
    "SplitSkillUnit": {
      "type": "string",
      "description": "A value indicating which unit to use.",
      "enum": [
        "characters",
        "azureOpenAITokens"
      ],
      "x-ms-enum": {
        "name": "SplitSkillUnit",
        "modelAsString": true,
        "values": [
          {
            "name": "Characters",
            "value": "characters",
            "description": "The length will be measured by character."
          },
          {
            "name": "AzureOpenAITokens",
            "value": "azureOpenAITokens",
            "description": "The length will be measured by an AzureOpenAI tokenizer from the tiktoken library."
          }
        ]
      }
    },
    "SqlIntegratedChangeTrackingPolicy": {
      "type": "object",
      "description": "Defines a data change detection policy that captures changes using the Integrated Change Tracking feature of Azure SQL Database.",
      "allOf": [
        {
          "$ref": "#/definitions/DataChangeDetectionPolicy"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy"
    },
    "StemmerOverrideTokenFilter": {
      "type": "object",
      "description": "Provides the ability to override other stemming filters with custom dictionary-based stemming. Any dictionary-stemmed terms will be marked as keywords so that they will not be stemmed with stemmers down the chain. Must be placed before any stemming filters. This token filter is implemented using Apache Lucene.",
      "properties": {
        "rules": {
          "type": "array",
          "description": "A list of stemming rules in the following format: \"word => stem\", for example: \"ran => run\".",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "rules"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.StemmerOverrideTokenFilter"
    },
    "StemmerTokenFilter": {
      "type": "object",
      "description": "Language specific stemming filter. This token filter is implemented using Apache Lucene.",
      "properties": {
        "language": {
          "$ref": "#/definitions/StemmerTokenFilterLanguage",
          "description": "The language to use."
        }
      },
      "required": [
        "language"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.StemmerTokenFilter"
    },
    "StemmerTokenFilterLanguage": {
      "type": "string",
      "description": "The language to use for a stemmer token filter.",
      "enum": [
        "arabic",
        "armenian",
        "basque",
        "brazilian",
        "bulgarian",
        "catalan",
        "czech",
        "danish",
        "dutch",
        "dutchKp",
        "english",
        "lightEnglish",
        "minimalEnglish",
        "possessiveEnglish",
        "porter2",
        "lovins",
        "finnish",
        "lightFinnish",
        "french",
        "lightFrench",
        "minimalFrench",
        "galician",
        "minimalGalician",
        "german",
        "german2",
        "lightGerman",
        "minimalGerman",
        "greek",
        "hindi",
        "hungarian",
        "lightHungarian",
        "indonesian",
        "irish",
        "italian",
        "lightItalian",
        "sorani",
        "latvian",
        "norwegian",
        "lightNorwegian",
        "minimalNorwegian",
        "lightNynorsk",
        "minimalNynorsk",
        "portuguese",
        "lightPortuguese",
        "minimalPortuguese",
        "portugueseRslp",
        "romanian",
        "russian",
        "lightRussian",
        "spanish",
        "lightSpanish",
        "swedish",
        "lightSwedish",
        "turkish"
      ],
      "x-ms-enum": {
        "name": "StemmerTokenFilterLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "Arabic",
            "value": "arabic",
            "description": "Selects the Lucene stemming tokenizer for Arabic."
          },
          {
            "name": "Armenian",
            "value": "armenian",
            "description": "Selects the Lucene stemming tokenizer for Armenian."
          },
          {
            "name": "Basque",
            "value": "basque",
            "description": "Selects the Lucene stemming tokenizer for Basque."
          },
          {
            "name": "Brazilian",
            "value": "brazilian",
            "description": "Selects the Lucene stemming tokenizer for Portuguese (Brazil)."
          },
          {
            "name": "Bulgarian",
            "value": "bulgarian",
            "description": "Selects the Lucene stemming tokenizer for Bulgarian."
          },
          {
            "name": "Catalan",
            "value": "catalan",
            "description": "Selects the Lucene stemming tokenizer for Catalan."
          },
          {
            "name": "Czech",
            "value": "czech",
            "description": "Selects the Lucene stemming tokenizer for Czech."
          },
          {
            "name": "Danish",
            "value": "danish",
            "description": "Selects the Lucene stemming tokenizer for Danish."
          },
          {
            "name": "Dutch",
            "value": "dutch",
            "description": "Selects the Lucene stemming tokenizer for Dutch."
          },
          {
            "name": "DutchKp",
            "value": "dutchKp",
            "description": "Selects the Lucene stemming tokenizer for Dutch that uses the Kraaij-Pohlmann stemming algorithm."
          },
          {
            "name": "English",
            "value": "english",
            "description": "Selects the Lucene stemming tokenizer for English."
          },
          {
            "name": "LightEnglish",
            "value": "lightEnglish",
            "description": "Selects the Lucene stemming tokenizer for English that does light stemming."
          },
          {
            "name": "MinimalEnglish",
            "value": "minimalEnglish",
            "description": "Selects the Lucene stemming tokenizer for English that does minimal stemming."
          },
          {
            "name": "PossessiveEnglish",
            "value": "possessiveEnglish",
            "description": "Selects the Lucene stemming tokenizer for English that removes trailing possessives from words."
          },
          {
            "name": "Porter2",
            "value": "porter2",
            "description": "Selects the Lucene stemming tokenizer for English that uses the Porter2 stemming algorithm."
          },
          {
            "name": "Lovins",
            "value": "lovins",
            "description": "Selects the Lucene stemming tokenizer for English that uses the Lovins stemming algorithm."
          },
          {
            "name": "Finnish",
            "value": "finnish",
            "description": "Selects the Lucene stemming tokenizer for Finnish."
          },
          {
            "name": "LightFinnish",
            "value": "lightFinnish",
            "description": "Selects the Lucene stemming tokenizer for Finnish that does light stemming."
          },
          {
            "name": "French",
            "value": "french",
            "description": "Selects the Lucene stemming tokenizer for French."
          },
          {
            "name": "LightFrench",
            "value": "lightFrench",
            "description": "Selects the Lucene stemming tokenizer for French that does light stemming."
          },
          {
            "name": "MinimalFrench",
            "value": "minimalFrench",
            "description": "Selects the Lucene stemming tokenizer for French that does minimal stemming."
          },
          {
            "name": "Galician",
            "value": "galician",
            "description": "Selects the Lucene stemming tokenizer for Galician."
          },
          {
            "name": "MinimalGalician",
            "value": "minimalGalician",
            "description": "Selects the Lucene stemming tokenizer for Galician that does minimal stemming."
          },
          {
            "name": "German",
            "value": "german",
            "description": "Selects the Lucene stemming tokenizer for German."
          },
          {
            "name": "German2",
            "value": "german2",
            "description": "Selects the Lucene stemming tokenizer that uses the German variant algorithm."
          },
          {
            "name": "LightGerman",
            "value": "lightGerman",
            "description": "Selects the Lucene stemming tokenizer for German that does light stemming."
          },
          {
            "name": "MinimalGerman",
            "value": "minimalGerman",
            "description": "Selects the Lucene stemming tokenizer for German that does minimal stemming."
          },
          {
            "name": "Greek",
            "value": "greek",
            "description": "Selects the Lucene stemming tokenizer for Greek."
          },
          {
            "name": "Hindi",
            "value": "hindi",
            "description": "Selects the Lucene stemming tokenizer for Hindi."
          },
          {
            "name": "Hungarian",
            "value": "hungarian",
            "description": "Selects the Lucene stemming tokenizer for Hungarian."
          },
          {
            "name": "LightHungarian",
            "value": "lightHungarian",
            "description": "Selects the Lucene stemming tokenizer for Hungarian that does light stemming."
          },
          {
            "name": "Indonesian",
            "value": "indonesian",
            "description": "Selects the Lucene stemming tokenizer for Indonesian."
          },
          {
            "name": "Irish",
            "value": "irish",
            "description": "Selects the Lucene stemming tokenizer for Irish."
          },
          {
            "name": "Italian",
            "value": "italian",
            "description": "Selects the Lucene stemming tokenizer for Italian."
          },
          {
            "name": "LightItalian",
            "value": "lightItalian",
            "description": "Selects the Lucene stemming tokenizer for Italian that does light stemming."
          },
          {
            "name": "Sorani",
            "value": "sorani",
            "description": "Selects the Lucene stemming tokenizer for Sorani."
          },
          {
            "name": "Latvian",
            "value": "latvian",
            "description": "Selects the Lucene stemming tokenizer for Latvian."
          },
          {
            "name": "Norwegian",
            "value": "norwegian",
            "description": "Selects the Lucene stemming tokenizer for Norwegian (BokmÃ¥l)."
          },
          {
            "name": "LightNorwegian",
            "value": "lightNorwegian",
            "description": "Selects the Lucene stemming tokenizer for Norwegian (BokmÃ¥l) that does light stemming."
          },
          {
            "name": "MinimalNorwegian",
            "value": "minimalNorwegian",
            "description": "Selects the Lucene stemming tokenizer for Norwegian (BokmÃ¥l) that does minimal stemming."
          },
          {
            "name": "LightNynorsk",
            "value": "lightNynorsk",
            "description": "Selects the Lucene stemming tokenizer for Norwegian (Nynorsk) that does light stemming."
          },
          {
            "name": "MinimalNynorsk",
            "value": "minimalNynorsk",
            "description": "Selects the Lucene stemming tokenizer for Norwegian (Nynorsk) that does minimal stemming."
          },
          {
            "name": "Portuguese",
            "value": "portuguese",
            "description": "Selects the Lucene stemming tokenizer for Portuguese."
          },
          {
            "name": "LightPortuguese",
            "value": "lightPortuguese",
            "description": "Selects the Lucene stemming tokenizer for Portuguese that does light stemming."
          },
          {
            "name": "MinimalPortuguese",
            "value": "minimalPortuguese",
            "description": "Selects the Lucene stemming tokenizer for Portuguese that does minimal stemming."
          },
          {
            "name": "PortugueseRslp",
            "value": "portugueseRslp",
            "description": "Selects the Lucene stemming tokenizer for Portuguese that uses the RSLP stemming algorithm."
          },
          {
            "name": "Romanian",
            "value": "romanian",
            "description": "Selects the Lucene stemming tokenizer for Romanian."
          },
          {
            "name": "Russian",
            "value": "russian",
            "description": "Selects the Lucene stemming tokenizer for Russian."
          },
          {
            "name": "LightRussian",
            "value": "lightRussian",
            "description": "Selects the Lucene stemming tokenizer for Russian that does light stemming."
          },
          {
            "name": "Spanish",
            "value": "spanish",
            "description": "Selects the Lucene stemming tokenizer for Spanish."
          },
          {
            "name": "LightSpanish",
            "value": "lightSpanish",
            "description": "Selects the Lucene stemming tokenizer for Spanish that does light stemming."
          },
          {
            "name": "Swedish",
            "value": "swedish",
            "description": "Selects the Lucene stemming tokenizer for Swedish."
          },
          {
            "name": "LightSwedish",
            "value": "lightSwedish",
            "description": "Selects the Lucene stemming tokenizer for Swedish that does light stemming."
          },
          {
            "name": "Turkish",
            "value": "turkish",
            "description": "Selects the Lucene stemming tokenizer for Turkish."
          }
        ]
      }
    },
    "StopAnalyzer": {
      "type": "object",
      "description": "Divides text at non-letters; Applies the lowercase and stopword token filters. This analyzer is implemented using Apache Lucene.",
      "properties": {
        "stopwords": {
          "type": "array",
          "description": "A list of stopwords.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalAnalyzer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.StopAnalyzer"
    },
    "StopwordsList": {
      "type": "string",
      "description": "Identifies a predefined list of language-specific stopwords.",
      "enum": [
        "arabic",
        "armenian",
        "basque",
        "brazilian",
        "bulgarian",
        "catalan",
        "czech",
        "danish",
        "dutch",
        "english",
        "finnish",
        "french",
        "galician",
        "german",
        "greek",
        "hindi",
        "hungarian",
        "indonesian",
        "irish",
        "italian",
        "latvian",
        "norwegian",
        "persian",
        "portuguese",
        "romanian",
        "russian",
        "sorani",
        "spanish",
        "swedish",
        "thai",
        "turkish"
      ],
      "x-ms-enum": {
        "name": "StopwordsList",
        "modelAsString": true,
        "values": [
          {
            "name": "Arabic",
            "value": "arabic",
            "description": "Selects the stopword list for Arabic."
          },
          {
            "name": "Armenian",
            "value": "armenian",
            "description": "Selects the stopword list for Armenian."
          },
          {
            "name": "Basque",
            "value": "basque",
            "description": "Selects the stopword list for Basque."
          },
          {
            "name": "Brazilian",
            "value": "brazilian",
            "description": "Selects the stopword list for Portuguese (Brazil)."
          },
          {
            "name": "Bulgarian",
            "value": "bulgarian",
            "description": "Selects the stopword list for Bulgarian."
          },
          {
            "name": "Catalan",
            "value": "catalan",
            "description": "Selects the stopword list for Catalan."
          },
          {
            "name": "Czech",
            "value": "czech",
            "description": "Selects the stopword list for Czech."
          },
          {
            "name": "Danish",
            "value": "danish",
            "description": "Selects the stopword list for Danish."
          },
          {
            "name": "Dutch",
            "value": "dutch",
            "description": "Selects the stopword list for Dutch."
          },
          {
            "name": "English",
            "value": "english",
            "description": "Selects the stopword list for English."
          },
          {
            "name": "Finnish",
            "value": "finnish",
            "description": "Selects the stopword list for Finnish."
          },
          {
            "name": "French",
            "value": "french",
            "description": "Selects the stopword list for French."
          },
          {
            "name": "Galician",
            "value": "galician",
            "description": "Selects the stopword list for Galician."
          },
          {
            "name": "German",
            "value": "german",
            "description": "Selects the stopword list for German."
          },
          {
            "name": "Greek",
            "value": "greek",
            "description": "Selects the stopword list for Greek."
          },
          {
            "name": "Hindi",
            "value": "hindi",
            "description": "Selects the stopword list for Hindi."
          },
          {
            "name": "Hungarian",
            "value": "hungarian",
            "description": "Selects the stopword list for Hungarian."
          },
          {
            "name": "Indonesian",
            "value": "indonesian",
            "description": "Selects the stopword list for Indonesian."
          },
          {
            "name": "Irish",
            "value": "irish",
            "description": "Selects the stopword list for Irish."
          },
          {
            "name": "Italian",
            "value": "italian",
            "description": "Selects the stopword list for Italian."
          },
          {
            "name": "Latvian",
            "value": "latvian",
            "description": "Selects the stopword list for Latvian."
          },
          {
            "name": "Norwegian",
            "value": "norwegian",
            "description": "Selects the stopword list for Norwegian."
          },
          {
            "name": "Persian",
            "value": "persian",
            "description": "Selects the stopword list for Persian."
          },
          {
            "name": "Portuguese",
            "value": "portuguese",
            "description": "Selects the stopword list for Portuguese."
          },
          {
            "name": "Romanian",
            "value": "romanian",
            "description": "Selects the stopword list for Romanian."
          },
          {
            "name": "Russian",
            "value": "russian",
            "description": "Selects the stopword list for Russian."
          },
          {
            "name": "Sorani",
            "value": "sorani",
            "description": "Selects the stopword list for Sorani."
          },
          {
            "name": "Spanish",
            "value": "spanish",
            "description": "Selects the stopword list for Spanish."
          },
          {
            "name": "Swedish",
            "value": "swedish",
            "description": "Selects the stopword list for Swedish."
          },
          {
            "name": "Thai",
            "value": "thai",
            "description": "Selects the stopword list for Thai."
          },
          {
            "name": "Turkish",
            "value": "turkish",
            "description": "Selects the stopword list for Turkish."
          }
        ]
      }
    },
    "StopwordsTokenFilter": {
      "type": "object",
      "description": "Removes stop words from a token stream. This token filter is implemented using Apache Lucene.",
      "properties": {
        "stopwords": {
          "type": "array",
          "description": "The list of stopwords. This property and the stopwords list property cannot both be set.",
          "items": {
            "type": "string"
          }
        },
        "stopwordsList": {
          "$ref": "#/definitions/StopwordsList",
          "description": "A predefined list of stopwords to use. This property and the stopwords property cannot both be set. Default is English."
        },
        "ignoreCase": {
          "type": "boolean",
          "description": "A value indicating whether to ignore case. If true, all words are converted to lower case first. Default is false."
        },
        "removeTrailing": {
          "type": "boolean",
          "description": "A value indicating whether to ignore the last search term if it's a stop word. Default is true.",
          "default": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.StopwordsTokenFilter"
    },
    "SuggestDocumentsResult": {
      "type": "object",
      "description": "Response containing suggestion query results from an index.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The sequence of results returned by the query.",
          "items": {
            "$ref": "#/definitions/SuggestResult"
          }
        },
        "@search.coverage": {
          "type": "number",
          "format": "double",
          "description": "A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.",
          "x-ms-client-name": "coverage"
        }
      },
      "required": [
        "value"
      ]
    },
    "SuggestRequest": {
      "type": "object",
      "description": "Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.",
      "properties": {
        "filter": {
          "type": "string",
          "description": "An OData expression that filters the documents considered for suggestions."
        },
        "fuzzy": {
          "type": "boolean",
          "description": "A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources."
        },
        "highlightPostTag": {
          "type": "string",
          "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled."
        },
        "highlightPreTag": {
          "type": "string",
          "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled."
        },
        "minimumCoverage": {
          "type": "number",
          "format": "double",
          "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80."
        },
        "orderby": {
          "type": "string",
          "description": "The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses."
        },
        "search": {
          "type": "string",
          "description": "The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters."
        },
        "searchFields": {
          "type": "string",
          "description": "The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester."
        },
        "select": {
          "type": "string",
          "description": "The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results."
        },
        "suggesterName": {
          "type": "string",
          "description": "The name of the suggester as specified in the suggesters collection that's part of the index definition."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5."
        }
      },
      "required": [
        "search",
        "suggesterName"
      ]
    },
    "SuggestResult": {
      "type": "object",
      "description": "A result containing a document found by a suggestion query, plus associated metadata.",
      "properties": {
        "@search.text": {
          "type": "string",
          "description": "The text of the suggestion result.",
          "x-ms-client-name": "text"
        }
      },
      "required": [
        "@search.text"
      ],
      "additionalProperties": {}
    },
    "SynonymMap": {
      "type": "object",
      "description": "Represents a synonym map definition.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the synonym map."
        },
        "format": {
          "type": "string",
          "description": "The format of the synonym map. Only the 'solr' format is currently supported.",
          "enum": [
            "solr"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "synonyms": {
          "type": "string",
          "description": "A series of synonym rules in the specified synonym map format. The rules must be separated by newlines."
        },
        "encryptionKey": {
          "$ref": "#/definitions/SearchResourceEncryptionKey",
          "description": "A description of an encryption key that you create in Azure Key Vault. This key is used to provide an additional level of encryption-at-rest for your data when you want full assurance that no one, not even Microsoft, can decrypt your data. Once you have encrypted your data, it will always remain encrypted. The search service will ignore attempts to set this property to null. You can change this property as needed if you want to rotate your encryption key; Your data will be unaffected. Encryption with customer-managed keys is not available for free search services, and is only available for paid services created on or after January 1, 2019."
        },
        "@odata.etag": {
          "type": "string",
          "description": "The ETag of the synonym map.",
          "x-ms-client-name": "eTag"
        }
      },
      "required": [
        "name",
        "format",
        "synonyms"
      ]
    },
    "SynonymTokenFilter": {
      "type": "object",
      "description": "Matches single or multi-word synonyms in a token stream. This token filter is implemented using Apache Lucene.",
      "properties": {
        "synonyms": {
          "type": "array",
          "description": "A list of synonyms in following one of two formats: 1. incredible, unbelievable, fabulous => amazing - all terms on the left side of => symbol will be replaced with all terms on its right side; 2. incredible, unbelievable, fabulous, amazing - comma separated list of equivalent words. Set the expand option to change how this list is interpreted.",
          "items": {
            "type": "string"
          }
        },
        "ignoreCase": {
          "type": "boolean",
          "description": "A value indicating whether to case-fold input for matching. Default is false."
        },
        "expand": {
          "type": "boolean",
          "description": "A value indicating whether all words in the list of synonyms (if => notation is not used) will map to one another. If true, all words in the list of synonyms (if => notation is not used) will map to one another. The following list: incredible, unbelievable, fabulous, amazing is equivalent to: incredible, unbelievable, fabulous, amazing => incredible, unbelievable, fabulous, amazing. If false, the following list: incredible, unbelievable, fabulous, amazing will be equivalent to: incredible, unbelievable, fabulous, amazing => incredible. Default is true.",
          "default": true
        }
      },
      "required": [
        "synonyms"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.SynonymTokenFilter"
    },
    "TagScoringFunction": {
      "type": "object",
      "description": "Defines a function that boosts scores of documents with string values matching a given list of tags.",
      "properties": {
        "tag": {
          "$ref": "#/definitions/TagScoringParameters",
          "description": "Parameter values for the tag scoring function."
        }
      },
      "required": [
        "tag"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ScoringFunction"
        }
      ],
      "x-ms-discriminator-value": "tag"
    },
    "TagScoringParameters": {
      "type": "object",
      "description": "Provides parameter values to a tag scoring function.",
      "properties": {
        "tagsParameter": {
          "type": "string",
          "description": "The name of the parameter passed in search queries to specify the list of tags to compare against the target field."
        }
      },
      "required": [
        "tagsParameter"
      ]
    },
    "TextResult": {
      "type": "object",
      "description": "The BM25 or Classic score for the text portion of the query.",
      "properties": {
        "searchScore": {
          "type": "number",
          "format": "double",
          "description": "The BM25 or Classic score for the text portion of the query.",
          "readOnly": true
        }
      }
    },
    "TextSplitMode": {
      "type": "string",
      "description": "A value indicating which split mode to perform.",
      "enum": [
        "pages",
        "sentences"
      ],
      "x-ms-enum": {
        "name": "TextSplitMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Pages",
            "value": "pages",
            "description": "Split the text into individual pages."
          },
          {
            "name": "Sentences",
            "value": "sentences",
            "description": "Split the text into individual sentences."
          }
        ]
      }
    },
    "TextTranslationSkill": {
      "type": "object",
      "description": "A skill to translate text from one language to another.",
      "properties": {
        "defaultToLanguageCode": {
          "$ref": "#/definitions/TextTranslationSkillLanguage",
          "description": "The language code to translate documents into for documents that don't specify the to language explicitly."
        },
        "defaultFromLanguageCode": {
          "$ref": "#/definitions/TextTranslationSkillLanguage",
          "description": "The language code to translate documents from for documents that don't specify the from language explicitly."
        },
        "suggestedFrom": {
          "$ref": "#/definitions/TextTranslationSkillLanguage",
          "description": "The language code to translate documents from when neither the fromLanguageCode input nor the defaultFromLanguageCode parameter are provided, and the automatic language detection is unsuccessful. Default is `en`."
        }
      },
      "required": [
        "defaultToLanguageCode"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Text.TranslationSkill"
    },
    "TextTranslationSkillLanguage": {
      "type": "string",
      "description": "The language codes supported for input text by TextTranslationSkill.",
      "enum": [
        "af",
        "ar",
        "bn",
        "bs",
        "bg",
        "yue",
        "ca",
        "zh-Hans",
        "zh-Hant",
        "hr",
        "cs",
        "da",
        "nl",
        "en",
        "et",
        "fj",
        "fil",
        "fi",
        "fr",
        "de",
        "el",
        "ht",
        "he",
        "hi",
        "mww",
        "hu",
        "is",
        "id",
        "it",
        "ja",
        "sw",
        "tlh",
        "tlh-Latn",
        "tlh-Piqd",
        "ko",
        "lv",
        "lt",
        "mg",
        "ms",
        "mt",
        "nb",
        "fa",
        "pl",
        "pt",
        "pt-br",
        "pt-PT",
        "otq",
        "ro",
        "ru",
        "sm",
        "sr-Cyrl",
        "sr-Latn",
        "sk",
        "sl",
        "es",
        "sv",
        "ty",
        "ta",
        "te",
        "th",
        "to",
        "tr",
        "uk",
        "ur",
        "vi",
        "cy",
        "yua",
        "ga",
        "kn",
        "mi",
        "ml",
        "pa"
      ],
      "x-ms-enum": {
        "name": "TextTranslationSkillLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "af",
            "value": "af",
            "description": "Afrikaans"
          },
          {
            "name": "ar",
            "value": "ar",
            "description": "Arabic"
          },
          {
            "name": "bn",
            "value": "bn",
            "description": "Bangla"
          },
          {
            "name": "bs",
            "value": "bs",
            "description": "Bosnian (Latin)"
          },
          {
            "name": "bg",
            "value": "bg",
            "description": "Bulgarian"
          },
          {
            "name": "yue",
            "value": "yue",
            "description": "Cantonese (Traditional)"
          },
          {
            "name": "ca",
            "value": "ca",
            "description": "Catalan"
          },
          {
            "name": "zh-Hans",
            "value": "zh-Hans",
            "description": "Chinese Simplified"
          },
          {
            "name": "zh-Hant",
            "value": "zh-Hant",
            "description": "Chinese Traditional"
          },
          {
            "name": "hr",
            "value": "hr",
            "description": "Croatian"
          },
          {
            "name": "cs",
            "value": "cs",
            "description": "Czech"
          },
          {
            "name": "da",
            "value": "da",
            "description": "Danish"
          },
          {
            "name": "nl",
            "value": "nl",
            "description": "Dutch"
          },
          {
            "name": "en",
            "value": "en",
            "description": "English"
          },
          {
            "name": "et",
            "value": "et",
            "description": "Estonian"
          },
          {
            "name": "fj",
            "value": "fj",
            "description": "Fijian"
          },
          {
            "name": "fil",
            "value": "fil",
            "description": "Filipino"
          },
          {
            "name": "fi",
            "value": "fi",
            "description": "Finnish"
          },
          {
            "name": "fr",
            "value": "fr",
            "description": "French"
          },
          {
            "name": "de",
            "value": "de",
            "description": "German"
          },
          {
            "name": "el",
            "value": "el",
            "description": "Greek"
          },
          {
            "name": "ht",
            "value": "ht",
            "description": "Haitian Creole"
          },
          {
            "name": "he",
            "value": "he",
            "description": "Hebrew"
          },
          {
            "name": "hi",
            "value": "hi",
            "description": "Hindi"
          },
          {
            "name": "mww",
            "value": "mww",
            "description": "Hmong Daw"
          },
          {
            "name": "hu",
            "value": "hu",
            "description": "Hungarian"
          },
          {
            "name": "is",
            "value": "is",
            "description": "Icelandic"
          },
          {
            "name": "id",
            "value": "id",
            "description": "Indonesian"
          },
          {
            "name": "it",
            "value": "it",
            "description": "Italian"
          },
          {
            "name": "ja",
            "value": "ja",
            "description": "Japanese"
          },
          {
            "name": "sw",
            "value": "sw",
            "description": "Kiswahili"
          },
          {
            "name": "tlh",
            "value": "tlh",
            "description": "Klingon"
          },
          {
            "name": "tlh-Latn",
            "value": "tlh-Latn",
            "description": "Klingon (Latin script)"
          },
          {
            "name": "tlh-Piqd",
            "value": "tlh-Piqd",
            "description": "Klingon (Klingon script)"
          },
          {
            "name": "ko",
            "value": "ko",
            "description": "Korean"
          },
          {
            "name": "lv",
            "value": "lv",
            "description": "Latvian"
          },
          {
            "name": "lt",
            "value": "lt",
            "description": "Lithuanian"
          },
          {
            "name": "mg",
            "value": "mg",
            "description": "Malagasy"
          },
          {
            "name": "ms",
            "value": "ms",
            "description": "Malay"
          },
          {
            "name": "mt",
            "value": "mt",
            "description": "Maltese"
          },
          {
            "name": "nb",
            "value": "nb",
            "description": "Norwegian"
          },
          {
            "name": "fa",
            "value": "fa",
            "description": "Persian"
          },
          {
            "name": "pl",
            "value": "pl",
            "description": "Polish"
          },
          {
            "name": "pt",
            "value": "pt",
            "description": "Portuguese"
          },
          {
            "name": "pt-br",
            "value": "pt-br",
            "description": "Portuguese (Brazil)"
          },
          {
            "name": "pt-PT",
            "value": "pt-PT",
            "description": "Portuguese (Portugal)"
          },
          {
            "name": "otq",
            "value": "otq",
            "description": "Queretaro Otomi"
          },
          {
            "name": "ro",
            "value": "ro",
            "description": "Romanian"
          },
          {
            "name": "ru",
            "value": "ru",
            "description": "Russian"
          },
          {
            "name": "sm",
            "value": "sm",
            "description": "Samoan"
          },
          {
            "name": "sr-Cyrl",
            "value": "sr-Cyrl",
            "description": "Serbian (Cyrillic)"
          },
          {
            "name": "sr-Latn",
            "value": "sr-Latn",
            "description": "Serbian (Latin)"
          },
          {
            "name": "sk",
            "value": "sk",
            "description": "Slovak"
          },
          {
            "name": "sl",
            "value": "sl",
            "description": "Slovenian"
          },
          {
            "name": "es",
            "value": "es",
            "description": "Spanish"
          },
          {
            "name": "sv",
            "value": "sv",
            "description": "Swedish"
          },
          {
            "name": "ty",
            "value": "ty",
            "description": "Tahitian"
          },
          {
            "name": "ta",
            "value": "ta",
            "description": "Tamil"
          },
          {
            "name": "te",
            "value": "te",
            "description": "Telugu"
          },
          {
            "name": "th",
            "value": "th",
            "description": "Thai"
          },
          {
            "name": "to",
            "value": "to",
            "description": "Tongan"
          },
          {
            "name": "tr",
            "value": "tr",
            "description": "Turkish"
          },
          {
            "name": "uk",
            "value": "uk",
            "description": "Ukrainian"
          },
          {
            "name": "ur",
            "value": "ur",
            "description": "Urdu"
          },
          {
            "name": "vi",
            "value": "vi",
            "description": "Vietnamese"
          },
          {
            "name": "cy",
            "value": "cy",
            "description": "Welsh"
          },
          {
            "name": "yua",
            "value": "yua",
            "description": "Yucatec Maya"
          },
          {
            "name": "ga",
            "value": "ga",
            "description": "Irish"
          },
          {
            "name": "kn",
            "value": "kn",
            "description": "Kannada"
          },
          {
            "name": "mi",
            "value": "mi",
            "description": "Maori"
          },
          {
            "name": "ml",
            "value": "ml",
            "description": "Malayalam"
          },
          {
            "name": "pa",
            "value": "pa",
            "description": "Punjabi"
          }
        ]
      }
    },
    "TextWeights": {
      "type": "object",
      "description": "Defines weights on index fields for which matches should boost scoring in search queries.",
      "properties": {
        "weights": {
          "type": "object",
          "description": "The dictionary of per-field weights to boost document scoring. The keys are field names and the values are the weights for each field.",
          "additionalProperties": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "required": [
        "weights"
      ]
    },
    "TokenCharacterKind": {
      "type": "string",
      "description": "Represents classes of characters on which a token filter can operate.",
      "enum": [
        "letter",
        "digit",
        "whitespace",
        "punctuation",
        "symbol"
      ],
      "x-ms-enum": {
        "name": "TokenCharacterKind",
        "modelAsString": true,
        "values": [
          {
            "name": "Letter",
            "value": "letter",
            "description": "Keeps letters in tokens."
          },
          {
            "name": "Digit",
            "value": "digit",
            "description": "Keeps digits in tokens."
          },
          {
            "name": "Whitespace",
            "value": "whitespace",
            "description": "Keeps whitespace in tokens."
          },
          {
            "name": "Punctuation",
            "value": "punctuation",
            "description": "Keeps punctuation in tokens."
          },
          {
            "name": "Symbol",
            "value": "symbol",
            "description": "Keeps symbols in tokens."
          }
        ]
      }
    },
    "TokenFilter": {
      "type": "object",
      "description": "Base type for token filters.",
      "properties": {
        "@odata.type": {
          "type": "string",
          "description": "The discriminator for derived types."
        },
        "name": {
          "type": "string",
          "description": "The name of the token filter. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters."
        }
      },
      "discriminator": "@odata.type",
      "required": [
        "@odata.type",
        "name"
      ]
    },
    "TokenFilterName": {
      "type": "string",
      "description": "Defines the names of all token filters supported by the search engine.",
      "enum": [
        "arabic_normalization",
        "apostrophe",
        "asciifolding",
        "cjk_bigram",
        "cjk_width",
        "classic",
        "common_grams",
        "edgeNGram_v2",
        "elision",
        "german_normalization",
        "hindi_normalization",
        "indic_normalization",
        "keyword_repeat",
        "kstem",
        "length",
        "limit",
        "lowercase",
        "nGram_v2",
        "persian_normalization",
        "phonetic",
        "porter_stem",
        "reverse",
        "scandinavian_normalization",
        "scandinavian_folding",
        "shingle",
        "snowball",
        "sorani_normalization",
        "stemmer",
        "stopwords",
        "trim",
        "truncate",
        "unique",
        "uppercase",
        "word_delimiter"
      ],
      "x-ms-enum": {
        "name": "TokenFilterName",
        "modelAsString": true,
        "values": [
          {
            "name": "ArabicNormalization",
            "value": "arabic_normalization",
            "description": "A token filter that applies the Arabic normalizer to normalize the orthography. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.html"
          },
          {
            "name": "Apostrophe",
            "value": "apostrophe",
            "description": "Strips all characters after an apostrophe (including the apostrophe itself). See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/tr/ApostropheFilter.html"
          },
          {
            "name": "AsciiFolding",
            "value": "asciifolding",
            "description": "Converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127 ASCII characters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if such equivalents exist. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html"
          },
          {
            "name": "CjkBigram",
            "value": "cjk_bigram",
            "description": "Forms bigrams of CJK terms that are generated from the standard tokenizer. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/cjk/CJKBigramFilter.html"
          },
          {
            "name": "CjkWidth",
            "value": "cjk_width",
            "description": "Normalizes CJK width differences. Folds full-width ASCII variants into the equivalent basic Latin, and half-width Katakana variants into the equivalent Kana. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/cjk/CJKWidthFilter.html"
          },
          {
            "name": "Classic",
            "value": "classic",
            "description": "Removes English possessives, and dots from acronyms. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/ClassicFilter.html"
          },
          {
            "name": "CommonGram",
            "value": "common_grams",
            "description": "Construct bigrams for frequently occurring terms while indexing. Single terms are still indexed too, with bigrams overlaid. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/commongrams/CommonGramsFilter.html"
          },
          {
            "name": "EdgeNGram",
            "value": "edgeNGram_v2",
            "description": "Generates n-grams of the given size(s) starting from the front or the back of an input token. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.html"
          },
          {
            "name": "Elision",
            "value": "elision",
            "description": "Removes elisions. For example, \"l'avion\" (the plane) will be converted to \"avion\" (plane). See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/util/ElisionFilter.html"
          },
          {
            "name": "GermanNormalization",
            "value": "german_normalization",
            "description": "Normalizes German characters according to the heuristics of the German2 snowball algorithm. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/de/GermanNormalizationFilter.html"
          },
          {
            "name": "HindiNormalization",
            "value": "hindi_normalization",
            "description": "Normalizes text in Hindi to remove some differences in spelling variations. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/hi/HindiNormalizationFilter.html"
          },
          {
            "name": "IndicNormalization",
            "value": "indic_normalization",
            "description": "Normalizes the Unicode representation of text in Indian languages. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/in/IndicNormalizationFilter.html"
          },
          {
            "name": "KeywordRepeat",
            "value": "keyword_repeat",
            "description": "Emits each incoming token twice, once as keyword and once as non-keyword. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter.html"
          },
          {
            "name": "KStem",
            "value": "kstem",
            "description": "A high-performance kstem filter for English. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/en/KStemFilter.html"
          },
          {
            "name": "Length",
            "value": "length",
            "description": "Removes words that are too long or too short. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LengthFilter.html"
          },
          {
            "name": "Limit",
            "value": "limit",
            "description": "Limits the number of tokens while indexing. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.html"
          },
          {
            "name": "Lowercase",
            "value": "lowercase",
            "description": "Normalizes token text to lower case. See https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/core/LowerCaseFilter.html"
          },
          {
            "name": "NGram",
            "value": "nGram_v2",
            "description": "Generates n-grams of the given size(s). See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/NGramTokenFilter.html"
          },
          {
            "name": "PersianNormalization",
            "value": "persian_normalization",
            "description": "Applies normalization for Persian. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/fa/PersianNormalizationFilter.html"
          },
          {
            "name": "Phonetic",
            "value": "phonetic",
            "description": "Create tokens for phonetic matches. See https://lucene.apache.org/core/4_10_3/analyzers-phonetic/org/apache/lucene/analysis/phonetic/package-tree.html"
          },
          {
            "name": "PorterStem",
            "value": "porter_stem",
            "description": "Uses the Porter stemming algorithm to transform the token stream. See http://tartarus.org/~martin/PorterStemmer"
          },
          {
            "name": "Reverse",
            "value": "reverse",
            "description": "Reverses the token string. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/reverse/ReverseStringFilter.html"
          },
          {
            "name": "ScandinavianNormalization",
            "value": "scandinavian_normalization",
            "description": "Normalizes use of the interchangeable Scandinavian characters. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.html"
          },
          {
            "name": "ScandinavianFoldingNormalization",
            "value": "scandinavian_folding",
            "description": "Folds Scandinavian characters Ã¥Ã…Ã¤Ã¦Ã„Ã†-&gt;a and Ã¶Ã–Ã¸Ã˜-&gt;o. It also discriminates against use of double vowels aa, ae, ao, oe and oo, leaving just the first one. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.html"
          },
          {
            "name": "Shingle",
            "value": "shingle",
            "description": "Creates combinations of tokens as a single token. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/shingle/ShingleFilter.html"
          },
          {
            "name": "Snowball",
            "value": "snowball",
            "description": "A filter that stems words using a Snowball-generated stemmer. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/snowball/SnowballFilter.html"
          },
          {
            "name": "SoraniNormalization",
            "value": "sorani_normalization",
            "description": "Normalizes the Unicode representation of Sorani text. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.html"
          },
          {
            "name": "Stemmer",
            "value": "stemmer",
            "description": "Language specific stemming filter. See https://learn.microsoft.com/rest/api/searchservice/Custom-analyzers-in-Azure-Search#TokenFilters"
          },
          {
            "name": "Stopwords",
            "value": "stopwords",
            "description": "Removes stop words from a token stream. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/StopFilter.html"
          },
          {
            "name": "Trim",
            "value": "trim",
            "description": "Trims leading and trailing whitespace from tokens. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/TrimFilter.html"
          },
          {
            "name": "Truncate",
            "value": "truncate",
            "description": "Truncates the terms to a specific length. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter.html"
          },
          {
            "name": "Unique",
            "value": "unique",
            "description": "Filters out tokens with same text as the previous token. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.html"
          },
          {
            "name": "Uppercase",
            "value": "uppercase",
            "description": "Normalizes token text to upper case. See https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/core/UpperCaseFilter.html"
          },
          {
            "name": "WordDelimiter",
            "value": "word_delimiter",
            "description": "Splits words into subwords and performs optional transformations on subword groups."
          }
        ]
      }
    },
    "TruncateTokenFilter": {
      "type": "object",
      "description": "Truncates the terms to a specific length. This token filter is implemented using Apache Lucene.",
      "properties": {
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length at which terms will be truncated. Default and maximum is 300.",
          "default": 300,
          "maximum": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.TruncateTokenFilter"
    },
    "UaxUrlEmailTokenizer": {
      "type": "object",
      "description": "Tokenizes urls and emails as one token. This tokenizer is implemented using Apache Lucene.",
      "properties": {
        "maxTokenLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum token length. Default is 255. Tokens longer than the maximum length are split. The maximum token length that can be used is 300 characters.",
          "default": 255,
          "maximum": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/LexicalTokenizer"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.UaxUrlEmailTokenizer"
    },
    "UniqueTokenFilter": {
      "type": "object",
      "description": "Filters out tokens with same text as the previous token. This token filter is implemented using Apache Lucene.",
      "properties": {
        "onlyOnSamePosition": {
          "type": "boolean",
          "description": "A value indicating whether to remove duplicates only at the same position. Default is false."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.UniqueTokenFilter"
    },
    "VectorEncodingFormat": {
      "type": "string",
      "description": "The encoding format for interpreting vector field contents.",
      "enum": [
        "packedBit"
      ],
      "x-ms-enum": {
        "name": "VectorEncodingFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "PackedBit",
            "value": "packedBit",
            "description": "Encoding format representing bits packed into a wider data type."
          }
        ]
      }
    },
    "VectorFilterMode": {
      "type": "string",
      "description": "Determines whether or not filters are applied before or after the vector search is performed.",
      "enum": [
        "postFilter",
        "preFilter",
        "strictPostFilter"
      ],
      "x-ms-enum": {
        "name": "VectorFilterMode",
        "modelAsString": true,
        "values": [
          {
            "name": "PostFilter",
            "value": "postFilter",
            "description": "The filter will be applied after the candidate set of vector results is returned. Depending on the filter selectivity, this can result in fewer results than requested by the parameter 'k'."
          },
          {
            "name": "PreFilter",
            "value": "preFilter",
            "description": "The filter will be applied before the search query."
          },
          {
            "name": "StrictPostFilter",
            "value": "strictPostFilter",
            "description": "The filter will be applied after the global top-k candidate set of vector results is returned."
          }
        ]
      }
    },
    "VectorQuery": {
      "type": "object",
      "description": "The query parameters for vector and hybrid search queries.",
      "properties": {
        "k": {
          "type": "integer",
          "format": "int32",
          "description": "Number of nearest neighbors to return as top hits."
        },
        "fields": {
          "type": "string",
          "description": "Vector Fields of type Collection(Edm.Single) to be included in the vector searched."
        },
        "exhaustive": {
          "type": "boolean",
          "description": "When true, triggers an exhaustive k-nearest neighbor search across all vectors within the vector index. Useful for scenarios where exact matches are critical, such as determining ground truth values."
        },
        "oversampling": {
          "type": "number",
          "format": "double",
          "description": "Oversampling factor. Minimum value is 1. It overrides the 'defaultOversampling' parameter configured in the index definition. It can be set only when 'rerankWithOriginalVectors' is true. This parameter is only permitted when a compression method is used on the underlying vector field."
        },
        "weight": {
          "type": "number",
          "format": "float",
          "description": "Relative weight of the vector query when compared to other vector query and/or the text query within the same search request. This value is used when combining the results of multiple ranking lists produced by the different vector queries and/or the results retrieved through the text query. The higher the weight, the higher the documents that matched that query will be in the final ranking. Default is 1.0 and the value needs to be a positive number larger than zero."
        },
        "threshold": {
          "$ref": "#/definitions/VectorThreshold",
          "description": "The threshold used for vector queries. Note this can only be set if all 'fields' use the same similarity metric."
        },
        "filterOverride": {
          "type": "string",
          "description": "The OData filter expression to apply to this specific vector query. If no filter expression is defined at the vector level, the expression defined in the top level filter parameter is used instead."
        },
        "perDocumentVectorLimit": {
          "type": "integer",
          "format": "int32",
          "description": "The OData filter expression to apply to this specific vector query. If no filter expression is defined at the vector level, the expression defined in the top level filter parameter is used instead."
        },
        "kind": {
          "$ref": "#/definitions/VectorQueryKind",
          "description": "Type of query."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "VectorQueryKind": {
      "type": "string",
      "description": "The kind of vector query being performed.",
      "enum": [
        "vector",
        "text",
        "imageUrl",
        "imageBinary"
      ],
      "x-ms-enum": {
        "name": "VectorQueryKind",
        "modelAsString": true,
        "values": [
          {
            "name": "Vector",
            "value": "vector",
            "description": "Vector query where a raw vector value is provided."
          },
          {
            "name": "Text",
            "value": "text",
            "description": "Vector query where a text value that needs to be vectorized is provided."
          },
          {
            "name": "ImageUrl",
            "value": "imageUrl",
            "description": "Vector query where an url that represents an image value that needs to be vectorized is provided."
          },
          {
            "name": "ImageBinary",
            "value": "imageBinary",
            "description": "Vector query where a base 64 encoded binary of an image that needs to be vectorized is provided."
          }
        ]
      }
    },
    "VectorSearch": {
      "type": "object",
      "description": "Contains configuration options related to vector search.",
      "properties": {
        "profiles": {
          "type": "array",
          "description": "Defines combinations of configurations to use with vector search.",
          "items": {
            "$ref": "#/definitions/VectorSearchProfile"
          }
        },
        "algorithms": {
          "type": "array",
          "description": "Contains configuration options specific to the algorithm used during indexing or querying.",
          "items": {
            "$ref": "#/definitions/VectorSearchAlgorithmConfiguration"
          }
        },
        "vectorizers": {
          "type": "array",
          "description": "Contains configuration options on how to vectorize text vector queries.",
          "items": {
            "$ref": "#/definitions/VectorSearchVectorizer"
          }
        },
        "compressions": {
          "type": "array",
          "description": "Contains configuration options specific to the compression method used during indexing or querying.",
          "items": {
            "$ref": "#/definitions/VectorSearchCompression"
          }
        }
      }
    },
    "VectorSearchAlgorithmConfiguration": {
      "type": "object",
      "description": "Contains configuration options specific to the algorithm used during indexing or querying.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name to associate with this particular configuration."
        },
        "kind": {
          "$ref": "#/definitions/VectorSearchAlgorithmKind",
          "description": "Type of VectorSearchAlgorithmConfiguration."
        }
      },
      "discriminator": "kind",
      "required": [
        "name",
        "kind"
      ]
    },
    "VectorSearchAlgorithmKind": {
      "type": "string",
      "description": "The algorithm used for indexing and querying.",
      "enum": [
        "hnsw",
        "exhaustiveKnn"
      ],
      "x-ms-enum": {
        "name": "VectorSearchAlgorithmKind",
        "modelAsString": true,
        "values": [
          {
            "name": "Hnsw",
            "value": "hnsw",
            "description": "HNSW (Hierarchical Navigable Small World), a type of approximate nearest neighbors algorithm."
          },
          {
            "name": "ExhaustiveKnn",
            "value": "exhaustiveKnn",
            "description": "Exhaustive KNN algorithm which will perform brute-force search."
          }
        ]
      }
    },
    "VectorSearchAlgorithmMetric": {
      "type": "string",
      "description": "The similarity metric to use for vector comparisons. It is recommended to choose the same similarity metric as the embedding model was trained on.",
      "enum": [
        "cosine",
        "euclidean",
        "dotProduct",
        "hamming"
      ],
      "x-ms-enum": {
        "name": "VectorSearchAlgorithmMetric",
        "modelAsString": true,
        "values": [
          {
            "name": "Cosine",
            "value": "cosine",
            "description": "Measures the angle between vectors to quantify their similarity, disregarding magnitude. The smaller the angle, the closer the similarity."
          },
          {
            "name": "Euclidean",
            "value": "euclidean",
            "description": "Computes the straight-line distance between vectors in a multi-dimensional space. The smaller the distance, the closer the similarity."
          },
          {
            "name": "DotProduct",
            "value": "dotProduct",
            "description": "Calculates the sum of element-wise products to gauge alignment and magnitude similarity. The larger and more positive, the closer the similarity."
          },
          {
            "name": "Hamming",
            "value": "hamming",
            "description": "Only applicable to bit-packed binary data types. Determines dissimilarity by counting differing positions in binary vectors. The fewer differences, the closer the similarity."
          }
        ]
      }
    },
    "VectorSearchCompression": {
      "type": "object",
      "description": "Contains configuration options specific to the compression method used during indexing or querying.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name to associate with this particular configuration."
        },
        "rerankWithOriginalVectors": {
          "type": "boolean",
          "description": "If set to true, once the ordered set of results calculated using compressed vectors are obtained, they will be reranked again by recalculating the full-precision similarity scores. This will improve recall at the expense of latency.",
          "default": true
        },
        "defaultOversampling": {
          "type": "number",
          "format": "double",
          "description": "Default oversampling factor. Oversampling will internally request more documents (specified by this multiplier) in the initial search. This increases the set of results that will be reranked using recomputed similarity scores from full-precision vectors. Minimum value is 1, meaning no oversampling (1x). This parameter can only be set when rerankWithOriginalVectors is true. Higher values improve recall at the expense of latency."
        },
        "rescoringOptions": {
          "$ref": "#/definitions/RescoringOptions",
          "description": "Contains the options for rescoring."
        },
        "truncationDimension": {
          "type": "integer",
          "format": "int32",
          "description": "The number of dimensions to truncate the vectors to. Truncating the vectors reduces the size of the vectors and the amount of data that needs to be transferred during search. This can save storage cost and improve search performance at the expense of recall. It should be only used for embeddings trained with Matryoshka Representation Learning (MRL) such as OpenAI text-embedding-3-large (small). The default value is null, which means no truncation."
        },
        "kind": {
          "$ref": "#/definitions/VectorSearchCompressionKind",
          "description": "Type of VectorSearchCompression."
        }
      },
      "discriminator": "kind",
      "required": [
        "name",
        "kind"
      ]
    },
    "VectorSearchCompressionKind": {
      "type": "string",
      "description": "The compression method used for indexing and querying.",
      "enum": [
        "scalarQuantization",
        "binaryQuantization"
      ],
      "x-ms-enum": {
        "name": "VectorSearchCompressionKind",
        "modelAsString": true,
        "values": [
          {
            "name": "ScalarQuantization",
            "value": "scalarQuantization",
            "description": "Scalar Quantization, a type of compression method. In scalar quantization, the original vectors values are compressed to a narrower type by discretizing and representing each component of a vector using a reduced set of quantized values, thereby reducing the overall data size."
          },
          {
            "name": "BinaryQuantization",
            "value": "binaryQuantization",
            "description": "Binary Quantization, a type of compression method. In binary quantization, the original vectors values are compressed to the narrower binary type by discretizing and representing each component of a vector using binary values, thereby reducing the overall data size."
          }
        ]
      }
    },
    "VectorSearchCompressionRescoreStorageMethod": {
      "type": "string",
      "description": "The storage method for the original full-precision vectors used for rescoring and internal index operations.",
      "enum": [
        "preserveOriginals",
        "discardOriginals"
      ],
      "x-ms-enum": {
        "name": "VectorSearchCompressionRescoreStorageMethod",
        "modelAsString": true,
        "values": [
          {
            "name": "PreserveOriginals",
            "value": "preserveOriginals",
            "description": "This option preserves the original full-precision vectors. Choose this option for maximum flexibility and highest quality of compressed search results. This consumes more storage but allows for rescoring and oversampling."
          },
          {
            "name": "DiscardOriginals",
            "value": "discardOriginals",
            "description": "This option discards the original full-precision vectors. Choose this option for maximum storage savings. Since this option does not allow for rescoring and oversampling, it will often cause slight to moderate reductions in quality."
          }
        ]
      }
    },
    "VectorSearchCompressionTarget": {
      "type": "string",
      "description": "The quantized data type of compressed vector values.",
      "enum": [
        "int8"
      ],
      "x-ms-enum": {
        "name": "VectorSearchCompressionTarget",
        "modelAsString": true,
        "values": [
          {
            "name": "Int8",
            "value": "int8",
            "description": "8-bit signed integer."
          }
        ]
      }
    },
    "VectorSearchProfile": {
      "type": "object",
      "description": "Defines a combination of configurations to use with vector search.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name to associate with this particular vector search profile."
        },
        "algorithm": {
          "type": "string",
          "description": "The name of the vector search algorithm configuration that specifies the algorithm and optional parameters."
        },
        "vectorizer": {
          "type": "string",
          "description": "The name of the vectorization being configured for use with vector search."
        },
        "compression": {
          "type": "string",
          "description": "The name of the compression method configuration that specifies the compression method and optional parameters."
        }
      },
      "required": [
        "name",
        "algorithm"
      ]
    },
    "VectorSearchVectorizer": {
      "type": "object",
      "description": "Specifies the vectorization method to be used during query time.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name to associate with this particular vectorization method."
        },
        "kind": {
          "$ref": "#/definitions/VectorSearchVectorizerKind",
          "description": "Type of VectorSearchVectorizer."
        }
      },
      "discriminator": "kind",
      "required": [
        "name",
        "kind"
      ]
    },
    "VectorSearchVectorizerKind": {
      "type": "string",
      "description": "The vectorization method to be used during query time.",
      "enum": [
        "azureOpenAI",
        "customWebApi",
        "aiServicesVision",
        "aml"
      ],
      "x-ms-enum": {
        "name": "VectorSearchVectorizerKind",
        "modelAsString": true,
        "values": [
          {
            "name": "AzureOpenAI",
            "value": "azureOpenAI",
            "description": "Generate embeddings using an Azure OpenAI resource at query time."
          },
          {
            "name": "CustomWebApi",
            "value": "customWebApi",
            "description": "Generate embeddings using a custom web endpoint at query time."
          },
          {
            "name": "AIServicesVision",
            "value": "aiServicesVision",
            "description": "Generate embeddings for an image or text input at query time using the Azure AI Services Vision Vectorize API."
          },
          {
            "name": "AML",
            "value": "aml",
            "description": "Generate embeddings using an Azure Machine Learning endpoint deployed via the Azure AI Foundry Model Catalog at query time."
          }
        ]
      }
    },
    "VectorSimilarityThreshold": {
      "type": "object",
      "description": "The results of the vector query will be filtered based on the vector similarity metric. Note this is the canonical definition of similarity metric, not the 'distance' version. The threshold direction (larger or smaller) will be chosen automatically according to the metric used by the field.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The threshold will filter based on the similarity metric value. Note this is the canonical definition of similarity metric, not the 'distance' version. The threshold direction (larger or smaller) will be chosen automatically according to the metric used by the field."
        }
      },
      "required": [
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VectorThreshold"
        }
      ],
      "x-ms-discriminator-value": "vectorSimilarity"
    },
    "VectorThreshold": {
      "type": "object",
      "description": "The threshold used for vector queries.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/VectorThresholdKind",
          "description": "Type of threshold."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "VectorThresholdKind": {
      "type": "string",
      "description": "The kind of vector query being performed.",
      "enum": [
        "vectorSimilarity",
        "searchScore"
      ],
      "x-ms-enum": {
        "name": "VectorThresholdKind",
        "modelAsString": true,
        "values": [
          {
            "name": "VectorSimilarity",
            "value": "vectorSimilarity",
            "description": "The results of the vector query will be filtered based on the vector similarity metric. Note this is the canonical definition of similarity metric, not the 'distance' version. The threshold direction (larger or smaller) will be chosen automatically according to the metric used by the field."
          },
          {
            "name": "SearchScore",
            "value": "searchScore",
            "description": "The results of the vector query will filter based on the '@search.score' value. Note this is the @search.score returned as part of the search response. The threshold direction will be chosen for higher @search.score."
          }
        ]
      }
    },
    "VectorizableImageBinaryQuery": {
      "type": "object",
      "description": "The query parameters to use for vector search when a base 64 encoded binary of an image that needs to be vectorized is provided.",
      "properties": {
        "base64Image": {
          "type": "string",
          "description": "The base 64 encoded binary of an image to be vectorized to perform a vector search query."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorQuery"
        }
      ],
      "x-ms-discriminator-value": "imageBinary"
    },
    "VectorizableImageUrlQuery": {
      "type": "object",
      "description": "The query parameters to use for vector search when an url that represents an image value that needs to be vectorized is provided.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of an image to be vectorized to perform a vector search query."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorQuery"
        }
      ],
      "x-ms-discriminator-value": "imageUrl"
    },
    "VectorizableTextQuery": {
      "type": "object",
      "description": "The query parameters to use for vector search when a text value that needs to be vectorized is provided.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text to be vectorized to perform a vector search query."
        },
        "queryRewrites": {
          "$ref": "#/definitions/QueryRewritesType",
          "description": "Can be configured to let a generative model rewrite the query before sending it to be vectorized."
        }
      },
      "required": [
        "text"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VectorQuery"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "VectorizedQuery": {
      "type": "object",
      "description": "The query parameters to use for vector search when a raw vector value is provided.",
      "properties": {
        "vector": {
          "type": "array",
          "description": "The vector representation of a search query.",
          "items": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "required": [
        "vector"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VectorQuery"
        }
      ],
      "x-ms-discriminator-value": "vector"
    },
    "VectorsDebugInfo": {
      "type": "object",
      "description": "\"Contains debugging information specific to vector and hybrid search.\")",
      "properties": {
        "subscores": {
          "$ref": "#/definitions/QueryResultDocumentSubscores",
          "description": "The breakdown of subscores of the document prior to the chosen result set fusion/combination method such as RRF.",
          "readOnly": true
        }
      }
    },
    "VisionVectorizeSkill": {
      "type": "object",
      "description": "Allows you to generate a vector embedding for a given image or text input using the Azure AI Services Vision Vectorize API.",
      "properties": {
        "modelVersion": {
          "type": "string",
          "description": "The version of the model to use when calling the AI Services Vision service. It will default to the latest available when not specified."
        }
      },
      "required": [
        "modelVersion"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Vision.VectorizeSkill"
    },
    "VisualFeature": {
      "type": "string",
      "description": "The strings indicating what visual feature types to return.",
      "enum": [
        "adult",
        "brands",
        "categories",
        "description",
        "faces",
        "objects",
        "tags"
      ],
      "x-ms-enum": {
        "name": "VisualFeature",
        "modelAsString": true,
        "values": [
          {
            "name": "Adult",
            "value": "adult",
            "description": "Visual features recognized as adult persons."
          },
          {
            "name": "Brands",
            "value": "brands",
            "description": "Visual features recognized as commercial brands."
          },
          {
            "name": "Categories",
            "value": "categories",
            "description": "Categories."
          },
          {
            "name": "Description",
            "value": "description",
            "description": "Description."
          },
          {
            "name": "Faces",
            "value": "faces",
            "description": "Visual features recognized as people faces."
          },
          {
            "name": "Objects",
            "value": "objects",
            "description": "Visual features recognized as objects."
          },
          {
            "name": "Tags",
            "value": "tags",
            "description": "Tags."
          }
        ]
      }
    },
    "WebApiHttpHeaders": {
      "type": "object",
      "description": "A dictionary of http request headers.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "WebApiSkill": {
      "type": "object",
      "description": "A skill that can call a Web API endpoint, allowing you to extend a skillset by having it call your custom code.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The url for the Web API."
        },
        "httpHeaders": {
          "type": "object",
          "description": "The headers required to make the http request.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "httpMethod": {
          "type": "string",
          "description": "The method for the http request."
        },
        "timeout": {
          "type": "string",
          "format": "duration",
          "description": "The desired timeout for the request. Default is 30 seconds."
        },
        "batchSize": {
          "type": "integer",
          "format": "int32",
          "description": "The desired batch size which indicates number of documents."
        },
        "degreeOfParallelism": {
          "type": "integer",
          "format": "int32",
          "description": "If set, the number of parallel calls that can be made to the Web API."
        },
        "authResourceId": {
          "type": "string",
          "description": "Applies to custom skills that connect to external code in an Azure function or some other application that provides the transformations. This value should be the application ID created for the function or app when it was registered with Azure Active Directory. When specified, the custom skill connects to the function or app using a managed ID (either system or user-assigned) of the search service and the access token of the function or app, using this value as the resource id for creating the scope of the access token."
        },
        "authIdentity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "The user-assigned managed identity used for outbound connections. If an authResourceId is provided and it's not specified, the system-assigned managed identity is used. On updates to the indexer, if the identity is unspecified, the value remains unchanged. If set to \"none\", the value of this property is cleared."
        }
      },
      "required": [
        "uri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SearchIndexerSkill"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Skills.Custom.WebApiSkill"
    },
    "WebApiVectorizer": {
      "type": "object",
      "description": "Specifies a user-defined vectorizer for generating the vector embedding of a query string. Integration of an external vectorizer is achieved using the custom Web API interface of a skillset.",
      "properties": {
        "customWebApiParameters": {
          "$ref": "#/definitions/WebApiVectorizerParameters",
          "description": "Specifies the properties of the user-defined vectorizer."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorSearchVectorizer"
        }
      ],
      "x-ms-discriminator-value": "customWebApi"
    },
    "WebApiVectorizerParameters": {
      "type": "object",
      "description": "Specifies the properties for connecting to a user-defined vectorizer.",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "The URI of the Web API providing the vectorizer."
        },
        "httpHeaders": {
          "type": "object",
          "description": "The headers required to make the HTTP request.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "httpMethod": {
          "type": "string",
          "description": "The method for the HTTP request."
        },
        "timeout": {
          "type": "string",
          "format": "duration",
          "description": "The desired timeout for the request. Default is 30 seconds."
        },
        "authResourceId": {
          "type": "string",
          "description": "Applies to custom endpoints that connect to external code in an Azure function or some other application that provides the transformations. This value should be the application ID created for the function or app when it was registered with Azure Active Directory. When specified, the vectorization connects to the function or app using a managed ID (either system or user-assigned) of the search service and the access token of the function or app, using this value as the resource id for creating the scope of the access token."
        },
        "authIdentity": {
          "$ref": "#/definitions/SearchIndexerDataIdentity",
          "description": "The user-assigned managed identity used for outbound connections. If an authResourceId is provided and it's not specified, the system-assigned managed identity is used. On updates to the indexer, if the identity is unspecified, the value remains unchanged. If set to \"none\", the value of this property is cleared."
        }
      }
    },
    "WebKnowledgeSourceParams": {
      "type": "object",
      "description": "Specifies runtime parameters for a web knowledge source",
      "properties": {
        "language": {
          "type": "string",
          "description": "The language of the web results."
        },
        "market": {
          "type": "string",
          "description": "The market of the web results."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of web results to return."
        },
        "freshness": {
          "type": "string",
          "description": "The freshness of web results."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/KnowledgeSourceParams"
        }
      ],
      "x-ms-discriminator-value": "web"
    },
    "WordDelimiterTokenFilter": {
      "type": "object",
      "description": "Splits words into subwords and performs optional transformations on subword groups. This token filter is implemented using Apache Lucene.",
      "properties": {
        "generateWordParts": {
          "type": "boolean",
          "description": "A value indicating whether to generate part words. If set, causes parts of words to be generated; for example \"AzureSearch\" becomes \"Azure\" \"Search\". Default is true.",
          "default": true
        },
        "generateNumberParts": {
          "type": "boolean",
          "description": "A value indicating whether to generate number subwords. Default is true.",
          "default": true
        },
        "catenateWords": {
          "type": "boolean",
          "description": "A value indicating whether maximum runs of word parts will be catenated. For example, if this is set to true, \"Azure-Search\" becomes \"AzureSearch\". Default is false."
        },
        "catenateNumbers": {
          "type": "boolean",
          "description": "A value indicating whether maximum runs of number parts will be catenated. For example, if this is set to true, \"1-2\" becomes \"12\". Default is false."
        },
        "catenateAll": {
          "type": "boolean",
          "description": "A value indicating whether all subword parts will be catenated. For example, if this is set to true, \"Azure-Search-1\" becomes \"AzureSearch1\". Default is false."
        },
        "splitOnCaseChange": {
          "type": "boolean",
          "description": "A value indicating whether to split words on caseChange. For example, if this is set to true, \"AzureSearch\" becomes \"Azure\" \"Search\". Default is true.",
          "default": true
        },
        "preserveOriginal": {
          "type": "boolean",
          "description": "A value indicating whether original words will be preserved and added to the subword list. Default is false."
        },
        "splitOnNumerics": {
          "type": "boolean",
          "description": "A value indicating whether to split on numbers. For example, if this is set to true, \"Azure1Search\" becomes \"Azure\" \"1\" \"Search\". Default is true.",
          "default": true
        },
        "stemEnglishPossessive": {
          "type": "boolean",
          "description": "A value indicating whether to remove trailing \"'s\" for each subword. Default is true.",
          "default": true
        },
        "protectedWords": {
          "type": "array",
          "description": "A list of tokens to protect from being delimited.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TokenFilter"
        }
      ],
      "x-ms-discriminator-value": "#Microsoft.Azure.Search.WordDelimiterTokenFilter"
    }
  },
  "parameters": {
    "Azure.Core.ClientRequestIdHeader": {
      "name": "x-ms-client-request-id",
      "in": "header",
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "required": false,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "clientRequestId"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "SearchOptions.answers": {
      "name": "answers",
      "in": "query",
      "description": "This parameter is only valid if the query type is `semantic`. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character `|` followed by the `count-<number of answers>` option after the answers parameter value, such as `extractive|count-3`. Default count is 1. The confidence threshold can be configured by appending the pipe character `|` followed by the `threshold-<confidence threshold>` option after the answers parameter value, such as `extractive|threshold-0.9`. Default threshold is 0.7. The maximum character length of answers can be configured by appending the pipe character '|' followed by the 'count-<number of maximum character length>', such as 'extractive|maxcharlength-600'.",
      "required": false,
      "type": "string",
      "enum": [
        "none",
        "extractive"
      ],
      "x-ms-enum": {
        "name": "QueryAnswerType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not return answers for the query."
          },
          {
            "name": "Extractive",
            "value": "extractive",
            "description": "Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.captions": {
      "name": "captions",
      "in": "query",
      "description": "This parameter is only valid if the query type is `semantic`. If set, the query returns captions extracted from key passages in the highest ranked documents. When Captions is set to `extractive`, highlighting is enabled by default, and can be configured by appending the pipe character `|` followed by the `highlight-<true/false>` option, such as `extractive|highlight-true`. Defaults to `None`. The maximum character length of captions can be configured by appending the pipe character '|' followed by the 'count-<number of maximum character length>', such as 'extractive|maxcharlength-600'.",
      "required": false,
      "type": "string",
      "enum": [
        "none",
        "extractive"
      ],
      "x-ms-enum": {
        "name": "QueryCaptionType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not return captions for the query."
          },
          {
            "name": "Extractive",
            "value": "extractive",
            "description": "Extracts captions from the matching documents that contain passages relevant to the search query."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.debug": {
      "name": "debug",
      "in": "query",
      "description": "Enables a debugging tool that can be used to further explore your search results.",
      "required": false,
      "type": "string",
      "enum": [
        "disabled",
        "semantic",
        "vector",
        "queryRewrites",
        "innerHits",
        "all"
      ],
      "x-ms-enum": {
        "name": "QueryDebugMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Disabled",
            "value": "disabled",
            "description": "No query debugging information will be returned."
          },
          {
            "name": "Semantic",
            "value": "semantic",
            "description": "Allows the user to further explore their reranked results."
          },
          {
            "name": "Vector",
            "value": "vector",
            "description": "Allows the user to further explore their hybrid and vector query results."
          },
          {
            "name": "QueryRewrites",
            "value": "queryRewrites",
            "description": "Allows the user to explore the list of query rewrites generated for their search request."
          },
          {
            "name": "InnerHits",
            "value": "innerHits",
            "description": "Allows the user to retrieve scoring information regarding vectors matched within a collection of complex types."
          },
          {
            "name": "All",
            "value": "all",
            "description": "Turn on all debug options."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.facets": {
      "name": "facet",
      "in": "query",
      "description": "The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "facets"
    },
    "SearchOptions.filter": {
      "name": "$filter",
      "in": "query",
      "description": "The OData $filter expression to apply to the search query.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "filter"
    },
    "SearchOptions.highlightFields": {
      "name": "highlight",
      "in": "query",
      "description": "The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "highlightFields"
    },
    "SearchOptions.highlightPostTag": {
      "name": "highlightPostTag",
      "in": "query",
      "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.highlightPreTag": {
      "name": "highlightPreTag",
      "in": "query",
      "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.includeTotalResultCount": {
      "name": "$count",
      "in": "query",
      "description": "A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.",
      "required": false,
      "type": "boolean",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "includeTotalResultCount"
    },
    "SearchOptions.minimumCoverage": {
      "name": "minimumCoverage",
      "in": "query",
      "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.",
      "required": false,
      "type": "number",
      "format": "double",
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.orderBy": {
      "name": "$orderby",
      "in": "query",
      "description": "The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "orderBy"
    },
    "SearchOptions.queryLanguage": {
      "name": "queryLanguage",
      "in": "query",
      "description": "The language of the query.",
      "required": false,
      "type": "string",
      "enum": [
        "none",
        "en-us",
        "en-gb",
        "en-in",
        "en-ca",
        "en-au",
        "fr-fr",
        "fr-ca",
        "de-de",
        "es-es",
        "es-mx",
        "zh-cn",
        "zh-tw",
        "pt-br",
        "pt-pt",
        "it-it",
        "ja-jp",
        "ko-kr",
        "ru-ru",
        "cs-cz",
        "nl-be",
        "nl-nl",
        "hu-hu",
        "pl-pl",
        "sv-se",
        "tr-tr",
        "hi-in",
        "ar-sa",
        "ar-eg",
        "ar-ma",
        "ar-kw",
        "ar-jo",
        "da-dk",
        "no-no",
        "bg-bg",
        "hr-hr",
        "hr-ba",
        "ms-my",
        "ms-bn",
        "sl-sl",
        "ta-in",
        "vi-vn",
        "el-gr",
        "ro-ro",
        "is-is",
        "id-id",
        "th-th",
        "lt-lt",
        "uk-ua",
        "lv-lv",
        "et-ee",
        "ca-es",
        "fi-fi",
        "sr-ba",
        "sr-me",
        "sr-rs",
        "sk-sk",
        "nb-no",
        "hy-am",
        "bn-in",
        "eu-es",
        "gl-es",
        "gu-in",
        "he-il",
        "ga-ie",
        "kn-in",
        "ml-in",
        "mr-in",
        "fa-ae",
        "pa-in",
        "te-in",
        "ur-pk"
      ],
      "x-ms-enum": {
        "name": "QueryLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Query language not specified."
          },
          {
            "name": "EnUs",
            "value": "en-us",
            "description": "Query language value for English (United States)."
          },
          {
            "name": "EnGb",
            "value": "en-gb",
            "description": "Query language value for English (Great Britain)."
          },
          {
            "name": "EnIn",
            "value": "en-in",
            "description": "Query language value for English (India)."
          },
          {
            "name": "EnCa",
            "value": "en-ca",
            "description": "Query language value for English (Canada)."
          },
          {
            "name": "EnAu",
            "value": "en-au",
            "description": "Query language value for English (Australia)."
          },
          {
            "name": "FrFr",
            "value": "fr-fr",
            "description": "Query language value for French (France)."
          },
          {
            "name": "FrCa",
            "value": "fr-ca",
            "description": "Query language value for French (Canada)."
          },
          {
            "name": "DeDe",
            "value": "de-de",
            "description": "Query language value for German (Germany)."
          },
          {
            "name": "EsEs",
            "value": "es-es",
            "description": "Query language value for Spanish (Spain)."
          },
          {
            "name": "EsMx",
            "value": "es-mx",
            "description": "Query language value for Spanish (Mexico)."
          },
          {
            "name": "ZhCn",
            "value": "zh-cn",
            "description": "Query language value for Chinese (China)."
          },
          {
            "name": "ZhTw",
            "value": "zh-tw",
            "description": "Query language value for Chinese (Taiwan)."
          },
          {
            "name": "PtBr",
            "value": "pt-br",
            "description": "Query language value for Portuguese (Brazil)."
          },
          {
            "name": "PtPt",
            "value": "pt-pt",
            "description": "Query language value for Portuguese (Portugal)."
          },
          {
            "name": "ItIt",
            "value": "it-it",
            "description": "Query language value for Italian (Italy)."
          },
          {
            "name": "JaJp",
            "value": "ja-jp",
            "description": "Query language value for Japanese (Japan)."
          },
          {
            "name": "KoKr",
            "value": "ko-kr",
            "description": "Query language value for Korean (Korea)."
          },
          {
            "name": "RuRu",
            "value": "ru-ru",
            "description": "Query language value for Russian (Russia)."
          },
          {
            "name": "CsCz",
            "value": "cs-cz",
            "description": "Query language value for Czech (Czech Republic)."
          },
          {
            "name": "NlBe",
            "value": "nl-be",
            "description": "Query language value for Dutch (Belgium)."
          },
          {
            "name": "NlNl",
            "value": "nl-nl",
            "description": "Query language value for Dutch (Netherlands)."
          },
          {
            "name": "HuHu",
            "value": "hu-hu",
            "description": "Query language value for Hungarian (Hungary)."
          },
          {
            "name": "PlPl",
            "value": "pl-pl",
            "description": "Query language value for Polish (Poland)."
          },
          {
            "name": "SvSe",
            "value": "sv-se",
            "description": "Query language value for Swedish (Sweden)."
          },
          {
            "name": "TrTr",
            "value": "tr-tr",
            "description": "Query language value for Turkish (Turkey)."
          },
          {
            "name": "HiIn",
            "value": "hi-in",
            "description": "Query language value for Hindi (India)."
          },
          {
            "name": "ArSa",
            "value": "ar-sa",
            "description": "Query language value for Arabic (Saudi Arabia)."
          },
          {
            "name": "ArEg",
            "value": "ar-eg",
            "description": "Query language value for Arabic (Egypt)."
          },
          {
            "name": "ArMa",
            "value": "ar-ma",
            "description": "Query language value for Arabic (Morocco)."
          },
          {
            "name": "ArKw",
            "value": "ar-kw",
            "description": "Query language value for Arabic (Kuwait)."
          },
          {
            "name": "ArJo",
            "value": "ar-jo",
            "description": "Query language value for Arabic (Jordan)."
          },
          {
            "name": "DaDk",
            "value": "da-dk",
            "description": "Query language value for Danish (Denmark)."
          },
          {
            "name": "NoNo",
            "value": "no-no",
            "description": "Query language value for Norwegian (Norway)."
          },
          {
            "name": "BgBg",
            "value": "bg-bg",
            "description": "Query language value for Bulgarian (Bulgaria)."
          },
          {
            "name": "HrHr",
            "value": "hr-hr",
            "description": "Query language value for Croatian (Croatia)."
          },
          {
            "name": "HrBa",
            "value": "hr-ba",
            "description": "Query language value for Croatian (Bosnia and Herzegovina)."
          },
          {
            "name": "MsMy",
            "value": "ms-my",
            "description": "Query language value for Malay (Malaysia)."
          },
          {
            "name": "MsBn",
            "value": "ms-bn",
            "description": "Query language value for Malay (Brunei Darussalam)."
          },
          {
            "name": "SlSl",
            "value": "sl-sl",
            "description": "Query language value for Slovenian (Slovenia)."
          },
          {
            "name": "TaIn",
            "value": "ta-in",
            "description": "Query language value for Tamil (India)."
          },
          {
            "name": "ViVn",
            "value": "vi-vn",
            "description": "Query language value for Vietnamese (Viet Nam)."
          },
          {
            "name": "ElGr",
            "value": "el-gr",
            "description": "Query language value for Greek (Greece)."
          },
          {
            "name": "RoRo",
            "value": "ro-ro",
            "description": "Query language value for Romanian (Romania)."
          },
          {
            "name": "IsIs",
            "value": "is-is",
            "description": "Query language value for Icelandic (Iceland)."
          },
          {
            "name": "IdId",
            "value": "id-id",
            "description": "Query language value for Indonesian (Indonesia)."
          },
          {
            "name": "ThTh",
            "value": "th-th",
            "description": "Query language value for Thai (Thailand)."
          },
          {
            "name": "LtLt",
            "value": "lt-lt",
            "description": "Query language value for Lithuanian (Lithuania)."
          },
          {
            "name": "UkUa",
            "value": "uk-ua",
            "description": "Query language value for Ukrainian (Ukraine)."
          },
          {
            "name": "LvLv",
            "value": "lv-lv",
            "description": "Query language value for Latvian (Latvia)."
          },
          {
            "name": "EtEe",
            "value": "et-ee",
            "description": "Query language value for Estonian (Estonia)."
          },
          {
            "name": "CaEs",
            "value": "ca-es",
            "description": "Query language value for Catalan."
          },
          {
            "name": "FiFi",
            "value": "fi-fi",
            "description": "Query language value for Finnish (Finland)."
          },
          {
            "name": "SrBa",
            "value": "sr-ba",
            "description": "Query language value for Serbian (Bosnia and Herzegovina)."
          },
          {
            "name": "SrMe",
            "value": "sr-me",
            "description": "Query language value for Serbian (Montenegro)."
          },
          {
            "name": "SrRs",
            "value": "sr-rs",
            "description": "Query language value for Serbian (Serbia)."
          },
          {
            "name": "SkSk",
            "value": "sk-sk",
            "description": "Query language value for Slovak (Slovakia)."
          },
          {
            "name": "NbNo",
            "value": "nb-no",
            "description": "Query language value for Norwegian (Norway)."
          },
          {
            "name": "HyAm",
            "value": "hy-am",
            "description": "Query language value for Armenian (Armenia)."
          },
          {
            "name": "BnIn",
            "value": "bn-in",
            "description": "Query language value for Bengali (India)."
          },
          {
            "name": "EuEs",
            "value": "eu-es",
            "description": "Query language value for Basque."
          },
          {
            "name": "GlEs",
            "value": "gl-es",
            "description": "Query language value for Galician."
          },
          {
            "name": "GuIn",
            "value": "gu-in",
            "description": "Query language value for Gujarati (India)."
          },
          {
            "name": "HeIl",
            "value": "he-il",
            "description": "Query language value for Hebrew (Israel)."
          },
          {
            "name": "GaIe",
            "value": "ga-ie",
            "description": "Query language value for Irish (Ireland)."
          },
          {
            "name": "KnIn",
            "value": "kn-in",
            "description": "Query language value for Kannada (India)."
          },
          {
            "name": "MlIn",
            "value": "ml-in",
            "description": "Query language value for Malayalam (India)."
          },
          {
            "name": "MrIn",
            "value": "mr-in",
            "description": "Query language value for Marathi (India)."
          },
          {
            "name": "FaAe",
            "value": "fa-ae",
            "description": "Query language value for Persian (U.A.E.)."
          },
          {
            "name": "PaIn",
            "value": "pa-in",
            "description": "Query language value for Punjabi (India)."
          },
          {
            "name": "TeIn",
            "value": "te-in",
            "description": "Query language value for Telugu (India)."
          },
          {
            "name": "UrPk",
            "value": "ur-pk",
            "description": "Query language value for Urdu (Pakistan)."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.queryRewrites": {
      "name": "queryRewrites",
      "in": "query",
      "description": "When QueryRewrites is set to `generative`, the query terms are sent to a generate model which will produce 10 (default) rewrites to help increase the recall of the request. The requested count can be configured by appending the pipe character `|` followed by the `count-<number of rewrites>` option, such as `generative|count-3`. Defaults to `None`. This parameter is only valid if the query type is `semantic`.",
      "required": false,
      "type": "string",
      "enum": [
        "none",
        "generative"
      ],
      "x-ms-enum": {
        "name": "QueryRewritesType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not generate additional query rewrites for this query."
          },
          {
            "name": "Generative",
            "value": "generative",
            "description": "Generate alternative query terms to increase the recall of a search request."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.queryType": {
      "name": "queryType",
      "in": "query",
      "description": "A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax.",
      "required": false,
      "type": "string",
      "enum": [
        "simple",
        "full",
        "semantic"
      ],
      "x-ms-enum": {
        "name": "QueryType",
        "modelAsString": true,
        "values": [
          {
            "name": "Simple",
            "value": "simple",
            "description": "Uses the simple query syntax for searches. Search text is interpreted using a simple query language that allows for symbols such as +, * and \"\". Queries are evaluated across all searchable fields by default, unless the searchFields parameter is specified."
          },
          {
            "name": "Full",
            "value": "full",
            "description": "Uses the full Lucene query syntax for searches. Search text is interpreted using the Lucene query language which allows field-specific and weighted searches, as well as other advanced features."
          },
          {
            "name": "Semantic",
            "value": "semantic",
            "description": "Best suited for queries expressed in natural language as opposed to keywords. Improves precision of search results by re-ranking the top search results using a ranking model trained on the Web corpus."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.scoringParameters": {
      "name": "scoringParameter",
      "in": "query",
      "description": "The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation--122.2,44.8\" (without the quotes).",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "scoringParameters"
    },
    "SearchOptions.scoringProfile": {
      "name": "scoringProfile",
      "in": "query",
      "description": "The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.scoringStatistics": {
      "name": "scoringStatistics",
      "in": "query",
      "description": "A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency.",
      "required": false,
      "type": "string",
      "enum": [
        "local",
        "global"
      ],
      "x-ms-enum": {
        "name": "ScoringStatistics",
        "modelAsString": true,
        "values": [
          {
            "name": "Local",
            "value": "local",
            "description": "The scoring statistics will be calculated locally for lower latency."
          },
          {
            "name": "Global",
            "value": "global",
            "description": "The scoring statistics will be calculated globally for more consistent scoring."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.searchFields": {
      "name": "searchFields",
      "in": "query",
      "description": "The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.searchMode": {
      "name": "searchMode",
      "in": "query",
      "description": "A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.",
      "required": false,
      "type": "string",
      "enum": [
        "any",
        "all"
      ],
      "x-ms-enum": {
        "name": "SearchMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Any",
            "value": "any",
            "description": "Any of the search terms must be matched in order to count the document as a match."
          },
          {
            "name": "All",
            "value": "all",
            "description": "All of the search terms must be matched in order to count the document as a match."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.select": {
      "name": "$select",
      "in": "query",
      "description": "The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "select"
    },
    "SearchOptions.semanticConfiguration": {
      "name": "semanticConfiguration",
      "in": "query",
      "description": "The name of the semantic configuration that lists which fields should be used for semantic ranking, captions, highlights, and answers",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.semanticErrorHandling": {
      "name": "semanticErrorHandling",
      "in": "query",
      "description": "Allows the user to choose whether a semantic call should fail completely, or to return partial results (default).",
      "required": false,
      "type": "string",
      "enum": [
        "partial",
        "fail"
      ],
      "x-ms-enum": {
        "name": "SemanticErrorMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Partial",
            "value": "partial",
            "description": "If the semantic processing fails, partial results still return. The definition of partial results depends on what semantic step failed and what was the reason for failure."
          },
          {
            "name": "Fail",
            "value": "fail",
            "description": "If there is an exception during the semantic processing step, the query will fail and return the appropriate HTTP code depending on the error."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.semanticFields": {
      "name": "semanticFields",
      "in": "query",
      "description": "The list of field names used for semantic ranking.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.semanticMaxWaitInMilliseconds": {
      "name": "semanticMaxWaitInMilliseconds",
      "in": "query",
      "description": "Allows the user to set an upper bound on the amount of time it takes for semantic enrichment to finish processing before the request fails.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "minimum": 700,
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.semanticQuery": {
      "name": "semanticQuery",
      "in": "query",
      "description": "Allows setting a separate search query that will be solely used for semantic reranking, semantic captions and semantic answers. Is useful for scenarios where there is a need to use different queries between the base retrieval and ranking phase, and the L2 semantic phase.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.sessionId": {
      "name": "sessionId",
      "in": "query",
      "description": "A value to be used to create a sticky session, which can help to get more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.skip": {
      "name": "$skip",
      "in": "query",
      "description": "The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and $filter with a range query instead.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "skip"
    },
    "SearchOptions.speller": {
      "name": "speller",
      "in": "query",
      "description": "Improve search recall by spell-correcting individual search query terms.",
      "required": false,
      "type": "string",
      "enum": [
        "none",
        "lexicon"
      ],
      "x-ms-enum": {
        "name": "QuerySpellerType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Speller not enabled."
          },
          {
            "name": "Lexicon",
            "value": "lexicon",
            "description": "Speller corrects individual query terms using a static lexicon for the language specified by the queryLanguage parameter."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "SearchOptions.top": {
      "name": "$top",
      "in": "query",
      "description": "The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "top"
    },
    "SuggestOptions.filter": {
      "name": "$filter",
      "in": "query",
      "description": "An OData expression that filters the documents considered for suggestions.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "filter"
    },
    "SuggestOptions.highlightPostTag": {
      "name": "highlightPostTag",
      "in": "query",
      "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SuggestOptions.highlightPreTag": {
      "name": "highlightPreTag",
      "in": "query",
      "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SuggestOptions.minimumCoverage": {
      "name": "minimumCoverage",
      "in": "query",
      "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.",
      "required": false,
      "type": "number",
      "format": "double",
      "x-ms-parameter-location": "method"
    },
    "SuggestOptions.orderBy": {
      "name": "$orderby",
      "in": "query",
      "description": "The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "orderBy"
    },
    "SuggestOptions.searchFields": {
      "name": "searchFields",
      "in": "query",
      "description": "The list of field names to search for the specified search text. Target fields must be included in the specified suggester.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method"
    },
    "SuggestOptions.select": {
      "name": "$select",
      "in": "query",
      "description": "The list of fields to retrieve. If unspecified, only the key field will be included in the results.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "select"
    },
    "SuggestOptions.top": {
      "name": "$top",
      "in": "query",
      "description": "The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "top"
    },
    "SuggestOptions.useFuzzyMatching": {
      "name": "fuzzy",
      "in": "query",
      "description": "A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources.",
      "required": false,
      "type": "boolean",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "useFuzzyMatching"
    }
  }
}
