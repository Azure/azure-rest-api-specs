{
  "swagger": "2.0",
  "info": {
    "title": "Search Index Client",
    "version": "2024-11-01-preview",
    "description": "Client that can be used to query an index and upload, merge, or delete documents.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "OAuth2Auth": [
        "https://search.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "api-key",
      "in": "header"
    },
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://search.azure.com/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/indexes('{indexName}')/docs": {
      "get": {
        "operationId": "Documents_SearchGet",
        "description": "Searches for documents in the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "search",
            "in": "query",
            "description": "A full-text search query expression; Use \"*\" or omit this parameter to match\nall documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "searchText"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "A value that specifies whether to fetch the total count of results. Default is\nfalse. Setting this value to true may have a performance impact. Note that the\ncount returned is an approximation.",
            "required": false,
            "type": "boolean",
            "x-ms-client-name": "includeTotalResultCount"
          },
          {
            "name": "facet",
            "in": "query",
            "description": "The list of facet expressions to apply to the search query. Each facet\nexpression contains a field name, optionally followed by a comma-separated list\nof name:value pairs.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-ms-client-name": "facets"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The OData $filter expression to apply to the search query.",
            "required": false,
            "type": "string"
          },
          {
            "name": "highlight",
            "in": "query",
            "description": "The list of field names to use for hit highlights. Only searchable fields can\nbe used for hit highlighting.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "x-ms-client-name": "highlightFields"
          },
          {
            "name": "highlightPostTag",
            "in": "query",
            "description": "A string tag that is appended to hit highlights. Must be set with\nhighlightPreTag. Default is &lt;/em&gt;.",
            "required": false,
            "type": "string"
          },
          {
            "name": "highlightPreTag",
            "in": "query",
            "description": "A string tag that is prepended to hit highlights. Must be set with\nhighlightPostTag. Default is &lt;em&gt;.",
            "required": false,
            "type": "string"
          },
          {
            "name": "minimumCoverage",
            "in": "query",
            "description": "A number between 0 and 100 indicating the percentage of the index that must be\ncovered by a search query in order for the query to be reported as a success.\nThis parameter can be useful for ensuring search availability even for services\nwith only one replica. The default is 100.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "The list of OData $orderby expressions by which to sort the results. Each\nexpression can be either a field name or a call to either the geo.distance() or\nthe search.score() functions. Each expression can be followed by asc to\nindicate ascending, and desc to indicate descending. The default is ascending\norder. Ties will be broken by the match scores of documents. If no OrderBy is\nspecified, the default sort order is descending by document match score. There\ncan be at most 32 $orderby clauses.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "x-ms-client-name": "orderBy"
          },
          {
            "name": "queryType",
            "in": "query",
            "description": "A value that specifies the syntax of the search query. The default is 'simple'.\nUse 'full' if your query uses the Lucene query syntax.",
            "required": false,
            "type": "string",
            "enum": [
              "simple",
              "full",
              "semantic"
            ],
            "x-ms-enum": {
              "name": "QueryType",
              "modelAsString": true,
              "values": [
                {
                  "name": "Simple",
                  "value": "simple",
                  "description": "Uses the simple query syntax for searches. Search text is interpreted using a\nsimple query language that allows for symbols such as +, * and \"\". Queries are\nevaluated across all searchable fields by default, unless the searchFields\nparameter is specified."
                },
                {
                  "name": "Full",
                  "value": "full",
                  "description": "Uses the full Lucene query syntax for searches. Search text is interpreted\nusing the Lucene query language which allows field-specific and weighted\nsearches, as well as other advanced features."
                },
                {
                  "name": "Semantic",
                  "value": "semantic",
                  "description": "Best suited for queries expressed in natural language as opposed to keywords.\nImproves precision of search results by re-ranking the top search results using\na ranking model trained on the Web corpus."
                }
              ]
            }
          },
          {
            "name": "scoringParameter",
            "in": "query",
            "description": "The list of parameter values to be used in scoring functions (for example,\nreferencePointParameter) using the format name-values. For example, if the\nscoring profile defines a function with a parameter called 'mylocation' the\nparameter string would be \"mylocation--122.2,44.8\" (without the quotes).",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-ms-client-name": "scoringParameters"
          },
          {
            "name": "scoringProfile",
            "in": "query",
            "description": "The name of a scoring profile to evaluate match scores for matching documents\nin order to sort the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "The list of field names to which to scope the full-text search. When using\nfielded search (fieldName:searchExpression) in a full Lucene query, the field\nnames of each fielded search expression take precedence over any field names\nlisted in this parameter.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "searchMode",
            "in": "query",
            "description": "A value that specifies whether any or all of the search terms must be matched\nin order to count the document as a match.",
            "required": false,
            "type": "string",
            "enum": [
              "any",
              "all"
            ],
            "x-ms-enum": {
              "name": "SearchMode",
              "modelAsString": true,
              "values": [
                {
                  "name": "Any",
                  "value": "any",
                  "description": "Any of the search terms must be matched in order to count the document as a\nmatch."
                },
                {
                  "name": "All",
                  "value": "all",
                  "description": "All of the search terms must be matched in order to count the document as a\nmatch."
                }
              ]
            }
          },
          {
            "name": "scoringStatistics",
            "in": "query",
            "description": "A value that specifies whether we want to calculate scoring statistics (such as\ndocument frequency) globally for more consistent scoring, or locally, for lower\nlatency.",
            "required": false,
            "type": "string",
            "enum": [
              "local",
              "global"
            ],
            "x-ms-enum": {
              "name": "ScoringStatistics",
              "modelAsString": true,
              "values": [
                {
                  "name": "Local",
                  "value": "local",
                  "description": "The scoring statistics will be calculated locally for lower latency."
                },
                {
                  "name": "Global",
                  "value": "global",
                  "description": "The scoring statistics will be calculated globally for more consistent scoring."
                }
              ]
            }
          },
          {
            "name": "sessionId",
            "in": "query",
            "description": "A value to be used to create a sticky session, which can help to get more\nconsistent results. As long as the same sessionId is used, a best-effort\nattempt will be made to target the same replica set. Be wary that reusing the\nsame sessionID values repeatedly can interfere with the load balancing of the\nrequests across replicas and adversely affect the performance of the search\nservice. The value used as sessionId cannot start with a '_' character.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The list of fields to retrieve. If unspecified, all fields marked as\nretrievable in the schema are included.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of search results to skip. This value cannot be greater than\n100,000. If you need to scan documents in sequence, but cannot use $skip due to\nthis limitation, consider using $orderby on a totally-ordered key and $filter\nwith a range query instead.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of search results to retrieve. This can be used in conjunction with\n$skip to implement client-side paging of search results. If results are\ntruncated due to server-side paging, the response will include a continuation\ntoken that can be used to issue another Search request for the next page of\nresults.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "semanticConfiguration",
            "in": "query",
            "description": "The name of the semantic configuration that lists which fields should be used\nfor semantic ranking, captions, highlights, and answers",
            "required": false,
            "type": "string"
          },
          {
            "name": "semanticErrorHandling",
            "in": "query",
            "description": "Allows the user to choose whether a semantic call should fail completely, or to\nreturn partial results (default).",
            "required": false,
            "type": "string",
            "enum": [
              "partial",
              "fail"
            ],
            "x-ms-enum": {
              "name": "SemanticErrorMode",
              "modelAsString": true,
              "values": [
                {
                  "name": "Partial",
                  "value": "partial",
                  "description": "If the semantic processing fails, partial results still return. The definition\nof partial results depends on what semantic step failed and what was the reason\nfor failure."
                },
                {
                  "name": "Fail",
                  "value": "fail",
                  "description": "If there is an exception during the semantic processing step, the query will\nfail and return the appropriate HTTP code depending on the error."
                }
              ]
            }
          },
          {
            "name": "semanticMaxWaitInMilliseconds",
            "in": "query",
            "description": "Allows the user to set an upper bound on the amount of time it takes for\nsemantic enrichment to finish processing before the request fails.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 700
          },
          {
            "name": "answers",
            "in": "query",
            "description": "This parameter is only valid if the query type is `semantic`. If set, the query\nreturns answers extracted from key passages in the highest ranked documents.\nThe number of answers returned can be configured by appending the pipe\ncharacter `|` followed by the `count-<number of answers>` option after the\nanswers parameter value, such as `extractive|count-3`. Default count is 1. The\nconfidence threshold can be configured by appending the pipe character `|`\nfollowed by the `threshold-<confidence threshold>` option after the answers\nparameter value, such as `extractive|threshold-0.9`. Default threshold is 0.7.\nThe maximum character length of answers can be configured by appending the pipe\ncharacter '|' followed by the 'count-<number of maximum character length>',\nsuch as 'extractive|maxcharlength-600'.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "extractive"
            ],
            "x-ms-enum": {
              "name": "QueryAnswerType",
              "modelAsString": true,
              "values": [
                {
                  "name": "None",
                  "value": "none",
                  "description": "Do not return answers for the query."
                },
                {
                  "name": "Extractive",
                  "value": "extractive",
                  "description": "Extracts answer candidates from the contents of the documents returned in\nresponse to a query expressed as a question in natural language."
                }
              ]
            }
          },
          {
            "name": "captions",
            "in": "query",
            "description": "This parameter is only valid if the query type is `semantic`. If set, the query\nreturns captions extracted from key passages in the highest ranked documents.\nWhen Captions is set to `extractive`, highlighting is enabled by default, and\ncan be configured by appending the pipe character `|` followed by the\n`highlight-<true/false>` option, such as `extractive|highlight-true`. Defaults\nto `None`. The maximum character length of captions can be configured by\nappending the pipe character '|' followed by the 'count-<number of maximum\ncharacter length>', such as 'extractive|maxcharlength-600'.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "extractive"
            ],
            "x-ms-enum": {
              "name": "QueryCaptionType",
              "modelAsString": true,
              "values": [
                {
                  "name": "None",
                  "value": "none",
                  "description": "Do not return captions for the query."
                },
                {
                  "name": "Extractive",
                  "value": "extractive",
                  "description": "Extracts captions from the matching documents that contain passages relevant to\nthe search query."
                }
              ]
            }
          },
          {
            "name": "semanticQuery",
            "in": "query",
            "description": "Allows setting a separate search query that will be solely used for semantic\nreranking, semantic captions and semantic answers. Is useful for scenarios\nwhere there is a need to use different queries between the base retrieval and\nranking phase, and the L2 semantic phase.",
            "required": false,
            "type": "string"
          },
          {
            "name": "queryRewrites",
            "in": "query",
            "description": "When QueryRewrites is set to `generative`, the query terms are sent to a\ngenerate model which will produce 10 (default) rewrites to help increase the\nrecall of the request. The requested count can be configured by appending the\npipe character `|` followed by the `count-<number of rewrites>` option, such as\n`generative|count-3`. Defaults to `None`. This parameter is only valid if the\nquery type is `semantic`.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "generative"
            ],
            "x-ms-enum": {
              "name": "QueryRewritesType",
              "modelAsString": true,
              "values": [
                {
                  "name": "None",
                  "value": "none",
                  "description": "Do not generate additional query rewrites for this query."
                },
                {
                  "name": "Generative",
                  "value": "generative",
                  "description": "Generate alternative query terms to increase the recall of a search request."
                }
              ]
            }
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Enables a debugging tool that can be used to further explore your search\nresults.",
            "required": false,
            "type": "string",
            "enum": [
              "disabled",
              "semantic",
              "vector",
              "queryRewrites",
              "all"
            ],
            "x-ms-enum": {
              "name": "QueryDebugMode",
              "modelAsString": true,
              "values": [
                {
                  "name": "Disabled",
                  "value": "disabled",
                  "description": "No query debugging information will be returned."
                },
                {
                  "name": "Semantic",
                  "value": "semantic",
                  "description": "Allows the user to further explore their reranked results."
                },
                {
                  "name": "Vector",
                  "value": "vector",
                  "description": "Allows the user to further explore their hybrid and vector query results."
                },
                {
                  "name": "QueryRewrites",
                  "value": "queryRewrites",
                  "description": "Allows the user to explore the list of query rewrites generated for their\nsearch request."
                },
                {
                  "name": "All",
                  "value": "all",
                  "description": "Turn on all debug options."
                }
              ]
            }
          },
          {
            "name": "queryLanguage",
            "in": "query",
            "description": "The language of the query.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "en-us",
              "en-gb",
              "en-in",
              "en-ca",
              "en-au",
              "fr-fr",
              "fr-ca",
              "de-de",
              "es-es",
              "es-mx",
              "zh-cn",
              "zh-tw",
              "pt-br",
              "pt-pt",
              "it-it",
              "ja-jp",
              "ko-kr",
              "ru-ru",
              "cs-cz",
              "nl-be",
              "nl-nl",
              "hu-hu",
              "pl-pl",
              "sv-se",
              "tr-tr",
              "hi-in",
              "ar-sa",
              "ar-eg",
              "ar-ma",
              "ar-kw",
              "ar-jo",
              "da-dk",
              "no-no",
              "bg-bg",
              "hr-hr",
              "hr-ba",
              "ms-my",
              "ms-bn",
              "sl-sl",
              "ta-in",
              "vi-vn",
              "el-gr",
              "ro-ro",
              "is-is",
              "id-id",
              "th-th",
              "lt-lt",
              "uk-ua",
              "lv-lv",
              "et-ee",
              "ca-es",
              "fi-fi",
              "sr-ba",
              "sr-me",
              "sr-rs",
              "sk-sk",
              "nb-no",
              "hy-am",
              "bn-in",
              "eu-es",
              "gl-es",
              "gu-in",
              "he-il",
              "ga-ie",
              "kn-in",
              "ml-in",
              "mr-in",
              "fa-ae",
              "pa-in",
              "te-in",
              "ur-pk"
            ],
            "x-ms-enum": {
              "name": "QueryLanguage",
              "modelAsString": true,
              "values": [
                {
                  "name": "None",
                  "value": "none",
                  "description": "Query language not specified."
                },
                {
                  "name": "EnUs",
                  "value": "en-us",
                  "description": "Query language value for English (United States)."
                },
                {
                  "name": "EnGb",
                  "value": "en-gb",
                  "description": "Query language value for English (Great Britain)."
                },
                {
                  "name": "EnIn",
                  "value": "en-in",
                  "description": "Query language value for English (India)."
                },
                {
                  "name": "EnCa",
                  "value": "en-ca",
                  "description": "Query language value for English (Canada)."
                },
                {
                  "name": "EnAu",
                  "value": "en-au",
                  "description": "Query language value for English (Australia)."
                },
                {
                  "name": "FrFr",
                  "value": "fr-fr",
                  "description": "Query language value for French (France)."
                },
                {
                  "name": "FrCa",
                  "value": "fr-ca",
                  "description": "Query language value for French (Canada)."
                },
                {
                  "name": "DeDe",
                  "value": "de-de",
                  "description": "Query language value for German (Germany)."
                },
                {
                  "name": "EsEs",
                  "value": "es-es",
                  "description": "Query language value for Spanish (Spain)."
                },
                {
                  "name": "EsMx",
                  "value": "es-mx",
                  "description": "Query language value for Spanish (Mexico)."
                },
                {
                  "name": "ZhCn",
                  "value": "zh-cn",
                  "description": "Query language value for Chinese (China)."
                },
                {
                  "name": "ZhTw",
                  "value": "zh-tw",
                  "description": "Query language value for Chinese (Taiwan)."
                },
                {
                  "name": "PtBr",
                  "value": "pt-br",
                  "description": "Query language value for Portuguese (Brazil)."
                },
                {
                  "name": "PtPt",
                  "value": "pt-pt",
                  "description": "Query language value for Portuguese (Portugal)."
                },
                {
                  "name": "ItIt",
                  "value": "it-it",
                  "description": "Query language value for Italian (Italy)."
                },
                {
                  "name": "JaJp",
                  "value": "ja-jp",
                  "description": "Query language value for Japanese (Japan)."
                },
                {
                  "name": "KoKr",
                  "value": "ko-kr",
                  "description": "Query language value for Korean (Korea)."
                },
                {
                  "name": "RuRu",
                  "value": "ru-ru",
                  "description": "Query language value for Russian (Russia)."
                },
                {
                  "name": "CsCz",
                  "value": "cs-cz",
                  "description": "Query language value for Czech (Czech Republic)."
                },
                {
                  "name": "NlBe",
                  "value": "nl-be",
                  "description": "Query language value for Dutch (Belgium)."
                },
                {
                  "name": "NlNl",
                  "value": "nl-nl",
                  "description": "Query language value for Dutch (Netherlands)."
                },
                {
                  "name": "HuHu",
                  "value": "hu-hu",
                  "description": "Query language value for Hungarian (Hungary)."
                },
                {
                  "name": "PlPl",
                  "value": "pl-pl",
                  "description": "Query language value for Polish (Poland)."
                },
                {
                  "name": "SvSe",
                  "value": "sv-se",
                  "description": "Query language value for Swedish (Sweden)."
                },
                {
                  "name": "TrTr",
                  "value": "tr-tr",
                  "description": "Query language value for Turkish (Turkey)."
                },
                {
                  "name": "HiIn",
                  "value": "hi-in",
                  "description": "Query language value for Hindi (India)."
                },
                {
                  "name": "ArSa",
                  "value": "ar-sa",
                  "description": "Query language value for Arabic (Saudi Arabia)."
                },
                {
                  "name": "ArEg",
                  "value": "ar-eg",
                  "description": "Query language value for Arabic (Egypt)."
                },
                {
                  "name": "ArMa",
                  "value": "ar-ma",
                  "description": "Query language value for Arabic (Morocco)."
                },
                {
                  "name": "ArKw",
                  "value": "ar-kw",
                  "description": "Query language value for Arabic (Kuwait)."
                },
                {
                  "name": "ArJo",
                  "value": "ar-jo",
                  "description": "Query language value for Arabic (Jordan)."
                },
                {
                  "name": "DaDk",
                  "value": "da-dk",
                  "description": "Query language value for Danish (Denmark)."
                },
                {
                  "name": "NoNo",
                  "value": "no-no",
                  "description": "Query language value for Norwegian (Norway)."
                },
                {
                  "name": "BgBg",
                  "value": "bg-bg",
                  "description": "Query language value for Bulgarian (Bulgaria)."
                },
                {
                  "name": "HrHr",
                  "value": "hr-hr",
                  "description": "Query language value for Croatian (Croatia)."
                },
                {
                  "name": "HrBa",
                  "value": "hr-ba",
                  "description": "Query language value for Croatian (Bosnia and Herzegovina)."
                },
                {
                  "name": "MsMy",
                  "value": "ms-my",
                  "description": "Query language value for Malay (Malaysia)."
                },
                {
                  "name": "MsBn",
                  "value": "ms-bn",
                  "description": "Query language value for Malay (Brunei Darussalam)."
                },
                {
                  "name": "SlSl",
                  "value": "sl-sl",
                  "description": "Query language value for Slovenian (Slovenia)."
                },
                {
                  "name": "TaIn",
                  "value": "ta-in",
                  "description": "Query language value for Tamil (India)."
                },
                {
                  "name": "ViVn",
                  "value": "vi-vn",
                  "description": "Query language value for Vietnamese (Viet Nam)."
                },
                {
                  "name": "ElGr",
                  "value": "el-gr",
                  "description": "Query language value for Greek (Greece)."
                },
                {
                  "name": "RoRo",
                  "value": "ro-ro",
                  "description": "Query language value for Romanian (Romania)."
                },
                {
                  "name": "IsIs",
                  "value": "is-is",
                  "description": "Query language value for Icelandic (Iceland)."
                },
                {
                  "name": "IdId",
                  "value": "id-id",
                  "description": "Query language value for Indonesian (Indonesia)."
                },
                {
                  "name": "ThTh",
                  "value": "th-th",
                  "description": "Query language value for Thai (Thailand)."
                },
                {
                  "name": "LtLt",
                  "value": "lt-lt",
                  "description": "Query language value for Lithuanian (Lithuania)."
                },
                {
                  "name": "UkUa",
                  "value": "uk-ua",
                  "description": "Query language value for Ukrainian (Ukraine)."
                },
                {
                  "name": "LvLv",
                  "value": "lv-lv",
                  "description": "Query language value for Latvian (Latvia)."
                },
                {
                  "name": "EtEe",
                  "value": "et-ee",
                  "description": "Query language value for Estonian (Estonia)."
                },
                {
                  "name": "CaEs",
                  "value": "ca-es",
                  "description": "Query language value for Catalan."
                },
                {
                  "name": "FiFi",
                  "value": "fi-fi",
                  "description": "Query language value for Finnish (Finland)."
                },
                {
                  "name": "SrBa",
                  "value": "sr-ba",
                  "description": "Query language value for Serbian (Bosnia and Herzegovina)."
                },
                {
                  "name": "SrMe",
                  "value": "sr-me",
                  "description": "Query language value for Serbian (Montenegro)."
                },
                {
                  "name": "SrRs",
                  "value": "sr-rs",
                  "description": "Query language value for Serbian (Serbia)."
                },
                {
                  "name": "SkSk",
                  "value": "sk-sk",
                  "description": "Query language value for Slovak (Slovakia)."
                },
                {
                  "name": "NbNo",
                  "value": "nb-no",
                  "description": "Query language value for Norwegian (Norway)."
                },
                {
                  "name": "HyAm",
                  "value": "hy-am",
                  "description": "Query language value for Armenian (Armenia)."
                },
                {
                  "name": "BnIn",
                  "value": "bn-in",
                  "description": "Query language value for Bengali (India)."
                },
                {
                  "name": "EuEs",
                  "value": "eu-es",
                  "description": "Query language value for Basque."
                },
                {
                  "name": "GlEs",
                  "value": "gl-es",
                  "description": "Query language value for Galician."
                },
                {
                  "name": "GuIn",
                  "value": "gu-in",
                  "description": "Query language value for Gujarati (India)."
                },
                {
                  "name": "HeIl",
                  "value": "he-il",
                  "description": "Query language value for Hebrew (Israel)."
                },
                {
                  "name": "GaIe",
                  "value": "ga-ie",
                  "description": "Query language value for Irish (Ireland)."
                },
                {
                  "name": "KnIn",
                  "value": "kn-in",
                  "description": "Query language value for Kannada (India)."
                },
                {
                  "name": "MlIn",
                  "value": "ml-in",
                  "description": "Query language value for Malayalam (India)."
                },
                {
                  "name": "MrIn",
                  "value": "mr-in",
                  "description": "Query language value for Marathi (India)."
                },
                {
                  "name": "FaAe",
                  "value": "fa-ae",
                  "description": "Query language value for Persian (U.A.E.)."
                },
                {
                  "name": "PaIn",
                  "value": "pa-in",
                  "description": "Query language value for Punjabi (India)."
                },
                {
                  "name": "TeIn",
                  "value": "te-in",
                  "description": "Query language value for Telugu (India)."
                },
                {
                  "name": "UrPk",
                  "value": "ur-pk",
                  "description": "Query language value for Urdu (Pakistan)."
                }
              ]
            }
          },
          {
            "name": "speller",
            "in": "query",
            "description": "Improve search recall by spell-correcting individual search query terms.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "lexicon"
            ],
            "x-ms-enum": {
              "name": "QuerySpellerType",
              "modelAsString": true,
              "values": [
                {
                  "name": "None",
                  "value": "none",
                  "description": "Speller not enabled."
                },
                {
                  "name": "Lexicon",
                  "value": "lexicon",
                  "description": "Speller corrects individual query terms using a static lexicon for the language\nspecified by the queryLanguage parameter."
                }
              ]
            }
          },
          {
            "name": "semanticFields",
            "in": "query",
            "description": "The list of field names used for semantic ranking.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexSearchDocumentsGet": {
            "$ref": "./examples/SearchIndexSearchDocumentsGet.json"
          },
          "SearchIndexSearchDocumentsSemanticGet": {
            "$ref": "./examples/SearchIndexSearchDocumentsSemanticGet.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/$count": {
      "get": {
        "operationId": "Documents_Count",
        "description": "Queries the number of documents in the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexCountDocuments": {
            "$ref": "./examples/SearchIndexCountDocuments.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.autocomplete": {
      "get": {
        "operationId": "Documents_AutocompleteGet",
        "description": "Autocompletes incomplete query terms based on input text and matching terms in\nthe index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "search",
            "in": "query",
            "description": "The incomplete term which should be auto-completed.",
            "required": true,
            "type": "string",
            "x-ms-client-name": "searchText"
          },
          {
            "name": "suggesterName",
            "in": "query",
            "description": "The name of the suggester as specified in the suggesters collection that's part\nof the index definition.",
            "required": true,
            "type": "string"
          },
          {
            "name": "autocompleteMode",
            "in": "query",
            "description": "Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms'\nto get shingles and 'oneTermWithContext' to use the current context while\nproducing auto-completed terms.",
            "required": false,
            "type": "string",
            "enum": [
              "oneTerm",
              "twoTerms",
              "oneTermWithContext"
            ],
            "x-ms-enum": {
              "name": "AutocompleteMode",
              "modelAsString": true,
              "values": [
                {
                  "name": "OneTerm",
                  "value": "oneTerm",
                  "description": "Only one term is suggested. If the query has two terms, only the last term is\ncompleted. For example, if the input is 'washington medic', the suggested terms\ncould include 'medicaid', 'medicare', and 'medicine'."
                },
                {
                  "name": "TwoTerms",
                  "value": "twoTerms",
                  "description": "Matching two-term phrases in the index will be suggested. For example, if the\ninput is 'medic', the suggested terms could include 'medicare coverage' and 'medical assistant'."
                },
                {
                  "name": "OneTermWithContext",
                  "value": "oneTermWithContext",
                  "description": "Completes the last term in a query with two or more terms, where the last two\nterms are a phrase that exists in the index. For example, if the input is 'washington medic', the suggested terms could include 'washington medicaid' and 'washington medical'."
                }
              ]
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "An OData expression that filters the documents used to produce completed terms\nfor the Autocomplete result.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "A value indicating whether to use fuzzy matching for the autocomplete query.\nDefault is false. When set to true, the query will find terms even if there's a\nsubstituted or missing character in the search text. While this provides a\nbetter experience in some scenarios, it comes at a performance cost as fuzzy\nautocomplete queries are slower and consume more resources.",
            "required": false,
            "type": "boolean",
            "x-ms-client-name": "useFuzzyMatching"
          },
          {
            "name": "highlightPostTag",
            "in": "query",
            "description": "A string tag that is appended to hit highlights. Must be set with\nhighlightPreTag. If omitted, hit highlighting is disabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "highlightPreTag",
            "in": "query",
            "description": "A string tag that is prepended to hit highlights. Must be set with\nhighlightPostTag. If omitted, hit highlighting is disabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "minimumCoverage",
            "in": "query",
            "description": "A number between 0 and 100 indicating the percentage of the index that must be\ncovered by an autocomplete query in order for the query to be reported as a\nsuccess. This parameter can be useful for ensuring search availability even for\nservices with only one replica. The default is 80.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "The list of field names to consider when querying for auto-completed terms.\nTarget fields must be included in the specified suggester.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of auto-completed terms to retrieve. This must be a value between 1\nand 100. The default is 5.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AutocompleteResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexAutocompleteDocumentsGet": {
            "$ref": "./examples/SearchIndexAutocompleteDocumentsGet.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.index": {
      "post": {
        "operationId": "Documents_Index",
        "description": "Sends a batch of document write actions to the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "batch",
            "in": "body",
            "description": "The batch of index actions.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndexBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response containing the status of operations for all documents in the indexing\nrequest.",
            "schema": {
              "$ref": "#/definitions/IndexDocumentsResult"
            }
          },
          "207": {
            "description": "Response containing the status of operations for all documents in the indexing\nrequest.",
            "schema": {
              "$ref": "#/definitions/IndexDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexIndexDocuments": {
            "$ref": "./examples/SearchIndexIndexDocuments.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.post.autocomplete": {
      "post": {
        "operationId": "Documents_AutocompletePost",
        "description": "Autocompletes incomplete query terms based on input text and matching terms in\nthe index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "autocompleteRequest",
            "in": "body",
            "description": "The definition of the Autocomplete request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutocompleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AutocompleteResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexAutocompleteDocumentsPost": {
            "$ref": "./examples/SearchIndexAutocompleteDocumentsPost.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.post.search": {
      "post": {
        "operationId": "Documents_SearchPost",
        "description": "Searches for documents in the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "searchRequest",
            "in": "body",
            "description": "The definition of the Search request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexSearchDocumentsPost": {
            "$ref": "./examples/SearchIndexSearchDocumentsPost.json"
          },
          "SearchIndexSearchDocumentsSemanticPost": {
            "$ref": "./examples/SearchIndexSearchDocumentsSemanticPost.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.post.suggest": {
      "post": {
        "operationId": "Documents_SuggestPost",
        "description": "Suggests documents in the index that match the given partial query text.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "suggestRequest",
            "in": "body",
            "description": "The Suggest request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuggestRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuggestDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexSuggestDocumentsPost": {
            "$ref": "./examples/SearchIndexSuggestDocumentsPost.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs/search.suggest": {
      "get": {
        "operationId": "Documents_SuggestGet",
        "description": "Suggests documents in the index that match the given partial query text.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "search",
            "in": "query",
            "description": "The search text to use to suggest documents. Must be at least 1 character, and\nno more than 100 characters.",
            "required": true,
            "type": "string",
            "x-ms-client-name": "searchText"
          },
          {
            "name": "suggesterName",
            "in": "query",
            "description": "The name of the suggester as specified in the suggesters collection that's part\nof the index definition.",
            "required": true,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "An OData expression that filters the documents considered for suggestions.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "A value indicating whether to use fuzzy matching for the suggestions query.\nDefault is false. When set to true, the query will find terms even if there's a\nsubstituted or missing character in the search text. While this provides a\nbetter experience in some scenarios, it comes at a performance cost as fuzzy\nsuggestions queries are slower and consume more resources.",
            "required": false,
            "type": "boolean",
            "x-ms-client-name": "useFuzzyMatching"
          },
          {
            "name": "highlightPostTag",
            "in": "query",
            "description": "A string tag that is appended to hit highlights. Must be set with\nhighlightPreTag. If omitted, hit highlighting of suggestions is disabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "highlightPreTag",
            "in": "query",
            "description": "A string tag that is prepended to hit highlights. Must be set with\nhighlightPostTag. If omitted, hit highlighting of suggestions is disabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "minimumCoverage",
            "in": "query",
            "description": "A number between 0 and 100 indicating the percentage of the index that must be\ncovered by a suggestions query in order for the query to be reported as a\nsuccess. This parameter can be useful for ensuring search availability even for\nservices with only one replica. The default is 80.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "The list of OData $orderby expressions by which to sort the results. Each\nexpression can be either a field name or a call to either the geo.distance() or\nthe search.score() functions. Each expression can be followed by asc to\nindicate ascending, or desc to indicate descending. The default is ascending\norder. Ties will be broken by the match scores of documents. If no $orderby is\nspecified, the default sort order is descending by document match score. There\ncan be at most 32 $orderby clauses.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "x-ms-client-name": "orderBy"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "The list of field names to search for the specified search text. Target fields\nmust be included in the specified suggester.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The list of fields to retrieve. If unspecified, only the key field will be\nincluded in the results.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of suggestions to retrieve. The value must be a number between 1 and\n100. The default is 5.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuggestDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexSuggestDocumentsGet": {
            "$ref": "./examples/SearchIndexSuggestDocumentsGet.json"
          }
        }
      }
    },
    "/indexes('{indexName}')/docs('{key}')": {
      "get": {
        "operationId": "Documents_Get",
        "description": "Retrieves a document from the index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the document to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "List of field names to retrieve for the document; Any field not retrieved will\nbe missing from the returned document.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "x-ms-client-name": "selectedFields"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "The name of the index.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/LookupDocument"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "SearchIndexGetDocument": {
            "$ref": "./examples/SearchIndexGetDocument.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AutocompleteItem": {
      "type": "object",
      "description": "The result of Autocomplete requests.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The completed term."
        },
        "queryPlusText": {
          "type": "string",
          "description": "The query along with the completed term."
        }
      },
      "required": [
        "text",
        "queryPlusText"
      ]
    },
    "AutocompleteMode": {
      "type": "string",
      "description": "Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms'\nto get shingles and 'oneTermWithContext' to use the current context in\nproducing autocomplete terms.",
      "enum": [
        "oneTerm",
        "twoTerms",
        "oneTermWithContext"
      ],
      "x-ms-enum": {
        "name": "AutocompleteMode",
        "modelAsString": true,
        "values": [
          {
            "name": "OneTerm",
            "value": "oneTerm",
            "description": "Only one term is suggested. If the query has two terms, only the last term is\ncompleted. For example, if the input is 'washington medic', the suggested terms\ncould include 'medicaid', 'medicare', and 'medicine'."
          },
          {
            "name": "TwoTerms",
            "value": "twoTerms",
            "description": "Matching two-term phrases in the index will be suggested. For example, if the\ninput is 'medic', the suggested terms could include 'medicare coverage' and 'medical assistant'."
          },
          {
            "name": "OneTermWithContext",
            "value": "oneTermWithContext",
            "description": "Completes the last term in a query with two or more terms, where the last two\nterms are a phrase that exists in the index. For example, if the input is 'washington medic', the suggested terms could include 'washington medicaid' and 'washington medical'."
          }
        ]
      }
    },
    "AutocompleteRequest": {
      "type": "object",
      "description": "Parameters for fuzzy matching, and other autocomplete query behaviors.",
      "properties": {
        "search": {
          "type": "string",
          "description": "The search text on which to base autocomplete results."
        },
        "autocompleteMode": {
          "$ref": "#/definitions/AutocompleteMode",
          "description": "Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms'\nto get shingles and 'oneTermWithContext' to use the current context while\nproducing auto-completed terms."
        },
        "filter": {
          "type": "string",
          "description": "An OData expression that filters the documents used to produce completed terms\nfor the Autocomplete result."
        },
        "fuzzy": {
          "type": "boolean",
          "description": "A value indicating whether to use fuzzy matching for the autocomplete query.\nDefault is false. When set to true, the query will autocomplete terms even if\nthere's a substituted or missing character in the search text. While this\nprovides a better experience in some scenarios, it comes at a performance cost\nas fuzzy autocomplete queries are slower and consume more resources."
        },
        "highlightPostTag": {
          "type": "string",
          "description": "A string tag that is appended to hit highlights. Must be set with\nhighlightPreTag. If omitted, hit highlighting is disabled."
        },
        "highlightPreTag": {
          "type": "string",
          "description": "A string tag that is prepended to hit highlights. Must be set with\nhighlightPostTag. If omitted, hit highlighting is disabled."
        },
        "minimumCoverage": {
          "type": "number",
          "format": "double",
          "description": "A number between 0 and 100 indicating the percentage of the index that must be\ncovered by an autocomplete query in order for the query to be reported as a\nsuccess. This parameter can be useful for ensuring search availability even for\nservices with only one replica. The default is 80."
        },
        "searchFields": {
          "type": "string",
          "description": "The comma-separated list of field names to consider when querying for\nauto-completed terms. Target fields must be included in the specified\nsuggester."
        },
        "suggesterName": {
          "type": "string",
          "description": "The name of the suggester as specified in the suggesters collection that's part\nof the index definition."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The number of auto-completed terms to retrieve. This must be a value between 1\nand 100. The default is 5."
        }
      },
      "required": [
        "search",
        "suggesterName"
      ]
    },
    "AutocompleteResult": {
      "type": "object",
      "description": "The result of Autocomplete query.",
      "properties": {
        "@search.coverage": {
          "type": "number",
          "format": "double",
          "description": "A value indicating the percentage of the index that was considered by the\nautocomplete request, or null if minimumCoverage was not specified in the\nrequest.",
          "x-ms-client-name": "coverage"
        },
        "value": {
          "type": "array",
          "description": "The list of returned Autocompleted items.",
          "items": {
            "$ref": "#/definitions/AutocompleteItem"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value"
      ]
    },
    "DebugInfo": {
      "type": "object",
      "description": "Contains debugging information that can be used to further explore your search\nresults.",
      "properties": {
        "queryRewrites": {
          "$ref": "#/definitions/QueryRewritesDebugInfo",
          "description": "Contains debugging information specific to query rewrites.",
          "readOnly": true
        }
      }
    },
    "DocumentDebugInfo": {
      "type": "object",
      "description": "Contains debugging information that can be used to further explore your search\nresults.",
      "properties": {
        "semantic": {
          "$ref": "#/definitions/SemanticDebugInfo",
          "description": "Contains debugging information specific to semantic ranking requests.",
          "readOnly": true
        },
        "vectors": {
          "$ref": "#/definitions/VectorsDebugInfo",
          "description": "Contains debugging information specific to vector and hybrid search.",
          "readOnly": true
        }
      }
    },
    "ErrorAdditionalInfo": {
      "type": "object",
      "description": "The resource management error additional info.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The additional info type."
        },
        "info": {
          "type": "object",
          "description": "The additional info.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "description": "The error detail.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        },
        "target": {
          "type": "string",
          "description": "The error target."
        },
        "details": {
          "type": "array",
          "description": "The error details.",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "x-ms-identifiers": []
        },
        "additionalInfo": {
          "type": "array",
          "description": "The error additional info.",
          "items": {
            "$ref": "#/definitions/ErrorAdditionalInfo"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "description": "Common error response for all Azure Resource Manager APIs to return error\ndetails for failed operations. (This also follows the OData error response\nformat.).",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "The error object."
        }
      }
    },
    "FacetResult": {
      "type": "object",
      "description": "A single bucket of a facet query result. Reports the number of documents with a\nfield value falling within a particular range or having a particular value or\ninterval.",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The approximate count of documents falling within the bucket described by this\nfacet."
        },
        "@search.facets": {
          "type": "object",
          "description": "The nested facet query results for the search operation, organized as a\ncollection of buckets for each faceted field; null if the query did not contain\nany nested facets.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FacetResult"
            },
            "type": "array",
            "x-ms-identifiers": []
          },
          "readOnly": true,
          "x-ms-client-name": "facets"
        }
      },
      "additionalProperties": {}
    },
    "HybridCountAndFacetMode": {
      "type": "string",
      "description": "Determines whether the count and facets should includes all documents that\nmatched the search query, or only the documents that are retrieved within the 'maxTextRecallSize'\nwindow. The default value is 'countAllResults'.",
      "enum": [
        "countRetrievableResults",
        "countAllResults"
      ],
      "x-ms-enum": {
        "name": "HybridCountAndFacetMode",
        "modelAsString": true,
        "values": [
          {
            "name": "CountRetrievableResults",
            "value": "countRetrievableResults",
            "description": "Only include documents that were matched within the 'maxTextRecallSize'\nretrieval window when computing 'count' and 'facets'."
          },
          {
            "name": "CountAllResults",
            "value": "countAllResults",
            "description": "Include all documents that were matched by the search query when computing 'count'\nand 'facets', regardless of whether or not those documents are within\nthe 'maxTextRecallSize' retrieval window."
          }
        ]
      }
    },
    "HybridSearch": {
      "type": "object",
      "description": "TThe query parameters to configure hybrid search behaviors.",
      "properties": {
        "maxTextRecallSize": {
          "type": "integer",
          "format": "int32",
          "description": "Determines the maximum number of documents to be retrieved by the text query\nportion of a hybrid search request. Those documents will be combined with the\ndocuments matching the vector queries to produce a single final list of\nresults. Choosing a larger maxTextRecallSize value will allow retrieving and\npaging through more documents (using the top and skip parameters), at the cost\nof higher resource utilization and higher latency. The value needs to be\nbetween 1 and 10,000. Default is 1000."
        },
        "countAndFacetMode": {
          "$ref": "#/definitions/HybridCountAndFacetMode",
          "description": "Determines whether the count and facets should includes all documents that\nmatched the search query, or only the documents that are retrieved within the 'maxTextRecallSize' window."
        }
      }
    },
    "IndexAction": {
      "type": "object",
      "description": "Represents an index action that operates on a document.",
      "properties": {
        "@search.action": {
          "$ref": "#/definitions/IndexActionType",
          "description": "The operation to perform on a document in an indexing batch.",
          "x-ms-client-name": "actionType"
        }
      },
      "additionalProperties": {}
    },
    "IndexActionType": {
      "type": "string",
      "description": "The operation to perform on a document in an indexing batch.",
      "enum": [
        "upload",
        "merge",
        "mergeOrUpload",
        "delete"
      ],
      "x-ms-enum": {
        "name": "IndexActionType",
        "modelAsString": true,
        "values": [
          {
            "name": "Upload",
            "value": "upload",
            "description": "Inserts the document into the index if it is new and updates it if it exists.\nAll fields are replaced in the update case."
          },
          {
            "name": "Merge",
            "value": "merge",
            "description": "Merges the specified field values with an existing document. If the document\ndoes not exist, the merge will fail. Any field you specify in a merge will\nreplace the existing field in the document. This also applies to collections of\nprimitive and complex types."
          },
          {
            "name": "MergeOrUpload",
            "value": "mergeOrUpload",
            "description": "Behaves like merge if a document with the given key already exists in the\nindex. If the document does not exist, it behaves like upload with a new\ndocument."
          },
          {
            "name": "Delete",
            "value": "delete",
            "description": "Removes the specified document from the index. Any field you specify in a\ndelete operation other than the key field will be ignored. If you want to\nremove an individual field from a document, use merge instead and set the field\nexplicitly to null."
          }
        ]
      }
    },
    "IndexBatch": {
      "type": "object",
      "description": "Contains a batch of document write actions to send to the index.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The actions in the batch.",
          "items": {
            "$ref": "#/definitions/IndexAction"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value"
      ]
    },
    "IndexDocumentsResult": {
      "type": "object",
      "description": "Response containing the status of operations for all documents in the indexing\nrequest.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of status information for each document in the indexing request.",
          "items": {
            "$ref": "#/definitions/IndexingResult"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value"
      ]
    },
    "IndexingResult": {
      "type": "object",
      "description": "Status of an indexing operation for a single document.",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of a document that was in the indexing request."
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message explaining why the indexing operation failed for the document\nidentified by the key; null if indexing succeeded."
        },
        "status": {
          "type": "boolean",
          "description": "A value indicating whether the indexing operation succeeded for the document\nidentified by the key."
        },
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "The status code of the indexing operation. Possible values include: 200 for a\nsuccessful update or delete, 201 for successful document creation, 400 for a\nmalformed input document, 404 for document not found, 409 for a version\nconflict, 422 when the index is temporarily unavailable, or 503 for when the\nservice is too busy."
        }
      },
      "required": [
        "key",
        "status",
        "statusCode"
      ]
    },
    "LookupDocument": {
      "type": "object",
      "description": "A document retrieved via a document lookup operation.",
      "additionalProperties": {}
    },
    "QueryAnswerResult": {
      "type": "object",
      "description": "An answer is a text passage extracted from the contents of the most relevant\ndocuments that matched the query. Answers are extracted from the top search\nresults. Answer candidates are scored and the top answers are selected.",
      "properties": {
        "score": {
          "type": "number",
          "format": "double",
          "description": "The score value represents how relevant the answer is to the query relative to\nother answers returned for the query."
        },
        "key": {
          "type": "string",
          "description": "The key of the document the answer was extracted from."
        },
        "text": {
          "type": "string",
          "description": "The text passage extracted from the document contents as the answer."
        },
        "highlights": {
          "type": "string",
          "description": "Same text passage as in the Text property with highlighted text phrases most\nrelevant to the query."
        }
      },
      "additionalProperties": {}
    },
    "QueryAnswerType": {
      "type": "string",
      "description": "This parameter is only valid if the query type is `semantic`. If set, the query\nreturns answers extracted from key passages in the highest ranked documents.\nThe number of answers returned can be configured by appending the pipe\ncharacter `|` followed by the `count-<number of answers>` option after the\nanswers parameter value, such as `extractive|count-3`. Default count is 1. The\nconfidence threshold can be configured by appending the pipe character `|`\nfollowed by the `threshold-<confidence threshold>` option after the answers\nparameter value, such as `extractive|threshold-0.9`. Default threshold is 0.7.\nThe maximum character length of answers can be configured by appending the pipe\ncharacter '|' followed by the 'count-<number of maximum character length>',\nsuch as 'extractive|maxcharlength-600'.",
      "enum": [
        "none",
        "extractive"
      ],
      "x-ms-enum": {
        "name": "QueryAnswerType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not return answers for the query."
          },
          {
            "name": "Extractive",
            "value": "extractive",
            "description": "Extracts answer candidates from the contents of the documents returned in\nresponse to a query expressed as a question in natural language."
          }
        ]
      }
    },
    "QueryCaptionResult": {
      "type": "object",
      "description": "Captions are the most representative passages from the document relatively to\nthe search query. They are often used as document summary. Captions are only\nreturned for queries of type `semantic`.",
      "properties": {
        "text": {
          "type": "string",
          "description": "A representative text passage extracted from the document most relevant to the\nsearch query."
        },
        "highlights": {
          "type": "string",
          "description": "Same text passage as in the Text property with highlighted phrases most\nrelevant to the query."
        }
      },
      "additionalProperties": {}
    },
    "QueryCaptionType": {
      "type": "string",
      "description": "This parameter is only valid if the query type is `semantic`. If set, the query\nreturns captions extracted from key passages in the highest ranked documents.\nWhen Captions is set to `extractive`, highlighting is enabled by default, and\ncan be configured by appending the pipe character `|` followed by the\n`highlight-<true/false>` option, such as `extractive|highlight-true`. Defaults\nto `None`. The maximum character length of captions can be configured by\nappending the pipe character '|' followed by the 'count-<number of maximum\ncharacter length>', such as 'extractive|maxcharlength-600'.",
      "enum": [
        "none",
        "extractive"
      ],
      "x-ms-enum": {
        "name": "QueryCaptionType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not return captions for the query."
          },
          {
            "name": "Extractive",
            "value": "extractive",
            "description": "Extracts captions from the matching documents that contain passages relevant to\nthe search query."
          }
        ]
      }
    },
    "QueryDebugMode": {
      "type": "string",
      "description": "Enables a debugging tool that can be used to further explore your search\nresults. You can enable multiple debug modes simultaneously by separating them\nwith a | character, for example: semantic|queryRewrites.",
      "enum": [
        "disabled",
        "semantic",
        "vector",
        "queryRewrites",
        "all"
      ],
      "x-ms-enum": {
        "name": "QueryDebugMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Disabled",
            "value": "disabled",
            "description": "No query debugging information will be returned."
          },
          {
            "name": "Semantic",
            "value": "semantic",
            "description": "Allows the user to further explore their reranked results."
          },
          {
            "name": "Vector",
            "value": "vector",
            "description": "Allows the user to further explore their hybrid and vector query results."
          },
          {
            "name": "QueryRewrites",
            "value": "queryRewrites",
            "description": "Allows the user to explore the list of query rewrites generated for their\nsearch request."
          },
          {
            "name": "All",
            "value": "all",
            "description": "Turn on all debug options."
          }
        ]
      }
    },
    "QueryLanguage": {
      "type": "string",
      "description": "The language of the query.",
      "enum": [
        "none",
        "en-us",
        "en-gb",
        "en-in",
        "en-ca",
        "en-au",
        "fr-fr",
        "fr-ca",
        "de-de",
        "es-es",
        "es-mx",
        "zh-cn",
        "zh-tw",
        "pt-br",
        "pt-pt",
        "it-it",
        "ja-jp",
        "ko-kr",
        "ru-ru",
        "cs-cz",
        "nl-be",
        "nl-nl",
        "hu-hu",
        "pl-pl",
        "sv-se",
        "tr-tr",
        "hi-in",
        "ar-sa",
        "ar-eg",
        "ar-ma",
        "ar-kw",
        "ar-jo",
        "da-dk",
        "no-no",
        "bg-bg",
        "hr-hr",
        "hr-ba",
        "ms-my",
        "ms-bn",
        "sl-sl",
        "ta-in",
        "vi-vn",
        "el-gr",
        "ro-ro",
        "is-is",
        "id-id",
        "th-th",
        "lt-lt",
        "uk-ua",
        "lv-lv",
        "et-ee",
        "ca-es",
        "fi-fi",
        "sr-ba",
        "sr-me",
        "sr-rs",
        "sk-sk",
        "nb-no",
        "hy-am",
        "bn-in",
        "eu-es",
        "gl-es",
        "gu-in",
        "he-il",
        "ga-ie",
        "kn-in",
        "ml-in",
        "mr-in",
        "fa-ae",
        "pa-in",
        "te-in",
        "ur-pk"
      ],
      "x-ms-enum": {
        "name": "QueryLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Query language not specified."
          },
          {
            "name": "EnUs",
            "value": "en-us",
            "description": "Query language value for English (United States)."
          },
          {
            "name": "EnGb",
            "value": "en-gb",
            "description": "Query language value for English (Great Britain)."
          },
          {
            "name": "EnIn",
            "value": "en-in",
            "description": "Query language value for English (India)."
          },
          {
            "name": "EnCa",
            "value": "en-ca",
            "description": "Query language value for English (Canada)."
          },
          {
            "name": "EnAu",
            "value": "en-au",
            "description": "Query language value for English (Australia)."
          },
          {
            "name": "FrFr",
            "value": "fr-fr",
            "description": "Query language value for French (France)."
          },
          {
            "name": "FrCa",
            "value": "fr-ca",
            "description": "Query language value for French (Canada)."
          },
          {
            "name": "DeDe",
            "value": "de-de",
            "description": "Query language value for German (Germany)."
          },
          {
            "name": "EsEs",
            "value": "es-es",
            "description": "Query language value for Spanish (Spain)."
          },
          {
            "name": "EsMx",
            "value": "es-mx",
            "description": "Query language value for Spanish (Mexico)."
          },
          {
            "name": "ZhCn",
            "value": "zh-cn",
            "description": "Query language value for Chinese (China)."
          },
          {
            "name": "ZhTw",
            "value": "zh-tw",
            "description": "Query language value for Chinese (Taiwan)."
          },
          {
            "name": "PtBr",
            "value": "pt-br",
            "description": "Query language value for Portuguese (Brazil)."
          },
          {
            "name": "PtPt",
            "value": "pt-pt",
            "description": "Query language value for Portuguese (Portugal)."
          },
          {
            "name": "ItIt",
            "value": "it-it",
            "description": "Query language value for Italian (Italy)."
          },
          {
            "name": "JaJp",
            "value": "ja-jp",
            "description": "Query language value for Japanese (Japan)."
          },
          {
            "name": "KoKr",
            "value": "ko-kr",
            "description": "Query language value for Korean (Korea)."
          },
          {
            "name": "RuRu",
            "value": "ru-ru",
            "description": "Query language value for Russian (Russia)."
          },
          {
            "name": "CsCz",
            "value": "cs-cz",
            "description": "Query language value for Czech (Czech Republic)."
          },
          {
            "name": "NlBe",
            "value": "nl-be",
            "description": "Query language value for Dutch (Belgium)."
          },
          {
            "name": "NlNl",
            "value": "nl-nl",
            "description": "Query language value for Dutch (Netherlands)."
          },
          {
            "name": "HuHu",
            "value": "hu-hu",
            "description": "Query language value for Hungarian (Hungary)."
          },
          {
            "name": "PlPl",
            "value": "pl-pl",
            "description": "Query language value for Polish (Poland)."
          },
          {
            "name": "SvSe",
            "value": "sv-se",
            "description": "Query language value for Swedish (Sweden)."
          },
          {
            "name": "TrTr",
            "value": "tr-tr",
            "description": "Query language value for Turkish (Turkey)."
          },
          {
            "name": "HiIn",
            "value": "hi-in",
            "description": "Query language value for Hindi (India)."
          },
          {
            "name": "ArSa",
            "value": "ar-sa",
            "description": "Query language value for Arabic (Saudi Arabia)."
          },
          {
            "name": "ArEg",
            "value": "ar-eg",
            "description": "Query language value for Arabic (Egypt)."
          },
          {
            "name": "ArMa",
            "value": "ar-ma",
            "description": "Query language value for Arabic (Morocco)."
          },
          {
            "name": "ArKw",
            "value": "ar-kw",
            "description": "Query language value for Arabic (Kuwait)."
          },
          {
            "name": "ArJo",
            "value": "ar-jo",
            "description": "Query language value for Arabic (Jordan)."
          },
          {
            "name": "DaDk",
            "value": "da-dk",
            "description": "Query language value for Danish (Denmark)."
          },
          {
            "name": "NoNo",
            "value": "no-no",
            "description": "Query language value for Norwegian (Norway)."
          },
          {
            "name": "BgBg",
            "value": "bg-bg",
            "description": "Query language value for Bulgarian (Bulgaria)."
          },
          {
            "name": "HrHr",
            "value": "hr-hr",
            "description": "Query language value for Croatian (Croatia)."
          },
          {
            "name": "HrBa",
            "value": "hr-ba",
            "description": "Query language value for Croatian (Bosnia and Herzegovina)."
          },
          {
            "name": "MsMy",
            "value": "ms-my",
            "description": "Query language value for Malay (Malaysia)."
          },
          {
            "name": "MsBn",
            "value": "ms-bn",
            "description": "Query language value for Malay (Brunei Darussalam)."
          },
          {
            "name": "SlSl",
            "value": "sl-sl",
            "description": "Query language value for Slovenian (Slovenia)."
          },
          {
            "name": "TaIn",
            "value": "ta-in",
            "description": "Query language value for Tamil (India)."
          },
          {
            "name": "ViVn",
            "value": "vi-vn",
            "description": "Query language value for Vietnamese (Viet Nam)."
          },
          {
            "name": "ElGr",
            "value": "el-gr",
            "description": "Query language value for Greek (Greece)."
          },
          {
            "name": "RoRo",
            "value": "ro-ro",
            "description": "Query language value for Romanian (Romania)."
          },
          {
            "name": "IsIs",
            "value": "is-is",
            "description": "Query language value for Icelandic (Iceland)."
          },
          {
            "name": "IdId",
            "value": "id-id",
            "description": "Query language value for Indonesian (Indonesia)."
          },
          {
            "name": "ThTh",
            "value": "th-th",
            "description": "Query language value for Thai (Thailand)."
          },
          {
            "name": "LtLt",
            "value": "lt-lt",
            "description": "Query language value for Lithuanian (Lithuania)."
          },
          {
            "name": "UkUa",
            "value": "uk-ua",
            "description": "Query language value for Ukrainian (Ukraine)."
          },
          {
            "name": "LvLv",
            "value": "lv-lv",
            "description": "Query language value for Latvian (Latvia)."
          },
          {
            "name": "EtEe",
            "value": "et-ee",
            "description": "Query language value for Estonian (Estonia)."
          },
          {
            "name": "CaEs",
            "value": "ca-es",
            "description": "Query language value for Catalan."
          },
          {
            "name": "FiFi",
            "value": "fi-fi",
            "description": "Query language value for Finnish (Finland)."
          },
          {
            "name": "SrBa",
            "value": "sr-ba",
            "description": "Query language value for Serbian (Bosnia and Herzegovina)."
          },
          {
            "name": "SrMe",
            "value": "sr-me",
            "description": "Query language value for Serbian (Montenegro)."
          },
          {
            "name": "SrRs",
            "value": "sr-rs",
            "description": "Query language value for Serbian (Serbia)."
          },
          {
            "name": "SkSk",
            "value": "sk-sk",
            "description": "Query language value for Slovak (Slovakia)."
          },
          {
            "name": "NbNo",
            "value": "nb-no",
            "description": "Query language value for Norwegian (Norway)."
          },
          {
            "name": "HyAm",
            "value": "hy-am",
            "description": "Query language value for Armenian (Armenia)."
          },
          {
            "name": "BnIn",
            "value": "bn-in",
            "description": "Query language value for Bengali (India)."
          },
          {
            "name": "EuEs",
            "value": "eu-es",
            "description": "Query language value for Basque."
          },
          {
            "name": "GlEs",
            "value": "gl-es",
            "description": "Query language value for Galician."
          },
          {
            "name": "GuIn",
            "value": "gu-in",
            "description": "Query language value for Gujarati (India)."
          },
          {
            "name": "HeIl",
            "value": "he-il",
            "description": "Query language value for Hebrew (Israel)."
          },
          {
            "name": "GaIe",
            "value": "ga-ie",
            "description": "Query language value for Irish (Ireland)."
          },
          {
            "name": "KnIn",
            "value": "kn-in",
            "description": "Query language value for Kannada (India)."
          },
          {
            "name": "MlIn",
            "value": "ml-in",
            "description": "Query language value for Malayalam (India)."
          },
          {
            "name": "MrIn",
            "value": "mr-in",
            "description": "Query language value for Marathi (India)."
          },
          {
            "name": "FaAe",
            "value": "fa-ae",
            "description": "Query language value for Persian (U.A.E.)."
          },
          {
            "name": "PaIn",
            "value": "pa-in",
            "description": "Query language value for Punjabi (India)."
          },
          {
            "name": "TeIn",
            "value": "te-in",
            "description": "Query language value for Telugu (India)."
          },
          {
            "name": "UrPk",
            "value": "ur-pk",
            "description": "Query language value for Urdu (Pakistan)."
          }
        ]
      }
    },
    "QueryResultDocumentRerankerInput": {
      "type": "object",
      "description": "The raw concatenated strings that were sent to the semantic enrichment process.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The raw string for the title field that was used for semantic enrichment.",
          "readOnly": true
        },
        "content": {
          "type": "string",
          "description": "The raw concatenated strings for the content fields that were used for semantic\nenrichment.",
          "readOnly": true
        },
        "keywords": {
          "type": "string",
          "description": "The raw concatenated strings for the keyword fields that were used for semantic\nenrichment.",
          "readOnly": true
        }
      }
    },
    "QueryResultDocumentSemanticField": {
      "type": "object",
      "description": "Description of fields that were sent to the semantic enrichment process, as\nwell as how they were used",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field that was sent to the semantic enrichment process",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/SemanticFieldState",
          "description": "The way the field was used for the semantic enrichment process (fully used,\npartially used, or unused)",
          "readOnly": true
        }
      }
    },
    "QueryResultDocumentSubscores": {
      "type": "object",
      "description": "The breakdown of subscores between the text and vector query components of the\nsearch query for this document. Each vector query is shown as a separate object\nin the same order they were received.",
      "properties": {
        "text": {
          "$ref": "#/definitions/TextResult",
          "description": "The BM25 or Classic score for the text portion of the query.",
          "readOnly": true
        },
        "vectors": {
          "type": "array",
          "description": "The vector similarity and @search.score values for each vector query.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/SingleVectorFieldResult"
            }
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "documentBoost": {
          "type": "number",
          "format": "double",
          "description": "The BM25 or Classic score for the text portion of the query.",
          "readOnly": true
        }
      }
    },
    "QueryRewritesDebugInfo": {
      "type": "object",
      "description": "Contains debugging information specific to query rewrites.",
      "properties": {
        "text": {
          "$ref": "#/definitions/QueryRewritesValuesDebugInfo",
          "description": "List of query rewrites generated for the text query.",
          "readOnly": true
        },
        "vectors": {
          "type": "array",
          "description": "List of query rewrites generated for the vectorizable text queries.",
          "items": {
            "$ref": "#/definitions/QueryRewritesValuesDebugInfo"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "QueryRewritesType": {
      "type": "string",
      "description": "This parameter is only valid if the query type is `semantic`. When\nQueryRewrites is set to `generative`, the query terms are sent to a generate\nmodel which will produce 10 (default) rewrites to help increase the recall of\nthe request. The requested count can be configured by appending the pipe\ncharacter `|` followed by the `count-<number of rewrites>` option, such as\n`generative|count-3`. Defaults to `None`.",
      "enum": [
        "none",
        "generative"
      ],
      "x-ms-enum": {
        "name": "QueryRewritesType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not generate additional query rewrites for this query."
          },
          {
            "name": "Generative",
            "value": "generative",
            "description": "Generate alternative query terms to increase the recall of a search request."
          }
        ]
      }
    },
    "QueryRewritesValuesDebugInfo": {
      "type": "object",
      "description": "Contains debugging information specific to query rewrites.",
      "properties": {
        "inputQuery": {
          "type": "string",
          "description": "The input text to the generative query rewriting model. There may be cases\nwhere the user query and the input to the generative model are not identical.",
          "readOnly": true
        },
        "rewrites": {
          "type": "array",
          "description": "List of query rewrites.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "QuerySpellerType": {
      "type": "string",
      "description": "Improve search recall by spell-correcting individual search query terms.",
      "enum": [
        "none",
        "lexicon"
      ],
      "x-ms-enum": {
        "name": "QuerySpellerType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Speller not enabled."
          },
          {
            "name": "Lexicon",
            "value": "lexicon",
            "description": "Speller corrects individual query terms using a static lexicon for the language\nspecified by the queryLanguage parameter."
          }
        ]
      }
    },
    "QueryType": {
      "type": "string",
      "description": "Specifies the syntax of the search query. The default is 'simple'. Use 'full'\nif your query uses the Lucene query syntax and 'semantic' if query syntax is\nnot needed.",
      "enum": [
        "simple",
        "full",
        "semantic"
      ],
      "x-ms-enum": {
        "name": "QueryType",
        "modelAsString": true,
        "values": [
          {
            "name": "Simple",
            "value": "simple",
            "description": "Uses the simple query syntax for searches. Search text is interpreted using a\nsimple query language that allows for symbols such as +, * and \"\". Queries are\nevaluated across all searchable fields by default, unless the searchFields\nparameter is specified."
          },
          {
            "name": "Full",
            "value": "full",
            "description": "Uses the full Lucene query syntax for searches. Search text is interpreted\nusing the Lucene query language which allows field-specific and weighted\nsearches, as well as other advanced features."
          },
          {
            "name": "Semantic",
            "value": "semantic",
            "description": "Best suited for queries expressed in natural language as opposed to keywords.\nImproves precision of search results by re-ranking the top search results using\na ranking model trained on the Web corpus."
          }
        ]
      }
    },
    "ScoringStatistics": {
      "type": "string",
      "description": "A value that specifies whether we want to calculate scoring statistics (such as\ndocument frequency) globally for more consistent scoring, or locally, for lower\nlatency. The default is 'local'. Use 'global' to aggregate scoring statistics\nglobally before scoring. Using global scoring statistics can increase latency\nof search queries.",
      "enum": [
        "local",
        "global"
      ],
      "x-ms-enum": {
        "name": "ScoringStatistics",
        "modelAsString": true,
        "values": [
          {
            "name": "Local",
            "value": "local",
            "description": "The scoring statistics will be calculated locally for lower latency."
          },
          {
            "name": "Global",
            "value": "global",
            "description": "The scoring statistics will be calculated globally for more consistent scoring."
          }
        ]
      }
    },
    "SearchDocumentsResult": {
      "type": "object",
      "description": "Response containing search results from an index.",
      "properties": {
        "@odata.count": {
          "type": "integer",
          "format": "int64",
          "description": "The total count of results found by the search operation, or null if the count\nwas not requested. If present, the count may be greater than the number of\nresults in this response. This can happen if you use the $top or $skip\nparameters, or if the query can't return all the requested documents in a\nsingle response.",
          "x-ms-client-name": "count"
        },
        "@search.coverage": {
          "type": "number",
          "format": "double",
          "description": "A value indicating the percentage of the index that was included in the query,\nor null if minimumCoverage was not specified in the request.",
          "x-ms-client-name": "coverage"
        },
        "@search.facets": {
          "type": "object",
          "description": "The facet query results for the search operation, organized as a collection of\nbuckets for each faceted field; null if the query did not include any facet\nexpressions.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FacetResult"
            },
            "type": "array",
            "x-ms-identifiers": []
          },
          "x-ms-client-name": "facets"
        },
        "@search.answers": {
          "type": "array",
          "description": "The answers query results for the search operation; null if the answers query\nparameter was not specified or set to 'none'.",
          "items": {
            "$ref": "#/definitions/QueryAnswerResult"
          },
          "x-ms-client-name": "answers",
          "x-ms-identifiers": []
        },
        "@search.debug": {
          "$ref": "#/definitions/DebugInfo",
          "description": "Debug information that applies to the search results as a whole.",
          "readOnly": true,
          "x-ms-client-name": "debugInfo"
        },
        "@search.nextPageParameters": {
          "$ref": "#/definitions/SearchRequest",
          "description": "Continuation JSON payload returned when the query can't return all the\nrequested results in a single response. You can use this JSON along with",
          "x-ms-client-name": "nextPageParameters"
        },
        "value": {
          "type": "array",
          "description": "The sequence of results returned by the query.",
          "items": {
            "$ref": "#/definitions/SearchResult"
          },
          "x-ms-identifiers": []
        },
        "@odata.nextLink": {
          "type": "string",
          "description": "Continuation URL returned when the query can't return all the requested results\nin a single response. You can use this URL to formulate another GET or POST\nSearch request to get the next part of the search response. Make sure to use\nthe same verb (GET or POST) as the request that produced this response.",
          "x-ms-client-name": "nextLink"
        },
        "@search.semanticPartialResponseReason": {
          "$ref": "#/definitions/SemanticErrorReason",
          "description": "Reason that a partial response was returned for a semantic ranking request.",
          "x-ms-client-name": "semanticPartialResponseReason"
        },
        "@search.semanticPartialResponseType": {
          "$ref": "#/definitions/SemanticSearchResultsType",
          "description": "Type of partial response that was returned for a semantic ranking request.",
          "x-ms-client-name": "semanticPartialResponseType"
        },
        "@search.semanticQueryRewritesResultType": {
          "$ref": "#/definitions/SemanticQueryRewritesResultType",
          "description": "Type of query rewrite that was used to retrieve documents.",
          "readOnly": true,
          "x-ms-client-name": "semanticQueryRewritesResultType"
        }
      },
      "required": [
        "value"
      ]
    },
    "SearchMode": {
      "type": "string",
      "description": "Specifies whether any or all of the search terms must be matched in order to\ncount the document as a match.",
      "enum": [
        "any",
        "all"
      ],
      "x-ms-enum": {
        "name": "SearchMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Any",
            "value": "any",
            "description": "Any of the search terms must be matched in order to count the document as a\nmatch."
          },
          {
            "name": "All",
            "value": "all",
            "description": "All of the search terms must be matched in order to count the document as a\nmatch."
          }
        ]
      }
    },
    "SearchRequest": {
      "type": "object",
      "description": "Parameters for filtering, sorting, faceting, paging, and other search query\nbehaviors.",
      "properties": {
        "count": {
          "type": "boolean",
          "description": "A value that specifies whether to fetch the total count of results. Default is\nfalse. Setting this value to true may have a performance impact. Note that the\ncount returned is an approximation."
        },
        "facets": {
          "type": "array",
          "description": "The list of facet expressions to apply to the search query. Each facet\nexpression contains a field name, optionally followed by a comma-separated list\nof name:value pairs.",
          "items": {
            "type": "string"
          }
        },
        "filter": {
          "type": "string",
          "description": "The OData $filter expression to apply to the search query."
        },
        "highlight": {
          "type": "string",
          "description": "The comma-separated list of field names to use for hit highlights. Only\nsearchable fields can be used for hit highlighting."
        },
        "highlightPostTag": {
          "type": "string",
          "description": "A string tag that is appended to hit highlights. Must be set with\nhighlightPreTag. Default is &lt;/em&gt;."
        },
        "highlightPreTag": {
          "type": "string",
          "description": "A string tag that is prepended to hit highlights. Must be set with\nhighlightPostTag. Default is &lt;em&gt;."
        },
        "minimumCoverage": {
          "type": "number",
          "format": "double",
          "description": "A number between 0 and 100 indicating the percentage of the index that must be\ncovered by a search query in order for the query to be reported as a success.\nThis parameter can be useful for ensuring search availability even for services\nwith only one replica. The default is 100."
        },
        "orderby": {
          "type": "string",
          "description": "The comma-separated list of OData $orderby expressions by which to sort the\nresults. Each expression can be either a field name or a call to either the\ngeo.distance() or the search.score() functions. Each expression can be followed\nby asc to indicate ascending, or desc to indicate descending. The default is\nascending order. Ties will be broken by the match scores of documents. If no\n$orderby is specified, the default sort order is descending by document match\nscore. There can be at most 32 $orderby clauses."
        },
        "queryType": {
          "$ref": "#/definitions/QueryType",
          "description": "A value that specifies the syntax of the search query. The default is 'simple'.\nUse 'full' if your query uses the Lucene query syntax."
        },
        "scoringStatistics": {
          "$ref": "#/definitions/ScoringStatistics",
          "description": "A value that specifies whether we want to calculate scoring statistics (such as\ndocument frequency) globally for more consistent scoring, or locally, for lower\nlatency. The default is 'local'. Use 'global' to aggregate scoring statistics\nglobally before scoring. Using global scoring statistics can increase latency\nof search queries."
        },
        "sessionId": {
          "type": "string",
          "description": "A value to be used to create a sticky session, which can help getting more\nconsistent results. As long as the same sessionId is used, a best-effort\nattempt will be made to target the same replica set. Be wary that reusing the\nsame sessionID values repeatedly can interfere with the load balancing of the\nrequests across replicas and adversely affect the performance of the search\nservice. The value used as sessionId cannot start with a '_' character."
        },
        "scoringParameters": {
          "type": "array",
          "description": "The list of parameter values to be used in scoring functions (for example,\nreferencePointParameter) using the format name-values. For example, if the\nscoring profile defines a function with a parameter called 'mylocation' the\nparameter string would be \"mylocation--122.2,44.8\" (without the quotes).",
          "items": {
            "type": "string"
          }
        },
        "scoringProfile": {
          "type": "string",
          "description": "The name of a scoring profile to evaluate match scores for matching documents\nin order to sort the results."
        },
        "debug": {
          "$ref": "#/definitions/QueryDebugMode",
          "description": "Enables a debugging tool that can be used to further explore your reranked\nresults."
        },
        "search": {
          "type": "string",
          "description": "A full-text search query expression; Use \"*\" or omit this parameter to match\nall documents."
        },
        "searchFields": {
          "type": "string",
          "description": "The comma-separated list of field names to which to scope the full-text search.\nWhen using fielded search (fieldName:searchExpression) in a full Lucene query,\nthe field names of each fielded search expression take precedence over any\nfield names listed in this parameter."
        },
        "searchMode": {
          "$ref": "#/definitions/SearchMode",
          "description": "A value that specifies whether any or all of the search terms must be matched\nin order to count the document as a match."
        },
        "queryLanguage": {
          "$ref": "#/definitions/QueryLanguage",
          "description": "A value that specifies the language of the search query."
        },
        "speller": {
          "$ref": "#/definitions/QuerySpellerType",
          "description": "A value that specified the type of the speller to use to spell-correct\nindividual search query terms."
        },
        "select": {
          "type": "string",
          "description": "The comma-separated list of fields to retrieve. If unspecified, all fields\nmarked as retrievable in the schema are included."
        },
        "skip": {
          "type": "integer",
          "format": "int32",
          "description": "The number of search results to skip. This value cannot be greater than\n100,000. If you need to scan documents in sequence, but cannot use skip due to\nthis limitation, consider using orderby on a totally-ordered key and filter\nwith a range query instead."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The number of search results to retrieve. This can be used in conjunction with\n$skip to implement client-side paging of search results. If results are\ntruncated due to server-side paging, the response will include a continuation\ntoken that can be used to issue another Search request for the next page of\nresults."
        },
        "semanticConfiguration": {
          "type": "string",
          "description": "The name of a semantic configuration that will be used when processing\ndocuments for queries of type semantic."
        },
        "semanticErrorHandling": {
          "$ref": "#/definitions/SemanticErrorMode",
          "description": "Allows the user to choose whether a semantic call should fail completely\n(default / current behavior), or to return partial results."
        },
        "semanticMaxWaitInMilliseconds": {
          "type": "integer",
          "format": "int32",
          "description": "Allows the user to set an upper bound on the amount of time it takes for\nsemantic enrichment to finish processing before the request fails.",
          "minimum": 700
        },
        "semanticQuery": {
          "type": "string",
          "description": "Allows setting a separate search query that will be solely used for semantic\nreranking, semantic captions and semantic answers. Is useful for scenarios\nwhere there is a need to use different queries between the base retrieval and\nranking phase, and the L2 semantic phase."
        },
        "answers": {
          "$ref": "#/definitions/QueryAnswerType",
          "description": "A value that specifies whether answers should be returned as part of the search\nresponse."
        },
        "captions": {
          "$ref": "#/definitions/QueryCaptionType",
          "description": "A value that specifies whether captions should be returned as part of the\nsearch response."
        },
        "queryRewrites": {
          "$ref": "#/definitions/QueryRewritesType",
          "description": "A value that specifies whether query rewrites should be generated to augment\nthe search query."
        },
        "semanticFields": {
          "type": "string",
          "description": "The comma-separated list of field names used for semantic ranking."
        },
        "vectorQueries": {
          "type": "array",
          "description": "The query parameters for vector and hybrid search queries.",
          "items": {
            "$ref": "#/definitions/VectorQuery"
          },
          "x-ms-identifiers": []
        },
        "vectorFilterMode": {
          "$ref": "#/definitions/VectorFilterMode",
          "description": "Determines whether or not filters are applied before or after the vector search\nis performed. Default is 'preFilter' for new indexes."
        },
        "hybridSearch": {
          "$ref": "#/definitions/HybridSearch",
          "description": "The query parameters to configure hybrid search behaviors."
        }
      }
    },
    "SearchResult": {
      "type": "object",
      "description": "Contains a document found by a search query, plus associated metadata.",
      "properties": {
        "@search.score": {
          "type": "number",
          "format": "double",
          "description": "The relevance score of the document compared to other documents returned by the\nquery.",
          "x-ms-client-name": "score"
        },
        "@search.rerankerScore": {
          "type": "number",
          "format": "double",
          "description": "The relevance score computed by the semantic ranker for the top search results.\nSearch results are sorted by the RerankerScore first and then by the Score.\nRerankerScore is only returned for queries of type 'semantic'.",
          "x-ms-client-name": "rerankerScore"
        },
        "@search.highlights": {
          "type": "object",
          "description": "Text fragments from the document that indicate the matching search terms,\norganized by each applicable field; null if hit highlighting was not enabled\nfor the query.",
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-ms-client-name": "highlights"
        },
        "@search.captions": {
          "type": "array",
          "description": "Captions are the most representative passages from the document relatively to\nthe search query. They are often used as document summary. Captions are only\nreturned for queries of type 'semantic'.",
          "items": {
            "$ref": "#/definitions/QueryCaptionResult"
          },
          "x-ms-client-name": "captions",
          "x-ms-identifiers": []
        },
        "@search.documentDebugInfo": {
          "type": "array",
          "description": "Contains debugging information that can be used to further explore your search\nresults.",
          "items": {
            "$ref": "#/definitions/DocumentDebugInfo"
          },
          "readOnly": true,
          "x-ms-client-name": "documentDebugInfo",
          "x-ms-identifiers": []
        }
      },
      "required": [
        "@search.score"
      ],
      "additionalProperties": {}
    },
    "SearchScoreThreshold": {
      "type": "object",
      "description": "The results of the vector query will filter based on the '@search.score' value.\nNote this is the @search.score returned as part of the search response. The\nthreshold direction will be chosen for higher @search.score.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The threshold will filter based on the '@search.score' value. Note this is the\n@search.score returned as part of the search response. The threshold direction\nwill be chosen for higher @search.score."
        }
      },
      "required": [
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VectorThreshold"
        }
      ],
      "x-ms-discriminator-value": "searchScore"
    },
    "SemanticDebugInfo": {
      "type": "object",
      "description": "Contains debugging information specific to semantic ranking requests.",
      "properties": {
        "titleField": {
          "$ref": "#/definitions/QueryResultDocumentSemanticField",
          "description": "The title field that was sent to the semantic enrichment process, as well as\nhow it was used",
          "readOnly": true
        },
        "contentFields": {
          "type": "array",
          "description": "The content fields that were sent to the semantic enrichment process, as well\nas how they were used",
          "items": {
            "$ref": "#/definitions/QueryResultDocumentSemanticField"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "keywordFields": {
          "type": "array",
          "description": "The keyword fields that were sent to the semantic enrichment process, as well\nas how they were used",
          "items": {
            "$ref": "#/definitions/QueryResultDocumentSemanticField"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "rerankerInput": {
          "$ref": "#/definitions/QueryResultDocumentRerankerInput",
          "description": "The raw concatenated strings that were sent to the semantic enrichment process.",
          "readOnly": true
        }
      }
    },
    "SemanticErrorMode": {
      "type": "string",
      "description": "Allows the user to choose whether a semantic call should fail completely, or to\nreturn partial results.",
      "enum": [
        "partial",
        "fail"
      ],
      "x-ms-enum": {
        "name": "SemanticErrorMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Partial",
            "value": "partial",
            "description": "If the semantic processing fails, partial results still return. The definition\nof partial results depends on what semantic step failed and what was the reason\nfor failure."
          },
          {
            "name": "Fail",
            "value": "fail",
            "description": "If there is an exception during the semantic processing step, the query will\nfail and return the appropriate HTTP code depending on the error."
          }
        ]
      }
    },
    "SemanticErrorReason": {
      "type": "string",
      "description": "Reason that a partial response was returned for a semantic ranking request.",
      "enum": [
        "maxWaitExceeded",
        "capacityOverloaded",
        "transient"
      ],
      "x-ms-enum": {
        "name": "SemanticErrorReason",
        "modelAsString": true,
        "values": [
          {
            "name": "MaxWaitExceeded",
            "value": "maxWaitExceeded",
            "description": "If `semanticMaxWaitInMilliseconds` was set and the semantic processing duration\nexceeded that value. Only the base results were returned."
          },
          {
            "name": "CapacityOverloaded",
            "value": "capacityOverloaded",
            "description": "The request was throttled. Only the base results were returned."
          },
          {
            "name": "Transient",
            "value": "transient",
            "description": "At least one step of the semantic process failed."
          }
        ]
      }
    },
    "SemanticFieldState": {
      "type": "string",
      "description": "The way the field was used for the semantic enrichment process.",
      "enum": [
        "used",
        "unused",
        "partial"
      ],
      "x-ms-enum": {
        "name": "SemanticFieldState",
        "modelAsString": true,
        "values": [
          {
            "name": "Used",
            "value": "used",
            "description": "The field was fully used for semantic enrichment."
          },
          {
            "name": "Unused",
            "value": "unused",
            "description": "The field was not used for semantic enrichment."
          },
          {
            "name": "Partial",
            "value": "partial",
            "description": "The field was partially used for semantic enrichment."
          }
        ]
      }
    },
    "SemanticQueryRewritesResultType": {
      "type": "string",
      "description": "Type of query rewrite that was used for this request.",
      "enum": [
        "originalQueryOnly"
      ],
      "x-ms-enum": {
        "name": "SemanticQueryRewritesResultType",
        "modelAsString": true,
        "values": [
          {
            "name": "OriginalQueryOnly",
            "value": "originalQueryOnly",
            "description": "Query rewrites were not successfully generated for this request. Only the\noriginal query was used to retrieve the results."
          }
        ]
      }
    },
    "SemanticSearchResultsType": {
      "type": "string",
      "description": "Type of partial response that was returned for a semantic ranking request.",
      "enum": [
        "baseResults",
        "rerankedResults"
      ],
      "x-ms-enum": {
        "name": "SemanticSearchResultsType",
        "modelAsString": true,
        "values": [
          {
            "name": "BaseResults",
            "value": "baseResults",
            "description": "Results without any semantic enrichment or reranking."
          },
          {
            "name": "RerankedResults",
            "value": "rerankedResults",
            "description": "Results have been reranked with the reranker model and will include semantic\ncaptions. They will not include any answers, answers highlights or caption\nhighlights."
          }
        ]
      }
    },
    "SingleVectorFieldResult": {
      "type": "object",
      "description": "A single vector field result. Both @search.score and vector similarity values\nare returned. Vector similarity is related to @search.score by an equation.",
      "properties": {
        "searchScore": {
          "type": "number",
          "format": "double",
          "description": "The @search.score value that is calculated from the vector similarity score.\nThis is the score that's visible in a pure single-field single-vector query.",
          "readOnly": true
        },
        "vectorSimilarity": {
          "type": "number",
          "format": "double",
          "description": "The vector similarity score for this document. Note this is the canonical\ndefinition of similarity metric, not the 'distance' version. For example,\ncosine similarity instead of cosine distance.",
          "readOnly": true
        }
      }
    },
    "SuggestDocumentsResult": {
      "type": "object",
      "description": "Response containing suggestion query results from an index.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The sequence of results returned by the query.",
          "items": {
            "$ref": "#/definitions/SuggestResult"
          },
          "x-ms-identifiers": []
        },
        "@search.coverage": {
          "type": "number",
          "format": "double",
          "description": "A value indicating the percentage of the index that was included in the query,\nor null if minimumCoverage was not set in the request.",
          "x-ms-client-name": "coverage"
        }
      },
      "required": [
        "value"
      ]
    },
    "SuggestRequest": {
      "type": "object",
      "description": "Parameters for filtering, sorting, fuzzy matching, and other suggestions query\nbehaviors.",
      "properties": {
        "filter": {
          "type": "string",
          "description": "An OData expression that filters the documents considered for suggestions."
        },
        "fuzzy": {
          "type": "boolean",
          "description": "A value indicating whether to use fuzzy matching for the suggestion query.\nDefault is false. When set to true, the query will find suggestions even if\nthere's a substituted or missing character in the search text. While this\nprovides a better experience in some scenarios, it comes at a performance cost\nas fuzzy suggestion searches are slower and consume more resources."
        },
        "highlightPostTag": {
          "type": "string",
          "description": "A string tag that is appended to hit highlights. Must be set with\nhighlightPreTag. If omitted, hit highlighting of suggestions is disabled."
        },
        "highlightPreTag": {
          "type": "string",
          "description": "A string tag that is prepended to hit highlights. Must be set with\nhighlightPostTag. If omitted, hit highlighting of suggestions is disabled."
        },
        "minimumCoverage": {
          "type": "number",
          "format": "double",
          "description": "A number between 0 and 100 indicating the percentage of the index that must be\ncovered by a suggestion query in order for the query to be reported as a\nsuccess. This parameter can be useful for ensuring search availability even for\nservices with only one replica. The default is 80."
        },
        "orderby": {
          "type": "string",
          "description": "The comma-separated list of OData $orderby expressions by which to sort the\nresults. Each expression can be either a field name or a call to either the\ngeo.distance() or the search.score() functions. Each expression can be followed\nby asc to indicate ascending, or desc to indicate descending. The default is\nascending order. Ties will be broken by the match scores of documents. If no\n$orderby is specified, the default sort order is descending by document match\nscore. There can be at most 32 $orderby clauses."
        },
        "search": {
          "type": "string",
          "description": "The search text to use to suggest documents. Must be at least 1 character, and\nno more than 100 characters."
        },
        "searchFields": {
          "type": "string",
          "description": "The comma-separated list of field names to search for the specified search\ntext. Target fields must be included in the specified suggester."
        },
        "select": {
          "type": "string",
          "description": "The comma-separated list of fields to retrieve. If unspecified, only the key\nfield will be included in the results."
        },
        "suggesterName": {
          "type": "string",
          "description": "The name of the suggester as specified in the suggesters collection that's part\nof the index definition."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The number of suggestions to retrieve. This must be a value between 1 and 100.\nThe default is 5."
        }
      },
      "required": [
        "search",
        "suggesterName"
      ]
    },
    "SuggestResult": {
      "type": "object",
      "description": "A result containing a document found by a suggestion query, plus associated\nmetadata.",
      "properties": {
        "@search.text": {
          "type": "string",
          "description": "The text of the suggestion result.",
          "x-ms-client-name": "text"
        }
      },
      "required": [
        "@search.text"
      ],
      "additionalProperties": {}
    },
    "TextResult": {
      "type": "object",
      "description": "The BM25 or Classic score for the text portion of the query.",
      "properties": {
        "searchScore": {
          "type": "number",
          "format": "double",
          "description": "The BM25 or Classic score for the text portion of the query.",
          "readOnly": true
        }
      }
    },
    "VectorFilterMode": {
      "type": "string",
      "description": "Determines whether or not filters are applied before or after the vector search\nis performed.",
      "enum": [
        "postFilter",
        "preFilter"
      ],
      "x-ms-enum": {
        "name": "VectorFilterMode",
        "modelAsString": true,
        "values": [
          {
            "name": "PostFilter",
            "value": "postFilter",
            "description": "The filter will be applied after the candidate set of vector results is\nreturned. Depending on the filter selectivity, this can result in fewer results\nthan requested by the parameter 'k'."
          },
          {
            "name": "PreFilter",
            "value": "preFilter",
            "description": "The filter will be applied before the search query."
          }
        ]
      }
    },
    "VectorQuery": {
      "type": "object",
      "description": "The query parameters for vector and hybrid search queries.",
      "properties": {
        "k": {
          "type": "integer",
          "format": "int32",
          "description": "Number of nearest neighbors to return as top hits."
        },
        "fields": {
          "type": "string",
          "description": "Vector Fields of type Collection(Edm.Single) to be included in the vector\nsearched."
        },
        "exhaustive": {
          "type": "boolean",
          "description": "When true, triggers an exhaustive k-nearest neighbor search across all vectors\nwithin the vector index. Useful for scenarios where exact matches are critical,\nsuch as determining ground truth values."
        },
        "oversampling": {
          "type": "number",
          "format": "double",
          "description": "Oversampling factor. Minimum value is 1. It overrides the 'defaultOversampling'\nparameter configured in the index definition. It can be set only when 'rerankWithOriginalVectors'\nis true. This parameter is only permitted when a\ncompression method is used on the underlying vector field."
        },
        "weight": {
          "type": "number",
          "format": "float",
          "description": "Relative weight of the vector query when compared to other vector query and/or\nthe text query within the same search request. This value is used when\ncombining the results of multiple ranking lists produced by the different\nvector queries and/or the results retrieved through the text query. The higher\nthe weight, the higher the documents that matched that query will be in the\nfinal ranking. Default is 1.0 and the value needs to be a positive number\nlarger than zero."
        },
        "threshold": {
          "$ref": "#/definitions/VectorThreshold",
          "description": "The threshold used for vector queries. Note this can only be set if all 'fields' use the same similarity metric."
        },
        "filterOverride": {
          "type": "string",
          "description": "The OData filter expression to apply to this specific vector query. If no\nfilter expression is defined at the vector level, the expression defined in the\ntop level filter parameter is used instead."
        },
        "kind": {
          "$ref": "#/definitions/VectorQueryKind",
          "description": "Type of query."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "VectorQueryKind": {
      "type": "string",
      "description": "The kind of vector query being performed.",
      "enum": [
        "vector",
        "text",
        "imageUrl",
        "imageBinary"
      ],
      "x-ms-enum": {
        "name": "VectorQueryKind",
        "modelAsString": true,
        "values": [
          {
            "name": "Vector",
            "value": "vector",
            "description": "Vector query where a raw vector value is provided."
          },
          {
            "name": "Text",
            "value": "text",
            "description": "Vector query where a text value that needs to be vectorized is provided."
          },
          {
            "name": "ImageUrl",
            "value": "imageUrl",
            "description": "Vector query where an url that represents an image value that needs to be\nvectorized is provided."
          },
          {
            "name": "ImageBinary",
            "value": "imageBinary",
            "description": "Vector query where a base 64 encoded binary of an image that needs to be\nvectorized is provided."
          }
        ]
      }
    },
    "VectorSimilarityThreshold": {
      "type": "object",
      "description": "The results of the vector query will be filtered based on the vector similarity\nmetric. Note this is the canonical definition of similarity metric, not the 'distance'\nversion. The threshold direction (larger or smaller) will be chosen\nautomatically according to the metric used by the field.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "The threshold will filter based on the similarity metric value. Note this is\nthe canonical definition of similarity metric, not the 'distance' version. The\nthreshold direction (larger or smaller) will be chosen automatically according\nto the metric used by the field."
        }
      },
      "required": [
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VectorThreshold"
        }
      ],
      "x-ms-discriminator-value": "vectorSimilarity"
    },
    "VectorThreshold": {
      "type": "object",
      "description": "The threshold used for vector queries.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/VectorThresholdKind",
          "description": "Type of threshold."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "VectorThresholdKind": {
      "type": "string",
      "description": "The kind of vector query being performed.",
      "enum": [
        "vectorSimilarity",
        "searchScore"
      ],
      "x-ms-enum": {
        "name": "VectorThresholdKind",
        "modelAsString": true,
        "values": [
          {
            "name": "VectorSimilarity",
            "value": "vectorSimilarity",
            "description": "The results of the vector query will be filtered based on the vector similarity\nmetric. Note this is the canonical definition of similarity metric, not the 'distance'\nversion. The threshold direction (larger or smaller) will be chosen\nautomatically according to the metric used by the field."
          },
          {
            "name": "SearchScore",
            "value": "searchScore",
            "description": "The results of the vector query will filter based on the '@search.score' value.\nNote this is the @search.score returned as part of the search response. The\nthreshold direction will be chosen for higher @search.score."
          }
        ]
      }
    },
    "VectorizableImageBinaryQuery": {
      "type": "object",
      "description": "The query parameters to use for vector search when a base 64 encoded binary of\nan image that needs to be vectorized is provided.",
      "properties": {
        "base64Image": {
          "type": "string",
          "description": "The base 64 encoded binary of an image to be vectorized to perform a vector\nsearch query."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorQuery"
        }
      ],
      "x-ms-discriminator-value": "imageBinary"
    },
    "VectorizableImageUrlQuery": {
      "type": "object",
      "description": "The query parameters to use for vector search when an url that represents an\nimage value that needs to be vectorized is provided.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of an image to be vectorized to perform a vector search query."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/VectorQuery"
        }
      ],
      "x-ms-discriminator-value": "imageUrl"
    },
    "VectorizableTextQuery": {
      "type": "object",
      "description": "The query parameters to use for vector search when a text value that needs to\nbe vectorized is provided.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text to be vectorized to perform a vector search query."
        },
        "queryRewrites": {
          "$ref": "#/definitions/QueryRewritesType",
          "description": "Can be configured to let a generative model rewrite the query before sending it\nto be vectorized."
        }
      },
      "required": [
        "text"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VectorQuery"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "VectorizedQuery": {
      "type": "object",
      "description": "The query parameters to use for vector search when a raw vector value is\nprovided.",
      "properties": {
        "vector": {
          "type": "array",
          "description": "The vector representation of a search query.",
          "items": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "required": [
        "vector"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VectorQuery"
        }
      ],
      "x-ms-discriminator-value": "vector"
    },
    "VectorsDebugInfo": {
      "type": "object",
      "description": "\"Contains debugging information specific to vector and hybrid search.\")",
      "properties": {
        "subscores": {
          "$ref": "#/definitions/QueryResultDocumentSubscores",
          "description": "The breakdown of subscores of the document prior to the chosen result set\nfusion/combination method such as RRF.",
          "readOnly": true
        }
      }
    }
  },
  "parameters": {
    "Azure.Core.ClientRequestIdHeader": {
      "name": "x-ms-client-request-id",
      "in": "header",
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "required": false,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "clientRequestId"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    }
  }
}
