/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { PeeringManagementClientContext } from "./peeringManagementClientContext";


class PeeringManagementClient extends PeeringManagementClientContext {
  // Operation groups
  legacyPeerings: operations.LegacyPeerings;
  operations: operations.Operations;
  peeringLocations: operations.PeeringLocations;
  peerings: operations.Peerings;

  /**
   * Initializes a new instance of the PeeringManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The Azure subscription ID.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.PeeringManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.legacyPeerings = new operations.LegacyPeerings(this);
    this.operations = new operations.Operations(this);
    this.peeringLocations = new operations.PeeringLocations(this);
    this.peerings = new operations.Peerings(this);
  }

  /**
   * Gets the peer info associated with the specified subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPeerInfoResponse>
   */
  getPeerInfo(options?: msRest.RequestOptionsBase): Promise<Models.GetPeerInfoResponse>;
  /**
   * @param callback The callback
   */
  getPeerInfo(callback: msRest.ServiceCallback<Models.PeerInfo[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPeerInfo(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeerInfo[]>): void;
  getPeerInfo(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeerInfo[]>, callback?: msRest.ServiceCallback<Models.PeerInfo[]>): Promise<Models.GetPeerInfoResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getPeerInfoOperationSpec,
      callback) as Promise<Models.GetPeerInfoResponse>;
  }

  /**
   * Updates the peer info associated with the specified subscription.
   * @param peerInfo The peer info.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdatePeerInfoResponse>
   */
  updatePeerInfo(peerInfo: Models.PeerInfo[], options?: msRest.RequestOptionsBase): Promise<Models.UpdatePeerInfoResponse>;
  /**
   * @param peerInfo The peer info.
   * @param callback The callback
   */
  updatePeerInfo(peerInfo: Models.PeerInfo[], callback: msRest.ServiceCallback<Models.PeerInfo[]>): void;
  /**
   * @param peerInfo The peer info.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePeerInfo(peerInfo: Models.PeerInfo[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeerInfo[]>): void;
  updatePeerInfo(peerInfo: Models.PeerInfo[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeerInfo[]>, callback?: msRest.ServiceCallback<Models.PeerInfo[]>): Promise<Models.UpdatePeerInfoResponse> {
    return this.sendOperationRequest(
      {
        peerInfo,
        options
      },
      updatePeerInfoOperationSpec,
      callback) as Promise<Models.UpdatePeerInfoResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getPeerInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Peering/getPeerInfo",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeerInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updatePeerInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Peering/updatePeerInfo",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "peerInfo",
    mapper: {
      required: true,
      serializedName: "peerInfo",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "PeerInfo"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeerInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

export {
  PeeringManagementClient,
  PeeringManagementClientContext,
  Models as PeeringManagementModels,
  Mappers as PeeringManagementMappers
};
export * from "./operations";
