/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing PeeringSku.
 * The SKU that defines the tier and kind of the peering.
 *
 */
export interface PeeringSku {
  /**
   * @member {Name} [name] The name of the peering SKU. Possible values
   * include: 'Basic_Exchange_Free', 'Basic_Direct_Free',
   * 'Premium_Direct_Free', 'Premium_Exchange_Metered'
   */
  name?: Name;
  /**
   * @member {Tier} [tier] The tier of the peering SKU. Possible values
   * include: 'Basic', 'Premium'
   */
  tier?: Tier;
  /**
   * @member {Family} [family] The family of the peering SKU. Possible values
   * include: 'Direct', 'Exchange'
   */
  family?: Family;
  /**
   * @member {Size} [size] The size of the peering SKU. Possible values
   * include: 'Free', 'Metered', 'Unlimited'
   */
  size?: Size;
}

/**
 * @interface
 * An interface representing BgpSession.
 * The properties that define a BGP session.
 *
 */
export interface BgpSession {
  /**
   * @member {string} [sessionPrefixV4] The IPv4 prefix that contains both
   * ends' IPv4 addresses.
   */
  sessionPrefixV4?: string;
  /**
   * @member {string} [sessionPrefixV6] The IPv6 prefix that contains both
   * ends' IPv6 addresses.
   */
  sessionPrefixV6?: string;
  /**
   * @member {string} [microsoftSessionIPv4Address] The IPv4 session address on
   * Microsoft's end.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly microsoftSessionIPv4Address?: string;
  /**
   * @member {string} [microsoftSessionIPv6Address] The IPv6 session address on
   * Microsoft's end.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly microsoftSessionIPv6Address?: string;
  /**
   * @member {string} [peerSessionIPv4Address] The IPv4 session address on
   * peer's end.
   */
  peerSessionIPv4Address?: string;
  /**
   * @member {string} [peerSessionIPv6Address] The IPv6 session address on
   * peer's end.
   */
  peerSessionIPv6Address?: string;
  /**
   * @member {SessionStateV4} [sessionStateV4] The state of the IPv4 session.
   * Possible values include: 'None', 'Idle', 'Connect', 'Active', 'OpenSent',
   * 'OpenConfirm', 'Established', 'PendingAdd', 'PendingUpdate',
   * 'PendingRemove'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sessionStateV4?: SessionStateV4;
  /**
   * @member {SessionStateV6} [sessionStateV6] The state of the IPv6 session.
   * Possible values include: 'None', 'Idle', 'Connect', 'Active', 'OpenSent',
   * 'OpenConfirm', 'Established', 'PendingAdd', 'PendingUpdate',
   * 'PendingRemove'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sessionStateV6?: SessionStateV6;
  /**
   * @member {number} [maxPrefixesAdvertisedV4] The maximum number of prefixes
   * advertised over the IPv4 session.
   */
  maxPrefixesAdvertisedV4?: number;
  /**
   * @member {number} [maxPrefixesAdvertisedV6] The maximum number of prefixes
   * advertised over the IPv6 session.
   */
  maxPrefixesAdvertisedV6?: number;
  /**
   * @member {string} [md5AuthenticationKey] The MD5 authentication key of the
   * session.
   */
  md5AuthenticationKey?: string;
}

/**
 * @interface
 * An interface representing DirectConnection.
 * The properties that define a direct connection.
 *
 */
export interface DirectConnection {
  /**
   * @member {number} [bandwidthInMbps] The bandwidth of the connection.
   */
  bandwidthInMbps?: number;
  /**
   * @member {number} [provisionedBandwidthInMbps] The bandwidth that is
   * actually provisioned.
   */
  provisionedBandwidthInMbps?: number;
  /**
   * @member {number} [peeringDBFacilityId] The PeeringDB.com ID of the
   * facility at which the connection has to be set up.
   */
  peeringDBFacilityId?: number;
  /**
   * @member {ConnectionState} [connectionState] The state of the connection.
   * Possible values include: 'None', 'PendingApproval', 'Approved',
   * 'ProvisioningStarted', 'ProvisioningFailed', 'ProvisioningCompleted',
   * 'Validating', 'Active'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectionState?: ConnectionState;
  /**
   * @member {BgpSession} [bgpSession] The BGP session associated with the
   * connection.
   */
  bgpSession?: BgpSession;
}

/**
 * @interface
 * An interface representing PeeringPropertiesDirect.
 * The properties that define a direct peering.
 *
 */
export interface PeeringPropertiesDirect {
  /**
   * @member {DirectConnection[]} [connections] The set of connections that
   * constitute a direct peering.
   */
  connections?: DirectConnection[];
  /**
   * @member {number} [peerAsn] The Autonomous System Number (ASN) associated
   * with the peering.
   */
  peerAsn?: number;
  /**
   * @member {boolean} [useForPeeringService] The flag that indicates whether
   * or not the peering is used for peering service.
   */
  useForPeeringService?: boolean;
}

/**
 * @interface
 * An interface representing ExchangeConnection.
 * The properties that define an exchange connection.
 *
 */
export interface ExchangeConnection {
  /**
   * @member {number} [peeringDBFacilityId] The PeeringDB.com ID of the
   * facility at which the connection has to be set up.
   */
  peeringDBFacilityId?: number;
  /**
   * @member {ConnectionState} [connectionState] The state of the connection.
   * Possible values include: 'None', 'PendingApproval', 'Approved',
   * 'ProvisioningStarted', 'ProvisioningFailed', 'ProvisioningCompleted',
   * 'Validating', 'Active'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectionState?: ConnectionState;
  /**
   * @member {BgpSession} [bgpSession] The BGP session associated with the
   * connection.
   */
  bgpSession?: BgpSession;
}

/**
 * @interface
 * An interface representing PeeringPropertiesExchange.
 * The properties that define an exchange peering.
 *
 */
export interface PeeringPropertiesExchange {
  /**
   * @member {ExchangeConnection[]} [connections] The set of connections that
   * constitute an exchange peering.
   */
  connections?: ExchangeConnection[];
  /**
   * @member {number} [peerAsn] The Autonomous System Number (ASN) associated
   * with the peering.
   */
  peerAsn?: number;
}

/**
 * @interface
 * An interface representing Peering.
 * Peering is a logical representation of a set of connections to the Microsoft
 * Cloud Edge at a location.
 *
 * @extends BaseResource
 */
export interface Peering extends BaseResource {
  /**
   * @member {PeeringSku} sku The SKU that defines the tier and kind of the
   * peering.
   */
  sku: PeeringSku;
  /**
   * @member {Kind} kind The kind of the peering. Possible values include:
   * 'Direct', 'Exchange'
   */
  kind: Kind;
  /**
   * @member {PeeringPropertiesDirect} [direct] The properties that define a
   * direct peering.
   */
  direct?: PeeringPropertiesDirect;
  /**
   * @member {PeeringPropertiesExchange} [exchange] The properties that define
   * an exchange peering.
   */
  exchange?: PeeringPropertiesExchange;
  /**
   * @member {string} [peeringLocation] The location of the peering.
   */
  peeringLocation?: string;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * @member {string} location The location of the resource.
   */
  location: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} [name] The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [id] The ID of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing ErrorResponse.
 * The error response that indicates why an operation has failed.
 *
 */
export interface ErrorResponse {
  /**
   * @member {string} [code] The error code.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly code?: string;
  /**
   * @member {string} [message] The error message.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing OperationDisplayInfo.
 * The information related to the operation.
 *
 */
export interface OperationDisplayInfo {
  /**
   * @member {string} [provider] The name of the resource provider.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provider?: string;
  /**
   * @member {string} [resource] The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resource?: string;
  /**
   * @member {string} [operation] The name of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operation?: string;
  /**
   * @member {string} [description] The description of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly description?: string;
}

/**
 * @interface
 * An interface representing Operation.
 * The peering API operation.
 *
 */
export interface Operation {
  /**
   * @member {string} [name] The name of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {OperationDisplayInfo} [display] The information related to the
   * operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly display?: OperationDisplayInfo;
  /**
   * @member {boolean} [isDataAction] The flag that indicates whether the
   * operation applies to data plane.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isDataAction?: boolean;
}

/**
 * @interface
 * An interface representing ContactInfo.
 * The contact information of the peer.
 *
 */
export interface ContactInfo {
  /**
   * @member {string[]} [emails] The list of email addresses.
   */
  emails?: string[];
  /**
   * @member {string[]} [phone] The list of contact numbers.
   */
  phone?: string[];
}

/**
 * @interface
 * An interface representing PeerInfo.
 * The essential information related to the peer.
 *
 */
export interface PeerInfo {
  /**
   * @member {number} [peerAsn] The Autonomous System Number (ASN) of the peer.
   */
  peerAsn?: number;
  /**
   * @member {ContactInfo} [peerContactInfo] The contact information of the
   * peer.
   */
  peerContactInfo?: ContactInfo;
  /**
   * @member {string} [peerName] The name of the peer.
   */
  peerName?: string;
  /**
   * @member {ValidationState} [validationState] The validation state of the
   * ASN associated with the peer. Possible values include: 'None', 'Pending',
   * 'Approved', 'Failed'
   */
  validationState?: ValidationState;
}

/**
 * @interface
 * An interface representing DirectPeeringFacility.
 * The properties that define a direct peering facility.
 *
 */
export interface DirectPeeringFacility {
  /**
   * @member {string} [address] The address of the direct peering facility.
   */
  address?: string;
  /**
   * @member {number} [peeringDBFacilityId] The PeeringDB.com ID of the
   * facility.
   */
  peeringDBFacilityId?: number;
  /**
   * @member {string} [peeringDBFacilityLink] The PeeringDB.com URL of the
   * facility.
   */
  peeringDBFacilityLink?: string;
}

/**
 * @interface
 * An interface representing PeeringBandwidthOffer.
 * The properties that define a peering bandwidth offer.
 *
 */
export interface PeeringBandwidthOffer {
  /**
   * @member {string} [offerName] The name of the bandwidth offer.
   */
  offerName?: string;
  /**
   * @member {number} [valueInMbps] The value of the bandwidth offer in Mbps.
   */
  valueInMbps?: number;
}

/**
 * @interface
 * An interface representing PeeringLocationPropertiesDirect.
 * The properties that define a direct peering location.
 *
 */
export interface PeeringLocationPropertiesDirect {
  /**
   * @member {DirectPeeringFacility[]} [peeringFacilities] The list of direct
   * peering facilities at the peering location.
   */
  peeringFacilities?: DirectPeeringFacility[];
  /**
   * @member {PeeringBandwidthOffer[]} [bandwidthOffers] The list of bandwidth
   * offers avaiable at the peering location.
   */
  bandwidthOffers?: PeeringBandwidthOffer[];
}

/**
 * @interface
 * An interface representing ExchangePeeringFacility.
 * The properties that define an exchange peering facility.
 *
 */
export interface ExchangePeeringFacility {
  /**
   * @member {string} [exchangeName] The name of the exchange peering facility.
   */
  exchangeName?: string;
  /**
   * @member {number} [bandwidthInMbps] The bandwidth of the connection between
   * Microsoft and the exchange peering facility.
   */
  bandwidthInMbps?: number;
  /**
   * @member {string} [microsoftIPv4Address] The IPv4 address of Microsoft at
   * the exchange peering facility.
   */
  microsoftIPv4Address?: string;
  /**
   * @member {string} [microsoftIPv6Address] The IPv6 address of Microsoft at
   * the exchange peering facility.
   */
  microsoftIPv6Address?: string;
  /**
   * @member {string} [facilityIPv4Prefix] The IPv4 prefixes associated with
   * the exchange peering facility.
   */
  facilityIPv4Prefix?: string;
  /**
   * @member {string} [facilityIPv6Prefix] The IPv6 prefixes associated with
   * the exchange peering facility.
   */
  facilityIPv6Prefix?: string;
  /**
   * @member {number} [peeringDBFacilityId] The PeeringDB.com ID of the
   * facility.
   */
  peeringDBFacilityId?: number;
  /**
   * @member {string} [peeringDBFacilityLink] The PeeringDB.com URL of the
   * facility.
   */
  peeringDBFacilityLink?: string;
}

/**
 * @interface
 * An interface representing PeeringLocationPropertiesExchange.
 * The properties that define an exchange peering location.
 *
 */
export interface PeeringLocationPropertiesExchange {
  /**
   * @member {ExchangePeeringFacility[]} [peeringFacilities] The list of
   * exchange peering facilities at the peering location.
   */
  peeringFacilities?: ExchangePeeringFacility[];
}

/**
 * @interface
 * An interface representing PeeringLocation.
 * Peering location is where connectivity could be established to the Microsoft
 * Cloud Edge.
 *
 */
export interface PeeringLocation {
  /**
   * @member {Kind} [kind] The kind of peering that the peering location
   * supports. Possible values include: 'Direct', 'Exchange'
   */
  kind?: Kind;
  /**
   * @member {PeeringLocationPropertiesDirect} [direct] The properties that
   * define a direct peering location.
   */
  direct?: PeeringLocationPropertiesDirect;
  /**
   * @member {PeeringLocationPropertiesExchange} [exchange] The properties that
   * define an exchange peering location.
   */
  exchange?: PeeringLocationPropertiesExchange;
  /**
   * @member {string} [peeringLocation] The name of the peering location.
   */
  peeringLocation?: string;
  /**
   * @member {string} [country] The country in which the peering location
   * exists.
   */
  country?: string;
  /**
   * @member {string} [azureRegion] The Azure region associated with the
   * peering location.
   */
  azureRegion?: string;
  /**
   * @member {string} [name] The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [id] The ID of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing ResourceTags.
 * The resource tags.
 *
 */
export interface ResourceTags {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Gets or sets the tags,
   * a dictionary of descriptors arm object
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing PeeringManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface PeeringManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the PeeringListResult.
 * The paginated list of peerings.
 *
 * @extends Array<Peering>
 */
export interface PeeringListResult extends Array<Peering> {
  /**
   * @member {string} [nextLink] The link to fetch the next page of peerings.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the OperationListResult.
 * The paginated list of peering API operations.
 *
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * @member {string} [nextLink] The link to fetch the next page of peering API
   * operations.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the PeeringLocationListResult.
 * The paginated list of peering locations.
 *
 * @extends Array<PeeringLocation>
 */
export interface PeeringLocationListResult extends Array<PeeringLocation> {
  /**
   * @member {string} [nextLink] The link to fetch the next page of peering
   * locations.
   */
  nextLink?: string;
}

/**
 * Defines values for Name.
 * Possible values include: 'Basic_Exchange_Free', 'Basic_Direct_Free', 'Premium_Direct_Free',
 * 'Premium_Exchange_Metered'
 * @readonly
 * @enum {string}
 */
export type Name = 'Basic_Exchange_Free' | 'Basic_Direct_Free' | 'Premium_Direct_Free' | 'Premium_Exchange_Metered';

/**
 * Defines values for Tier.
 * Possible values include: 'Basic', 'Premium'
 * @readonly
 * @enum {string}
 */
export type Tier = 'Basic' | 'Premium';

/**
 * Defines values for Family.
 * Possible values include: 'Direct', 'Exchange'
 * @readonly
 * @enum {string}
 */
export type Family = 'Direct' | 'Exchange';

/**
 * Defines values for Size.
 * Possible values include: 'Free', 'Metered', 'Unlimited'
 * @readonly
 * @enum {string}
 */
export type Size = 'Free' | 'Metered' | 'Unlimited';

/**
 * Defines values for Kind.
 * Possible values include: 'Direct', 'Exchange'
 * @readonly
 * @enum {string}
 */
export type Kind = 'Direct' | 'Exchange';

/**
 * Defines values for ConnectionState.
 * Possible values include: 'None', 'PendingApproval', 'Approved', 'ProvisioningStarted',
 * 'ProvisioningFailed', 'ProvisioningCompleted', 'Validating', 'Active'
 * @readonly
 * @enum {string}
 */
export type ConnectionState = 'None' | 'PendingApproval' | 'Approved' | 'ProvisioningStarted' | 'ProvisioningFailed' | 'ProvisioningCompleted' | 'Validating' | 'Active';

/**
 * Defines values for SessionStateV4.
 * Possible values include: 'None', 'Idle', 'Connect', 'Active', 'OpenSent', 'OpenConfirm',
 * 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove'
 * @readonly
 * @enum {string}
 */
export type SessionStateV4 = 'None' | 'Idle' | 'Connect' | 'Active' | 'OpenSent' | 'OpenConfirm' | 'Established' | 'PendingAdd' | 'PendingUpdate' | 'PendingRemove';

/**
 * Defines values for SessionStateV6.
 * Possible values include: 'None', 'Idle', 'Connect', 'Active', 'OpenSent', 'OpenConfirm',
 * 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove'
 * @readonly
 * @enum {string}
 */
export type SessionStateV6 = 'None' | 'Idle' | 'Connect' | 'Active' | 'OpenSent' | 'OpenConfirm' | 'Established' | 'PendingAdd' | 'PendingUpdate' | 'PendingRemove';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Succeeded' | 'Updating' | 'Deleting' | 'Failed';

/**
 * Defines values for ValidationState.
 * Possible values include: 'None', 'Pending', 'Approved', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ValidationState = 'None' | 'Pending' | 'Approved' | 'Failed';

/**
 * Defines values for Kind1.
 * Possible values include: 'Direct', 'Exchange'
 * @readonly
 * @enum {string}
 */
export type Kind1 = 'Direct' | 'Exchange';

/**
 * Defines values for Kind2.
 * Possible values include: 'Direct', 'Exchange'
 * @readonly
 * @enum {string}
 */
export type Kind2 = 'Direct' | 'Exchange';

/**
 * Contains response data for the list operation.
 */
export type LegacyPeeringsListResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the getPeerInfo operation.
 */
export type GetPeerInfoResponse = Array<PeerInfo> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeerInfo[];
    };
};

/**
 * Contains response data for the updatePeerInfo operation.
 */
export type UpdatePeerInfoResponse = Array<PeerInfo> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeerInfo[];
    };
};

/**
 * Contains response data for the list operation.
 */
export type PeeringLocationsListResponse = PeeringLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringLocationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PeeringsGetResponse = Peering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Peering;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PeeringsCreateOrUpdateResponse = Peering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Peering;
    };
};

/**
 * Contains response data for the update operation.
 */
export type PeeringsUpdateResponse = Peering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Peering;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type PeeringsListByResourceGroupResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringListResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type PeeringsListBySubscriptionResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringListResult;
    };
};
