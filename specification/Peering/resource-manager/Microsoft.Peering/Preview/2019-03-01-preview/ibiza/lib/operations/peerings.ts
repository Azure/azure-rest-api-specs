/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/peeringsMappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClientContext } from "../peeringManagementClientContext";

/** Class representing a Peerings. */
export class Peerings {
  private readonly client: PeeringManagementClientContext;

  /**
   * Create a Peerings.
   * @param {PeeringManagementClientContext} client Reference to the service client.
   */
  constructor(client: PeeringManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets an existing peering with the specified name under the given subscription and resource
   * group.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param [options] The optional parameters
   * @returns Promise<Models.PeeringsGetResponse>
   */
  get(resourceGroupName: string, peeringName: string, options?: msRest.RequestOptionsBase): Promise<Models.PeeringsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param callback The callback
   */
  get(resourceGroupName: string, peeringName: string, callback: msRest.ServiceCallback<Models.Peering>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, peeringName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Peering>): void;
  get(resourceGroupName: string, peeringName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Peering>, callback?: msRest.ServiceCallback<Models.Peering>): Promise<Models.PeeringsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PeeringsGetResponse>;
  }

  /**
   * Creates a new peering or updates an existing peering with the specified name under the given
   * subscription and resource group.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param peering The properties needed to create or update a peering.
   * @param [options] The optional parameters
   * @returns Promise<Models.PeeringsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, peeringName: string, peering: Models.Peering, options?: msRest.RequestOptionsBase): Promise<Models.PeeringsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param peering The properties needed to create or update a peering.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, peeringName: string, peering: Models.Peering, callback: msRest.ServiceCallback<Models.Peering>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param peering The properties needed to create or update a peering.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, peeringName: string, peering: Models.Peering, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Peering>): void;
  createOrUpdate(resourceGroupName: string, peeringName: string, peering: Models.Peering, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Peering>, callback?: msRest.ServiceCallback<Models.Peering>): Promise<Models.PeeringsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        peering,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.PeeringsCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing peering with the specified name under the given subscription and resource
   * group.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, peeringName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, peeringName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, peeringName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, peeringName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates tags for a peering with the specified name under the given subscription and resource
   * group.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param tags The resource tags.
   * @param [options] The optional parameters
   * @returns Promise<Models.PeeringsUpdateResponse>
   */
  update(resourceGroupName: string, peeringName: string, tags: Models.ResourceTags, options?: msRest.RequestOptionsBase): Promise<Models.PeeringsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param tags The resource tags.
   * @param callback The callback
   */
  update(resourceGroupName: string, peeringName: string, tags: Models.ResourceTags, callback: msRest.ServiceCallback<Models.Peering>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param tags The resource tags.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, peeringName: string, tags: Models.ResourceTags, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Peering>): void;
  update(resourceGroupName: string, peeringName: string, tags: Models.ResourceTags, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Peering>, callback?: msRest.ServiceCallback<Models.Peering>): Promise<Models.PeeringsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        tags,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PeeringsUpdateResponse>;
  }

  /**
   * Lists all of the peerings under the given subscription and resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.PeeringsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.PeeringsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PeeringListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeeringListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeeringListResult>, callback?: msRest.ServiceCallback<Models.PeeringListResult>): Promise<Models.PeeringsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.PeeringsListByResourceGroupResponse>;
  }

  /**
   * Lists all of the peerings under the given subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PeeringsListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.PeeringsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.PeeringListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeeringListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeeringListResult>, callback?: msRest.ServiceCallback<Models.PeeringListResult>): Promise<Models.PeeringsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.PeeringsListBySubscriptionResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Peering
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "peering",
    mapper: {
      ...Mappers.Peering,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Peering
    },
    201: {
      bodyMapper: Mappers.Peering
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "tags",
    mapper: {
      ...Mappers.ResourceTags,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Peering
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerings",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
