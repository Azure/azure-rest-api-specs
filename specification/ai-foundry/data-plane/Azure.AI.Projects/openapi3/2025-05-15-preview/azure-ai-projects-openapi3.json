{
  "openapi": "3.0.0",
  "info": {
    "title": "Azure AI",
    "version": "2025-05-15-preview"
  },
  "tags": [],
  "paths": {
    "/connections": {
      "get": {
        "operationId": "Connections_list",
        "description": "List all connections in the project, without populating connection credentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "connectionType",
            "in": "query",
            "required": false,
            "description": "List connections of this specific type",
            "schema": {
              "$ref": "#/components/schemas/ConnectionType"
            },
            "explode": false
          },
          {
            "name": "defaultConnection",
            "in": "query",
            "required": false,
            "description": "List connections that are default connections",
            "schema": {
              "type": "boolean"
            },
            "explode": false
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedConnection"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/connections/{name}": {
      "get": {
        "operationId": "Connections_get",
        "description": "Get a connection by name, without populating connection credentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The friendly name of the connection, provided by the user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/connections/{name}/getConnectionWithCredentials": {
      "post": {
        "operationId": "Connections_getWithCredentials",
        "description": "Get a connection by name, with its connection credentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The friendly name of the connection, provided by the user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/datasets": {
      "get": {
        "operationId": "Datasets_listLatest",
        "description": "List the latest version of each DatasetVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedDatasetVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions": {
      "get": {
        "operationId": "Datasets_listVersions",
        "description": "List all versions of the given DatasetVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedDatasetVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions/{version}": {
      "get": {
        "operationId": "Datasets_getVersion",
        "description": "Get the specific version of the DatasetVersion. The service returns 404 Not Found error if the DatasetVersion does not exist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the DatasetVersion to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Datasets_deleteVersion",
        "description": "Delete the specific version of the DatasetVersion. The service returns 204 No Content if the DatasetVersion was deleted successfully or if the DatasetVersion does not exist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The version of the DatasetVersion to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Datasets_createOrUpdateVersion",
        "description": "Create a new or update an existing DatasetVersion with the given version id",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the DatasetVersion to create or update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetVersion"
                }
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetVersionUpdate"
              }
            }
          },
          "description": "The DatasetVersion to create or update."
        }
      }
    },
    "/datasets/{name}/versions/{version}/credentials": {
      "post": {
        "operationId": "Datasets_getCredentials",
        "description": "Get the SAS credential to access the storage account associated with a Dataset version.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the DatasetVersion to operate on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetCredentialResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions/{version}/startPendingUpload": {
      "post": {
        "operationId": "Datasets_startPendingUploadVersion",
        "description": "Start a new or get an existing pending upload of a dataset for a specific version.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the DatasetVersion to operate on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingUploadResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PendingUploadRequest"
              }
            }
          },
          "description": "The pending upload request parameters"
        }
      }
    },
    "/deployments": {
      "get": {
        "operationId": "Deployments_list",
        "description": "List all deployed models in the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "modelPublisher",
            "in": "query",
            "required": false,
            "description": "Model publisher to filter models by",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "modelName",
            "in": "query",
            "required": false,
            "description": "Model name (the publisher specific name) to filter models by",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "deploymentType",
            "in": "query",
            "required": false,
            "description": "Type of deployment to filter list by",
            "schema": {
              "$ref": "#/components/schemas/DeploymentType"
            },
            "explode": false
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedDeployment"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deployments/{name}": {
      "get": {
        "operationId": "Deployments_get",
        "description": "Get a deployed model.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Name of the deployment",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluations/runs": {
      "get": {
        "operationId": "Evaluations_list",
        "description": "List evaluation runs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedEvaluation"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluations/runs/{name}": {
      "get": {
        "operationId": "Evaluations_get",
        "description": "Get an evaluation run by name.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Identifier of the evaluation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Evaluations_delete",
        "description": "Delete an evaluation run by name",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Identifier of the evaluation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluations/runs/{name}:cancel": {
      "post": {
        "operationId": "Evaluations_cancel",
        "description": "Cancel an evaluation run by name",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Identifier of the evaluation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluations/runs:run": {
      "post": {
        "operationId": "Evaluations_create",
        "description": "Creates an evaluation run.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "description": "Evaluation to be run"
        }
      }
    },
    "/evaluations/runs:runAgent": {
      "post": {
        "operationId": "Evaluations_createAgentEvaluation",
        "description": "Creates an agent evaluation run.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentEvaluation"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentEvaluationRequest"
              }
            }
          },
          "description": "Agent evaluation to be run"
        }
      }
    },
    "/indexes": {
      "get": {
        "operationId": "Indexes_listLatest",
        "description": "List the latest version of each Index",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedIndex"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/indexes/{name}/versions": {
      "get": {
        "operationId": "Indexes_listVersions",
        "description": "List all versions of the given Index",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedIndex"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/indexes/{name}/versions/{version}": {
      "get": {
        "operationId": "Indexes_getVersion",
        "description": "Get the specific version of the Index. The service returns 404 Not Found error if the Index does not exist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the Index to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Index"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Indexes_deleteVersion",
        "description": "Delete the specific version of the Index. The service returns 204 No Content if the Index was deleted successfully or if the Index does not exist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The version of the Index to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Indexes_createOrUpdateVersion",
        "description": "Create a new or update an existing Index with the given version id",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the Index to create or update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Index"
                }
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Index"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IndexUpdate"
              }
            }
          },
          "description": "The Index to create or update."
        }
      }
    },
    "/redTeams/runs": {
      "get": {
        "operationId": "RedTeams_list",
        "description": "List a redteam by name.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedRedTeam"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/redTeams/runs/{name}": {
      "get": {
        "operationId": "RedTeams_get",
        "description": "Get a redteam by name.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Identifier of the red team run.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedTeam"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/redTeams/runs:run": {
      "post": {
        "operationId": "RedTeams_create",
        "description": "Creates a redteam run.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedTeam"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedTeam"
              }
            }
          },
          "description": "Redteam to be run"
        }
      }
    }
  },
  "security": [
    {
      "OAuth2Auth": [
        "https://ai.azure.com/.default"
      ]
    }
  ],
  "components": {
    "parameters": {
      "Azure.Core.ClientRequestIdHeader": {
        "name": "x-ms-client-request-id",
        "in": "header",
        "required": false,
        "description": "An opaque, globally-unique, client-generated string identifier for the request.",
        "schema": {
          "$ref": "#/components/schemas/Azure.Core.uuid"
        }
      },
      "Azure.Core.Foundations.ApiVersionParameter": {
        "name": "api-version",
        "in": "query",
        "required": true,
        "description": "The API version to use for this operation.",
        "schema": {
          "type": "string",
          "minLength": 1
        },
        "explode": false
      }
    },
    "schemas": {
      "AgentEvaluation": {
        "type": "object",
        "required": [
          "id",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the agent evaluation run."
          },
          "status": {
            "type": "string",
            "description": "Status of the agent evaluation. Options: Running, Completed, Failed."
          },
          "error": {
            "type": "string",
            "description": "The reason of the request failure for the long running process, if applicable."
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentEvaluationResult"
            },
            "description": "The agent evaluation result."
          }
        },
        "description": "Evaluation response for agent evaluation run."
      },
      "AgentEvaluationRedactionConfiguration": {
        "type": "object",
        "properties": {
          "redactScoreProperties": {
            "type": "boolean",
            "description": "Redact score properties. If not specified, the default is to redact in production."
          }
        },
        "description": "The redaction configuration will allow the user to control what is redacted."
      },
      "AgentEvaluationRequest": {
        "type": "object",
        "required": [
          "runId",
          "evaluators",
          "appInsightsConnectionString"
        ],
        "properties": {
          "runId": {
            "type": "string",
            "description": "Identifier of the agent run."
          },
          "threadId": {
            "type": "string",
            "description": "Identifier of the agent thread. This field is mandatory currently, but it will be optional in the future."
          },
          "evaluators": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EvaluatorConfiguration"
            },
            "description": "Evaluators to be used for the evaluation."
          },
          "samplingConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentEvaluationSamplingConfiguration"
              }
            ],
            "description": "Sampling configuration for the evaluation."
          },
          "redactionConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentEvaluationRedactionConfiguration"
              }
            ],
            "description": "Redaction configuration for the evaluation."
          },
          "appInsightsConnectionString": {
            "type": "string",
            "description": "Pass the AppInsights connection string to the agent evaluation for the evaluation results and the errors logs."
          }
        },
        "description": "Evaluation request for agent run."
      },
      "AgentEvaluationResult": {
        "type": "object",
        "required": [
          "evaluator",
          "evaluatorId",
          "score",
          "status",
          "runId"
        ],
        "properties": {
          "evaluator": {
            "type": "string",
            "description": "Evaluator's name. This is the name of the evaluator that was used to evaluate the agent's completion."
          },
          "evaluatorId": {
            "type": "string",
            "description": "Identifier of the evaluator."
          },
          "score": {
            "type": "number",
            "format": "float",
            "description": "Score of the given evaluator. No restriction on range."
          },
          "status": {
            "type": "string",
            "description": "Status of the evaluator result. Options: Running, Completed, Failed, NotApplicable."
          },
          "reason": {
            "type": "string",
            "description": "Reasoning for the evaluation result."
          },
          "version": {
            "type": "string",
            "description": "Version of the evaluator that was used to evaluate the agent's completion."
          },
          "threadId": {
            "type": "string",
            "description": "The unique identifier of the thread."
          },
          "runId": {
            "type": "string",
            "description": "The unique identifier of the run."
          },
          "error": {
            "type": "string",
            "description": "A string explaining why there was an error, if applicable."
          },
          "additionalDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional properties relevant to the evaluator. These will differ between evaluators."
          }
        },
        "description": "Result for the agent evaluation evaluator run."
      },
      "AgentEvaluationSamplingConfiguration": {
        "type": "object",
        "required": [
          "name",
          "samplingPercent",
          "maxRequestRate"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the sampling strategy."
          },
          "samplingPercent": {
            "type": "number",
            "format": "float",
            "description": "Percentage of sampling per hour (0-100)."
          },
          "maxRequestRate": {
            "type": "number",
            "format": "float",
            "description": "Maximum request rate per hour (0 to 1000)."
          }
        },
        "description": "Definition for sampling strategy."
      },
      "ApiKeyCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ApiKey"
            ],
            "description": "The credential type",
            "readOnly": true
          },
          "key": {
            "type": "string",
            "description": "API Key",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "API Key Credential definition"
      },
      "AssetCredentialResponse": {
        "type": "object",
        "required": [
          "blobReference"
        ],
        "properties": {
          "blobReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BlobReference"
              }
            ],
            "description": "Credential info to access the storage account."
          }
        },
        "description": "Represents a reference to a blob for consumption"
      },
      "AssistantMessage": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ],
            "description": "Indicates this is an assistant message."
          },
          "content": {
            "type": "string",
            "description": "Response content generated by the assistant."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Message"
          }
        ],
        "description": "A message generated by the assistant in response to previous messages."
      },
      "AttackStrategy": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "easy",
              "moderate",
              "difficult",
              "ascii_art",
              "ascii_smuggler",
              "atbash",
              "base64",
              "binary",
              "caesar",
              "character_space",
              "jailbreak",
              "ansii_attack",
              "character_swap",
              "suffix_append",
              "string_join",
              "unicode_confusable",
              "unicode_substitution",
              "diacritic",
              "flip",
              "leetspeak",
              "rot13",
              "morse",
              "url",
              "baseline"
            ]
          }
        ],
        "description": "Strategies for attacks."
      },
      "Azure.Core.Foundations.Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "One of a server-defined set of error codes."
          },
          "message": {
            "type": "string",
            "description": "A human-readable representation of the error."
          },
          "target": {
            "type": "string",
            "description": "The target of the error."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Azure.Core.Foundations.Error"
            },
            "description": "An array of details about specific errors that led to this reported error."
          },
          "innererror": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Azure.Core.Foundations.InnerError"
              }
            ],
            "description": "An object containing more specific information than the current object about the error."
          }
        },
        "description": "The error object."
      },
      "Azure.Core.Foundations.ErrorResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Azure.Core.Foundations.Error"
              }
            ],
            "description": "The error object."
          }
        },
        "description": "A response containing error details."
      },
      "Azure.Core.Foundations.InnerError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "One of a server-defined set of error codes."
          },
          "innererror": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Azure.Core.Foundations.InnerError"
              }
            ],
            "description": "Inner error."
          }
        },
        "description": "An object containing more specific information about the error. As per Azure REST API guidelines - https://aka.ms/AzureRestApiGuidelines#handling-errors."
      },
      "Azure.Core.uuid": {
        "type": "string",
        "format": "uuid",
        "description": "Universally Unique Identifier"
      },
      "AzureAISearchIndex": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AzureSearch"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Index"
          }
        ],
        "description": "Azure AI Search Index Definition"
      },
      "AzureAISearchIndexUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AzureSearch"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/IndexUpdate"
          }
        ],
        "description": "Azure AI Search Index Definition"
      },
      "AzureOpenAIModelConfiguration": {
        "type": "object",
        "required": [
          "type",
          "modelDeploymentName"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AzureOpenAIModel"
            ]
          },
          "modelDeploymentName": {
            "type": "string",
            "description": "Deployment name for AOAI model. Example: gpt-4o if in AIServices or connection based `connection_name/deployment_name` (e.g. `my-aoai-connection/gpt-4o`)."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TargetConfig"
          }
        ],
        "description": "Azure OpenAI model configuration. The API version would be selected by the service for querying the model."
      },
      "BaseCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialType"
              }
            ],
            "description": "The type of credential used by the connection",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ApiKey": "#/components/schemas/ApiKeyCredentials",
            "AAD": "#/components/schemas/EntraIDCredentials",
            "CustomKeys": "#/components/schemas/CustomCredential",
            "SAS": "#/components/schemas/SASCredentials",
            "None": "#/components/schemas/NoAuthenticationCredentials"
          }
        },
        "description": "A base class for connection credentials"
      },
      "BlobReference": {
        "type": "object",
        "required": [
          "blobUri",
          "storageAccountArmId",
          "credential"
        ],
        "properties": {
          "blobUri": {
            "type": "string",
            "description": "Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path"
          },
          "storageAccountArmId": {
            "type": "string",
            "description": "ARM ID of the storage account to use."
          },
          "credential": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SasCredential"
              }
            ],
            "description": "Credential info to access the storage account."
          }
        },
        "description": "Blob reference details."
      },
      "Connection": {
        "type": "object",
        "required": [
          "name",
          "id",
          "type",
          "target",
          "isDefault",
          "credentials",
          "metadata"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The friendly name of the connection, provided by the user.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for the connection, generated by the service",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectionType"
              }
            ],
            "description": "Category of the connection",
            "readOnly": true
          },
          "target": {
            "type": "string",
            "description": "The connection URL to be used for this service",
            "readOnly": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether the connection is tagged as the default connection of its type",
            "readOnly": true
          },
          "credentials": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseCredentials"
              }
            ],
            "description": "The credentials used by the connection",
            "readOnly": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata of the connection",
            "readOnly": true
          }
        },
        "description": "Response from the list and get connections operations"
      },
      "ConnectionType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "AzureOpenAI",
              "AzureBlob",
              "AzureStorageAccount",
              "CognitiveSearch",
              "CosmosDB",
              "ApiKey",
              "AppConfig",
              "AppInsights",
              "CustomKeys"
            ]
          }
        ],
        "description": "The Type (or category) of the connection"
      },
      "CosmosDBIndex": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CosmosDBNoSqlVectorStore"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Index"
          }
        ],
        "description": "CosmosDB Vector Store Index Definition"
      },
      "CosmosDBIndexUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CosmosDBNoSqlVectorStore"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/IndexUpdate"
          }
        ],
        "description": "CosmosDB Vector Store Index Definition"
      },
      "CredentialType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "ApiKey",
              "AAD",
              "SAS",
              "CustomKeys",
              "None"
            ]
          }
        ],
        "description": "The credential type used by the connection"
      },
      "CustomCredential": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CustomKeys"
            ],
            "description": "The credential type",
            "readOnly": true
          }
        },
        "additionalProperties": {
          "type": "string"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "Custom credential definition"
      },
      "DatasetType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "uri_file",
              "uri_folder"
            ]
          }
        ],
        "description": "Enum to determine the type of data."
      },
      "DatasetVersion": {
        "type": "object",
        "required": [
          "dataUri",
          "type",
          "name",
          "version"
        ],
        "properties": {
          "dataUri": {
            "type": "string",
            "minLength": 1,
            "pattern": "[a-zA-Z0-9_]",
            "description": "URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetType"
              }
            ],
            "description": "Dataset type"
          },
          "isReference": {
            "type": "boolean",
            "description": "Indicates if the dataset holds a reference to the storage, or the dataset manages storage itself. If true, the underlying data will not be deleted when the dataset version is deleted",
            "readOnly": true
          },
          "connectionName": {
            "type": "string",
            "description": "The Azure Storage Account connection name. Required if startPendingUploadVersion was not called before creating the Dataset"
          },
          "id": {
            "type": "string",
            "description": "Asset ID, a unique identifier for the asset",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the resource",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "description": "The version of the resource",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "uri_file": "#/components/schemas/FileDatasetVersion",
            "uri_folder": "#/components/schemas/FolderDatasetVersion"
          }
        },
        "description": "DatasetVersion Definition"
      },
      "DatasetVersionUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetType"
              }
            ],
            "description": "Dataset type"
          },
          "description": {
            "type": "string",
            "description": "The asset description text."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tag dictionary. Tags can be added, removed, and updated."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "uri_file": "#/components/schemas/FileDatasetVersionUpdate",
            "uri_folder": "#/components/schemas/FolderDatasetVersionUpdate"
          }
        },
        "description": "DatasetVersion Definition"
      },
      "Deployment": {
        "type": "object",
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentType"
              }
            ],
            "description": "The type of the deployment"
          },
          "name": {
            "type": "string",
            "description": "Name of the deployment",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ModelDeployment": "#/components/schemas/ModelDeployment"
          }
        },
        "description": "Model Deployment Definition"
      },
      "DeploymentType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "ModelDeployment"
            ]
          }
        ]
      },
      "DeveloperMessage": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "developer"
            ],
            "description": "Indicates this is a developer message."
          },
          "content": {
            "type": "string",
            "description": "Content provided by a developer to guide model behavior in an evaluation context."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Message"
          }
        ],
        "description": "A message authored by a developer to guide the model during evaluation."
      },
      "EntraIDCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AAD"
            ],
            "description": "The credential type",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "Entra ID credential definition"
      },
      "Evaluation": {
        "type": "object",
        "required": [
          "id",
          "data",
          "evaluators"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the evaluation.",
            "readOnly": true
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputData"
              }
            ],
            "description": "Data for evaluation."
          },
          "displayName": {
            "type": "string",
            "description": "Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique."
          },
          "description": {
            "type": "string",
            "description": "Description of the evaluation. It can be used to store additional information about the evaluation and is mutable."
          },
          "status": {
            "type": "string",
            "description": "Status of the evaluation. It is set by service and is read-only.",
            "readOnly": true
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Evaluation's tags. Unlike properties, tags are fully mutable."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed."
          },
          "evaluators": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EvaluatorConfiguration"
            },
            "description": "Evaluators to be used for the evaluation."
          },
          "target": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationTarget"
              }
            ],
            "description": "Specifies the type and configuration of the entity used for this evaluation."
          }
        },
        "description": "Evaluation Definition"
      },
      "EvaluationTarget": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationTargetType"
              }
            ],
            "description": "Discriminator that defines the type of the evaluation target."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "modelResponseGeneration": "#/components/schemas/modelResponseGenerationTarget"
          }
        },
        "description": "Abstract base model for defining evaluation targets."
      },
      "EvaluationTargetType": {
        "anyOf": [
          {
            "type": "string",
            "enum": [
              "modelResponseGeneration"
            ]
          },
          {
            "type": "string"
          }
        ],
        "description": "Allowed types of evaluation targets."
      },
      "EvaluatorConfiguration": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the evaluator."
          },
          "initParams": {
            "type": "object",
            "additionalProperties": {},
            "description": "Initialization parameters of the evaluator."
          },
          "dataMapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Data parameters of the evaluator."
          }
        },
        "description": "Evaluator Configuration"
      },
      "FileDatasetVersion": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "uri_file"
            ],
            "description": "Dataset type"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetVersion"
          }
        ],
        "description": "FileDatasetVersion Definition"
      },
      "FileDatasetVersionUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "uri_file"
            ],
            "description": "Dataset type"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetVersionUpdate"
          }
        ],
        "description": "FileDatasetVersion Definition"
      },
      "FolderDatasetVersion": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "uri_folder"
            ],
            "description": "Dataset type"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetVersion"
          }
        ],
        "description": "FileDatasetVersion Definition"
      },
      "FolderDatasetVersionUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "uri_folder"
            ],
            "description": "Dataset type"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetVersionUpdate"
          }
        ],
        "description": "FileDatasetVersion Definition"
      },
      "Index": {
        "type": "object",
        "required": [
          "type",
          "name",
          "version"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IndexType"
              }
            ],
            "description": "Type of index"
          },
          "id": {
            "type": "string",
            "description": "Asset ID, a unique identifier for the asset",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the resource",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "description": "The version of the resource",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureSearch": "#/components/schemas/AzureAISearchIndex",
            "ManagedAzureSearch": "#/components/schemas/ManagedAzureAISearchIndex",
            "CosmosDBNoSqlVectorStore": "#/components/schemas/CosmosDBIndex"
          }
        },
        "description": "Index resource Definition"
      },
      "IndexType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "AzureSearch",
              "CosmosDBNoSqlVectorStore",
              "ManagedAzureSearch"
            ]
          }
        ]
      },
      "IndexUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IndexType"
              }
            ],
            "description": "Type of index"
          },
          "description": {
            "type": "string",
            "description": "The asset description text."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tag dictionary. Tags can be added, removed, and updated."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureSearch": "#/components/schemas/AzureAISearchIndexUpdate",
            "ManagedAzureSearch": "#/components/schemas/ManagedAzureAISearchIndexUpdate",
            "CosmosDBNoSqlVectorStore": "#/components/schemas/CosmosDBIndexUpdate"
          }
        },
        "description": "Index resource Definition"
      },
      "InputData": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the data"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "dataset": "#/components/schemas/InputDataset"
          }
        },
        "description": "Abstract data class."
      },
      "InputDataset": {
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dataset"
            ]
          },
          "id": {
            "type": "string",
            "description": "Evaluation input data"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/InputData"
          }
        ],
        "description": "Dataset as source for evaluation."
      },
      "ManagedAzureAISearchIndex": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ManagedAzureSearch"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Index"
          }
        ],
        "description": "Managed Azure AI Search Index Definition"
      },
      "ManagedAzureAISearchIndexUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ManagedAzureSearch"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/IndexUpdate"
          }
        ],
        "description": "Managed Azure AI Search Index Definition"
      },
      "Message": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "system",
                  "assistant",
                  "developer",
                  "user"
                ]
              },
              {
                "type": "string"
              }
            ],
            "description": "The role of the message author. Known values: 'system', 'assistant', 'developer', 'user'."
          }
        },
        "discriminator": {
          "propertyName": "role",
          "mapping": {
            "system": "#/components/schemas/SystemMessage",
            "developer": "#/components/schemas/DeveloperMessage",
            "user": "#/components/schemas/UserMessage",
            "assistant": "#/components/schemas/AssistantMessage"
          }
        },
        "description": "Abstract base model representing a single message in a conversation."
      },
      "ModelDeployment": {
        "type": "object",
        "required": [
          "type",
          "modelName",
          "modelVersion",
          "modelPublisher",
          "capabilities",
          "sku"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ModelDeployment"
            ],
            "description": "The type of the deployment"
          },
          "modelName": {
            "type": "string",
            "description": "Publisher-specific name of the deployed model",
            "readOnly": true
          },
          "modelVersion": {
            "type": "string",
            "description": "Publisher-specific version of the deployed model",
            "readOnly": true
          },
          "modelPublisher": {
            "type": "string",
            "description": "Name of the deployed model's publisher",
            "readOnly": true
          },
          "capabilities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Capabilities of deployed model",
            "readOnly": true
          },
          "sku": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Sku"
              }
            ],
            "description": "Sku of the model deployment",
            "readOnly": true
          },
          "connectionName": {
            "type": "string",
            "description": "Name of the connection the deployment comes from",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Deployment"
          }
        ],
        "description": "Model Deployment Definition"
      },
      "NoAuthenticationCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "None"
            ],
            "description": "The credential type ",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "Credentials that do not require authentication"
      },
      "PagedConnection": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            },
            "description": "The Connection items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of Connection items"
      },
      "PagedDatasetVersion": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetVersion"
            },
            "description": "The DatasetVersion items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of DatasetVersion items"
      },
      "PagedDeployment": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Deployment"
            },
            "description": "The Deployment items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of Deployment items"
      },
      "PagedEvaluation": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Evaluation"
            },
            "description": "The Evaluation items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of Evaluation items"
      },
      "PagedIndex": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Index"
            },
            "description": "The Index items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of Index items"
      },
      "PagedRedTeam": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RedTeam"
            },
            "description": "The RedTeam items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of RedTeam items"
      },
      "PendingUploadRequest": {
        "type": "object",
        "required": [
          "pendingUploadType"
        ],
        "properties": {
          "pendingUploadId": {
            "type": "string",
            "description": "If PendingUploadId is not provided, a random GUID will be used."
          },
          "connectionName": {
            "type": "string",
            "description": "Azure Storage Account connection name to use for generating temporary SAS token"
          },
          "pendingUploadType": {
            "type": "string",
            "enum": [
              "BlobReference"
            ],
            "description": "BlobReference is the only supported type."
          }
        },
        "description": "Represents a request for a pending upload."
      },
      "PendingUploadResponse": {
        "type": "object",
        "required": [
          "blobReference",
          "pendingUploadId",
          "pendingUploadType"
        ],
        "properties": {
          "blobReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BlobReference"
              }
            ],
            "description": "Container-level read, write, list SAS."
          },
          "pendingUploadId": {
            "type": "string",
            "description": "ID for this upload request."
          },
          "version": {
            "type": "string",
            "description": "Version of asset to be created if user did not specify version when initially creating upload"
          },
          "pendingUploadType": {
            "type": "string",
            "enum": [
              "BlobReference"
            ],
            "description": "BlobReference is the only supported type"
          }
        },
        "description": "Represents the response for a pending upload request"
      },
      "RedTeam": {
        "type": "object",
        "required": [
          "id",
          "target"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the red team run.",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Name of the red-team run."
          },
          "numTurns": {
            "type": "integer",
            "format": "int32",
            "description": "Number of simulation rounds."
          },
          "attackStrategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttackStrategy"
            },
            "description": "List of attack strategies or nested lists of attack strategies."
          },
          "simulationOnly": {
            "type": "boolean",
            "description": "Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result.",
            "default": false
          },
          "riskCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskCategory"
            },
            "description": "List of risk categories to generate attack objectives for."
          },
          "applicationScenario": {
            "type": "string",
            "description": "Application scenario for the red team operation, to generate scenario specific attacks."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Red team's tags. Unlike properties, tags are fully mutable."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed."
          },
          "status": {
            "type": "string",
            "description": "Status of the red-team. It is set by service and is read-only.",
            "readOnly": true
          },
          "target": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TargetConfig"
              }
            ],
            "description": "Target configuration for the red-team run."
          }
        },
        "description": "Red team details."
      },
      "RiskCategory": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "HateUnfairness",
              "Violence",
              "Sexual",
              "SelfHarm"
            ]
          }
        ],
        "description": "Risk category for the attack objective."
      },
      "SASCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SAS"
            ],
            "description": "The credential type",
            "readOnly": true
          },
          "SAS": {
            "type": "string",
            "description": "SAS token",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "Shared Access Signature (SAS) credential definition"
      },
      "SasCredential": {
        "type": "object",
        "required": [
          "sasUri",
          "type"
        ],
        "properties": {
          "sasUri": {
            "type": "string",
            "description": "SAS uri",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "enum": [
              "SAS"
            ],
            "description": "Type of credential",
            "readOnly": true
          }
        },
        "description": "SAS Credential definition"
      },
      "Sku": {
        "type": "object",
        "required": [
          "capacity",
          "family",
          "name",
          "size",
          "tier"
        ],
        "properties": {
          "capacity": {
            "type": "integer",
            "format": "int64",
            "description": "Sku capacity"
          },
          "family": {
            "type": "string",
            "description": "Sku family"
          },
          "name": {
            "type": "string",
            "description": "Sku name"
          },
          "size": {
            "type": "string",
            "description": "Sku size"
          },
          "tier": {
            "type": "string",
            "description": "Sku tier"
          }
        },
        "description": "Sku information"
      },
      "SystemMessage": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "system"
            ],
            "description": "Indicates this is a system message."
          },
          "content": {
            "type": "string",
            "description": "Plain text instructions provided by the system to steer model behavior."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Message"
          }
        ],
        "description": "A message authored by the system to guide model behavior."
      },
      "TargetConfig": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the model configuration."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureOpenAIModel": "#/components/schemas/AzureOpenAIModelConfiguration"
          }
        },
        "description": "Abstract class for target configuration."
      },
      "UserMessage": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user"
            ],
            "description": "Indicates this is a user message."
          },
          "content": {
            "type": "string",
            "description": "Input content or question provided by the end user."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Message"
          }
        ],
        "description": "A message authored by the end user as input to the model."
      },
      "modelResponseGenerationTarget": {
        "type": "object",
        "required": [
          "type",
          "baseMessages",
          "modelDeploymentName",
          "modelParams"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "modelResponseGeneration"
            ],
            "description": "The type of evaluation target. Always 'modelResponseGeneration'."
          },
          "baseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "A list of messages comprising the conversation so far."
          },
          "modelDeploymentName": {
            "type": "string",
            "description": "The model deployment to be evaluated. Accepts either the deployment name alone or with the connection name as '{connectionName}/modelDeploymentName'."
          },
          "modelParams": {
            "type": "object",
            "additionalProperties": {},
            "description": "Optional parameters passed to the model for evaluation."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EvaluationTarget"
          }
        ],
        "description": "Evaluation target for generating responses using a given model and dataset."
      }
    },
    "securitySchemes": {
      "OAuth2Auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
            "scopes": {
              "https://ai.azure.com/.default": ""
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "{endpoint}",
      "description": "Azure AI",
      "variables": {
        "endpoint": {
          "default": "",
          "description": "Foundry Project endpoint in the form\n\"https://{ai-services-account-name}.services.ai.azure.com/api/projects/{project-name}\".\nIf you only have one Project in your Foundry Hub, or to target the default Project\nin your Hub, use the form\n\"https://{ai-services-account-name}.services.ai.azure.com/api/projects/_project\""
        }
      }
    }
  ]
}
