{
  "openapi": "3.0.0",
  "info": {
    "title": "Azure AI",
    "version": "2025-11-15-preview"
  },
  "tags": [
    {
      "name": "Agents"
    },
    {
      "name": "Conversations"
    },
    {
      "name": "Fine-tuning"
    },
    {
      "name": "Responses"
    },
    {
      "name": "Memory stores"
    },
    {
      "name": "Evals"
    }
  ],
  "paths": {
    "/agents": {
      "post": {
        "operationId": "Agents_createAgent",
        "description": "Creates the agent.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentRequest"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Agents_listAgents",
        "description": "Returns the list of all agents.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "description": "Filter agents by kind. If not provided, all agents are returned.",
            "schema": {
              "$ref": "#/components/schemas/AgentKind"
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the\ndefault is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`\nfor descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AgentObject"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/{agent_name}": {
      "get": {
        "operationId": "Agents_getAgent",
        "description": "Retrieves the agent.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "post": {
        "operationId": "Agents_updateAgent",
        "description": "Updates the agent by adding a new version if there are any changes to the agent definition.\nIf no changes, returns the existing agent version.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAgentRequest"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Agents_deleteAgent",
        "description": "Deletes an agent.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAgentResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/{agent_name}/import": {
      "post": {
        "operationId": "Agents_updateAgentFromManifest",
        "description": "Updates the agent from a manifest by adding a new version if there are any changes to the agent definition.\nIf no changes, returns the existing agent version.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAgentFromManifestRequest"
              }
            }
          }
        }
      }
    },
    "/agents/{agent_name}/operations": {
      "get": {
        "operationId": "Agents_listAgentContainerOperations",
        "description": "List container operations for an agent.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the\ndefault is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`\nfor descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AgentContainerOperationObject"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/{agent_name}/operations/{operation_id}": {
      "get": {
        "operationId": "Agents_getAgentContainerOperation",
        "description": "Get the status of a container operation for an agent.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation_id",
            "in": "path",
            "required": true,
            "description": "The operation ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentContainerOperationObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ApiErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ApiErrorResponse"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/{agent_name}/versions": {
      "post": {
        "operationId": "Agents_createAgentVersion",
        "description": "Create a new agent version.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The unique name that identifies the agent. Name can be used to retrieve/update/delete the agent.\n- Must start and end with alphanumeric characters,\n- Can contain hyphens in the middle\n- Must not exceed 63 characters.",
            "schema": {
              "type": "string",
              "maxLength": 63
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentVersionObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentVersionRequest"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Agents_listAgentVersions",
        "description": "Returns the list of versions of an agent.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent to retrieve versions for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the\ndefault is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`\nfor descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AgentVersionObject"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/{agent_name}/versions/{agent_version}": {
      "get": {
        "operationId": "Agents_getAgentVersion",
        "description": "Retrieves a specific version of an agent.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_version",
            "in": "path",
            "required": true,
            "description": "The version of the agent to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentVersionObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "delete": {
        "operationId": "Agents_deleteAgentVersion",
        "description": "Deletes a specific version of an agent.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent to delete.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_version",
            "in": "path",
            "required": true,
            "description": "The version of the agent to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAgentVersionResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/{agent_name}/versions/{agent_version}/containers/default": {
      "get": {
        "operationId": "Agents_getAgentContainer",
        "description": "Get a container for a specific version of an agent.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_version",
            "in": "path",
            "required": true,
            "description": "The version of the agent.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentContainerObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/{agent_name}/versions/{agent_version}/containers/default/operations": {
      "get": {
        "operationId": "Agents_listAgentVersionContainerOperations",
        "description": "List container operations for a specific version of an agent.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_version",
            "in": "path",
            "required": true,
            "description": "The version of the agent.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the\ndefault is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`\nfor descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AgentContainerOperationObject"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/{agent_name}/versions/{agent_version}/containers/default:delete": {
      "post": {
        "operationId": "Agents_deleteAgentContainer",
        "description": "Delete a container for a specific version of an agent. If the container doesn't exist, the operation will be no-op.\nThe operation is a long-running operation. Following the design guidelines for long-running operations in Azure REST APIs.\nhttps://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_version",
            "in": "path",
            "required": true,
            "description": "The version of the agent.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentContainerOperationObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/{agent_name}/versions/{agent_version}/containers/default:start": {
      "post": {
        "operationId": "Agents_startAgentContainer",
        "description": "Start a container for a specific version of an agent. If the container is already running, the operation will be no-op.\nThe operation is a long-running operation. Following the design guidelines for long-running operations in Azure REST APIs.\nhttps://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_version",
            "in": "path",
            "required": true,
            "description": "The version of the agent.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentContainerOperationObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "min_replicas": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The minimum number of replicas. Defaults to 1.",
                    "default": 1
                  },
                  "max_replicas": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The maximum number of replicas. Defaults to 1.",
                    "default": 1
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agents/{agent_name}/versions/{agent_version}/containers/default:stop": {
      "post": {
        "operationId": "Agents_stopAgentContainer",
        "description": "Stop a container for a specific version of an agent. If the container is not running, or already stopped, the operation will be no-op.\nThe operation is a long-running operation. Following the design guidelines for long-running operations in Azure REST APIs.\nhttps://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_version",
            "in": "path",
            "required": true,
            "description": "The version of the agent.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentContainerOperationObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ApiErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ApiErrorResponse"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/{agent_name}/versions/{agent_version}/containers/default:update": {
      "post": {
        "operationId": "Agents_updateAgentContainer",
        "description": "Update a container for a specific version of an agent. If the container is not running, the operation will be no-op.\nThe operation is a long-running operation. Following the design guidelines for long-running operations in Azure REST APIs.\nhttps://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#action-operations",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The name of the agent.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_version",
            "in": "path",
            "required": true,
            "description": "The version of the agent.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentContainerOperationObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "min_replicas": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The minimum number of replicas."
                  },
                  "max_replicas": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The maximum number of replicas."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agents/{agent_name}/versions:import": {
      "post": {
        "operationId": "Agents_createAgentVersionFromManifest",
        "description": "Create a new agent version from a manifest.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "description": "The unique name that identifies the agent. Name can be used to retrieve/update/delete the agent.\n- Must start and end with alphanumeric characters,\n- Can contain hyphens in the middle\n- Must not exceed 63 characters.",
            "schema": {
              "type": "string",
              "maxLength": 63
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentVersionObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentVersionFromManifestRequest"
              }
            }
          }
        }
      }
    },
    "/agents:import": {
      "post": {
        "operationId": "Agents_createAgentFromManifest",
        "description": "Creates an agent from a manifest.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentFromManifestRequest"
              }
            }
          }
        }
      }
    },
    "/connections": {
      "get": {
        "operationId": "Connections_list",
        "description": "List all connections in the project, without populating connection credentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "connectionType",
            "in": "query",
            "required": false,
            "description": "List connections of this specific type",
            "schema": {
              "$ref": "#/components/schemas/ConnectionType"
            },
            "explode": false
          },
          {
            "name": "defaultConnection",
            "in": "query",
            "required": false,
            "description": "List connections that are default connections",
            "schema": {
              "type": "boolean"
            },
            "explode": false
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedConnection"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/connections/{name}": {
      "get": {
        "operationId": "Connections_get",
        "description": "Get a connection by name, without populating connection credentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The friendly name of the connection, provided by the user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/connections/{name}/getConnectionWithCredentials": {
      "post": {
        "operationId": "Connections_getWithCredentials",
        "description": "Get a connection by name, with its connection credentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The friendly name of the connection, provided by the user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/datasets": {
      "get": {
        "operationId": "Datasets_listLatest",
        "description": "List the latest version of each DatasetVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedDatasetVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions": {
      "get": {
        "operationId": "Datasets_listVersions",
        "description": "List all versions of the given DatasetVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedDatasetVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions/{version}": {
      "get": {
        "operationId": "Datasets_getVersion",
        "description": "Get the specific version of the DatasetVersion. The service returns 404 Not Found error if the DatasetVersion does not exist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the DatasetVersion to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Datasets_deleteVersion",
        "description": "Delete the specific version of the DatasetVersion. The service returns 204 No Content if the DatasetVersion was deleted successfully or if the DatasetVersion does not exist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The version of the DatasetVersion to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Datasets_createOrUpdateVersion",
        "description": "Create a new or update an existing DatasetVersion with the given version id",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the DatasetVersion to create or update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetVersion"
                }
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetVersionUpdate"
              }
            }
          },
          "description": "The DatasetVersion to create or update."
        }
      }
    },
    "/datasets/{name}/versions/{version}/credentials": {
      "post": {
        "operationId": "Datasets_getCredentials",
        "description": "Get the SAS credential to access the storage account associated with a Dataset version.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the DatasetVersion to operate on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetCredentialResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions/{version}/startPendingUpload": {
      "post": {
        "operationId": "Datasets_startPendingUploadVersion",
        "description": "Start a new or get an existing pending upload of a dataset for a specific version.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the DatasetVersion to operate on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingUploadResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PendingUploadRequest"
              }
            }
          },
          "description": "The pending upload request parameters"
        }
      }
    },
    "/deployments": {
      "get": {
        "operationId": "Deployments_list",
        "description": "List all deployed models in the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "modelPublisher",
            "in": "query",
            "required": false,
            "description": "Model publisher to filter models by",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "modelName",
            "in": "query",
            "required": false,
            "description": "Model name (the publisher specific name) to filter models by",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "deploymentType",
            "in": "query",
            "required": false,
            "description": "Type of deployment to filter list by",
            "schema": {
              "$ref": "#/components/schemas/DeploymentType"
            },
            "explode": false
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedDeployment"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deployments/{name}": {
      "get": {
        "operationId": "Deployments_get",
        "description": "Get a deployed model.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Name of the deployment",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluation_taxonomies": {
      "get": {
        "operationId": "EvaluationTaxonomies_list",
        "description": "List evaluation taxonomies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "inputName",
            "in": "query",
            "required": false,
            "description": "Filter by the evaluation input name.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "inputType",
            "in": "query",
            "required": false,
            "description": "Filter by taxonomy input type.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedEvaluationTaxonomy"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluation_taxonomies/{name}": {
      "get": {
        "operationId": "EvaluationTaxonomies_get",
        "description": "Get an evaluation run by name.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationTaxonomy"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "EvaluationTaxonomies_delete",
        "description": "Delete an evaluation taxonomy by name.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "EvaluationTaxonomies_create",
        "description": "Create an evaluation taxonomy.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the evaluation taxonomy.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationTaxonomy"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationTaxonomyCreateOrUpdate"
              }
            }
          },
          "description": "The evaluation taxonomy."
        }
      },
      "patch": {
        "operationId": "EvaluationTaxonomies_update",
        "description": "Update an evaluation taxonomy.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the evaluation taxonomy.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationTaxonomy"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationTaxonomyUpdate"
              }
            }
          },
          "description": "The evaluation taxonomy."
        }
      }
    },
    "/evaluationrules": {
      "get": {
        "operationId": "EvaluationRules_list",
        "description": "List all evaluation rules.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "actionType",
            "in": "query",
            "required": false,
            "description": "Filter by the type of evaluation rule.",
            "schema": {
              "$ref": "#/components/schemas/EvaluationRuleActionType"
            },
            "explode": false
          },
          {
            "name": "agentName",
            "in": "query",
            "required": false,
            "description": "Filter by the agent name.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "description": "Filter by the enabled status.",
            "schema": {
              "type": "boolean"
            },
            "explode": false
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedEvaluationRule"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluationrules/{id}": {
      "get": {
        "operationId": "EvaluationRules_get",
        "description": "Get an evaluation rule.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the evaluation rule.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRule"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "EvaluationRules_delete",
        "description": "Delete an evaluation rule.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the evaluation rule.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "EvaluationRules_createOrUpdate",
        "description": "Create or update an evaluation rule.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the evaluation rule.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRule"
                }
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationRule"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationRule"
              }
            }
          },
          "description": "Evaluation rule resource"
        }
      }
    },
    "/evaluators": {
      "get": {
        "operationId": "Evaluators_listLatestVersions",
        "description": "List the latest version of each evaluator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Filter evaluators by type. Possible values: 'all', 'custom', 'builtin'.",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EvaluatorType"
                },
                {
                  "type": "string",
                  "enum": [
                    "all"
                  ]
                }
              ]
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedEvaluatorVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluators/{name}/versions": {
      "get": {
        "operationId": "Evaluators_listVersions",
        "description": "List all versions of the given evaluator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Filter evaluators by type. Possible values: 'all', 'custom', 'builtin'.",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EvaluatorType"
                },
                {
                  "type": "string",
                  "enum": [
                    "all"
                  ]
                }
              ]
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedEvaluatorVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "Evaluators_createVersion",
        "description": "Create a new EvaluatorVersion with auto incremented version id",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluators/{name}/versions/{version}": {
      "get": {
        "operationId": "Evaluators_getVersion",
        "description": "Get the specific version of the EvaluatorVersion. The service returns 404 Not Found error if the EvaluatorVersion does not exist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the EvaluatorVersion to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Evaluators_deleteVersion",
        "description": "Delete the specific version of the EvaluatorVersion. The service returns 204 No Content if the EvaluatorVersion was deleted successfully or if the EvaluatorVersion does not exist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The version of the EvaluatorVersion to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Evaluators_updateVersion",
        "description": "Update an existing EvaluatorVersion with the given version id",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The version of the EvaluatorVersion to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorVersion"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/indexes": {
      "get": {
        "operationId": "Indexes_listLatest",
        "description": "List the latest version of each Index",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedIndex"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/indexes/{name}/versions": {
      "get": {
        "operationId": "Indexes_listVersions",
        "description": "List all versions of the given Index",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedIndex"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/indexes/{name}/versions/{version}": {
      "get": {
        "operationId": "Indexes_getVersion",
        "description": "Get the specific version of the Index. The service returns 404 Not Found error if the Index does not exist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the Index to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Index"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Indexes_deleteVersion",
        "description": "Delete the specific version of the Index. The service returns 204 No Content if the Index was deleted successfully or if the Index does not exist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The version of the Index to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Indexes_createOrUpdateVersion",
        "description": "Create a new or update an existing Index with the given version id",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "The specific version id of the Index to create or update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Index"
                }
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Index"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IndexUpdate"
              }
            }
          },
          "description": "The Index to create or update."
        }
      }
    },
    "/insights": {
      "post": {
        "operationId": "Insights_generate",
        "description": "Generate Insights",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "Repeatability-Request-ID",
            "in": "header",
            "required": false,
            "description": "Unique, client-generated identifier for ensuring request idempotency. Use the same ID for retries to prevent duplicate evaluations.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Repeatability-First-Sent",
            "in": "header",
            "required": false,
            "description": "Timestamp indicating when this request was first initiated. Used in conjunction with repeatability-request-id for idempotency control.",
            "schema": {
              "type": "string",
              "format": "http-date"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Insight"
              }
            }
          },
          "description": "Complete evaluation configuration including data source, evaluators, and result settings"
        }
      },
      "get": {
        "operationId": "Insights_list",
        "description": "List all insights in reverse chronological order (newest first).",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Filter by the type of analysis.",
            "schema": {
              "$ref": "#/components/schemas/InsightType"
            },
            "explode": false
          },
          {
            "name": "evalId",
            "in": "query",
            "required": false,
            "description": "Filter by the evaluation ID.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "runId",
            "in": "query",
            "required": false,
            "description": "Filter by the evaluation run ID.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "agentName",
            "in": "query",
            "required": false,
            "description": "Filter by the agent name.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "includeCoordinates",
            "in": "query",
            "required": false,
            "description": "Whether to include coordinates for visualization in the response. Defaults to false.",
            "schema": {
              "type": "boolean"
            },
            "explode": false
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedInsight"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/insights/{id}": {
      "get": {
        "operationId": "Insights_get",
        "description": "Get a specific insight by Id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier for the insights report.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeCoordinates",
            "in": "query",
            "required": false,
            "description": "Whether to include coordinates for visualization in the response. Defaults to false.",
            "schema": {
              "type": "boolean"
            },
            "explode": false
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/memory_stores": {
      "post": {
        "operationId": "createMemoryStore",
        "description": "Create a memory store.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Memory stores"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "The name of the memory store."
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "A human-readable description of the memory store."
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Arbitrary key-value metadata to associate with the memory store."
                  },
                  "definition": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MemoryStoreDefinition"
                      }
                    ],
                    "description": "The memory store definition."
                  }
                },
                "required": [
                  "name",
                  "definition"
                ]
              }
            }
          }
        }
      },
      "get": {
        "operationId": "listMemoryStores",
        "description": "List all memory stores.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the\ndefault is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`\nfor descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MemoryStoreObject"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Memory stores"
        ]
      }
    },
    "/memory_stores/{name}": {
      "post": {
        "operationId": "updateMemoryStore",
        "description": "Update a memory store.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the memory store to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Memory stores"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "A human-readable description of the memory store."
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Arbitrary key-value metadata to associate with the memory store."
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getMemoryStore",
        "description": "Retrieve a memory store.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the memory store to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreObject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Memory stores"
        ]
      },
      "delete": {
        "operationId": "deleteMemoryStore",
        "description": "Delete a memory store.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the memory store to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteMemoryStoreResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Memory stores"
        ]
      }
    },
    "/memory_stores/{name}/updates/{update_id}": {
      "get": {
        "operationId": "getUpdateResult",
        "description": "Get memory store update result.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the memory store.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "update_id",
            "in": "path",
            "required": true,
            "description": "The ID of the memory update operation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreUpdateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Memory stores"
        ]
      }
    },
    "/memory_stores/{name}:delete_scope": {
      "post": {
        "operationId": "deleteScopeMemories",
        "description": "Delete all memories associated with a specific scope from a memory store.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the memory store.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreDeleteScopeResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Memory stores"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scope": {
                    "type": "string",
                    "description": "The namespace that logically groups and isolates memories to delete, such as a user ID."
                  }
                },
                "required": [
                  "scope"
                ]
              }
            }
          }
        }
      }
    },
    "/memory_stores/{name}:search_memories": {
      "post": {
        "operationId": "searchMemories",
        "description": "Search for relevant memories from a memory store based on conversation context.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the memory store to search.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreSearchResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Memory stores"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scope": {
                    "type": "string",
                    "description": "The namespace that logically groups and isolates memories, such as a user ID."
                  },
                  "conversation_id": {
                    "type": "string",
                    "description": "The conversation ID for which to search memories. Only one of conversation_id or items should be provided."
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/OpenAI.ItemParam"
                    },
                    "description": "Items for which to search for relevant memories. Only one of conversation_id or items should be provided."
                  },
                  "previous_search_id": {
                    "type": "string",
                    "description": "The unique ID of the previous search request, enabling incremental memory search from where the last operation left off. Cannot be used together with conversation_id."
                  },
                  "options": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MemorySearchOptions"
                      }
                    ],
                    "description": "Memory search options."
                  }
                },
                "required": [
                  "scope"
                ]
              }
            }
          }
        }
      }
    },
    "/memory_stores/{name}:update_memories": {
      "post": {
        "operationId": "updateMemories",
        "description": "Update memory store with conversation memories.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the memory store to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "required": true,
                "description": "The location for monitoring the operation state.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStoreUpdateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Memory stores"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scope": {
                    "type": "string",
                    "description": "The namespace that logically groups and isolates memories, such as a user ID."
                  },
                  "conversation_id": {
                    "type": "string",
                    "description": "The conversation ID from which to extract memories. Only one of conversation_id or items should be provided."
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/OpenAI.ItemParam"
                    },
                    "description": "Conversation items from which to extract memories. Only one of conversation_id or items should be provided."
                  },
                  "previous_update_id": {
                    "type": "string",
                    "description": "The unique ID of the previous update request, enabling incremental memory updates from where the last operation left off. Cannot be used together with conversation_id."
                  },
                  "update_delay": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Timeout period before processing the memory update in seconds.\nIf a new update request is received during this period, it will cancel the current request and reset the timeout.\nSet to 0 to immediately trigger the update without delay.\nDefaults to 300 (5 minutes).",
                    "default": 300
                  }
                },
                "required": [
                  "scope"
                ]
              }
            }
          }
        }
      }
    },
    "/openai/conversations": {
      "post": {
        "operationId": "createConversation",
        "description": "Create a conversation.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ConversationResource"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Conversations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenAI.CreateConversationRequest"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "listConversations",
        "description": "Returns the list of all conversations.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the\ndefault is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`\nfor descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "query",
            "required": false,
            "description": "Filter by agent name. If provided, only items associated with the specified agent will be returned.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "description": "Filter by agent ID in the format `name:version`. If provided, only items associated with the specified agent ID will be returned.",
            "schema": {
              "type": "string"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpenAI.ConversationResource"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Conversations"
        ]
      }
    },
    "/openai/conversations/{conversation_id}": {
      "post": {
        "operationId": "updateConversation",
        "description": "Update a conversation.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "description": "The id of the conversation to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ConversationResource"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Conversations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenAI.UpdateConversationRequest"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getConversation",
        "description": "Retrieves a conversation.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "description": "The id of the conversation to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ConversationResource"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Conversations"
        ]
      },
      "delete": {
        "operationId": "deleteConversation",
        "description": "Deletes a conversation.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "description": "The id of the conversation to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.DeletedConversationResource"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Conversations"
        ]
      }
    },
    "/openai/conversations/{conversation_id}/items": {
      "post": {
        "operationId": "createConversationItems",
        "description": "Create items in a conversation with the given ID.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "description": "The id of the conversation on which the item needs to be created.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "Additional fields to include in the response.\nSee the `include` parameter for listing Conversation items for more information.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ConversationItemList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Conversations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/OpenAI.ItemParam"
                        },
                        {
                          "$ref": "#/components/schemas/OpenAI.EasyInputMessage"
                        }
                      ]
                    },
                    "maxItems": 20,
                    "description": "The items to add to the conversation. You may add up to 20 items at a time."
                  }
                },
                "required": [
                  "items"
                ]
              }
            }
          }
        }
      },
      "get": {
        "operationId": "listConversationItems",
        "description": "List all items for a conversation with the given ID.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "description": "The id of the conversation on which the items needs to be listed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the\ndefault is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`\nfor descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "item_type",
            "in": "query",
            "required": false,
            "description": "Filter by item type. If provided, only items of the specified type will be returned.",
            "schema": {
              "$ref": "#/components/schemas/OpenAI.ItemType"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpenAI.ItemResource"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Conversations"
        ]
      }
    },
    "/openai/conversations/{conversation_id}/items/{item_id}": {
      "get": {
        "operationId": "getConversationItem",
        "description": "Get a single item from a conversation with the given IDs.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "description": "The ID of the conversation that contains the item.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "description": "The id of the conversation item to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ItemResource"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Conversations"
        ]
      },
      "delete": {
        "operationId": "deleteConversationItem",
        "description": "Delete an item from a conversation with the given IDs.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "description": "The id of the conversation on which the item needs to be deleted from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "description": "The id of the conversation item to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ConversationResource"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Conversations"
        ]
      }
    },
    "/openai/evals": {
      "get": {
        "operationId": "FoundryOpenAIEvals_listEvals",
        "summary": "List all evaluations",
        "description": "List evaluations for a project.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "Identifier for the last run from the previous pagination request.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of runs to retrieve.",
            "schema": {
              "$ref": "#/components/schemas/integer",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "explode": false
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Evals can be ordered by creation time or last updated time. Use\n`created_at` for creation time or `updated_at` for last updated time.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "default": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Eval"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ]
      },
      "post": {
        "operationId": "FoundryOpenAIEvals_createEval",
        "summary": "Create evaluation",
        "description": "Create the structure of an evaluation that can be used to test a model's performance.\nAn evaluation is a set of testing criteria and the config for a data source, which dictates the schema of the data used in the evaluation. After creating an evaluation, you can run it on different models and model parameters. We support several types of graders and datasources.\nFor more information, see the [Evals guide](https://platform.openai.com/docs/guides/evals).",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eval"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvalRequest"
              }
            }
          }
        }
      }
    },
    "/openai/evals/{eval_id}": {
      "delete": {
        "operationId": "FoundryOpenAIEvals_deleteEval",
        "summary": "Delete an evaluation",
        "description": "Delete an evaluation.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "description": "The ID of the evaluation to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEvalResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ]
      },
      "get": {
        "operationId": "FoundryOpenAIEvals_getEval",
        "summary": "Get an evaluation",
        "description": "Get an evaluation by ID.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "description": "The ID of the evaluation to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eval"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ]
      },
      "post": {
        "operationId": "FoundryOpenAIEvals_updateEval",
        "summary": "Update an evaluation",
        "description": "Update certain properties of an evaluation.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "description": "The ID of the evaluation to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eval"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvalParametersBody"
              }
            }
          }
        }
      }
    },
    "/openai/evals/{eval_id}/runs": {
      "get": {
        "operationId": "FoundryOpenAIEvals_listRuns",
        "summary": "Get a list of runs for an evaluation",
        "description": "Get a list of runs for an evaluation.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "description": "The ID of the evaluation to retrieve runs for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "Identifier for the last run from the previous pagination request.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of runs to retrieve.",
            "schema": {
              "$ref": "#/components/schemas/integer",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "explode": false
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter runs by status. One of `queued` | `in_progress` | `failed` | `completed` | `canceled`.",
            "schema": {
              "type": "string",
              "enum": [
                "queued",
                "in_progress",
                "completed",
                "canceled",
                "failed"
              ]
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EvalRun"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ]
      },
      "post": {
        "operationId": "FoundryOpenAIEvals_createEvalRun",
        "summary": "Create evaluation run",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "description": "The ID of the evaluation to create a run for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalRun"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvalRunRequest"
              }
            }
          }
        }
      }
    },
    "/openai/evals/{eval_id}/runs/{run_id}": {
      "delete": {
        "operationId": "FoundryOpenAIEvals_deleteEvalRun",
        "summary": "Delete evaluation run",
        "description": "Delete an eval run.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "description": "The ID of the evaluation to delete the run from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "description": "The ID of the run to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEvalRunResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ]
      },
      "get": {
        "operationId": "FoundryOpenAIEvals_getEvalRun",
        "summary": "Get an evaluation run",
        "description": "Get an evaluation run by ID.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "description": "The ID of the evaluation to retrieve runs for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "description": "The ID of the run to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalRun"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ]
      },
      "post": {
        "operationId": "FoundryOpenAIEvals_cancelEvalRun",
        "summary": "Cancel evaluation run",
        "description": "Cancel an ongoing evaluation run.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "description": "The ID of the evaluation whose run you want to cancel.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "description": "The ID of the run to cancel.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalRun"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ]
      }
    },
    "/openai/evals/{eval_id}/runs/{run_id}/output_items": {
      "get": {
        "operationId": "FoundryOpenAIEvals_getEvalRunOutputItems",
        "summary": "Get evaluation run output items",
        "description": "Get a list of output items for an evaluation run.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "description": "The ID of the run to retrieve output items for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "Identifier for the last run from the previous pagination request.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of runs to retrieve.",
            "schema": {
              "$ref": "#/components/schemas/integer",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "explode": false
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter output items by status. Use `failed` to filter by failed output\nitems or `pass` to filter by passed output items.",
            "schema": {
              "type": "string",
              "enum": [
                "fail",
                "pass"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EvalRunOutputItem"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ]
      }
    },
    "/openai/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}": {
      "get": {
        "operationId": "FoundryOpenAIEvals_getEvalRunOutputItem",
        "summary": "Get an output item of an evaluation run",
        "description": "Get an evaluation run output item by ID.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "description": "The ID of the evaluation to retrieve runs for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "description": "The ID of the run to retrieve.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "output_item_id",
            "in": "path",
            "required": true,
            "description": "The ID of the output item to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalRunOutputItem"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Evals"
        ]
      }
    },
    "/openai/fine-tuning/jobs": {
      "post": {
        "operationId": "createFineTuningJob",
        "description": "Creates a fine-tuning job which begins the process of creating a new model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.FineTuningJob"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenAI.CreateFineTuningJobRequest"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "listPaginatedFineTuningJobs",
        "description": "List your organization's fine-tuning jobs",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "Identifier for the last job from the previous pagination request.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of fine-tuning jobs to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ListPaginatedFineTuningJobsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Fine-tuning"
        ]
      }
    },
    "/openai/fine-tuning/jobs/{fine_tuning_job_id}": {
      "get": {
        "operationId": "retrieveFineTuningJob",
        "description": "Get info about a fine-tuning job.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tuning job.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.FineTuningJob"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Fine-tuning"
        ]
      }
    },
    "/openai/fine-tuning/jobs/{fine_tuning_job_id}/cancel": {
      "post": {
        "operationId": "cancelFineTuningJob",
        "description": "Immediately cancel a fine-tune job.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tuning job to cancel.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.FineTuningJob"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Fine-tuning"
        ]
      }
    },
    "/openai/fine-tuning/jobs/{fine_tuning_job_id}/checkpoints": {
      "get": {
        "operationId": "listFineTuningJobCheckpoints",
        "description": "List checkpoints for a fine-tuning job.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tuning job to get checkpoints for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "Identifier for the last checkpoint ID from the previous pagination request.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of checkpoints to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ListFineTuningJobCheckpointsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Fine-tuning"
        ]
      }
    },
    "/openai/fine-tuning/jobs/{fine_tuning_job_id}/events": {
      "get": {
        "operationId": "listFineTuningJobEvents",
        "description": "Get fine-grained status updates for a fine-tuning job.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tuning job to get events for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "Identifier for the last event from the previous pagination request.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of events to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ListFineTuningJobEventsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Fine-tuning"
        ]
      }
    },
    "/openai/fine-tuning/jobs/{fine_tuning_job_id}/pause": {
      "post": {
        "operationId": "pauseFineTuningJob",
        "description": "Pause a running fine-tune job.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tuning job to pause.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.FineTuningJob"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Fine-tuning"
        ]
      }
    },
    "/openai/fine-tuning/jobs/{fine_tuning_job_id}/resume": {
      "post": {
        "operationId": "resumeFineTuningJob",
        "description": "Resume a paused fine-tune job.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "description": "The ID of the fine-tuning job to resume.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.FineTuningJob"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Fine-tuning"
        ]
      }
    },
    "/openai/responses": {
      "post": {
        "operationId": "createResponse_createResponseStream",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": false,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          }
        ],
        "description": "Creates a model response. Creates a model response (streaming response).",
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.Response"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Responses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
                        "x-oaiTypeLabel": "map"
                      },
                      "temperature": {
                        "type": "number",
                        "format": "float",
                        "nullable": true,
                        "minimum": 0,
                        "maximum": 2,
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.",
                        "default": 1
                      },
                      "top_p": {
                        "type": "number",
                        "format": "float",
                        "nullable": true,
                        "minimum": 0,
                        "maximum": 1,
                        "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.",
                        "default": 1
                      },
                      "user": {
                        "type": "string",
                        "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids)."
                      },
                      "service_tier": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OpenAI.ServiceTier"
                          }
                        ],
                        "description": "Note: service_tier is not applicable to Azure OpenAI."
                      },
                      "top_logprobs": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0,
                        "maximum": 20,
                        "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability."
                      },
                      "previous_response_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "The unique ID of the previous response to the model. Use this to\ncreate multi-turn conversations. Learn more about\n[conversation state](/docs/guides/conversation-state)."
                      },
                      "model": {
                        "type": "string",
                        "description": "The model deployment to use for the creation of this response."
                      },
                      "reasoning": {
                        "type": "object",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OpenAI.Reasoning"
                          }
                        ],
                        "nullable": true
                      },
                      "background": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Whether to run the model response in the background.\n[Learn more](/docs/guides/background).",
                        "default": false
                      },
                      "max_output_tokens": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true,
                        "description": "An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning)."
                      },
                      "max_tool_calls": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true,
                        "description": "The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored."
                      },
                      "text": {
                        "type": "object",
                        "properties": {
                          "format": {
                            "$ref": "#/components/schemas/OpenAI.ResponseTextFormatConfiguration"
                          }
                        },
                        "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Structured Outputs](/docs/guides/structured-outputs)"
                      },
                      "tools": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/OpenAI.Tool"
                        },
                        "description": "An array of tools the model may call while generating a response. You \ncan specify which tool to use by setting the `tool_choice` parameter.\n\nThe two categories of tools you can provide the model are:\n\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like file search.\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code."
                      },
                      "tool_choice": {
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/OpenAI.ToolChoiceOptions"
                          },
                          {
                            "$ref": "#/components/schemas/OpenAI.ToolChoiceObject"
                          }
                        ],
                        "description": "How the model should select which tool (or tools) to use when generating\na response. See the `tools` parameter to see how to specify which tools\nthe model can call."
                      },
                      "prompt": {
                        "type": "object",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OpenAI.Prompt"
                          }
                        ],
                        "nullable": true
                      },
                      "truncation": {
                        "type": "string",
                        "enum": [
                          "auto",
                          "disabled"
                        ],
                        "nullable": true,
                        "description": "The truncation strategy to use for the model response.\n- `auto`: If the context of this response and previous ones exceeds\n  the model's context window size, the model will truncate the\n  response to fit the context window by dropping input items in the\n  middle of the conversation.\n- `disabled` (default): If a model response will exceed the context window\n  size for a model, the request will fail with a 400 error.",
                        "default": "disabled"
                      },
                      "input": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "$ref": "#/components/schemas/OpenAI.ItemParam"
                                },
                                {
                                  "$ref": "#/components/schemas/OpenAI.EasyInputMessage"
                                }
                              ]
                            }
                          }
                        ],
                        "description": "Text, image, or file inputs to the model, used to generate a response.\n\nLearn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Image inputs](/docs/guides/images)\n- [File inputs](/docs/guides/pdf-files)\n- [Conversation state](/docs/guides/conversation-state)\n- [Function calling](/docs/guides/function-calling)"
                      },
                      "include": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/OpenAI.Includable"
                        },
                        "nullable": true,
                        "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `code_interpreter_call.outputs`: Includes the outputs of python code execution\n  in code interpreter tool call items.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `message.output_text.logprobs`: Include logprobs with assistant messages.\n- `reasoning.encrypted_content`: Includes an encrypted version of reasoning\n  tokens in reasoning item outputs. This enables reasoning items to be used in\n  multi-turn conversations when using the Responses API statelessly (like\n  when the `store` parameter is set to `false`, or when an organization is\n  enrolled in the zero data retention program)."
                      },
                      "parallel_tool_calls": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Whether to allow the model to run tool calls in parallel.",
                        "default": true
                      },
                      "store": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Whether to store the generated model response for later retrieval via\nAPI.",
                        "default": true
                      },
                      "instructions": {
                        "type": "string",
                        "nullable": true,
                        "description": "A system (or developer) message inserted into the model's context.\n\nWhen using along with `previous_response_id`, the instructions from a previous\nresponse will not be carried over to the next response. This makes it simple\nto swap out system (or developer) messages in new responses."
                      },
                      "stream": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\nSee the [Streaming section below](/docs/api-reference/responses-streaming)\nfor more information.",
                        "default": false
                      },
                      "conversation": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ]
                          }
                        ]
                      },
                      "agent": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/AgentReference"
                          }
                        ],
                        "description": "The agent to use for generating the response."
                      },
                      "structured_inputs": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "The structured inputs to the response that can participate in prompt template substitution or tool argument bindings."
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/OpenAI.CreateResponse"
                  }
                ]
              }
            }
          }
        }
      },
      "get": {
        "operationId": "listResponses",
        "description": "Returns the list of all responses.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the\ndefault is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`\nfor descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "agent_name",
            "in": "query",
            "required": false,
            "description": "Filter by agent name. If provided, only items associated with the specified agent will be returned.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "description": "Filter by agent ID in the format `name:version`. If provided, only items associated with the specified agent ID will be returned.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "conversation_id",
            "in": "query",
            "required": false,
            "description": "Filter by conversation ID. If provided, only responses associated with the specified conversation will be returned.",
            "schema": {
              "type": "string"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpenAI.Response"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Responses"
        ]
      }
    },
    "/openai/responses/{response_id}": {
      "get": {
        "operationId": "getResponse_getResponseStream",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": false,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "response_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OpenAI.Includable"
              },
              "default": []
            }
          },
          {
            "name": "stream",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "explode": false
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "explode": false
          },
          {
            "name": "accept",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "text/event-stream"
              ]
            }
          }
        ],
        "description": "Retrieves a model response with the given ID. Retrieves a model response with the given ID (streaming response).",
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.Response"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Responses"
        ]
      },
      "delete": {
        "operationId": "deleteResponse",
        "description": "Deletes a model response.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "response_id",
            "in": "path",
            "required": true,
            "description": "The ID of the response to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponseResult"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Responses"
        ]
      }
    },
    "/openai/responses/{response_id}/cancel": {
      "post": {
        "operationId": "cancelResponse",
        "description": "Cancels a model response.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "description": "The API version to use for this operation.",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "explode": false
          },
          {
            "name": "response_id",
            "in": "path",
            "required": true,
            "description": "The ID of the response to cancel.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAI.Response"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Responses"
        ]
      }
    },
    "/openai/responses/{response_id}/input_items": {
      "get": {
        "operationId": "listInputItems",
        "description": "Returns a list of input items for a given response.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "response_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the\ndefault is 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "explode": false
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`\nfor descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "explode": false
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list.\nFor instance, if you make a list request and receive 100 objects, ending with obj_foo, your\nsubsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "schema": {
              "type": "string"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "has_more"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpenAI.ItemResource"
                      },
                      "description": "The requested list of items."
                    },
                    "first_id": {
                      "type": "string",
                      "description": "The first ID represented in this list."
                    },
                    "last_id": {
                      "type": "string",
                      "description": "The last ID represented in this list."
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "A value indicating whether there are additional values available not captured in this list."
                    }
                  },
                  "description": "The response data for a requested list of items."
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Responses"
        ]
      }
    },
    "/redTeams/runs": {
      "get": {
        "operationId": "RedTeams_list",
        "description": "List a redteam by name.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedRedTeam"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/redTeams/runs/{name}": {
      "get": {
        "operationId": "RedTeams_get",
        "description": "Get a redteam by name.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Identifier of the red team run.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedTeam"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/redTeams/runs:run": {
      "post": {
        "operationId": "RedTeams_create",
        "description": "Creates a redteam run.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedTeam"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedTeam"
              }
            }
          },
          "description": "Redteam to be run"
        }
      }
    },
    "/schedules": {
      "get": {
        "operationId": "Schedules_list",
        "description": "List all schedules.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedSchedule"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{id}": {
      "delete": {
        "operationId": "Schedules_delete",
        "description": "Delete a schedule.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identifier of the schedule.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Schedules_get",
        "description": "Get a schedule by id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identifier of the schedule.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "required": false,
                "description": "An opaque, globally-unique, client-generated string identifier for the request.",
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.uuid"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Schedules_createOrUpdate",
        "description": "Create or update a schedule by id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Identifier of the schedule.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              }
            }
          },
          "description": "Schedule resource"
        }
      }
    },
    "/schedules/{scheduleId}/runs": {
      "get": {
        "operationId": "Schedules_listRuns",
        "description": "List all schedule runs.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "description": "Identifier of the schedule.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedScheduleRun"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{scheduleId}/runs/{runId}": {
      "get": {
        "operationId": "Schedules_getRun",
        "description": "Get a schedule run by id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "description": "Identifier of the schedule.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runId",
            "in": "path",
            "required": true,
            "description": "Identifier of the schedule run.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleRun"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "required": false,
                "description": "String error code indicating what went wrong.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Azure.Core.Foundations.ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "OAuth2Auth": [
        "https://ai.azure.com/.default"
      ]
    }
  ],
  "components": {
    "parameters": {
      "Azure.Core.ClientRequestIdHeader": {
        "name": "x-ms-client-request-id",
        "in": "header",
        "required": false,
        "description": "An opaque, globally-unique, client-generated string identifier for the request.",
        "schema": {
          "$ref": "#/components/schemas/Azure.Core.uuid"
        }
      },
      "Azure.Core.Foundations.ApiVersionParameter": {
        "name": "api-version",
        "in": "query",
        "required": true,
        "description": "The API version to use for this operation.",
        "schema": {
          "type": "string",
          "minLength": 1
        },
        "explode": false
      }
    },
    "schemas": {
      "A2ATool": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "a2a_preview"
            ],
            "description": "The type of the tool. Always `a2a`."
          },
          "base_url": {
            "type": "string",
            "format": "uri",
            "description": "Base URL of the agent."
          },
          "agent_card_path": {
            "type": "string",
            "description": "The path to the agent card relative to the `base_url`.\nIf not provided, defaults to  `/.well-known/agent-card.json`"
          },
          "project_connection_id": {
            "type": "string",
            "description": "The connection ID in the project for the A2A server.\nThe connection stores authentication and other connection details needed to connect to the A2A server."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "An agent implementing the A2A protocol."
      },
      "AISearchIndexResource": {
        "type": "object",
        "required": [
          "project_connection_id"
        ],
        "properties": {
          "project_connection_id": {
            "type": "string",
            "description": "An index connection ID in an IndexResource attached to this agent."
          },
          "indexName": {
            "type": "string",
            "description": "The name of an index in an IndexResource attached to this agent."
          },
          "queryType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AzureAISearchQueryType"
              }
            ],
            "description": "Type of query in an AIIndexResource attached to this agent."
          },
          "topK": {
            "type": "integer",
            "format": "int32",
            "description": "Number of documents to retrieve from search and present to the model."
          },
          "filter": {
            "type": "string",
            "description": "filter string for search resource. Learn more from here: https://learn.microsoft.com/azure/search/search-filters"
          },
          "indexAssetId": {
            "type": "string",
            "description": "Index asset id for search resource."
          }
        },
        "description": "A AI Search Index resource."
      },
      "AgentClusterInsightResult": {
        "type": "object",
        "required": [
          "type",
          "clusterInsight"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AgentClusterInsight"
            ],
            "description": "The type of insights result."
          },
          "clusterInsight": {
            "$ref": "#/components/schemas/ClusterInsightResult"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/InsightResult"
          }
        ],
        "description": "Insights from the agent cluster analysis."
      },
      "AgentClusterInsightsRequest": {
        "type": "object",
        "required": [
          "type",
          "agentName"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AgentClusterInsight"
            ],
            "description": "The type of request."
          },
          "agentName": {
            "type": "string",
            "description": "Identifier for the agent."
          },
          "modelConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InsightModelConfiguration"
              }
            ],
            "description": "Configuration of the model used in the insight generation."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/InsightRequest"
          }
        ],
        "description": "Insights on set of Agent Evaluation Results"
      },
      "AgentContainerObject": {
        "type": "object",
        "required": [
          "object",
          "status",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "agent.container"
            ],
            "description": "The object type, which is always 'agent.container'.",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentContainerStatus"
              }
            ],
            "description": "The status of the container of a specific version of an agent.",
            "readOnly": true
          },
          "max_replicas": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of replicas for the container. Default is 1.",
            "example": 10
          },
          "min_replicas": {
            "type": "integer",
            "format": "int32",
            "description": "The minimum number of replicas for the container. Default is 1.",
            "example": 1
          },
          "error_message": {
            "type": "string",
            "description": "The error message if the container failed to operate, if any.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation time of the container.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last update time of the container.",
            "readOnly": true
          }
        },
        "description": "The details of the container of a specific version of an agent."
      },
      "AgentContainerOperationError": {
        "type": "object",
        "required": [
          "code",
          "type",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The error code of the container operation, if any."
          },
          "type": {
            "type": "string",
            "description": "The error type of the container operation, if any."
          },
          "message": {
            "type": "string",
            "description": "The error message of the container operation, if any."
          }
        },
        "description": "The error details of the container operation, if any."
      },
      "AgentContainerOperationObject": {
        "type": "object",
        "required": [
          "id",
          "agent_id",
          "agent_version_id",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the container operation. This id is unique identifier across the system."
          },
          "agent_id": {
            "type": "string",
            "description": "The ID of the agent."
          },
          "agent_version_id": {
            "type": "string",
            "description": "The ID of the agent version."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentContainerOperationStatus"
              }
            ],
            "description": "The status of the container operation."
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentContainerOperationError"
              }
            ],
            "description": "The error of the container operation, if any."
          },
          "container": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentContainerObject"
              }
            ],
            "description": "The container of the specific version of an agent."
          }
        },
        "description": "The container operation for a specific version of an agent."
      },
      "AgentContainerOperationStatus": {
        "type": "string",
        "enum": [
          "NotStarted",
          "InProgress",
          "Succeeded",
          "Failed"
        ],
        "description": "Status of the container operation for a specific version of an agent."
      },
      "AgentContainerStatus": {
        "type": "string",
        "enum": [
          "Starting",
          "Running",
          "Stopping",
          "Stopped",
          "Failed",
          "Deleting",
          "Deleted",
          "Updating"
        ],
        "description": "Status of the container of a specific version of an agent."
      },
      "AgentDefinition": {
        "type": "object",
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/AgentKind"
          },
          "rai_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RaiConfig"
              }
            ],
            "description": "Configuration for Responsible AI (RAI) content filtering and safety features."
          }
        },
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "workflow": "#/components/schemas/WorkflowDefinition",
            "hosted": "#/components/schemas/HostedAgentDefinition",
            "container_app": "#/components/schemas/ContainerAppAgentDefinition",
            "prompt": "#/components/schemas/PromptAgentDefinition"
          }
        }
      },
      "AgentId": {
        "type": "object",
        "required": [
          "type",
          "name",
          "version"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "agent_id"
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "description": "The name of the agent."
          },
          "version": {
            "type": "string",
            "description": "The version identifier of the agent."
          }
        }
      },
      "AgentKind": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "prompt",
              "hosted",
              "container_app",
              "workflow"
            ]
          }
        ]
      },
      "AgentObject": {
        "type": "object",
        "required": [
          "object",
          "id",
          "name",
          "versions"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "agent"
            ],
            "description": "The object type, which is always 'agent'."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the agent."
          },
          "name": {
            "type": "string",
            "maxLength": 63,
            "description": "The name of the agent."
          },
          "versions": {
            "type": "object",
            "properties": {
              "latest": {
                "$ref": "#/components/schemas/AgentVersionObject"
              }
            },
            "required": [
              "latest"
            ],
            "description": "The latest version of the agent."
          }
        }
      },
      "AgentProtocol": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "activity_protocol",
              "responses"
            ]
          }
        ]
      },
      "AgentReference": {
        "type": "object",
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "agent_reference"
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "description": "The name of the agent."
          },
          "version": {
            "type": "string",
            "description": "The version identifier of the agent."
          }
        }
      },
      "AgentTaxonomyInput": {
        "type": "object",
        "required": [
          "type",
          "target",
          "riskCategories"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "agent"
            ],
            "description": "Input type of the evaluation taxonomy."
          },
          "target": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AzureAIAgentTarget"
              }
            ],
            "description": "Target configuration for the agent."
          },
          "riskCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskCategory"
            },
            "description": "List of risk categories to evaluate against."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EvaluationTaxonomyInput"
          }
        ],
        "description": "Input configuration for the evaluation taxonomy when the input type is agent."
      },
      "AgentTaxonomyInputUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "agent"
            ],
            "description": "Input type of the evaluation taxonomy."
          },
          "target": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AzureAIAgentTargetUpdate"
              }
            ],
            "description": "Target configuration for the agent."
          },
          "riskCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskCategory"
            },
            "description": "List of risk categories to evaluate against."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EvaluationTaxonomyInputUpdate"
          }
        ],
        "description": "Input configuration for the evaluation taxonomy when the input type is agent."
      },
      "AgentVersionObject": {
        "type": "object",
        "required": [
          "metadata",
          "object",
          "id",
          "name",
          "version",
          "created_at",
          "definition"
        ],
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          },
          "object": {
            "type": "string",
            "enum": [
              "agent.version"
            ],
            "description": "The object type, which is always 'agent.version'."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the agent version."
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "description": "The name of the agent. Name can be used to retrieve/update/delete the agent."
          },
          "version": {
            "type": "string",
            "description": "The version identifier of the agent. Agents are immutable and every update creates a new version while keeping the name same."
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "description": "A human-readable description of the agent."
          },
          "created_at": {
            "type": "integer",
            "format": "unixtime",
            "description": "The Unix timestamp (seconds) when the agent was created."
          },
          "definition": {
            "$ref": "#/components/schemas/AgentDefinition"
          }
        }
      },
      "AgenticIdentityCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AgenticIdentityToken"
            ],
            "description": "The credential type",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "Agentic identity credential definition"
      },
      "ApiError": {
        "type": "object",
        "required": [
          "code",
          "message",
          "details"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The error code."
          },
          "message": {
            "type": "string",
            "description": "A human-readable description of the error."
          },
          "target": {
            "type": "string",
            "description": "The target of the error, if applicable."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "description": "Additional details about the error."
          },
          "innererror": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiInnerError"
              }
            ],
            "description": "The inner error, if any."
          }
        }
      },
      "ApiErrorResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ApiError"
          }
        },
        "description": "Error response for API failures."
      },
      "ApiInnerError": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The error code."
          },
          "innererror": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiInnerError"
              }
            ],
            "description": "The inner error, if any."
          }
        }
      },
      "ApiKeyCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ApiKey"
            ],
            "description": "The credential type",
            "readOnly": true
          },
          "key": {
            "type": "string",
            "description": "API Key",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "API Key Credential definition"
      },
      "AssetCredentialResponse": {
        "type": "object",
        "required": [
          "blobReference"
        ],
        "properties": {
          "blobReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BlobReference"
              }
            ],
            "description": "Credential info to access the storage account."
          }
        },
        "description": "Represents a reference to a blob for consumption"
      },
      "AssetId": {
        "type": "string",
        "description": "Identifier of a saved asset."
      },
      "AttackStrategy": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "easy",
              "moderate",
              "difficult",
              "ascii_art",
              "ascii_smuggler",
              "atbash",
              "base64",
              "binary",
              "caesar",
              "character_space",
              "jailbreak",
              "ansii_attack",
              "character_swap",
              "suffix_append",
              "string_join",
              "unicode_confusable",
              "unicode_substitution",
              "diacritic",
              "flip",
              "leetspeak",
              "rot13",
              "morse",
              "url",
              "baseline"
            ]
          }
        ],
        "description": "Strategies for attacks."
      },
      "Azure.Core.Foundations.Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "One of a server-defined set of error codes."
          },
          "message": {
            "type": "string",
            "description": "A human-readable representation of the error."
          },
          "target": {
            "type": "string",
            "description": "The target of the error."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Azure.Core.Foundations.Error"
            },
            "description": "An array of details about specific errors that led to this reported error."
          },
          "innererror": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Azure.Core.Foundations.InnerError"
              }
            ],
            "description": "An object containing more specific information than the current object about the error."
          }
        },
        "description": "The error object."
      },
      "Azure.Core.Foundations.ErrorResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Azure.Core.Foundations.Error"
              }
            ],
            "description": "The error object."
          }
        },
        "description": "A response containing error details."
      },
      "Azure.Core.Foundations.InnerError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "One of a server-defined set of error codes."
          },
          "innererror": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Azure.Core.Foundations.InnerError"
              }
            ],
            "description": "Inner error."
          }
        },
        "description": "An object containing more specific information about the error. As per Azure REST API guidelines - https://aka.ms/AzureRestApiGuidelines#handling-errors."
      },
      "Azure.Core.Foundations.OperationState": {
        "anyOf": [
          {
            "type": "string",
            "enum": [
              "NotStarted",
              "Running",
              "Succeeded",
              "Failed",
              "Canceled"
            ]
          },
          {
            "type": "string"
          }
        ],
        "description": "Enum describing allowed operation states."
      },
      "Azure.Core.uuid": {
        "type": "string",
        "format": "uuid",
        "description": "Universally Unique Identifier"
      },
      "AzureAIAgentTarget": {
        "type": "object",
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_agent"
            ],
            "description": "The type of target, always `azure_ai_agent`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The unique identifier of the Azure AI agent."
          },
          "version": {
            "type": "string",
            "description": "The version of the Azure AI agent."
          },
          "tool_descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolDescription"
            },
            "description": "The parameters used to control the sampling behavior of the agent during text generation."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Target"
          }
        ],
        "description": "Represents a target specifying an Azure AI agent."
      },
      "AzureAIAgentTargetUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_agent"
            ],
            "description": "The type of target, always `azure_ai_agent`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The unique identifier of the Azure AI agent."
          },
          "version": {
            "type": "string",
            "description": "The version of the Azure AI agent."
          },
          "tool_descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolDescription"
            },
            "description": "The parameters used to control the sampling behavior of the agent during text generation."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TargetUpdate"
          }
        ],
        "description": "Represents a target specifying an Azure AI agent."
      },
      "AzureAIAssistantTarget": {
        "type": "object",
        "required": [
          "type",
          "tool_descriptions"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_assistant"
            ],
            "description": "The type of target, always `azure_ai_assistant`.",
            "x-stainless-const": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the Azure AI Assistant."
          },
          "tool_descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolDescription"
            },
            "description": "The descriptions of tools available to the assistant."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Target"
          }
        ],
        "description": "Represents a target specifying an Azure AI Assistant (Agent V1) endpoint, including its id."
      },
      "AzureAIAssistantTargetUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_assistant"
            ],
            "description": "The type of target, always `azure_ai_assistant`.",
            "x-stainless-const": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the Azure AI Assistant."
          },
          "tool_descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolDescription"
            },
            "description": "The descriptions of tools available to the assistant."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TargetUpdate"
          }
        ],
        "description": "Represents a target specifying an Azure AI Assistant (Agent V1) endpoint, including its id."
      },
      "AzureAIEvaluator": {
        "type": "object",
        "required": [
          "type",
          "name",
          "evaluator_name"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_evaluator"
            ],
            "description": "The object type, which is always `label_model`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "evaluator_name": {
            "type": "string",
            "description": "The name of the evaluator."
          },
          "evaluator_version": {
            "type": "string",
            "description": "The version of the evaluator."
          },
          "initialization_parameters": {
            "type": "object",
            "description": "The initialization parameters for the evaluation. Must support structured outputs."
          },
          "data_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The model to use for the evaluation. Must support structured outputs."
          }
        },
        "description": "Azure AI Evaluator definition for foundry evaluators."
      },
      "AzureAIModelTarget": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_model"
            ],
            "description": "The type of target, always `azure_ai_model`.",
            "x-stainless-const": true
          },
          "model": {
            "type": "string",
            "description": "The unique identifier of the Azure AI model."
          },
          "sampling_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelSamplingParams"
              }
            ],
            "description": "The parameters used to control the sampling behavior of the model during text generation."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Target"
          }
        ],
        "description": "Represents a target specifying an Azure AI model for operations requiring model selection."
      },
      "AzureAIModelTargetUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_model"
            ],
            "description": "The type of target, always `azure_ai_model`.",
            "x-stainless-const": true
          },
          "model": {
            "type": "string",
            "description": "The unique identifier of the Azure AI model."
          },
          "sampling_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelSamplingParamsUpdate"
              }
            ],
            "description": "The parameters used to control the sampling behavior of the model during text generation."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TargetUpdate"
          }
        ],
        "description": "Represents a target specifying an Azure AI model for operations requiring model selection."
      },
      "AzureAIRedTeam": {
        "type": "object",
        "required": [
          "type",
          "item_generation_params",
          "target"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_red_team"
            ],
            "description": "The type of data source. Always `azure_ai_red_team`.",
            "x-stainless-const": true
          },
          "item_generation_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedTeamItemGenerationParams"
              }
            ],
            "description": "The parameters for item generation."
          },
          "target": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Target"
              }
            ],
            "description": "The target configuration for the evaluation."
          }
        }
      },
      "AzureAIResponses": {
        "type": "object",
        "required": [
          "type",
          "item_generation_params",
          "max_runs_hourly",
          "event_configuration_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_responses"
            ],
            "description": "The type of data source, always `AzureAIResponses`.",
            "x-stainless-const": true
          },
          "item_generation_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContinuousEvalItemGenerationParams"
              }
            ],
            "description": "The parameters for item generation."
          },
          "max_runs_hourly": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of evaluation runs allowed per hour."
          },
          "event_configuration_id": {
            "type": "string",
            "description": "The event configuration name associated with this evaluation run."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EvalRunDataSource"
          }
        ],
        "description": "Represents a data source for evaluation runs that are specific to Continuous Evaluation scenarios."
      },
      "AzureAISearchAgentTool": {
        "type": "object",
        "required": [
          "type",
          "azure_ai_search"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_search"
            ],
            "description": "The object type, which is always 'azure_ai_search'."
          },
          "azure_ai_search": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AzureAISearchToolResource"
              }
            ],
            "description": "The azure ai search index resource."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "The input definition information for an Azure AI search tool as used to configure an agent."
      },
      "AzureAISearchIndex": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AzureSearch"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Index"
          }
        ],
        "description": "Azure AI Search Index Definition"
      },
      "AzureAISearchIndexUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AzureSearch"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/IndexUpdate"
          }
        ],
        "description": "Azure AI Search Index Definition"
      },
      "AzureAISearchQueryType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "simple",
              "semantic",
              "vector",
              "vector_simple_hybrid",
              "vector_semantic_hybrid"
            ]
          }
        ],
        "description": "Available query types for Azure AI Search tool."
      },
      "AzureAISearchToolResource": {
        "type": "object",
        "properties": {
          "indexes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AISearchIndexResource"
            },
            "maxItems": 1,
            "description": "The indices attached to this agent. There can be a maximum of 1 index\nresource attached to the agent."
          }
        },
        "description": "A set of index resources used by the `azure_ai_search` tool."
      },
      "AzureAISource": {
        "type": "object",
        "required": [
          "type",
          "scenario"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_source"
            ],
            "description": "The object type, which is always `label_model`.",
            "x-stainless-const": true
          },
          "scenario": {
            "type": "string",
            "enum": [
              "red_team",
              "responses",
              "traces"
            ],
            "description": "Data schema scenario."
          }
        }
      },
      "AzureFunctionAgentTool": {
        "type": "object",
        "required": [
          "type",
          "azure_function"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_function"
            ],
            "description": "The object type, which is always 'browser_automation'."
          },
          "azure_function": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AzureFunctionDefinition"
              }
            ],
            "description": "The Azure Function Tool definition."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "The input definition information for an Azure Function Tool, as used to configure an Agent."
      },
      "AzureFunctionBinding": {
        "type": "object",
        "required": [
          "type",
          "storage_queue"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "storage_queue"
            ],
            "description": "The type of binding, which is always 'storage_queue'."
          },
          "storage_queue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AzureFunctionStorageQueue"
              }
            ],
            "description": "Storage queue."
          }
        },
        "description": "The structure for keeping storage queue name and URI."
      },
      "AzureFunctionDefinition": {
        "type": "object",
        "required": [
          "function",
          "input_binding",
          "output_binding"
        ],
        "properties": {
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the function to be called."
              },
              "description": {
                "type": "string",
                "description": "A description of what the function does, used by the model to choose when and how to call the function."
              },
              "parameters": {
                "description": "The parameters the functions accepts, described as a JSON Schema object."
              }
            },
            "required": [
              "name",
              "parameters"
            ],
            "description": "The definition of azure function and its parameters."
          },
          "input_binding": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AzureFunctionBinding"
              }
            ],
            "description": "Input storage queue. The queue storage trigger runs a function as messages are added to it."
          },
          "output_binding": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AzureFunctionBinding"
              }
            ],
            "description": "Output storage queue. The function writes output to this queue when the input items are processed."
          }
        },
        "description": "The definition of Azure function."
      },
      "AzureFunctionStorageQueue": {
        "type": "object",
        "required": [
          "queue_service_endpoint",
          "queue_name"
        ],
        "properties": {
          "queue_service_endpoint": {
            "type": "string",
            "description": "URI to the Azure Storage Queue service allowing you to manipulate a queue."
          },
          "queue_name": {
            "type": "string",
            "description": "The name of an Azure function storage queue."
          }
        },
        "description": "The structure for keeping storage queue name and URI."
      },
      "AzureOpenAIModelConfiguration": {
        "type": "object",
        "required": [
          "type",
          "modelDeploymentName"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AzureOpenAIModel"
            ]
          },
          "modelDeploymentName": {
            "type": "string",
            "description": "Deployment name for AOAI model. Example: gpt-4o if in AIServices or connection based `connection_name/deployment_name` (e.g. `my-aoai-connection/gpt-4o`)."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/TargetConfig"
          }
        ],
        "description": "Azure OpenAI model configuration. The API version would be selected by the service for querying the model."
      },
      "BaseCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialType"
              }
            ],
            "description": "The type of credential used by the connection",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ApiKey": "#/components/schemas/ApiKeyCredentials",
            "AAD": "#/components/schemas/EntraIDCredentials",
            "CustomKeys": "#/components/schemas/CustomCredential",
            "SAS": "#/components/schemas/SASCredentials",
            "None": "#/components/schemas/NoAuthenticationCredentials",
            "AgenticIdentityToken": "#/components/schemas/AgenticIdentityCredentials"
          }
        },
        "description": "A base class for connection credentials"
      },
      "BingCustomSearchAgentTool": {
        "type": "object",
        "required": [
          "type",
          "bing_custom_search_preview"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bing_custom_search_preview"
            ],
            "description": "The object type, which is always 'bing_custom_search'."
          },
          "bing_custom_search_preview": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BingCustomSearchToolParameters"
              }
            ],
            "description": "The bing custom search tool parameters."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "The input definition information for a Bing custom search tool as used to configure an agent."
      },
      "BingCustomSearchConfiguration": {
        "type": "object",
        "required": [
          "project_connection_id",
          "instance_name"
        ],
        "properties": {
          "project_connection_id": {
            "type": "string",
            "description": "Project connection id for grounding with bing search"
          },
          "instance_name": {
            "type": "string",
            "description": "Name of the custom configuration instance given to config."
          },
          "market": {
            "type": "string",
            "description": "The market where the results come from."
          },
          "set_lang": {
            "type": "string",
            "description": "The language to use for user interface strings when calling Bing API."
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "The number of search results to return in the bing api response"
          },
          "freshness": {
            "type": "string",
            "description": "Filter search results by a specific time range. Accepted values: https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters"
          }
        },
        "description": "A bing custom search configuration."
      },
      "BingCustomSearchToolParameters": {
        "type": "object",
        "required": [
          "search_configurations"
        ],
        "properties": {
          "search_configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BingCustomSearchConfiguration"
            },
            "maxItems": 1,
            "description": "The project connections attached to this tool. There can be a maximum of 1 connection\nresource attached to the tool."
          }
        },
        "description": "The bing custom search tool parameters."
      },
      "BingGroundingAgentTool": {
        "type": "object",
        "required": [
          "type",
          "bing_grounding"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bing_grounding"
            ],
            "description": "The object type, which is always 'bing_grounding'."
          },
          "bing_grounding": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BingGroundingSearchToolParameters"
              }
            ],
            "description": "The bing grounding search tool parameters."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "The input definition information for a bing grounding search tool as used to configure an agent."
      },
      "BingGroundingSearchConfiguration": {
        "type": "object",
        "required": [
          "project_connection_id"
        ],
        "properties": {
          "project_connection_id": {
            "type": "string",
            "description": "Project connection id for grounding with bing search"
          },
          "market": {
            "type": "string",
            "description": "The market where the results come from."
          },
          "set_lang": {
            "type": "string",
            "description": "The language to use for user interface strings when calling Bing API."
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "The number of search results to return in the bing api response"
          },
          "freshness": {
            "type": "string",
            "description": "Filter search results by a specific time range. Accepted values: https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters"
          }
        },
        "description": "Search configuration for Bing Grounding"
      },
      "BingGroundingSearchToolParameters": {
        "type": "object",
        "required": [
          "search_configurations"
        ],
        "properties": {
          "search_configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BingGroundingSearchConfiguration"
            },
            "maxItems": 1,
            "description": "The search configurations attached to this tool. There can be a maximum of 1\nsearch configuration resource attached to the tool."
          }
        },
        "description": "The bing grounding search tool parameters."
      },
      "BlobReference": {
        "type": "object",
        "required": [
          "blobUri",
          "storageAccountArmId",
          "credential"
        ],
        "properties": {
          "blobUri": {
            "type": "string",
            "description": "Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path"
          },
          "storageAccountArmId": {
            "type": "string",
            "description": "ARM ID of the storage account to use."
          },
          "credential": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SasCredential"
              }
            ],
            "description": "Credential info to access the storage account."
          }
        },
        "description": "Blob reference details."
      },
      "BrowserAutomationAgentTool": {
        "type": "object",
        "required": [
          "type",
          "browser_automation_preview"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "browser_automation_preview"
            ],
            "description": "The object type, which is always 'browser_automation'."
          },
          "browser_automation_preview": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserAutomationToolParameters"
              }
            ],
            "description": "The Browser Automation Tool parameters."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "The input definition information for a Browser Automation Tool, as used to configure an Agent."
      },
      "BrowserAutomationToolConnectionParameters": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project connection to your Azure Playwright resource."
          }
        },
        "description": "Definition of input parameters for the connection used by the Browser Automation Tool."
      },
      "BrowserAutomationToolParameters": {
        "type": "object",
        "required": [
          "project_connection"
        ],
        "properties": {
          "project_connection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserAutomationToolConnectionParameters"
              }
            ],
            "description": "The project connection parameters associated with the Browser Automation Tool."
          }
        },
        "description": "Definition of input parameters for the Browser Automation Tool."
      },
      "CaptureStructuredOutputsTool": {
        "type": "object",
        "required": [
          "type",
          "outputs"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "capture_structured_outputs"
            ],
            "description": "The type of the tool. Always `capture_structured_outputs`."
          },
          "outputs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StructuredOutputDefinition"
              }
            ],
            "description": "The structured outputs to capture from the model."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "A tool for capturing structured outputs"
      },
      "ChartCoordinate": {
        "type": "object",
        "required": [
          "x",
          "y",
          "size"
        ],
        "properties": {
          "x": {
            "type": "integer",
            "format": "int32",
            "description": "X-axis coordinate."
          },
          "y": {
            "type": "integer",
            "format": "int32",
            "description": "Y-axis coordinate."
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "Size of the chart element."
          }
        },
        "description": "Coordinates for the analysis chart."
      },
      "ChatSummaryMemoryItem": {
        "type": "object",
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "chat_summary"
            ],
            "description": "The kind of the memory item."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/MemoryItem"
          }
        ],
        "description": "A memory item containing a summary extracted from conversations."
      },
      "ClusterInsightResult": {
        "type": "object",
        "required": [
          "summary",
          "clusters"
        ],
        "properties": {
          "summary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InsightSummary"
              }
            ],
            "description": "Summary of the insights report."
          },
          "clusters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InsightCluster"
            },
            "description": "List of clusters identified in the insights."
          },
          "coordinates": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChartCoordinate"
            },
            "description": "  Optional mapping of IDs to 2D coordinates used by the UX for visualization.\n\n  The map keys are string identifiers (for example, a cluster id or a sample id)\n  and the values are the coordinates and visual size for rendering on a 2D chart.\n\n  This property is omitted unless the client requests coordinates (for example,\n  by passing `includeCoordinates=true` as a query parameter).\n\n  Example:\n  {\n    \"cluster-1\": { \"x\": 12, \"y\": 34, \"size\": 8 },\n    \"sample-123\": { \"x\": 18, \"y\": 22, \"size\": 4 }\n  }\n\n  Coordinates are intended only for client-side visualization and do not\n  modify the canonical insights results."
          }
        },
        "description": "Insights from the cluster analysis."
      },
      "ClusterTokenUsage": {
        "type": "object",
        "required": [
          "inputTokenUsage",
          "outputTokenUsage",
          "totalTokenUsage"
        ],
        "properties": {
          "inputTokenUsage": {
            "type": "integer",
            "format": "int32",
            "description": "input token usage"
          },
          "outputTokenUsage": {
            "type": "integer",
            "format": "int32",
            "description": "output token usage"
          },
          "totalTokenUsage": {
            "type": "integer",
            "format": "int32",
            "description": "total token usage"
          }
        },
        "description": "Token usage for cluster analysis"
      },
      "CodeBasedEvaluatorDefinition": {
        "type": "object",
        "required": [
          "type",
          "code_text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "code"
            ]
          },
          "code_text": {
            "type": "string",
            "description": "Inline code text for the evaluator"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EvaluatorDefinition"
          }
        ],
        "description": "Code-based evaluator definition using python code"
      },
      "Connection": {
        "type": "object",
        "required": [
          "name",
          "id",
          "type",
          "target",
          "isDefault",
          "credentials",
          "metadata"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The friendly name of the connection, provided by the user.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for the connection, generated by the service",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectionType"
              }
            ],
            "description": "Category of the connection",
            "readOnly": true
          },
          "target": {
            "type": "string",
            "description": "The connection URL to be used for this service",
            "readOnly": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether the connection is tagged as the default connection of its type",
            "readOnly": true
          },
          "credentials": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseCredentials"
              }
            ],
            "description": "The credentials used by the connection",
            "readOnly": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata of the connection",
            "readOnly": true
          }
        },
        "description": "Response from the list and get connections operations"
      },
      "ConnectionType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "AzureOpenAI",
              "AzureBlob",
              "AzureStorageAccount",
              "CognitiveSearch",
              "CosmosDB",
              "ApiKey",
              "AppConfig",
              "AppInsights",
              "CustomKeys",
              "RemoteTool"
            ]
          }
        ],
        "description": "The Type (or category) of the connection"
      },
      "ContainerAppAgentDefinition": {
        "type": "object",
        "required": [
          "kind",
          "container_protocol_versions",
          "container_app_resource_id",
          "ingress_subdomain_suffix"
        ],
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "container_app"
            ]
          },
          "container_protocol_versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProtocolVersionRecord"
            },
            "description": "The protocols that the agent supports for ingress communication of the containers.",
            "example": [
              {
                "protocol": "responses",
                "version": "v0.1.1"
              },
              {
                "protocol": "a2a",
                "version": "v0.3.0"
              }
            ]
          },
          "container_app_resource_id": {
            "type": "string",
            "description": "The resource ID of the Azure Container App that hosts this agent. Not mutable across versions."
          },
          "ingress_subdomain_suffix": {
            "type": "string",
            "description": "The suffix to apply to the app subdomain when sending ingress to the agent. This can be a label (e.g., '---current'), a specific revision (e.g., '--0000001'), or empty to use the default endpoint for the container app.",
            "example": "--0000001"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AgentDefinition"
          }
        ],
        "description": "The container app agent definition."
      },
      "ContinuousEvalItemGenerationParams": {
        "type": "object",
        "required": [
          "type",
          "max_num_turns",
          "data_mapping",
          "source"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response_retrieval"
            ],
            "description": "The type of item generation parameters, always `ResponseRetrieval`.",
            "x-stainless-const": true
          },
          "max_num_turns": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of turns of chat history to evaluate."
          },
          "data_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Mapping from source fields to response_id field, required for retrieving chat history."
          },
          "source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileContentSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileIdSource"
              }
            ],
            "description": "The source from which JSONL content is read."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ItemGenerationParams"
          }
        ],
        "description": "Represents the parameters for continuous evaluation item generation."
      },
      "ContinuousEvaluationRuleAction": {
        "type": "object",
        "required": [
          "type",
          "evalId"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "continuousEvaluation"
            ]
          },
          "evalId": {
            "type": "string",
            "description": "Eval Id to add continuous evaluation runs to."
          },
          "maxHourlyRuns": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of evaluation runs allowed per hour."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EvaluationRuleAction"
          }
        ],
        "description": "Evaluation rule action for continuous evaluation."
      },
      "CosmosDBIndex": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CosmosDBNoSqlVectorStore"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Index"
          }
        ],
        "description": "CosmosDB Vector Store Index Definition"
      },
      "CosmosDBIndexUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CosmosDBNoSqlVectorStore"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/IndexUpdate"
          }
        ],
        "description": "CosmosDB Vector Store Index Definition"
      },
      "CreateAgentFromManifestRequest": {
        "type": "object",
        "required": [
          "name",
          "manifest_id",
          "parameter_values"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 63,
            "description": "The unique name that identifies the agent. Name can be used to retrieve/update/delete the agent.\n- Must start and end with alphanumeric characters, \n- Can contain hyphens in the middle\n- Must not exceed 63 characters."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "description": "A human-readable description of the agent."
          },
          "manifest_id": {
            "type": "string",
            "description": "The manifest ID to import the agent version from."
          },
          "parameter_values": {
            "type": "object",
            "additionalProperties": {},
            "description": "The inputs to the manifest that will result in a fully materialized Agent."
          }
        }
      },
      "CreateAgentRequest": {
        "type": "object",
        "required": [
          "name",
          "definition"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 63,
            "description": "The unique name that identifies the agent. Name can be used to retrieve/update/delete the agent.\n- Must start and end with alphanumeric characters, \n- Can contain hyphens in the middle\n- Must not exceed 63 characters."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "description": "A human-readable description of the agent."
          },
          "definition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentDefinition"
              }
            ],
            "description": "The agent definition. This can be a workflow, hosted agent, or a simple agent definition."
          }
        }
      },
      "CreateAgentVersionFromManifestRequest": {
        "type": "object",
        "required": [
          "manifest_id",
          "parameter_values"
        ],
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "description": "A human-readable description of the agent."
          },
          "manifest_id": {
            "type": "string",
            "description": "The manifest ID to import the agent version from."
          },
          "parameter_values": {
            "type": "object",
            "additionalProperties": {},
            "description": "The inputs to the manifest that will result in a fully materialized Agent."
          }
        }
      },
      "CreateAgentVersionRequest": {
        "type": "object",
        "required": [
          "definition"
        ],
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "description": "A human-readable description of the agent."
          },
          "definition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentDefinition"
              }
            ],
            "description": "The agent definition. This can be a workflow, hosted agent, or a simple agent definition."
          }
        }
      },
      "CreateEvalRequest": {
        "type": "object",
        "required": [
          "data_source_config",
          "testing_criteria"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the evaluation."
          },
          "metadata": {
            "$ref": "#/components/schemas/OpenAI.Metadata"
          },
          "data_source_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalCustomDataSourceConfig"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalLogsDataSourceConfig"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalStoredCompletionsDataSourceConfig"
              },
              {
                "$ref": "#/components/schemas/AzureAISource"
              }
            ],
            "description": "The configuration for the data source used for the evaluation runs. Dictates the schema of the data used in the evaluation."
          },
          "testing_criteria": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OpenAI.EvalGraderLabelModel"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EvalGraderStringCheck"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EvalGraderTextSimilarity"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EvalGraderPython"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EvalGraderScoreModel"
                },
                {
                  "$ref": "#/components/schemas/TaxonomyRedTeamItemGenerationParams"
                },
                {
                  "$ref": "#/components/schemas/SeedPromptsRedTeamItemGenerationParams"
                },
                {
                  "$ref": "#/components/schemas/RedTeamItemGenerationParams"
                },
                {
                  "$ref": "#/components/schemas/AzureAIEvaluator"
                }
              ]
            },
            "description": "A list of graders for all eval runs in this group. Graders can reference variables in the data source using double curly braces notation, like `{{item.variable_name}}`. To reference the model's output, use the `sample` namespace (ie, `{{sample.output_text}}`)."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of immutable 16 key-value pairs that can be attached to an object for storing additional information.\n    Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters."
          }
        },
        "title": "CreateEvalRequest"
      },
      "CreateEvalRunRequest": {
        "type": "object",
        "required": [
          "data_source"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the run."
          },
          "metadata": {
            "$ref": "#/components/schemas/OpenAI.Metadata"
          },
          "data_source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalJsonlRunDataSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalCompletionsRunDataSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalResponsesRunDataSource"
              },
              {
                "$ref": "#/components/schemas/AzureAIRedTeam"
              },
              {
                "$ref": "#/components/schemas/TargetCompletions"
              },
              {
                "$ref": "#/components/schemas/AzureAIResponses"
              },
              {
                "$ref": "#/components/schemas/TracesEvalRunDataSource"
              }
            ],
            "description": "Details about the run's data source."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of immutable 16 key-value pairs that can be attached to an object for storing additional information.\n    Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters."
          }
        },
        "title": "CreateEvalRunRequest"
      },
      "CreatedBy": {
        "type": "object",
        "properties": {
          "agent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentId"
              }
            ],
            "description": "The agent that created the item."
          },
          "response_id": {
            "type": "string",
            "description": "The response on which the item is created."
          }
        }
      },
      "CredentialType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "ApiKey",
              "AAD",
              "SAS",
              "CustomKeys",
              "None",
              "AgenticIdentityToken"
            ]
          }
        ],
        "description": "The credential type used by the connection"
      },
      "CronTrigger": {
        "type": "object",
        "required": [
          "type",
          "expression"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Cron"
            ]
          },
          "expression": {
            "type": "string",
            "description": "Cron expression that defines the schedule frequency."
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for the cron schedule.",
            "default": "UTC"
          },
          "startTime": {
            "type": "string",
            "description": "Start time for the cron schedule in ISO 8601 format."
          },
          "endTime": {
            "type": "string",
            "description": "End time for the cron schedule in ISO 8601 format."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Trigger"
          }
        ],
        "description": "Cron based trigger."
      },
      "CustomCredential": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CustomKeys"
            ],
            "description": "The credential type",
            "readOnly": true
          }
        },
        "additionalProperties": {
          "type": "string"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "Custom credential definition"
      },
      "DailyRecurrenceSchedule": {
        "type": "object",
        "required": [
          "type",
          "hours"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Daily"
            ],
            "description": "Daily recurrence type."
          },
          "hours": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Hours for the recurrence schedule."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurrenceSchedule"
          }
        ],
        "description": "Daily recurrence schedule."
      },
      "DatasetType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "uri_file",
              "uri_folder"
            ]
          }
        ],
        "description": "Enum to determine the type of data."
      },
      "DatasetVersion": {
        "type": "object",
        "required": [
          "dataUri",
          "type",
          "name",
          "version"
        ],
        "properties": {
          "dataUri": {
            "type": "string",
            "minLength": 1,
            "pattern": "[a-zA-Z0-9_]",
            "description": "URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetType"
              }
            ],
            "description": "Dataset type"
          },
          "isReference": {
            "type": "boolean",
            "description": "Indicates if the dataset holds a reference to the storage, or the dataset manages storage itself. If true, the underlying data will not be deleted when the dataset version is deleted",
            "readOnly": true
          },
          "connectionName": {
            "type": "string",
            "description": "The Azure Storage Account connection name. Required if startPendingUploadVersion was not called before creating the Dataset"
          },
          "id": {
            "type": "string",
            "description": "Asset ID, a unique identifier for the asset",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the resource",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "description": "The version of the resource",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "uri_file": "#/components/schemas/FileDatasetVersion",
            "uri_folder": "#/components/schemas/FolderDatasetVersion"
          }
        },
        "description": "DatasetVersion Definition"
      },
      "DatasetVersionUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetType"
              }
            ],
            "description": "Dataset type"
          },
          "description": {
            "type": "string",
            "description": "The asset description text."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tag dictionary. Tags can be added, removed, and updated."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "uri_file": "#/components/schemas/FileDatasetVersionUpdate",
            "uri_folder": "#/components/schemas/FolderDatasetVersionUpdate"
          }
        },
        "description": "DatasetVersion Definition"
      },
      "DayOfWeek": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ]
          }
        ],
        "description": "Days of the week for recurrence schedule."
      },
      "DeleteAgentResponse": {
        "type": "object",
        "required": [
          "object",
          "name",
          "deleted"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "agent.deleted"
            ],
            "description": "The object type. Always 'agent.deleted'."
          },
          "name": {
            "type": "string",
            "description": "The name of the agent."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the agent was successfully deleted."
          }
        },
        "description": "A deleted agent Object"
      },
      "DeleteAgentVersionResponse": {
        "type": "object",
        "required": [
          "object",
          "name",
          "version",
          "deleted"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "agent.version.deleted"
            ],
            "description": "The object type. Always 'agent.deleted'."
          },
          "name": {
            "type": "string",
            "description": "The name of the agent."
          },
          "version": {
            "type": "string",
            "description": "The version identifier of the agent."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the agent was successfully deleted."
          }
        },
        "description": "A deleted agent version Object"
      },
      "DeleteEvalResponse": {
        "type": "object",
        "required": [
          "object",
          "eval_id",
          "deleted"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "eval.deleted"
            ],
            "description": "The object type. Always 'eval.deleted'."
          },
          "eval_id": {
            "type": "string",
            "description": "id of the eval."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the eval was successfully deleted."
          }
        },
        "description": "A deleted evaluation Object"
      },
      "DeleteEvalRunResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "eval.deleted"
            ],
            "description": "The object type. Always 'eval.deleted'."
          },
          "run_id": {
            "type": "string",
            "description": "id of the eval."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the eval was successfully deleted."
          }
        },
        "description": "A deleted evaluation run Object."
      },
      "DeleteMemoryStoreResponse": {
        "type": "object",
        "required": [
          "object",
          "name",
          "deleted"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "memory_store.deleted"
            ],
            "description": "The object type. Always 'memory_store.deleted'."
          },
          "name": {
            "type": "string",
            "description": "The name of the memory store."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the memory store was successfully deleted."
          }
        }
      },
      "DeleteResponseResult": {
        "type": "object",
        "required": [
          "id",
          "object",
          "deleted"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The operation ID."
          },
          "object": {
            "type": "string",
            "enum": [
              "response"
            ],
            "description": "Always return 'response'."
          },
          "deleted": {
            "type": "boolean",
            "enum": [
              true
            ],
            "description": "Always return true"
          }
        },
        "description": "The result of a delete response operation."
      },
      "Deployment": {
        "type": "object",
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentType"
              }
            ],
            "description": "The type of the deployment"
          },
          "name": {
            "type": "string",
            "description": "Name of the deployment",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ModelDeployment": "#/components/schemas/ModelDeployment"
          }
        },
        "description": "Model Deployment Definition"
      },
      "DeploymentType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "ModelDeployment"
            ]
          }
        ]
      },
      "EntraIDCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AAD"
            ],
            "description": "The credential type",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "Entra ID credential definition"
      },
      "Eval": {
        "type": "object",
        "required": [
          "object",
          "id",
          "name",
          "data_source_config",
          "testing_criteria",
          "created_at",
          "metadata"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "eval"
            ],
            "description": "The object type.",
            "x-stainless-const": true,
            "default": "eval"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the evaluation."
          },
          "name": {
            "type": "string",
            "description": "The name of the evaluation."
          },
          "data_source_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalCustomDataSourceConfig"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalLogsDataSourceConfig"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalStoredCompletionsDataSourceConfig"
              },
              {
                "$ref": "#/components/schemas/AzureAISource"
              }
            ],
            "description": "Configuration of data sources used in runs of the evaluation."
          },
          "testing_criteria": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OpenAI.EvalGraderLabelModel"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EvalGraderStringCheck"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EvalGraderTextSimilarity"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EvalGraderPython"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EvalGraderScoreModel"
                },
                {
                  "$ref": "#/components/schemas/TaxonomyRedTeamItemGenerationParams"
                },
                {
                  "$ref": "#/components/schemas/SeedPromptsRedTeamItemGenerationParams"
                },
                {
                  "$ref": "#/components/schemas/RedTeamItemGenerationParams"
                },
                {
                  "$ref": "#/components/schemas/AzureAIEvaluator"
                }
              ]
            },
            "description": "A list of testing criteria."
          },
          "created_at": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "description": "The Unix timestamp (in seconds) for when the eval was created."
          },
          "metadata": {
            "$ref": "#/components/schemas/OpenAI.Metadata"
          },
          "modified_at": {
            "allOf": [
              {
                "$ref": "#/components/schemas/integer"
              }
            ],
            "description": "Unix timestamp (in seconds) when the evaluation run was last modified."
          },
          "created_by": {
            "type": "string",
            "description": "the name of the person who created the run."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of immutable 16 key-value pairs that can be attached to an object for storing additional information.\n    Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters."
          }
        },
        "description": "An Eval object with a data source config and testing criteria.\nAn Eval represents a task to be done for your LLM integration.\nLike:\n- Improve the quality of my chatbot\n- See how well my chatbot handles customer support\n- Check if o4-mini is better at my usecase than gpt-4o",
        "title": "Eval",
        "x-oaiMeta": {
          "name": "The eval object",
          "group": "evals",
          "example": "{\n  \"object\": \"eval\",\n  \"id\": \"eval_67abd54d9b0081909a86353f6fb9317a\",\n  \"data_source_config\": {\n    \"type\": \"custom\",\n    \"item_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"label\": {\"type\": \"string\"},\n      },\n      \"required\": [\"label\"]\n    },\n    \"include_sample_schema\": true\n  },\n  \"testing_criteria\": [\n    {\n      \"name\": \"My string check grader\",\n      \"type\": \"string_check\",\n      \"input\": \"{{sample.output_text}}\",\n      \"reference\": \"{{item.label}}\",\n      \"operation\": \"eq\",\n    }\n  ],\n  \"name\": \"External Data Eval\",\n  \"created_at\": 1739314509,\n  \"metadata\": {\n    \"test\": \"synthetics\",\n  }\n}\n"
        }
      },
      "EvalCompareReport": {
        "type": "object",
        "required": [
          "type",
          "comparisons",
          "method"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "EvaluationComparison"
            ],
            "description": "The type of insights result."
          },
          "comparisons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvalRunResultComparison"
            },
            "description": "Comparison results for each treatment run against the baseline."
          },
          "method": {
            "type": "string",
            "description": "The statistical method used for comparison."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/InsightResult"
          }
        ],
        "description": "Insights from the evaluation comparison."
      },
      "EvalResult": {
        "type": "object",
        "required": [
          "name",
          "type",
          "score",
          "passed"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the check"
          },
          "type": {
            "type": "string",
            "description": "type of the check"
          },
          "score": {
            "type": "number",
            "format": "float",
            "description": "score"
          },
          "passed": {
            "type": "boolean",
            "description": "indicates if the check passed or failed"
          }
        },
        "description": "Result of the evaluation."
      },
      "EvalRun": {
        "type": "object",
        "required": [
          "object",
          "id",
          "eval_id",
          "status",
          "model",
          "name",
          "created_at",
          "report_url",
          "result_counts",
          "per_model_usage",
          "per_testing_criteria_results",
          "data_source",
          "metadata",
          "error"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "eval.run"
            ],
            "description": "The type of the object. Always \"eval.run\".",
            "x-stainless-const": true,
            "default": "eval.run"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the evaluation run."
          },
          "eval_id": {
            "type": "string",
            "description": "The identifier of the associated evaluation."
          },
          "status": {
            "type": "string",
            "description": "The status of the evaluation run."
          },
          "model": {
            "type": "string",
            "description": "The model that is evaluated, if applicable."
          },
          "name": {
            "type": "string",
            "description": "The name of the evaluation run."
          },
          "created_at": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "description": "Unix timestamp (in seconds) when the evaluation run was created."
          },
          "report_url": {
            "type": "string",
            "description": "The URL to the rendered evaluation run report on the UI dashboard."
          },
          "result_counts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalRunResultCounts"
              }
            ],
            "description": "Counters summarizing the outcomes of the evaluation run."
          },
          "per_model_usage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.EvalRunPerModelUsage"
            },
            "description": "Usage statistics for each model during the evaluation run."
          },
          "per_testing_criteria_results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.EvalRunPerTestingCriteriaResults"
            },
            "description": "Results per testing criteria applied during the evaluation run."
          },
          "data_source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalJsonlRunDataSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalCompletionsRunDataSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalResponsesRunDataSource"
              },
              {
                "$ref": "#/components/schemas/AzureAIRedTeam"
              },
              {
                "$ref": "#/components/schemas/TargetCompletions"
              },
              {
                "$ref": "#/components/schemas/AzureAIResponses"
              },
              {
                "$ref": "#/components/schemas/TracesEvalRunDataSource"
              }
            ],
            "description": "Information about the run's data source."
          },
          "metadata": {
            "$ref": "#/components/schemas/OpenAI.Metadata"
          },
          "error": {
            "$ref": "#/components/schemas/OpenAI.EvalApiError"
          },
          "modified_at": {
            "allOf": [
              {
                "$ref": "#/components/schemas/integer"
              }
            ],
            "description": "Unix timestamp (in seconds) when the evaluation run was last modified."
          },
          "created_by": {
            "type": "string",
            "description": "the name of the person who created the run."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of immutable 16 key-value pairs that can be attached to an object for storing additional information.\n    Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters."
          }
        },
        "description": "A schema representing an evaluation run.",
        "title": "EvalRun",
        "x-oaiMeta": {
          "name": "The eval run object",
          "group": "evals",
          "example": "{\n  \"object\": \"eval.run\",\n  \"id\": \"evalrun_67e57965b480819094274e3a32235e4c\",\n  \"eval_id\": \"eval_67e579652b548190aaa83ada4b125f47\",\n  \"report_url\": \"https://platform.openai.com/evaluations/eval_67e579652b548190aaa83ada4b125f47?run_id=evalrun_67e57965b480819094274e3a32235e4c\",\n  \"status\": \"queued\",\n  \"model\": \"gpt-4o-mini\",\n  \"name\": \"gpt-4o-mini\",\n  \"created_at\": 1743092069,\n  \"result_counts\": {\n    \"total\": 0,\n    \"errored\": 0,\n    \"failed\": 0,\n    \"passed\": 0\n  },\n  \"per_model_usage\": null,\n  \"per_testing_criteria_results\": null,\n  \"data_source\": {\n    \"type\": \"completions\",\n    \"source\": {\n      \"type\": \"file_content\",\n      \"content\": [\n        {\n          \"item\": {\n            \"input\": \"Tech Company Launches Advanced Artificial Intelligence Platform\",\n            \"ground_truth\": \"Technology\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"Central Bank Increases Interest Rates Amid Inflation Concerns\",\n            \"ground_truth\": \"Markets\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"International Summit Addresses Climate Change Strategies\",\n            \"ground_truth\": \"World\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"Major Retailer Reports Record-Breaking Holiday Sales\",\n            \"ground_truth\": \"Business\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"National Team Qualifies for World Championship Finals\",\n            \"ground_truth\": \"Sports\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"Stock Markets Rally After Positive Economic Data Released\",\n            \"ground_truth\": \"Markets\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"Global Manufacturer Announces Merger with Competitor\",\n            \"ground_truth\": \"Business\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"Breakthrough in Renewable Energy Technology Unveiled\",\n            \"ground_truth\": \"Technology\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"World Leaders Sign Historic Climate Agreement\",\n            \"ground_truth\": \"World\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"Professional Athlete Sets New Record in Championship Event\",\n            \"ground_truth\": \"Sports\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"Financial Institutions Adapt to New Regulatory Requirements\",\n            \"ground_truth\": \"Business\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"Tech Conference Showcases Advances in Artificial Intelligence\",\n            \"ground_truth\": \"Technology\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"Global Markets Respond to Oil Price Fluctuations\",\n            \"ground_truth\": \"Markets\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"International Cooperation Strengthened Through New Treaty\",\n            \"ground_truth\": \"World\"\n          }\n        },\n        {\n          \"item\": {\n            \"input\": \"Sports League Announces Revised Schedule for Upcoming Season\",\n            \"ground_truth\": \"Sports\"\n          }\n        }\n      ]\n    },\n    \"input_messages\": {\n      \"type\": \"template\",\n      \"template\": [\n        {\n          \"type\": \"message\",\n          \"role\": \"developer\",\n          \"content\": {\n            \"type\": \"input_text\",\n            \"text\": \"Categorize a given news headline into one of the following topics: Technology, Markets, World, Business, or Sports.\\n\\n# Steps\\n\\n1. Analyze the content of the news headline to understand its primary focus.\\n2. Extract the subject matter, identifying any key indicators or keywords.\\n3. Use the identified indicators to determine the most suitable category out of the five options: Technology, Markets, World, Business, or Sports.\\n4. Ensure only one category is selected per headline.\\n\\n# Output Format\\n\\nRespond with the chosen category as a single word. For instance: \\\"Technology\\\", \\\"Markets\\\", \\\"World\\\", \\\"Business\\\", or \\\"Sports\\\".\\n\\n# Examples\\n\\n**Input**: \\\"Apple Unveils New iPhone Model, Featuring Advanced AI Features\\\"  \\n**Output**: \\\"Technology\\\"\\n\\n**Input**: \\\"Global Stocks Mixed as Investors Await Central Bank Decisions\\\"  \\n**Output**: \\\"Markets\\\"\\n\\n**Input**: \\\"War in Ukraine: Latest Updates on Negotiation Status\\\"  \\n**Output**: \\\"World\\\"\\n\\n**Input**: \\\"Microsoft in Talks to Acquire Gaming Company for $2 Billion\\\"  \\n**Output**: \\\"Business\\\"\\n\\n**Input**: \\\"Manchester United Secures Win in Premier League Football Match\\\"  \\n**Output**: \\\"Sports\\\" \\n\\n# Notes\\n\\n- If the headline appears to fit into more than one category, choose the most dominant theme.\\n- Keywords or phrases such as \\\"stocks\\\", \\\"company acquisition\\\", \\\"match\\\", or technological brands can be good indicators for classification.\\n\"\n          }\n        },\n        {\n          \"type\": \"message\",\n          \"role\": \"user\",\n          \"content\": {\n            \"type\": \"input_text\",\n            \"text\": \"{{item.input}}\"\n          }\n        }\n      ]\n    },\n    \"model\": \"gpt-4o-mini\",\n    \"sampling_params\": {\n      \"seed\": 42,\n      \"temperature\": 1.0,\n      \"top_p\": 1.0,\n      \"max_completions_tokens\": 2048\n    }\n  },\n  \"error\": null,\n  \"metadata\": {}\n}\n"
        }
      },
      "EvalRunDataSource": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The data source type discriminator."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "azure_ai_responses": "#/components/schemas/AzureAIResponses",
            "azure_ai_traces": "#/components/schemas/TracesEvalRunDataSource"
          }
        },
        "description": "Base class for run data sources with discriminator support."
      },
      "EvalRunOutputItem": {
        "type": "object",
        "required": [
          "object",
          "id",
          "run_id",
          "eval_id",
          "created_at",
          "status",
          "datasource_item_id",
          "datasource_item",
          "results",
          "sample"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "eval.run.output_item"
            ],
            "description": "The type of the object. Always \"eval.run.output_item\".",
            "x-stainless-const": true,
            "default": "eval.run.output_item"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the evaluation run output item."
          },
          "run_id": {
            "type": "string",
            "description": "The identifier of the evaluation run associated with this output item."
          },
          "eval_id": {
            "type": "string",
            "description": "The identifier of the evaluation group."
          },
          "created_at": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "description": "Unix timestamp (in seconds) when the evaluation run was created."
          },
          "status": {
            "type": "string",
            "description": "The status of the evaluation run."
          },
          "datasource_item_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "description": "The identifier for the data source item."
          },
          "datasource_item": {
            "type": "object",
            "additionalProperties": {},
            "description": "Details of the input data source item."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvalRunOutputItemResult"
            },
            "description": "A list of grader results for this output item."
          },
          "sample": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalRunOutputItemSample"
              }
            ],
            "description": "A sample containing the input and output of the evaluation run."
          }
        },
        "description": "A schema representing an evaluation run output item.",
        "title": "EvalRunOutputItem",
        "x-oaiMeta": {
          "name": "The eval run output item object",
          "group": "evals",
          "example": "{\n  \"object\": \"eval.run.output_item\",\n  \"id\": \"outputitem_67abd55eb6548190bb580745d5644a33\",\n  \"run_id\": \"evalrun_67abd54d60ec8190832b46859da808f7\",\n  \"eval_id\": \"eval_67abd54d9b0081909a86353f6fb9317a\",\n  \"created_at\": 1739314509,\n  \"status\": \"pass\",\n  \"datasource_item_id\": 137,\n  \"datasource_item\": {\n      \"teacher\": \"To grade essays, I only check for style, content, and grammar.\",\n      \"student\": \"I am a student who is trying to write the best essay.\"\n  },\n  \"results\": [\n    {\n      \"name\": \"String Check Grader\",\n      \"type\": \"string-check-grader\",\n      \"score\": 1.0,\n      \"passed\": true,\n    }\n  ],\n  \"sample\": {\n    \"input\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are an evaluator bot...\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"You are assessing...\"\n      }\n    ],\n    \"output\": [\n      {\n        \"role\": \"assistant\",\n        \"content\": \"The rubric is not clear nor concise.\"\n      }\n    ],\n    \"finish_reason\": \"stop\",\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"usage\": {\n      \"total_tokens\": 521,\n      \"completion_tokens\": 2,\n      \"prompt_tokens\": 519,\n      \"cached_tokens\": 0\n    },\n    \"error\": null,\n    \"temperature\": 1.0,\n    \"max_completion_tokens\": 2048,\n    \"top_p\": 1.0,\n    \"seed\": 42\n  }\n}\n"
        }
      },
      "EvalRunOutputItemResult": {
        "type": "object",
        "required": [
          "name",
          "score",
          "passed"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "type": {
            "type": "string",
            "description": "The grader type (for example, \"string-check-grader\")."
          },
          "score": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "description": "The numeric score produced by the grader."
          },
          "passed": {
            "type": "boolean",
            "description": "Whether the grader considered the output a pass."
          },
          "sample": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "description": "Optional sample or intermediate data produced by the grader."
          },
          "metric": {
            "type": "string",
            "description": "The name of the metric (e.g., \"fluency\", \"f1_score\")."
          },
          "label": {
            "type": "string",
            "description": "The label associated with the test criteria metric (e.g., \"pass\", \"fail\", \"good\", \"bad\")."
          },
          "threshold": {
            "type": "number",
            "format": "float",
            "description": "The threshold used to determine pass/fail for this test criteria, if it is numerical."
          },
          "reason": {
            "type": "string",
            "description": "The reason for the test criteria metric."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional details about the test criteria metric."
          }
        },
        "description": "A single grader result for an evaluation run output item.",
        "title": "EvalRunOutputItemResult"
      },
      "EvalRunResultCompareItem": {
        "type": "object",
        "required": [
          "treatmentRunId",
          "treatmentRunSummary",
          "deltaEstimate",
          "pValue",
          "treatmentEffect"
        ],
        "properties": {
          "treatmentRunId": {
            "type": "string",
            "description": "The treatment run ID."
          },
          "treatmentRunSummary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalRunResultSummary"
              }
            ],
            "description": "Summary statistics of the treatment run."
          },
          "deltaEstimate": {
            "type": "number",
            "format": "float",
            "description": "Estimated difference between treatment and baseline."
          },
          "pValue": {
            "type": "number",
            "format": "float",
            "description": "P-value for the treatment effect."
          },
          "treatmentEffect": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TreatmentEffectType"
              }
            ],
            "description": "Type of treatment effect."
          }
        },
        "description": "Metric comparison for a treatment against the baseline."
      },
      "EvalRunResultComparison": {
        "type": "object",
        "required": [
          "testingCriteria",
          "metric",
          "evaluator",
          "baselineRunSummary",
          "compareItems"
        ],
        "properties": {
          "testingCriteria": {
            "type": "string",
            "description": "Name of the testing criteria."
          },
          "metric": {
            "type": "string",
            "description": "Metric being evaluated."
          },
          "evaluator": {
            "type": "string",
            "description": "Name of the evaluator for this testing criteria."
          },
          "baselineRunSummary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalRunResultSummary"
              }
            ],
            "description": "Summary statistics of the baseline run."
          },
          "compareItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvalRunResultCompareItem"
            },
            "description": "List of comparison results for each treatment run."
          }
        },
        "description": "Comparison results for treatment runs against the baseline."
      },
      "EvalRunResultSummary": {
        "type": "object",
        "required": [
          "runId",
          "sampleCount",
          "average",
          "standardDeviation"
        ],
        "properties": {
          "runId": {
            "type": "string",
            "description": "The evaluation run ID."
          },
          "sampleCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of samples in the evaluation run."
          },
          "average": {
            "type": "number",
            "format": "float",
            "description": "Average value of the metric in the evaluation run."
          },
          "standardDeviation": {
            "type": "number",
            "format": "float",
            "description": "Standard deviation of the metric in the evaluation run."
          }
        },
        "description": "Summary statistics of a metric in an evaluation run."
      },
      "EvaluationComparisonRequest": {
        "type": "object",
        "required": [
          "type",
          "evalId",
          "baselineRunId",
          "treatmentRunIds"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "EvaluationComparison"
            ],
            "description": "The type of request."
          },
          "evalId": {
            "type": "string",
            "description": "Identifier for the evaluation."
          },
          "baselineRunId": {
            "type": "string",
            "description": "The baseline run ID for comparison."
          },
          "treatmentRunIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of treatment run IDs for comparison."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/InsightRequest"
          }
        ],
        "description": "Evaluation Comparison Request"
      },
      "EvaluationResultSample": {
        "type": "object",
        "required": [
          "type",
          "evaluationResult"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "EvaluationResultSample"
            ],
            "description": "Evaluation Result Sample Type"
          },
          "evaluationResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalResult"
              }
            ],
            "description": "Evaluation result for the analysis sample."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/InsightSample"
          }
        ],
        "description": "A sample from the evaluation result."
      },
      "EvaluationRule": {
        "type": "object",
        "required": [
          "id",
          "action",
          "eventType",
          "enabled",
          "systemData"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the evaluation rule.",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Display Name for the evaluation rule."
          },
          "description": {
            "type": "string",
            "description": "Description for the evaluation rule."
          },
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationRuleAction"
              }
            ],
            "description": "Definition of the evaluation rule action."
          },
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationRuleFilter"
              }
            ],
            "description": "Filter condition of the evaluation rule."
          },
          "eventType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationRuleEventType"
              }
            ],
            "description": "Event type that the evaluation rule applies to."
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether the evaluation rule is enabled. Default is true."
          },
          "systemData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "System metadata for the evaluation rule.",
            "readOnly": true
          }
        },
        "description": "Evaluation rule model."
      },
      "EvaluationRuleAction": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationRuleActionType"
              }
            ],
            "description": "Type of the evaluation action."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "continuousEvaluation": "#/components/schemas/ContinuousEvaluationRuleAction",
            "humanEvaluation": "#/components/schemas/HumanEvaluationRuleAction"
          }
        },
        "description": "Evaluation action model."
      },
      "EvaluationRuleActionType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "continuousEvaluation",
              "humanEvaluation"
            ]
          }
        ],
        "description": "Type of the evaluation action."
      },
      "EvaluationRuleEventType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "response.completed",
              "manual"
            ]
          }
        ],
        "description": "Type of the evaluation rule event."
      },
      "EvaluationRuleFilter": {
        "type": "object",
        "required": [
          "agentName"
        ],
        "properties": {
          "agentName": {
            "type": "string",
            "description": "Filter by agent name."
          }
        },
        "description": "Evaluation filter model."
      },
      "EvaluationRunClusterInsightResult": {
        "type": "object",
        "required": [
          "type",
          "clusterInsight"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "EvaluationRunClusterInsight"
            ],
            "description": "The type of insights result."
          },
          "clusterInsight": {
            "$ref": "#/components/schemas/ClusterInsightResult"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/InsightResult"
          }
        ],
        "description": "Insights from the evaluation run cluster analysis."
      },
      "EvaluationRunClusterInsightsRequest": {
        "type": "object",
        "required": [
          "type",
          "evalId",
          "runIds"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "EvaluationRunClusterInsight"
            ],
            "description": "The type of insights request."
          },
          "evalId": {
            "type": "string",
            "description": "Evaluation Id for the insights."
          },
          "runIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of evaluation run IDs for the insights."
          },
          "modelConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InsightModelConfiguration"
              }
            ],
            "description": "Configuration of the model used in the insight generation."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/InsightRequest"
          }
        ],
        "description": "Insights on set of Evaluation Results"
      },
      "EvaluationScheduleTask": {
        "type": "object",
        "required": [
          "type",
          "evalId",
          "evalRun"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Evaluation"
            ]
          },
          "evalId": {
            "type": "string",
            "description": "Identifier of the evaluation group."
          },
          "evalRun": {
            "type": "object",
            "description": "The evaluation run payload."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleTask"
          }
        ],
        "description": "Evaluation task for the schedule."
      },
      "EvaluationTaxonomy": {
        "type": "object",
        "required": [
          "name",
          "version",
          "taxonomyInput"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Asset ID, a unique identifier for the asset",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the resource",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "description": "The version of the resource",
            "readOnly": true
          },
          "taxonomyInput": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationTaxonomyInput"
              }
            ],
            "description": "Input configuration for the evaluation taxonomy."
          },
          "taxonomyCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxonomyCategory"
            },
            "description": "List of taxonomy categories."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional properties for the evaluation taxonomy."
          }
        },
        "description": "Evaluation Taxonomy Definition"
      },
      "EvaluationTaxonomyCreateOrUpdate": {
        "type": "object",
        "required": [
          "taxonomyInput"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "The asset description text."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tag dictionary. Tags can be added, removed, and updated."
          },
          "taxonomyInput": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationTaxonomyInput"
              }
            ],
            "description": "Input configuration for the evaluation taxonomy."
          },
          "taxonomyCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxonomyCategory"
            },
            "description": "List of taxonomy categories."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional properties for the evaluation taxonomy."
          }
        },
        "description": "Evaluation Taxonomy Definition"
      },
      "EvaluationTaxonomyInput": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationTaxonomyInputType"
              }
            ],
            "description": "Input type of the evaluation taxonomy."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "agent": "#/components/schemas/AgentTaxonomyInput"
          }
        },
        "description": "Input configuration for the evaluation taxonomy."
      },
      "EvaluationTaxonomyInputType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "agent",
              "policy"
            ]
          }
        ],
        "description": "Type of the evaluation taxonomy input."
      },
      "EvaluationTaxonomyInputUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationTaxonomyInputType"
              }
            ],
            "description": "Input type of the evaluation taxonomy."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "agent": "#/components/schemas/AgentTaxonomyInputUpdate"
          }
        },
        "description": "Input configuration for the evaluation taxonomy."
      },
      "EvaluationTaxonomyUpdate": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The asset description text."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tag dictionary. Tags can be added, removed, and updated."
          },
          "taxonomyInput": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationTaxonomyInputUpdate"
              }
            ],
            "description": "Input configuration for the evaluation taxonomy."
          },
          "taxonomyCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxonomyCategory"
            },
            "description": "List of taxonomy categories."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional properties for the evaluation taxonomy."
          }
        },
        "description": "Evaluation Taxonomy Definition"
      },
      "EvaluatorCategory": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "quality",
              "safety",
              "agents"
            ]
          }
        ],
        "description": "The category of the evaluator"
      },
      "EvaluatorDefinition": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorDefinitionType"
              }
            ],
            "description": "The type of evaluator definition"
          },
          "init_parameters": {
            "description": "The JSON schema (Draft 2020-12) for the evaluator's input parameters. This includes parameters like type, properties, required."
          },
          "data_schema": {
            "description": "The JSON schema (Draft 2020-12) for the evaluator's input data. This includes parameters like type, properties, required."
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EvaluatorMetric"
            },
            "description": "List of output metrics produced by this evaluator"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "code": "#/components/schemas/CodeBasedEvaluatorDefinition",
            "prompt": "#/components/schemas/PromptBasedEvaluatorDefinition"
          }
        },
        "description": "Base evaluator configuration with discriminator"
      },
      "EvaluatorDefinitionType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "prompt",
              "code",
              "prompt_and_code",
              "service",
              "openai_graders"
            ]
          }
        ],
        "description": "The type of evaluator definition"
      },
      "EvaluatorMetric": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorMetricType"
              }
            ],
            "description": "Type of the metric."
          },
          "desirable_direction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorMetricDirection"
              }
            ],
            "description": "It indicates whether a higher value is better or a lower value is better for this metric."
          },
          "min_value": {
            "type": "number",
            "format": "float",
            "description": "Minimum value for the metric"
          },
          "max_value": {
            "type": "number",
            "format": "float",
            "description": "Maximum value for the metric. If not specified, it is assumed to be unbounded."
          },
          "is_primary": {
            "type": "boolean",
            "description": "Indicates if this metric is primary when there are multiple metrics."
          }
        },
        "description": "Evaluator Metric"
      },
      "EvaluatorMetricDirection": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "increase",
              "decrease",
              "neutral"
            ]
          }
        ],
        "description": "The direction of the metric indicating whether a higher value is better, a lower value is better, or neutral"
      },
      "EvaluatorMetricType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "ordinal",
              "continuous",
              "boolean"
            ]
          }
        ],
        "description": "The type of the evaluator"
      },
      "EvaluatorType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "builtin",
              "custom"
            ]
          }
        ],
        "description": "The type of the evaluator"
      },
      "EvaluatorVersion": {
        "type": "object",
        "required": [
          "evaluator_type",
          "categories",
          "definition",
          "created_by",
          "created_at",
          "modified_at",
          "name",
          "version"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Display Name for evaluator. It helps to find the evaluator easily in AI Foundry. It does not need to be unique."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata about the evaluator"
          },
          "evaluator_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorType"
              }
            ],
            "description": "The type of the evaluator"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvaluatorCategory"
            },
            "description": "The categories of the evaluator"
          },
          "definition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorDefinition"
              }
            ],
            "description": "Definition of the evaluator"
          },
          "created_by": {
            "type": "string",
            "description": "Creator of the evaluator",
            "readOnly": true
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "description": "Creation date/time of the evaluator",
            "readOnly": true
          },
          "modified_at": {
            "type": "integer",
            "format": "int64",
            "description": "Last modified date/time of the evaluator",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Asset ID, a unique identifier for the asset",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the resource",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "description": "The version of the resource",
            "readOnly": true
          }
        },
        "description": "Evaluator Definition"
      },
      "FabricDataAgentToolParameters": {
        "type": "object",
        "properties": {
          "project_connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolProjectConnection"
            },
            "maxItems": 1,
            "description": "The project connections attached to this tool. There can be a maximum of 1 connection\nresource attached to the tool."
          }
        },
        "description": "The fabric data agent tool parameters."
      },
      "FileDatasetVersion": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "uri_file"
            ],
            "description": "Dataset type"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetVersion"
          }
        ],
        "description": "FileDatasetVersion Definition"
      },
      "FileDatasetVersionUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "uri_file"
            ],
            "description": "Dataset type"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetVersionUpdate"
          }
        ],
        "description": "FileDatasetVersion Definition"
      },
      "FolderDatasetVersion": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "uri_folder"
            ],
            "description": "Dataset type"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetVersion"
          }
        ],
        "description": "FileDatasetVersion Definition"
      },
      "FolderDatasetVersionUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "uri_folder"
            ],
            "description": "Dataset type"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasetVersionUpdate"
          }
        ],
        "description": "FileDatasetVersion Definition"
      },
      "HostedAgentDefinition": {
        "type": "object",
        "required": [
          "kind",
          "container_protocol_versions",
          "cpu",
          "memory"
        ],
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "hosted"
            ]
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.Tool"
            },
            "description": "An array of tools the hosted agent's model may call while generating a response. You\ncan specify which tool to use by setting the `tool_choice` parameter."
          },
          "container_protocol_versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProtocolVersionRecord"
            },
            "description": "The protocols that the agent supports for ingress communication of the containers.",
            "example": [
              {
                "protocol": "responses",
                "version": "v0.1.1"
              },
              {
                "protocol": "a2a",
                "version": "v0.3.0"
              }
            ]
          },
          "cpu": {
            "type": "string",
            "description": "The CPU configuration for the hosted agent.",
            "example": "0.25"
          },
          "memory": {
            "type": "string",
            "description": "The memory configuration for the hosted agent.",
            "example": "0.5Gi"
          },
          "environment_variables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Environment variables to set in the hosted agent container.",
            "example": {
              "name": "LOG_LEVEL",
              "value": "debug"
            }
          }
        },
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "hosted": "#/components/schemas/ImageBasedHostedAgentDefinition"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AgentDefinition"
          }
        ],
        "description": "The hosted agent definition."
      },
      "HourlyRecurrenceSchedule": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Hourly"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurrenceSchedule"
          }
        ],
        "description": "Hourly recurrence schedule."
      },
      "HumanEvaluationRuleAction": {
        "type": "object",
        "required": [
          "type",
          "templateId"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "humanEvaluation"
            ]
          },
          "templateId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetId"
              }
            ],
            "description": "Human evaluation template Id."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EvaluationRuleAction"
          }
        ],
        "description": "Evaluation rule action for human evaluation."
      },
      "ImageBasedHostedAgentDefinition": {
        "type": "object",
        "required": [
          "kind",
          "image"
        ],
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "hosted"
            ]
          },
          "image": {
            "type": "string",
            "description": "The image for the hosted agent.",
            "example": "myregistry.azurecr.io/my-hosted-agent:latest"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/HostedAgentDefinition"
          }
        ],
        "description": "The image-based deployment definition for a hosted agent."
      },
      "Index": {
        "type": "object",
        "required": [
          "type",
          "name",
          "version"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IndexType"
              }
            ],
            "description": "Type of index"
          },
          "id": {
            "type": "string",
            "description": "Asset ID, a unique identifier for the asset",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the resource",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "description": "The version of the resource",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureSearch": "#/components/schemas/AzureAISearchIndex",
            "ManagedAzureSearch": "#/components/schemas/ManagedAzureAISearchIndex",
            "CosmosDBNoSqlVectorStore": "#/components/schemas/CosmosDBIndex"
          }
        },
        "description": "Index resource Definition"
      },
      "IndexType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "AzureSearch",
              "CosmosDBNoSqlVectorStore",
              "ManagedAzureSearch"
            ]
          }
        ]
      },
      "IndexUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IndexType"
              }
            ],
            "description": "Type of index"
          },
          "description": {
            "type": "string",
            "description": "The asset description text."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tag dictionary. Tags can be added, removed, and updated."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureSearch": "#/components/schemas/AzureAISearchIndexUpdate",
            "ManagedAzureSearch": "#/components/schemas/ManagedAzureAISearchIndexUpdate",
            "CosmosDBNoSqlVectorStore": "#/components/schemas/CosmosDBIndexUpdate"
          }
        },
        "description": "Index resource Definition"
      },
      "Insight": {
        "type": "object",
        "required": [
          "id",
          "metadata",
          "state",
          "displayName",
          "request"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the insights report.",
            "readOnly": true
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InsightsMetadata"
              }
            ],
            "description": "Metadata about the insights report.",
            "readOnly": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Azure.Core.Foundations.OperationState"
              }
            ],
            "description": "The current state of the insights.",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "User friendly display name for the insight."
          },
          "request": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InsightRequest"
              }
            ],
            "description": "Request for the insights analysis."
          },
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InsightResult"
              }
            ],
            "description": "The result of the insights report.",
            "readOnly": true
          }
        },
        "description": "The response body for cluster insights."
      },
      "InsightCluster": {
        "type": "object",
        "required": [
          "id",
          "label",
          "suggestion",
          "description",
          "weight"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the analysis cluster."
          },
          "label": {
            "type": "string",
            "description": "Label for the cluster"
          },
          "suggestion": {
            "type": "string",
            "description": "Suggestion for the cluster"
          },
          "description": {
            "type": "string",
            "description": "Description of the analysis cluster."
          },
          "weight": {
            "type": "integer",
            "format": "int32",
            "description": "The weight of the analysis cluster. This indicate number of samples in the cluster."
          },
          "subClusters": {
            "description": "List of subclusters within this cluster. Empty if no subclusters exist.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InsightCluster"
            }
          },
          "samples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InsightSample"
            },
            "description": "List of samples that belong to this cluster. Empty if samples are part of subclusters."
          }
        },
        "description": "A cluster of analysis samples."
      },
      "InsightModelConfiguration": {
        "type": "object",
        "required": [
          "modelDeploymentName"
        ],
        "properties": {
          "modelDeploymentName": {
            "type": "string",
            "description": "The model deployment to be evaluated. Accepts either the deployment name alone or with the connection name as '{connectionName}/<modelDeploymentName>'."
          }
        },
        "description": "Configuration of the model used in the insight generation."
      },
      "InsightRequest": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InsightType"
              }
            ],
            "description": "The type of request."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "EvaluationRunClusterInsight": "#/components/schemas/EvaluationRunClusterInsightsRequest",
            "AgentClusterInsight": "#/components/schemas/AgentClusterInsightsRequest",
            "EvaluationComparison": "#/components/schemas/EvaluationComparisonRequest"
          }
        },
        "description": "The request of the insights report."
      },
      "InsightResult": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InsightType"
              }
            ],
            "description": "The type of insights result."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "EvaluationComparison": "#/components/schemas/EvalCompareReport",
            "EvaluationRunClusterInsight": "#/components/schemas/EvaluationRunClusterInsightResult",
            "AgentClusterInsight": "#/components/schemas/AgentClusterInsightResult"
          }
        },
        "description": "The result of the insights."
      },
      "InsightSample": {
        "type": "object",
        "required": [
          "id",
          "type",
          "features",
          "correlationInfo"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the analysis sample."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SampleType"
              }
            ],
            "description": "Sample type"
          },
          "features": {
            "type": "object",
            "additionalProperties": {},
            "description": "Features to help with additional filtering of data in UX."
          },
          "correlationInfo": {
            "type": "object",
            "additionalProperties": {},
            "description": "Info about the correlation for the analysis sample."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "EvaluationResultSample": "#/components/schemas/EvaluationResultSample"
          }
        },
        "description": "A sample from the analysis."
      },
      "InsightScheduleTask": {
        "type": "object",
        "required": [
          "type",
          "insight"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Insight"
            ]
          },
          "insight": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Insight"
              }
            ],
            "description": "The insight payload."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleTask"
          }
        ],
        "description": "Insight task for the schedule."
      },
      "InsightSummary": {
        "type": "object",
        "required": [
          "sampleCount",
          "uniqueSubclusterCount",
          "uniqueClusterCount",
          "method",
          "usage"
        ],
        "properties": {
          "sampleCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of samples analyzed."
          },
          "uniqueSubclusterCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of unique subcluster labels."
          },
          "uniqueClusterCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of unique clusters."
          },
          "method": {
            "type": "string",
            "description": "Method used for clustering."
          },
          "usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClusterTokenUsage"
              }
            ],
            "description": "Token usage while performing clustering analysis"
          }
        },
        "description": "Summary of the error cluster analysis."
      },
      "InsightType": {
        "anyOf": [
          {
            "type": "string",
            "enum": [
              "EvaluationRunClusterInsight",
              "AgentClusterInsight",
              "EvaluationComparison"
            ]
          },
          {
            "type": "string"
          }
        ],
        "description": "The request of the insights."
      },
      "InsightsMetadata": {
        "type": "object",
        "required": [
          "createdAt"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the insights were created."
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the insights were completed."
          }
        },
        "description": "Metadata about the insights."
      },
      "InvokeAzureAgentWorkflowActionOutputItemResource": {
        "type": "object",
        "required": [
          "kind",
          "agent",
          "response_id"
        ],
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "InvokeAzureAgent"
            ]
          },
          "agent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentId"
              }
            ],
            "description": "Agent id."
          },
          "conversation_id": {
            "type": "string",
            "description": "ID of the conversation for the agent invocation."
          },
          "response_id": {
            "type": "string",
            "description": "The response id for the agent invocation."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowActionOutputItemResource"
          }
        ],
        "description": "Details about an agent invocation as part of a workflow action."
      },
      "ItemGenerationParams": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of item generation parameters to use.",
            "x-stainless-const": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {}
        },
        "description": "Represents the set of parameters used to control item generation operations."
      },
      "ManagedAzureAISearchIndex": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ManagedAzureSearch"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Index"
          }
        ],
        "description": "Managed Azure AI Search Index Definition"
      },
      "ManagedAzureAISearchIndexUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ManagedAzureSearch"
            ],
            "description": "Type of index"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/IndexUpdate"
          }
        ],
        "description": "Managed Azure AI Search Index Definition"
      },
      "MemoryItem": {
        "type": "object",
        "required": [
          "memory_id",
          "updated_at",
          "scope",
          "content",
          "kind"
        ],
        "properties": {
          "memory_id": {
            "type": "string",
            "description": "The unique ID of the memory item."
          },
          "updated_at": {
            "type": "integer",
            "format": "unixtime",
            "description": "The last update time of the memory item."
          },
          "scope": {
            "type": "string",
            "description": "The namespace that logically groups and isolates memories, such as a user ID."
          },
          "content": {
            "type": "string",
            "description": "The content of the memory."
          },
          "kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryItemKind"
              }
            ],
            "description": "The kind of the memory item."
          }
        },
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "user_profile": "#/components/schemas/UserProfileMemoryItem",
            "chat_summary": "#/components/schemas/ChatSummaryMemoryItem"
          }
        },
        "description": "A single memory item stored in the memory store, containing content and metadata."
      },
      "MemoryItemKind": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "user_profile",
              "chat_summary"
            ]
          }
        ],
        "description": "Memory item kind."
      },
      "MemoryOperation": {
        "type": "object",
        "required": [
          "kind",
          "memory_item"
        ],
        "properties": {
          "kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryOperationKind"
              }
            ],
            "description": "The type of memory operation being performed."
          },
          "memory_item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryItem"
              }
            ],
            "description": "The memory item to create, update, or delete."
          }
        },
        "description": "Represents a single memory operation (create, update, or delete) performed on a memory item."
      },
      "MemoryOperationKind": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "create",
              "update",
              "delete"
            ]
          }
        ],
        "description": "Memory operation kind."
      },
      "MemorySearchItem": {
        "type": "object",
        "required": [
          "memory_item"
        ],
        "properties": {
          "memory_item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryItem"
              }
            ],
            "description": "Retrieved memory item."
          }
        },
        "description": "A retrieved memory item from memory search."
      },
      "MemorySearchOptions": {
        "type": "object",
        "properties": {
          "max_memories": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of memory items to return."
          }
        },
        "description": "Memory search options."
      },
      "MemorySearchTool": {
        "type": "object",
        "required": [
          "type",
          "memory_store_name",
          "scope"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "memory_search"
            ],
            "description": "The type of the tool. Always `memory_search`."
          },
          "memory_store_name": {
            "type": "string",
            "description": "The name of the memory store to use."
          },
          "scope": {
            "type": "string",
            "description": "The namespace used to group and isolate memories, such as a user ID.\nLimits which memories can be retrieved or updated.\nUse special variable `{{$userId}}` to scope memories to the current signed-in user."
          },
          "search_options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemorySearchOptions"
              }
            ],
            "description": "Options for searching the memory store."
          },
          "update_delay": {
            "type": "string",
            "format": "duration",
            "description": "The amount of time to wait after inactivity before updating memories with messages from the call (e.g., '0s', '5m'). Defaults to '60s'.",
            "default": "PT60S"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "A tool for integrating memories into the agent."
      },
      "MemorySearchToolCallItemParam": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "memory_search_call"
            ]
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemorySearchItem"
            },
            "nullable": true,
            "description": "The results returned from the memory search."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ]
      },
      "MemorySearchToolCallItemResource": {
        "type": "object",
        "required": [
          "type",
          "status"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "memory_search_call"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "searching",
              "completed",
              "incomplete",
              "failed"
            ],
            "description": "The status of the memory search tool call. One of `in_progress`,\n`searching`, `completed`, `incomplete` or `failed`,"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemorySearchItem"
            },
            "nullable": true,
            "description": "The results returned from the memory search."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ]
      },
      "MemoryStoreDefaultDefinition": {
        "type": "object",
        "required": [
          "kind",
          "chat_model",
          "embedding_model"
        ],
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "default"
            ],
            "description": "The kind of the memory store."
          },
          "chat_model": {
            "type": "string",
            "description": "The name or identifier of the chat completion model deployment used for memory processing."
          },
          "embedding_model": {
            "type": "string",
            "description": "The name or identifier of the embedding model deployment used for memory processing."
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryStoreDefaultOptions"
              }
            ],
            "description": "Default memory store options."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/MemoryStoreDefinition"
          }
        ],
        "description": "Default memory store implementation."
      },
      "MemoryStoreDefaultOptions": {
        "type": "object",
        "required": [
          "user_profile_enabled",
          "chat_summary_enabled"
        ],
        "properties": {
          "user_profile_enabled": {
            "type": "boolean",
            "description": "Whether to enable user profile extraction and storage. Default is true.",
            "default": true
          },
          "user_profile_details": {
            "type": "string",
            "description": "Specific categories or types of user profile information to extract and store."
          },
          "chat_summary_enabled": {
            "type": "boolean",
            "description": "Whether to enable chat summary extraction and storage. Default is true.",
            "default": true
          }
        },
        "description": "Default memory store configurations."
      },
      "MemoryStoreDefinition": {
        "type": "object",
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryStoreKind"
              }
            ],
            "description": "The kind of the memory store."
          }
        },
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "default": "#/components/schemas/MemoryStoreDefaultDefinition"
          }
        },
        "description": "Base definition for memory store configurations."
      },
      "MemoryStoreDeleteScopeResponse": {
        "type": "object",
        "required": [
          "object",
          "name",
          "scope",
          "deleted"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "memory_store.scope.deleted"
            ],
            "description": "The object type. Always 'memory_store.scope.deleted'."
          },
          "name": {
            "type": "string",
            "description": "The name of the memory store."
          },
          "scope": {
            "type": "string",
            "description": "The scope from which memories were deleted."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the deletion operation was successful."
          }
        },
        "description": "Response for deleting memories from a scope."
      },
      "MemoryStoreKind": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "default"
            ]
          }
        ],
        "description": "The type of memory store implementation to use."
      },
      "MemoryStoreObject": {
        "type": "object",
        "required": [
          "object",
          "id",
          "created_at",
          "updated_at",
          "name",
          "definition"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "memory_store"
            ],
            "description": "The object type, which is always 'memory_store'."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the memory store."
          },
          "created_at": {
            "type": "integer",
            "format": "unixtime",
            "description": "The Unix timestamp (seconds) when the memory store was created."
          },
          "updated_at": {
            "type": "integer",
            "format": "unixtime",
            "description": "The Unix timestamp (seconds) when the memory store was last updated."
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "description": "The name of the memory store."
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "description": "A human-readable description of the memory store."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary key-value metadata to associate with the memory store."
          },
          "definition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryStoreDefinition"
              }
            ],
            "description": "The definition of the memory store."
          }
        },
        "description": "A memory store that can store and retrieve user memories."
      },
      "MemoryStoreOperationUsage": {
        "type": "object",
        "required": [
          "embedding_tokens",
          "input_tokens",
          "input_tokens_details",
          "output_tokens",
          "output_tokens_details",
          "total_tokens"
        ],
        "properties": {
          "embedding_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The number of embedding tokens."
          },
          "input_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The number of input tokens."
          },
          "input_tokens_details": {
            "type": "object",
            "properties": {
              "cached_tokens": {
                "type": "integer",
                "format": "int32",
                "description": "The number of tokens that were retrieved from the cache.\n[More on prompt caching](/docs/guides/prompt-caching)."
              }
            },
            "required": [
              "cached_tokens"
            ],
            "description": "A detailed breakdown of the input tokens."
          },
          "output_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The number of output tokens."
          },
          "output_tokens_details": {
            "type": "object",
            "properties": {
              "reasoning_tokens": {
                "type": "integer",
                "format": "int32",
                "description": "The number of reasoning tokens."
              }
            },
            "required": [
              "reasoning_tokens"
            ],
            "description": "A detailed breakdown of the output tokens."
          },
          "total_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of tokens used."
          }
        },
        "description": "Usage statistics of a memory store operation."
      },
      "MemoryStoreSearchResponse": {
        "type": "object",
        "required": [
          "search_id",
          "memories",
          "usage"
        ],
        "properties": {
          "search_id": {
            "type": "string",
            "description": "The unique ID of this search request. Use this value as previous_search_id in subsequent requests to perform incremental searches."
          },
          "memories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemorySearchItem"
            },
            "description": "Related memory items found during the search operation."
          },
          "usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryStoreOperationUsage"
              }
            ],
            "description": "Usage statistics associated with the memory search operation."
          }
        },
        "description": "Memory search response."
      },
      "MemoryStoreUpdateResponse": {
        "type": "object",
        "required": [
          "update_id",
          "status"
        ],
        "properties": {
          "update_id": {
            "type": "string",
            "description": "The unique ID of this update request. Use this value as previous_update_id in subsequent requests to perform incremental updates."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryStoreUpdateStatus"
              }
            ],
            "description": "The status of the memory update operation. One of \"queued\", \"in_progress\", \"completed\", \"failed\", or \"superseded\"."
          },
          "superseded_by": {
            "type": "string",
            "description": "The update_id the operation was superseded by when status is \"superseded\"."
          },
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryStoreUpdateResult"
              }
            ],
            "description": "The result of memory store update operation when status is \"completed\"."
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiError"
              }
            ],
            "description": "Error object that describes the error when status is \"failed\"."
          }
        },
        "description": "Provides the status of a memory store update operation."
      },
      "MemoryStoreUpdateResult": {
        "type": "object",
        "required": [
          "memory_operations",
          "usage"
        ],
        "properties": {
          "memory_operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemoryOperation"
            },
            "description": "A list of individual memory operations that were performed during the update."
          },
          "usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemoryStoreOperationUsage"
              }
            ],
            "description": "Usage statistics associated with the memory update operation."
          }
        },
        "description": "Memory update result."
      },
      "MemoryStoreUpdateStatus": {
        "type": "string",
        "enum": [
          "queued",
          "in_progress",
          "completed",
          "failed",
          "superseded"
        ],
        "description": "Status of a memory store update operation."
      },
      "MicrosoftFabricAgentTool": {
        "type": "object",
        "required": [
          "type",
          "fabric_dataagent_preview"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "fabric_dataagent_preview"
            ],
            "description": "The object type, which is always 'fabric_dataagent'."
          },
          "fabric_dataagent_preview": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FabricDataAgentToolParameters"
              }
            ],
            "description": "The fabric data agent tool parameters."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "The input definition information for a Microsoft Fabric tool as used to configure an agent."
      },
      "ModelDeployment": {
        "type": "object",
        "required": [
          "type",
          "modelName",
          "modelVersion",
          "modelPublisher",
          "capabilities",
          "sku"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ModelDeployment"
            ],
            "description": "The type of the deployment"
          },
          "modelName": {
            "type": "string",
            "description": "Publisher-specific name of the deployed model",
            "readOnly": true
          },
          "modelVersion": {
            "type": "string",
            "description": "Publisher-specific version of the deployed model",
            "readOnly": true
          },
          "modelPublisher": {
            "type": "string",
            "description": "Name of the deployed model's publisher",
            "readOnly": true
          },
          "capabilities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Capabilities of deployed model",
            "readOnly": true
          },
          "sku": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Sku"
              }
            ],
            "description": "Sku of the model deployment",
            "readOnly": true
          },
          "connectionName": {
            "type": "string",
            "description": "Name of the connection the deployment comes from",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Deployment"
          }
        ],
        "description": "Model Deployment Definition"
      },
      "ModelSamplingParams": {
        "type": "object",
        "required": [
          "temperature",
          "top_p",
          "seed",
          "max_completion_tokens"
        ],
        "properties": {
          "temperature": {
            "type": "number",
            "format": "float",
            "description": "The temperature parameter for sampling."
          },
          "top_p": {
            "type": "number",
            "format": "float",
            "description": "The top-p parameter for nucleus sampling."
          },
          "seed": {
            "type": "integer",
            "format": "int32",
            "description": "The random seed for reproducibility."
          },
          "max_completion_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of tokens allowed in the completion."
          }
        },
        "description": "Represents a set of parameters used to control the sampling behavior of a language model during text generation."
      },
      "ModelSamplingParamsUpdate": {
        "type": "object",
        "properties": {
          "temperature": {
            "type": "number",
            "format": "float",
            "description": "The temperature parameter for sampling."
          },
          "top_p": {
            "type": "number",
            "format": "float",
            "description": "The top-p parameter for nucleus sampling."
          },
          "seed": {
            "type": "integer",
            "format": "int32",
            "description": "The random seed for reproducibility."
          },
          "max_completion_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of tokens allowed in the completion."
          }
        },
        "description": "Represents a set of parameters used to control the sampling behavior of a language model during text generation."
      },
      "MonthlyRecurrenceSchedule": {
        "type": "object",
        "required": [
          "type",
          "daysOfMonth"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Monthly"
            ],
            "description": "Monthly recurrence type."
          },
          "daysOfMonth": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Days of the month for the recurrence schedule."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurrenceSchedule"
          }
        ],
        "description": "Monthly recurrence schedule."
      },
      "NoAuthenticationCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "None"
            ],
            "description": "The credential type ",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "Credentials that do not require authentication"
      },
      "OAuthConsentRequestItemResource": {
        "type": "object",
        "required": [
          "id",
          "type",
          "consent_link",
          "server_label"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "oauth_consent_request"
            ]
          },
          "consent_link": {
            "type": "string",
            "description": "The link the user can use to perform OAuth consent."
          },
          "server_label": {
            "type": "string",
            "description": "The server label for the OAuth consent request."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "Request from the service for the user to perform OAuth consent."
      },
      "OneTimeTrigger": {
        "type": "object",
        "required": [
          "type",
          "triggerAt"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "OneTime"
            ]
          },
          "triggerAt": {
            "type": "string",
            "description": "Date and time for the one-time trigger in ISO 8601 format."
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for the one-time trigger.",
            "default": "UTC"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Trigger"
          }
        ],
        "description": "One-time trigger."
      },
      "OpenAI.Annotation": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.AnnotationType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "file_citation": "#/components/schemas/OpenAI.AnnotationFileCitation",
            "url_citation": "#/components/schemas/OpenAI.AnnotationUrlCitation",
            "file_path": "#/components/schemas/OpenAI.AnnotationFilePath"
          }
        }
      },
      "OpenAI.AnnotationFileCitation": {
        "type": "object",
        "required": [
          "type",
          "file_id",
          "index",
          "filename"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file_citation"
            ],
            "description": "The type of the file citation. Always `file_citation`."
          },
          "file_id": {
            "type": "string",
            "description": "The ID of the file."
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the file in the list of files."
          },
          "filename": {
            "type": "string",
            "description": "The filename of the file cited."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Annotation"
          }
        ],
        "description": "A citation to a file."
      },
      "OpenAI.AnnotationFilePath": {
        "type": "object",
        "required": [
          "type",
          "file_id",
          "index"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file_path"
            ],
            "description": "The type of the file path. Always `file_path`."
          },
          "file_id": {
            "type": "string",
            "description": "The ID of the file."
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the file in the list of files."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Annotation"
          }
        ],
        "description": "A path to a file."
      },
      "OpenAI.AnnotationType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "file_citation",
              "url_citation",
              "file_path",
              "container_file_citation"
            ]
          }
        ]
      },
      "OpenAI.AnnotationUrlCitation": {
        "type": "object",
        "required": [
          "type",
          "url",
          "start_index",
          "end_index",
          "title"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "url_citation"
            ],
            "description": "The type of the URL citation. Always `url_citation`."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the web resource."
          },
          "start_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the first character of the URL citation in the message."
          },
          "end_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the last character of the URL citation in the message."
          },
          "title": {
            "type": "string",
            "description": "The title of the web resource."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Annotation"
          }
        ],
        "description": "A citation for a web resource used to generate a model response."
      },
      "OpenAI.ApproximateLocation": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "approximate"
            ]
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Location"
          }
        ]
      },
      "OpenAI.ChatCompletionTool": {
        "type": "object",
        "required": [
          "type",
          "function"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported.",
            "x-stainless-const": true
          },
          "function": {
            "$ref": "#/components/schemas/OpenAI.FunctionObject"
          }
        },
        "description": "A function tool that can be used to generate a response.",
        "title": "Function tool"
      },
      "OpenAI.CodeInterpreterOutput": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.CodeInterpreterOutputType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "image": "#/components/schemas/OpenAI.CodeInterpreterOutputImage",
            "logs": "#/components/schemas/OpenAI.CodeInterpreterOutputLogs"
          }
        }
      },
      "OpenAI.CodeInterpreterOutputImage": {
        "type": "object",
        "required": [
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image"
            ],
            "description": "The type of the output. Always 'image'."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the image output from the code interpreter."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.CodeInterpreterOutput"
          }
        ],
        "description": "The image output from the code interpreter."
      },
      "OpenAI.CodeInterpreterOutputLogs": {
        "type": "object",
        "required": [
          "type",
          "logs"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "logs"
            ],
            "description": "The type of the output. Always 'logs'."
          },
          "logs": {
            "type": "string",
            "description": "The logs output from the code interpreter."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.CodeInterpreterOutput"
          }
        ],
        "description": "The logs output from the code interpreter."
      },
      "OpenAI.CodeInterpreterOutputType": {
        "type": "string",
        "enum": [
          "logs",
          "image"
        ]
      },
      "OpenAI.CodeInterpreterTool": {
        "type": "object",
        "required": [
          "type",
          "container"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "code_interpreter"
            ],
            "description": "The type of the code interpreter tool. Always `code_interpreter`."
          },
          "container": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CodeInterpreterToolAuto"
              }
            ],
            "description": "The code interpreter container. Can be a container ID or an object that\nspecifies uploaded file IDs to make available to your code."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "A tool that runs Python code to help generate a response to a prompt."
      },
      "OpenAI.CodeInterpreterToolAuto": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "auto"
            ],
            "description": "Always `auto`."
          },
          "file_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional list of uploaded files to make available to your code."
          }
        },
        "description": "Configuration for a code interpreter container. Optionally specify the IDs\nof the files to run the code on."
      },
      "OpenAI.CodeInterpreterToolCallItemParam": {
        "type": "object",
        "required": [
          "type",
          "container_id",
          "code",
          "outputs"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "code_interpreter_call"
            ]
          },
          "container_id": {
            "type": "string",
            "description": "The ID of the container used to run the code."
          },
          "code": {
            "type": "string",
            "nullable": true,
            "description": "The code to run, or null if not available."
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.CodeInterpreterOutput"
            },
            "nullable": true,
            "description": "The outputs generated by the code interpreter, such as logs or images.\nCan be null if no outputs are available."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "A tool call to run code.\n"
      },
      "OpenAI.CodeInterpreterToolCallItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "container_id",
          "code",
          "outputs"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "code_interpreter_call"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "incomplete",
              "interpreting",
              "failed"
            ]
          },
          "container_id": {
            "type": "string",
            "description": "The ID of the container used to run the code."
          },
          "code": {
            "type": "string",
            "nullable": true,
            "description": "The code to run, or null if not available."
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.CodeInterpreterOutput"
            },
            "nullable": true,
            "description": "The outputs generated by the code interpreter, such as logs or images.\nCan be null if no outputs are available."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "A tool call to run code.\n"
      },
      "OpenAI.ComparisonFilter": {
        "type": "object",
        "required": [
          "type",
          "key",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "eq",
              "ne",
              "gt",
              "gte",
              "lt",
              "lte"
            ],
            "description": "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal",
            "default": "eq"
          },
          "key": {
            "type": "string",
            "description": "The key to compare against the value."
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number",
                "format": "float"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "The value to compare against the attribute key; supports string, number, or boolean types."
          }
        },
        "description": "A filter used to compare a specified attribute key to a given value using a defined comparison operation."
      },
      "OpenAI.CompoundFilter": {
        "type": "object",
        "required": [
          "type",
          "filters"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "and",
              "or"
            ],
            "description": "Type of operation: `and` or `or`."
          },
          "filters": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OpenAI.ComparisonFilter"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.CompoundFilter"
                }
              ]
            },
            "description": "Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`."
          }
        },
        "description": "Combine multiple filters using `and` or `or`."
      },
      "OpenAI.ComputerAction": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.ComputerActionType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "click": "#/components/schemas/OpenAI.ComputerActionClick",
            "double_click": "#/components/schemas/OpenAI.ComputerActionDoubleClick",
            "drag": "#/components/schemas/OpenAI.ComputerActionDrag",
            "move": "#/components/schemas/OpenAI.ComputerActionMove",
            "screenshot": "#/components/schemas/OpenAI.ComputerActionScreenshot",
            "scroll": "#/components/schemas/OpenAI.ComputerActionScroll",
            "type": "#/components/schemas/OpenAI.ComputerActionTypeKeys",
            "wait": "#/components/schemas/OpenAI.ComputerActionWait",
            "keypress": "#/components/schemas/OpenAI.ComputerActionKeyPress"
          }
        }
      },
      "OpenAI.ComputerActionClick": {
        "type": "object",
        "required": [
          "type",
          "button",
          "x",
          "y"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "click"
            ],
            "description": "Specifies the event type. For a click action, this property is\nalways set to `click`."
          },
          "button": {
            "type": "string",
            "enum": [
              "left",
              "right",
              "wheel",
              "back",
              "forward"
            ],
            "description": "Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`."
          },
          "x": {
            "type": "integer",
            "format": "int32",
            "description": "The x-coordinate where the click occurred."
          },
          "y": {
            "type": "integer",
            "format": "int32",
            "description": "The y-coordinate where the click occurred."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          }
        ],
        "description": "A click action."
      },
      "OpenAI.ComputerActionDoubleClick": {
        "type": "object",
        "required": [
          "type",
          "x",
          "y"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "double_click"
            ],
            "description": "Specifies the event type. For a double click action, this property is\nalways set to `double_click`."
          },
          "x": {
            "type": "integer",
            "format": "int32",
            "description": "The x-coordinate where the double click occurred."
          },
          "y": {
            "type": "integer",
            "format": "int32",
            "description": "The y-coordinate where the double click occurred."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          }
        ],
        "description": "A double click action."
      },
      "OpenAI.ComputerActionDrag": {
        "type": "object",
        "required": [
          "type",
          "path"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "drag"
            ],
            "description": "Specifies the event type. For a drag action, this property is\nalways set to `drag`."
          },
          "path": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.Coordinate"
            },
            "description": "An array of coordinates representing the path of the drag action. Coordinates will appear as an array\nof objects, eg\n```\n[\n  { x: 100, y: 200 },\n  { x: 200, y: 300 }\n]\n```"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          }
        ],
        "description": "A drag action."
      },
      "OpenAI.ComputerActionKeyPress": {
        "type": "object",
        "required": [
          "type",
          "keys"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "keypress"
            ],
            "description": "Specifies the event type. For a keypress action, this property is\nalways set to `keypress`."
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The combination of keys the model is requesting to be pressed. This is an\narray of strings, each representing a key."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          }
        ],
        "description": "A collection of keypresses the model would like to perform."
      },
      "OpenAI.ComputerActionMove": {
        "type": "object",
        "required": [
          "type",
          "x",
          "y"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "move"
            ],
            "description": "Specifies the event type. For a move action, this property is\nalways set to `move`."
          },
          "x": {
            "type": "integer",
            "format": "int32",
            "description": "The x-coordinate to move to."
          },
          "y": {
            "type": "integer",
            "format": "int32",
            "description": "The y-coordinate to move to."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          }
        ],
        "description": "A mouse move action."
      },
      "OpenAI.ComputerActionScreenshot": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "screenshot"
            ],
            "description": "Specifies the event type. For a screenshot action, this property is\nalways set to `screenshot`."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          }
        ],
        "description": "A screenshot action."
      },
      "OpenAI.ComputerActionScroll": {
        "type": "object",
        "required": [
          "type",
          "x",
          "y",
          "scroll_x",
          "scroll_y"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "scroll"
            ],
            "description": "Specifies the event type. For a scroll action, this property is\nalways set to `scroll`."
          },
          "x": {
            "type": "integer",
            "format": "int32",
            "description": "The x-coordinate where the scroll occurred."
          },
          "y": {
            "type": "integer",
            "format": "int32",
            "description": "The y-coordinate where the scroll occurred."
          },
          "scroll_x": {
            "type": "integer",
            "format": "int32",
            "description": "The horizontal scroll distance."
          },
          "scroll_y": {
            "type": "integer",
            "format": "int32",
            "description": "The vertical scroll distance."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          }
        ],
        "description": "A scroll action."
      },
      "OpenAI.ComputerActionType": {
        "type": "string",
        "enum": [
          "screenshot",
          "click",
          "double_click",
          "scroll",
          "type",
          "wait",
          "keypress",
          "drag",
          "move"
        ]
      },
      "OpenAI.ComputerActionTypeKeys": {
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "type"
            ],
            "description": "Specifies the event type. For a type action, this property is\nalways set to `type`."
          },
          "text": {
            "type": "string",
            "description": "The text to type."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          }
        ],
        "description": "An action to type in text."
      },
      "OpenAI.ComputerActionWait": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wait"
            ],
            "description": "Specifies the event type. For a wait action, this property is\nalways set to `wait`."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          }
        ],
        "description": "A wait action."
      },
      "OpenAI.ComputerToolCallItemParam": {
        "type": "object",
        "required": [
          "type",
          "call_id",
          "action",
          "pending_safety_checks"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "computer_call"
            ]
          },
          "call_id": {
            "type": "string",
            "description": "An identifier used when responding to the tool call with output."
          },
          "action": {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          },
          "pending_safety_checks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ComputerToolCallSafetyCheck"
            },
            "description": "The pending safety checks for the computer call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "A tool call to a computer use tool. See the\n[computer use guide](/docs/guides/tools-computer-use) for more information.\n"
      },
      "OpenAI.ComputerToolCallItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "call_id",
          "action",
          "pending_safety_checks"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "computer_call"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "incomplete"
            ],
            "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API."
          },
          "call_id": {
            "type": "string",
            "description": "An identifier used when responding to the tool call with output."
          },
          "action": {
            "$ref": "#/components/schemas/OpenAI.ComputerAction"
          },
          "pending_safety_checks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ComputerToolCallSafetyCheck"
            },
            "description": "The pending safety checks for the computer call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "A tool call to a computer use tool. See the\n[computer use guide](/docs/guides/tools-computer-use) for more information.\n"
      },
      "OpenAI.ComputerToolCallOutputItemOutput": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.ComputerToolCallOutputItemOutputType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "computer_screenshot": "#/components/schemas/OpenAI.ComputerToolCallOutputItemOutputComputerScreenshot"
          }
        }
      },
      "OpenAI.ComputerToolCallOutputItemOutputComputerScreenshot": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "computer_screenshot"
            ]
          },
          "image_url": {
            "type": "string"
          },
          "file_id": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComputerToolCallOutputItemOutput"
          }
        ]
      },
      "OpenAI.ComputerToolCallOutputItemOutputType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "computer_screenshot"
            ]
          }
        ],
        "description": "A computer screenshot image used with the computer use tool."
      },
      "OpenAI.ComputerToolCallOutputItemParam": {
        "type": "object",
        "required": [
          "type",
          "call_id",
          "output"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "computer_call_output"
            ]
          },
          "call_id": {
            "type": "string",
            "description": "The ID of the computer tool call that produced the output."
          },
          "acknowledged_safety_checks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ComputerToolCallSafetyCheck"
            },
            "description": "The safety checks reported by the API that have been acknowledged by the\ndeveloper."
          },
          "output": {
            "$ref": "#/components/schemas/OpenAI.ComputerToolCallOutputItemOutput"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "The output of a computer tool call.\n"
      },
      "OpenAI.ComputerToolCallOutputItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "call_id",
          "output"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "computer_call_output"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "incomplete"
            ],
            "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API."
          },
          "call_id": {
            "type": "string",
            "description": "The ID of the computer tool call that produced the output."
          },
          "acknowledged_safety_checks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ComputerToolCallSafetyCheck"
            },
            "description": "The safety checks reported by the API that have been acknowledged by the\ndeveloper."
          },
          "output": {
            "$ref": "#/components/schemas/OpenAI.ComputerToolCallOutputItemOutput"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "The output of a computer tool call.\n"
      },
      "OpenAI.ComputerToolCallSafetyCheck": {
        "type": "object",
        "required": [
          "id",
          "code",
          "message"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the pending safety check."
          },
          "code": {
            "type": "string",
            "description": "The type of the pending safety check."
          },
          "message": {
            "type": "string",
            "description": "Details about the pending safety check."
          }
        },
        "description": "A pending safety check for the computer call."
      },
      "OpenAI.ComputerUsePreviewTool": {
        "type": "object",
        "required": [
          "type",
          "environment",
          "display_width",
          "display_height"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "computer_use_preview"
            ],
            "description": "The type of the computer use tool. Always `computer_use_preview`."
          },
          "environment": {
            "type": "string",
            "enum": [
              "windows",
              "mac",
              "linux",
              "ubuntu",
              "browser"
            ],
            "description": "The type of computer environment to control."
          },
          "display_width": {
            "type": "integer",
            "format": "int32",
            "description": "The width of the computer display."
          },
          "display_height": {
            "type": "integer",
            "format": "int32",
            "description": "The height of the computer display."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "A tool that controls a virtual computer. Learn more about the [computer tool](https://platform.openai.com/docs/guides/tools-computer-use)."
      },
      "OpenAI.ConversationItemList": {
        "type": "object",
        "required": [
          "object",
          "data",
          "has_more",
          "first_id",
          "last_id"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ItemResource"
            }
          },
          "has_more": {
            "type": "boolean"
          },
          "first_id": {
            "type": "string"
          },
          "last_id": {
            "type": "string"
          }
        }
      },
      "OpenAI.ConversationResource": {
        "type": "object",
        "required": [
          "id",
          "object",
          "created_at",
          "metadata"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the conversation."
          },
          "object": {
            "type": "string",
            "enum": [
              "conversation"
            ],
            "description": "The object type, which is always 'conversation'."
          },
          "created_at": {
            "type": "integer",
            "format": "unixtime"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          }
        }
      },
      "OpenAI.Coordinate": {
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "properties": {
          "x": {
            "type": "integer",
            "format": "int32",
            "description": "The x-coordinate."
          },
          "y": {
            "type": "integer",
            "format": "int32",
            "description": "The y-coordinate."
          }
        },
        "description": "An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`."
      },
      "OpenAI.CreateConversationRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          },
          "items": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OpenAI.ItemParam"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EasyInputMessage"
                }
              ]
            },
            "description": "Initial items to include the conversation context.\nYou may add up to 20 items at a time."
          }
        },
        "description": "Create a conversation"
      },
      "OpenAI.CreateEvalCompletionsRunDataSource": {
        "type": "object",
        "required": [
          "type",
          "source"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "completions"
            ],
            "description": "The type of run data source. Always `completions`.",
            "default": "completions"
          },
          "input_messages": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalCompletionsRunDataSourceInputMessagesTemplate"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalCompletionsRunDataSourceInputMessagesItemReference"
              }
            ],
            "description": "Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace."
          },
          "sampling_params": {
            "$ref": "#/components/schemas/OpenAI.CreateEvalCompletionsRunDataSourceSamplingParams"
          },
          "model": {
            "type": "string",
            "description": "The name of the model to use for generating completions (e.g. \"o3-mini\")."
          },
          "source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileContentSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileIdSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalStoredCompletionsSource"
              }
            ],
            "description": "Determines what populates the `item` namespace in this run's data source."
          }
        },
        "description": "A CompletionsRunDataSource object describing a model sampling configuration.",
        "title": "CompletionsRunDataSource",
        "x-oaiMeta": {
          "name": "The completions data source object used to configure an individual run",
          "group": "eval runs",
          "example": "{\n  \"name\": \"gpt-4o-mini-2024-07-18\",\n  \"data_source\": {\n    \"type\": \"completions\",\n    \"input_messages\": {\n      \"type\": \"item_reference\",\n      \"item_reference\": \"item.input\"\n    },\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"source\": {\n      \"type\": \"stored_completions\",\n      \"model\": \"gpt-4o-mini-2024-07-18\"\n    }\n  }\n}\n"
        }
      },
      "OpenAI.CreateEvalCompletionsRunDataSourceInputMessagesItemReference": {
        "type": "object",
        "required": [
          "type",
          "item_reference"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "item_reference"
            ]
          },
          "item_reference": {
            "type": "string"
          }
        }
      },
      "OpenAI.CreateEvalCompletionsRunDataSourceInputMessagesTemplate": {
        "type": "object",
        "required": [
          "type",
          "template"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "template"
            ]
          },
          "template": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OpenAI.EasyInputMessage"
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EvalItem"
                }
              ]
            }
          }
        }
      },
      "OpenAI.CreateEvalCompletionsRunDataSourceSamplingParams": {
        "type": "object",
        "properties": {
          "reasoning_effort": {
            "$ref": "#/components/schemas/OpenAI.ReasoningEffort"
          },
          "temperature": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "default": 1
          },
          "max_completion_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "top_p": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "default": 1
          },
          "seed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "default": 42
          },
          "response_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ResponseFormatText"
              },
              {
                "$ref": "#/components/schemas/OpenAI.ResponseFormatJsonSchema"
              },
              {
                "$ref": "#/components/schemas/OpenAI.ResponseFormatJsonObject"
              }
            ]
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ChatCompletionTool"
            }
          }
        }
      },
      "OpenAI.CreateEvalCustomDataSourceConfig": {
        "type": "object",
        "required": [
          "type",
          "item_schema"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "custom"
            ],
            "description": "The type of data source. Always `custom`.",
            "x-stainless-const": true,
            "default": "custom"
          },
          "item_schema": {
            "type": "object",
            "additionalProperties": {},
            "description": "The json schema for each row in the data source."
          },
          "include_sample_schema": {
            "type": "boolean",
            "description": "Whether the eval should expect you to populate the sample namespace (ie, by generating responses off of your data source)"
          }
        },
        "description": "A CustomDataSourceConfig object that defines the schema for the data source used for the evaluation runs.\nThis schema is used to define the shape of the data that will be:\n- Used to define your testing criteria and\n- What data is required when creating a run",
        "title": "CustomDataSourceConfig",
        "x-oaiMeta": {
          "name": "The eval file data source config object",
          "group": "evals",
          "example": "{\n  \"type\": \"custom\",\n  \"item_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\"type\": \"string\"},\n      \"age\": {\"type\": \"integer\"}\n    },\n    \"required\": [\"name\", \"age\"]\n  },\n  \"include_sample_schema\": true\n}\n"
        }
      },
      "OpenAI.CreateEvalJsonlRunDataSource": {
        "type": "object",
        "required": [
          "type",
          "source"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "jsonl"
            ],
            "description": "The type of data source. Always `jsonl`.",
            "x-stainless-const": true,
            "default": "jsonl"
          },
          "source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileContentSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileIdSource"
              }
            ],
            "description": "Determines what populates the `item` namespace in the data source."
          }
        },
        "description": "A JsonlRunDataSource object with that specifies a JSONL file that matches the eval",
        "title": "JsonlRunDataSource",
        "x-oaiMeta": {
          "name": "The file data source object for the eval run configuration",
          "group": "evals",
          "example": "{\n \"type\": \"jsonl\",\n \"source\": {\n   \"type\": \"file_id\",\n   \"id\": \"file-9GYS6xbkWgWhmE7VoLUWFg\"\n }\n}\n"
        }
      },
      "OpenAI.CreateEvalLogsDataSourceConfig": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "logs"
            ],
            "description": "The type of data source. Always `logs`.",
            "x-stainless-const": true,
            "default": "logs"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "Metadata filters for the logs data source."
          }
        },
        "description": "A data source config which specifies the metadata property of your logs query.\nThis is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.",
        "title": "LogsDataSourceConfig",
        "x-oaiMeta": {
          "name": "The logs data source object for evals",
          "group": "evals",
          "example": "{\n  \"type\": \"logs\",\n  \"metadata\": {\n    \"use_case\": \"customer_support_agent\"\n  }\n}\n"
        }
      },
      "OpenAI.CreateEvalResponsesRunDataSource": {
        "type": "object",
        "required": [
          "type",
          "source"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "responses"
            ],
            "description": "The type of run data source. Always `responses`.",
            "default": "responses"
          },
          "input_messages": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalResponsesRunDataSourceInputMessagesTemplate"
              },
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalResponsesRunDataSourceInputMessagesItemReference"
              }
            ],
            "description": "Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace."
          },
          "sampling_params": {
            "$ref": "#/components/schemas/OpenAI.CreateEvalResponsesRunDataSourceSamplingParams"
          },
          "model": {
            "type": "string",
            "description": "The name of the model to use for generating completions (e.g. \"o3-mini\")."
          },
          "source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileContentSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileIdSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalResponsesSource"
              }
            ],
            "description": "Determines what populates the `item` namespace in this run's data source."
          }
        },
        "description": "A ResponsesRunDataSource object describing a model sampling configuration.",
        "title": "ResponsesRunDataSource",
        "x-oaiMeta": {
          "name": "The completions data source object used to configure an individual run",
          "group": "eval runs",
          "example": "{\n  \"name\": \"gpt-4o-mini-2024-07-18\",\n  \"data_source\": {\n    \"type\": \"responses\",\n    \"input_messages\": {\n      \"type\": \"item_reference\",\n      \"item_reference\": \"item.input\"\n    },\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"source\": {\n      \"type\": \"responses\",\n      \"model\": \"gpt-4o-mini-2024-07-18\"\n    }\n  }\n}\n"
        }
      },
      "OpenAI.CreateEvalResponsesRunDataSourceInputMessagesItemReference": {
        "type": "object",
        "required": [
          "type",
          "item_reference"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "item_reference"
            ]
          },
          "item_reference": {
            "type": "string"
          }
        }
      },
      "OpenAI.CreateEvalResponsesRunDataSourceInputMessagesTemplate": {
        "type": "object",
        "required": [
          "type",
          "template"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "template"
            ]
          },
          "template": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "role",
                    "content"
                  ]
                },
                {
                  "$ref": "#/components/schemas/OpenAI.EvalItem"
                }
              ]
            }
          }
        }
      },
      "OpenAI.CreateEvalResponsesRunDataSourceSamplingParams": {
        "type": "object",
        "properties": {
          "reasoning_effort": {
            "$ref": "#/components/schemas/OpenAI.ReasoningEffort"
          },
          "temperature": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "default": 1
          },
          "max_completion_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "top_p": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "default": 1
          },
          "seed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "default": 42
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.Tool"
            }
          },
          "text": {
            "$ref": "#/components/schemas/OpenAI.CreateEvalResponsesRunDataSourceSamplingParamsText"
          }
        }
      },
      "OpenAI.CreateEvalResponsesRunDataSourceSamplingParamsText": {
        "type": "object",
        "properties": {
          "format": {
            "$ref": "#/components/schemas/OpenAI.TextResponseFormatConfiguration"
          }
        }
      },
      "OpenAI.CreateEvalStoredCompletionsDataSourceConfig": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "stored_completions"
            ],
            "description": "The type of data source. Always `stored_completions`.",
            "x-stainless-const": true,
            "default": "stored_completions"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "Metadata filters for the stored completions data source."
          }
        },
        "description": "Deprecated in favor of LogsDataSourceConfig.",
        "title": "StoredCompletionsDataSourceConfig",
        "x-oaiMeta": {
          "name": "The stored completions data source object for evals",
          "group": "evals",
          "example": "{\n  \"type\": \"stored_completions\",\n  \"metadata\": {\n    \"use_case\": \"customer_support_agent\"\n  }\n}\n"
        }
      },
      "OpenAI.CreateFineTuningJobRequest": {
        "type": "object",
        "required": [
          "model",
          "training_file"
        ],
        "properties": {
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "babbage-002",
                  "davinci-002",
                  "gpt-3.5-turbo",
                  "gpt-4o-mini"
                ]
              }
            ],
            "description": "The name of the model to fine-tune. You can select one of the\n[supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).",
            "x-oaiTypeLabel": "string"
          },
          "training_file": {
            "type": "string",
            "description": "The ID of an uploaded file that contains training data.\n\nSee [upload file](/docs/api-reference/files/create) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.\n\nThe contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.\n\nSee the [fine-tuning guide](/docs/guides/model-optimization) for more details."
          },
          "hyperparameters": {
            "type": "object",
            "properties": {
              "batch_size": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  }
                ],
                "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.",
                "default": "auto"
              },
              "learning_rate_multiplier": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ],
                "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.",
                "default": "auto"
              },
              "n_epochs": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  }
                ],
                "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.",
                "default": "auto"
              }
            },
            "description": "The hyperparameters used for the fine-tuning job.\nThis value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.",
            "deprecated": true
          },
          "suffix": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 64,
            "description": "A string of up to 64 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.",
            "default": null
          },
          "validation_file": {
            "type": "string",
            "nullable": true,
            "description": "The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe fine-tuning results file.\nThe same data should not be present in both train and validation files.\n\nYour dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/model-optimization) for more details."
          },
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.CreateFineTuningJobRequestIntegration"
            },
            "nullable": true,
            "description": "A list of integrations to enable for your fine-tuning job."
          },
          "seed": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0,
            "maximum": 2147483647,
            "description": "The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.\nIf a seed is not specified, one will be generated for you."
          },
          "method": {
            "$ref": "#/components/schemas/OpenAI.FineTuneMethod"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          }
        }
      },
      "OpenAI.CreateFineTuningJobRequestIntegration": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "wandb"
                ]
              }
            ]
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "wandb": "#/components/schemas/OpenAI.CreateFineTuningJobRequestWandbIntegration"
          }
        }
      },
      "OpenAI.CreateFineTuningJobRequestWandbIntegration": {
        "type": "object",
        "required": [
          "type",
          "wandb"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wandb"
            ]
          },
          "wandb": {
            "type": "object",
            "properties": {
              "project": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "nullable": true
              },
              "entity": {
                "type": "string",
                "nullable": true
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "project"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.CreateFineTuningJobRequestIntegration"
          }
        ]
      },
      "OpenAI.CreateResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "minimum": 0,
            "maximum": 2,
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "minimum": 0,
            "maximum": 1,
            "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.",
            "default": 1
          },
          "user": {
            "type": "string",
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids)."
          },
          "service_tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ServiceTier"
              }
            ],
            "description": "Note: service_tier is not applicable to Azure OpenAI."
          },
          "top_logprobs": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 20,
            "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability."
          },
          "previous_response_id": {
            "type": "string",
            "nullable": true,
            "description": "The unique ID of the previous response to the model. Use this to\ncreate multi-turn conversations. Learn more about\n[conversation state](/docs/guides/conversation-state)."
          },
          "model": {
            "type": "string",
            "description": "The model deployment to use for the creation of this response."
          },
          "reasoning": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Reasoning"
              }
            ],
            "nullable": true
          },
          "background": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to run the model response in the background.\n[Learn more](/docs/guides/background).",
            "default": false
          },
          "max_output_tokens": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning)."
          },
          "max_tool_calls": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored."
          },
          "text": {
            "type": "object",
            "properties": {
              "format": {
                "$ref": "#/components/schemas/OpenAI.ResponseTextFormatConfiguration"
              }
            },
            "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Structured Outputs](/docs/guides/structured-outputs)"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.Tool"
            },
            "description": "An array of tools the model may call while generating a response. You \ncan specify which tool to use by setting the `tool_choice` parameter.\n\nThe two categories of tools you can provide the model are:\n\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like file search.\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code."
          },
          "tool_choice": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ToolChoiceOptions"
              },
              {
                "$ref": "#/components/schemas/OpenAI.ToolChoiceObject"
              }
            ],
            "description": "How the model should select which tool (or tools) to use when generating\na response. See the `tools` parameter to see how to specify which tools\nthe model can call."
          },
          "prompt": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Prompt"
              }
            ],
            "nullable": true
          },
          "truncation": {
            "type": "string",
            "enum": [
              "auto",
              "disabled"
            ],
            "nullable": true,
            "description": "The truncation strategy to use for the model response.\n- `auto`: If the context of this response and previous ones exceeds\n  the model's context window size, the model will truncate the\n  response to fit the context window by dropping input items in the\n  middle of the conversation.\n- `disabled` (default): If a model response will exceed the context window\n  size for a model, the request will fail with a 400 error.",
            "default": "disabled"
          },
          "input": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OpenAI.ItemParam"
                    },
                    {
                      "$ref": "#/components/schemas/OpenAI.EasyInputMessage"
                    }
                  ]
                }
              }
            ],
            "description": "Text, image, or file inputs to the model, used to generate a response.\n\nLearn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Image inputs](/docs/guides/images)\n- [File inputs](/docs/guides/pdf-files)\n- [Conversation state](/docs/guides/conversation-state)\n- [Function calling](/docs/guides/function-calling)"
          },
          "include": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.Includable"
            },
            "nullable": true,
            "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `code_interpreter_call.outputs`: Includes the outputs of python code execution\n  in code interpreter tool call items.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `message.output_text.logprobs`: Include logprobs with assistant messages.\n- `reasoning.encrypted_content`: Includes an encrypted version of reasoning\n  tokens in reasoning item outputs. This enables reasoning items to be used in\n  multi-turn conversations when using the Responses API statelessly (like\n  when the `store` parameter is set to `false`, or when an organization is\n  enrolled in the zero data retention program)."
          },
          "parallel_tool_calls": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to allow the model to run tool calls in parallel.",
            "default": true
          },
          "store": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to store the generated model response for later retrieval via\nAPI.",
            "default": true
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "description": "A system (or developer) message inserted into the model's context.\n\nWhen using along with `previous_response_id`, the instructions from a previous\nresponse will not be carried over to the next response. This makes it simple\nto swap out system (or developer) messages in new responses."
          },
          "stream": {
            "type": "boolean",
            "nullable": true,
            "description": "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\nSee the [Streaming section below](/docs/api-reference/responses-streaming)\nfor more information.",
            "default": false
          },
          "conversation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ]
              }
            ]
          },
          "agent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentReference"
              }
            ],
            "description": "The agent to use for generating the response."
          },
          "structured_inputs": {
            "type": "object",
            "additionalProperties": {},
            "description": "The structured inputs to the response that can participate in prompt template substitution or tool argument bindings."
          }
        }
      },
      "OpenAI.DeletedConversationResource": {
        "type": "object",
        "required": [
          "object",
          "deleted",
          "id"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "conversation.deleted"
            ]
          },
          "deleted": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "OpenAI.EasyInputMessage": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OpenAI.ItemContent"
                }
              }
            ]
          }
        }
      },
      "OpenAI.EvalApiError": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The error code."
          },
          "message": {
            "type": "string",
            "description": "The error message."
          }
        },
        "description": "An object representing an error response from the Eval API.",
        "title": "EvalApiError",
        "x-oaiMeta": {
          "name": "The API error object",
          "group": "evals",
          "example": "{\n  \"code\": \"internal_error\",\n  \"message\": \"The eval run failed due to an internal error.\"\n}\n"
        }
      },
      "OpenAI.EvalGraderLabelModel": {
        "type": "object",
        "required": [
          "type",
          "name",
          "model",
          "input",
          "labels",
          "passing_labels"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "label_model"
            ],
            "description": "The object type, which is always `label_model`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "model": {
            "type": "string",
            "description": "The model to use for the evaluation. Must support structured outputs."
          },
          "input": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.EvalItem"
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to each item in the evaluation."
          },
          "passing_labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels that indicate a passing result. Must be a subset of labels."
          }
        },
        "title": "LabelModelGrader"
      },
      "OpenAI.EvalGraderPython": {
        "type": "object",
        "required": [
          "type",
          "name",
          "source"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "python"
            ],
            "description": "The object type, which is always `python`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "source": {
            "type": "string",
            "description": "The source code of the python script."
          },
          "image_tag": {
            "type": "string",
            "description": "The image tag to use for the python script."
          },
          "pass_threshold": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "description": "The threshold for the score."
          }
        },
        "title": "PythonGrader"
      },
      "OpenAI.EvalGraderScoreModel": {
        "type": "object",
        "required": [
          "type",
          "name",
          "model",
          "input"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "score_model"
            ],
            "description": "The object type, which is always `score_model`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "model": {
            "type": "string",
            "description": "The model to use for the evaluation."
          },
          "sampling_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalGraderScoreModelSamplingParams"
              }
            ],
            "description": "The sampling parameters for the model."
          },
          "input": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.EvalItem"
            },
            "description": "The input text. This may include template strings."
          },
          "range": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.numeric"
            },
            "description": "The range of the score. Defaults to `[0, 1]`."
          },
          "pass_threshold": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "description": "The threshold for the score."
          }
        },
        "title": "ScoreModelGrader"
      },
      "OpenAI.EvalGraderScoreModelSamplingParams": {
        "type": "object",
        "properties": {
          "seed": {
            "type": "integer",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "nullable": true
          },
          "top_p": {
            "type": "number",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "nullable": true,
            "default": 1
          },
          "temperature": {
            "type": "number",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "nullable": true
          },
          "max_completions_tokens": {
            "type": "integer",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "nullable": true
          },
          "reasoning_effort": {
            "$ref": "#/components/schemas/OpenAI.ReasoningEffort"
          }
        }
      },
      "OpenAI.EvalGraderStringCheck": {
        "type": "object",
        "required": [
          "type",
          "name",
          "input",
          "reference",
          "operation"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string_check"
            ],
            "description": "The object type, which is always `string_check`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "input": {
            "type": "string",
            "description": "The input text. This may include template strings."
          },
          "reference": {
            "type": "string",
            "description": "The reference text. This may include template strings."
          },
          "operation": {
            "type": "string",
            "enum": [
              "eq",
              "ne",
              "like",
              "ilike"
            ],
            "description": "The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`."
          }
        },
        "title": "StringCheckGrader"
      },
      "OpenAI.EvalGraderTextSimilarity": {
        "type": "object",
        "required": [
          "type",
          "name",
          "input",
          "reference",
          "evaluation_metric",
          "pass_threshold"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text_similarity"
            ],
            "description": "The type of grader.",
            "x-stainless-const": true,
            "default": "text_similarity"
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "input": {
            "type": "string",
            "description": "The text being graded."
          },
          "reference": {
            "type": "string",
            "description": "The text being graded against."
          },
          "evaluation_metric": {
            "type": "string",
            "enum": [
              "cosine",
              "fuzzy_match",
              "bleu",
              "gleu",
              "meteor",
              "rouge_1",
              "rouge_2",
              "rouge_3",
              "rouge_4",
              "rouge_5",
              "rouge_l"
            ],
            "description": "The evaluation metric to use. One of `cosine`, `fuzzy_match`, `bleu`,\n  `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`,\n  or `rouge_l`."
          },
          "pass_threshold": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "description": "The threshold for the score."
          }
        },
        "title": "TextSimilarityGrader"
      },
      "OpenAI.EvalItem": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant",
              "system",
              "developer"
            ],
            "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n  `developer`."
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/OpenAI.ItemContentInputText"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalItemContentOutputText"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalItemContentInputImage"
              },
              {
                "$ref": "#/components/schemas/OpenAI.ItemContentInputAudio"
              },
              {
                "type": "array",
                "items": {}
              }
            ],
            "description": "Inputs to the model - can contain template strings."
          },
          "type": {
            "type": "string",
            "enum": [
              "message"
            ],
            "description": "The type of the message input. Always `message`.",
            "x-stainless-const": true
          }
        },
        "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.",
        "title": "Eval message object"
      },
      "OpenAI.EvalItemContentInputImage": {
        "type": "object",
        "required": [
          "type",
          "image_url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "input_image"
            ],
            "x-stainless-const": true
          },
          "image_url": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          }
        }
      },
      "OpenAI.EvalItemContentOutputText": {
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "output_text"
            ],
            "x-stainless-const": true
          },
          "text": {
            "type": "string"
          }
        }
      },
      "OpenAI.EvalJsonlFileContentSource": {
        "type": "object",
        "required": [
          "type",
          "content"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file_content"
            ],
            "description": "The type of jsonl source. Always `file_content`.",
            "x-stainless-const": true,
            "default": "file_content"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.EvalJsonlFileContentSourceContent"
            },
            "description": "The content of the jsonl file."
          }
        },
        "title": "EvalJsonlFileContentSource"
      },
      "OpenAI.EvalJsonlFileContentSourceContent": {
        "type": "object",
        "required": [
          "item"
        ],
        "properties": {
          "item": {
            "type": "object",
            "additionalProperties": {}
          },
          "sample": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "OpenAI.EvalJsonlFileIdSource": {
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file_id"
            ],
            "description": "The type of jsonl source. Always `file_id`.",
            "x-stainless-const": true,
            "default": "file_id"
          },
          "id": {
            "type": "string",
            "description": "The identifier of the file."
          }
        },
        "title": "EvalJsonlFileIdSource"
      },
      "OpenAI.EvalResponsesSource": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "responses"
            ],
            "description": "The type of run data source. Always `responses`."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "model": {
            "type": "string",
            "nullable": true
          },
          "instructions_search": {
            "type": "string",
            "nullable": true
          },
          "created_after": {
            "type": "integer",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "nullable": true
          },
          "created_before": {
            "type": "integer",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "nullable": true
          },
          "reasoning_effort": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ReasoningEffort"
              }
            ],
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "nullable": true
          },
          "top_p": {
            "type": "number",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.numeric"
              }
            ],
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tools": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "description": "A EvalResponsesSource object describing a run data source configuration.",
        "title": "EvalResponsesSource",
        "x-oaiMeta": {
          "name": "The run data source object used to configure an individual run",
          "group": "eval runs",
          "example": "{\n  \"type\": \"responses\",\n  \"model\": \"gpt-4o-mini-2024-07-18\",\n  \"temperature\": 0.7,\n  \"top_p\": 1.0,\n  \"users\": [\"user1\", \"user2\"],\n  \"tools\": [\"tool1\", \"tool2\"],\n  \"instructions_search\": \"You are a coding assistant\"\n}\n"
        }
      },
      "OpenAI.EvalRunOutputItemSample": {
        "type": "object",
        "required": [
          "input",
          "output",
          "finish_reason",
          "model",
          "usage",
          "error",
          "temperature",
          "max_completion_tokens",
          "top_p",
          "seed"
        ],
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.EvalRunOutputItemSampleInput"
            }
          },
          "output": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.EvalRunOutputItemSampleOutput"
            }
          },
          "finish_reason": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/OpenAI.EvalRunOutputItemSampleUsage"
          },
          "error": {
            "$ref": "#/components/schemas/OpenAI.EvalApiError"
          },
          "temperature": {
            "$ref": "#/components/schemas/OpenAI.numeric"
          },
          "max_completion_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "top_p": {
            "$ref": "#/components/schemas/OpenAI.numeric"
          },
          "seed": {
            "$ref": "#/components/schemas/OpenAI.integer"
          }
        }
      },
      "OpenAI.EvalRunOutputItemSampleInput": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "OpenAI.EvalRunOutputItemSampleOutput": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "OpenAI.EvalRunOutputItemSampleUsage": {
        "type": "object",
        "required": [
          "total_tokens",
          "completion_tokens",
          "prompt_tokens",
          "cached_tokens"
        ],
        "properties": {
          "total_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "completion_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "prompt_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "cached_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          }
        }
      },
      "OpenAI.EvalRunPerModelUsage": {
        "type": "object",
        "required": [
          "model_name",
          "invocation_count",
          "prompt_tokens",
          "completion_tokens",
          "total_tokens",
          "cached_tokens"
        ],
        "properties": {
          "model_name": {
            "type": "string",
            "x-stainless-naming": {
              "python": {
                "property_name": "run_model_name"
              }
            }
          },
          "invocation_count": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "prompt_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "completion_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "total_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "cached_tokens": {
            "$ref": "#/components/schemas/OpenAI.integer"
          }
        }
      },
      "OpenAI.EvalRunPerTestingCriteriaResults": {
        "type": "object",
        "required": [
          "testing_criteria",
          "passed",
          "failed"
        ],
        "properties": {
          "testing_criteria": {
            "type": "string"
          },
          "passed": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "failed": {
            "$ref": "#/components/schemas/OpenAI.integer"
          }
        }
      },
      "OpenAI.EvalRunResultCounts": {
        "type": "object",
        "required": [
          "total",
          "errored",
          "failed",
          "passed"
        ],
        "properties": {
          "total": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "errored": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "failed": {
            "$ref": "#/components/schemas/OpenAI.integer"
          },
          "passed": {
            "$ref": "#/components/schemas/OpenAI.integer"
          }
        }
      },
      "OpenAI.EvalStoredCompletionsSource": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "stored_completions"
            ],
            "description": "The type of source. Always `stored_completions`.",
            "x-stainless-const": true,
            "default": "stored_completions"
          },
          "metadata": {
            "$ref": "#/components/schemas/OpenAI.Metadata"
          },
          "model": {
            "type": "string",
            "nullable": true
          },
          "created_after": {
            "type": "integer",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "nullable": true
          },
          "created_before": {
            "type": "integer",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.integer"
              }
            ],
            "nullable": true
          }
        },
        "description": "A StoredCompletionsRunDataSource configuration describing a set of filters",
        "title": "StoredCompletionsRunDataSource",
        "x-oaiMeta": {
          "name": "The stored completions data source object used to configure an individual run",
          "group": "eval runs",
          "example": "{\n  \"type\": \"stored_completions\",\n  \"model\": \"gpt-4o\",\n  \"created_after\": 1668124800,\n  \"created_before\": 1668124900,\n  \"limit\": 100,\n  \"metadata\": {}\n}\n"
        }
      },
      "OpenAI.FileSearchTool": {
        "type": "object",
        "required": [
          "type",
          "vector_store_ids"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file_search"
            ],
            "description": "The type of the file search tool. Always `file_search`."
          },
          "vector_store_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The IDs of the vector stores to search."
          },
          "max_num_results": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of results to return. This number should be between 1 and 50 inclusive."
          },
          "ranking_options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.RankingOptions"
              }
            ],
            "description": "Ranking options for search."
          },
          "filters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Filters"
              }
            ],
            "nullable": true,
            "description": "A filter to apply."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "A tool that searches for relevant content from uploaded files. Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search)."
      },
      "OpenAI.FileSearchToolCallItemParam": {
        "type": "object",
        "required": [
          "type",
          "queries"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file_search_call"
            ]
          },
          "queries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The queries used to search for files."
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "The unique ID of the file."
                },
                "text": {
                  "type": "string",
                  "description": "The text that was retrieved from the file."
                },
                "filename": {
                  "type": "string",
                  "description": "The name of the file."
                },
                "attributes": {
                  "$ref": "#/components/schemas/OpenAI.VectorStoreFileAttributes"
                },
                "score": {
                  "type": "number",
                  "format": "float",
                  "description": "The relevance score of the file - a value between 0 and 1."
                }
              }
            },
            "nullable": true,
            "description": "The results of the file search tool call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "The results of a file search tool call. See the\n[file search guide](/docs/guides/tools-file-search) for more information.\n"
      },
      "OpenAI.FileSearchToolCallItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "queries"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file_search_call"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "searching",
              "completed",
              "incomplete",
              "failed"
            ],
            "description": "The status of the file search tool call. One of `in_progress`,\n`searching`, `incomplete` or `failed`,"
          },
          "queries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The queries used to search for files."
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "The unique ID of the file."
                },
                "text": {
                  "type": "string",
                  "description": "The text that was retrieved from the file."
                },
                "filename": {
                  "type": "string",
                  "description": "The name of the file."
                },
                "attributes": {
                  "$ref": "#/components/schemas/OpenAI.VectorStoreFileAttributes"
                },
                "score": {
                  "type": "number",
                  "format": "float",
                  "description": "The relevance score of the file - a value between 0 and 1."
                }
              }
            },
            "nullable": true,
            "description": "The results of the file search tool call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "The results of a file search tool call. See the\n[file search guide](/docs/guides/tools-file-search) for more information.\n"
      },
      "OpenAI.Filters": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ComparisonFilter"
          },
          {
            "$ref": "#/components/schemas/OpenAI.CompoundFilter"
          }
        ]
      },
      "OpenAI.FineTuneDPOHyperparameters": {
        "type": "object",
        "properties": {
          "beta": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "number",
                "format": "float"
              }
            ],
            "description": "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.",
            "default": "auto"
          },
          "batch_size": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "integer",
                "format": "int32"
              }
            ],
            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.",
            "default": "auto"
          },
          "learning_rate_multiplier": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "number",
                "format": "float"
              }
            ],
            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.",
            "default": "auto"
          },
          "n_epochs": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "integer",
                "format": "int32"
              }
            ],
            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.",
            "default": "auto"
          }
        },
        "description": "The hyperparameters used for the DPO fine-tuning job."
      },
      "OpenAI.FineTuneDPOMethod": {
        "type": "object",
        "properties": {
          "hyperparameters": {
            "$ref": "#/components/schemas/OpenAI.FineTuneDPOHyperparameters"
          }
        },
        "description": "Configuration for the DPO fine-tuning method."
      },
      "OpenAI.FineTuneMethod": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "supervised",
              "dpo",
              "reinforcement"
            ],
            "description": "The type of method. Is either `supervised`, `dpo`, or `reinforcement`."
          },
          "supervised": {
            "$ref": "#/components/schemas/OpenAI.FineTuneSupervisedMethod"
          },
          "dpo": {
            "$ref": "#/components/schemas/OpenAI.FineTuneDPOMethod"
          },
          "reinforcement": {
            "$ref": "#/components/schemas/OpenAI.FineTuneReinforcementMethod"
          }
        },
        "description": "The method used for fine-tuning."
      },
      "OpenAI.FineTuneReinforcementHyperparameters": {
        "type": "object",
        "properties": {
          "batch_size": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "integer",
                "format": "int32"
              }
            ],
            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.",
            "default": "auto"
          },
          "learning_rate_multiplier": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "number",
                "format": "float"
              }
            ],
            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.",
            "default": "auto"
          },
          "n_epochs": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "integer",
                "format": "int32"
              }
            ],
            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.",
            "default": "auto"
          },
          "reasoning_effort": {
            "type": "string",
            "enum": [
              "default",
              "low",
              "medium",
              "high"
            ],
            "description": "Level of reasoning effort.",
            "default": "default"
          },
          "compute_multiplier": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "number",
                "format": "float"
              }
            ],
            "description": "Multiplier on amount of compute used for exploring search space during training.",
            "default": "auto"
          },
          "eval_interval": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "integer",
                "format": "int32"
              }
            ],
            "description": "The number of training steps between evaluation runs.",
            "default": "auto"
          },
          "eval_samples": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "integer",
                "format": "int32"
              }
            ],
            "description": "Number of evaluation samples to generate per training step.",
            "default": "auto"
          }
        },
        "description": "The hyperparameters used for the reinforcement fine-tuning job."
      },
      "OpenAI.FineTuneReinforcementMethod": {
        "type": "object",
        "required": [
          "grader"
        ],
        "properties": {
          "grader": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.GraderStringCheck"
              },
              {
                "$ref": "#/components/schemas/OpenAI.GraderTextSimilarity"
              },
              {
                "$ref": "#/components/schemas/OpenAI.GraderPython"
              },
              {
                "$ref": "#/components/schemas/OpenAI.GraderScoreModel"
              },
              {
                "$ref": "#/components/schemas/OpenAI.GraderMulti"
              }
            ],
            "description": "The grader used for the fine-tuning job."
          },
          "hyperparameters": {
            "$ref": "#/components/schemas/OpenAI.FineTuneReinforcementHyperparameters"
          }
        },
        "description": "Configuration for the reinforcement fine-tuning method."
      },
      "OpenAI.FineTuneSupervisedHyperparameters": {
        "type": "object",
        "properties": {
          "batch_size": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "integer",
                "format": "int32"
              }
            ],
            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.",
            "default": "auto"
          },
          "learning_rate_multiplier": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "number",
                "format": "float"
              }
            ],
            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.",
            "default": "auto"
          },
          "n_epochs": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              {
                "type": "integer",
                "format": "int32"
              }
            ],
            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.",
            "default": "auto"
          }
        },
        "description": "The hyperparameters used for the fine-tuning job."
      },
      "OpenAI.FineTuneSupervisedMethod": {
        "type": "object",
        "properties": {
          "hyperparameters": {
            "$ref": "#/components/schemas/OpenAI.FineTuneSupervisedHyperparameters"
          }
        },
        "description": "Configuration for the supervised fine-tuning method."
      },
      "OpenAI.FineTuningIntegration": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "wandb"
                ]
              }
            ]
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "wandb": "#/components/schemas/OpenAI.FineTuningIntegrationWandb"
          }
        }
      },
      "OpenAI.FineTuningIntegrationWandb": {
        "type": "object",
        "required": [
          "type",
          "wandb"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wandb"
            ],
            "description": "The type of the integration being enabled for the fine-tuning job"
          },
          "wandb": {
            "type": "object",
            "properties": {
              "project": {
                "type": "string",
                "description": "The name of the project that the new run will be created under."
              },
              "name": {
                "type": "string",
                "nullable": true,
                "description": "A display name to set for the run. If not set, we will use the Job ID as the name."
              },
              "entity": {
                "type": "string",
                "nullable": true,
                "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used."
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\"."
              }
            },
            "required": [
              "project"
            ],
            "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.FineTuningIntegration"
          }
        ]
      },
      "OpenAI.FineTuningJob": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "error",
          "fine_tuned_model",
          "finished_at",
          "hyperparameters",
          "model",
          "object",
          "organization_id",
          "result_files",
          "status",
          "trained_tokens",
          "training_file",
          "validation_file",
          "seed",
          "metadata"
        ],
        "properties": {
          "user_provided_suffix": {
            "type": "string",
            "nullable": true,
            "description": "The descriptive suffix applied to the job, as specified in the job creation request."
          },
          "id": {
            "type": "string",
            "description": "The object identifier, which can be referenced in the API endpoints."
          },
          "created_at": {
            "type": "integer",
            "format": "unixtime",
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "A machine-readable error code."
              },
              "message": {
                "type": "string",
                "description": "A human-readable error message."
              },
              "param": {
                "type": "string",
                "nullable": true,
                "description": "The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific."
              }
            },
            "required": [
              "code",
              "message",
              "param"
            ],
            "nullable": true,
            "description": "For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure."
          },
          "fine_tuned_model": {
            "type": "string",
            "nullable": true,
            "description": "The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running."
          },
          "finished_at": {
            "type": "integer",
            "format": "unixtime",
            "nullable": true,
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running."
          },
          "hyperparameters": {
            "type": "object",
            "properties": {
              "batch_size": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  }
                ],
                "nullable": true,
                "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.",
                "default": "auto"
              },
              "learning_rate_multiplier": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ],
                "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.",
                "default": "auto"
              },
              "n_epochs": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  }
                ],
                "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.",
                "default": "auto"
              }
            },
            "description": "The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs."
          },
          "model": {
            "type": "string",
            "description": "The base model that is being fine-tuned."
          },
          "object": {
            "type": "string",
            "enum": [
              "fine_tuning.job"
            ],
            "description": "The object type, which is always \"fine_tuning.job\"."
          },
          "organization_id": {
            "type": "string",
            "description": "The organization that owns the fine-tuning job."
          },
          "result_files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents)."
          },
          "status": {
            "type": "string",
            "enum": [
              "validating_files",
              "queued",
              "running",
              "succeeded",
              "failed",
              "cancelled"
            ],
            "description": "The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`."
          },
          "trained_tokens": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running."
          },
          "training_file": {
            "type": "string",
            "description": "The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents)."
          },
          "validation_file": {
            "type": "string",
            "nullable": true,
            "description": "The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents)."
          },
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.FineTuningIntegration"
            },
            "nullable": true,
            "description": "A list of integrations to enable for this fine-tuning job."
          },
          "seed": {
            "type": "integer",
            "format": "int32",
            "description": "The seed used for the fine-tuning job."
          },
          "estimated_finish": {
            "type": "integer",
            "format": "unixtime",
            "nullable": true,
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running."
          },
          "method": {
            "$ref": "#/components/schemas/OpenAI.FineTuneMethod"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          }
        },
        "description": "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API."
      },
      "OpenAI.FineTuningJobCheckpoint": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "fine_tuned_model_checkpoint",
          "step_number",
          "metrics",
          "fine_tuning_job_id",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The checkpoint identifier, which can be referenced in the API endpoints."
          },
          "created_at": {
            "type": "integer",
            "format": "unixtime",
            "description": "The Unix timestamp (in seconds) for when the checkpoint was created."
          },
          "fine_tuned_model_checkpoint": {
            "type": "string",
            "description": "The name of the fine-tuned checkpoint model that is created."
          },
          "step_number": {
            "type": "integer",
            "format": "int32",
            "description": "The step number that the checkpoint was created at."
          },
          "metrics": {
            "type": "object",
            "properties": {
              "step": {
                "type": "number",
                "format": "float"
              },
              "train_loss": {
                "type": "number",
                "format": "float"
              },
              "train_mean_token_accuracy": {
                "type": "number",
                "format": "float"
              },
              "valid_loss": {
                "type": "number",
                "format": "float"
              },
              "valid_mean_token_accuracy": {
                "type": "number",
                "format": "float"
              },
              "full_valid_loss": {
                "type": "number",
                "format": "float"
              },
              "full_valid_mean_token_accuracy": {
                "type": "number",
                "format": "float"
              }
            },
            "description": "Metrics at the step number during the fine-tuning job."
          },
          "fine_tuning_job_id": {
            "type": "string",
            "description": "The name of the fine-tuning job that this checkpoint was created from."
          },
          "object": {
            "type": "string",
            "enum": [
              "fine_tuning.job.checkpoint"
            ],
            "description": "The object type, which is always \"fine_tuning.job.checkpoint\"."
          }
        },
        "description": "The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use."
      },
      "OpenAI.FineTuningJobEvent": {
        "type": "object",
        "required": [
          "object",
          "id",
          "created_at",
          "level",
          "message"
        ],
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "fine_tuning.job.event"
            ],
            "description": "The object type, which is always \"fine_tuning.job.event\"."
          },
          "id": {
            "type": "string",
            "description": "The object identifier."
          },
          "created_at": {
            "type": "integer",
            "format": "unixtime",
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
          },
          "level": {
            "type": "string",
            "enum": [
              "info",
              "warn",
              "error"
            ],
            "description": "The log level of the event."
          },
          "message": {
            "type": "string",
            "description": "The message of the event."
          },
          "type": {
            "type": "string",
            "enum": [
              "message",
              "metrics"
            ],
            "description": "The type of event."
          },
          "data": {
            "description": "The data associated with the event."
          }
        },
        "description": "Fine-tuning job event object"
      },
      "OpenAI.FunctionObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "parameters": {
            "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.\n\nOmitting `parameters` defines a function with an empty parameter list."
          },
          "strict": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).",
            "default": false
          }
        }
      },
      "OpenAI.FunctionTool": {
        "type": "object",
        "required": [
          "type",
          "name",
          "parameters",
          "strict"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the function tool. Always `function`."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A description of the function. Used by the model to determine whether or not to call the function."
          },
          "parameters": {
            "nullable": true,
            "description": "A JSON schema object describing the parameters of the function."
          },
          "strict": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to enforce strict parameter validation. Default `true`."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "Defines a function in your own code the model can choose to call. Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling)."
      },
      "OpenAI.FunctionToolCallItemParam": {
        "type": "object",
        "required": [
          "type",
          "call_id",
          "name",
          "arguments"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function_call"
            ]
          },
          "call_id": {
            "type": "string",
            "description": "The unique ID of the function tool call generated by the model."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to run."
          },
          "arguments": {
            "type": "string",
            "description": "A JSON string of the arguments to pass to the function."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "A tool call to run a function. See the\n[function calling guide](/docs/guides/function-calling) for more information.\n"
      },
      "OpenAI.FunctionToolCallItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "call_id",
          "name",
          "arguments"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function_call"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "incomplete"
            ],
            "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API."
          },
          "call_id": {
            "type": "string",
            "description": "The unique ID of the function tool call generated by the model."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to run."
          },
          "arguments": {
            "type": "string",
            "description": "A JSON string of the arguments to pass to the function."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "A tool call to run a function. See the\n[function calling guide](/docs/guides/function-calling) for more information.\n"
      },
      "OpenAI.FunctionToolCallOutputItemParam": {
        "type": "object",
        "required": [
          "type",
          "call_id",
          "output"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function_call_output"
            ]
          },
          "call_id": {
            "type": "string",
            "description": "The unique ID of the function tool call generated by the model."
          },
          "output": {
            "type": "string",
            "description": "A JSON string of the output of the function tool call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "The output of a function tool call.\n"
      },
      "OpenAI.FunctionToolCallOutputItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "call_id",
          "output"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function_call_output"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "incomplete"
            ],
            "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API."
          },
          "call_id": {
            "type": "string",
            "description": "The unique ID of the function tool call generated by the model."
          },
          "output": {
            "type": "string",
            "description": "A JSON string of the output of the function tool call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "The output of a function tool call.\n"
      },
      "OpenAI.GraderLabelModel": {
        "type": "object",
        "required": [
          "type",
          "name",
          "model",
          "input",
          "labels",
          "passing_labels"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "label_model"
            ],
            "description": "The object type, which is always `label_model`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "model": {
            "type": "string",
            "description": "The model to use for the evaluation. Must support structured outputs."
          },
          "input": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.EvalItem"
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to each item in the evaluation."
          },
          "passing_labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels that indicate a passing result. Must be a subset of labels."
          }
        },
        "description": "A LabelModelGrader object which uses a model to assign labels to each item\nin the evaluation.",
        "title": "LabelModelGrader",
        "x-oaiMeta": {
          "name": "Label Model Grader",
          "group": "graders",
          "example": "{\n  \"name\": \"First label grader\",\n  \"type\": \"label_model\",\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"input\": [\n    {\n      \"type\": \"message\",\n      \"role\": \"system\",\n      \"content\": {\n        \"type\": \"input_text\",\n        \"text\": \"Classify the sentiment of the following statement as one of positive, neutral, or negative\"\n      }\n    },\n    {\n      \"type\": \"message\",\n      \"role\": \"user\",\n      \"content\": {\n        \"type\": \"input_text\",\n        \"text\": \"Statement: {{item.response}}\"\n      }\n    }\n  ],\n  \"passing_labels\": [\n    \"positive\"\n  ],\n  \"labels\": [\n    \"positive\",\n    \"neutral\",\n    \"negative\"\n  ]\n}\n"
        }
      },
      "OpenAI.GraderMulti": {
        "type": "object",
        "required": [
          "type",
          "name",
          "graders",
          "calculate_output"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "multi"
            ],
            "description": "The object type, which is always `multi`.",
            "x-stainless-const": true,
            "default": "multi"
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "graders": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.GraderStringCheck"
              },
              {
                "$ref": "#/components/schemas/OpenAI.GraderTextSimilarity"
              },
              {
                "$ref": "#/components/schemas/OpenAI.GraderPython"
              },
              {
                "$ref": "#/components/schemas/OpenAI.GraderScoreModel"
              },
              {
                "$ref": "#/components/schemas/OpenAI.GraderLabelModel"
              }
            ]
          },
          "calculate_output": {
            "type": "string",
            "description": "A formula to calculate the output based on grader results."
          }
        },
        "description": "A MultiGrader object combines the output of multiple graders to produce a single score.",
        "title": "MultiGrader",
        "x-oaiMeta": {
          "name": "Multi Grader",
          "group": "graders",
          "example": "{\n  \"type\": \"multi\",\n  \"name\": \"example multi grader\",\n  \"graders\": [\n    {\n      \"type\": \"text_similarity\",\n      \"name\": \"example text similarity grader\",\n      \"input\": \"The graded text\",\n      \"reference\": \"The reference text\",\n      \"evaluation_metric\": \"fuzzy_match\"\n    },\n    {\n      \"type\": \"string_check\",\n      \"name\": \"Example string check grader\",\n      \"input\": \"{{sample.output_text}}\",\n      \"reference\": \"{{item.label}}\",\n      \"operation\": \"eq\"\n    }\n  ],\n  \"calculate_output\": \"0.5 * text_similarity_score +  0.5 * string_check_score)\"\n}\n"
        }
      },
      "OpenAI.GraderPython": {
        "type": "object",
        "required": [
          "type",
          "name",
          "source"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "python"
            ],
            "description": "The object type, which is always `python`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "source": {
            "type": "string",
            "description": "The source code of the python script."
          },
          "image_tag": {
            "type": "string",
            "description": "The image tag to use for the python script."
          }
        },
        "description": "A PythonGrader object that runs a python script on the input.",
        "title": "PythonGrader",
        "x-oaiMeta": {
          "name": "Python Grader",
          "group": "graders",
          "example": "{\n  \"type\": \"python\",\n  \"name\": \"Example python grader\",\n  \"image_tag\": \"2025-05-08\",\n  \"source\": \"\"\"\ndef grade(sample: dict, item: dict) -> float:\n    \\\"\"\"\n    Returns 1.0 if `output_text` equals `label`, otherwise 0.0.\n    \\\"\"\"\n    output = sample.get(\"output_text\")\n    label = item.get(\"label\")\n    return 1.0 if output == label else 0.0\n\"\"\",\n}\n"
        }
      },
      "OpenAI.GraderScoreModel": {
        "type": "object",
        "required": [
          "type",
          "name",
          "model",
          "input"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "score_model"
            ],
            "description": "The object type, which is always `score_model`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "model": {
            "type": "string",
            "description": "The model to use for the evaluation."
          },
          "sampling_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalGraderScoreModelSamplingParams"
              }
            ],
            "description": "The sampling parameters for the model."
          },
          "input": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.EvalItem"
            },
            "description": "The input text. This may include template strings."
          },
          "range": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.numeric"
            },
            "description": "The range of the score. Defaults to `[0, 1]`."
          }
        },
        "description": "A ScoreModelGrader object that uses a model to assign a score to the input.",
        "title": "ScoreModelGrader",
        "x-oaiMeta": {
          "name": "Score Model Grader",
          "group": "graders",
          "example": "{\n    \"type\": \"score_model\",\n    \"name\": \"Example score model grader\",\n    \"input\": [\n        {\n            \"role\": \"user\",\n            \"content\": (\n                \"Score how close the reference answer is to the model answer. Score 1.0 if they are the same and 0.0 if they are different.\"\n                \" Return just a floating point score\\n\\n\"\n                \" Reference answer: {{item.label}}\\n\\n\"\n                \" Model answer: {{sample.output_text}}\"\n            ),\n        }\n    ],\n    \"model\": \"o4-mini-2025-04-16\",\n    \"sampling_params\": {\n        \"temperature\": 1,\n        \"top_p\": 1,\n        \"seed\": 42,\n        \"max_completions_tokens\": 32768,\n        \"reasoning_effort\": \"medium\"\n    },\n}\n"
        }
      },
      "OpenAI.GraderStringCheck": {
        "type": "object",
        "required": [
          "type",
          "name",
          "input",
          "reference",
          "operation"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string_check"
            ],
            "description": "The object type, which is always `string_check`.",
            "x-stainless-const": true
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "input": {
            "type": "string",
            "description": "The input text. This may include template strings."
          },
          "reference": {
            "type": "string",
            "description": "The reference text. This may include template strings."
          },
          "operation": {
            "type": "string",
            "enum": [
              "eq",
              "ne",
              "like",
              "ilike"
            ],
            "description": "The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`."
          }
        },
        "description": "A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.",
        "title": "StringCheckGrader",
        "x-oaiMeta": {
          "name": "String Check Grader",
          "group": "graders",
          "example": "{\n  \"type\": \"string_check\",\n  \"name\": \"Example string check grader\",\n  \"input\": \"{{sample.output_text}}\",\n  \"reference\": \"{{item.label}}\",\n  \"operation\": \"eq\"\n}\n"
        }
      },
      "OpenAI.GraderTextSimilarity": {
        "type": "object",
        "required": [
          "type",
          "name",
          "input",
          "reference",
          "evaluation_metric"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text_similarity"
            ],
            "description": "The type of grader.",
            "x-stainless-const": true,
            "default": "text_similarity"
          },
          "name": {
            "type": "string",
            "description": "The name of the grader."
          },
          "input": {
            "type": "string",
            "description": "The text being graded."
          },
          "reference": {
            "type": "string",
            "description": "The text being graded against."
          },
          "evaluation_metric": {
            "type": "string",
            "enum": [
              "cosine",
              "fuzzy_match",
              "bleu",
              "gleu",
              "meteor",
              "rouge_1",
              "rouge_2",
              "rouge_3",
              "rouge_4",
              "rouge_5",
              "rouge_l"
            ],
            "description": "The evaluation metric to use. One of `cosine`, `fuzzy_match`, `bleu`,\n  `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`,\n  or `rouge_l`."
          }
        },
        "description": "A TextSimilarityGrader object which grades text based on similarity metrics.",
        "title": "TextSimilarityGrader",
        "x-oaiMeta": {
          "name": "Text Similarity Grader",
          "group": "graders",
          "example": "{\n  \"type\": \"text_similarity\",\n  \"name\": \"Example text similarity grader\",\n  \"input\": \"{{sample.output_text}}\",\n  \"reference\": \"{{item.label}}\",\n  \"evaluation_metric\": \"fuzzy_match\"\n}\n"
        }
      },
      "OpenAI.ImageGenTool": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_generation"
            ],
            "description": "The type of the image generation tool. Always `image_generation`."
          },
          "model": {
            "type": "string",
            "enum": [
              "gpt-image-1"
            ],
            "description": "The image generation model to use. Default: `gpt-image-1`.",
            "default": "gpt-image-1"
          },
          "quality": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "auto"
            ],
            "description": "The quality of the generated image. One of `low`, `medium`, `high`,\nor `auto`. Default: `auto`.",
            "default": "auto"
          },
          "size": {
            "type": "string",
            "enum": [
              "1024x1024",
              "1024x1536",
              "1536x1024",
              "auto"
            ],
            "description": "The size of the generated image. One of `1024x1024`, `1024x1536`,\n`1536x1024`, or `auto`. Default: `auto`.",
            "default": "auto"
          },
          "output_format": {
            "type": "string",
            "enum": [
              "png",
              "webp",
              "jpeg"
            ],
            "description": "The output format of the generated image. One of `png`, `webp`, or\n`jpeg`. Default: `png`.",
            "default": "png"
          },
          "output_compression": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "description": "Compression level for the output image. Default: 100.",
            "default": 100
          },
          "moderation": {
            "type": "string",
            "enum": [
              "auto",
              "low"
            ],
            "description": "Moderation level for the generated image. Default: `auto`.",
            "default": "auto"
          },
          "background": {
            "type": "string",
            "enum": [
              "transparent",
              "opaque",
              "auto"
            ],
            "description": "Background type for the generated image. One of `transparent`,\n`opaque`, or `auto`. Default: `auto`.",
            "default": "auto"
          },
          "input_image_mask": {
            "type": "object",
            "properties": {
              "image_url": {
                "type": "string",
                "description": "Base64-encoded mask image."
              },
              "file_id": {
                "type": "string",
                "description": "File ID for the mask image."
              }
            },
            "description": "Optional mask for inpainting. Contains `image_url`\n(string, optional) and `file_id` (string, optional)."
          },
          "partial_images": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 3,
            "description": "Number of partial images to generate in streaming mode, from 0 (default value) to 3.",
            "default": 0
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "A tool that generates images using a model like `gpt-image-1`."
      },
      "OpenAI.ImageGenToolCallItemParam": {
        "type": "object",
        "required": [
          "type",
          "result"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_generation_call"
            ]
          },
          "result": {
            "type": "string",
            "nullable": true,
            "description": "The generated image encoded in base64."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "An image generation request made by the model.\n"
      },
      "OpenAI.ImageGenToolCallItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "result"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_generation_call"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "generating",
              "failed"
            ]
          },
          "result": {
            "type": "string",
            "nullable": true,
            "description": "The generated image encoded in base64."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "An image generation request made by the model.\n"
      },
      "OpenAI.Includable": {
        "type": "string",
        "enum": [
          "code_interpreter_call.outputs",
          "computer_call_output.output.image_url",
          "file_search_call.results",
          "message.input_image.image_url",
          "message.output_text.logprobs",
          "reasoning.encrypted_content",
          "web_search_call.results",
          "web_search_call.action.sources",
          "memory_search_call.results"
        ],
        "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `code_interpreter_call.outputs`: Includes the outputs of python code execution\n  in code interpreter tool call items.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `message.output_text.logprobs`: Include logprobs with assistant messages.\n- `reasoning.encrypted_content`: Includes an encrypted version of reasoning\n  tokens in reasoning item outputs. This enables reasoning items to be used in\n  multi-turn conversations when using the Responses API statelessly (like\n  when the `store` parameter is set to `false`, or when an organization is\n  enrolled in the zero data retention program)."
      },
      "OpenAI.ItemContent": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.ItemContentType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "input_audio": "#/components/schemas/OpenAI.ItemContentInputAudio",
            "output_audio": "#/components/schemas/OpenAI.ItemContentOutputAudio",
            "refusal": "#/components/schemas/OpenAI.ItemContentRefusal",
            "input_text": "#/components/schemas/OpenAI.ItemContentInputText",
            "input_image": "#/components/schemas/OpenAI.ItemContentInputImage",
            "input_file": "#/components/schemas/OpenAI.ItemContentInputFile",
            "output_text": "#/components/schemas/OpenAI.ItemContentOutputText"
          }
        }
      },
      "OpenAI.ItemContentInputAudio": {
        "type": "object",
        "required": [
          "type",
          "data",
          "format"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "input_audio"
            ],
            "description": "The type of the input item. Always `input_audio`."
          },
          "data": {
            "type": "string",
            "description": "Base64-encoded audio data."
          },
          "format": {
            "type": "string",
            "enum": [
              "mp3",
              "wav"
            ],
            "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemContent"
          }
        ],
        "description": "An audio input to the model."
      },
      "OpenAI.ItemContentInputFile": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "input_file"
            ],
            "description": "The type of the input item. Always `input_file`."
          },
          "file_id": {
            "type": "string",
            "nullable": true,
            "description": "The ID of the file to be sent to the model."
          },
          "filename": {
            "type": "string",
            "description": "The name of the file to be sent to the model."
          },
          "file_data": {
            "type": "string",
            "description": "The content of the file to be sent to the model."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemContent"
          }
        ],
        "description": "A file input to the model."
      },
      "OpenAI.ItemContentInputImage": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "input_image"
            ],
            "description": "The type of the input item. Always `input_image`."
          },
          "image_url": {
            "type": "string",
            "nullable": true,
            "description": "The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL."
          },
          "file_id": {
            "type": "string",
            "nullable": true,
            "description": "The ID of the file to be sent to the model."
          },
          "detail": {
            "type": "string",
            "enum": [
              "low",
              "high",
              "auto"
            ],
            "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.",
            "default": "auto"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemContent"
          }
        ],
        "description": "An image input to the model. Learn about [image inputs](/docs/guides/vision)."
      },
      "OpenAI.ItemContentInputText": {
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "input_text"
            ],
            "description": "The type of the input item. Always `input_text`."
          },
          "text": {
            "type": "string",
            "description": "The text input to the model."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemContent"
          }
        ],
        "description": "A text input to the model."
      },
      "OpenAI.ItemContentOutputAudio": {
        "type": "object",
        "required": [
          "type",
          "data",
          "transcript"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "output_audio"
            ],
            "description": "The type of the output audio. Always `output_audio`."
          },
          "data": {
            "type": "string",
            "description": "Base64-encoded audio data from the model."
          },
          "transcript": {
            "type": "string",
            "description": "The transcript of the audio data from the model."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemContent"
          }
        ],
        "description": "An audio output from the model."
      },
      "OpenAI.ItemContentOutputText": {
        "type": "object",
        "required": [
          "type",
          "text",
          "annotations"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "output_text"
            ],
            "description": "The type of the output text. Always `output_text`."
          },
          "text": {
            "type": "string",
            "description": "The text output from the model."
          },
          "annotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.Annotation"
            },
            "description": "The annotations of the text output."
          },
          "logprobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.LogProb"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemContent"
          }
        ],
        "description": "A text output from the model."
      },
      "OpenAI.ItemContentRefusal": {
        "type": "object",
        "required": [
          "type",
          "refusal"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "refusal"
            ],
            "description": "The type of the refusal. Always `refusal`."
          },
          "refusal": {
            "type": "string",
            "description": "The refusal explanationfrom the model."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemContent"
          }
        ],
        "description": "A refusal from the model."
      },
      "OpenAI.ItemContentType": {
        "type": "string",
        "enum": [
          "input_text",
          "input_audio",
          "input_image",
          "input_file",
          "output_text",
          "output_audio",
          "refusal"
        ],
        "description": "Multi-modal input and output contents."
      },
      "OpenAI.ItemParam": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.ItemType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "message": "#/components/schemas/OpenAI.ResponsesMessageItemParam",
            "function_call_output": "#/components/schemas/OpenAI.FunctionToolCallOutputItemParam",
            "file_search_call": "#/components/schemas/OpenAI.FileSearchToolCallItemParam",
            "computer_call": "#/components/schemas/OpenAI.ComputerToolCallItemParam",
            "computer_call_output": "#/components/schemas/OpenAI.ComputerToolCallOutputItemParam",
            "web_search_call": "#/components/schemas/OpenAI.WebSearchToolCallItemParam",
            "function_call": "#/components/schemas/OpenAI.FunctionToolCallItemParam",
            "reasoning": "#/components/schemas/OpenAI.ReasoningItemParam",
            "item_reference": "#/components/schemas/OpenAI.ItemReferenceItemParam",
            "image_generation_call": "#/components/schemas/OpenAI.ImageGenToolCallItemParam",
            "code_interpreter_call": "#/components/schemas/OpenAI.CodeInterpreterToolCallItemParam",
            "local_shell_call": "#/components/schemas/OpenAI.LocalShellToolCallItemParam",
            "local_shell_call_output": "#/components/schemas/OpenAI.LocalShellToolCallOutputItemParam",
            "mcp_list_tools": "#/components/schemas/OpenAI.MCPListToolsItemParam",
            "mcp_approval_request": "#/components/schemas/OpenAI.MCPApprovalRequestItemParam",
            "mcp_approval_response": "#/components/schemas/OpenAI.MCPApprovalResponseItemParam",
            "mcp_call": "#/components/schemas/OpenAI.MCPCallItemParam",
            "memory_search_call": "#/components/schemas/MemorySearchToolCallItemParam"
          }
        },
        "description": "Content item used to generate a response."
      },
      "OpenAI.ItemReferenceItemParam": {
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "item_reference"
            ]
          },
          "id": {
            "type": "string",
            "description": "The service-originated ID of the previously generated response item being referenced."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "An internal identifier for an item to reference."
      },
      "OpenAI.ItemResource": {
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.ItemType"
          },
          "id": {
            "type": "string"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedBy"
              }
            ],
            "description": "The information about the creator of the item"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "structured_outputs": "#/components/schemas/StructuredOutputsItemResource",
            "workflow_action": "#/components/schemas/WorkflowActionOutputItemResource",
            "oauth_consent_request": "#/components/schemas/OAuthConsentRequestItemResource",
            "message": "#/components/schemas/OpenAI.ResponsesMessageItemResource",
            "computer_call_output": "#/components/schemas/OpenAI.ComputerToolCallOutputItemResource",
            "function_call": "#/components/schemas/OpenAI.FunctionToolCallItemResource",
            "function_call_output": "#/components/schemas/OpenAI.FunctionToolCallOutputItemResource",
            "mcp_approval_response": "#/components/schemas/OpenAI.MCPApprovalResponseItemResource",
            "file_search_call": "#/components/schemas/OpenAI.FileSearchToolCallItemResource",
            "computer_call": "#/components/schemas/OpenAI.ComputerToolCallItemResource",
            "web_search_call": "#/components/schemas/OpenAI.WebSearchToolCallItemResource",
            "reasoning": "#/components/schemas/OpenAI.ReasoningItemResource",
            "image_generation_call": "#/components/schemas/OpenAI.ImageGenToolCallItemResource",
            "code_interpreter_call": "#/components/schemas/OpenAI.CodeInterpreterToolCallItemResource",
            "local_shell_call": "#/components/schemas/OpenAI.LocalShellToolCallItemResource",
            "local_shell_call_output": "#/components/schemas/OpenAI.LocalShellToolCallOutputItemResource",
            "mcp_list_tools": "#/components/schemas/OpenAI.MCPListToolsItemResource",
            "mcp_approval_request": "#/components/schemas/OpenAI.MCPApprovalRequestItemResource",
            "mcp_call": "#/components/schemas/OpenAI.MCPCallItemResource",
            "memory_search_call": "#/components/schemas/MemorySearchToolCallItemResource"
          }
        },
        "description": "Content item used to generate a response."
      },
      "OpenAI.ItemType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "message",
              "file_search_call",
              "function_call",
              "function_call_output",
              "computer_call",
              "computer_call_output",
              "web_search_call",
              "reasoning",
              "item_reference",
              "image_generation_call",
              "code_interpreter_call",
              "local_shell_call",
              "local_shell_call_output",
              "mcp_list_tools",
              "mcp_approval_request",
              "mcp_approval_response",
              "mcp_call",
              "structured_outputs",
              "workflow_action",
              "memory_search_call",
              "oauth_consent_request"
            ]
          }
        ]
      },
      "OpenAI.ListFineTuningJobCheckpointsResponse": {
        "type": "object",
        "required": [
          "data",
          "object",
          "has_more"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.FineTuningJobCheckpoint"
            }
          },
          "object": {
            "type": "string",
            "enum": [
              "list"
            ]
          },
          "first_id": {
            "type": "string",
            "nullable": true
          },
          "last_id": {
            "type": "string",
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "OpenAI.ListFineTuningJobEventsResponse": {
        "type": "object",
        "required": [
          "data",
          "object",
          "has_more"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.FineTuningJobEvent"
            }
          },
          "object": {
            "type": "string",
            "enum": [
              "list"
            ]
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "OpenAI.ListPaginatedFineTuningJobsResponse": {
        "type": "object",
        "required": [
          "data",
          "has_more",
          "object"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.FineTuningJob"
            }
          },
          "has_more": {
            "type": "boolean"
          },
          "object": {
            "type": "string",
            "enum": [
              "list"
            ]
          }
        }
      },
      "OpenAI.LocalShellExecAction": {
        "type": "object",
        "required": [
          "type",
          "command",
          "env"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "exec"
            ],
            "description": "The type of the local shell action. Always `exec`."
          },
          "command": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The command to run."
          },
          "timeout_ms": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "Optional timeout in milliseconds for the command."
          },
          "working_directory": {
            "type": "string",
            "nullable": true,
            "description": "Optional working directory to run the command in."
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Environment variables to set for the command."
          },
          "user": {
            "type": "string",
            "nullable": true,
            "description": "Optional user to run the command as."
          }
        },
        "description": "Execute a shell command on the server."
      },
      "OpenAI.LocalShellTool": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "local_shell"
            ],
            "description": "The type of the local shell tool. Always `local_shell`."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "A tool that allows the model to execute shell commands in a local environment."
      },
      "OpenAI.LocalShellToolCallItemParam": {
        "type": "object",
        "required": [
          "type",
          "call_id",
          "action"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "local_shell_call"
            ]
          },
          "call_id": {
            "type": "string",
            "description": "The unique ID of the local shell tool call generated by the model."
          },
          "action": {
            "$ref": "#/components/schemas/OpenAI.LocalShellExecAction"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "A tool call to run a command on the local shell.\n"
      },
      "OpenAI.LocalShellToolCallItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "call_id",
          "action"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "local_shell_call"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "incomplete"
            ]
          },
          "call_id": {
            "type": "string",
            "description": "The unique ID of the local shell tool call generated by the model."
          },
          "action": {
            "$ref": "#/components/schemas/OpenAI.LocalShellExecAction"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "A tool call to run a command on the local shell.\n"
      },
      "OpenAI.LocalShellToolCallOutputItemParam": {
        "type": "object",
        "required": [
          "type",
          "output"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "local_shell_call_output"
            ]
          },
          "output": {
            "type": "string",
            "description": "A JSON string of the output of the local shell tool call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "The output of a local shell tool call.\n"
      },
      "OpenAI.LocalShellToolCallOutputItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "output"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "local_shell_call_output"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "incomplete"
            ]
          },
          "output": {
            "type": "string",
            "description": "A JSON string of the output of the local shell tool call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "The output of a local shell tool call.\n"
      },
      "OpenAI.Location": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.LocationType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "approximate": "#/components/schemas/OpenAI.ApproximateLocation"
          }
        }
      },
      "OpenAI.LocationType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "approximate"
            ]
          }
        ]
      },
      "OpenAI.LogProb": {
        "type": "object",
        "required": [
          "token",
          "logprob",
          "bytes",
          "top_logprobs"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "logprob": {
            "type": "number",
            "format": "float"
          },
          "bytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "top_logprobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.TopLogProb"
            }
          }
        },
        "description": "The log probability of a token."
      },
      "OpenAI.MCPApprovalRequestItemParam": {
        "type": "object",
        "required": [
          "type",
          "server_label",
          "name",
          "arguments"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcp_approval_request"
            ]
          },
          "server_label": {
            "type": "string",
            "description": "The label of the MCP server making the request."
          },
          "name": {
            "type": "string",
            "description": "The name of the tool to run."
          },
          "arguments": {
            "type": "string",
            "description": "A JSON string of arguments for the tool."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "A request for human approval of a tool invocation.\n"
      },
      "OpenAI.MCPApprovalRequestItemResource": {
        "type": "object",
        "required": [
          "type",
          "server_label",
          "name",
          "arguments"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcp_approval_request"
            ]
          },
          "server_label": {
            "type": "string",
            "description": "The label of the MCP server making the request."
          },
          "name": {
            "type": "string",
            "description": "The name of the tool to run."
          },
          "arguments": {
            "type": "string",
            "description": "A JSON string of arguments for the tool."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "A request for human approval of a tool invocation.\n"
      },
      "OpenAI.MCPApprovalResponseItemParam": {
        "type": "object",
        "required": [
          "type",
          "approval_request_id",
          "approve"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcp_approval_response"
            ]
          },
          "approval_request_id": {
            "type": "string",
            "description": "The ID of the approval request being answered."
          },
          "approve": {
            "type": "boolean",
            "description": "Whether the request was approved."
          },
          "reason": {
            "type": "string",
            "nullable": true,
            "description": "Optional reason for the decision."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "A response to an MCP approval request.\n"
      },
      "OpenAI.MCPApprovalResponseItemResource": {
        "type": "object",
        "required": [
          "type",
          "approval_request_id",
          "approve"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcp_approval_response"
            ]
          },
          "approval_request_id": {
            "type": "string",
            "description": "The ID of the approval request being answered."
          },
          "approve": {
            "type": "boolean",
            "description": "Whether the request was approved."
          },
          "reason": {
            "type": "string",
            "nullable": true,
            "description": "Optional reason for the decision."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "A response to an MCP approval request.\n"
      },
      "OpenAI.MCPCallItemParam": {
        "type": "object",
        "required": [
          "type",
          "server_label",
          "name",
          "arguments"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcp_call"
            ]
          },
          "server_label": {
            "type": "string",
            "description": "The label of the MCP server running the tool."
          },
          "name": {
            "type": "string",
            "description": "The name of the tool that was run."
          },
          "arguments": {
            "type": "string",
            "description": "A JSON string of the arguments passed to the tool."
          },
          "output": {
            "type": "string",
            "nullable": true,
            "description": "The output from the tool call."
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "The error from the tool call, if any."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "An invocation of a tool on an MCP server.\n"
      },
      "OpenAI.MCPCallItemResource": {
        "type": "object",
        "required": [
          "type",
          "server_label",
          "name",
          "arguments"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcp_call"
            ]
          },
          "server_label": {
            "type": "string",
            "description": "The label of the MCP server running the tool."
          },
          "name": {
            "type": "string",
            "description": "The name of the tool that was run."
          },
          "arguments": {
            "type": "string",
            "description": "A JSON string of the arguments passed to the tool."
          },
          "output": {
            "type": "string",
            "nullable": true,
            "description": "The output from the tool call."
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "The error from the tool call, if any."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "An invocation of a tool on an MCP server.\n"
      },
      "OpenAI.MCPListToolsItemParam": {
        "type": "object",
        "required": [
          "type",
          "server_label",
          "tools"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcp_list_tools"
            ]
          },
          "server_label": {
            "type": "string",
            "description": "The label of the MCP server."
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.MCPListToolsTool"
            },
            "description": "The tools available on the server."
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Error message if the server could not list tools."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "A list of tools available on an MCP server.\n"
      },
      "OpenAI.MCPListToolsItemResource": {
        "type": "object",
        "required": [
          "type",
          "server_label",
          "tools"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcp_list_tools"
            ]
          },
          "server_label": {
            "type": "string",
            "description": "The label of the MCP server."
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.MCPListToolsTool"
            },
            "description": "The tools available on the server."
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Error message if the server could not list tools."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "A list of tools available on an MCP server.\n"
      },
      "OpenAI.MCPListToolsTool": {
        "type": "object",
        "required": [
          "name",
          "input_schema"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tool."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the tool."
          },
          "input_schema": {
            "description": "The JSON schema describing the tool's input."
          },
          "annotations": {
            "nullable": true,
            "description": "Additional annotations about the tool."
          }
        },
        "description": "A tool available on an MCP server."
      },
      "OpenAI.MCPTool": {
        "type": "object",
        "required": [
          "type",
          "server_label",
          "server_url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcp"
            ],
            "description": "The type of the MCP tool. Always `mcp`."
          },
          "server_label": {
            "type": "string",
            "description": "A label for this MCP server, used to identify it in tool calls."
          },
          "server_url": {
            "type": "string",
            "description": "The URL for the MCP server."
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "Optional HTTP headers to send to the MCP server. Use for authentication\nor other purposes."
          },
          "allowed_tools": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "object",
                "properties": {
                  "tool_names": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of allowed tool names."
                  }
                }
              }
            ],
            "nullable": true,
            "description": "List of allowed tool names or a filter object."
          },
          "require_approval": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "always": {
                    "type": "object",
                    "properties": {
                      "tool_names": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of tools that require approval."
                      }
                    },
                    "description": "A list of tools that always require approval."
                  },
                  "never": {
                    "type": "object",
                    "properties": {
                      "tool_names": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of tools that do not require approval."
                      }
                    },
                    "description": "A list of tools that never require approval."
                  }
                }
              },
              {
                "type": "string",
                "enum": [
                  "always",
                  "never"
                ]
              }
            ],
            "nullable": true,
            "description": "Specify which of the MCP server's tools require approval.",
            "default": "always"
          },
          "project_connection_id": {
            "type": "string",
            "description": "The connection ID in the project for the MCP server. The connection stores authentication and other connection details needed to connect to the MCP server."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "Give the model access to additional tools via remote Model Context Protocol\n(MCP) servers. [Learn more about MCP](/docs/guides/tools-remote-mcp)."
      },
      "OpenAI.Metadata": {
        "type": "object",
        "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
        "x-oaiTypeLabel": "map"
      },
      "OpenAI.Prompt": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the prompt template to use."
          },
          "version": {
            "type": "string",
            "nullable": true,
            "description": "Optional version of the prompt template."
          },
          "variables": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ResponsePromptVariables"
              }
            ],
            "nullable": true
          }
        },
        "description": "Reference to a prompt template and its variables.\n[Learn more](/docs/guides/text?api-mode=responses#reusable-prompts)."
      },
      "OpenAI.RankingOptions": {
        "type": "object",
        "properties": {
          "ranker": {
            "type": "string",
            "enum": [
              "auto",
              "default-2024-11-15"
            ],
            "description": "The ranker to use for the file search."
          },
          "score_threshold": {
            "type": "number",
            "format": "float",
            "description": "The score threshold for the file search, a number between 0 and 1. Numbers closer to 1 will attempt to return only the most relevant results, but may return fewer results."
          }
        }
      },
      "OpenAI.Reasoning": {
        "type": "object",
        "properties": {
          "effort": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ReasoningEffort"
              }
            ],
            "nullable": true,
            "default": "medium"
          },
          "summary": {
            "type": "string",
            "enum": [
              "auto",
              "concise",
              "detailed"
            ],
            "nullable": true,
            "description": "A summary of the reasoning performed by the model. This can be\nuseful for debugging and understanding the model's reasoning process.\nOne of `auto`, `concise`, or `detailed`."
          },
          "generate_summary": {
            "type": "string",
            "enum": [
              "auto",
              "concise",
              "detailed"
            ],
            "nullable": true,
            "description": "**Deprecated:** use `summary` instead.\n\nA summary of the reasoning performed by the model. This can be\nuseful for debugging and understanding the model's reasoning process.\nOne of `auto`, `concise`, or `detailed`.",
            "deprecated": true,
            "default": null
          }
        },
        "description": "**o-series models only**\n\nConfiguration options for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning)."
      },
      "OpenAI.ReasoningEffort": {
        "type": "string",
        "enum": [
          "low",
          "medium",
          "high"
        ],
        "description": "**o-series models only**\n\nConstrains effort on reasoning for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response."
      },
      "OpenAI.ReasoningItemParam": {
        "type": "object",
        "required": [
          "type",
          "summary"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "reasoning"
            ]
          },
          "encrypted_content": {
            "type": "string",
            "nullable": true,
            "description": "The encrypted content of the reasoning item - populated when a response is\ngenerated with `reasoning.encrypted_content` in the `include` parameter."
          },
          "summary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ReasoningItemSummaryPart"
            },
            "description": "Reasoning text contents."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "A description of the chain of thought used by a reasoning model while generating\na response. Be sure to include these items in your `input` to the Responses API\nfor subsequent turns of a conversation if you are manually\n[managing context](/docs/guides/conversation-state).\n"
      },
      "OpenAI.ReasoningItemResource": {
        "type": "object",
        "required": [
          "type",
          "summary"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "reasoning"
            ]
          },
          "encrypted_content": {
            "type": "string",
            "nullable": true,
            "description": "The encrypted content of the reasoning item - populated when a response is\ngenerated with `reasoning.encrypted_content` in the `include` parameter."
          },
          "summary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ReasoningItemSummaryPart"
            },
            "description": "Reasoning text contents."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "A description of the chain of thought used by a reasoning model while generating\na response. Be sure to include these items in your `input` to the Responses API\nfor subsequent turns of a conversation if you are manually\n[managing context](/docs/guides/conversation-state).\n"
      },
      "OpenAI.ReasoningItemSummaryPart": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.ReasoningItemSummaryPartType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "summary_text": "#/components/schemas/OpenAI.ReasoningItemSummaryTextPart"
          }
        }
      },
      "OpenAI.ReasoningItemSummaryPartType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "summary_text"
            ]
          }
        ]
      },
      "OpenAI.ReasoningItemSummaryTextPart": {
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "summary_text"
            ]
          },
          "text": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ReasoningItemSummaryPart"
          }
        ]
      },
      "OpenAI.Response": {
        "type": "object",
        "required": [
          "metadata",
          "temperature",
          "top_p",
          "user",
          "id",
          "object",
          "created_at",
          "error",
          "incomplete_details",
          "output",
          "instructions",
          "parallel_tool_calls",
          "conversation"
        ],
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "minimum": 0,
            "maximum": 2,
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both."
          },
          "top_p": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "minimum": 0,
            "maximum": 1,
            "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both."
          },
          "user": {
            "type": "string",
            "nullable": true,
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids)."
          },
          "service_tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ServiceTier"
              }
            ],
            "description": "Note: service_tier is not applicable to Azure OpenAI."
          },
          "top_logprobs": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability."
          },
          "previous_response_id": {
            "type": "string",
            "nullable": true,
            "description": "The unique ID of the previous response to the model. Use this to\ncreate multi-turn conversations. Learn more about\n[conversation state](/docs/guides/conversation-state)."
          },
          "model": {
            "type": "string",
            "description": "The model deployment to use for the creation of this response."
          },
          "reasoning": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Reasoning"
              }
            ],
            "nullable": true
          },
          "background": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to run the model response in the background.\n[Learn more](/docs/guides/background).",
            "default": false
          },
          "max_output_tokens": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning)."
          },
          "max_tool_calls": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored."
          },
          "text": {
            "type": "object",
            "properties": {
              "format": {
                "$ref": "#/components/schemas/OpenAI.ResponseTextFormatConfiguration"
              }
            },
            "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Structured Outputs](/docs/guides/structured-outputs)"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.Tool"
            },
            "description": "An array of tools the model may call while generating a response. You\ncan specify which tool to use by setting the `tool_choice` parameter.\n\nThe two categories of tools you can provide the model are:\n\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like [web search](/docs/guides/tools-web-search)\n  or [file search](/docs/guides/tools-file-search). Learn more about\n  [built-in tools](/docs/guides/tools).\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code. Learn more about\n  [function calling](/docs/guides/function-calling)."
          },
          "tool_choice": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ToolChoiceOptions"
              },
              {
                "$ref": "#/components/schemas/OpenAI.ToolChoiceObject"
              }
            ],
            "description": "How the model should select which tool (or tools) to use when generating\na response. See the `tools` parameter to see how to specify which tools\nthe model can call."
          },
          "prompt": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Prompt"
              }
            ],
            "nullable": true
          },
          "truncation": {
            "type": "string",
            "enum": [
              "auto",
              "disabled"
            ],
            "nullable": true,
            "description": "The truncation strategy to use for the model response.\n- `auto`: If the context of this response and previous ones exceeds\n  the model's context window size, the model will truncate the\n  response to fit the context window by dropping input items in the\n  middle of the conversation.\n- `disabled` (default): If a model response will exceed the context window\n  size for a model, the request will fail with a 400 error.",
            "default": "disabled"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for this Response."
          },
          "object": {
            "type": "string",
            "enum": [
              "response"
            ],
            "description": "The object type of this resource - always set to `response`."
          },
          "status": {
            "type": "string",
            "enum": [
              "completed",
              "failed",
              "in_progress",
              "cancelled",
              "queued",
              "incomplete"
            ],
            "description": "The status of the response generation. One of `completed`, `failed`,\n`in_progress`, `cancelled`, `queued`, or `incomplete`."
          },
          "created_at": {
            "type": "integer",
            "format": "unixtime",
            "description": "Unix timestamp (in seconds) of when this Response was created."
          },
          "error": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ResponseError"
              }
            ],
            "nullable": true
          },
          "incomplete_details": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "enum": [
                  "max_output_tokens",
                  "content_filter"
                ],
                "description": "The reason why the response is incomplete."
              }
            },
            "nullable": true,
            "description": "Details about why the response is incomplete."
          },
          "output": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ItemResource"
            },
            "description": "An array of content items generated by the model.\n\n- The length and order of items in the `output` array is dependent\n  on the model's response.\n- Rather than accessing the first item in the `output` array and\n  assuming it's an `assistant` message with the content generated by\n  the model, you might consider using the `output_text` property where\n  supported in SDKs."
          },
          "instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OpenAI.ItemParam"
                }
              }
            ],
            "nullable": true,
            "description": "A system (or developer) message inserted into the model's context.\n\nWhen using along with `previous_response_id`, the instructions from a previous\nresponse will not be carried over to the next response. This makes it simple\nto swap out system (or developer) messages in new responses."
          },
          "output_text": {
            "type": "string",
            "nullable": true,
            "description": "SDK-only convenience property that contains the aggregated text output\nfrom all `output_text` items in the `output` array, if any are present.\nSupported in the Python and JavaScript SDKs."
          },
          "usage": {
            "$ref": "#/components/schemas/OpenAI.ResponseUsage"
          },
          "parallel_tool_calls": {
            "type": "boolean",
            "description": "Whether to allow the model to run tool calls in parallel.",
            "default": true
          },
          "conversation": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "nullable": true
          },
          "agent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentId"
              }
            ],
            "description": "The agent used for this response"
          },
          "structured_inputs": {
            "type": "object",
            "additionalProperties": {},
            "description": "The structured inputs to the response that can participate in prompt template substitution or tool argument bindings."
          }
        }
      },
      "OpenAI.ResponseCodeInterpreterCallCodeDeltaEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id",
          "delta"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.code_interpreter_call_code.delta"
            ],
            "description": "The type of the event. Always `response.code_interpreter_call_code.delta`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response for which the code is being streamed."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the code interpreter tool call item."
          },
          "delta": {
            "type": "string",
            "description": "The partial code snippet being streamed by the code interpreter."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a partial code snippet is streamed by the code interpreter."
      },
      "OpenAI.ResponseCodeInterpreterCallCodeDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id",
          "code"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.code_interpreter_call_code.done"
            ],
            "description": "The type of the event. Always `response.code_interpreter_call_code.done`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response for which the code is finalized."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the code interpreter tool call item."
          },
          "code": {
            "type": "string",
            "description": "The final code snippet output by the code interpreter."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the code snippet is finalized by the code interpreter."
      },
      "OpenAI.ResponseCodeInterpreterCallCompletedEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.code_interpreter_call.completed"
            ],
            "description": "The type of the event. Always `response.code_interpreter_call.completed`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response for which the code interpreter call is completed."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the code interpreter tool call item."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the code interpreter call is completed."
      },
      "OpenAI.ResponseCodeInterpreterCallInProgressEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.code_interpreter_call.in_progress"
            ],
            "description": "The type of the event. Always `response.code_interpreter_call.in_progress`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response for which the code interpreter call is in progress."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the code interpreter tool call item."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a code interpreter call is in progress."
      },
      "OpenAI.ResponseCodeInterpreterCallInterpretingEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.code_interpreter_call.interpreting"
            ],
            "description": "The type of the event. Always `response.code_interpreter_call.interpreting`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response for which the code interpreter is interpreting code."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the code interpreter tool call item."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the code interpreter is actively interpreting the code snippet."
      },
      "OpenAI.ResponseCompletedEvent": {
        "type": "object",
        "required": [
          "type",
          "response"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.completed"
            ],
            "description": "The type of the event. Always `response.completed`."
          },
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Response"
              }
            ],
            "description": "Properties of the completed response."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the model response is complete."
      },
      "OpenAI.ResponseContentPartAddedEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "content_index",
          "part"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.content_part.added"
            ],
            "description": "The type of the event. Always `response.content_part.added`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the output item that the content part was added to."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the content part was added to."
          },
          "content_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the content part that was added."
          },
          "part": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ItemContent"
              }
            ],
            "description": "The content part that was added."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a new content part is added."
      },
      "OpenAI.ResponseContentPartDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "content_index",
          "part"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.content_part.done"
            ],
            "description": "The type of the event. Always `response.content_part.done`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the output item that the content part was added to."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the content part was added to."
          },
          "content_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the content part that is done."
          },
          "part": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ItemContent"
              }
            ],
            "description": "The content part that is done."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a content part is done."
      },
      "OpenAI.ResponseCreatedEvent": {
        "type": "object",
        "required": [
          "type",
          "response"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.created"
            ],
            "description": "The type of the event. Always `response.created`."
          },
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Response"
              }
            ],
            "description": "The response that was created."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "An event that is emitted when a response is created."
      },
      "OpenAI.ResponseError": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "$ref": "#/components/schemas/OpenAI.ResponseErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human-readable description of the error."
          }
        },
        "description": "An error object returned when the model fails to generate a Response."
      },
      "OpenAI.ResponseErrorCode": {
        "type": "string",
        "enum": [
          "server_error",
          "rate_limit_exceeded",
          "invalid_prompt",
          "vector_store_timeout",
          "invalid_image",
          "invalid_image_format",
          "invalid_base64_image",
          "invalid_image_url",
          "image_too_large",
          "image_too_small",
          "image_parse_error",
          "image_content_policy_violation",
          "invalid_image_mode",
          "image_file_too_large",
          "unsupported_image_media_type",
          "empty_image_file",
          "failed_to_download_image",
          "image_file_not_found"
        ],
        "description": "The error code for the response."
      },
      "OpenAI.ResponseErrorEvent": {
        "type": "object",
        "required": [
          "type",
          "code",
          "message",
          "param"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "error"
            ],
            "description": "The type of the event. Always `error`."
          },
          "code": {
            "type": "string",
            "nullable": true,
            "description": "The error code."
          },
          "message": {
            "type": "string",
            "description": "The error message."
          },
          "param": {
            "type": "string",
            "nullable": true,
            "description": "The error parameter."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when an error occurs."
      },
      "OpenAI.ResponseFailedEvent": {
        "type": "object",
        "required": [
          "type",
          "response"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.failed"
            ],
            "description": "The type of the event. Always `response.failed`."
          },
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Response"
              }
            ],
            "description": "The response that failed."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "An event that is emitted when a response fails."
      },
      "OpenAI.ResponseFileSearchCallCompletedEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.file_search_call.completed"
            ],
            "description": "The type of the event. Always `response.file_search_call.completed`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the file search call is initiated."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the output item that the file search call is initiated."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a file search call is completed (results found)."
      },
      "OpenAI.ResponseFileSearchCallInProgressEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.file_search_call.in_progress"
            ],
            "description": "The type of the event. Always `response.file_search_call.in_progress`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the file search call is initiated."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the output item that the file search call is initiated."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a file search call is initiated."
      },
      "OpenAI.ResponseFileSearchCallSearchingEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.file_search_call.searching"
            ],
            "description": "The type of the event. Always `response.file_search_call.searching`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the file search call is searching."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the output item that the file search call is initiated."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a file search is currently searching."
      },
      "OpenAI.ResponseFormat": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text",
              "json_object",
              "json_schema"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "json_object": "#/components/schemas/OpenAI.ResponseFormatJsonObject",
            "json_schema": "#/components/schemas/OpenAI.ResponseFormatJsonSchema"
          }
        }
      },
      "OpenAI.ResponseFormatJsonObject": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "json_object"
            ],
            "description": "The type of response format being defined. Always `json_object`."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseFormat"
          }
        ],
        "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so."
      },
      "OpenAI.ResponseFormatJsonSchema": {
        "type": "object",
        "required": [
          "type",
          "json_schema"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "json_schema"
            ],
            "description": "The type of response format being defined. Always `json_schema`."
          },
          "json_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format."
              },
              "name": {
                "type": "string",
                "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64."
              },
              "schema": {
                "$ref": "#/components/schemas/OpenAI.ResponseFormatJsonSchemaSchema"
              },
              "strict": {
                "type": "boolean",
                "nullable": true,
                "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).",
                "default": false
              }
            },
            "required": [
              "name"
            ],
            "description": "Structured Outputs configuration options, including a JSON Schema."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseFormat"
          }
        ],
        "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs)."
      },
      "OpenAI.ResponseFormatJsonSchemaSchema": {
        "type": "object",
        "additionalProperties": {},
        "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/)."
      },
      "OpenAI.ResponseFormatText": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ],
            "description": "The type of response format being defined. Always `text`."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseFormat"
          }
        ],
        "description": "Default response format. Used to generate text responses."
      },
      "OpenAI.ResponseFunctionCallArgumentsDeltaEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "delta"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.function_call_arguments.delta"
            ],
            "description": "The type of the event. Always `response.function_call_arguments.delta`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the output item that the function-call arguments delta is added to."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the function-call arguments delta is added to."
          },
          "delta": {
            "type": "string",
            "description": "The function-call arguments delta that is added."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when there is a partial function-call arguments delta."
      },
      "OpenAI.ResponseFunctionCallArgumentsDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "arguments"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.function_call_arguments.done"
            ]
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the item."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item."
          },
          "arguments": {
            "type": "string",
            "description": "The function-call arguments."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when function-call arguments are finalized."
      },
      "OpenAI.ResponseImageGenCallCompletedEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.image_generation_call.completed"
            ],
            "description": "The type of the event. Always 'response.image_generation_call.completed'."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the image generation item being processed."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when an image generation tool call has completed and the final image is available."
      },
      "OpenAI.ResponseImageGenCallGeneratingEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.image_generation_call.generating"
            ],
            "description": "The type of the event. Always 'response.image_generation_call.generating'."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the image generation item being processed."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when an image generation tool call is actively generating an image (intermediate state)."
      },
      "OpenAI.ResponseImageGenCallInProgressEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.image_generation_call.in_progress"
            ],
            "description": "The type of the event. Always 'response.image_generation_call.in_progress'."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the image generation item being processed."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when an image generation tool call is in progress."
      },
      "OpenAI.ResponseImageGenCallPartialImageEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id",
          "partial_image_index",
          "partial_image_b64"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.image_generation_call.partial_image"
            ],
            "description": "The type of the event. Always 'response.image_generation_call.partial_image'."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the image generation item being processed."
          },
          "partial_image_index": {
            "type": "integer",
            "format": "int32",
            "description": "0-based index for the partial image (backend is 1-based, but this is 0-based for the user)."
          },
          "partial_image_b64": {
            "type": "string",
            "description": "Base64-encoded partial image data, suitable for rendering as an image."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a partial image is available during image generation streaming."
      },
      "OpenAI.ResponseInProgressEvent": {
        "type": "object",
        "required": [
          "type",
          "response"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.in_progress"
            ],
            "description": "The type of the event. Always `response.in_progress`."
          },
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Response"
              }
            ],
            "description": "The response that is in progress."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the response is in progress."
      },
      "OpenAI.ResponseIncompleteEvent": {
        "type": "object",
        "required": [
          "type",
          "response"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.incomplete"
            ],
            "description": "The type of the event. Always `response.incomplete`."
          },
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Response"
              }
            ],
            "description": "The response that was incomplete."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "An event that is emitted when a response finishes as incomplete."
      },
      "OpenAI.ResponseMCPCallArgumentsDeltaEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id",
          "delta"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.mcp_call.arguments_delta"
            ],
            "description": "The type of the event. Always 'response.mcp_call.arguments_delta'."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the MCP tool call item being processed."
          },
          "delta": {
            "description": "The partial update to the arguments for the MCP tool call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when there is a delta (partial update) to the arguments of an MCP tool call."
      },
      "OpenAI.ResponseMCPCallArgumentsDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id",
          "arguments"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.mcp_call.arguments_done"
            ],
            "description": "The type of the event. Always 'response.mcp_call.arguments_done'."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the MCP tool call item being processed."
          },
          "arguments": {
            "description": "The finalized arguments for the MCP tool call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the arguments for an MCP tool call are finalized."
      },
      "OpenAI.ResponseMCPCallCompletedEvent": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.mcp_call.completed"
            ],
            "description": "The type of the event. Always 'response.mcp_call.completed'."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when an MCP  tool call has completed successfully."
      },
      "OpenAI.ResponseMCPCallFailedEvent": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.mcp_call.failed"
            ],
            "description": "The type of the event. Always 'response.mcp_call.failed'."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when an MCP  tool call has failed."
      },
      "OpenAI.ResponseMCPCallInProgressEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.mcp_call.in_progress"
            ],
            "description": "The type of the event. Always 'response.mcp_call.in_progress'."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the MCP tool call item being processed."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when an MCP  tool call is in progress."
      },
      "OpenAI.ResponseMCPListToolsCompletedEvent": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.mcp_list_tools.completed"
            ],
            "description": "The type of the event. Always 'response.mcp_list_tools.completed'."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the list of available MCP tools has been successfully retrieved."
      },
      "OpenAI.ResponseMCPListToolsFailedEvent": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.mcp_list_tools.failed"
            ],
            "description": "The type of the event. Always 'response.mcp_list_tools.failed'."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the attempt to list available MCP tools has failed."
      },
      "OpenAI.ResponseMCPListToolsInProgressEvent": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.mcp_list_tools.in_progress"
            ],
            "description": "The type of the event. Always 'response.mcp_list_tools.in_progress'."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the system is in the process of retrieving the list of available MCP tools."
      },
      "OpenAI.ResponseOutputItemAddedEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.output_item.added"
            ],
            "description": "The type of the event. Always `response.output_item.added`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that was added."
          },
          "item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ItemResource"
              }
            ],
            "description": "The output item that was added."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a new output item is added."
      },
      "OpenAI.ResponseOutputItemDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.output_item.done"
            ],
            "description": "The type of the event. Always `response.output_item.done`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that was marked done."
          },
          "item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ItemResource"
              }
            ],
            "description": "The output item that was marked done."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when an output item is marked done."
      },
      "OpenAI.ResponsePromptVariables": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenAI.ItemParam"
        },
        "description": "Optional map of values to substitute in for variables in your\nprompt. The substitution values can either be strings, or other\nResponse input types like images or files.",
        "x-oaiExpandable": true,
        "x-oaiTypeLabel": "map"
      },
      "OpenAI.ResponseQueuedEvent": {
        "type": "object",
        "required": [
          "type",
          "response"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.queued"
            ],
            "description": "The type of the event. Always 'response.queued'."
          },
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Response"
              }
            ],
            "description": "The full response object that is queued."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a response is queued and waiting to be processed."
      },
      "OpenAI.ResponseReasoningDeltaEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "content_index",
          "delta"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.reasoning.delta"
            ],
            "description": "The type of the event. Always 'response.reasoning.delta'."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the item for which reasoning is being updated."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "content_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the reasoning content part within the output item."
          },
          "delta": {
            "description": "The partial update to the reasoning content."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when there is a delta (partial update) to the reasoning content."
      },
      "OpenAI.ResponseReasoningDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "content_index",
          "text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.reasoning.done"
            ],
            "description": "The type of the event. Always 'response.reasoning.done'."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the item for which reasoning is finalized."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "content_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the reasoning content part within the output item."
          },
          "text": {
            "type": "string",
            "description": "The finalized reasoning text."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the reasoning content is finalized for an item."
      },
      "OpenAI.ResponseReasoningSummaryDeltaEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "summary_index",
          "delta"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.reasoning_summary.delta"
            ],
            "description": "The type of the event. Always 'response.reasoning_summary.delta'."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the item for which the reasoning summary is being updated."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "summary_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the summary part within the output item."
          },
          "delta": {
            "description": "The partial update to the reasoning summary content."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when there is a delta (partial update) to the reasoning summary content."
      },
      "OpenAI.ResponseReasoningSummaryDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "summary_index",
          "text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.reasoning_summary.done"
            ],
            "description": "The type of the event. Always 'response.reasoning_summary.done'."
          },
          "item_id": {
            "type": "string",
            "description": "The unique identifier of the item for which the reasoning summary is finalized."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item in the response's output array."
          },
          "summary_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the summary part within the output item."
          },
          "text": {
            "type": "string",
            "description": "The finalized reasoning summary text."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when the reasoning summary content is finalized for an item."
      },
      "OpenAI.ResponseReasoningSummaryPartAddedEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "summary_index",
          "part"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.reasoning_summary_part.added"
            ],
            "description": "The type of the event. Always `response.reasoning_summary_part.added`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the item this summary part is associated with."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item this summary part is associated with."
          },
          "summary_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the summary part within the reasoning summary."
          },
          "part": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ReasoningItemSummaryPart"
              }
            ],
            "description": "The summary part that was added."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a new reasoning summary part is added."
      },
      "OpenAI.ResponseReasoningSummaryPartDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "summary_index",
          "part"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.reasoning_summary_part.done"
            ],
            "description": "The type of the event. Always `response.reasoning_summary_part.done`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the item this summary part is associated with."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item this summary part is associated with."
          },
          "summary_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the summary part within the reasoning summary."
          },
          "part": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ReasoningItemSummaryPart"
              }
            ],
            "description": "The completed summary part."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a reasoning summary part is completed."
      },
      "OpenAI.ResponseReasoningSummaryTextDeltaEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "summary_index",
          "delta"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.reasoning_summary_text.delta"
            ],
            "description": "The type of the event. Always `response.reasoning_summary_text.delta`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the item this summary text delta is associated with."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item this summary text delta is associated with."
          },
          "summary_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the summary part within the reasoning summary."
          },
          "delta": {
            "type": "string",
            "description": "The text delta that was added to the summary."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a delta is added to a reasoning summary text."
      },
      "OpenAI.ResponseReasoningSummaryTextDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "summary_index",
          "text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.reasoning_summary_text.done"
            ],
            "description": "The type of the event. Always `response.reasoning_summary_text.done`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the item this summary text is associated with."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item this summary text is associated with."
          },
          "summary_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the summary part within the reasoning summary."
          },
          "text": {
            "type": "string",
            "description": "The full text of the completed reasoning summary."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when a reasoning summary text is completed."
      },
      "OpenAI.ResponseRefusalDeltaEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "content_index",
          "delta"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.refusal.delta"
            ],
            "description": "The type of the event. Always `response.refusal.delta`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the output item that the refusal text is added to."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the refusal text is added to."
          },
          "content_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the content part that the refusal text is added to."
          },
          "delta": {
            "type": "string",
            "description": "The refusal text that is added."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when there is a partial refusal text."
      },
      "OpenAI.ResponseRefusalDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "content_index",
          "refusal"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.refusal.done"
            ],
            "description": "The type of the event. Always `response.refusal.done`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the output item that the refusal text is finalized."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the refusal text is finalized."
          },
          "content_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the content part that the refusal text is finalized."
          },
          "refusal": {
            "type": "string",
            "description": "The refusal text that is finalized."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when refusal text is finalized."
      },
      "OpenAI.ResponseStreamEvent": {
        "type": "object",
        "required": [
          "type",
          "sequence_number"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEventType"
          },
          "sequence_number": {
            "type": "integer",
            "format": "int32",
            "description": "The sequence number for this event."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "response.completed": "#/components/schemas/OpenAI.ResponseCompletedEvent",
            "response.content_part.added": "#/components/schemas/OpenAI.ResponseContentPartAddedEvent",
            "response.content_part.done": "#/components/schemas/OpenAI.ResponseContentPartDoneEvent",
            "response.created": "#/components/schemas/OpenAI.ResponseCreatedEvent",
            "error": "#/components/schemas/OpenAI.ResponseErrorEvent",
            "response.file_search_call.completed": "#/components/schemas/OpenAI.ResponseFileSearchCallCompletedEvent",
            "response.file_search_call.in_progress": "#/components/schemas/OpenAI.ResponseFileSearchCallInProgressEvent",
            "response.file_search_call.searching": "#/components/schemas/OpenAI.ResponseFileSearchCallSearchingEvent",
            "response.function_call_arguments.delta": "#/components/schemas/OpenAI.ResponseFunctionCallArgumentsDeltaEvent",
            "response.function_call_arguments.done": "#/components/schemas/OpenAI.ResponseFunctionCallArgumentsDoneEvent",
            "response.in_progress": "#/components/schemas/OpenAI.ResponseInProgressEvent",
            "response.failed": "#/components/schemas/OpenAI.ResponseFailedEvent",
            "response.incomplete": "#/components/schemas/OpenAI.ResponseIncompleteEvent",
            "response.output_item.added": "#/components/schemas/OpenAI.ResponseOutputItemAddedEvent",
            "response.output_item.done": "#/components/schemas/OpenAI.ResponseOutputItemDoneEvent",
            "response.refusal.delta": "#/components/schemas/OpenAI.ResponseRefusalDeltaEvent",
            "response.refusal.done": "#/components/schemas/OpenAI.ResponseRefusalDoneEvent",
            "response.output_text.delta": "#/components/schemas/OpenAI.ResponseTextDeltaEvent",
            "response.output_text.done": "#/components/schemas/OpenAI.ResponseTextDoneEvent",
            "response.reasoning_summary_part.added": "#/components/schemas/OpenAI.ResponseReasoningSummaryPartAddedEvent",
            "response.reasoning_summary_part.done": "#/components/schemas/OpenAI.ResponseReasoningSummaryPartDoneEvent",
            "response.reasoning_summary_text.delta": "#/components/schemas/OpenAI.ResponseReasoningSummaryTextDeltaEvent",
            "response.reasoning_summary_text.done": "#/components/schemas/OpenAI.ResponseReasoningSummaryTextDoneEvent",
            "response.web_search_call.completed": "#/components/schemas/OpenAI.ResponseWebSearchCallCompletedEvent",
            "response.web_search_call.in_progress": "#/components/schemas/OpenAI.ResponseWebSearchCallInProgressEvent",
            "response.web_search_call.searching": "#/components/schemas/OpenAI.ResponseWebSearchCallSearchingEvent",
            "response.image_generation_call.completed": "#/components/schemas/OpenAI.ResponseImageGenCallCompletedEvent",
            "response.image_generation_call.generating": "#/components/schemas/OpenAI.ResponseImageGenCallGeneratingEvent",
            "response.image_generation_call.in_progress": "#/components/schemas/OpenAI.ResponseImageGenCallInProgressEvent",
            "response.image_generation_call.partial_image": "#/components/schemas/OpenAI.ResponseImageGenCallPartialImageEvent",
            "response.mcp_call.arguments_delta": "#/components/schemas/OpenAI.ResponseMCPCallArgumentsDeltaEvent",
            "response.mcp_call.arguments_done": "#/components/schemas/OpenAI.ResponseMCPCallArgumentsDoneEvent",
            "response.mcp_call.completed": "#/components/schemas/OpenAI.ResponseMCPCallCompletedEvent",
            "response.mcp_call.failed": "#/components/schemas/OpenAI.ResponseMCPCallFailedEvent",
            "response.mcp_call.in_progress": "#/components/schemas/OpenAI.ResponseMCPCallInProgressEvent",
            "response.mcp_list_tools.completed": "#/components/schemas/OpenAI.ResponseMCPListToolsCompletedEvent",
            "response.mcp_list_tools.failed": "#/components/schemas/OpenAI.ResponseMCPListToolsFailedEvent",
            "response.mcp_list_tools.in_progress": "#/components/schemas/OpenAI.ResponseMCPListToolsInProgressEvent",
            "response.queued": "#/components/schemas/OpenAI.ResponseQueuedEvent",
            "response.reasoning.delta": "#/components/schemas/OpenAI.ResponseReasoningDeltaEvent",
            "response.reasoning.done": "#/components/schemas/OpenAI.ResponseReasoningDoneEvent",
            "response.reasoning_summary.delta": "#/components/schemas/OpenAI.ResponseReasoningSummaryDeltaEvent",
            "response.reasoning_summary.done": "#/components/schemas/OpenAI.ResponseReasoningSummaryDoneEvent",
            "response.code_interpreter_call_code.delta": "#/components/schemas/OpenAI.ResponseCodeInterpreterCallCodeDeltaEvent",
            "response.code_interpreter_call_code.done": "#/components/schemas/OpenAI.ResponseCodeInterpreterCallCodeDoneEvent",
            "response.code_interpreter_call.completed": "#/components/schemas/OpenAI.ResponseCodeInterpreterCallCompletedEvent",
            "response.code_interpreter_call.in_progress": "#/components/schemas/OpenAI.ResponseCodeInterpreterCallInProgressEvent",
            "response.code_interpreter_call.interpreting": "#/components/schemas/OpenAI.ResponseCodeInterpreterCallInterpretingEvent"
          }
        }
      },
      "OpenAI.ResponseStreamEventType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "response.audio.delta",
              "response.audio.done",
              "response.audio_transcript.delta",
              "response.audio_transcript.done",
              "response.code_interpreter_call_code.delta",
              "response.code_interpreter_call_code.done",
              "response.code_interpreter_call.completed",
              "response.code_interpreter_call.in_progress",
              "response.code_interpreter_call.interpreting",
              "response.completed",
              "response.content_part.added",
              "response.content_part.done",
              "response.created",
              "error",
              "response.file_search_call.completed",
              "response.file_search_call.in_progress",
              "response.file_search_call.searching",
              "response.function_call_arguments.delta",
              "response.function_call_arguments.done",
              "response.in_progress",
              "response.failed",
              "response.incomplete",
              "response.output_item.added",
              "response.output_item.done",
              "response.refusal.delta",
              "response.refusal.done",
              "response.output_text.annotation.added",
              "response.output_text.delta",
              "response.output_text.done",
              "response.reasoning_summary_part.added",
              "response.reasoning_summary_part.done",
              "response.reasoning_summary_text.delta",
              "response.reasoning_summary_text.done",
              "response.web_search_call.completed",
              "response.web_search_call.in_progress",
              "response.web_search_call.searching",
              "response.image_generation_call.completed",
              "response.image_generation_call.generating",
              "response.image_generation_call.in_progress",
              "response.image_generation_call.partial_image",
              "response.mcp_call.arguments_delta",
              "response.mcp_call.arguments_done",
              "response.mcp_call.completed",
              "response.mcp_call.failed",
              "response.mcp_call.in_progress",
              "response.mcp_list_tools.completed",
              "response.mcp_list_tools.failed",
              "response.mcp_list_tools.in_progress",
              "response.queued",
              "response.reasoning.delta",
              "response.reasoning.done",
              "response.reasoning_summary.delta",
              "response.reasoning_summary.done"
            ]
          }
        ]
      },
      "OpenAI.ResponseTextDeltaEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "content_index",
          "delta"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.output_text.delta"
            ],
            "description": "The type of the event. Always `response.output_text.delta`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the output item that the text delta was added to."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the text delta was added to."
          },
          "content_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the content part that the text delta was added to."
          },
          "delta": {
            "type": "string",
            "description": "The text delta that was added."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when there is an additional text delta."
      },
      "OpenAI.ResponseTextDoneEvent": {
        "type": "object",
        "required": [
          "type",
          "item_id",
          "output_index",
          "content_index",
          "text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.output_text.done"
            ],
            "description": "The type of the event. Always `response.output_text.done`."
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the output item that the text content is finalized."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the text content is finalized."
          },
          "content_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the content part that the text content is finalized."
          },
          "text": {
            "type": "string",
            "description": "The text content that is finalized."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Emitted when text content is finalized."
      },
      "OpenAI.ResponseTextFormatConfiguration": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.ResponseTextFormatConfigurationType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/OpenAI.ResponseTextFormatConfigurationText",
            "json_object": "#/components/schemas/OpenAI.ResponseTextFormatConfigurationJsonObject",
            "json_schema": "#/components/schemas/OpenAI.ResponseTextFormatConfigurationJsonSchema"
          }
        }
      },
      "OpenAI.ResponseTextFormatConfigurationJsonObject": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "json_object"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseTextFormatConfiguration"
          }
        ]
      },
      "OpenAI.ResponseTextFormatConfigurationJsonSchema": {
        "type": "object",
        "required": [
          "type",
          "name",
          "schema"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "json_schema"
            ],
            "description": "The type of response format being defined. Always `json_schema`."
          },
          "description": {
            "type": "string",
            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format."
          },
          "name": {
            "type": "string",
            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64."
          },
          "schema": {
            "$ref": "#/components/schemas/OpenAI.ResponseFormatJsonSchemaSchema"
          },
          "strict": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).",
            "default": false
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseTextFormatConfiguration"
          }
        ],
        "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs)."
      },
      "OpenAI.ResponseTextFormatConfigurationText": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseTextFormatConfiguration"
          }
        ]
      },
      "OpenAI.ResponseTextFormatConfigurationType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "text",
              "json_schema",
              "json_object"
            ]
          }
        ],
        "description": "An object specifying the format that the model must output.\n\nConfiguring `{ \"type\": \"json_schema\" }` enables Structured Outputs,\nwhich ensures the model will match your supplied JSON schema. Learn more in the\n[Structured Outputs guide](/docs/guides/structured-outputs).\n\nThe default format is `{ \"type\": \"text\" }` with no additional options.\n\n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it."
      },
      "OpenAI.ResponseUsage": {
        "type": "object",
        "required": [
          "input_tokens",
          "input_tokens_details",
          "output_tokens",
          "output_tokens_details",
          "total_tokens"
        ],
        "properties": {
          "input_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The number of input tokens."
          },
          "input_tokens_details": {
            "type": "object",
            "properties": {
              "cached_tokens": {
                "type": "integer",
                "format": "int32",
                "description": "The number of tokens that were retrieved from the cache.\n[More on prompt caching](/docs/guides/prompt-caching)."
              }
            },
            "required": [
              "cached_tokens"
            ],
            "description": "A detailed breakdown of the input tokens."
          },
          "output_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The number of output tokens."
          },
          "output_tokens_details": {
            "type": "object",
            "properties": {
              "reasoning_tokens": {
                "type": "integer",
                "format": "int32",
                "description": "The number of reasoning tokens."
              }
            },
            "required": [
              "reasoning_tokens"
            ],
            "description": "A detailed breakdown of the output tokens."
          },
          "total_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of tokens used."
          }
        },
        "description": "Represents token usage details including input tokens, output tokens,\na breakdown of output tokens, and the total tokens used."
      },
      "OpenAI.ResponseWebSearchCallCompletedEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.web_search_call.completed"
            ],
            "description": "The type of the event. Always `response.web_search_call.completed`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the web search call is associated with."
          },
          "item_id": {
            "type": "string",
            "description": "Unique ID for the output item associated with the web search call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Note: web_search is not yet available via Azure OpenAI."
      },
      "OpenAI.ResponseWebSearchCallInProgressEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.web_search_call.in_progress"
            ],
            "description": "The type of the event. Always `response.web_search_call.in_progress`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the web search call is associated with."
          },
          "item_id": {
            "type": "string",
            "description": "Unique ID for the output item associated with the web search call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Note: web_search is not yet available via Azure OpenAI."
      },
      "OpenAI.ResponseWebSearchCallSearchingEvent": {
        "type": "object",
        "required": [
          "type",
          "output_index",
          "item_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "response.web_search_call.searching"
            ],
            "description": "The type of the event. Always `response.web_search_call.searching`."
          },
          "output_index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the output item that the web search call is associated with."
          },
          "item_id": {
            "type": "string",
            "description": "Unique ID for the output item associated with the web search call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponseStreamEvent"
          }
        ],
        "description": "Note: web_search is not yet available via Azure OpenAI."
      },
      "OpenAI.ResponsesAssistantMessageItemParam": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ],
            "description": "The role of the message, which is always `assistant`."
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OpenAI.ItemContent"
                }
              }
            ],
            "description": "The content associated with the message."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponsesMessageItemParam"
          }
        ],
        "description": "A message parameter item with the `assistant` role."
      },
      "OpenAI.ResponsesAssistantMessageItemResource": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ],
            "description": "The role of the message, which is always `assistant`."
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ItemContent"
            },
            "description": "The content associated with the message."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponsesMessageItemResource"
          }
        ],
        "description": "A message resource item with the `assistant` role."
      },
      "OpenAI.ResponsesDeveloperMessageItemParam": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "developer"
            ],
            "description": "The role of the message, which is always `developer`."
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OpenAI.ItemContent"
                }
              }
            ],
            "description": "The content associated with the message."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponsesMessageItemParam"
          }
        ],
        "description": "A message parameter item with the `developer` role."
      },
      "OpenAI.ResponsesDeveloperMessageItemResource": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "developer"
            ],
            "description": "The role of the message, which is always `developer`."
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ItemContent"
            },
            "description": "The content associated with the message."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponsesMessageItemResource"
          }
        ],
        "description": "A message resource item with the `developer` role."
      },
      "OpenAI.ResponsesMessageItemParam": {
        "type": "object",
        "required": [
          "type",
          "role"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "message"
            ],
            "description": "The type of the responses item, which is always 'message'."
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ResponsesMessageRole"
              }
            ],
            "description": "The role associated with the message."
          }
        },
        "discriminator": {
          "propertyName": "role",
          "mapping": {
            "user": "#/components/schemas/OpenAI.ResponsesUserMessageItemParam",
            "system": "#/components/schemas/OpenAI.ResponsesSystemMessageItemParam",
            "developer": "#/components/schemas/OpenAI.ResponsesDeveloperMessageItemParam",
            "assistant": "#/components/schemas/OpenAI.ResponsesAssistantMessageItemParam"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "A response message item, representing a role and content, as provided as client request parameters."
      },
      "OpenAI.ResponsesMessageItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "role"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "message"
            ],
            "description": "The type of the responses item, which is always 'message'."
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "incomplete"
            ],
            "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API."
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.ResponsesMessageRole"
              }
            ],
            "description": "The role associated with the message."
          }
        },
        "discriminator": {
          "propertyName": "role",
          "mapping": {
            "user": "#/components/schemas/OpenAI.ResponsesUserMessageItemResource",
            "system": "#/components/schemas/OpenAI.ResponsesSystemMessageItemResource",
            "developer": "#/components/schemas/OpenAI.ResponsesDeveloperMessageItemResource",
            "assistant": "#/components/schemas/OpenAI.ResponsesAssistantMessageItemResource"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "A response message resource item, representing a role and content, as provided on service responses."
      },
      "OpenAI.ResponsesMessageRole": {
        "type": "string",
        "enum": [
          "system",
          "developer",
          "user",
          "assistant"
        ],
        "description": "The collection of valid roles for responses message items."
      },
      "OpenAI.ResponsesSystemMessageItemParam": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "system"
            ],
            "description": "The role of the message, which is always `system`."
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OpenAI.ItemContent"
                }
              }
            ],
            "description": "The content associated with the message."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponsesMessageItemParam"
          }
        ],
        "description": "A message parameter item with the `system` role."
      },
      "OpenAI.ResponsesSystemMessageItemResource": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "system"
            ],
            "description": "The role of the message, which is always `system`."
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ItemContent"
            },
            "description": "The content associated with the message."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponsesMessageItemResource"
          }
        ],
        "description": "A message resource item with the `system` role."
      },
      "OpenAI.ResponsesUserMessageItemParam": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user"
            ],
            "description": "The role of the message, which is always `user`."
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OpenAI.ItemContent"
                }
              }
            ],
            "description": "The content associated with the message."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponsesMessageItemParam"
          }
        ],
        "description": "A message parameter item with the `user` role."
      },
      "OpenAI.ResponsesUserMessageItemResource": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user"
            ],
            "description": "The role of the message, which is always `user`."
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.ItemContent"
            },
            "description": "The content associated with the message."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ResponsesMessageItemResource"
          }
        ],
        "description": "A message resource item with the `user` role."
      },
      "OpenAI.ServiceTier": {
        "type": "string",
        "enum": [
          "auto",
          "default",
          "flex",
          "scale",
          "priority"
        ],
        "description": "Specifies the processing type used for serving the request.\n  - If set to 'auto', then the request will be processed with the service tier configured in the Project settings. Unless otherwise configured, the Project will use 'default'.\n  - If set to 'default', then the request will be processed with the standard pricing and performance for the selected model.\n  - If set to '[flex](/docs/guides/flex-processing)' or 'priority', then the request will be processed with the corresponding service tier. [Contact sales](https://openai.com/contact-sales) to learn more about Priority processing.\n  - When not set, the default behavior is 'auto'.\n\n  When the `service_tier` parameter is set, the response body will include the `service_tier` value based on the processing mode actually used to serve the request. This response value may be different from the value set in the parameter."
      },
      "OpenAI.TextResponseFormatConfiguration": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        },
        "description": "An object specifying the format that the model must output.\n\nConfiguring `{ \"type\": \"json_schema\" }` enables Structured Outputs,\nwhich ensures the model will match your supplied JSON schema. Learn more in the\n[Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nThe default format is `{ \"type\": \"text\" }` with no additional options.\n\n*Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it."
      },
      "OpenAI.Tool": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.ToolType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "function": "#/components/schemas/OpenAI.FunctionTool",
            "file_search": "#/components/schemas/OpenAI.FileSearchTool",
            "computer_use_preview": "#/components/schemas/OpenAI.ComputerUsePreviewTool",
            "web_search_preview": "#/components/schemas/OpenAI.WebSearchPreviewTool",
            "code_interpreter": "#/components/schemas/OpenAI.CodeInterpreterTool",
            "image_generation": "#/components/schemas/OpenAI.ImageGenTool",
            "local_shell": "#/components/schemas/OpenAI.LocalShellTool",
            "mcp": "#/components/schemas/OpenAI.MCPTool",
            "bing_grounding": "#/components/schemas/BingGroundingAgentTool",
            "fabric_dataagent_preview": "#/components/schemas/MicrosoftFabricAgentTool",
            "sharepoint_grounding_preview": "#/components/schemas/SharepointAgentTool",
            "azure_ai_search": "#/components/schemas/AzureAISearchAgentTool",
            "openapi": "#/components/schemas/OpenApiAgentTool",
            "bing_custom_search_preview": "#/components/schemas/BingCustomSearchAgentTool",
            "browser_automation_preview": "#/components/schemas/BrowserAutomationAgentTool",
            "azure_function": "#/components/schemas/AzureFunctionAgentTool",
            "capture_structured_outputs": "#/components/schemas/CaptureStructuredOutputsTool",
            "a2a_preview": "#/components/schemas/A2ATool",
            "memory_search": "#/components/schemas/MemorySearchTool"
          }
        }
      },
      "OpenAI.ToolChoiceObject": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.ToolChoiceObjectType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "file_search": "#/components/schemas/OpenAI.ToolChoiceObjectFileSearch",
            "computer_use_preview": "#/components/schemas/OpenAI.ToolChoiceObjectComputer",
            "web_search_preview": "#/components/schemas/OpenAI.ToolChoiceObjectWebSearch",
            "image_generation": "#/components/schemas/OpenAI.ToolChoiceObjectImageGen",
            "code_interpreter": "#/components/schemas/OpenAI.ToolChoiceObjectCodeInterpreter",
            "function": "#/components/schemas/OpenAI.ToolChoiceObjectFunction",
            "mcp": "#/components/schemas/OpenAI.ToolChoiceObjectMCP"
          }
        }
      },
      "OpenAI.ToolChoiceObjectCodeInterpreter": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "code_interpreter"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ToolChoiceObject"
          }
        ]
      },
      "OpenAI.ToolChoiceObjectComputer": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "computer_use_preview"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ToolChoiceObject"
          }
        ]
      },
      "OpenAI.ToolChoiceObjectFileSearch": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file_search"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ToolChoiceObject"
          }
        ]
      },
      "OpenAI.ToolChoiceObjectFunction": {
        "type": "object",
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "For function calling, the type is always `function`."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ToolChoiceObject"
          }
        ],
        "description": "Use this option to force the model to call a specific function."
      },
      "OpenAI.ToolChoiceObjectImageGen": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_generation"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ToolChoiceObject"
          }
        ]
      },
      "OpenAI.ToolChoiceObjectMCP": {
        "type": "object",
        "required": [
          "type",
          "server_label"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mcp"
            ],
            "description": "For MCP tools, the type is always `mcp`."
          },
          "server_label": {
            "type": "string",
            "description": "The label of the MCP server to use."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the tool to call on the server."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ToolChoiceObject"
          }
        ],
        "description": "Use this option to force the model to call a specific tool on a remote MCP server."
      },
      "OpenAI.ToolChoiceObjectType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "file_search",
              "function",
              "computer_use_preview",
              "web_search_preview",
              "image_generation",
              "code_interpreter",
              "mcp"
            ]
          }
        ],
        "description": "Indicates that the model should use a built-in tool to generate a response.\n[Learn more about built-in tools](/docs/guides/tools)."
      },
      "OpenAI.ToolChoiceObjectWebSearch": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "web_search_preview"
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ToolChoiceObject"
          }
        ],
        "description": "Note: web_search is not yet available via Azure OpenAI."
      },
      "OpenAI.ToolChoiceOptions": {
        "type": "string",
        "enum": [
          "none",
          "auto",
          "required"
        ],
        "description": "Controls which (if any) tool is called by the model.\n\n`none` means the model will not call any tool and instead generates a message.\n\n`auto` means the model can pick between generating a message or calling one or\nmore tools.\n\n`required` means the model must call one or more tools."
      },
      "OpenAI.ToolType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "file_search",
              "function",
              "computer_use_preview",
              "web_search_preview",
              "mcp",
              "code_interpreter",
              "image_generation",
              "local_shell",
              "bing_grounding",
              "browser_automation_preview",
              "fabric_dataagent_preview",
              "sharepoint_grounding_preview",
              "azure_ai_search",
              "openapi",
              "bing_custom_search_preview",
              "capture_structured_outputs",
              "a2a_preview",
              "azure_function",
              "memory_search"
            ]
          }
        ],
        "description": "A tool that can be used to generate a response."
      },
      "OpenAI.TopLogProb": {
        "type": "object",
        "required": [
          "token",
          "logprob",
          "bytes"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "logprob": {
            "type": "number",
            "format": "float"
          },
          "bytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "description": "The top log probability of a token."
      },
      "OpenAI.UpdateConversationRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          }
        },
        "description": "Update a conversation"
      },
      "OpenAI.VectorStoreFileAttributes": {
        "type": "object",
        "additionalProperties": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "number",
              "format": "float"
            }
          ]
        },
        "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. Keys are strings\nwith a maximum length of 64 characters. Values are strings with a maximum\nlength of 512 characters, booleans, or numbers.",
        "x-oaiTypeLabel": "map"
      },
      "OpenAI.WebSearchAction": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OpenAI.WebSearchActionType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "find": "#/components/schemas/OpenAI.WebSearchActionFind",
            "open_page": "#/components/schemas/OpenAI.WebSearchActionOpenPage",
            "search": "#/components/schemas/OpenAI.WebSearchActionSearch"
          }
        }
      },
      "OpenAI.WebSearchActionFind": {
        "type": "object",
        "required": [
          "type",
          "url",
          "pattern"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "find"
            ],
            "description": "The action type."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the page searched for the pattern."
          },
          "pattern": {
            "type": "string",
            "description": "The pattern or text to search for within the page."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.WebSearchAction"
          }
        ],
        "description": "Action type \"find\": Searches for a pattern within a loaded page."
      },
      "OpenAI.WebSearchActionOpenPage": {
        "type": "object",
        "required": [
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "open_page"
            ],
            "description": "The action type."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL opened by the model."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.WebSearchAction"
          }
        ],
        "description": "Action type \"open_page\" - Opens a specific URL from search results."
      },
      "OpenAI.WebSearchActionSearch": {
        "type": "object",
        "required": [
          "type",
          "query"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "search"
            ],
            "description": "The action type."
          },
          "query": {
            "type": "string",
            "description": "The search query."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.WebSearchAction"
          }
        ],
        "description": "Action type \"search\" - Performs a web search query."
      },
      "OpenAI.WebSearchActionType": {
        "type": "string",
        "enum": [
          "search",
          "open_page",
          "find"
        ]
      },
      "OpenAI.WebSearchPreviewTool": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "web_search_preview"
            ],
            "description": "The type of the web search tool. One of `web_search_preview` or `web_search_preview_2025_03_11`."
          },
          "user_location": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Location"
              }
            ],
            "nullable": true,
            "description": "The user's location."
          },
          "search_context_size": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ],
            "description": "High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "Note: web_search is not yet available via Azure OpenAI."
      },
      "OpenAI.WebSearchToolCallItemParam": {
        "type": "object",
        "required": [
          "type",
          "action"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "web_search_call"
            ]
          },
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.WebSearchAction"
              }
            ],
            "description": "An object describing the specific action taken in this web search call.\nIncludes details on how the model used the web (search, open_page, find)."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemParam"
          }
        ],
        "description": "The results of a web search tool call. See the\n[web search guide](/docs/guides/tools-web-search) for more information.\n"
      },
      "OpenAI.WebSearchToolCallItemResource": {
        "type": "object",
        "required": [
          "type",
          "status",
          "action"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "web_search_call"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "searching",
              "completed",
              "failed"
            ],
            "description": "The status of the web search tool call."
          },
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.WebSearchAction"
              }
            ],
            "description": "An object describing the specific action taken in this web search call.\nIncludes details on how the model used the web (search, open_page, find)."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ],
        "description": "The results of a web search tool call. See the\n[web search guide](/docs/guides/tools-web-search) for more information.\n"
      },
      "OpenAI.integer": {
        "type": "integer",
        "format": "int64"
      },
      "OpenAI.numeric": {
        "type": "number",
        "format": "double"
      },
      "OpenApiAgentTool": {
        "type": "object",
        "required": [
          "type",
          "openapi"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "openapi"
            ],
            "description": "The object type, which is always 'openapi'."
          },
          "openapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenApiFunctionDefinition"
              }
            ],
            "description": "The openapi function definition."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "The input definition information for an OpenAPI tool as used to configure an agent."
      },
      "OpenApiAnonymousAuthDetails": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "anonymous"
            ],
            "description": "The object type, which is always 'anonymous'."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenApiAuthDetails"
          }
        ],
        "description": "Security details for OpenApi anonymous authentication"
      },
      "OpenApiAuthDetails": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenApiAuthType"
              }
            ],
            "description": "The type of authentication, must be anonymous/project_connection/managed_identity"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "anonymous": "#/components/schemas/OpenApiAnonymousAuthDetails",
            "project_connection": "#/components/schemas/OpenApiProjectConnectionAuthDetails",
            "managed_identity": "#/components/schemas/OpenApiManagedAuthDetails"
          }
        },
        "description": "authentication details for OpenApiFunctionDefinition"
      },
      "OpenApiAuthType": {
        "anyOf": [
          {
            "type": "string",
            "enum": [
              "anonymous",
              "project_connection",
              "managed_identity"
            ]
          },
          {
            "type": "string"
          }
        ],
        "description": "Authentication type for OpenApi endpoint. Allowed types are:\n- Anonymous (no authentication required)\n- Project Connection (requires project_connection_id to endpoint, as setup in AI Foundry)\n- Managed_Identity (requires audience for identity based auth)"
      },
      "OpenApiFunctionDefinition": {
        "type": "object",
        "required": [
          "name",
          "spec",
          "auth"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to be called."
          },
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "spec": {
            "description": "The openapi function shape, described as a JSON Schema object."
          },
          "auth": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenApiAuthDetails"
              }
            ],
            "description": "Open API authentication details"
          },
          "default_params": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of OpenAPI spec parameters that will use user-provided defaults"
          },
          "functions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the function to be called."
                },
                "description": {
                  "type": "string",
                  "description": "A description of what the function does, used by the model to choose when and how to call the function."
                },
                "parameters": {
                  "description": "The parameters the functions accepts, described as a JSON Schema object."
                }
              },
              "required": [
                "name",
                "parameters"
              ]
            },
            "description": "List of function definitions used by OpenApi tool"
          }
        },
        "description": "The input definition information for an openapi function."
      },
      "OpenApiManagedAuthDetails": {
        "type": "object",
        "required": [
          "type",
          "security_scheme"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "managed_identity"
            ],
            "description": "The object type, which is always 'managed_identity'."
          },
          "security_scheme": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenApiManagedSecurityScheme"
              }
            ],
            "description": "Connection auth security details"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenApiAuthDetails"
          }
        ],
        "description": "Security details for OpenApi managed_identity authentication"
      },
      "OpenApiManagedSecurityScheme": {
        "type": "object",
        "required": [
          "audience"
        ],
        "properties": {
          "audience": {
            "type": "string",
            "description": "Authentication scope for managed_identity auth type"
          }
        },
        "description": "Security scheme for OpenApi managed_identity authentication"
      },
      "OpenApiProjectConnectionAuthDetails": {
        "type": "object",
        "required": [
          "type",
          "security_scheme"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "project_connection"
            ],
            "description": "The object type, which is always 'project_connection'."
          },
          "security_scheme": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenApiProjectConnectionSecurityScheme"
              }
            ],
            "description": "Project connection auth security details"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenApiAuthDetails"
          }
        ],
        "description": "Security details for OpenApi project connection authentication"
      },
      "OpenApiProjectConnectionSecurityScheme": {
        "type": "object",
        "required": [
          "project_connection_id"
        ],
        "properties": {
          "project_connection_id": {
            "type": "string",
            "description": "Project connection id for Project Connection auth type"
          }
        },
        "description": "Security scheme for OpenApi managed_identity authentication"
      },
      "PagedConnection": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            },
            "description": "The Connection items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of Connection items"
      },
      "PagedDatasetVersion": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetVersion"
            },
            "description": "The DatasetVersion items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of DatasetVersion items"
      },
      "PagedDeployment": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Deployment"
            },
            "description": "The Deployment items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of Deployment items"
      },
      "PagedEvaluationRule": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvaluationRule"
            },
            "description": "The EvaluationRule items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of EvaluationRule items"
      },
      "PagedEvaluationTaxonomy": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvaluationTaxonomy"
            },
            "description": "The EvaluationTaxonomy items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of EvaluationTaxonomy items"
      },
      "PagedEvaluatorVersion": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvaluatorVersion"
            },
            "description": "The EvaluatorVersion items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of EvaluatorVersion items"
      },
      "PagedIndex": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Index"
            },
            "description": "The Index items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of Index items"
      },
      "PagedInsight": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Insight"
            },
            "description": "The Insight items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of Insight items"
      },
      "PagedRedTeam": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RedTeam"
            },
            "description": "The RedTeam items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of RedTeam items"
      },
      "PagedSchedule": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Schedule"
            },
            "description": "The Schedule items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of Schedule items"
      },
      "PagedScheduleRun": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleRun"
            },
            "description": "The ScheduleRun items on this page"
          },
          "nextLink": {
            "type": "string",
            "format": "uri",
            "description": "The link to the next page of items"
          }
        },
        "description": "Paged collection of ScheduleRun items"
      },
      "PendingUploadRequest": {
        "type": "object",
        "required": [
          "pendingUploadType"
        ],
        "properties": {
          "pendingUploadId": {
            "type": "string",
            "description": "If PendingUploadId is not provided, a random GUID will be used."
          },
          "connectionName": {
            "type": "string",
            "description": "Azure Storage Account connection name to use for generating temporary SAS token"
          },
          "pendingUploadType": {
            "type": "string",
            "enum": [
              "BlobReference"
            ],
            "description": "BlobReference is the only supported type."
          }
        },
        "description": "Represents a request for a pending upload."
      },
      "PendingUploadResponse": {
        "type": "object",
        "required": [
          "blobReference",
          "pendingUploadId",
          "pendingUploadType"
        ],
        "properties": {
          "blobReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BlobReference"
              }
            ],
            "description": "Container-level read, write, list SAS."
          },
          "pendingUploadId": {
            "type": "string",
            "description": "ID for this upload request."
          },
          "version": {
            "type": "string",
            "description": "Version of asset to be created if user did not specify version when initially creating upload"
          },
          "pendingUploadType": {
            "type": "string",
            "enum": [
              "BlobReference"
            ],
            "description": "BlobReference is the only supported type"
          }
        },
        "description": "Represents the response for a pending upload request"
      },
      "PromptAgentDefinition": {
        "type": "object",
        "required": [
          "kind",
          "model"
        ],
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "prompt"
            ]
          },
          "model": {
            "type": "string",
            "description": "The model deployment to use for this agent."
          },
          "instructions": {
            "type": "string",
            "nullable": true,
            "description": "A system (or developer) message inserted into the model's context."
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "minimum": 0,
            "maximum": 2,
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "minimum": 0,
            "maximum": 1,
            "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.",
            "default": 1
          },
          "reasoning": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.Reasoning"
              }
            ],
            "nullable": true
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAI.Tool"
            },
            "description": "An array of tools the model may call while generating a response. You\ncan specify which tool to use by setting the `tool_choice` parameter."
          },
          "text": {
            "type": "object",
            "properties": {
              "format": {
                "$ref": "#/components/schemas/OpenAI.ResponseTextFormatConfiguration"
              }
            },
            "description": "Configuration options for a text response from the model. Can be plain text or structured JSON data."
          },
          "structured_inputs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/StructuredInputDefinition"
            },
            "description": "Set of structured inputs that can participate in prompt template substitution or tool argument bindings."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AgentDefinition"
          }
        ],
        "description": "The prompt agent definition"
      },
      "PromptBasedEvaluatorDefinition": {
        "type": "object",
        "required": [
          "type",
          "prompt_text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "prompt"
            ]
          },
          "prompt_text": {
            "type": "string",
            "description": "The prompt text used for evaluation"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EvaluatorDefinition"
          }
        ],
        "description": "Prompt-based evaluator"
      },
      "ProtocolVersionRecord": {
        "type": "object",
        "required": [
          "protocol",
          "version"
        ],
        "properties": {
          "protocol": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentProtocol"
              }
            ],
            "description": "The protocol type."
          },
          "version": {
            "type": "string",
            "description": "The version string for the protocol, e.g. 'v0.1.1'."
          }
        },
        "description": "A record mapping for a single protocol and its version."
      },
      "RaiConfig": {
        "type": "object",
        "required": [
          "rai_policy_name"
        ],
        "properties": {
          "rai_policy_name": {
            "type": "string",
            "description": "The name of the RAI policy to apply."
          }
        },
        "description": "Configuration for Responsible AI (RAI) content filtering and safety features."
      },
      "RecurrenceSchedule": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurrenceType"
              }
            ],
            "description": "Recurrence type for the recurrence schedule."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Hourly": "#/components/schemas/HourlyRecurrenceSchedule",
            "Daily": "#/components/schemas/DailyRecurrenceSchedule",
            "Weekly": "#/components/schemas/WeeklyRecurrenceSchedule",
            "Monthly": "#/components/schemas/MonthlyRecurrenceSchedule"
          }
        },
        "description": "Recurrence schedule model."
      },
      "RecurrenceTrigger": {
        "type": "object",
        "required": [
          "type",
          "interval",
          "schedule"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Recurrence"
            ],
            "description": "Type of the trigger."
          },
          "startTime": {
            "type": "string",
            "description": "Start time for the recurrence schedule in ISO 8601 format."
          },
          "endTime": {
            "type": "string",
            "description": "End time for the recurrence schedule in ISO 8601 format."
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for the recurrence schedule.",
            "default": "UTC"
          },
          "interval": {
            "type": "integer",
            "format": "int32",
            "description": "Interval for the recurrence schedule."
          },
          "schedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurrenceSchedule"
              }
            ],
            "description": "Recurrence schedule for the recurrence trigger."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Trigger"
          }
        ],
        "description": "Recurrence based trigger."
      },
      "RecurrenceType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "Hourly",
              "Daily",
              "Weekly",
              "Monthly"
            ]
          }
        ],
        "description": "Recurrence type."
      },
      "RedTeam": {
        "type": "object",
        "required": [
          "id",
          "target"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the red team run.",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Name of the red-team run."
          },
          "numTurns": {
            "type": "integer",
            "format": "int32",
            "description": "Number of simulation rounds."
          },
          "attackStrategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttackStrategy"
            },
            "description": "List of attack strategies or nested lists of attack strategies."
          },
          "simulationOnly": {
            "type": "boolean",
            "description": "Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result.",
            "default": false
          },
          "riskCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskCategory"
            },
            "description": "List of risk categories to generate attack objectives for."
          },
          "applicationScenario": {
            "type": "string",
            "description": "Application scenario for the red team operation, to generate scenario specific attacks."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Red team's tags. Unlike properties, tags are fully mutable."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed."
          },
          "status": {
            "type": "string",
            "description": "Status of the red-team. It is set by service and is read-only.",
            "readOnly": true
          },
          "target": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TargetConfig"
              }
            ],
            "description": "Target configuration for the red-team run."
          }
        },
        "description": "Red team details."
      },
      "RedTeamItemGenerationParams": {
        "type": "object",
        "required": [
          "type",
          "attack_strategies",
          "num_turns"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "red_team"
            ],
            "description": "The type of item generation parameters, always `red_team`.",
            "x-stainless-const": true
          },
          "attack_strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttackStrategy"
            },
            "description": "The collection of attack strategies to be used."
          },
          "num_turns": {
            "type": "integer",
            "format": "int32",
            "description": "The number of turns allowed in the game."
          }
        },
        "description": "Represents the parameters for red team item generation."
      },
      "RiskCategory": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "HateUnfairness",
              "Violence",
              "Sexual",
              "SelfHarm"
            ]
          }
        ],
        "description": "Risk category for the attack objective."
      },
      "SASCredentials": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SAS"
            ],
            "description": "The credential type",
            "readOnly": true
          },
          "SAS": {
            "type": "string",
            "description": "SAS token",
            "readOnly": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCredentials"
          }
        ],
        "description": "Shared Access Signature (SAS) credential definition"
      },
      "SampleType": {
        "anyOf": [
          {
            "type": "string",
            "enum": [
              "EvaluationResultSample"
            ]
          },
          {
            "type": "string"
          }
        ],
        "description": "The type of sample used in the analysis."
      },
      "SasCredential": {
        "type": "object",
        "required": [
          "sasUri",
          "type"
        ],
        "properties": {
          "sasUri": {
            "type": "string",
            "description": "SAS uri",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "enum": [
              "SAS"
            ],
            "description": "Type of credential",
            "readOnly": true
          }
        },
        "description": "SAS Credential definition"
      },
      "Schedule": {
        "type": "object",
        "required": [
          "id",
          "enabled",
          "trigger",
          "task",
          "systemData"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the schedule.",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Name of the schedule."
          },
          "description": {
            "type": "string",
            "description": "Description of the schedule."
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled status of the schedule."
          },
          "provisioningStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduleProvisioningStatus"
              }
            ],
            "description": "Provisioning status of the schedule.",
            "readOnly": true
          },
          "trigger": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Trigger"
              }
            ],
            "description": "Trigger for the schedule."
          },
          "task": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduleTask"
              }
            ],
            "description": "Task for the schedule."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Schedule's tags. Unlike properties, tags are fully mutable."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Schedule's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed."
          },
          "systemData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "System metadata for the resource.",
            "readOnly": true
          }
        },
        "description": "Schedule model."
      },
      "ScheduleProvisioningStatus": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "Creating",
              "Updating",
              "Deleting",
              "Succeeded",
              "Failed"
            ]
          }
        ],
        "description": "Schedule provisioning status."
      },
      "ScheduleRun": {
        "type": "object",
        "required": [
          "id",
          "scheduleId",
          "success",
          "properties"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the schedule run.",
            "readOnly": true
          },
          "scheduleId": {
            "type": "string",
            "description": "Identifier of the schedule."
          },
          "success": {
            "type": "boolean",
            "description": "Trigger success status of the schedule run.",
            "readOnly": true
          },
          "triggerTime": {
            "type": "string",
            "description": "Trigger time of the schedule run."
          },
          "error": {
            "type": "string",
            "description": "Error information for the schedule run.",
            "readOnly": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Properties of the schedule run.",
            "readOnly": true
          }
        },
        "description": "Schedule run model."
      },
      "ScheduleTask": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduleTaskType"
              }
            ],
            "description": "Type of the task."
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Configuration for the task."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Evaluation": "#/components/schemas/EvaluationScheduleTask",
            "Insight": "#/components/schemas/InsightScheduleTask"
          }
        },
        "description": "Schedule task model."
      },
      "ScheduleTaskType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "Evaluation",
              "Insight"
            ]
          }
        ],
        "description": "Type of the task."
      },
      "SeedPromptsRedTeamItemGenerationParams": {
        "type": "object",
        "required": [
          "type",
          "attack_strategies",
          "num_turns",
          "source"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "red_team_seed_prompts"
            ],
            "description": "The type of item generation parameters, always `red_team`.",
            "x-stainless-const": true
          },
          "attack_strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttackStrategy"
            },
            "description": "The collection of attack strategies to be used."
          },
          "num_turns": {
            "type": "integer",
            "format": "int32",
            "description": "The number of turns allowed in the game."
          },
          "source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileContentSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileIdSource"
              }
            ],
            "description": "The collection of attack strategies to be used."
          }
        },
        "description": "Represents the parameters for red team item generation with seed prompts."
      },
      "SharepointAgentTool": {
        "type": "object",
        "required": [
          "type",
          "sharepoint_grounding_preview"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sharepoint_grounding_preview"
            ],
            "description": "The object type, which is always 'sharepoint_grounding'."
          },
          "sharepoint_grounding_preview": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SharepointGroundingToolParameters"
              }
            ],
            "description": "The sharepoint grounding tool parameters."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.Tool"
          }
        ],
        "description": "The input definition information for a sharepoint tool as used to configure an agent."
      },
      "SharepointGroundingToolParameters": {
        "type": "object",
        "properties": {
          "project_connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolProjectConnection"
            },
            "maxItems": 1,
            "description": "The project connections attached to this tool. There can be a maximum of 1 connection\nresource attached to the tool."
          }
        },
        "description": "The sharepoint grounding tool parameters."
      },
      "Sku": {
        "type": "object",
        "required": [
          "capacity",
          "family",
          "name",
          "size",
          "tier"
        ],
        "properties": {
          "capacity": {
            "type": "integer",
            "format": "int64",
            "description": "Sku capacity"
          },
          "family": {
            "type": "string",
            "description": "Sku family"
          },
          "name": {
            "type": "string",
            "description": "Sku name"
          },
          "size": {
            "type": "string",
            "description": "Sku size"
          },
          "tier": {
            "type": "string",
            "description": "Sku tier"
          }
        },
        "description": "Sku information"
      },
      "StructuredInputDefinition": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A human-readable description of the input."
          },
          "default_value": {
            "description": "The default value for the input if no run-time value is provided."
          },
          "tool_argument_bindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolArgumentBinding"
            },
            "description": "When provided, the input value is bound to the specified tool arguments."
          },
          "schema": {
            "description": "The JSON schema for the structured input (optional)."
          },
          "required": {
            "type": "boolean",
            "description": "Whether the input property is required when the agent is invoked.",
            "default": false
          }
        },
        "description": "An structured input that can participate in prompt template substitutions and tool argument binding."
      },
      "StructuredOutputDefinition": {
        "type": "object",
        "required": [
          "name",
          "description",
          "schema",
          "strict"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the structured output."
          },
          "description": {
            "type": "string",
            "description": "A description of the output to emit. Used by the model to determine when to emit the output."
          },
          "schema": {
            "type": "object",
            "additionalProperties": {},
            "description": "The JSON schema for the structured output."
          },
          "strict": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to enforce strict validation. Default `true`."
          }
        },
        "description": "A structured output that can be produced by the agent."
      },
      "StructuredOutputsItemResource": {
        "type": "object",
        "required": [
          "type",
          "output"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "structured_outputs"
            ]
          },
          "output": {
            "description": "The structured output captured during the response."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ]
      },
      "Target": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of target.",
            "x-stainless-const": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "azure_ai_model": "#/components/schemas/AzureAIModelTarget",
            "azure_ai_agent": "#/components/schemas/AzureAIAgentTarget",
            "azure_ai_assistant": "#/components/schemas/AzureAIAssistantTarget"
          }
        },
        "description": "Base class for targets with discriminator support."
      },
      "TargetCompletions": {
        "type": "object",
        "required": [
          "type",
          "source",
          "target"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_target_completions"
            ],
            "description": "The type of data source, always `TargetCompletions`.",
            "x-stainless-const": true
          },
          "input_messages": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAI.CreateEvalCompletionsRunDataSourceInputMessagesItemReference"
              }
            ],
            "description": "Input messages configuration."
          },
          "source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileContentSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileIdSource"
              }
            ],
            "description": "The source configuration for inline or file data."
          },
          "target": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Target"
              }
            ],
            "description": "The target configuration for the evaluation."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EvalRunDataSource"
          }
        ],
        "description": "Represents a data source for target-based completion evaluation configuration."
      },
      "TargetConfig": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the model configuration."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureOpenAIModel": "#/components/schemas/AzureOpenAIModelConfiguration"
          }
        },
        "description": "Abstract class for target configuration."
      },
      "TargetUpdate": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of target.",
            "x-stainless-const": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "azure_ai_model": "#/components/schemas/AzureAIModelTargetUpdate",
            "azure_ai_assistant": "#/components/schemas/AzureAIAssistantTargetUpdate"
          }
        },
        "description": "Base class for targets with discriminator support."
      },
      "TaxonomyCategory": {
        "type": "object",
        "required": [
          "id",
          "name",
          "riskCategory",
          "subCategories"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the taxonomy category."
          },
          "name": {
            "type": "string",
            "description": "Name of the taxonomy category."
          },
          "description": {
            "type": "string",
            "description": "Description of the taxonomy category."
          },
          "riskCategory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RiskCategory"
              }
            ],
            "description": "Risk category associated with this taxonomy category."
          },
          "subCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxonomySubCategory"
            },
            "description": "List of taxonomy sub categories."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional properties for the taxonomy category."
          }
        },
        "description": "Taxonomy category definition."
      },
      "TaxonomyRedTeamItemGenerationParams": {
        "type": "object",
        "required": [
          "type",
          "attack_strategies",
          "num_turns",
          "source"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "red_team_taxonomy"
            ],
            "description": "The type of item generation parameters, always `red_team`.",
            "x-stainless-const": true
          },
          "attack_strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttackStrategy"
            },
            "description": "The collection of attack strategies to be used."
          },
          "num_turns": {
            "type": "integer",
            "format": "int32",
            "description": "The number of turns allowed in the game."
          },
          "source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileContentSource"
              },
              {
                "$ref": "#/components/schemas/OpenAI.EvalJsonlFileIdSource"
              }
            ],
            "description": "The collection of attack strategies to be used."
          }
        },
        "description": "Represents the parameters for red team item generation with seed prompts."
      },
      "TaxonomySubCategory": {
        "type": "object",
        "required": [
          "id",
          "name",
          "enabled"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the taxonomy sub-category."
          },
          "name": {
            "type": "string",
            "description": "Name of the taxonomy sub-category."
          },
          "description": {
            "type": "string",
            "description": "Description of the taxonomy sub-category."
          },
          "enabled": {
            "type": "boolean",
            "description": "List of taxonomy items under this sub-category."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional properties for the taxonomy sub-category."
          }
        },
        "description": "Taxonomy sub-category definition."
      },
      "ToolArgumentBinding": {
        "type": "object",
        "required": [
          "argument_name"
        ],
        "properties": {
          "tool_name": {
            "type": "string",
            "description": "The name of the tool to participate in the argument binding. If not provided, then all tools with matching arguments will participate in binding."
          },
          "argument_name": {
            "type": "string",
            "description": "The name of the argument within the tool."
          }
        }
      },
      "ToolDescription": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tool."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the tool's purpose."
          }
        },
        "description": "Description of a tool that can be used by an agent."
      },
      "ToolProjectConnection": {
        "type": "object",
        "required": [
          "project_connection_id"
        ],
        "properties": {
          "project_connection_id": {
            "type": "string",
            "description": "A project connection in a ToolProjectConnectionList attached to this tool."
          }
        },
        "description": "A project connection resource."
      },
      "TracesEvalRunDataSource": {
        "type": "object",
        "required": [
          "type",
          "trace_ids"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_ai_traces"
            ],
            "description": "The type of data source, always `azure_ai_traces`.",
            "x-stainless-const": true
          },
          "trace_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of Agent trace identifiers that should be evaluated."
          },
          "lookback_hours": {
            "type": "integer",
            "format": "int32",
            "description": "Lookback window (in hours) applied when retrieving traces from Application Insights.",
            "default": 168
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/EvalRunDataSource"
          }
        ],
        "description": "Represents a data source for evaluation runs that operate over Agent traces stored in Application Insights."
      },
      "TreatmentEffectType": {
        "anyOf": [
          {
            "type": "string",
            "enum": [
              "TooFewSamples",
              "Inconclusive",
              "Changed",
              "Improved",
              "Degraded"
            ]
          },
          {
            "type": "string"
          }
        ],
        "description": "Treatment Effect Type."
      },
      "Trigger": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TriggerType"
              }
            ],
            "description": "Type of the trigger."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Cron": "#/components/schemas/CronTrigger",
            "Recurrence": "#/components/schemas/RecurrenceTrigger",
            "OneTime": "#/components/schemas/OneTimeTrigger"
          }
        },
        "description": "Base model for Trigger of the schedule."
      },
      "TriggerType": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "Cron",
              "Recurrence",
              "OneTime"
            ]
          }
        ],
        "description": "Type of the trigger."
      },
      "UpdateAgentFromManifestRequest": {
        "type": "object",
        "required": [
          "manifest_id",
          "parameter_values"
        ],
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "description": "A human-readable description of the agent."
          },
          "manifest_id": {
            "type": "string",
            "description": "The manifest ID to import the agent version from."
          },
          "parameter_values": {
            "type": "object",
            "additionalProperties": {},
            "description": "The inputs to the manifest that will result in a fully materialized Agent."
          }
        }
      },
      "UpdateAgentRequest": {
        "type": "object",
        "required": [
          "definition"
        ],
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard.\n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.",
            "x-oaiTypeLabel": "map"
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "description": "A human-readable description of the agent."
          },
          "definition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentDefinition"
              }
            ],
            "description": "The agent definition. This can be a workflow, hosted agent, or a simple agent definition."
          }
        }
      },
      "UpdateEvalParametersBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/OpenAI.Metadata"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of immutable 16 key-value pairs that can be attached to an object for storing additional information.\n    Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters."
          }
        }
      },
      "UserProfileMemoryItem": {
        "type": "object",
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "user_profile"
            ],
            "description": "The kind of the memory item."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/MemoryItem"
          }
        ],
        "description": "A memory item specifically containing user profile information extracted from conversations, such as preferences, interests, and personal details."
      },
      "WeeklyRecurrenceSchedule": {
        "type": "object",
        "required": [
          "type",
          "daysOfWeek"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Weekly"
            ],
            "description": "Weekly recurrence type."
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            },
            "description": "Days of the week for the recurrence schedule."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurrenceSchedule"
          }
        ],
        "description": "Weekly recurrence schedule."
      },
      "WorkflowActionOutputItemResource": {
        "type": "object",
        "required": [
          "type",
          "kind",
          "action_id",
          "status"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "workflow_action"
            ]
          },
          "kind": {
            "type": "string",
            "description": "The kind of CSDL action (e.g., 'SetVariable', 'InvokeAzureAgent')."
          },
          "action_id": {
            "type": "string",
            "description": "Unique identifier for the action."
          },
          "parent_action_id": {
            "type": "string",
            "description": "ID of the parent action if this is a nested action."
          },
          "previous_action_id": {
            "type": "string",
            "description": "ID of the previous action if this action follows another."
          },
          "status": {
            "type": "string",
            "enum": [
              "completed",
              "failed",
              "in_progress",
              "cancelled"
            ],
            "description": "Status of the action (e.g., 'in_progress', 'completed', 'failed', 'cancelled')."
          }
        },
        "discriminator": {
          "propertyName": "kind",
          "mapping": {
            "InvokeAzureAgent": "#/components/schemas/InvokeAzureAgentWorkflowActionOutputItemResource"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenAI.ItemResource"
          }
        ]
      },
      "WorkflowDefinition": {
        "type": "object",
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "workflow"
            ]
          },
          "trigger": {
            "type": "object",
            "additionalProperties": {},
            "description": "(Deprecated) The CSDL trigger definition. Use `workflow` property instead to send CSDL yaml definition inline."
          },
          "workflow": {
            "type": "string",
            "description": "The CSDL YAML definition of the workflow."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AgentDefinition"
          }
        ],
        "description": "The workflow specification in CSDL format."
      },
      "integer": {
        "type": "integer",
        "format": "int64"
      }
    },
    "securitySchemes": {
      "OAuth2Auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
            "scopes": {
              "https://ai.azure.com/.default": ""
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "{endpoint}",
      "description": "Azure AI",
      "variables": {
        "endpoint": {
          "default": "",
          "description": "Foundry Project endpoint in the form\n\"https://{ai-services-account-name}.services.ai.azure.com/api/projects/{project-name}\".\nIf you only have one Project in your Foundry Hub, or to target the default Project\nin your Hub, use the form\n\"https://{ai-services-account-name}.services.ai.azure.com/api/projects/_project\""
        }
      }
    }
  ]
}
