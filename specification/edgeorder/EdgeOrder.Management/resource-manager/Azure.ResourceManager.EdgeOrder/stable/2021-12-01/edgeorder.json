{
  "swagger": "2.0",
  "info": {
    "title": "EdgeOrderManagementClient",
    "version": "2021-12-01",
    "description": "Edge Order API's",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "EdgeOrderAddresses"
    },
    {
      "name": "EdgeOrders"
    },
    {
      "name": "EdgeOrderItems"
    }
  ],
  "paths": {
    "/providers/Azure.ResourceManager.EdgeOrder/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.EdgeOrder/addresses": {
      "get": {
        "operationId": "EdgeOrderAddresses_ListAddressesAtSubscriptionLevel",
        "tags": [
          "EdgeOrderAddresses"
        ],
        "description": "Lists all the addresses available under the subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/AddressResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.EdgeOrder/orderItems": {
      "get": {
        "operationId": "EdgeOrderItems_ListOrderItemsAtSubscriptionLevel",
        "tags": [
          "EdgeOrderItems"
        ],
        "description": "Lists order item at subscription level.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrderItemResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listConfigurations": {
      "post": {
        "operationId": "ListConfigurations",
        "description": "This method provides the list of configurations for the given product family, product line and product under subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "$skipToken",
            "in": "query",
            "description": "$skipToken is supported on list of configurations, which provides the next page in the list of configurations.",
            "required": false,
            "type": "string"
          },
          {
            "name": "configurationsRequest",
            "in": "body",
            "description": "Filters for showing the configurations.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedProductConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listProductFamilies": {
      "post": {
        "operationId": "ListProductFamilies",
        "description": "This method provides the list of product families for the given subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "$expand is supported on configurations parameter for product, which provides details on the configurations for the product.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skipToken",
            "in": "query",
            "description": "$skipToken is supported on list of product families, which provides the next page in the list of product families.",
            "required": false,
            "type": "string"
          },
          {
            "name": "productFamiliesRequest",
            "in": "body",
            "description": "Filters for showing the product families.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductFamiliesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedProductFamily"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orders": {
      "get": {
        "operationId": "ListOrderAtSubscriptionLevel",
        "description": "Lists order at subscription level.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "$skipToken",
            "in": "query",
            "description": "$skipToken is supported on Get list of order, which provides the next page in the list of order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedOrderResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/productFamiliesMetadata": {
      "post": {
        "operationId": "ListProductFamiliesMetadata",
        "description": "This method provides the list of product families metadata for the given subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "$skipToken",
            "in": "query",
            "description": "$skipToken is supported on list of product families metadata, which provides the next page in the list of product families metadata.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedProductFamiliesMetadataDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.EdgeOrder/addresses": {
      "get": {
        "operationId": "EdgeOrderAddresses_ListByResourceGroup",
        "tags": [
          "EdgeOrderAddresses"
        ],
        "description": "Lists all the addresses available under the given resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "$filter is supported to filter based on shipping address properties. Filter supports only equals operation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skipToken",
            "in": "query",
            "description": "$skipToken is supported on Get list of addresses, which provides the next page in the list of address.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/AddressResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.EdgeOrder/addresses/{addressName}": {
      "get": {
        "operationId": "EdgeOrderAddresses_GetAddressByName",
        "tags": [
          "EdgeOrderAddresses"
        ],
        "description": "Gets information about the specified address.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "addressName",
            "in": "path",
            "description": "The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 24,
            "pattern": "^[-\\w\\.]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/AddressResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "EdgeOrderAddresses_CreateAddress",
        "tags": [
          "EdgeOrderAddresses"
        ],
        "description": "Creates a new address with the specified parameters. Existing address can be updated with this API",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "addressName",
            "in": "path",
            "description": "The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 24,
            "pattern": "^[-\\w\\.]+$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'AddressResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/AddressResource"
            }
          },
          "201": {
            "description": "Resource 'AddressResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/AddressResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "EdgeOrderAddresses_UpdateAddress",
        "tags": [
          "EdgeOrderAddresses"
        ],
        "description": "Updates the properties of an existing address.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "if-match",
            "in": "header",
            "description": "Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "If-Match"
          },
          {
            "name": "addressName",
            "in": "path",
            "description": "The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 24,
            "pattern": "^[-\\w\\.]+$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressUpdateParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/AddressResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "EdgeOrderAddresses_DeleteAddressByName",
        "tags": [
          "EdgeOrderAddresses"
        ],
        "description": "Deletes an address.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "addressName",
            "in": "path",
            "description": "The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 24,
            "pattern": "^[-\\w\\.]+$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.EdgeOrder/orderItems": {
      "get": {
        "operationId": "EdgeOrderItems_ListByResourceGroup",
        "tags": [
          "EdgeOrderItems"
        ],
        "description": "Lists order item at resource group level.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "$filter is supported to filter based on order id. Filter supports only equals operation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "$expand is supported on device details, forward shipping details and reverse shipping details parameters. Each of these can be provided as a comma separated list. Device Details for order item provides details on the devices of the product, Forward and Reverse Shipping details provide forward and reverse shipping details respectively.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skipToken",
            "in": "query",
            "description": "$skipToken is supported on Get list of order items, which provides the next page in the list of order items.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrderItemResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.EdgeOrder/orderItems/{orderItemName}": {
      "get": {
        "operationId": "EdgeOrderItems_GetOrderItemByName",
        "tags": [
          "EdgeOrderItems"
        ],
        "description": "Gets an order item.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "$expand is supported on device details, forward shipping details and reverse shipping details parameters. Each of these can be provided as a comma separated list. Device Details for order item provides details on the devices of the product, Forward and Reverse Shipping details provide forward and reverse shipping details respectively.",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderItemName",
            "in": "path",
            "description": "The name of the order item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrderItemResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "EdgeOrderItems_CreateOrderItem",
        "tags": [
          "EdgeOrderItems"
        ],
        "description": "Creates an order item. Existing order item cannot be updated with this api and should instead be updated with the Update order item API.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "orderItemName",
            "in": "path",
            "description": "The name of the order item",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderItemResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'OrderItemResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/OrderItemResource"
            }
          },
          "201": {
            "description": "Resource 'OrderItemResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/OrderItemResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "EdgeOrderItems_UpdateOrderItem",
        "tags": [
          "EdgeOrderItems"
        ],
        "description": "Updates the properties of an existing order item.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "if-match",
            "in": "header",
            "description": "Defines the If-Match condition. The patch will be performed only if the ETag of the order on the server matches this value.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "If-Match"
          },
          {
            "name": "orderItemName",
            "in": "path",
            "description": "The name of the order item",
            "required": true,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderItemUpdateParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrderItemResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "EdgeOrderItems_DeleteOrderItemByName",
        "tags": [
          "EdgeOrderItems"
        ],
        "description": "Deletes an order item.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "orderItemName",
            "in": "path",
            "description": "The name of the order item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.EdgeOrder/orderItems/{orderItemName}/cancelOrderItem": {
      "post": {
        "operationId": "EdgeOrderItems_CancelOrderItem",
        "tags": [
          "EdgeOrderItems"
        ],
        "description": "Cancel order item.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "orderItemName",
            "in": "path",
            "description": "The name of the order item",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancellationReason"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ARM operation completed successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.EdgeOrder/orderItems/{orderItemName}/returnOrderItem": {
      "post": {
        "operationId": "EdgeOrderItems_ReturnOrderItem",
        "tags": [
          "EdgeOrderItems"
        ],
        "description": "Return order item.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "orderItemName",
            "in": "path",
            "description": "The name of the order item",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReturnOrderItemDetails"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "ARM operation completed successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.EdgeOrder/orders/{orderName}": {
      "get": {
        "operationId": "EdgeOrders_GetOrderByName",
        "tags": [
          "EdgeOrders"
        ],
        "description": "Gets an order.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "orderName",
            "in": "path",
            "description": "The name of the order",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/OrderResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orders": {
      "get": {
        "operationId": "ListOrderAtResourceGroupLevel",
        "description": "Lists order at resource group level.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90
          },
          {
            "name": "$skipToken",
            "in": "query",
            "description": "$skipToken is supported on Get list of order, which provides the next page in the list of order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedOrderResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "ActionStatusEnum": {
      "type": "string",
      "enum": [
        "Allowed",
        "NotAllowed"
      ],
      "x-ms-enum": {
        "name": "ActionStatusEnum",
        "modelAsString": true,
        "values": [
          {
            "name": "Allowed",
            "value": "Allowed",
            "description": "Allowed flag."
          },
          {
            "name": "NotAllowed",
            "value": "NotAllowed",
            "description": "Not Allowed flag."
          }
        ]
      }
    },
    "AddressDetails": {
      "type": "object",
      "description": "Address details for an order item.",
      "properties": {
        "forwardAddress": {
          "$ref": "#/definitions/AddressProperties",
          "description": "Customer address and contact details. It should be address resource"
        },
        "returnAddress": {
          "$ref": "#/definitions/AddressProperties",
          "description": "Return shipping address",
          "readOnly": true
        }
      },
      "required": [
        "forwardAddress"
      ]
    },
    "AddressProperties": {
      "type": "object",
      "description": "Address Properties",
      "properties": {
        "shippingAddress": {
          "$ref": "#/definitions/ShippingAddress",
          "description": "Shipping details for the address"
        },
        "contactDetails": {
          "$ref": "#/definitions/ContactDetails",
          "description": "Contact details for the address"
        },
        "addressValidationStatus": {
          "$ref": "#/definitions/AddressValidationStatus",
          "description": "Status of address validation",
          "readOnly": true
        }
      },
      "required": [
        "contactDetails"
      ]
    },
    "AddressPropertiesUpdate": {
      "type": "object",
      "description": "Address Properties",
      "properties": {
        "shippingAddress": {
          "$ref": "#/definitions/ShippingAddressUpdate",
          "description": "Shipping details for the address"
        },
        "contactDetails": {
          "$ref": "#/definitions/ContactDetailsUpdate",
          "description": "Contact details for the address"
        }
      }
    },
    "AddressResource": {
      "type": "object",
      "description": "Address Resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/AddressProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the address Resource within the specified resource group. address names must be between 3 and 24 characters in length and use any alphanumeric and underscore only",
          "minLength": 3,
          "maxLength": 24,
          "pattern": "^[-\\w\\.]+$",
          "readOnly": true
        }
      },
      "required": [
        "name"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "AddressResourceListResult": {
      "type": "object",
      "description": "The response of a AddressResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The AddressResource items on this page",
          "items": {
            "$ref": "#/definitions/AddressResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "AddressType": {
      "type": "string",
      "enum": [
        "None",
        "Residential",
        "Commercial"
      ],
      "x-ms-enum": {
        "name": "AddressType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "None",
            "description": "Address type not known."
          },
          {
            "name": "Residential",
            "value": "Residential",
            "description": "Residential Address."
          },
          {
            "name": "Commercial",
            "value": "Commercial",
            "description": "Commercial Address."
          }
        ]
      }
    },
    "AddressUpdateParameter": {
      "type": "object",
      "description": "The Address update parameters",
      "properties": {
        "properties": {
          "$ref": "#/definitions/AddressUpdateProperties",
          "description": "Properties of a address to be updated."
        },
        "tags": {
          "type": "object",
          "description": "The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups).",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AddressUpdateProperties": {
      "type": "object",
      "description": "Address Properties",
      "properties": {
        "shippingAddress": {
          "$ref": "#/definitions/ShippingAddressUpdate",
          "description": "Shipping details for the address"
        },
        "contactDetails": {
          "$ref": "#/definitions/ContactDetailsUpdate",
          "description": "Contact details for the address"
        }
      }
    },
    "AddressValidationStatus": {
      "type": "string",
      "enum": [
        "Valid",
        "Invalid",
        "Ambiguous"
      ],
      "x-ms-enum": {
        "name": "AddressValidationStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "Valid",
            "value": "Valid",
            "description": "Address provided is valid."
          },
          {
            "name": "Invalid",
            "value": "Invalid",
            "description": "Address provided is invalid or not supported."
          },
          {
            "name": "Ambiguous",
            "value": "Ambiguous",
            "description": "Address provided is ambiguous, please choose one of the alternate addresses returned."
          }
        ]
      }
    },
    "AvailabilityInformation": {
      "type": "object",
      "description": "Availability information of a product system.",
      "properties": {
        "availabilityStage": {
          "$ref": "#/definitions/AvailabilityStage",
          "description": "Current availability stage of the product. Availability stage",
          "readOnly": true
        },
        "disabledReason": {
          "$ref": "#/definitions/DisabledReason",
          "description": "Reason why the product is disabled.",
          "readOnly": true
        },
        "disabledReasonMessage": {
          "type": "string",
          "description": "Message for why the product is disabled.",
          "readOnly": true
        }
      }
    },
    "AvailabilityStage": {
      "type": "string",
      "enum": [
        "Available",
        "ComingSoon",
        "Preview",
        "Deprecated",
        "Signup",
        "Unavailable"
      ],
      "x-ms-enum": {
        "name": "AvailabilityStage",
        "modelAsString": true,
        "values": [
          {
            "name": "Available",
            "value": "Available",
            "description": "Product is available."
          },
          {
            "name": "ComingSoon",
            "value": "ComingSoon",
            "description": "Product is coming soon."
          },
          {
            "name": "Preview",
            "value": "Preview",
            "description": "Product is in preview."
          },
          {
            "name": "Deprecated",
            "value": "Deprecated",
            "description": "Product is deprecated."
          },
          {
            "name": "Signup",
            "value": "Signup",
            "description": "Product is available only on signup."
          },
          {
            "name": "Unavailable",
            "value": "Unavailable",
            "description": "Product is not available."
          }
        ]
      }
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "BasicInformation": {
      "type": "object",
      "description": "Basic information for any product system",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Display Name for the product system.",
          "readOnly": true
        },
        "description": {
          "$ref": "#/definitions/ProductDescription",
          "description": "Description related to the product system.",
          "readOnly": true
        },
        "imageInformation": {
          "type": "array",
          "description": "Image information for the product system.",
          "items": {
            "$ref": "#/definitions/ImageInformation"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "costInformation": {
          "$ref": "#/definitions/CostInformation",
          "description": "Cost information for the product system.",
          "readOnly": true
        },
        "availabilityInformation": {
          "$ref": "#/definitions/AvailabilityInformation",
          "description": "Availability information of the product system.",
          "readOnly": true
        },
        "hierarchyInformation": {
          "$ref": "#/definitions/HierarchyInformation",
          "description": "Hierarchy information of a product.",
          "readOnly": true
        }
      }
    },
    "BillingMeterDetails": {
      "type": "object",
      "description": "Holds billing meter details for each type of billing",
      "properties": {
        "name": {
          "type": "string",
          "description": "Represents Billing type name",
          "readOnly": true
        },
        "meterDetails": {
          "$ref": "#/definitions/MeterDetails",
          "description": "Represents MeterDetails",
          "readOnly": true
        },
        "meteringType": {
          "$ref": "#/definitions/MeteringType",
          "description": "Represents Metering type (eg one-time or recurrent)",
          "readOnly": true
        },
        "frequency": {
          "type": "string",
          "description": "Frequency of recurrence",
          "readOnly": true
        }
      }
    },
    "BillingType": {
      "type": "string",
      "enum": [
        "Pav2",
        "Purchase"
      ],
      "x-ms-enum": {
        "name": "BillingType",
        "modelAsString": true,
        "values": [
          {
            "name": "Pav2",
            "value": "Pav2",
            "description": "PaV2 billing."
          },
          {
            "name": "Purchase",
            "value": "Purchase",
            "description": "Purchase billing."
          }
        ]
      }
    },
    "CancellationReason": {
      "type": "object",
      "description": "Reason for cancellation.",
      "properties": {
        "reason": {
          "type": "string",
          "description": "Reason for cancellation."
        }
      },
      "required": [
        "reason"
      ]
    },
    "ChargingType": {
      "type": "string",
      "enum": [
        "PerOrder",
        "PerDevice"
      ],
      "x-ms-enum": {
        "name": "ChargingType",
        "modelAsString": true,
        "values": [
          {
            "name": "PerOrder",
            "value": "PerOrder",
            "description": "Per order charging type."
          },
          {
            "name": "PerDevice",
            "value": "PerDevice",
            "description": "Per device charging type."
          }
        ]
      }
    },
    "CommonProperties": {
      "type": "object",
      "description": "Represents common properties across product hierarchy",
      "properties": {
        "filterableProperties": {
          "type": "array",
          "description": "list of filters supported for a product",
          "items": {
            "$ref": "#/definitions/FilterableProperty"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BasicInformation"
        }
      ]
    },
    "ConfigurationFilters": {
      "type": "object",
      "description": "Configuration filters",
      "properties": {
        "hierarchyInformation": {
          "$ref": "#/definitions/HierarchyInformation",
          "description": "Product hierarchy information"
        },
        "filterableProperty": {
          "type": "array",
          "description": "Filters specific to product",
          "items": {
            "$ref": "#/definitions/FilterableProperty"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "hierarchyInformation"
      ]
    },
    "ConfigurationProperties": {
      "type": "object",
      "description": "Properties of configuration",
      "properties": {
        "specifications": {
          "type": "array",
          "description": "Specifications of the configuration",
          "items": {
            "$ref": "#/definitions/ProductSpecification"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "dimensions": {
          "$ref": "#/definitions/ProductDimensions",
          "description": "Dimensions of the configuration",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CommonProperties"
        }
      ]
    },
    "ConfigurationsRequest": {
      "type": "object",
      "description": "Configuration request object.",
      "properties": {
        "configurationFilters": {
          "type": "array",
          "description": "Holds details about product hierarchy information and filterable property.",
          "items": {
            "$ref": "#/definitions/ConfigurationFilters"
          },
          "x-ms-identifiers": []
        },
        "customerSubscriptionDetails": {
          "$ref": "#/definitions/CustomerSubscriptionDetails",
          "description": "Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details"
        }
      },
      "required": [
        "configurationFilters"
      ]
    },
    "ContactDetails": {
      "type": "object",
      "description": "Contact Details.",
      "properties": {
        "contactName": {
          "type": "string",
          "description": "Contact name of the person."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the contact person."
        },
        "phoneExtension": {
          "type": "string",
          "description": "Phone extension number of the contact person."
        },
        "mobile": {
          "type": "string",
          "description": "Mobile number of the contact person."
        },
        "emailList": {
          "type": "array",
          "description": "List of Email-ids to be notified about job progress.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "contactName",
        "phone",
        "emailList"
      ]
    },
    "ContactDetailsUpdate": {
      "type": "object",
      "description": "Contact Details.",
      "properties": {
        "contactName": {
          "type": "string",
          "description": "Contact name of the person."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the contact person."
        },
        "phoneExtension": {
          "type": "string",
          "description": "Phone extension number of the contact person."
        },
        "mobile": {
          "type": "string",
          "description": "Mobile number of the contact person."
        },
        "emailList": {
          "type": "array",
          "description": "List of Email-ids to be notified about job progress.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CostInformation": {
      "type": "object",
      "description": "Cost information for the product system",
      "properties": {
        "billingMeterDetails": {
          "type": "array",
          "description": "Details on the various billing aspects for the product system.",
          "items": {
            "$ref": "#/definitions/BillingMeterDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "billingInfoUrl": {
          "type": "string",
          "description": "Default url to display billing information",
          "readOnly": true
        }
      }
    },
    "CreatedByType": {
      "type": "string",
      "enum": [
        "User",
        "Application",
        "ManagedIdentity",
        "Key"
      ],
      "x-ms-enum": {
        "name": "CreatedByType",
        "modelAsString": true
      }
    },
    "CustomerSubscriptionDetails": {
      "type": "object",
      "description": "Holds Customer subscription details. Clients can display available products to unregistered customers by explicitly passing subscription details",
      "properties": {
        "registeredFeatures": {
          "type": "array",
          "description": "List of registered feature flags for subscription",
          "items": {
            "$ref": "#/definitions/CustomerSubscriptionRegisteredFeatures"
          },
          "x-ms-identifiers": []
        },
        "locationPlacementId": {
          "type": "string",
          "description": "Location placement Id of a subscription"
        },
        "quotaId": {
          "type": "string",
          "description": "Quota ID of a subscription"
        }
      },
      "required": [
        "quotaId"
      ]
    },
    "CustomerSubscriptionRegisteredFeatures": {
      "type": "object",
      "description": "Represents subscription registered features",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of subscription registered feature"
        },
        "state": {
          "type": "string",
          "description": "State of subscription registered feature"
        }
      }
    },
    "DescriptionType": {
      "type": "string",
      "enum": [
        "Base"
      ],
      "x-ms-enum": {
        "name": "DescriptionType",
        "modelAsString": true,
        "values": [
          {
            "name": "Base",
            "value": "Base",
            "description": "Base description."
          }
        ]
      }
    },
    "DeviceDetails": {
      "type": "object",
      "description": "Device details.",
      "properties": {
        "serialNumber": {
          "type": "string",
          "description": "device serial number",
          "readOnly": true
        },
        "managementResourceId": {
          "type": "string",
          "description": "Management Resource Id",
          "readOnly": true
        },
        "managementResourceTenantId": {
          "type": "string",
          "description": "Management Resource Tenant ID",
          "readOnly": true
        }
      }
    },
    "DisabledReason": {
      "type": "string",
      "enum": [
        "None",
        "Country",
        "Region",
        "Feature",
        "OfferType",
        "NoSubscriptionInfo",
        "NotAvailable",
        "OutOfStock"
      ],
      "x-ms-enum": {
        "name": "DisabledReason",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "None",
            "description": "Not disabled."
          },
          {
            "name": "Country",
            "value": "Country",
            "description": "Not available in the requested country."
          },
          {
            "name": "Region",
            "value": "Region",
            "description": "Not available to push data to the requested Azure region."
          },
          {
            "name": "Feature",
            "value": "Feature",
            "description": "Required features are not enabled."
          },
          {
            "name": "OfferType",
            "value": "OfferType",
            "description": "Subscription does not have required offer types."
          },
          {
            "name": "NoSubscriptionInfo",
            "value": "NoSubscriptionInfo",
            "description": "Subscription has not registered to Microsoft.DataBox and Service does not have the subscription notification."
          },
          {
            "name": "NotAvailable",
            "value": "NotAvailable",
            "description": "The product is not yet available."
          },
          {
            "name": "OutOfStock",
            "value": "OutOfStock",
            "description": "The product is out of stock."
          }
        ]
      }
    },
    "DisplayInfo": {
      "type": "object",
      "description": "Describes product display information",
      "properties": {
        "productFamilyDisplayName": {
          "type": "string",
          "description": "Product family display name",
          "readOnly": true
        },
        "configurationDisplayName": {
          "type": "string",
          "description": "Configuration display name",
          "readOnly": true
        }
      }
    },
    "DoubleEncryptionStatus": {
      "type": "string",
      "enum": [
        "Disabled",
        "Enabled"
      ],
      "x-ms-enum": {
        "name": "DoubleEncryptionStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "Double encryption is disabled"
          },
          {
            "name": "Enabled",
            "value": "Enabled",
            "description": "Double encryption is enabled"
          }
        ]
      }
    },
    "EdgeOrderProduct": {
      "type": "object",
      "description": "List of Products",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ProductProperties",
          "description": "Properties of product",
          "readOnly": true
        }
      }
    },
    "EncryptionPreferences": {
      "type": "object",
      "description": "Preferences related to the double encryption",
      "properties": {
        "doubleEncryptionStatus": {
          "$ref": "#/definitions/DoubleEncryptionStatus",
          "description": "Double encryption status as entered by the customer. It is compulsory to give this parameter if the 'Deny' or 'Disabled' policy is configured."
        }
      }
    },
    "FilterableProperty": {
      "type": "object",
      "description": "Different types of filters supported and its values.",
      "properties": {
        "type": {
          "$ref": "#/definitions/SupportedFilterTypes",
          "description": "Type of product filter."
        },
        "supportedValues": {
          "type": "array",
          "description": "Values to be filtered.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "type",
        "supportedValues"
      ]
    },
    "ForwardShippingDetails": {
      "type": "object",
      "description": "Forward shipment details.",
      "properties": {
        "carrierName": {
          "type": "string",
          "description": "Name of the carrier.",
          "readOnly": true
        },
        "carrierDisplayName": {
          "type": "string",
          "description": "Carrier Name for display purpose. Not to be used for any processing.",
          "readOnly": true
        },
        "trackingId": {
          "type": "string",
          "description": "TrackingId of the package",
          "readOnly": true
        },
        "trackingUrl": {
          "type": "string",
          "description": "TrackingUrl of the package.",
          "readOnly": true
        }
      }
    },
    "HierarchyInformation": {
      "type": "object",
      "description": "Holds details about product hierarchy information",
      "properties": {
        "productFamilyName": {
          "type": "string",
          "description": "Represents product family name that uniquely identifies product family"
        },
        "productLineName": {
          "type": "string",
          "description": "Represents product line name that uniquely identifies product line"
        },
        "productName": {
          "type": "string",
          "description": "Represents product name that uniquely identifies product"
        },
        "configurationName": {
          "type": "string",
          "description": "Represents configuration name that uniquely identifies configuration"
        }
      }
    },
    "ImageInformation": {
      "type": "object",
      "description": "Image for the product",
      "properties": {
        "imageType": {
          "$ref": "#/definitions/ImageType",
          "description": "Type of the image",
          "readOnly": true
        },
        "imageUrl": {
          "type": "string",
          "description": "Url of the image",
          "readOnly": true
        }
      }
    },
    "ImageType": {
      "type": "string",
      "enum": [
        "MainImage",
        "BulletImage",
        "GenericImage"
      ],
      "x-ms-enum": {
        "name": "ImageType",
        "modelAsString": true,
        "values": [
          {
            "name": "MainImage",
            "value": "MainImage",
            "description": "Main image."
          },
          {
            "name": "BulletImage",
            "value": "BulletImage",
            "description": "Bullet image."
          },
          {
            "name": "GenericImage",
            "value": "GenericImage",
            "description": "Generic image."
          }
        ]
      }
    },
    "LengthHeightUnit": {
      "type": "string",
      "enum": [
        "IN",
        "CM"
      ],
      "x-ms-enum": {
        "name": "LengthHeightUnit",
        "modelAsString": true,
        "values": [
          {
            "name": "IN",
            "value": "IN",
            "description": "Inch, applicable for West US."
          },
          {
            "name": "CM",
            "value": "CM",
            "description": "Centimeter."
          }
        ]
      }
    },
    "LinkType": {
      "type": "string",
      "enum": [
        "Generic",
        "TermsAndConditions",
        "Specification",
        "Documentation",
        "KnowMore",
        "SignUp"
      ],
      "x-ms-enum": {
        "name": "LinkType",
        "modelAsString": true,
        "values": [
          {
            "name": "Generic",
            "value": "Generic",
            "description": "Generic link."
          },
          {
            "name": "TermsAndConditions",
            "value": "TermsAndConditions",
            "description": "Terms and conditions link."
          },
          {
            "name": "Specification",
            "value": "Specification",
            "description": "Link to product specification."
          },
          {
            "name": "Documentation",
            "value": "Documentation",
            "description": "Link to product documentation"
          },
          {
            "name": "KnowMore",
            "value": "KnowMore",
            "description": "Link to know more"
          },
          {
            "name": "SignUp",
            "value": "SignUp",
            "description": "Link to sign up for products"
          }
        ]
      }
    },
    "ManagementResourcePreferences": {
      "type": "object",
      "description": "Management resource preference to link device",
      "properties": {
        "preferredManagementResourceId": {
          "type": "string",
          "description": "Customer preferred Management resource ARM ID"
        }
      }
    },
    "MeterDetails": {
      "type": "object",
      "description": "Holds details about billing type and its meter guids",
      "properties": {
        "billingType": {
          "type": "string",
          "description": "Discriminator property for MeterDetails."
        },
        "multiplier": {
          "type": "number",
          "format": "float",
          "description": "Billing unit applicable for Pav2 billing",
          "readOnly": true
        },
        "chargingType": {
          "$ref": "#/definitions/ChargingType",
          "description": "Charging type.",
          "readOnly": true
        }
      },
      "discriminator": "billingType",
      "required": [
        "billingType"
      ]
    },
    "MeteringType": {
      "type": "string",
      "enum": [
        "OneTime",
        "Recurring",
        "Adhoc"
      ],
      "x-ms-enum": {
        "name": "MeteringType",
        "modelAsString": true,
        "values": [
          {
            "name": "OneTime",
            "value": "OneTime",
            "description": "One time billing."
          },
          {
            "name": "Recurring",
            "value": "Recurring",
            "description": "Recurring billing."
          },
          {
            "name": "Adhoc",
            "value": "Adhoc",
            "description": "Adhoc billing."
          }
        ]
      }
    },
    "NotificationPreference": {
      "type": "object",
      "description": "Notification preference for a job stage.",
      "properties": {
        "stageName": {
          "$ref": "#/definitions/NotificationStageName",
          "description": "Name of the stage."
        },
        "sendNotification": {
          "type": "boolean",
          "description": "Notification is required or not."
        }
      },
      "required": [
        "stageName",
        "sendNotification"
      ]
    },
    "NotificationStageName": {
      "type": "string",
      "enum": [
        "Shipped",
        "Delivered"
      ],
      "x-ms-enum": {
        "name": "NotificationStageName",
        "modelAsString": true,
        "values": [
          {
            "name": "Shipped",
            "value": "Shipped",
            "description": "Notification at order item shipped from microsoft datacenter."
          },
          {
            "name": "Delivered",
            "value": "Delivered",
            "description": "Notification at order item delivered to customer."
          }
        ]
      }
    },
    "OrderItemCancellationEnum": {
      "type": "string",
      "enum": [
        "Cancellable",
        "CancellableWithFee",
        "NotCancellable"
      ],
      "x-ms-enum": {
        "name": "OrderItemCancellationEnum",
        "modelAsString": true,
        "values": [
          {
            "name": "Cancellable",
            "value": "Cancellable",
            "description": "Order item can be cancelled without fee."
          },
          {
            "name": "CancellableWithFee",
            "value": "CancellableWithFee",
            "description": "Order item can be cancelled with fee."
          },
          {
            "name": "NotCancellable",
            "value": "NotCancellable",
            "description": "Order item not cancellable."
          }
        ]
      }
    },
    "OrderItemDetails": {
      "type": "object",
      "description": "Order item details",
      "properties": {
        "productDetails": {
          "$ref": "#/definitions/ProductDetails",
          "description": "Unique identifier for configuration."
        },
        "orderItemType": {
          "$ref": "#/definitions/OrderItemType",
          "description": "Order item type."
        },
        "currentStage": {
          "$ref": "#/definitions/StageDetails",
          "description": "Current Order item Status",
          "readOnly": true
        },
        "orderItemStageHistory": {
          "type": "array",
          "description": "Order item status history",
          "items": {
            "$ref": "#/definitions/StageDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "preferences": {
          "$ref": "#/definitions/OrderItemPreferences",
          "description": "Customer notification Preferences"
        },
        "forwardShippingDetails": {
          "$ref": "#/definitions/ForwardShippingDetails",
          "description": "Forward Package Shipping details",
          "readOnly": true
        },
        "reverseShippingDetails": {
          "$ref": "#/definitions/ReverseShippingDetails",
          "description": "Reverse Package Shipping details",
          "readOnly": true
        },
        "notificationEmailList": {
          "type": "array",
          "description": "Additional notification email list",
          "items": {
            "type": "string"
          }
        },
        "cancellationReason": {
          "type": "string",
          "description": "Cancellation reason.",
          "readOnly": true
        },
        "cancellationStatus": {
          "$ref": "#/definitions/OrderItemCancellationEnum",
          "description": "Describes whether the order item is cancellable or not.",
          "readOnly": true
        },
        "deletionStatus": {
          "$ref": "#/definitions/ActionStatusEnum",
          "description": "Describes whether the order item is deletable or not.",
          "readOnly": true
        },
        "returnReason": {
          "type": "string",
          "description": "Return reason.",
          "readOnly": true
        },
        "returnStatus": {
          "$ref": "#/definitions/OrderItemReturnEnum",
          "description": "Describes whether the order item is returnable or not.",
          "readOnly": true
        },
        "managementRpDetails": {
          "$ref": "#/definitions/ResourceProviderDetails",
          "description": "Parent RP details - this returns only the first or default parent RP from the entire list",
          "readOnly": true
        },
        "managementRpDetailsList": {
          "type": "array",
          "description": "List of parent RP details supported for configuration.",
          "items": {
            "$ref": "#/definitions/ResourceProviderDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "error": {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorDetail",
          "description": "Top level error for the job.",
          "readOnly": true
        }
      },
      "required": [
        "productDetails",
        "orderItemType"
      ]
    },
    "OrderItemPreferences": {
      "type": "object",
      "description": "Preferences related to the order",
      "properties": {
        "notificationPreferences": {
          "type": "array",
          "description": "Notification preferences.",
          "items": {
            "$ref": "#/definitions/NotificationPreference"
          },
          "x-ms-identifiers": []
        },
        "transportPreferences": {
          "$ref": "#/definitions/TransportPreferences",
          "description": "Preferences related to the shipment logistics of the order."
        },
        "encryptionPreferences": {
          "$ref": "#/definitions/EncryptionPreferences",
          "description": "Preferences related to the Encryption."
        },
        "managementResourcePreferences": {
          "$ref": "#/definitions/ManagementResourcePreferences",
          "description": "Preferences related to the Management resource."
        }
      }
    },
    "OrderItemPreferencesUpdate": {
      "type": "object",
      "description": "Preferences related to the order",
      "properties": {
        "notificationPreferences": {
          "type": "array",
          "description": "Notification preferences.",
          "items": {
            "$ref": "#/definitions/NotificationPreference"
          },
          "x-ms-identifiers": []
        },
        "transportPreferences": {
          "$ref": "#/definitions/TransportPreferencesUpdate",
          "description": "Preferences related to the shipment logistics of the order."
        },
        "encryptionPreferences": {
          "$ref": "#/definitions/EncryptionPreferences",
          "description": "Preferences related to the Encryption."
        },
        "managementResourcePreferences": {
          "$ref": "#/definitions/ManagementResourcePreferences",
          "description": "Preferences related to the Management resource."
        }
      }
    },
    "OrderItemProperties": {
      "type": "object",
      "description": "Represents order item details.",
      "properties": {
        "orderItemDetails": {
          "$ref": "#/definitions/OrderItemDetails",
          "description": "Represents order item details."
        },
        "addressDetails": {
          "$ref": "#/definitions/AddressDetails",
          "description": "Represents shipping and return address for order item"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of order item",
          "readOnly": true
        },
        "orderId": {
          "type": "string",
          "description": "Id of the order to which order item belongs to"
        }
      },
      "required": [
        "orderItemDetails",
        "addressDetails",
        "orderId"
      ]
    },
    "OrderItemResource": {
      "type": "object",
      "description": "Represents order item contract",
      "properties": {
        "properties": {
          "$ref": "#/definitions/OrderItemProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the order item",
          "readOnly": true
        }
      },
      "required": [
        "name"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "OrderItemResourceListResult": {
      "type": "object",
      "description": "The response of a OrderItemResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The OrderItemResource items on this page",
          "items": {
            "$ref": "#/definitions/OrderItemResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "OrderItemReturnEnum": {
      "type": "string",
      "enum": [
        "Returnable",
        "ReturnableWithFee",
        "NotReturnable"
      ],
      "x-ms-enum": {
        "name": "OrderItemReturnEnum",
        "modelAsString": true,
        "values": [
          {
            "name": "Returnable",
            "value": "Returnable",
            "description": "Order item can be returned without fee."
          },
          {
            "name": "ReturnableWithFee",
            "value": "ReturnableWithFee",
            "description": "Order item can be returned with fee."
          },
          {
            "name": "NotReturnable",
            "value": "NotReturnable",
            "description": "Order item not returnable."
          }
        ]
      }
    },
    "OrderItemType": {
      "type": "string",
      "enum": [
        "Purchase",
        "Rental"
      ],
      "x-ms-enum": {
        "name": "OrderItemType",
        "modelAsString": true,
        "values": [
          {
            "name": "Purchase",
            "value": "Purchase",
            "description": "Purchase OrderItem."
          },
          {
            "name": "Rental",
            "value": "Rental",
            "description": "Rental OrderItem."
          }
        ]
      }
    },
    "OrderItemUpdateParameter": {
      "type": "object",
      "description": "Updates order item parameters.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/OrderItemUpdateProperties",
          "description": "Order item update properties"
        },
        "tags": {
          "type": "object",
          "description": "The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups).",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "OrderItemUpdateProperties": {
      "type": "object",
      "description": "Order item update properties.",
      "properties": {
        "forwardAddress": {
          "$ref": "#/definitions/AddressPropertiesUpdate",
          "description": "Updates forward shipping address and contact details."
        },
        "preferences": {
          "$ref": "#/definitions/OrderItemPreferencesUpdate",
          "description": "Customer preference."
        },
        "notificationEmailList": {
          "type": "array",
          "description": "Additional notification email list.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "OrderProperties": {
      "type": "object",
      "description": "Represents order details.",
      "properties": {
        "orderItemIds": {
          "type": "array",
          "description": "List of order item ARM Ids which are part of an order.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "currentStage": {
          "$ref": "#/definitions/StageDetails",
          "description": "Order current status.",
          "readOnly": true
        },
        "orderStageHistory": {
          "type": "array",
          "description": "Order status history.",
          "items": {
            "$ref": "#/definitions/StageDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "OrderResource": {
      "type": "object",
      "description": "Specifies the properties or parameters for an order. Order is a grouping of one or more order items.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/OrderProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the order",
          "readOnly": true
        }
      },
      "required": [
        "name"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "PagedOrderResource": {
      "type": "object",
      "description": "List of orders.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The OrderResource items on this page",
          "items": {
            "$ref": "#/definitions/OrderResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedProductConfiguration": {
      "type": "object",
      "description": "The list of configurations.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ProductConfiguration items on this page",
          "items": {
            "$ref": "#/definitions/ProductConfiguration"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedProductFamiliesMetadataDetails": {
      "type": "object",
      "description": "Holds details about product family metadata",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ProductFamiliesMetadataDetails items on this page",
          "items": {
            "$ref": "#/definitions/ProductFamiliesMetadataDetails"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedProductFamily": {
      "type": "object",
      "description": "The list of product families.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ProductFamily items on this page",
          "items": {
            "$ref": "#/definitions/ProductFamily"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "Pav2MeterDetails": {
      "type": "object",
      "description": "Billing type PAV2 meter details",
      "properties": {
        "meterGuid": {
          "type": "string",
          "description": "Validation status of requested data center and transport.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MeterDetails"
        }
      ],
      "x-ms-discriminator-value": "Pav2"
    },
    "ProductConfiguration": {
      "type": "object",
      "description": "Configuration object.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ConfigurationProperties",
          "description": "Properties of configuration",
          "readOnly": true
        }
      }
    },
    "ProductDescription": {
      "type": "object",
      "description": "Description related properties of a product system.",
      "properties": {
        "descriptionType": {
          "$ref": "#/definitions/DescriptionType",
          "description": "Type of description.",
          "readOnly": true
        },
        "shortDescription": {
          "type": "string",
          "description": "Short description of the product system.",
          "readOnly": true
        },
        "longDescription": {
          "type": "string",
          "description": "Long description of the product system.",
          "readOnly": true
        },
        "keywords": {
          "type": "array",
          "description": "Keywords for the product system.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "attributes": {
          "type": "array",
          "description": "Attributes for the product system.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "links": {
          "type": "array",
          "description": "Links for the product system.",
          "items": {
            "$ref": "#/definitions/ProductLink"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "ProductDetails": {
      "type": "object",
      "description": "Represents product details",
      "properties": {
        "displayInfo": {
          "$ref": "#/definitions/DisplayInfo",
          "description": "Display details of the product"
        },
        "hierarchyInformation": {
          "$ref": "#/definitions/HierarchyInformation",
          "description": "Hierarchy of the product which uniquely identifies the product"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Quantity of the product",
          "readOnly": true
        },
        "productDoubleEncryptionStatus": {
          "$ref": "#/definitions/DoubleEncryptionStatus",
          "description": "Double encryption status of the configuration. Read-only field.",
          "readOnly": true
        },
        "deviceDetails": {
          "type": "array",
          "description": "list of device details",
          "items": {
            "$ref": "#/definitions/DeviceDetails"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "required": [
        "hierarchyInformation"
      ]
    },
    "ProductDimensions": {
      "type": "object",
      "description": "Dimensions of a configuration.",
      "properties": {
        "length": {
          "type": "number",
          "format": "float",
          "description": "Length of the device.",
          "readOnly": true
        },
        "height": {
          "type": "number",
          "format": "float",
          "description": "Height of the device.",
          "readOnly": true
        },
        "width": {
          "type": "number",
          "format": "float",
          "description": "Width of the device.",
          "readOnly": true
        },
        "lengthHeightUnit": {
          "$ref": "#/definitions/LengthHeightUnit",
          "description": "Unit for the dimensions of length, height and width.",
          "readOnly": true
        },
        "weight": {
          "type": "number",
          "format": "float",
          "description": "Weight of the device.",
          "readOnly": true
        },
        "depth": {
          "type": "number",
          "format": "float",
          "description": "Depth of the device.",
          "readOnly": true
        },
        "weightUnit": {
          "$ref": "#/definitions/WeightMeasurementUnit",
          "description": "Unit for the dimensions of weight.",
          "readOnly": true
        }
      }
    },
    "ProductFamiliesMetadataDetails": {
      "type": "object",
      "description": "Product families metadata details.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ProductFamilyProperties",
          "description": "Product family properties",
          "readOnly": true
        }
      }
    },
    "ProductFamiliesRequest": {
      "type": "object",
      "description": "The filters for showing the product families.",
      "properties": {
        "filterableProperties": {
          "type": "object",
          "description": "Dictionary of filterable properties on product family.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FilterableProperty"
            },
            "type": "array",
            "x-ms-identifiers": []
          }
        },
        "customerSubscriptionDetails": {
          "$ref": "#/definitions/CustomerSubscriptionDetails",
          "description": "Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details"
        }
      },
      "required": [
        "filterableProperties"
      ]
    },
    "ProductFamily": {
      "type": "object",
      "description": "Product Family",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ProductFamilyProperties",
          "description": "Properties of product family",
          "readOnly": true
        }
      }
    },
    "ProductFamilyProperties": {
      "type": "object",
      "description": "Properties of product family",
      "properties": {
        "productLines": {
          "type": "array",
          "description": "List of product lines supported in the product family",
          "items": {
            "$ref": "#/definitions/ProductLine"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "resourceProviderDetails": {
          "type": "array",
          "description": "Contains details related to resource provider",
          "items": {
            "$ref": "#/definitions/ResourceProviderDetails"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CommonProperties"
        }
      ]
    },
    "ProductLine": {
      "type": "object",
      "description": "Product line",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ProductLineProperties",
          "description": "Properties of product line",
          "readOnly": true
        }
      }
    },
    "ProductLineProperties": {
      "type": "object",
      "description": "Properties of product line",
      "properties": {
        "products": {
          "type": "array",
          "description": "List of products in the product line",
          "items": {
            "$ref": "#/definitions/EdgeOrderProduct"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CommonProperties"
        }
      ]
    },
    "ProductLink": {
      "type": "object",
      "description": "Returns link related to the product",
      "properties": {
        "linkType": {
          "$ref": "#/definitions/LinkType",
          "description": "Type of link",
          "readOnly": true
        },
        "linkUrl": {
          "type": "string",
          "description": "Url of the link",
          "readOnly": true
        }
      }
    },
    "ProductProperties": {
      "type": "object",
      "description": "Properties of products",
      "properties": {
        "configurations": {
          "type": "array",
          "description": "List of configurations for the product",
          "items": {
            "$ref": "#/definitions/ProductConfiguration"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CommonProperties"
        }
      ]
    },
    "ProductSpecification": {
      "type": "object",
      "description": "Specifications of the configurations",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the specification",
          "readOnly": true
        },
        "value": {
          "type": "string",
          "description": "Value of the specification",
          "readOnly": true
        }
      }
    },
    "PurchaseMeterDetails": {
      "type": "object",
      "description": "Billing type Purchase meter details",
      "properties": {
        "productId": {
          "type": "string",
          "description": "Product Id",
          "readOnly": true
        },
        "skuId": {
          "type": "string",
          "description": "Sku Id",
          "readOnly": true
        },
        "termId": {
          "type": "string",
          "description": "Term Id",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MeterDetails"
        }
      ],
      "x-ms-discriminator-value": "Purchase"
    },
    "Resource": {
      "type": "object",
      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        }
      }
    },
    "ResourceIdentity": {
      "type": "object",
      "description": "Msi identity details of the resource",
      "properties": {
        "type": {
          "type": "string",
          "description": "Identity type"
        },
        "principalId": {
          "type": "string",
          "description": "Service Principal Id backing the Msi",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "description": "Home Tenant Id",
          "readOnly": true
        }
      }
    },
    "ResourceProviderDetails": {
      "type": "object",
      "description": "Management RP details",
      "properties": {
        "resourceProviderNamespace": {
          "type": "string",
          "description": "Resource provider namespace",
          "readOnly": true
        }
      }
    },
    "ReturnOrderItemDetails": {
      "type": "object",
      "description": "Return order item request body",
      "properties": {
        "returnAddress": {
          "$ref": "#/definitions/AddressProperties",
          "description": "customer return address."
        },
        "returnReason": {
          "type": "string",
          "description": "Return Reason."
        },
        "serviceTag": {
          "type": "string",
          "description": "Service tag (located on the bottom-right corner of the device)"
        },
        "shippingBoxRequired": {
          "type": "boolean",
          "description": "Shipping Box required"
        }
      },
      "required": [
        "returnReason"
      ]
    },
    "ReverseShippingDetails": {
      "type": "object",
      "description": "Reverse shipment details.",
      "properties": {
        "sasKeyForLabel": {
          "type": "string",
          "description": "SAS key to download the reverse shipment label of the package.",
          "readOnly": true
        },
        "carrierName": {
          "type": "string",
          "description": "Name of the carrier.",
          "readOnly": true
        },
        "carrierDisplayName": {
          "type": "string",
          "description": "Carrier Name for display purpose. Not to be used for any processing.",
          "readOnly": true
        },
        "trackingId": {
          "type": "string",
          "description": "TrackingId of the package",
          "readOnly": true
        },
        "trackingUrl": {
          "type": "string",
          "description": "TrackingUrl of the package.",
          "readOnly": true
        }
      }
    },
    "ShippingAddress": {
      "type": "object",
      "description": "Shipping address where customer wishes to receive the device.",
      "properties": {
        "streetAddress1": {
          "type": "string",
          "description": "Street Address line 1."
        },
        "streetAddress2": {
          "type": "string",
          "description": "Street Address line 2."
        },
        "streetAddress3": {
          "type": "string",
          "description": "Street Address line 3."
        },
        "city": {
          "type": "string",
          "description": "Name of the City."
        },
        "stateOrProvince": {
          "type": "string",
          "description": "Name of the State or Province."
        },
        "country": {
          "type": "string",
          "description": "Name of the Country."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "zipExtendedCode": {
          "type": "string",
          "description": "Extended Zip Code."
        },
        "companyName": {
          "type": "string",
          "description": "Name of the company."
        },
        "addressType": {
          "$ref": "#/definitions/AddressType",
          "description": "Type of address."
        }
      },
      "required": [
        "streetAddress1",
        "country"
      ]
    },
    "ShippingAddressUpdate": {
      "type": "object",
      "description": "Shipping address where customer wishes to receive the device.",
      "properties": {
        "streetAddress1": {
          "type": "string",
          "description": "Street Address line 1."
        },
        "streetAddress2": {
          "type": "string",
          "description": "Street Address line 2."
        },
        "streetAddress3": {
          "type": "string",
          "description": "Street Address line 3."
        },
        "city": {
          "type": "string",
          "description": "Name of the City."
        },
        "stateOrProvince": {
          "type": "string",
          "description": "Name of the State or Province."
        },
        "country": {
          "type": "string",
          "description": "Name of the Country."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "zipExtendedCode": {
          "type": "string",
          "description": "Extended Zip Code."
        },
        "companyName": {
          "type": "string",
          "description": "Name of the company."
        },
        "addressType": {
          "$ref": "#/definitions/AddressType",
          "description": "Type of address."
        }
      }
    },
    "ShippingDetails": {
      "type": "object",
      "description": "Package shipping details",
      "properties": {
        "carrierName": {
          "type": "string",
          "description": "Name of the carrier.",
          "readOnly": true
        },
        "carrierDisplayName": {
          "type": "string",
          "description": "Carrier Name for display purpose. Not to be used for any processing.",
          "readOnly": true
        },
        "trackingId": {
          "type": "string",
          "description": "TrackingId of the package",
          "readOnly": true
        },
        "trackingUrl": {
          "type": "string",
          "description": "TrackingUrl of the package.",
          "readOnly": true
        }
      }
    },
    "StageDetails": {
      "type": "object",
      "description": "Resource stage details.",
      "properties": {
        "stageStatus": {
          "$ref": "#/definitions/StageStatus",
          "description": "Stage status.",
          "readOnly": true
        },
        "stageName": {
          "$ref": "#/definitions/StageName",
          "description": "Stage name",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the resource stage.",
          "readOnly": true
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Stage start time",
          "readOnly": true
        }
      }
    },
    "StageName": {
      "type": "string",
      "enum": [
        "Placed",
        "InReview",
        "Confirmed",
        "ReadyToShip",
        "Shipped",
        "Delivered",
        "InUse",
        "ReturnInitiated",
        "ReturnPickedUp",
        "ReturnedToMicrosoft",
        "ReturnCompleted",
        "Cancelled"
      ],
      "x-ms-enum": {
        "name": "StageName",
        "modelAsString": true,
        "values": [
          {
            "name": "Placed",
            "value": "Placed",
            "description": "Currently in draft mode and can still be cancelled"
          },
          {
            "name": "InReview",
            "value": "InReview",
            "description": "Order is currently in draft mode and can still be cancelled"
          },
          {
            "name": "Confirmed",
            "value": "Confirmed",
            "description": "Order is confirmed"
          },
          {
            "name": "ReadyToShip",
            "value": "ReadyToShip",
            "description": "Order is ready to ship"
          },
          {
            "name": "Shipped",
            "value": "Shipped",
            "description": "Order is in transit to customer"
          },
          {
            "name": "Delivered",
            "value": "Delivered",
            "description": "Order is delivered to customer"
          },
          {
            "name": "InUse",
            "value": "InUse",
            "description": "Order is in use at customer site"
          },
          {
            "name": "ReturnInitiated",
            "value": "ReturnInitiated",
            "description": "Return has been initiated by customer."
          },
          {
            "name": "ReturnPickedUp",
            "value": "ReturnPickedUp",
            "description": "Order is in transit from customer to microsoft."
          },
          {
            "name": "ReturnedToMicrosoft",
            "value": "ReturnedToMicrosoft",
            "description": "Order has been received back to microsoft."
          },
          {
            "name": "ReturnCompleted",
            "value": "ReturnCompleted",
            "description": "Return has now completed."
          },
          {
            "name": "Cancelled",
            "value": "Cancelled",
            "description": "Order has been cancelled."
          }
        ]
      }
    },
    "StageStatus": {
      "type": "string",
      "enum": [
        "None",
        "InProgress",
        "Succeeded",
        "Failed",
        "Cancelled",
        "Cancelling"
      ],
      "x-ms-enum": {
        "name": "StageStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "None",
            "description": "No status available yet."
          },
          {
            "name": "InProgress",
            "value": "InProgress",
            "description": "Stage is in progress."
          },
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Stage has succeeded."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Stage has failed."
          },
          {
            "name": "Cancelled",
            "value": "Cancelled",
            "description": "Stage has been cancelled."
          },
          {
            "name": "Cancelling",
            "value": "Cancelling",
            "description": "Stage is cancelling."
          }
        ]
      }
    },
    "SupportedFilterTypes": {
      "type": "string",
      "enum": [
        "ShipToCountries",
        "DoubleEncryptionStatus"
      ],
      "x-ms-enum": {
        "name": "SupportedFilterTypes",
        "modelAsString": true,
        "values": [
          {
            "name": "ShipToCountries",
            "value": "ShipToCountries",
            "description": "Ship to country"
          },
          {
            "name": "DoubleEncryptionStatus",
            "value": "DoubleEncryptionStatus",
            "description": "Double encryption status"
          }
        ]
      }
    },
    "TransportPreferences": {
      "type": "object",
      "description": "Preferences related to the shipment logistics of the sku",
      "properties": {
        "preferredShipmentType": {
          "$ref": "#/definitions/TransportShipmentTypes",
          "description": "Indicates Shipment Logistics type that the customer preferred."
        }
      },
      "required": [
        "preferredShipmentType"
      ]
    },
    "TransportPreferencesUpdate": {
      "type": "object",
      "description": "Preferences related to the shipment logistics of the sku",
      "properties": {
        "preferredShipmentType": {
          "$ref": "#/definitions/TransportShipmentTypes",
          "description": "Indicates Shipment Logistics type that the customer preferred."
        }
      }
    },
    "TransportShipmentTypes": {
      "type": "string",
      "enum": [
        "CustomerManaged",
        "MicrosoftManaged"
      ],
      "x-ms-enum": {
        "name": "TransportShipmentTypes",
        "modelAsString": true,
        "values": [
          {
            "name": "CustomerManaged",
            "value": "CustomerManaged",
            "description": "Shipment Logistics is handled by the customer."
          },
          {
            "name": "MicrosoftManaged",
            "value": "MicrosoftManaged",
            "description": "Shipment Logistics is handled by Microsoft."
          }
        ]
      }
    },
    "Versions": {
      "type": "string",
      "description": "The available API versions.",
      "enum": [
        "2021-12-01"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true,
        "values": [
          {
            "name": "v2021_12_01",
            "value": "2021-12-01"
          }
        ]
      }
    },
    "WeightMeasurementUnit": {
      "type": "string",
      "enum": [
        "LBS",
        "KGS"
      ],
      "x-ms-enum": {
        "name": "WeightMeasurementUnit",
        "modelAsString": true,
        "values": [
          {
            "name": "LBS",
            "value": "LBS",
            "description": "Pounds."
          },
          {
            "name": "KGS",
            "value": "KGS",
            "description": "Kilograms."
          }
        ]
      }
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    }
  }
}
