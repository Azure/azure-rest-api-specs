// <auto-generated>
// MICROSOFT-MIT_NO_VERSION
// </auto-generated>

namespace regionmovecollection
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MoveCollections.
    /// </summary>
    public static partial class MoveCollectionsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MoveCollection Create(this IMoveCollections operations, string resourceGroupName, string moveCollectionName, MoveCollection body = default(MoveCollection))
            {
                return operations.CreateAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MoveCollection> CreateAsync(this IMoveCollections operations, string resourceGroupName, string moveCollectionName, MoveCollection body = default(MoveCollection), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            public static void Delete(this IMoveCollections operations, string resourceGroupName, string moveCollectionName)
            {
                operations.DeleteAsync(resourceGroupName, moveCollectionName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IMoveCollections operations, string resourceGroupName, string moveCollectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, moveCollectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            public static MoveCollection Get(this IMoveCollections operations, string resourceGroupName, string moveCollectionName)
            {
                return operations.GetAsync(resourceGroupName, moveCollectionName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MoveCollection> GetAsync(this IMoveCollections operations, string resourceGroupName, string moveCollectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, moveCollectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void Prepare(this IMoveCollections operations, string resourceGroupName, string moveCollectionName, PrepareRequest body = default(PrepareRequest))
            {
                operations.PrepareAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PrepareAsync(this IMoveCollections operations, string resourceGroupName, string moveCollectionName, PrepareRequest body = default(PrepareRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PrepareWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ResourceMove(this IMoveCollections operations, string resourceGroupName, string moveCollectionName, ResourceMoveRequest body = default(ResourceMoveRequest))
            {
                operations.ResourceMoveAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResourceMoveAsync(this IMoveCollections operations, string resourceGroupName, string moveCollectionName, ResourceMoveRequest body = default(ResourceMoveRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResourceMoveWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ValidateDependencies(this IMoveCollections operations, string resourceGroupName, string moveCollectionName, ValidateDependenciesRequest body = default(ValidateDependenciesRequest))
            {
                operations.ValidateDependenciesAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='moveCollectionName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ValidateDependenciesAsync(this IMoveCollections operations, string resourceGroupName, string moveCollectionName, ValidateDependenciesRequest body = default(ValidateDependenciesRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ValidateDependenciesWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all MoveCollections.
            /// </summary>
            /// <remarks>
            /// Get all the MoveCollections in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MoveCollectionResultList ListMoveCollectionsBySubscription(this IMoveCollections operations)
            {
                return operations.ListMoveCollectionsBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all MoveCollections.
            /// </summary>
            /// <remarks>
            /// Get all the MoveCollections in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MoveCollectionResultList> ListMoveCollectionsBySubscriptionAsync(this IMoveCollections operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMoveCollectionsBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all projects.
            /// </summary>
            /// <remarks>
            /// Get all the projects in the resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            public static MoveCollectionResultList ListMoveCollectionsByResourceGroup(this IMoveCollections operations, string resourceGroupName)
            {
                return operations.ListMoveCollectionsByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all projects.
            /// </summary>
            /// <remarks>
            /// Get all the projects in the resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MoveCollectionResultList> ListMoveCollectionsByResourceGroupAsync(this IMoveCollections operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMoveCollectionsByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
