// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armavs

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// WorkloadNetworkDhcpConfigurationsClient contains the methods for the Microsoft.AVS namespace.
// Don't use this type directly, use NewWorkloadNetworkDhcpConfigurationsClient() instead.
type WorkloadNetworkDhcpConfigurationsClient struct {
	internal *arm.Client
}

// NewWorkloadNetworkDhcpConfigurationsClient creates a new instance of WorkloadNetworkDhcpConfigurationsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewWorkloadNetworkDhcpConfigurationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*WorkloadNetworkDhcpConfigurationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &WorkloadNetworkDhcpConfigurationsClient{
		internal: cl,
	}
	return client, nil
}

// Create - Create a WorkloadNetworkDhcp
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - privateCloudName - Name of the private cloud
//   - dhcpID - The ID of the DHCP configuration
//   - workloadNetworkDhcp - Resource create parameters.
//   - options - WorkloadNetworkDhcpConfigurationsClientCreateOptions contains the optional parameters for the WorkloadNetworkDhcpConfigurationsClient.Create
//     method.
func (client *WorkloadNetworkDhcpConfigurationsClient) Create(ctx context.Context, subscriptionID string, resourceGroupName string, privateCloudName string, dhcpID string, workloadNetworkDhcp WorkloadNetworkDhcp, options *WorkloadNetworkDhcpConfigurationsClientCreateOptions) (WorkloadNetworkDhcpConfigurationsClientCreateResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WorkloadNetworkDhcpConfigurationsClient.Create")
	req, err := client.createCreateRequest(ctx, subscriptionID, resourceGroupName, privateCloudName, dhcpID, workloadNetworkDhcp, options)
	if err != nil {
		return WorkloadNetworkDhcpConfigurationsClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkloadNetworkDhcpConfigurationsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return WorkloadNetworkDhcpConfigurationsClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *WorkloadNetworkDhcpConfigurationsClient) createCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, privateCloudName string, dhcpID string, workloadNetworkDhcp WorkloadNetworkDhcp, options *WorkloadNetworkDhcpConfigurationsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateCloudName == "" {
		return nil, errors.New("parameter privateCloudName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateCloudName}", url.PathEscape(privateCloudName))
	if dhcpID == "" {
		return nil, errors.New("parameter dhcpID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dhcpId}", url.PathEscape(dhcpID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, workloadNetworkDhcp); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *WorkloadNetworkDhcpConfigurationsClient) createHandleResponse(resp *http.Response) (WorkloadNetworkDhcpConfigurationsClientCreateResponse, error) {
	result := WorkloadNetworkDhcpConfigurationsClientCreateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return WorkloadNetworkDhcpConfigurationsClientCreateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadNetworkDhcp); err != nil {
		return WorkloadNetworkDhcpConfigurationsClientCreateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Delete a WorkloadNetworkDhcp
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - privateCloudName - Name of the private cloud
//   - dhcpID - The ID of the DHCP configuration
//   - options - WorkloadNetworkDhcpConfigurationsClientDeleteOptions contains the optional parameters for the WorkloadNetworkDhcpConfigurationsClient.Delete
//     method.
func (client *WorkloadNetworkDhcpConfigurationsClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, privateCloudName string, dhcpID string, options *WorkloadNetworkDhcpConfigurationsClientDeleteOptions) (*runtime.Poller[WorkloadNetworkDhcpConfigurationsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, privateCloudName, dhcpID, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[WorkloadNetworkDhcpConfigurationsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[WorkloadNetworkDhcpConfigurationsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a WorkloadNetworkDhcp
func (client *WorkloadNetworkDhcpConfigurationsClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, privateCloudName string, dhcpID string, options *WorkloadNetworkDhcpConfigurationsClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WorkloadNetworkDhcpConfigurationsClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, privateCloudName, dhcpID, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *WorkloadNetworkDhcpConfigurationsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, privateCloudName string, dhcpID string, options *WorkloadNetworkDhcpConfigurationsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateCloudName == "" {
		return nil, errors.New("parameter privateCloudName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateCloudName}", url.PathEscape(privateCloudName))
	if dhcpID == "" {
		return nil, errors.New("parameter dhcpID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dhcpId}", url.PathEscape(dhcpID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a WorkloadNetworkDhcp
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - dhcpID - The ID of the DHCP configuration
//   - privateCloudName - Name of the private cloud
//   - options - WorkloadNetworkDhcpConfigurationsClientGetOptions contains the optional parameters for the WorkloadNetworkDhcpConfigurationsClient.Get
//     method.
func (client *WorkloadNetworkDhcpConfigurationsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, dhcpID string, privateCloudName string, options *WorkloadNetworkDhcpConfigurationsClientGetOptions) (WorkloadNetworkDhcpConfigurationsClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WorkloadNetworkDhcpConfigurationsClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, dhcpID, privateCloudName, options)
	if err != nil {
		return WorkloadNetworkDhcpConfigurationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkloadNetworkDhcpConfigurationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return WorkloadNetworkDhcpConfigurationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *WorkloadNetworkDhcpConfigurationsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, dhcpID string, privateCloudName string, options *WorkloadNetworkDhcpConfigurationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dhcpID == "" {
		return nil, errors.New("parameter dhcpID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dhcpId}", url.PathEscape(dhcpID))
	if privateCloudName == "" {
		return nil, errors.New("parameter privateCloudName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateCloudName}", url.PathEscape(privateCloudName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *WorkloadNetworkDhcpConfigurationsClient) getHandleResponse(resp *http.Response) (WorkloadNetworkDhcpConfigurationsClientGetResponse, error) {
	result := WorkloadNetworkDhcpConfigurationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadNetworkDhcp); err != nil {
		return WorkloadNetworkDhcpConfigurationsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByWorkloadNetworkPager - List WorkloadNetworkDhcp resources by WorkloadNetwork
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - privateCloudName - Name of the private cloud
//   - options - WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkOptions contains the optional parameters for the
//     WorkloadNetworkDhcpConfigurationsClient.NewListByWorkloadNetworkPager method.
func (client *WorkloadNetworkDhcpConfigurationsClient) NewListByWorkloadNetworkPager(subscriptionID string, resourceGroupName string, privateCloudName string, options *WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkOptions) *runtime.Pager[WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkResponse] {
	return runtime.NewPager(runtime.PagingHandler[WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkResponse]{
		More: func(page WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkResponse) (WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WorkloadNetworkDhcpConfigurationsClient.NewListByWorkloadNetworkPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByWorkloadNetworkCreateRequest(ctx, subscriptionID, resourceGroupName, privateCloudName, options)
			}, nil)
			if err != nil {
				return WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkResponse{}, err
			}
			return client.listByWorkloadNetworkHandleResponse(resp)
		},
	})
}

// listByWorkloadNetworkCreateRequest creates the ListByWorkloadNetwork request.
func (client *WorkloadNetworkDhcpConfigurationsClient) listByWorkloadNetworkCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, privateCloudName string, options *WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateCloudName == "" {
		return nil, errors.New("parameter privateCloudName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateCloudName}", url.PathEscape(privateCloudName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByWorkloadNetworkHandleResponse handles the ListByWorkloadNetwork response.
func (client *WorkloadNetworkDhcpConfigurationsClient) listByWorkloadNetworkHandleResponse(resp *http.Response) (WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkResponse, error) {
	result := WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadNetworkDhcpListResult); err != nil {
		return WorkloadNetworkDhcpConfigurationsClientListByWorkloadNetworkResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a WorkloadNetworkDhcp
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - privateCloudName - Name of the private cloud
//   - dhcpID - The ID of the DHCP configuration
//   - workloadNetworkDhcp - The resource properties to be updated.
//   - options - WorkloadNetworkDhcpConfigurationsClientUpdateOptions contains the optional parameters for the WorkloadNetworkDhcpConfigurationsClient.Update
//     method.
func (client *WorkloadNetworkDhcpConfigurationsClient) BeginUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, privateCloudName string, dhcpID string, workloadNetworkDhcp WorkloadNetworkDhcpUpdate, options *WorkloadNetworkDhcpConfigurationsClientUpdateOptions) (*runtime.Poller[WorkloadNetworkDhcpConfigurationsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, subscriptionID, resourceGroupName, privateCloudName, dhcpID, workloadNetworkDhcp, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[WorkloadNetworkDhcpConfigurationsClientUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[WorkloadNetworkDhcpConfigurationsClientUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Update - Update a WorkloadNetworkDhcp
func (client *WorkloadNetworkDhcpConfigurationsClient) update(ctx context.Context, subscriptionID string, resourceGroupName string, privateCloudName string, dhcpID string, workloadNetworkDhcp WorkloadNetworkDhcpUpdate, options *WorkloadNetworkDhcpConfigurationsClientUpdateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WorkloadNetworkDhcpConfigurationsClient.BeginUpdate")
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, privateCloudName, dhcpID, workloadNetworkDhcp, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *WorkloadNetworkDhcpConfigurationsClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, privateCloudName string, dhcpID string, workloadNetworkDhcp WorkloadNetworkDhcpUpdate, options *WorkloadNetworkDhcpConfigurationsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateCloudName == "" {
		return nil, errors.New("parameter privateCloudName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateCloudName}", url.PathEscape(privateCloudName))
	if dhcpID == "" {
		return nil, errors.New("parameter dhcpID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dhcpId}", url.PathEscape(dhcpID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, workloadNetworkDhcp); err != nil {
		return nil, err
	}
	return req, nil
}
