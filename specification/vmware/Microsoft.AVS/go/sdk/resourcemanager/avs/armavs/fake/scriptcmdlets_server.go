// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/avs/armavs"
	"net/http"
	"net/url"
	"regexp"
)

// ScriptCmdletsServer is a fake server for instances of the armavs.ScriptCmdletsClient type.
type ScriptCmdletsServer struct {
	// Get is the fake for method ScriptCmdletsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, subscriptionID string, resourceGroupName string, privateCloudName string, scriptPackageName string, scriptCmdletName string, options *armavs.ScriptCmdletsClientGetOptions) (resp azfake.Responder[armavs.ScriptCmdletsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByScriptPackagePager is the fake for method ScriptCmdletsClient.NewListByScriptPackagePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByScriptPackagePager func(subscriptionID string, resourceGroupName string, privateCloudName string, scriptPackageName string, options *armavs.ScriptCmdletsClientListByScriptPackageOptions) (resp azfake.PagerResponder[armavs.ScriptCmdletsClientListByScriptPackageResponse])
}

// NewScriptCmdletsServerTransport creates a new instance of ScriptCmdletsServerTransport with the provided implementation.
// The returned ScriptCmdletsServerTransport instance is connected to an instance of armavs.ScriptCmdletsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewScriptCmdletsServerTransport(srv *ScriptCmdletsServer) *ScriptCmdletsServerTransport {
	return &ScriptCmdletsServerTransport{
		srv:                         srv,
		newListByScriptPackagePager: newTracker[azfake.PagerResponder[armavs.ScriptCmdletsClientListByScriptPackageResponse]](),
	}
}

// ScriptCmdletsServerTransport connects instances of armavs.ScriptCmdletsClient to instances of ScriptCmdletsServer.
// Don't use this type directly, use NewScriptCmdletsServerTransport instead.
type ScriptCmdletsServerTransport struct {
	srv                         *ScriptCmdletsServer
	newListByScriptPackagePager *tracker[azfake.PagerResponder[armavs.ScriptCmdletsClientListByScriptPackageResponse]]
}

// Do implements the policy.Transporter interface for ScriptCmdletsServerTransport.
func (s *ScriptCmdletsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *ScriptCmdletsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "ScriptCmdletsClient.Get":
		resp, err = s.dispatchGet(req)
	case "ScriptCmdletsClient.NewListByScriptPackagePager":
		resp, err = s.dispatchNewListByScriptPackagePager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (s *ScriptCmdletsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AVS/privateClouds/(?P<privateCloudName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/scriptPackages/(?P<scriptPackageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/scriptCmdlets/(?P<scriptCmdletName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	privateCloudNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateCloudName")])
	if err != nil {
		return nil, err
	}
	scriptPackageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("scriptPackageName")])
	if err != nil {
		return nil, err
	}
	scriptCmdletNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("scriptCmdletName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), subscriptionIDParam, resourceGroupNameParam, privateCloudNameParam, scriptPackageNameParam, scriptCmdletNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ScriptCmdlet, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ScriptCmdletsServerTransport) dispatchNewListByScriptPackagePager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListByScriptPackagePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByScriptPackagePager not implemented")}
	}
	newListByScriptPackagePager := s.newListByScriptPackagePager.get(req)
	if newListByScriptPackagePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AVS/privateClouds/(?P<privateCloudName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/scriptPackages/(?P<scriptPackageName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/scriptCmdlets`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		privateCloudNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateCloudName")])
		if err != nil {
			return nil, err
		}
		scriptPackageNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("scriptPackageName")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListByScriptPackagePager(subscriptionIDParam, resourceGroupNameParam, privateCloudNameParam, scriptPackageNameParam, nil)
		newListByScriptPackagePager = &resp
		s.newListByScriptPackagePager.add(req, newListByScriptPackagePager)
		server.PagerResponderInjectNextLinks(newListByScriptPackagePager, req, func(page *armavs.ScriptCmdletsClientListByScriptPackageResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByScriptPackagePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListByScriptPackagePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByScriptPackagePager) {
		s.newListByScriptPackagePager.remove(req)
	}
	return resp, nil
}
