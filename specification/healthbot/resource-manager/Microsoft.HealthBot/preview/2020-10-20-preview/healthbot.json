{
  "swagger": "2.0",
  "info": {
    "version": "2020-10-20-preview",
    "title": "healthbot",
    "description": "Microsoft Healthcare Bot is a cloud platform that empowers developers in Healthcare organizations to build and deploy their compliant, AI-powered virtual health assistants and health bots, that help them improve processes and reduce costs.",
    "x-ms-code-generation-settings": {
      "name": "healthbotClient"
    }
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/providers/Microsoft.HealthBot/checkNameAvailability": {
      "post": {
        "description": "Check whether a bot name is available.",
        "operationId": "Bots_GetCheckNameAvailability",
        "x-ms-examples": {
          "check Name Availability": {
            "$ref": "./examples/CheckNameAvailability.json"
          }
        },
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckNameAvailabilityRequestBody"
            },
            "description": "The request body parameters to provide for the check name availability request"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.",
            "schema": {
              "$ref": "#/definitions/CheckNameAvailabilityResponseBody"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthBot/healthBots/{resourceName}": {
      "put": {
        "operationId": "create_bot",
        "x-ms-examples": {
          "BatchAccountDelete": {
            "$ref": "./examples/ResourceCreationPut.json"
          }
        },
        "description": "Create a new Healthcare Bot.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/resourceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bot"
            },
            "description": "The parameters to provide for the created bot."
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "If resource is created successfully, the service should return 200.",
            "schema": {
              "$ref": "#/definitions/Bot"
            }
          },
          "201": {
            "description": "If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously.",
            "schema": {
              "$ref": "#/definitions/Bot"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "get": {
        "operationId": "get_bot",
        "x-ms-examples": {
          "BatchAccountDelete": {
            "$ref": "./examples/ResourceInfoGet.json"
          }
        },
        "description": "Get a Healthcare Bot.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/resourceNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "If resource is got successfully, the service should return 200.",
            "schema": {
              "$ref": "#/definitions/Bot"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patch_bot",
        "x-ms-examples": {
          "BatchAccountDelete": {
            "$ref": "./examples/ResourceUpdatePatch.json"
          }
        },
        "description": "Patch a Healthcare Bot.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/resourceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bot"
            },
            "description": "The parameters to provide for the required bot."
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "If resource is patched successfully, the service should return 200.",
            "schema": {
              "$ref": "#/definitions/Bot"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_bot",
        "x-ms-examples": {
          "BatchAccountDelete": {
            "$ref": "./examples/ResourceDeletionDelete.json"
          }
        },
        "description": "Delete a Healthcare Bot.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/resourceNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "If resource is deleted successfully, the service should return 200.",
            "schema": {
              "$ref": "#/definitions/ValidationResult"
            }
          },
          "204": {
            "description": "No content."
          },
          "default": {
            "description": "Error response describing why the operation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthBot/healthBots": {
      "get": {
        "description": "Returns all the resources of a particular type belonging to a resource group",
        "operationId": "Bots_ListByResourceGroup",
        "x-ms-examples": {
          "List Bots by Resource Group": {
            "$ref": "./examples/ListBotsByResourceGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.\nThe nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.\nThe nextLink should be implemented using following query parameters:\n· skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.\n· top: the optional client query parameter which defines the maximum number of records to be returned by the server.\nImplementation details:\n· NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. \n· Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. \nClients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.",
            "schema": {
              "$ref": "#/definitions/BotResponseList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.HealthBot/healthBots": {
      "get": {
        "description": "Returns all the resources of a particular type belonging to a subscription.",
        "operationId": "Bots_List",
        "x-ms-examples": {
          "List Bots by Subscription": {
            "$ref": "./examples/ListBotsBySubscription.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.\nThe nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.\nFor a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. ",
            "schema": {
              "$ref": "#/definitions/BotResponseList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.HealthBot/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "description": "Lists all the available HealthBot operations.",
        "operationId": "Operations_List",
        "x-ms-examples": {
          "Get Operations": {
            "$ref": "./examples/GetOperations.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/AvailableOperations"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "CheckNameAvailabilityRequestBody": {
      "description": "The request body for a request to to check availability of a bot name.",
      "type": "object",
      "properties": {
        "name": {
          "description": "the name of the bot for which availability needs to be checked.",
          "type": "string"
        },
        "type": {
          "description": "the type of the bot for which availability needs to be checked",
          "type": "string"
        }
      }
    },
    "CheckNameAvailabilityResponseBody": {
      "description": "The response body returned for a request to check availability of a bot name.",
      "type": "object",
      "properties": {
        "nameAvailable": {
          "description": "indicates if the bot name is valid and available.",
          "type": "boolean"
        },
        "reason": {
          "description": "Reason for the result",
          "type": "string"
        },
        "message": {
          "description": "additional message from server",
          "type": "string"
        }
      }
    },
    "Resource": {
      "description": "Azure resource",
      "x-ms-azure-resource": true,
      "properties": {
        "id": {
          "description": "Specifies the resource ID.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Specifies the name of the resource.",
          "type": "string",
          "readOnly": true
        },
        "location": {
          "description": "Specifies the location of the resource.",
          "type": "string"
        },
        "type": {
          "description": "Specifies the type of the resource.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Bot": {
      "type": "object",
      "description": "Bot resource definition",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/BotProperties",
          "description": "The set of properties specific to healthcare bot resource."
        }
      }
    },
    "BotProperties": {
      "title": "BotProperties",
      "description": "The properties provided for bot creation",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The display name of the bot."
        },
        "planId": {
          "type": "string",
          "description": "The plan ID of the bot."
        },
        "offerId": {
          "type": "string",
          "description": "The offer ID of the bot."
        },
        "provisioningState": {
          "type": "string",
          "description": "Gets the provisioning state of the Healthcare bot resource."
        }
      }
    },
    "ValidationResult": {
      "title": "ValidationResult",
      "description": "The response returned from validation process",
      "properties": {
        "status": {
          "type": "string",
          "description": "The status code of the response validation."
        }
      }
    },
    "Error": {
      "title": "Error",
      "description": "Bot error object.",
      "properties": {
        "status": {
          "type": "string",
          "description": "The status code of the response validation."
        },
        "error": {
          "$ref": "#/definitions/ErrorBody",
          "description": "The error body."
        }
      }
    },
    "ErrorBody": {
      "title": "ErrorBody",
      "description": "Error structure.",
      "properties": {
        "code": {
          "type": "string",
          "description": "error code."
        },
        "message": {
          "type": "string",
          "description": "error message."
        }
      }
    },
    "AvailableOperations": {
      "description": "Available operations of the service",
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of available operation details",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationDetail"
          }
        },
        "nextLink": {
          "description": "URL client should use to fetch the next page (per server side paging).\r\nIt's null for now, added for future use.",
          "type": "string"
        }
      }
    },
    "OperationDetail": {
      "description": "Operation detail payload",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the operation",
          "type": "string"
        },
        "isDataAction": {
          "description": "Indicates whether the operation is a data action",
          "type": "boolean"
        },
        "display": {
          "$ref": "#/definitions/OperationDisplay",
          "description": "Display of the operation"
        },
        "origin": {
          "description": "Origin of the operation",
          "type": "string"
        },
        "properties": {
          "description": "Additional properties.",
          "type": "object"
        }
      }
    },
    "OperationDisplay": {
      "description": "Operation display payload",
      "type": "object",
      "properties": {
        "provider": {
          "description": "Resource provider of the operation",
          "type": "string"
        },
        "resource": {
          "description": "Resource of the operation",
          "type": "string"
        },
        "operation": {
          "description": "Localized friendly name for the operation",
          "type": "string"
        },
        "description": {
          "description": "Localized friendly description for the operation",
          "type": "string"
        }
      }
    },
    "BotResponseList": {
      "properties": {
        "nextLink": {
          "description": "The link used to get the next page of bot service resources.",
          "type": "string"
        },
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bot"
          },
          "description": "Gets the list of healthcare bot results and their properties."
        }
      },
      "description": "The list of healthcare bot operation response."
    }
  },
  "parameters": {
    "resourceGroupNameParameter": {
      "name": "resourceGroupName",
      "x-ms-parameter-location": "method",
      "in": "path",
      "required": true,
      "type": "string",
      "maxLength": 64,
      "minLength": 2,
      "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
      "description": "The name of the Bot resource group in the user subscription."
    },
    "resourceNameParameter": {
      "name": "resourceName",
      "x-ms-parameter-location": "method",
      "in": "path",
      "required": true,
      "type": "string",
      "maxLength": 64,
      "minLength": 2,
      "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
      "description": "The name of the Bot resource."
    },
    "subscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "Azure Subscription ID.",
      "required": true,
      "type": "string"
    },
    "apiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Version of the API to be used with the client request."
    }
  }
}
