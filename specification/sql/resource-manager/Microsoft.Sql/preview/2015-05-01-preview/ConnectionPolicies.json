{
  "swagger": "2.0",
  "info": {
    "version": "2015-05-01-preview",
    "title": "SqlManagementClient",
    "description": "The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities."
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/connectionPolicies/{connectionPolicyName}": {
      "get": {
        "tags": [
          "ConnectionPolicies"
        ],
        "description": "Gets a server connection policy",
        "operationId": "ConnectionPolicies_Get",
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/ServerNameParameter"
          },
          {
            "name": "connectionPolicyName",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "default"
            ],
            "x-ms-enum": {
              "name": "connectionPolicyName",
              "modelAsString": true
            }
          },
          {
            "$ref": "../../../common/v1/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the server connection policy.",
            "schema": {
              "$ref": "#/definitions/ServerConnectionPolicy"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 InvalidServerConnectionPolicyName - Invalid server connection policy name.\n\n * 400 SerververConnectionPolicyParamsNull - The request body cannot be null.\n\n * 400 InavlidServerConnectionPolicyType - Connection type is invalid\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 SubscriptionDoesNotHaveServer - The requested server was not found\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation."
          }
        },
        "x-ms-examples": {
          "Gets a server connection policy": {
            "$ref": "./examples/ServerConnectionPolicyGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "ConnectionPolicies"
        ],
        "description": "Updates a server connection policy",
        "operationId": "ConnectionPolicies_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/ServerNameParameter"
          },
          {
            "name": "connectionPolicyName",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "default"
            ],
            "x-ms-enum": {
              "name": "connectionPolicyName",
              "modelAsString": true
            }
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServerConnectionPolicy"
            }
          },
          {
            "$ref": "../../../common/v1/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the connection policy",
            "schema": {
              "$ref": "#/definitions/ServerConnectionPolicy"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 InvalidServerConnectionPolicyName - Invalid server connection policy name.\n\n * 400 SerververConnectionPolicyParamsNull - The request body cannot be null.\n\n * 400 InavlidServerConnectionPolicyType - Connection type is invalid\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 SubscriptionDoesNotHaveServer - The requested server was not found\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation."
          },
          "202": {
            "description": "Updating the server connection policy is in progress."
          }
        },
        "x-ms-examples": {
          "Updates a server connection policy": {
            "$ref": "./examples/ServerConnectionPolicyCreateOrUpdate.json"
          }
        }
      }
    }
  },
  "definitions": {
    "ServerConnectionPolicyProperties": {
      "description": "ServerConnectionPolicy properties",
      "required": [
        "connectionType"
      ],
      "type": "object",
      "properties": {
        "connectionType": {
          "description": "The type of server connection property.",
          "type": "string"
        }
      }
    },
    "ServerConnectionPolicy": {
      "description": "Server connection policy for a server",
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../common/v1/types.json#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "location": {
          "description": "Location",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "description": "Kind",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "$ref": "#/definitions/ServerConnectionPolicyProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        }
      }
    }
  },
  "parameters": {
    "ServerNameParameter": {
      "name": "serverName",
      "in": "path",
      "description": "The name of the server.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  }
}
