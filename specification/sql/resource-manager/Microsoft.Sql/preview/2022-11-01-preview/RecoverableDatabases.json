{
  "swagger": "2.0",
  "info": {
    "version": "2022-11-01-preview",
    "title": "SqlManagementClient",
    "description": "The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities."
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recoverableDatabases": {
      "get": {
        "tags": [
          "RecoverableDatabases"
        ],
        "description": "Gets a list of recoverable databases.",
        "operationId": "RecoverableDatabases_ListByServer",
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/ServerNameParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of recoverable databases.",
            "schema": {
              "$ref": "#/definitions/RecoverableDatabaseListResult"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state\n\n * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state\n\n * 404 SubscriptionDoesNotHaveServer - The requested server was not found\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 ResourceNotFound - The requested resource was not found."
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Get list of recoverable databases.": {
            "$ref": "./examples/RecoverableDatabaseList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recoverableDatabases/{databaseName}": {
      "get": {
        "tags": [
          "RecoverableDatabases"
        ],
        "description": "Gets a recoverable database.",
        "operationId": "RecoverableDatabases_Get",
        "parameters": [
          {
            "$ref": "../../../common/v1/types.json#/parameters/ResourceGroupParameter"
          },
          {
            "$ref": "#/parameters/ServerNameParameter"
          },
          {
            "$ref": "#/parameters/DatabaseNameParameter"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The child resources to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "An OData filter expression that filters elements in the collection.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "../../../common/v1/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../common/v1/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified recoverable database.",
            "schema": {
              "$ref": "#/definitions/RecoverableDatabase"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state\n\n * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state\n\n * 400 InvalidRecoverableDatabaseId - Invalid recoverable database identifier.\n\n * 404 SubscriptionDoesNotHaveServer - The requested server was not found\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 ResourceNotFound - The requested resource was not found."
          }
        },
        "x-ms-odata": "#/definitions/RecoverableDatabase",
        "x-ms-examples": {
          "Get a recoverable database.": {
            "$ref": "./examples/RecoverableDatabaseGet.json"
          },
          "Gets a recoverable database with expand equals keys.": {
            "$ref": "./examples/RecoverableDatabaseGetWithExpandEqualsKeys.json"
          }
        }
      }
    }
  },
  "definitions": {
    "DatabaseKey": {
      "description": "Database level key used for encryption at rest.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The database key type. Only supported value is 'AzureKeyVault'.",
          "enum": [
            "AzureKeyVault"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "DatabaseKeyType",
            "modelAsString": true
          }
        },
        "thumbprint": {
          "description": "Thumbprint of the database key.",
          "type": "string",
          "readOnly": true
        },
        "creationDate": {
          "format": "date-time",
          "description": "The database key creation date.",
          "type": "string",
          "readOnly": true
        },
        "subregion": {
          "description": "Subregion of the server key.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RecoverableDatabase": {
      "description": "A recoverable database resource.",
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../common/v1/types.json#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/RecoverableDatabaseProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        }
      }
    },
    "RecoverableDatabaseListResult": {
      "description": "A list of recoverable databases.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Array of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoverableDatabase"
          },
          "readOnly": true
        },
        "nextLink": {
          "description": "Link to retrieve next page of results.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RecoverableDatabaseProperties": {
      "description": "The recoverable database's properties.",
      "type": "object",
      "properties": {
        "edition": {
          "description": "The edition of the database.",
          "type": "string",
          "readOnly": true
        },
        "serviceLevelObjective": {
          "description": "The service level objective name of the database.",
          "type": "string",
          "readOnly": true
        },
        "elasticPoolName": {
          "description": "The elastic pool name of the database",
          "type": "string",
          "readOnly": true
        },
        "lastAvailableBackupDate": {
          "format": "date-time",
          "description": "The last available backup date.",
          "type": "string",
          "readOnly": true
        },
        "keys": {
          "description": "The resource ids of the user assigned identities to use",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DatabaseKey"
          }
        }
      }
    }
  },
  "parameters": {
    "DatabaseNameParameter": {
      "name": "databaseName",
      "in": "path",
      "description": "The name of the database.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ServerNameParameter": {
      "name": "serverName",
      "in": "path",
      "description": "The name of the server.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  }
}
