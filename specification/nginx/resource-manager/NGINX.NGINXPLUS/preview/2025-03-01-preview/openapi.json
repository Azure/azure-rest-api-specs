{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft.Nginx.NginxPlus management service",
    "version": "2025-03-01-preview",
    "description": "Microsoft.Nginx.NginxPlus Resource Provider management API.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "NginxDeployments"
    },
    {
      "name": "Certificates"
    },
    {
      "name": "Configurations"
    },
    {
      "name": "ApiKeys"
    },
    {
      "name": "WafPolicies"
    }
  ],
  "paths": {
    "/providers/Nginx.NginxPlus/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Operations_List_MaximumSet_Gen": {
            "$ref": "./examples/Operations_List_MaximumSet_Gen.json"
          },
          "Operations_List_MinimumSet_Gen": {
            "$ref": "./examples/Operations_List_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Nginx.NginxPlus/nginxDeployments": {
      "get": {
        "operationId": "NginxDeployments_ListBySubscription",
        "tags": [
          "NginxDeployments"
        ],
        "description": "Lists all Nginx deployments in a subscription.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/NginxDeploymentListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "NginxDeployments_ListBySubscription_MaximumSet_Gen": {
            "$ref": "./examples/NginxDeployments_ListBySubscription_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments": {
      "get": {
        "operationId": "NginxDeployments_ListByResourceGroup",
        "tags": [
          "NginxDeployments"
        ],
        "description": "Lists all Nginx deployments in a resource group.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/NginxDeploymentListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "NginxDeployments_ListByResourceGroup_MaximumSet_Gen": {
            "$ref": "./examples/NginxDeployments_ListByResourceGroup_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{nginxDeploymentName}": {
      "get": {
        "operationId": "NginxDeployments_Get",
        "tags": [
          "NginxDeployments"
        ],
        "description": "Gets the properties of a specific Nginx deployment.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/NginxDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "NginxDeployments_Get_MaximumSet_Gen": {
            "$ref": "./examples/NginxDeployments_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "NginxDeployments_CreateOrUpdate",
        "tags": [
          "NginxDeployments"
        ],
        "description": "Creates or updates an Nginx deployment.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NginxDeployment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'NginxDeployment' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/NginxDeployment"
            }
          },
          "201": {
            "description": "Resource 'NginxDeployment' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/NginxDeployment"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "NginxDeployments_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/NginxDeployments_CreateOrUpdate_MaximumSet_Gen.json"
          }
        }
      },
      "patch": {
        "operationId": "NginxDeployments_Update",
        "tags": [
          "NginxDeployments"
        ],
        "description": "Updates an Nginx deployment with patch semantics.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NginxDeploymentUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/NginxDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "NginxDeployments_Update_MaximumSet_Gen": {
            "$ref": "./examples/NginxDeployments_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "NginxDeployments_Delete",
        "tags": [
          "NginxDeployments"
        ],
        "description": "Deletes a specific Nginx deployment.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "NginxDeployments_Delete_MaximumSet_Gen": {
            "$ref": "./examples/NginxDeployments_Delete_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{nginxDeploymentName}/apiKeys": {
      "get": {
        "operationId": "ApiKeys_ListByDeployment",
        "tags": [
          "ApiKeys"
        ],
        "description": "Lists all API keys under the specified Nginx deployment.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ApiKeyListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ApiKeys_ListByDeployment_MaximumSet_Gen": {
            "$ref": "./examples/ApiKeys_ListByDeployment_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{nginxDeploymentName}/apiKeys/{apiKeyName}": {
      "get": {
        "operationId": "ApiKeys_Get",
        "tags": [
          "ApiKeys"
        ],
        "description": "Retrieves the properties of a specific API key.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "apiKeyName",
            "in": "path",
            "description": "The name of the ApiKey",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiKeys_Get_MaximumSet_Gen": {
            "$ref": "./examples/ApiKeys_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "ApiKeys_CreateOrUpdate",
        "tags": [
          "ApiKeys"
        ],
        "description": "Creates a new API key or replaces an existing one.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "apiKeyName",
            "in": "path",
            "description": "The name of the ApiKey",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated API key.",
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiKeys_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/ApiKeys_CreateOrUpdate_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "ApiKeys_Delete",
        "tags": [
          "ApiKeys"
        ],
        "description": "Deletes the specified API key.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "apiKeyName",
            "in": "path",
            "description": "The name of the ApiKey",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "ApiKeys_Delete_MaximumSet_Gen": {
            "$ref": "./examples/ApiKeys_Delete_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{nginxDeploymentName}/certificates": {
      "get": {
        "operationId": "Certificates_ListByDeployment",
        "tags": [
          "Certificates"
        ],
        "description": "Lists all certificates in a parent deployment.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/CertificateListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Certificates_ListByDeployment_MaximumSet_Gen": {
            "$ref": "./examples/Certificates_ListByDeployment_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{nginxDeploymentName}/certificates/{certificateName}": {
      "get": {
        "operationId": "Certificates_Get",
        "tags": [
          "Certificates"
        ],
        "description": "Gets the properties of a specific certificate.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the Certificate",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Certificates_Get_MaximumSet_Gen": {
            "$ref": "./examples/Certificates_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "Certificates_CreateOrUpdate",
        "tags": [
          "Certificates"
        ],
        "description": "Creates or updates a certificate.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the Certificate",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Certificate' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          },
          "201": {
            "description": "Resource 'Certificate' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Certificate"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Certificates_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/Certificates_CreateOrUpdate_MaximumSet_Gen.json"
          }
        }
      },
      "patch": {
        "operationId": "Certificates_Update",
        "tags": [
          "Certificates"
        ],
        "description": "Updates a certificate with patch semantics.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the Certificate",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Certificates_Update_MaximumSet_Gen": {
            "$ref": "./examples/Certificates_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "Certificates_Delete",
        "tags": [
          "Certificates"
        ],
        "description": "Deletes a specific certificate.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "certificateName",
            "in": "path",
            "description": "The name of the Certificate",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Certificates_Delete_MaximumSet_Gen": {
            "$ref": "./examples/Certificates_Delete_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{nginxDeploymentName}/configurations": {
      "get": {
        "operationId": "Configurations_ListByDeployment",
        "tags": [
          "Configurations"
        ],
        "description": "Lists all configurations in a parent deployment.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ConfigurationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Configurations_ListByDeployment_MaximumSet_Gen": {
            "$ref": "./examples/Configurations_ListByDeployment_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{nginxDeploymentName}/configurations/{configurationName}": {
      "get": {
        "operationId": "Configurations_Get",
        "tags": [
          "Configurations"
        ],
        "description": "Retrieves the properties of a specific configuration.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "configurationName",
            "in": "path",
            "description": "The name of the Configuration",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Configurations_Get_MaximumSet_Gen": {
            "$ref": "./examples/Configurations_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "Configurations_CreateOrUpdate",
        "tags": [
          "Configurations"
        ],
        "description": "Creates or updates a configuration.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "configurationName",
            "in": "path",
            "description": "The name of the Configuration",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NginxConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Configurations_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/Configurations_CreateOrUpdate_MaximumSet_Gen.json"
          }
        }
      },
      "patch": {
        "operationId": "Configurations_Update",
        "tags": [
          "Configurations"
        ],
        "description": "Patches an existing configuration.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "configurationName",
            "in": "path",
            "description": "The name of the Configuration",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Configurations_Update_MaximumSet_Gen": {
            "$ref": "./examples/Configurations_Update_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "Configurations_Delete",
        "tags": [
          "Configurations"
        ],
        "description": "Deletes a specific configuration.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "configurationName",
            "in": "path",
            "description": "The name of the Configuration",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Configurations_Delete_MaximumSet_Gen": {
            "$ref": "./examples/Configurations_Delete_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{nginxDeploymentName}/listDefaultWafPolicies": {
      "post": {
        "operationId": "NginxDeployments_ListDefaultWafPolicies",
        "tags": [
          "NginxDeployments"
        ],
        "description": "Lists the default WAF policies for a deployment.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/NginxDeploymentDefaultWafPolicyListResponse"
            }
          }
        },
        "x-ms-examples": {
          "NginxDeployments_ListDefaultWafPolicies_MaximumSet_Gen": {
            "$ref": "./examples/NginxDeployments_ListDefaultWafPolicies_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{nginxDeploymentName}/wafPolicies": {
      "get": {
        "operationId": "WafPolicies_ListByDeployment",
        "tags": [
          "WafPolicies"
        ],
        "description": "List all WAF policies in a deployment.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/NginxDeploymentWafPolicyMetadataListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "WafPolicies_ListByDeployment_MaximumSet_Gen": {
            "$ref": "./examples/WafPolicies_ListByDeployment_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{nginxDeploymentName}/wafPolicies/{wafPolicyName}": {
      "get": {
        "operationId": "WafPolicies_Get",
        "tags": [
          "WafPolicies"
        ],
        "description": "Read a specific WAF policy.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "wafPolicyName",
            "in": "path",
            "description": "The name of the WafPolicy",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/WafPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "WafPolicies_Get_MaximumSet_Gen": {
            "$ref": "./examples/WafPolicies_Get_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "WafPolicies_CreateOrUpdate",
        "tags": [
          "WafPolicies"
        ],
        "description": "Create or update a WAF policy.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "wafPolicyName",
            "in": "path",
            "description": "The name of the WafPolicy",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WafPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'WafPolicy' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/WafPolicy"
            }
          },
          "201": {
            "description": "Resource 'WafPolicy' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/WafPolicy"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WafPolicies_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/WafPolicies_CreateOrUpdate_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "WafPolicies_Delete",
        "tags": [
          "WafPolicies"
        ],
        "description": "Delete a specific WAF policy.",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v5/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "nginxDeploymentName",
            "in": "path",
            "description": "The name of the NginxDeployment",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "wafPolicyName",
            "in": "path",
            "description": "The name of the WafPolicy",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "WafPolicies_Delete_MaximumSet_Gen": {
            "$ref": "./examples/WafPolicies_Delete_MaximumSet_Gen.json"
          }
        }
      }
    }
  },
  "definitions": {
    "ActivationState": {
      "type": "string",
      "description": "The activation state of the WAF.",
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "x-ms-enum": {
        "name": "ActivationState",
        "modelAsString": true,
        "values": [
          {
            "name": "Enabled",
            "value": "Enabled",
            "description": "WAF is enabled."
          },
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "WAF is disabled."
          }
        ]
      }
    },
    "ApiKey": {
      "type": "object",
      "description": "API key resource returned by the service.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ApiKeyResponseProperties",
          "description": "The resource-specific properties for this resource."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "ApiKeyListResponse": {
      "type": "object",
      "description": "Response model for listing API keys.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of API key resources.",
          "items": {
            "$ref": "#/definitions/ApiKey"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "URL to fetch the next page of API key responses."
        }
      },
      "required": [
        "value"
      ]
    },
    "ApiKeyListResult": {
      "type": "object",
      "description": "The response of a ApiKey list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ApiKey items on this page",
          "items": {
            "$ref": "#/definitions/ApiKey"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ApiKeyRequest": {
      "type": "object",
      "description": "Request payload for creating or updating an API key.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ApiKeyRequestProperties",
          "description": "The resource-specific properties for this resource."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "ApiKeyRequestProperties": {
      "type": "object",
      "description": "Properties for an API key request.",
      "properties": {
        "secretText": {
          "type": "string",
          "description": "The secret text for the API key"
        },
        "endDateTime": {
          "type": "string",
          "description": "Expiry of the key"
        }
      },
      "required": [
        "secretText",
        "endDateTime"
      ]
    },
    "ApiKeyResponseProperties": {
      "type": "object",
      "description": "Properties returned for an API key resource.",
      "properties": {
        "hint": {
          "type": "string",
          "description": "Hint for the secret (read-only)"
        },
        "endDateTime": {
          "type": "string",
          "description": "Expiry of the key"
        }
      },
      "required": [
        "hint",
        "endDateTime"
      ]
    },
    "AutoScaleSettings": {
      "type": "object",
      "description": "Auto-scale settings for the deployment.",
      "properties": {
        "profiles": {
          "type": "array",
          "description": "List of scale profiles.",
          "items": {
            "$ref": "#/definitions/ScaleProfile"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "profiles"
      ]
    },
    "AutoScaleSettingsUpdate": {
      "type": "object",
      "description": "Auto-scale settings for the deployment.",
      "properties": {
        "profiles": {
          "type": "array",
          "description": "List of scale profiles.",
          "items": {
            "$ref": "#/definitions/ScaleProfile"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "AutoUpgradeProfile": {
      "type": "object",
      "description": "Auto-upgrade profile for the deployment.",
      "properties": {
        "upgradeChannel": {
          "type": "string",
          "description": "The upgrade channel."
        }
      },
      "required": [
        "upgradeChannel"
      ]
    },
    "AutoUpgradeProfileUpdate": {
      "type": "object",
      "description": "Auto-upgrade profile for the deployment.",
      "properties": {
        "upgradeChannel": {
          "type": "string",
          "description": "The upgrade channel."
        }
      }
    },
    "Azure.ResourceManager.CommonTypes.ManagedServiceIdentityUpdate": {
      "type": "object",
      "description": "Managed service identity (system assigned and/or user assigned identities)",
      "properties": {
        "type": {
          "$ref": "../../../../../common-types/resource-management/v5/managedidentity.json#/definitions/ManagedServiceIdentityType",
          "description": "The type of managed identity assigned to this resource."
        },
        "userAssignedIdentities": {
          "type": "object",
          "description": "The identities assigned to this resource by the user.",
          "additionalProperties": {
            "allOf": [
              {
                "$ref": "../../../../../common-types/resource-management/v5/managedidentity.json#/definitions/UserAssignedIdentity"
              }
            ],
            "type": "object",
            "x-nullable": true
          }
        }
      }
    },
    "Azure.ResourceManager.CommonTypes.SkuUpdate": {
      "type": "object",
      "description": "The resource model definition representing SKU",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the SKU. Ex - P3. It is typically a letter+number code"
        },
        "tier": {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/SkuTier",
          "description": "This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT."
        },
        "size": {
          "type": "string",
          "description": "The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code."
        },
        "family": {
          "type": "string",
          "description": "If the service has different generations of hardware, for the same SKU, then that can be captured here."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
        }
      }
    },
    "Azure.ResourceManager.ResourceSkuProperty": {
      "type": "object",
      "description": "The SKU (Stock Keeping Unit) assigned to this resource.",
      "properties": {
        "sku": {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/Sku",
          "description": "The SKU (Stock Keeping Unit) assigned to this resource."
        }
      }
    },
    "Certificate": {
      "type": "object",
      "description": "NginxCertificate resource",
      "properties": {
        "properties": {
          "$ref": "#/definitions/NginxCertificateProperties",
          "description": "The resource-specific properties for this resource."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "CertificateListResult": {
      "type": "object",
      "description": "The response of a Certificate list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Certificate items on this page",
          "items": {
            "$ref": "#/definitions/Certificate"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "CertificateUpdate": {
      "type": "object",
      "description": "The type used for update operations of the Certificate.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/CertificateUpdateProperties",
          "description": "The resource-specific properties for this resource."
        }
      }
    },
    "CertificateUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the Certificate.",
      "properties": {
        "keyVirtualPath": {
          "type": "string",
          "description": "The virtual path to the key file."
        },
        "certificateVirtualPath": {
          "type": "string",
          "description": "The virtual path to the certificate file."
        },
        "keyVaultSecretId": {
          "type": "string",
          "description": "The Key Vault secret ID."
        },
        "sha1Thumbprint": {
          "type": "string",
          "description": "The SHA1 thumbprint of the certificate."
        },
        "keyVaultSecretVersion": {
          "type": "string",
          "description": "The Key Vault secret version."
        },
        "keyVaultSecretCreated": {
          "type": "string",
          "description": "The creation time of the Key Vault secret."
        },
        "certificateError": {
          "$ref": "#/definitions/NginxCertificateErrorResponseBody",
          "description": "Error details for the certificate, if any."
        }
      }
    },
    "Configuration": {
      "type": "object",
      "description": "Represents an Nginx configuration resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/NginxConfigurationResponseProperties",
          "description": "The resource-specific properties for this resource."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "ConfigurationListResult": {
      "type": "object",
      "description": "The response of a Configuration list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Configuration items on this page",
          "items": {
            "$ref": "#/definitions/Configuration"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ConfigurationUpdate": {
      "type": "object",
      "description": "The type used for update operations of the Configuration.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ConfigurationUpdateProperties",
          "description": "The resource-specific properties for this resource."
        }
      }
    },
    "ConfigurationUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the Configuration.",
      "properties": {
        "files": {
          "type": "array",
          "description": "List of configuration files.",
          "items": {
            "$ref": "#/definitions/NginxConfigurationFile"
          },
          "x-ms-identifiers": [
            "virtualPath"
          ]
        },
        "protectedFiles": {
          "type": "array",
          "description": "List of protected file requests.",
          "items": {
            "$ref": "#/definitions/NginxConfigurationProtectedFileRequest"
          },
          "x-ms-identifiers": [
            "virtualPath"
          ]
        },
        "package": {
          "$ref": "#/definitions/NginxConfigurationPackage",
          "description": "Configuration package data."
        },
        "rootFile": {
          "type": "string",
          "description": "Root file path."
        }
      }
    },
    "IdentityProperties": {
      "type": "object",
      "description": "Managed identity properties for the deployment.",
      "properties": {
        "principalId": {
          "type": "string",
          "description": "The principal ID."
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant ID."
        },
        "type": {
          "$ref": "#/definitions/IdentityType",
          "description": "The identity type."
        },
        "userAssignedIdentities": {
          "type": "array",
          "description": "User-assigned identities.",
          "items": {
            "$ref": "#/definitions/UserIdentityProperties"
          },
          "x-ms-identifiers": [
            "principalId"
          ]
        }
      },
      "required": [
        "principalId",
        "tenantId",
        "type",
        "userAssignedIdentities"
      ]
    },
    "IdentityType": {
      "type": "string",
      "description": "The type of managed identity.",
      "enum": [
        "SystemAssigned",
        "UserAssigned",
        "SystemAssigned, UserAssigned",
        "None"
      ],
      "x-ms-enum": {
        "name": "IdentityType",
        "modelAsString": true,
        "values": [
          {
            "name": "SystemAssigned",
            "value": "SystemAssigned",
            "description": "System assigned managed identity."
          },
          {
            "name": "UserAssigned",
            "value": "UserAssigned",
            "description": "User assigned managed identity."
          },
          {
            "name": "SystemAndUserAssigned",
            "value": "SystemAssigned, UserAssigned",
            "description": "Both system and user assigned managed identities."
          },
          {
            "name": "None",
            "value": "None",
            "description": "No managed identity."
          }
        ]
      }
    },
    "NginxAppProtect": {
      "type": "object",
      "description": "Nginx App Protect configuration.",
      "properties": {
        "webApplicationFirewallSettings": {
          "$ref": "#/definitions/WebApplicationFirewallSettings",
          "description": "Web application firewall settings."
        },
        "webApplicationFirewallStatus": {
          "$ref": "#/definitions/WebApplicationFirewallStatus",
          "description": "Web application firewall status."
        }
      },
      "required": [
        "webApplicationFirewallSettings",
        "webApplicationFirewallStatus"
      ]
    },
    "NginxAppProtectUpdate": {
      "type": "object",
      "description": "Nginx App Protect configuration.",
      "properties": {
        "webApplicationFirewallSettings": {
          "$ref": "#/definitions/WebApplicationFirewallSettingsUpdate",
          "description": "Web application firewall settings."
        },
        "webApplicationFirewallStatus": {
          "$ref": "#/definitions/WebApplicationFirewallStatusUpdate",
          "description": "Web application firewall status."
        }
      }
    },
    "NginxCertificateErrorResponseBody": {
      "type": "object",
      "description": "Error details for a certificate resource.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        }
      }
    },
    "NginxCertificateListResponse": {
      "type": "object",
      "description": "Response model for listing Nginx certificates.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of certificate resources.",
          "items": {
            "$ref": "#/definitions/Certificate"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "URL to fetch the next page of certificates."
        }
      },
      "required": [
        "value"
      ]
    },
    "NginxCertificateProperties": {
      "type": "object",
      "description": "Properties of an Nginx certificate resource.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The provisioning state of the certificate.",
          "readOnly": true
        },
        "keyVirtualPath": {
          "type": "string",
          "description": "The virtual path to the key file."
        },
        "certificateVirtualPath": {
          "type": "string",
          "description": "The virtual path to the certificate file."
        },
        "keyVaultSecretId": {
          "type": "string",
          "description": "The Key Vault secret ID."
        },
        "sha1Thumbprint": {
          "type": "string",
          "description": "The SHA1 thumbprint of the certificate."
        },
        "keyVaultSecretVersion": {
          "type": "string",
          "description": "The Key Vault secret version."
        },
        "keyVaultSecretCreated": {
          "type": "string",
          "description": "The creation time of the Key Vault secret."
        },
        "certificateError": {
          "$ref": "#/definitions/NginxCertificateErrorResponseBody",
          "description": "Error details for the certificate, if any."
        }
      }
    },
    "NginxConfigurationFile": {
      "type": "object",
      "description": "Represents a configuration file.",
      "properties": {
        "content": {
          "type": "string",
          "description": "File content."
        },
        "virtualPath": {
          "type": "string",
          "description": "Virtual path of the file."
        }
      }
    },
    "NginxConfigurationListResponse": {
      "type": "object",
      "description": "Response model for listing Nginx configurations.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of configurations.",
          "items": {
            "$ref": "#/definitions/Configuration"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "URL to fetch the next page of configurations."
        }
      },
      "required": [
        "value"
      ]
    },
    "NginxConfigurationPackage": {
      "type": "object",
      "description": "Represents a configuration package.",
      "properties": {
        "data": {
          "type": "string",
          "description": "Package data."
        },
        "protectedFiles": {
          "type": "array",
          "description": "List of protected files in the package.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NginxConfigurationProtectedFileRequest": {
      "type": "object",
      "description": "Request model for a protected configuration file.",
      "properties": {
        "content": {
          "type": "string",
          "description": "File content."
        },
        "virtualPath": {
          "type": "string",
          "description": "Virtual path of the file."
        },
        "contentHash": {
          "type": "string",
          "description": "Content hash of the file."
        }
      }
    },
    "NginxConfigurationProtectedFileResponse": {
      "type": "object",
      "description": "Response model for a protected configuration file.",
      "properties": {
        "virtualPath": {
          "type": "string",
          "description": "Virtual path of the file."
        },
        "contentHash": {
          "type": "string",
          "description": "Content hash of the file."
        }
      }
    },
    "NginxConfigurationRequest": {
      "type": "object",
      "description": "Request model for creating or updating an Nginx configuration.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/NginxConfigurationRequestProperties",
          "description": "The resource-specific properties for this resource."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "NginxConfigurationRequestProperties": {
      "type": "object",
      "description": "Properties for an Nginx configuration request.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning state of the configuration.",
          "readOnly": true
        },
        "files": {
          "type": "array",
          "description": "List of configuration files.",
          "items": {
            "$ref": "#/definitions/NginxConfigurationFile"
          },
          "x-ms-identifiers": [
            "virtualPath"
          ]
        },
        "protectedFiles": {
          "type": "array",
          "description": "List of protected file requests.",
          "items": {
            "$ref": "#/definitions/NginxConfigurationProtectedFileRequest"
          },
          "x-ms-identifiers": [
            "virtualPath"
          ]
        },
        "package": {
          "$ref": "#/definitions/NginxConfigurationPackage",
          "description": "Configuration package data."
        },
        "rootFile": {
          "type": "string",
          "description": "Root file path."
        }
      }
    },
    "NginxConfigurationResponseProperties": {
      "type": "object",
      "description": "Properties returned for an Nginx configuration resource.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning state of the configuration.",
          "readOnly": true
        },
        "files": {
          "type": "array",
          "description": "List of configuration files.",
          "items": {
            "$ref": "#/definitions/NginxConfigurationFile"
          },
          "x-ms-identifiers": [
            "virtualPath"
          ]
        },
        "protectedFiles": {
          "type": "array",
          "description": "List of protected files.",
          "items": {
            "$ref": "#/definitions/NginxConfigurationProtectedFileResponse"
          },
          "x-ms-identifiers": [
            "virtualPath"
          ]
        },
        "package": {
          "$ref": "#/definitions/NginxConfigurationPackage",
          "description": "Configuration package details."
        },
        "rootFile": {
          "type": "string",
          "description": "Root file of the configuration."
        }
      }
    },
    "NginxDeployment": {
      "type": "object",
      "description": "Represents an Nginx deployment resource.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/NginxDeploymentProperties",
          "description": "The resource-specific properties for this resource."
        },
        "identity": {
          "$ref": "../../../../../common-types/resource-management/v5/managedidentity.json#/definitions/ManagedServiceIdentity",
          "description": "The managed service identities assigned to this resource."
        },
        "sku": {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/Sku",
          "description": "The SKU (Stock Keeping Unit) assigned to this resource."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "NginxDeploymentDefaultWafPolicy": {
      "type": "object",
      "description": "Default WAF policy for a deployment.",
      "properties": {
        "content": {
          "type": "string",
          "format": "byte",
          "description": "The raw policy content, base64-encoded."
        },
        "filepath": {
          "type": "string",
          "description": "The file path where this policy would be placed."
        }
      },
      "required": [
        "content",
        "filepath"
      ]
    },
    "NginxDeploymentDefaultWafPolicyListResponse": {
      "type": "object",
      "description": "Response model for listing default WAF policies.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of default WAF policies.",
          "items": {
            "$ref": "#/definitions/NginxDeploymentDefaultWafPolicy"
          },
          "x-ms-identifiers": [
            "filepath"
          ]
        },
        "nextLink": {
          "type": "string",
          "description": "URL to fetch the next page of WAF policies."
        }
      },
      "required": [
        "value"
      ]
    },
    "NginxDeploymentListResponse": {
      "type": "object",
      "description": "Response model for listing Nginx deployments.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of Nginx deployments.",
          "items": {
            "$ref": "#/definitions/NginxDeployment"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "URL to fetch the next page of deployments."
        }
      },
      "required": [
        "value"
      ]
    },
    "NginxDeploymentListResult": {
      "type": "object",
      "description": "The response of a NginxDeployment list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The NginxDeployment items on this page",
          "items": {
            "$ref": "#/definitions/NginxDeployment"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "NginxDeploymentPatchProperties": {
      "type": "object",
      "description": "Patch properties for updating an Nginx deployment.",
      "properties": {
        "enableDiagnosticsSupport": {
          "type": "boolean",
          "description": "Whether diagnostics support is enabled."
        },
        "logging": {
          "$ref": "#/definitions/NginxLogging",
          "description": "Logging configuration."
        },
        "scalingProperties": {
          "$ref": "#/definitions/NginxDeploymentScalingProperties",
          "description": "Scaling properties."
        },
        "userProfile": {
          "$ref": "#/definitions/NginxDeploymentUserProfile",
          "description": "User profile."
        },
        "networkProfile": {
          "$ref": "#/definitions/NginxNetworkProfile",
          "description": "Network profile."
        },
        "autoUpgradeProfile": {
          "$ref": "#/definitions/AutoUpgradeProfile",
          "description": "Auto-upgrade profile."
        },
        "nginxAppProtect": {
          "$ref": "#/definitions/NginxAppProtect",
          "description": "Nginx App Protect configuration."
        }
      },
      "required": [
        "enableDiagnosticsSupport",
        "logging",
        "scalingProperties",
        "userProfile",
        "networkProfile",
        "autoUpgradeProfile",
        "nginxAppProtect"
      ]
    },
    "NginxDeploymentProperties": {
      "type": "object",
      "description": "Properties of an Nginx deployment.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The provisioning state of the deployment.",
          "readOnly": true
        },
        "nginxVersion": {
          "type": "string",
          "description": "The Nginx version."
        },
        "networkProfile": {
          "$ref": "#/definitions/NginxNetworkProfile",
          "description": "The network profile."
        },
        "ipAddress": {
          "type": "string",
          "description": "The IP address of the deployment."
        },
        "enableDiagnosticsSupport": {
          "type": "boolean",
          "description": "Whether diagnostics support is enabled."
        },
        "logging": {
          "$ref": "#/definitions/NginxLogging",
          "description": "Logging configuration."
        },
        "scalingProperties": {
          "$ref": "#/definitions/NginxDeploymentScalingProperties",
          "description": "Scaling properties."
        },
        "autoUpgradeProfile": {
          "$ref": "#/definitions/AutoUpgradeProfile",
          "description": "Auto-upgrade profile."
        },
        "userProfile": {
          "$ref": "#/definitions/NginxDeploymentUserProfile",
          "description": "User profile."
        },
        "nginxAppProtect": {
          "$ref": "#/definitions/NginxAppProtect",
          "description": "Nginx App Protect configuration."
        },
        "dataplaneApiEndpoint": {
          "type": "string",
          "description": "Dataplane API endpoint."
        }
      },
      "required": [
        "nginxVersion",
        "networkProfile",
        "ipAddress",
        "enableDiagnosticsSupport",
        "logging",
        "scalingProperties",
        "autoUpgradeProfile",
        "userProfile",
        "nginxAppProtect",
        "dataplaneApiEndpoint"
      ]
    },
    "NginxDeploymentScalingProperties": {
      "type": "object",
      "description": "Scaling properties for the deployment.",
      "properties": {
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "The capacity of the deployment."
        },
        "autoScaleSettings": {
          "$ref": "#/definitions/AutoScaleSettings",
          "description": "Auto-scale settings."
        }
      },
      "required": [
        "capacity",
        "autoScaleSettings"
      ]
    },
    "NginxDeploymentScalingPropertiesUpdate": {
      "type": "object",
      "description": "Scaling properties for the deployment.",
      "properties": {
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "The capacity of the deployment."
        },
        "autoScaleSettings": {
          "$ref": "#/definitions/AutoScaleSettingsUpdate",
          "description": "Auto-scale settings."
        }
      }
    },
    "NginxDeploymentTag": {
      "type": "object",
      "description": "Represents a single tag for an Nginx deployment.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The tag name."
        },
        "value": {
          "type": "string",
          "description": "The tag value."
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "NginxDeploymentUpdate": {
      "type": "object",
      "description": "The type used for update operations of the NginxDeployment.",
      "properties": {
        "identity": {
          "$ref": "#/definitions/Azure.ResourceManager.CommonTypes.ManagedServiceIdentityUpdate",
          "description": "The managed service identities assigned to this resource."
        },
        "sku": {
          "$ref": "#/definitions/Azure.ResourceManager.CommonTypes.SkuUpdate",
          "description": "The SKU (Stock Keeping Unit) assigned to this resource."
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/NginxDeploymentUpdateProperties",
          "description": "The resource-specific properties for this resource."
        }
      }
    },
    "NginxDeploymentUpdateParameters": {
      "type": "object",
      "description": "Parameters for updating an Nginx deployment.",
      "properties": {
        "identity": {
          "$ref": "#/definitions/IdentityProperties",
          "description": "The identity properties for the deployment."
        },
        "tags": {
          "type": "array",
          "description": "Resource tags.",
          "items": {
            "$ref": "#/definitions/NginxDeploymentTag"
          },
          "x-ms-identifiers": []
        },
        "sku": {
          "$ref": "#/definitions/Azure.ResourceManager.ResourceSkuProperty",
          "description": "The SKU of the deployment."
        },
        "location": {
          "type": "string",
          "description": "The location of the deployment."
        },
        "properties": {
          "$ref": "#/definitions/NginxDeploymentPatchProperties",
          "description": "Patch properties for the deployment."
        }
      },
      "required": [
        "identity",
        "tags",
        "sku",
        "location",
        "properties"
      ]
    },
    "NginxDeploymentUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the NginxDeployment.",
      "properties": {
        "nginxVersion": {
          "type": "string",
          "description": "The Nginx version."
        },
        "networkProfile": {
          "$ref": "#/definitions/NginxNetworkProfileUpdate",
          "description": "The network profile."
        },
        "ipAddress": {
          "type": "string",
          "description": "The IP address of the deployment."
        },
        "enableDiagnosticsSupport": {
          "type": "boolean",
          "description": "Whether diagnostics support is enabled."
        },
        "logging": {
          "$ref": "#/definitions/NginxLoggingUpdate",
          "description": "Logging configuration."
        },
        "scalingProperties": {
          "$ref": "#/definitions/NginxDeploymentScalingPropertiesUpdate",
          "description": "Scaling properties."
        },
        "autoUpgradeProfile": {
          "$ref": "#/definitions/AutoUpgradeProfileUpdate",
          "description": "Auto-upgrade profile."
        },
        "userProfile": {
          "$ref": "#/definitions/NginxDeploymentUserProfileUpdate",
          "description": "User profile."
        },
        "nginxAppProtect": {
          "$ref": "#/definitions/NginxAppProtectUpdate",
          "description": "Nginx App Protect configuration."
        },
        "dataplaneApiEndpoint": {
          "type": "string",
          "description": "Dataplane API endpoint."
        }
      }
    },
    "NginxDeploymentUserProfile": {
      "type": "object",
      "description": "User profile for the deployment.",
      "properties": {
        "preferredEmail": {
          "type": "string",
          "description": "The preferred email address."
        }
      },
      "required": [
        "preferredEmail"
      ]
    },
    "NginxDeploymentUserProfileUpdate": {
      "type": "object",
      "description": "User profile for the deployment.",
      "properties": {
        "preferredEmail": {
          "type": "string",
          "description": "The preferred email address."
        }
      }
    },
    "NginxDeploymentWafPolicyApplyingStatus": {
      "type": "object",
      "description": "Applying status for a WAF policy.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The apply status code."
        },
        "displayStatus": {
          "type": "string",
          "description": "The human-readable apply status."
        },
        "time": {
          "type": "string",
          "description": "The timestamp when apply status was recorded."
        }
      },
      "required": [
        "code",
        "displayStatus",
        "time"
      ]
    },
    "NginxDeploymentWafPolicyCompilingStatus": {
      "type": "object",
      "description": "Compilation status for a WAF policy.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The compilation status code."
        },
        "displayStatus": {
          "type": "string",
          "description": "The human-readable compilation status."
        },
        "time": {
          "type": "string",
          "description": "The timestamp when compilation status was recorded."
        }
      },
      "required": [
        "code",
        "displayStatus",
        "time"
      ]
    },
    "NginxDeploymentWafPolicyMetadata": {
      "type": "object",
      "description": "Metadata for a WAF policy under an Nginx deployment.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/NginxDeploymentWafPolicyMetadataProperties",
          "description": "The resource-specific properties for this resource."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "NginxDeploymentWafPolicyMetadataListResult": {
      "type": "object",
      "description": "The response of a NginxDeploymentWafPolicyMetadata list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The NginxDeploymentWafPolicyMetadata items on this page",
          "items": {
            "$ref": "#/definitions/NginxDeploymentWafPolicyMetadata"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "NginxDeploymentWafPolicyMetadataProperties": {
      "type": "object",
      "description": "Properties of a WAF policy metadata resource.",
      "properties": {
        "filepath": {
          "type": "string",
          "description": "The file path of the WAF policy metadata."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The provisioning state of the WAF policy metadata.",
          "readOnly": true
        },
        "compilingState": {
          "$ref": "#/definitions/NginxDeploymentWafPolicyCompilingStatus",
          "description": "The compiling status of the WAF policy metadata."
        },
        "applyingState": {
          "$ref": "#/definitions/NginxDeploymentWafPolicyApplyingStatus",
          "description": "The applying status of the WAF policy metadata."
        }
      },
      "required": [
        "filepath",
        "compilingState",
        "applyingState"
      ]
    },
    "NginxDeploymentWafPolicyProperties": {
      "type": "object",
      "description": "Properties of a WAF policy resource.",
      "properties": {
        "content": {
          "type": "string",
          "format": "byte",
          "description": "The raw policy content (base64-encoded)."
        },
        "filepath": {
          "type": "string",
          "description": "The file path of the WAF policy."
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The provisioning state of the WAF policy.",
          "readOnly": true
        },
        "compilingState": {
          "$ref": "#/definitions/NginxDeploymentWafPolicyCompilingStatus",
          "description": "The compiling status of the WAF policy."
        },
        "applyingState": {
          "$ref": "#/definitions/NginxDeploymentWafPolicyApplyingStatus",
          "description": "The applying status of the WAF policy."
        }
      },
      "required": [
        "content",
        "filepath",
        "compilingState",
        "applyingState"
      ]
    },
    "NginxFrontendIPConfiguration": {
      "type": "object",
      "description": "Frontend IP configuration.",
      "properties": {
        "publicIPAddresses": {
          "type": "array",
          "description": "Public IP addresses.",
          "items": {
            "$ref": "#/definitions/NginxPublicIPAddress"
          },
          "x-ms-identifiers": [
            "id"
          ]
        },
        "privateIPAddresses": {
          "type": "array",
          "description": "Private IP addresses.",
          "items": {
            "$ref": "#/definitions/NginxPrivateIPAddress"
          },
          "x-ms-identifiers": [
            "privateIPAddress"
          ]
        }
      },
      "required": [
        "publicIPAddresses",
        "privateIPAddresses"
      ]
    },
    "NginxFrontendIPConfigurationUpdate": {
      "type": "object",
      "description": "Frontend IP configuration.",
      "properties": {
        "publicIPAddresses": {
          "type": "array",
          "description": "Public IP addresses.",
          "items": {
            "$ref": "#/definitions/NginxPublicIPAddress"
          },
          "x-ms-identifiers": [
            "id"
          ]
        },
        "privateIPAddresses": {
          "type": "array",
          "description": "Private IP addresses.",
          "items": {
            "$ref": "#/definitions/NginxPrivateIPAddress"
          },
          "x-ms-identifiers": [
            "privateIPAddress"
          ]
        }
      }
    },
    "NginxLogging": {
      "type": "object",
      "description": "Logging configuration for the deployment.",
      "properties": {
        "storageAccount": {
          "$ref": "#/definitions/NginxStorageAccount",
          "description": "Storage account configuration."
        }
      },
      "required": [
        "storageAccount"
      ]
    },
    "NginxLoggingUpdate": {
      "type": "object",
      "description": "Logging configuration for the deployment.",
      "properties": {
        "storageAccount": {
          "$ref": "#/definitions/NginxStorageAccountUpdate",
          "description": "Storage account configuration."
        }
      }
    },
    "NginxNetworkInterfaceConfiguration": {
      "type": "object",
      "description": "Network interface configuration.",
      "properties": {
        "subnetId": {
          "type": "string",
          "description": "The subnet resource ID."
        }
      },
      "required": [
        "subnetId"
      ]
    },
    "NginxNetworkInterfaceConfigurationUpdate": {
      "type": "object",
      "description": "Network interface configuration.",
      "properties": {
        "subnetId": {
          "type": "string",
          "description": "The subnet resource ID."
        }
      }
    },
    "NginxNetworkProfile": {
      "type": "object",
      "description": "Network profile for the deployment.",
      "properties": {
        "frontEndIPConfiguration": {
          "$ref": "#/definitions/NginxFrontendIPConfiguration",
          "description": "Frontend IP configuration."
        },
        "networkInterfaceConfiguration": {
          "$ref": "#/definitions/NginxNetworkInterfaceConfiguration",
          "description": "Network interface configuration."
        }
      },
      "required": [
        "frontEndIPConfiguration",
        "networkInterfaceConfiguration"
      ]
    },
    "NginxNetworkProfileUpdate": {
      "type": "object",
      "description": "Network profile for the deployment.",
      "properties": {
        "frontEndIPConfiguration": {
          "$ref": "#/definitions/NginxFrontendIPConfigurationUpdate",
          "description": "Frontend IP configuration."
        },
        "networkInterfaceConfiguration": {
          "$ref": "#/definitions/NginxNetworkInterfaceConfigurationUpdate",
          "description": "Network interface configuration."
        }
      }
    },
    "NginxPrivateIPAddress": {
      "type": "object",
      "description": "Private IP address configuration.",
      "properties": {
        "privateIPAddress": {
          "type": "string",
          "description": "The private IP address."
        },
        "privateIPAllocationMethod": {
          "$ref": "#/definitions/NginxPrivateIPAllocationMethod",
          "description": "The allocation method for the private IP."
        },
        "subnetId": {
          "type": "string",
          "description": "The subnet resource ID."
        }
      },
      "required": [
        "privateIPAddress",
        "privateIPAllocationMethod",
        "subnetId"
      ]
    },
    "NginxPrivateIPAllocationMethod": {
      "type": "string",
      "description": "The allocation method for a private IP address.",
      "enum": [
        "Static",
        "Dynamic"
      ],
      "x-ms-enum": {
        "name": "NginxPrivateIPAllocationMethod",
        "modelAsString": true,
        "values": [
          {
            "name": "Static",
            "value": "Static",
            "description": "Static private IP allocation method."
          },
          {
            "name": "Dynamic",
            "value": "Dynamic",
            "description": "Dynamic private IP allocation method."
          }
        ]
      }
    },
    "NginxPublicIPAddress": {
      "type": "object",
      "description": "Public IP address reference.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The resource ID of the public IP address."
        }
      },
      "required": [
        "id"
      ]
    },
    "NginxStorageAccount": {
      "type": "object",
      "description": "Storage account configuration for logging.",
      "properties": {
        "accountName": {
          "type": "string",
          "description": "The storage account name."
        },
        "containerName": {
          "type": "string",
          "description": "The container name."
        }
      },
      "required": [
        "accountName",
        "containerName"
      ]
    },
    "NginxStorageAccountUpdate": {
      "type": "object",
      "description": "Storage account configuration for logging.",
      "properties": {
        "accountName": {
          "type": "string",
          "description": "The storage account name."
        },
        "containerName": {
          "type": "string",
          "description": "The container name."
        }
      }
    },
    "ProvisioningState": {
      "type": "string",
      "description": "The provisioning state of a resource.",
      "enum": [
        "Accepted",
        "Creating",
        "Updating",
        "Deleting",
        "Succeeded",
        "Failed",
        "Canceled",
        "Deleted",
        "NotSpecified"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Accepted",
            "value": "Accepted",
            "description": "The resource has been accepted."
          },
          {
            "name": "Creating",
            "value": "Creating",
            "description": "The resource is being created."
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "The resource is being updated."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "The resource is being deleted."
          },
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The resource has been successfully provisioned."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The resource provisioning operation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "The resource provisioning was canceled."
          },
          {
            "name": "Deleted",
            "value": "Deleted",
            "description": "The resource has been deleted."
          },
          {
            "name": "NotSpecified",
            "value": "NotSpecified",
            "description": "Provisioning state was not specified."
          }
        ]
      },
      "readOnly": true
    },
    "ResourceSku": {
      "type": "object",
      "description": "The SKU of the resource.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The SKU name."
        }
      },
      "required": [
        "name"
      ]
    },
    "ScaleProfile": {
      "type": "object",
      "description": "Scale profile for auto-scaling.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the scale profile."
        },
        "capacity": {
          "$ref": "#/definitions/ScaleProfileCapacity",
          "description": "Capacity settings for the scale profile."
        }
      },
      "required": [
        "name",
        "capacity"
      ]
    },
    "ScaleProfileCapacity": {
      "type": "object",
      "description": "Capacity settings for a scale profile.",
      "properties": {
        "min": {
          "type": "integer",
          "format": "int32",
          "description": "Minimum capacity."
        },
        "max": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum capacity."
        }
      },
      "required": [
        "min",
        "max"
      ]
    },
    "UserIdentityProperties": {
      "type": "object",
      "description": "Properties for a user-assigned identity.",
      "properties": {
        "principalId": {
          "type": "string",
          "description": "The principal ID."
        },
        "clientId": {
          "type": "string",
          "description": "The client ID."
        }
      },
      "required": [
        "principalId",
        "clientId"
      ]
    },
    "WafPolicy": {
      "type": "object",
      "description": "Represents a WAF policy resource under a given Nginx deployment.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/NginxDeploymentWafPolicyProperties",
          "description": "The resource-specific properties for this resource."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "WafPolicyMetadataListResponse": {
      "type": "object",
      "description": "Response model for listing WAF policy metadata.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The collection of WAF policy metadata.",
          "items": {
            "$ref": "#/definitions/NginxDeploymentWafPolicyMetadata"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of results."
        }
      },
      "required": [
        "value"
      ]
    },
    "WebApplicationFirewallComponentVersions": {
      "type": "object",
      "description": "Component versions for the web application firewall.",
      "properties": {
        "wafEngineVersion": {
          "type": "string",
          "description": "WAF engine version."
        },
        "wafNginxVersion": {
          "type": "string",
          "description": "WAF Nginx version."
        }
      },
      "required": [
        "wafEngineVersion",
        "wafNginxVersion"
      ]
    },
    "WebApplicationFirewallComponentVersionsUpdate": {
      "type": "object",
      "description": "Component versions for the web application firewall.",
      "properties": {
        "wafEngineVersion": {
          "type": "string",
          "description": "WAF engine version."
        },
        "wafNginxVersion": {
          "type": "string",
          "description": "WAF Nginx version."
        }
      }
    },
    "WebApplicationFirewallPackage": {
      "type": "object",
      "description": "Web application firewall package information.",
      "properties": {
        "version": {
          "type": "string",
          "description": "The package version."
        },
        "revisionDatetime": {
          "type": "string",
          "description": "The revision datetime."
        }
      },
      "required": [
        "version",
        "revisionDatetime"
      ]
    },
    "WebApplicationFirewallPackageUpdate": {
      "type": "object",
      "description": "Web application firewall package information.",
      "properties": {
        "version": {
          "type": "string",
          "description": "The package version."
        },
        "revisionDatetime": {
          "type": "string",
          "description": "The revision datetime."
        }
      }
    },
    "WebApplicationFirewallSettings": {
      "type": "object",
      "description": "Web application firewall settings.",
      "properties": {
        "activationState": {
          "$ref": "#/definitions/ActivationState",
          "description": "The activation state of the WAF."
        }
      },
      "required": [
        "activationState"
      ]
    },
    "WebApplicationFirewallSettingsUpdate": {
      "type": "object",
      "description": "Web application firewall settings.",
      "properties": {
        "activationState": {
          "$ref": "#/definitions/ActivationState",
          "description": "The activation state of the WAF."
        }
      }
    },
    "WebApplicationFirewallStatus": {
      "type": "object",
      "description": "Web application firewall status.",
      "properties": {
        "wafRelease": {
          "type": "string",
          "description": "The WAF release version."
        },
        "attackSignaturesPackage": {
          "$ref": "#/definitions/WebApplicationFirewallPackage",
          "description": "Attack signatures package."
        },
        "botSignaturesPackage": {
          "$ref": "#/definitions/WebApplicationFirewallPackage",
          "description": "Bot signatures package."
        },
        "threatCampaignsPackage": {
          "$ref": "#/definitions/WebApplicationFirewallPackage",
          "description": "Threat campaigns package."
        },
        "componentVersions": {
          "$ref": "#/definitions/WebApplicationFirewallComponentVersions",
          "description": "Component versions."
        }
      },
      "required": [
        "wafRelease",
        "attackSignaturesPackage",
        "botSignaturesPackage",
        "threatCampaignsPackage",
        "componentVersions"
      ]
    },
    "WebApplicationFirewallStatusUpdate": {
      "type": "object",
      "description": "Web application firewall status.",
      "properties": {
        "wafRelease": {
          "type": "string",
          "description": "The WAF release version."
        },
        "attackSignaturesPackage": {
          "$ref": "#/definitions/WebApplicationFirewallPackageUpdate",
          "description": "Attack signatures package."
        },
        "botSignaturesPackage": {
          "$ref": "#/definitions/WebApplicationFirewallPackageUpdate",
          "description": "Bot signatures package."
        },
        "threatCampaignsPackage": {
          "$ref": "#/definitions/WebApplicationFirewallPackageUpdate",
          "description": "Threat campaigns package."
        },
        "componentVersions": {
          "$ref": "#/definitions/WebApplicationFirewallComponentVersionsUpdate",
          "description": "Component versions."
        }
      }
    }
  },
  "parameters": {}
}