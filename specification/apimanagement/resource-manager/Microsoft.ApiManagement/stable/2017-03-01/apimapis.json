{
  "swagger": "2.0",
  "info": {
    "title": "ApiManagementClient",
    "description": "Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.",
    "version": "2017-03-01"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis": {
      "get": {
        "tags": [
          "Apis"
        ],
        "operationId": "Api_ListByService",
        "description": "Lists all APIs of the API Management service instance.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-create-apis"
        },
        "x-ms-examples": {
          "ApiManagementListApis": {
            "$ref": "./examples/ApiManagementListApis.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| serviceUrl  | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| path        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "expandApiVersionSet",
            "in": "query",
            "type": "boolean",
            "required": false,
            "default": false,
            "description": "Include full ApiVersionSet resource in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged Result response of Apis.",
            "schema": {
              "$ref": "#/definitions/ApiCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}": {      
      "head": {
        "tags": [
          "Apis"
        ],
        "operationId": "Api_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApi": {
            "$ref": "./examples/ApiManagementHeadApi.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified API entity exists and current entity state version is present in the ETag header.",
            "headers": {
               "ETag": {
                 "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                 "type": "string"
               }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }                    
        }
      },
	  "get": {
        "tags": [
          "Apis"
        ],
        "operationId": "Api_Get",
        "description": "Gets the details of the API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementGetApiContract": {
            "$ref": "./examples/ApiManagementGetApiContract.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified API entity.",
            "schema": {
              "$ref": "#/definitions/ApiContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Apis"
        ],
        "operationId": "Api_CreateOrUpdate",
        "description": "Creates new or updates existing specified API of the API Management service instance.",
        "x-ms-examples": {
          "ApiManagementCreateApiUsingSwaggerImport": {
            "$ref": "./examples/ApiManagementCreateApiUsingSwaggerImport.json"
          },
          "ApiManagementCreateApiUsingWadlImport": {
            "$ref": "./examples/ApiManagementCreateApiUsingWadlImport.json"
          },
          "ApiManagementCreateApiUsingWsdlImport": {
            "$ref": "./examples/ApiManagementCreateApiUsingWsdlImport.json"
          },
          "ApiManagementCreateApi": {
            "$ref": "./examples/ApiManagementCreateApi.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiCreateOrUpdateParameter"
            },
            "description": "Create or update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "ETag of the Api Entity. For Create Api Etag should not be specified. For Update Etag should match the existing Entity or it can be * for unconditional update."
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "API was successfully created.",
            "schema": {
              "$ref": "#/definitions/ApiContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "API was successfully updated.",
            "schema": {
              "$ref": "#/definitions/ApiContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Apis"
        ],
        "operationId": "Api_Update",
        "description": "Updates the specified API of the API Management service instance.",
        "x-ms-examples": {
          "ApiManagementUpdateApi.json": {
            "$ref": "./examples/ApiManagementUpdateApi.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUpdateContract"
            },
            "description": "API Update Contract parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the API entity. ETag should match the current entity state in the header response of the GET request or it should be * for unconditional update.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The API was successfully updated."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Apis"
        ],
        "operationId": "Api_Delete",
        "description": "Deletes the specified API of the API Management service instance.",
        "x-ms-examples": {
          "ApiManagementDeleteApi.json": {
            "$ref": "./examples/ApiManagementDeleteApi.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the API Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The API was successfully deleted."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/revisions": {
      "parameters": [
        {
          "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
        },
        {
          "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
        },
        {
          "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
        },
        {
          "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
        },
        {
          "$ref": "#/parameters/ApiIdParameter"
        }
      ],
      "get": {
        "tags": [
          "Revisions"
        ],
        "operationId": "ApiRevisions_List",
        "description": "Lists all revisions of an API.",
        "x-ms-examples": {
          "ApiManagementListApiRevisions": {
            "$ref": "./examples/ApiManagementListApiRevisions.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns a list of revision details.",
            "schema": {
              "$ref": "#/definitions/ApiRevisionCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiRevisionContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases": {
      "parameters": [
        {
          "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
        },
        {
          "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
        },
        {
          "$ref": "#/parameters/ApiIdParameter"
        },
        {
          "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
        },
        {
          "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
        }
      ],
      "get": {
        "tags": [
          "Releases"
        ],
        "operationId": "ApiRelease_List",
        "description": "Lists all releases of an API. An API release is created when making an API Revision current. Releases are also used to rollback to previous revisions. Results will be paged and can be constrained by the $top and $skip parameters.",
        "x-ms-examples": {
          "ApiManagementListApiReleases": {
            "$ref": "./examples/ApiManagementListApiReleases.json"
          }
        },        
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field | Supported operators    | Supported functions                         |\n|-------|------------------------|---------------------------------------------|\n| name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n|notes|ge le eq ne gt lt|substringof contains startswith endswith|"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns a list of API Releases.",
            "schema": {
              "$ref": "#/definitions/ApiReleaseCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiReleaseContract"
      }
    },
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}": {
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "releaseId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Release identifier within an API. Must be unique in the current API Management service instance.",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[^*#&+:<>?]+$"   
          }
        ],
        "get": {
        "tags": [
          "Releases"
        ],
        "operationId": "ApiRelease_Get",
        "description": "Returns the details of an API release.",
        "x-ms-examples": {
          "ApiManagementGetApiRelease": {
            "$ref": "./examples/ApiManagementGetApiRelease.json"
          }
        },
        "responses": {
          "200": {
            "description": "The operation returns the details of an API Release.",
            "schema": {
              "$ref": "#/definitions/ApiReleaseContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-odata": "#/definitions/ApiReleaseContract"
      },
      "put": {
        "tags": [
          "Releases"
        ],
        "operationId": "ApiRelease_Create",
        "description": "Creates a new Release for the API.",
        "x-ms-examples": {
          "ApiManagementCreateApiRelease": {
            "$ref": "./examples/ApiManagementCreateApiRelease.json"
          }
        },
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiReleaseContract"
            },
            "description": "Create parameters."
          }
        ],
        "responses": {
          "201": {
            "description": "Release was successfully created.",
            "schema": {
              "$ref": "#/definitions/ApiReleaseContract"
            }
          },
          "200": {
            "description": "Release was successfully updated.",
            "schema": {
              "$ref": "#/definitions/ApiReleaseContract"
            }
          },
          "default": {
            "description": "Error response describing why the release failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Releases"
        ],
        "operationId": "ApiRelease_Update",
        "description": "Updates the details of the release of the API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementUpdateApiRelease": {
            "$ref": "./examples/ApiManagementUpdateApiRelease.json"
          }
        },
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiReleaseContract"
            },
            "description": "API Release Update parameters."
          },
          {
            "$ref": "#/parameters/IfMatch"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successfully updated."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Releases"
        ],
        "operationId": "ApiRelease_Delete",
        "description": "Deletes the specified release in the API.",
        "x-ms-examples": {
          "ApiManagementDeleteApiRelease": {
            "$ref": "./examples/ApiManagementDeleteApiRelease.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/IfMatch"
          }
        ],
        "responses": {
          "204": {
            "description": "The release was successfully deleted."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "operationId": "ApiOperation_ListByApi",
        "description": "Lists a collection of the operations for the specified API.",
        "x-ms-examples": {
          "ApiManagementListApiOperations": {
            "$ref": "./examples/ApiManagementListApiOperations.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n| name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| method      | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| urlTemplate | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of operation summary entities at the API level.",
            "schema": {
              "$ref": "#/definitions/OperationCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/OperationContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}": {
      "head": {
        "tags": [
          "Operations"
        ],
        "operationId": "ApiOperation_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the API operation specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiOperation": {
            "$ref": "./examples/ApiManagementHeadApiOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified API operation entity exists and current entity state version is present in the ETag header.",
            "headers": {
               "ETag": {
                 "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                 "type": "string"
               }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
	  "get": {
        "tags": [
          "Operations"
        ],
        "operationId": "ApiOperation_Get",
        "description": "Gets the details of the API Operation specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementGetApiOperation": {
            "$ref": "./examples/ApiManagementGetApiOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Operation entity.",
            "schema": {
              "$ref": "#/definitions/OperationContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Operations"
        ],
        "operationId": "ApiOperation_CreateOrUpdate",
        "description": "Creates a new operation in the API or updates an existing one.",
        "x-ms-examples": {
          "ApiManagementCreateApiOperation": {
            "$ref": "./examples/ApiManagementCreateApiOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "#/parameters/OperationIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationContract"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Operation was successfully created.",
            "schema": {
              "$ref": "#/definitions/OperationContract"
            }
          },
          "200": {
            "description": "Operation was successfully updated.",
            "schema": {
              "$ref": "#/definitions/OperationContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Operations"
        ],
        "operationId": "ApiOperation_Update",
        "description": "Updates the details of the operation in the API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementUpdateApiOperation": {
            "$ref": "./examples/ApiManagementUpdateApiOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "#/parameters/OperationIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationUpdateContract"
            },
            "description": "API Operation Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the API Operation Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successfully updated."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Operations"
        ],
        "operationId": "ApiOperation_Delete",
        "description": "Deletes the specified operation in the API.",
        "x-ms-examples": {
          "ApiManagementDeleteApiOperation": {
            "$ref": "./examples/ApiManagementDeleteApiOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "#/parameters/OperationIdParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the API Operation Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successfully deleted."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies": {
      "get": {
        "tags": [
          "ApiOperationPolicies"
        ],
        "operationId": "ApiOperationPolicy_ListByOperation",
        "description": "Get the list of policy configuration at the API Operation level.",
        "x-ms-examples": {
          "ApiManagementListApiOperationPolicies": {
            "$ref": "./examples/ApiManagementListApiOperationPolicies.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Api Operations Policy Collection.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies/{policyId}": {
      "head": {
        "tags": [
          "ApiOperationPolicies"
        ],
        "operationId": "ApiOperationPolicy_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the API operation policy specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiOperationPolicy": {
            "$ref": "./examples/ApiManagementHeadApiOperationPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified API operation policy entity exists and current entity state version is present in the ETag header.",
            "headers": {
               "ETag": {
                 "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                 "type": "string"
               }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
	  "get": {
        "tags": [
          "ApiOperationPolicies"
        ],
        "operationId": "ApiOperationPolicy_Get",
        "description": "Get the policy configuration at the API Operation level.",
        "x-ms-examples": {
          "ApiManagementGetApiOperationPolicy": {
            "$ref": "./examples/ApiManagementGetApiOperationPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Api Operation Policy information.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiOperationPolicies"
        ],
        "operationId": "ApiOperationPolicy_CreateOrUpdate",
        "description": "Creates or updates policy configuration for the API Operation level.",
        "x-ms-examples": {
          "ApiManagementCreateApiOperationPolicy": {
            "$ref": "./examples/ApiManagementCreateApiOperationPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            },
            "required": true,
            "description": "The policy contents to apply."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state (Etag) version of the Api Operation policy to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Api Operation policy configuration was successfully created.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            }
          },
          "200": {
            "description": "Api Operation policy configuration of the tenant was successfully updated.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiOperationPolicies"
        ],
        "operationId": "ApiOperationPolicy_Delete",
        "description": "Deletes the policy configuration at the Api Operation.",
        "x-ms-examples": {
          "ApiManagementDeleteOperationPolicy": {
            "$ref": "./examples/ApiManagementDeleteOperationPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/OperationIdParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state (Etag) version of the Api Operation Policy to delete. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the policy configuration at the API Operation level."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/products": {
      "get": {
        "tags": [
          "ApiProduct"
        ],
        "operationId": "ApiProduct_ListByApis",
        "description": "Lists all Products, which the API is part of.",
        "x-ms-examples": {
          "ApiManagementGetProductsForApi": {
            "$ref": "./examples/ApiManagementGetProductsForApi.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field | Supported operators    | Supported functions                         |\n|-------|------------------------|---------------------------------------------|\n| name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns a collection of products which have the Api entity.",
            "schema": {
              "$ref": "./apimproducts.json#/definitions/ProductCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./apimproducts.json#/definitions/ProductContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies": {
      "get": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_ListByApi",
        "description": "Get the policy configuration at the API level.",
        "x-ms-examples": {
          "ApiManagementListApiPolicies": {
            "$ref": "./examples/ApiManagementListApiPolicies.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Apis Policy Collection.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyCollection"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}": {
      "head": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the API policy specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiPolicy": {
            "$ref": "./examples/ApiManagementHeadApiPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified API Policy entity exists and current entity state version is present in the ETag header.",
            "headers": {
               "ETag": {
                 "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                 "type": "string"
               }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
	  "get": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_Get",
        "description": "Get the policy configuration at the API level.",
        "x-ms-examples": {
          "ApiManagementGetApiPolicy": {
            "$ref": "./examples/ApiManagementGetApiPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Api Policy information.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_CreateOrUpdate",
        "description": "Creates or updates policy configuration for the API.",
        "x-ms-examples": {
          "ApiManagementCreateApiPolicy": {
            "$ref": "./examples/ApiManagementCreateApiPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            },
            "required": true,
            "description": "The policy contents to apply."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state (Etag) version of the Api Policy to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Api policy configuration was successfully created.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            }
          },
          "200": {
            "description": "Api policy configuration of the tenant was successfully updated.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_Delete",
        "description": "Deletes the policy configuration at the Api.",
        "x-ms-examples": {
          "ApiManagementDeleteApiPolicy": {
            "$ref": "./examples/ApiManagementDeleteApiPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state (Etag) version of the Api policy to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the policy configuration at the API level."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas": {
      "get": {
        "tags": [
          "ApiSchema"
        ],
        "operationId": "ApiSchema_ListByApi",
        "description": "Get the schema configuration at the API level.",
        "x-ms-examples": {
          "ApiManagementListApiSchemas": {
            "$ref": "./examples/ApiManagementListApiSchemas.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Apis Schema Collection.",
            "schema": {
              "$ref": "#/definitions/SchemaCollection"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}": {
      "head": {
        "tags": [
          "ApiSchema"
        ],
        "operationId": "ApiSchema_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the schema specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiSchema": {
            "$ref": "./examples/ApiManagementHeadApiSchema.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/SchemaIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified schema entity exists and current entity state version is present in the ETag header.",
            "headers": {
               "ETag": {
                 "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                 "type": "string"
               }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
	  "get": {
        "tags": [
          "ApiSchema"
        ],
        "operationId": "ApiSchema_Get",
        "description": "Get the schema configuration at the API level.",
        "x-ms-examples": {
          "ApiManagementGetApiSchema": {
            "$ref": "./examples/ApiManagementGetApiSchema.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/SchemaIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Api Schema information.",
            "schema": {
              "$ref": "#/definitions/SchemaContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiSchema"
        ],
        "operationId": "ApiSchema_CreateOrUpdate",
        "description": "Creates or updates schema configuration for the API.",
        "x-ms-examples": {
          "ApiManagementCreateApiSchema": {
            "$ref": "./examples/ApiManagementCreateApiSchema.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/SchemaIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SchemaContract"
            },
            "required": true,
            "description": "The schema contents to apply."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "description": "The entity state (Etag) version of the Api Schema to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Api schema configuration was successfully created.",
            "schema": {
              "$ref": "#/definitions/SchemaContract"
            }
          },
          "200": {
            "description": "Api schema configuration of the tenant was successfully updated.",
            "schema": {
              "$ref": "#/definitions/SchemaContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiSchema"
        ],
        "operationId": "ApiSchema_Delete",
        "description": "Deletes the schema configuration at the Api.",
        "x-ms-examples": {
          "ApiManagementDeleteApiSchema": {
            "$ref": "./examples/ApiManagementDeleteApiSchema.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/SchemaIdParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state (Etag) version of the Api schema to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the schema configuration at the API level."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}?export=true": {
      "get": {
        "tags": [
          "Apis"
        ],
        "operationId": "ApiExport_Get",
        "description": "Gets the details of the API specified by its identifier in the format specified to the Storage Blob with SAS Key valid for 5 minutes.",
        "x-ms-examples": {
          "ApiManagementGetApiExportInOpenApi2dot0": {
            "$ref": "./examples/ApiManagementGetApiExportInOpenApi2dot0.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "enum": [
              "application/vnd.swagger.link+json",
              "application/vnd.sun.wadl.link+json",
              "application/vnd.ms.wsdl.link+xml"
            ],
            "x-ms-enum": {
              "name": "ExportFormat",
              "modelAsString": true,
              "values": [
                {
                  "value": "application/vnd.swagger.link+json",
                  "description": "Export the Api Definition in OpenApi Specification 2.0 format to the Storage Blob.",
                  "name": "OpenApi2"
                },
                {
                  "value": "application/vnd.ms.wsdl.link+xml",
                  "description": "Export the Api Definition in WSDL Schema to Storage Blob.",
                  "name": "Wsdl"
                },
                {
                  "value": "application/vnd.sun.wadl.link+json",
                  "description": "Export the Api Definition in WADL Schema to Storage Blob.",
                  "name": "Wadl"
                }
              ]
            },
            "description": "Format in which to export the Api Details to the Storage Blob with Sas Key valid for 5 minutes."
          },
          {
            "name": "export",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "true"
            ],
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ExportApi"
            },
            "description": "Query parameter required to export the API details."
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response contains a stream with a full set of API metadata and includes API entity with an embedded array of operation entities.",
            "schema": {
              "$ref": "#/definitions/ApiExportResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiExportResult": {
      "properties": {
        "link": {
          "type": "string",
          "description": "Link to the Storage Blob containing the result of the export operation. The Blob Uri is only valid for 5 minutes."
        }
      },
      "description": "API Export result Blob Uri."
    },
    "ApiCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Api list representation."
    },
    "ApiContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiContractProperties",
          "description": "Api entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "API details."
    },
    "ApiCreateOrUpdateParameter": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiCreateOrUpdateProperties",
          "description": "Api entity create of update properties."
        }
      },
      "description": "API Create or Update Parameters."
    },
    "ApiCreateOrUpdateProperties": {
      "properties": {
        "contentValue": {
          "type": "string",
          "description": "Content value when Importing an API."
        },
        "contentFormat": {
          "type": "string",
          "description": "Format of the Content in which the API is getting imported.",
          "enum": [
            "wadl-xml",
            "wadl-link-json",
            "swagger-json",
            "swagger-link-json",
            "wsdl",
            "wsdl-link"
          ],
          "x-ms-enum": {
            "name": "ContentFormat",
            "modelAsString": true,
            "values": [
              {
                "value": "wadl-xml",
                "description": "The contents are inline and Content type is a WADL document."
              },
              {
                "value": "wadl-link-json",
                "description": "The WADL document is hosted on a publicly accessible internet address."
              },
              {
                "value": "swagger-json",
                "description": "The contents are inline and Content Type is a OpenApi 2.0 Document."
              },
              {
                "value": "swagger-link-json",
                "description": "The Open Api 2.0 document is hosted on a publicly accessible internet address."
              },
              {
                "value": "wsdl",
                "description": "The contents are inline and the document is a WSDL/Soap document."
              },
              {
                "value": "wsdl-link",
                "description": "The WSDL document is hosted on a publicly accessible internet address."
              }
            ]
          }
        },
        "wsdlSelector": {
          "description": "Criteria to limit import of WSDL to a subset of the document.",
          "properties": {
            "wsdlServiceName": {
              "type": "string",
              "description": "Name of service to import from WSDL"
            },
            "wsdlEndpointName": {
              "type": "string",
              "description": "Name of endpoint(port) to import from WSDL"
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiContractProperties"
        }
      ],
      "description": "Api Create or Update Properties."
    },
    "ApiContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        },
        "apiVersionSet" : {
          "$ref" : "#/definitions/ApiVersionSetContract"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "required": [
        "path"
      ],
      "description": "Api Entity Properties"
    },
    "ApiUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiContractUpdateProperties",
          "description": "Properties of the API entity that can be updated."
        }
      },
      "description": "API update contract details."
    },
    "ApiContractUpdateProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "description": "API update contract properties."
    },
    "ApiEntityBaseContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the API. May include HTML formatting tags."
        },
        "authenticationSettings": {
          "$ref": "#/definitions/AuthenticationSettingsContract",
          "description": "Collection of authentication settings included into this API."
        },
        "subscriptionKeyParameterNames": {
          "$ref": "#/definitions/SubscriptionKeyParameterNamesContract",
          "description": "Protocols over which API is made available."
        },
        "type": {
          "type": "string",
          "description": "Type of API.",
          "enum": [
            "http",
            "soap"
          ],
          "x-ms-client-name": "ApiType",
          "x-ms-enum": {
            "name": "ApiType",
            "modelAsString": true
          }
        },
        "apiRevision": {
          "type": "string",
          "description": "Describes the Revision of the Api. If no value is provided, default revision 1 is created",
          "minLength": 1,
          "maxLength": 100
        },
        "apiVersion": {
          "type": "string",
          "description": "Indicates the Version identifier of the API if the API is versioned",
          "maxLength": 100
        },
        "isCurrent": {
          "type": "boolean",
          "description": "Indicates if API revision is current api revision.",
          "readOnly": true
        },
        "isOnline": {
          "type": "boolean",
          "description": "Indicates if API revision is accessible via the gateway.",
          "readOnly": true
        },
        "apiVersionSetId": {
          "type": "string",
          "description": "A resource identifier for the related ApiVersionSet."
        }
      },
      "description": "API base contract details."
    },
    "ApiRevisionCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiRevisionContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Api Revision list representation."
    },
    "ApiRevisionContract": {
      "properties": {
        "apiId": {
          "type":"string",
          "readOnly": true,
          "description": "Identifier of the API Revision."
        },
        "apiRevision": {
          "type":"string",
          "minLength": 1,
          "maxLength": 100,          
          "readOnly": true,
          "description": "Revision number of API."
        },
        "createdDateTime": {
          "type":"string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API Revision was created. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard."
        },
        "updatedDateTime": {
          "type":"string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API Revision were updated. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard."
        },
        "description": {
          "type": "string",
          "readOnly": true,
          "maxLength": 256,
          "description": "Description of the API Revision."
        },
        "privateUrl": {
          "type": "string",
          "readOnly": true,
          "description": "Gateway URL for accessing the non-current API Revision."
        },
        "isOnline": {
          "type": "boolean",
          "readOnly": true,
          "description": "Indicates if API revision is the current api revision."
        },
        "isCurrent": {
          "type": "boolean",
          "readOnly": true,
          "description": "Indicates if API revision is accessible via the gateway."
        }
      },
      "description": "Summary of revision metadata."
    },
    "ApiRevisionInfoContract" : {
        "description": "Object used to create an API Revision or Version based on an existing API Revision",
        "properties": {
          "sourceApiId": {
            "type": "string",
            "description": "Resource identifier of API to be used to create the revision from."
          },
          "apiVersionName": {
            "type": "string",
            "maxLength": 100,
            "description": "Version identifier for the new API Version."
          },
          "apiRevisionDescription": {
            "type": "string",
            "maxLength": 256,
            "description": "Description of new API Revision."
          },
          "apiVersionSet" : {
            "$ref" : "#/definitions/ApiVersionSetContract"
          }
        }
    },
    "ApiVersionSetContract" : {
      "description": "An API Version Set contains the common configuration for a set of API Versions relating ",
      "properties": {
        "id" : {
          "type": "string",
          "description": "Identifier for existing API Version Set. Omit this value to create a new Version Set."
        },
        "description": {
          "type": "string",
          "description": "Description of API Version Set."
        },
        "versioningScheme": {
          "type": "string",
          "description": "An value that determines where the API Version identifer will be located in a HTTP request.",
          "enum": [
            "Segment", "Query", "Header"
          ]
        },
        "versionQueryName": {
          "type": "string",
          "description": "Name of query parameter that indicates the API Version if versioningScheme is set to `query`."
        },
        "versionHeaderName": {
          "type": "string",
          "description": "Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`."
        }
      }
    },
    "ApiReleaseCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiReleaseContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Api Revision list representation."
    },
    "ApiReleaseContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiReleaseContractProperties",
          "description": "Properties of the Api Release Contract."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Api Release details."
    },
    "ApiReleaseContractProperties": {
      "description": "API Release details",
      "properties": {
        "apiId": {
          "type": "string",
          "description": "Identifier of the API the release belongs to."
        },
        "createdDate": {
          "type":"string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API was released. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard."        
        },
        "updatedDate": {
          "type":"string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API release was updated."
        },
        "notes": {
          "type": "string",
          "description": "Release Notes"
        }
      }
    },
    "AuthenticationSettingsContract": {
      "properties": {
        "oAuth2": {
          "$ref": "#/definitions/OAuth2AuthenticationSettingsContract",
          "description": "OAuth2 Authentication settings"
        }
      },
      "description": "API Authentication Settings."
    },
    "OAuth2AuthenticationSettingsContract": {
      "properties": {
        "authorizationServerId": {
          "type": "string",
          "description": "OAuth authorization server identifier."
        },
        "scope": {
          "type": "string",
          "description": "operations scope."
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "OperationCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Operation list representation."
    },
    "OperationContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/OperationContractProperties",
          "description": "Properties of the Operation Contract."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Api Operation details."
    },
    "OperationContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Operation Name.",
          "minLength": 1,
          "maxLength": 300
        },
        "method": {
          "type": "string",
          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
          "externalDocs": {
            "description": "As defined by RFC.",
            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
          }
        },
        "urlTemplate": {
          "type": "string",
          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
          "minLength": 1,
          "maxLength": 1000
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OperationEntityBaseContract"
        }
      ],
      "required": [
        "displayName",
        "method",
        "urlTemplate"
      ],
      "description": "Operation Contract Properties"
    },
    "OperationUpdateContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Operation Name.",
          "minLength": 1,
          "maxLength": 300
        },
        "method": {
          "type": "string",
          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
          "externalDocs": {
            "description": "As defined by RFC.",
            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
          }
        },
        "urlTemplate": {
          "type": "string",
          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
          "minLength": 1,
          "maxLength": 1000
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OperationEntityBaseContract"
        }
      ],
      "description": "Operation Update Contract Properties."
    },
    "OperationEntityBaseContract": {
      "properties": {
        "templateParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of URL template parameters."
        },
        "description": {
          "type": "string",
          "description": "Description of the operation. May include HTML formatting tags.",
          "maxLength": 1000
        },
        "request": {
          "$ref": "#/definitions/RequestContract",
          "description": "An entity containing request details."
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseContract"
          },
          "description": "Array of Operation responses."
        },
        "policies": {
          "type": "string",
          "description": "Operation Policies"
        }
      },
      "description": "Api Operation Entity Base Contract details."
    },
    "OperationUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/OperationUpdateContractProperties",
          "description": "Properties of the API Operation entity that can be updated."
        }
      },
      "description": "Api Operation Update Contract details."
    },
    "ParameterContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Parameter name."
        },
        "description": {
          "type": "string",
          "description": "Parameter description."
        },
        "type": {
          "type": "string",
          "description": "Parameter type."
        },
        "defaultValue": {
          "type": "string",
          "description": "Default parameter value."
        },
        "required": {
          "type": "boolean",
          "description": "whether parameter is required or not."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parameter values."
        }
      },
      "required": [
        "name",
        "type"
      ],
      "description": "Operation parameters details."
    },
    "RepresentationContract": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Specifies a registered or custom content type for this representation, e.g. application/xml."
        },
        "sample": {
          "type": "string",
          "description": "An example of the representation."
        },
        "schemaId": {
          "type": "string",
          "description": "Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'."
        },
        "typeName": {
          "type": "string",
          "description": "Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'."
        },
        "formParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'.."
        }
      },
      "required": [
        "contentType"
      ],
      "description": "Operation request/response representation details."
    },
    "RequestContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Operation request description."
        },
        "queryParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation request query parameters."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation request headers."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Collection of operation request representations."
        }
      },
      "description": "Operation request details."
    },
    "ResponseContract": {
      "properties": {
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Operation response HTTP status code."
        },
        "description": {
          "type": "string",
          "description": "Operation response description."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Collection of operation response representations."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation response headers."
        }
      },
      "required": [
        "statusCode"
      ],
      "description": "Operation response details."
    },
    "SubscriptionKeyParameterNamesContract": {
      "properties": {
        "header": {
          "type": "string",
          "description": "Subscription key header name."
        },
        "query": {
          "type": "string",
          "description": "Subscription key query string parameter name."
        }
      },
      "description": "Subscription key parameter names details.",
      "example": {
        "subscriptionKeyParameterNames": {
          "query": "customQueryParameterName",
          "header": "customHeaderParameterName"
        }
      }
    },
    "SchemaCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemaContract"
          },
          "description": "Api Schema Contract value."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "The response of the list schema operation."
    },
    "SchemaContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SchemaContractProperties",
          "description": "Properties of the Schema."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Schema Contract details."
    },
    "SchemaContractProperties": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media type of the schema document (e.g. application/json, application/xml)."
        },
        "document": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SchemaDocumentProperties",
          "description": "Properties of the Schema Document."
        }
      },
      "required": [
        "contentType"
      ],
      "description": "Schema contract Properties."
    },
    "SchemaDocumentProperties": {
      "properties": {
        "value": {
          "type": "string",
          "description": "Json escaped string defining the document representing the Schema."
        }
      },
      "description": "Schema Document Properties."
    }
  },
  "parameters": {
    "ApiIdParameter": {
      "name": "apiId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "API identifier. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    },
    "ApiIdRevParameter": {
      "name": "apiId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    },
    "OperationIdParameter": {
      "name": "operationId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Operation identifier within an API. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    },
    "IfMatch": {
      "name": "If-Match",
      "in": "header",
      "required": true,
      "description": "ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.",
      "type": "string"
    },
    "SchemaIdParameter": {
      "name": "schemaId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Schema identifier within an API. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    }
  }
}
