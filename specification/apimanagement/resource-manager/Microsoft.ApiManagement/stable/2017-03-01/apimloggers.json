{
  "swagger": "2.0",
  "info": {
    "title": "ApiManagementClient",
    "description": "Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.",
    "version": "2017-03-01"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers": {
      "get": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Logger_ListByService",
        "description": "Lists a collection of loggers in the specified service instance.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-log-event-hubs"
        },
        "x-ms-examples": {
          "ApiManagementListLoggers": {
            "$ref": "./examples/ApiManagementListLoggers.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field | Supported operators    | Supported functions                         |\n|-------|------------------------|---------------------------------------------|\n| id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| type  | eq                     |                                             |"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists a collection of Logger entities.",
            "schema": {
              "$ref": "#/definitions/LoggerCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/LoggerContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers/{loggerid}": {
      "head": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Logger_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the logger specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadLogger": {
            "$ref": "./examples/ApiManagementHeadLogger.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/LoggerIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified logger entity exists and current entity state version is present in the ETag header.",
            "headers": {
               "ETag": {
                 "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                 "type": "string"
               }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
	  "get": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Logger_Get",
        "description": "Gets the details of the logger specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementGetLogger": {
            "$ref": "./examples/ApiManagementGetLogger.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/LoggerIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Logger entity.",
            "schema": {
              "$ref": "#/definitions/LoggerContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Logger_CreateOrUpdate",
        "description": "Creates or Updates a logger.",
        "x-ms-examples": {
          "ApiManagementCreateEHLogger": {
            "$ref": "./examples/ApiManagementCreateEHLogger.json"
          },
          "ApiManagementCreateAILogger": {
            "$ref": "./examples/ApiManagementCreateAILogger.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/LoggerIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoggerContract"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Logger was successfully created.",
            "schema": {
              "$ref": "#/definitions/LoggerContract"
            }
          },
          "200": {
            "description": "The existing logger was successfully updated.",
            "schema": {
              "$ref": "#/definitions/LoggerContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Logger_Update",
        "description": "Updates an existing logger.",
        "x-ms-examples": {
          "ApiManagementUpdateLogger": {
            "$ref": "./examples/ApiManagementUpdateLogger.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/LoggerIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoggerUpdateContract"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state (Etag) version of the logger to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The existing logger was successfully updated."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Logger_Delete",
        "description": "Deletes the specified logger.",
        "x-ms-examples": {
          "ApiManagementDeleteLogger": {
            "$ref": "./examples/ApiManagementDeleteLogger.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/LoggerIdParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state (Etag) version of the logger to delete. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The logger was successfully deleted."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "LoggerCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoggerContract"
          },
          "description": "Logger values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total record count number across all pages."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Logger list representation."
    },
    "LoggerContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/LoggerContractProperties",
          "description": "Logger entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Logger details."
    },
    "LoggerContractProperties": {
      "properties": {
        "loggerType": {
          "type": "string",
          "description": "Logger type.",
          "enum": [
            "azureEventHub",
            "applicationInsights"
          ],
          "x-ms-enum": {
            "name": "LoggerType",
            "modelAsString": true,
            "values": [
              {
                "value": "azureEventHub",
                "description": "Azure Event Hub as log destination."
              },
              {
                "value": "applicationInsights",
                "description": "Azure Application Insights as log destination."
              }
            ]
          }
        },
        "description": {
          "type": "string",
          "description": "Logger description.",
          "maxLength": 256
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The name and SendRule connection string of the event hub for azureEventHub logger.\nInstrumentation key for applicationInsights logger.",
          "example": {
            "name": "apim",
            "connectionString": "Endpoint=sb://contoso-ns.servicebus.windows.net/;SharedAccessKeyName=Sender;SharedAccessKey=..."
          }
        },
        "isBuffered": {
          "type": "boolean",
          "description": "Whether records are buffered in the logger before publishing. Default is assumed to be true."
        },
        "sampling" : {
          "$ref" : "#/definitions/LoggerSamplingContract",
          "description": "Sampling settings for an ApplicationInsights logger.",
          "example": {
            "sampling": {
              "samplingType": "adaptive",
              "evaluationInterval": "PT2M"
            }
          }
        }
      },
      "required": [
        "loggerType",
        "credentials"
      ],
      "description": "The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure Event Hubs."
    },
    "LoggerUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/LoggerUpdateParameters",
          "description": "Logger entity update contract properties."
        }
      },
      "description": "Logger update contract."
    },
    "LoggerUpdateParameters": {
      "properties": {
        "loggerType": {
          "type": "string",
          "description": "Logger type.",
          "enum": [
            "azureEventHub",
            "applicationInsights"
          ],
          "x-ms-enum": {
            "name": "LoggerType",
            "modelAsString": true,
            "values": [
              {
                "value": "azureEventHub",
                "description": "Azure Event Hub as log destination."
              },
              {
                "value": "applicationInsights",
                "description": "Azure Application Insights as log destination."
              }
            ]
          }
        },
        "description": {
          "type": "string",
          "description": "Logger description."
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Logger credentials."
        },
        "isBuffered": {
          "type": "boolean",
          "description": "Whether records are buffered in the logger before publishing. Default is assumed to be true."
        }
      },
      "description": "Parameters supplied to the Update Logger operation."
    },
    "LoggerSamplingContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/LoggerSamplingProperties",
          "description": "Sampling settings entity contract properties."
        }
      },
      "description": "Sampling settings contract."
    },
    "LoggerSamplingProperties": {
      "properties": {
        "samplingType": {
          "type": "string",
          "description": "Sampling type.",
          "enum": [
            "fixed",
            "adaptive"
          ],
          "x-ms-enum": {
            "name": "SamplingType",
            "modelAsString": true,
            "values": [
              {
                "value": "fixed",
                "description": "Fixed-rate sampling."
              },
              {
                "value": "adaptive",
                "description": "Sampling with a dynamically adjustable rate."
              }
            ]
          }
        },
        "percentage": {
					"type": "number",
					"format": "double",
					"description": "Rate of sampling for fixed-rate sampling."
        },
        "maxTelemetryItemsPerSecond": {
					"type": "integer",
					"format": "int32",
					"description": "Target rate of telemetry items per second."
        },
        "evaluationInterval": {
          "type": "string",
          "format": "duration",
          "description": "Rate re-evaluation interval in ISO8601 format.",
          "minLength": 1,
          "maxLength": 2000
        },
        "percentageDecreaseTimeout": {
          "type": "string",
          "format": "duration",
          "description": "Duration in ISO8601 format after which it's allowed to lower the sampling rate.",
          "minLength": 1,
          "maxLength": 2000
        },
        "percentageIncreaseTimeout": {
          "type": "string",
          "format": "duration",
          "description": "Duration in ISO8601 format after which it's allowed to increase the sampling rate.",
          "minLength": 1,
          "maxLength": 2000
        },
        "minPercentage": {
					"type": "number",
					"format": "double",
					"description": "Minimum allowed rate of sampling."
        },
        "maxPercentage": {
					"type": "number",
					"format": "double",
					"description": "Maximum allowed rate of sampling."
        },
        "movingAverageRatio": {
					"type": "number",
					"format": "double",
					"description": "Moving average ration assigned to most recent value."
        },
        "initialPercentage": {
					"type": "number",
					"format": "double",
					"description": "Initial sampling rate."
        }
      },
      "description": "Sampling settings for an ApplicationInsights logger."
    }
  },
  "parameters": {
    "LoggerIdParameter": {
      "name": "loggerid",
      "in": "path",
      "required": true,
      "type": "string",
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "description": "Logger identifier. Must be unique in the API Management service instance.",
      "x-ms-parameter-location": "method"
    }
  }
}