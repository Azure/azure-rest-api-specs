{
  "swagger": "2.0",
  "info": {
    "title": "ApiManagementClient",
    "description": "Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.",
    "version": "2018-06-01-preview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis": {
      "get": {
        "tags": [
          "Api"
        ],
        "operationId": "Api_ListByService",
        "description": "Lists all APIs of the API Management service instance.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-create-apis"
        },
        "x-ms-examples": {
          "ApiManagementListApis": {
            "$ref": "./examples/ApiManagementListApis.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|serviceUrl | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|path | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Include tags in the response."
          },
          {
            "name": "expandApiVersionSet",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include full ApiVersionSet resource in response"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged Result response of Apis.",
            "schema": {
              "$ref": "#/definitions/ApiCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}": {
      "head": {
        "tags": [
          "Api"
        ],
        "operationId": "Api_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApi": {
            "$ref": "./examples/ApiManagementHeadApi.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified API entity exists and current entity state version is present in the ETag header.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Api"
        ],
        "operationId": "Api_Get",
        "description": "Gets the details of the API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementGetApiContract": {
            "$ref": "./examples/ApiManagementGetApiContract.json"
          },
          "ApiManagementGetApiRevisionContract": {
            "$ref": "./examples/ApiManagementGetApiRevision.json"
          }
        },
        "produces": [
          "application/json",
          "application/vnd.sun.wadl+xml",
          "application/vnd.swagger.doc+json",
          "application/wsdl+xml",
          "application/vnd.oai.openapi",
          "application/vnd.oai.openapi+json"
        ],
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified API entity.",
            "schema": {
              "$ref": "#/definitions/ApiContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Api"
        ],
        "operationId": "Api_CreateOrUpdate",
        "description": "Creates new or updates existing specified API of the API Management service instance.",
        "x-ms-examples": {
          "ApiManagementCreateApiUsingOai3Import": {
            "$ref": "./examples/ApiManagementCreateApiUsingOai3Import.json"
          },
          "ApiManagementCreateApiUsingSwaggerImport": {
            "$ref": "./examples/ApiManagementCreateApiUsingSwaggerImport.json"
          },
          "ApiManagementCreateApiUsingWadlImport": {
            "$ref": "./examples/ApiManagementCreateApiUsingWadlImport.json"
          },
          "ApiManagementCreateSoapToRestApiUsingWsdlImport": {
            "$ref": "./examples/ApiManagementCreateSoapToRestApiUsingWsdlImport.json"
          },
          "ApiManagementCreateSoapPassThroughApiUsingWsdlImport": {
            "$ref": "./examples/ApiManagementCreateSoapPassThroughApiUsingWsdlImport.json"
          },
          "ApiManagementCreateApi": {
            "$ref": "./examples/ApiManagementCreateApi.json"
          },
          "ApiManagementCreateApiRevision": {
            "$ref": "./examples/ApiManagementCreateApiRevision.json"
          },
          "ApiManagementCreateApiWithOpenIdConnect": {
            "$ref": "./examples/ApiManagementCreateApiWithOpenIdConnect.json"
          }
        },
        "consumes": [
          "application/json",
          "application/vnd.sun.wadl+xml",
          "application/vnd.swagger.doc+json",
          "application/wsdl+xml",
          "application/vnd.oai.openapi",
          "application/vnd.oai.openapi+json"
        ],
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiCreateOrUpdateParameter"
            },
            "description": "Create or update parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "API was successfully created.",
            "schema": {
              "$ref": "#/definitions/ApiContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "202": {
            "description": "Request to create or update API was accepted."
          },
          "200": {
            "description": "API was successfully updated.",
            "schema": {
              "$ref": "#/definitions/ApiContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "Api"
        ],
        "operationId": "Api_Update",
        "description": "Updates the specified API of the API Management service instance.",
        "x-ms-examples": {
          "ApiManagementUpdateApi": {
            "$ref": "./examples/ApiManagementUpdateApi.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiUpdateContract"
            },
            "description": "API Update Contract parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The API was successfully updated."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Api"
        ],
        "operationId": "Api_Delete",
        "description": "Deletes the specified API of the API Management service instance.",
        "x-ms-examples": {
          "ApiManagementDeleteApi": {
            "$ref": "./examples/ApiManagementDeleteApi.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "name": "deleteRevisions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Delete all revisions of the Api."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The API was successfully deleted."
          },
          "204": {
            "description": "The API was successfully deleted."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/revisions": {
      "get": {
        "tags": [
          "ApiRevision"
        ],
        "operationId": "ApiRevisions_List",
        "description": "Lists all revisions of an API.",
        "x-ms-examples": {
          "ApiManagementListApiRevisions": {
            "$ref": "./examples/ApiManagementListApiRevisions.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns a list of revision details.",
            "schema": {
              "$ref": "#/definitions/ApiRevisionCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiRevisionContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases": {
      "get": {
        "tags": [
          "ApiRelease"
        ],
        "operationId": "ApiRelease_List",
        "description": "Lists all releases of an API. An API release is created when making an API Revision current. Releases are also used to rollback to previous revisions. Results will be paged and can be constrained by the $top and $skip parameters.",
        "x-ms-examples": {
          "ApiManagementListApiReleases": {
            "$ref": "./examples/ApiManagementListApiReleases.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|notes | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns a list of API Releases.",
            "schema": {
              "$ref": "#/definitions/ApiReleaseCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiReleaseContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}": {
      "head": {
        "tags": [
          "ApiRelease"
        ],
        "operationId": "ApiRelease_GetEntityTag",
        "description": "Returns the etag of an API release.",
        "x-ms-examples": {
          "ApiManagementHeadApiRelease": {
            "$ref": "./examples/ApiManagementHeadApiRelease.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ReleaseIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the entity state (Etag) version of the api release as specified by its identifier.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiRelease"
        ],
        "operationId": "ApiRelease_Get",
        "description": "Returns the details of an API release.",
        "x-ms-examples": {
          "ApiManagementGetApiRelease": {
            "$ref": "./examples/ApiManagementGetApiRelease.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ReleaseIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns the details of an API Release.",
            "schema": {
              "$ref": "#/definitions/ApiReleaseContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiRelease"
        ],
        "operationId": "ApiRelease_Create",
        "description": "Creates a new Release for the API.",
        "x-ms-examples": {
          "ApiManagementCreateApiRelease": {
            "$ref": "./examples/ApiManagementCreateApiRelease.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ReleaseIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiReleaseContract"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Release was successfully created.",
            "schema": {
              "$ref": "#/definitions/ApiReleaseContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Release was successfully updated.",
            "schema": {
              "$ref": "#/definitions/ApiReleaseContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ApiRelease"
        ],
        "operationId": "ApiRelease_Update",
        "description": "Updates the details of the release of the API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementUpdateApiRelease": {
            "$ref": "./examples/ApiManagementUpdateApiRelease.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ReleaseIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiReleaseContract"
            },
            "description": "API Release Update parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Release successfully updated"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiRelease"
        ],
        "operationId": "ApiRelease_Delete",
        "description": "Deletes the specified release in the API.",
        "x-ms-examples": {
          "ApiManagementDeleteApiRelease": {
            "$ref": "./examples/ApiManagementDeleteApiRelease.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ReleaseIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "API release successfully removed"
          },
          "204": {
            "description": "API release successfully removed by previous request or does not exist"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations": {
      "get": {
        "tags": [
          "ApiOperation"
        ],
        "operationId": "ApiOperation_ListByApi",
        "description": "Lists a collection of the operations for the specified API.",
        "x-ms-examples": {
          "ApiManagementListApiOperations": {
            "$ref": "./examples/ApiManagementListApiOperations.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|method | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|urlTemplate | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of operation summary entities at the API level.",
            "schema": {
              "$ref": "#/definitions/OperationCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/OperationContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}": {
      "head": {
        "tags": [
          "ApiOperation"
        ],
        "operationId": "ApiOperation_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the API operation specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiOperation": {
            "$ref": "./examples/ApiManagementHeadApiOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified API operation entity exists and current entity state version is present in the ETag header.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiOperation"
        ],
        "operationId": "ApiOperation_Get",
        "description": "Gets the details of the API Operation specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementGetApiOperation": {
            "$ref": "./examples/ApiManagementGetApiOperation.json"
          },
          "ApiManagementGetApiOperationPetStore": {
            "$ref": "./examples/ApiManagementGetApiOperationPetStore.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Operation entity.",
            "schema": {
              "$ref": "#/definitions/OperationContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiOperation"
        ],
        "operationId": "ApiOperation_CreateOrUpdate",
        "description": "Creates a new operation in the API or updates an existing one.",
        "x-ms-examples": {
          "ApiManagementCreateApiOperation": {
            "$ref": "./examples/ApiManagementCreateApiOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationContract"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Operation was successfully created.",
            "schema": {
              "$ref": "#/definitions/OperationContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Operation was successfully updated.",
            "schema": {
              "$ref": "#/definitions/OperationContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ApiOperation"
        ],
        "operationId": "ApiOperation_Update",
        "description": "Updates the details of the operation in the API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementUpdateApiOperation": {
            "$ref": "./examples/ApiManagementUpdateApiOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationUpdateContract"
            },
            "description": "API Operation Update parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successfully updated."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiOperation"
        ],
        "operationId": "ApiOperation_Delete",
        "description": "Deletes the specified operation in the API.",
        "x-ms-examples": {
          "ApiManagementDeleteApiOperation": {
            "$ref": "./examples/ApiManagementDeleteApiOperation.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "API operation successfully removed"
          },
          "204": {
            "description": "API operation successfully removed by previous request or does not exist"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies": {
      "get": {
        "tags": [
          "ApiOperationPolicy"
        ],
        "operationId": "ApiOperationPolicy_ListByOperation",
        "description": "Get the list of policy configuration at the API Operation level.",
        "x-ms-examples": {
          "ApiManagementListApiOperationPolicies": {
            "$ref": "./examples/ApiManagementListApiOperationPolicies.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Api Operations Policy Collection.",
            "schema": {
              "$ref": "./apimpolicies.json#/definitions/PolicyCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies/{policyId}": {
      "head": {
        "tags": [
          "ApiOperationPolicy"
        ],
        "operationId": "ApiOperationPolicy_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the API operation policy specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiOperationPolicy": {
            "$ref": "./examples/ApiManagementHeadApiOperationPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified API operation policy entity exists and current entity state version is present in the ETag header.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiOperationPolicy"
        ],
        "operationId": "ApiOperationPolicy_Get",
        "description": "Get the policy configuration at the API Operation level.",
        "x-ms-examples": {
          "ApiManagementGetApiOperationPolicy": {
            "$ref": "./examples/ApiManagementGetApiOperationPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Api Operation Policy information.",
            "schema": {
              "$ref": "./apimpolicies.json#/definitions/PolicyContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiOperationPolicy"
        ],
        "operationId": "ApiOperationPolicy_CreateOrUpdate",
        "description": "Creates or updates policy configuration for the API Operation level.",
        "x-ms-examples": {
          "ApiManagementCreateApiOperationPolicy": {
            "$ref": "./examples/ApiManagementCreateApiOperationPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./apimpolicies.json#/definitions/PolicyContract"
            },
            "description": "The policy contents to apply."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Api Operation policy configuration was successfully created.",
            "schema": {
              "$ref": "./apimpolicies.json#/definitions/PolicyContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Api Operation policy configuration of the tenant was successfully updated.",
            "schema": {
              "$ref": "./apimpolicies.json#/definitions/PolicyContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiOperationPolicy"
        ],
        "operationId": "ApiOperationPolicy_Delete",
        "description": "Deletes the policy configuration at the Api Operation.",
        "x-ms-examples": {
          "ApiManagementDeleteApiOperationPolicy": {
            "$ref": "./examples/ApiManagementDeleteApiOperationPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Policy successfully removed"
          },
          "204": {
            "description": "Policy successfully removed by previous request or does not exist"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags": {
      "get": {
        "tags": [
          "ApiOperationTag"
        ],
        "operationId": "Tag_ListByOperation",
        "description": "Lists all Tags associated with the Operation.",
        "x-ms-examples": {
          "ApiManagementListApiOperationTags": {
            "$ref": "./examples/ApiManagementListApiOperationTags.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns a collection of tags associated with the Operation entity.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./apimtags.json#/definitions/TagContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}": {
      "head": {
        "tags": [
          "ApiOperationTag"
        ],
        "operationId": "Tag_GetEntityStateByOperation",
        "description": "Gets the entity state version of the tag specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiOperationTag": {
            "$ref": "./examples/ApiManagementHeadApiOperationTag.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Empty response body, ETag header entity state version.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiOperationTag"
        ],
        "operationId": "Tag_GetByOperation",
        "description": "Get tag associated with the Operation.",
        "x-ms-examples": {
          "ApiManagementGetApiOperationTag": {
            "$ref": "./examples/ApiManagementGetApiOperationTag.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the details of the tag specified by its identifier.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiOperationTag"
        ],
        "operationId": "Tag_AssignToOperation",
        "description": "Assign tag to the Operation.",
        "x-ms-examples": {
          "ApiManagementCreateApiOperationTag": {
            "$ref": "./examples/ApiManagementCreateApiOperationTag.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Tag was assigned to the Operation.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagContract"
            }
          },
          "200": {
            "description": "Tag is already assigned to the Operation.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiOperationTag"
        ],
        "operationId": "Tag_DetachFromOperation",
        "description": "Detach the tag from the Operation.",
        "x-ms-examples": {
          "ApiManagementDeleteApiOperationTag": {
            "$ref": "./examples/ApiManagementDeleteApiOperationTag.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/OperationIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag was successfully removed from Operation"
          },
          "204": {
            "description": "Tag successfully removed by previous request or does not exist in Operation"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/products": {
      "get": {
        "tags": [
          "ApiProduct"
        ],
        "operationId": "ApiProduct_ListByApis",
        "description": "Lists all Products, which the API is part of.",
        "x-ms-examples": {
          "ApiManagementListApiProducts": {
            "$ref": "./examples/ApiManagementListApiProducts.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns a collection of products which have the Api entity.",
            "schema": {
              "$ref": "./apimproducts.json#/definitions/ProductCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./apimproducts.json#/definitions/ProductContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies": {
      "get": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_ListByApi",
        "description": "Get the policy configuration at the API level.",
        "x-ms-examples": {
          "ApiManagementListApiPolicies": {
            "$ref": "./examples/ApiManagementListApiPolicies.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Apis Policy Collection.",
            "schema": {
              "$ref": "./apimpolicies.json#/definitions/PolicyCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}": {
      "head": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the API policy specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiPolicy": {
            "$ref": "./examples/ApiManagementHeadApiPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified API Policy entity exists and current entity state version is present in the ETag header.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_Get",
        "description": "Get the policy configuration at the API level.",
        "x-ms-examples": {
          "ApiManagementGetApiPolicy": {
            "$ref": "./examples/ApiManagementGetApiPolicy.json"
          }
        },
        "produces": [
          "application/json",
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"
        ],
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Api Policy information.",
            "schema": {
              "$ref": "./apimpolicies.json#/definitions/PolicyContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_CreateOrUpdate",
        "description": "Creates or updates policy configuration for the API.",
        "x-ms-examples": {
          "ApiManagementCreateApiPolicy": {
            "$ref": "./examples/ApiManagementCreateApiPolicy.json"
          },
          "ApiManagementCreateApiPolicyNonXmlEncoded": {
            "$ref": "./examples/ApiManagementCreateApiPolicyNonXmlEncoded.json"
          }
        },
        "consumes": [
          "application/json",
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"
        ],
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./apimpolicies.json#/definitions/PolicyContract"
            },
            "description": "The policy contents to apply."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Api policy configuration was successfully created.",
            "schema": {
              "$ref": "./apimpolicies.json#/definitions/PolicyContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Api policy configuration of the tenant was successfully updated.",
            "schema": {
              "$ref": "./apimpolicies.json#/definitions/PolicyContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiPolicy"
        ],
        "operationId": "ApiPolicy_Delete",
        "description": "Deletes the policy configuration at the Api.",
        "x-ms-examples": {
          "ApiManagementDeleteApiPolicy": {
            "$ref": "./examples/ApiManagementDeleteApiPolicy.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the policy configuration at the API level."
          },
          "204": {
            "description": "Successfully deleted the policy configuration at the API level."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas": {
      "get": {
        "tags": [
          "ApiSchema"
        ],
        "operationId": "ApiSchema_ListByApi",
        "description": "Get the schema configuration at the API level.",
        "x-ms-examples": {
          "ApiManagementListApiSchemas": {
            "$ref": "./examples/ApiManagementListApiSchemas.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|contentType | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Apis Schema Collection.",
            "schema": {
              "$ref": "#/definitions/SchemaCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}": {
      "head": {
        "tags": [
          "ApiSchema"
        ],
        "operationId": "ApiSchema_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the schema specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiSchema": {
            "$ref": "./examples/ApiManagementHeadApiSchema.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SchemaIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified schema entity exists and current entity state version is present in the ETag header.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiSchema"
        ],
        "operationId": "ApiSchema_Get",
        "description": "Get the schema configuration at the API level.",
        "x-ms-examples": {
          "ApiManagementGetApiSchema": {
            "$ref": "./examples/ApiManagementGetApiSchema.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SchemaIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Api Schema information.",
            "schema": {
              "$ref": "#/definitions/SchemaContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiSchema"
        ],
        "operationId": "ApiSchema_CreateOrUpdate",
        "description": "Creates or updates schema configuration for the API.",
        "x-ms-examples": {
          "ApiManagementCreateApiSchema": {
            "$ref": "./examples/ApiManagementCreateApiSchema.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SchemaIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaContract"
            },
            "description": "The schema contents to apply."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Api schema configuration was successfully created.",
            "schema": {
              "$ref": "#/definitions/SchemaContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Api schema configuration of the tenant was successfully updated.",
            "schema": {
              "$ref": "#/definitions/SchemaContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiSchema"
        ],
        "operationId": "ApiSchema_Delete",
        "description": "Deletes the schema configuration at the Api.",
        "x-ms-examples": {
          "ApiManagementDeleteApiSchema": {
            "$ref": "./examples/ApiManagementDeleteApiSchema.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SchemaIdParameter"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true removes all references to the schema before deleting it."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the schema configuration at the API level."
          },
          "204": {
            "description": "Successfully deleted the schema configuration at the API level."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics": {
      "get": {
        "tags": [
          "ApiDiagnostic"
        ],
        "operationId": "ApiDiagnostic_ListByService",
        "description": "Lists all diagnostics of an API.",
        "x-ms-examples": {
          "ApiManagementListApiDiagnostics": {
            "$ref": "./examples/ApiManagementListApiDiagnostics.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged Result response of diagnostics for an API.",
            "schema": {
              "$ref": "./apimdiagnostics.json#/definitions/DiagnosticCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./apimdiagnostics.json#/definitions/DiagnosticContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}": {
      "head": {
        "tags": [
          "ApiDiagnostic"
        ],
        "operationId": "ApiDiagnostic_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the Diagnostic for an API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiDiagnostic": {
            "$ref": "./examples/ApiManagementHeadApiDiagnostic.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/DiagnosticIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiDiagnostic"
        ],
        "operationId": "ApiDiagnostic_Get",
        "description": "Gets the details of the Diagnostic for an API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementGetApiDiagnostic": {
            "$ref": "./examples/ApiManagementGetApiDiagnostic.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/DiagnosticIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Diagnostic entity.",
            "schema": {
              "$ref": "./apimdiagnostics.json#/definitions/DiagnosticContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiDiagnostic"
        ],
        "operationId": "ApiDiagnostic_CreateOrUpdate",
        "description": "Creates a new Diagnostic for an API or updates an existing one.",
        "x-ms-examples": {
          "ApiManagementCreateApiDiagnostic": {
            "$ref": "./examples/ApiManagementCreateApiDiagnostic.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/DiagnosticIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./apimdiagnostics.json#/definitions/DiagnosticContract"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Diagnostic was successfully created.",
            "schema": {
              "$ref": "./apimdiagnostics.json#/definitions/DiagnosticContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Diagnostic was successfully updated.",
            "schema": {
              "$ref": "./apimdiagnostics.json#/definitions/DiagnosticContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ApiDiagnostic"
        ],
        "operationId": "ApiDiagnostic_Update",
        "description": "Updates the details of the Diagnostic for an API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementUpdateApiDiagnostic": {
            "$ref": "./examples/ApiManagementUpdateApiDiagnostic.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/DiagnosticIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./apimdiagnostics.json#/definitions/DiagnosticContract"
            },
            "description": "Diagnostic Update parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The Diagnostic was successfully updated."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiDiagnostic"
        ],
        "operationId": "ApiDiagnostic_Delete",
        "description": "Deletes the specified Diagnostic from an API.",
        "x-ms-examples": {
          "ApiManagementDeleteApiDiagnostic": {
            "$ref": "./examples/ApiManagementDeleteApiDiagnostic.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/DiagnosticIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Diagnostic successfully removed"
          },
          "204": {
            "description": "Diagnostic successfully removed by previous request or does not exist"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues": {
      "get": {
        "tags": [
          "ApiIssue"
        ],
        "operationId": "ApiIssue_ListByService",
        "description": "Lists all issues associated with the specified API.",
        "x-ms-examples": {
          "ApiManagementListApiIssues": {
            "$ref": "./examples/ApiManagementListApiIssues.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|userId | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|state | eq |    |\n"
          },
          {
            "name": "expandCommentsAttachments",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Expand the comment attachments. "
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged Result response of issues for the API.",
            "schema": {
              "$ref": "#/definitions/IssueCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/IssueContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}": {
      "head": {
        "tags": [
          "ApiIssue"
        ],
        "operationId": "ApiIssue_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the Issue for an API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiIssue": {
            "$ref": "./examples/ApiManagementHeadApiIssue.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiIssue"
        ],
        "operationId": "ApiIssue_Get",
        "description": "Gets the details of the Issue for an API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementGetApiIssue": {
            "$ref": "./examples/ApiManagementGetApiIssue.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "name": "expandCommentsAttachments",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Expand the comment attachments. "
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Issue entity.",
            "schema": {
              "$ref": "#/definitions/IssueContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiIssue"
        ],
        "operationId": "ApiIssue_CreateOrUpdate",
        "description": "Creates a new Issue for an API or updates an existing one.",
        "x-ms-examples": {
          "ApiManagementCreateApiIssue": {
            "$ref": "./examples/ApiManagementCreateApiIssue.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueContract"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "New api issue successfully added",
            "schema": {
              "$ref": "#/definitions/IssueContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Api issue successfully updated",
            "schema": {
              "$ref": "#/definitions/IssueContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ApiIssue"
        ],
        "operationId": "ApiIssue_Update",
        "description": "Updates an existing issue for an API.",
        "x-ms-examples": {
          "ApiManagementUpdateApiIssue": {
            "$ref": "./examples/ApiManagementUpdateApiIssue.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueUpdateContract"
            },
            "description": "Update parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Api issue updated successfully"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiIssue"
        ],
        "operationId": "ApiIssue_Delete",
        "description": "Deletes the specified Issue from an API.",
        "x-ms-examples": {
          "ApiManagementDeleteApiIssue": {
            "$ref": "./examples/ApiManagementDeleteApiIssue.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Issue successfully removed"
          },
          "204": {
            "description": "Issue successfully removed by previous request or does not exist"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments": {
      "get": {
        "tags": [
          "ApiIssueComment"
        ],
        "operationId": "ApiIssueComment_ListByService",
        "description": "Lists all comments for the Issue associated with the specified API.",
        "x-ms-examples": {
          "ApiManagementListApiIssueComments": {
            "$ref": "./examples/ApiManagementListApiIssueComments.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|userId | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged Result response of issue comments for the API.",
            "schema": {
              "$ref": "#/definitions/IssueCommentCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/IssueCommentContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}": {
      "head": {
        "tags": [
          "ApiIssueComment"
        ],
        "operationId": "ApiIssueComment_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the issue Comment for an API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiIssueComment": {
            "$ref": "./examples/ApiManagementHeadApiIssueComment.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/CommentIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiIssueComment"
        ],
        "operationId": "ApiIssueComment_Get",
        "description": "Gets the details of the issue Comment for an API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementGetApiIssueComment": {
            "$ref": "./examples/ApiManagementGetApiIssueComment.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/CommentIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified issue Comment entity.",
            "schema": {
              "$ref": "#/definitions/IssueCommentContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiIssueComment"
        ],
        "operationId": "ApiIssueComment_CreateOrUpdate",
        "description": "Creates a new Comment for the Issue in an API or updates an existing one.",
        "x-ms-examples": {
          "ApiManagementCreateApiIssueComment": {
            "$ref": "./examples/ApiManagementCreateApiIssueComment.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/CommentIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueCommentContract"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "New api issue comment successfully added",
            "schema": {
              "$ref": "#/definitions/IssueCommentContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Api issue comment successfully updated",
            "schema": {
              "$ref": "#/definitions/IssueCommentContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiIssueComment"
        ],
        "operationId": "ApiIssueComment_Delete",
        "description": "Deletes the specified comment from an Issue.",
        "x-ms-examples": {
          "ApiManagementDeleteApiIssueComment": {
            "$ref": "./examples/ApiManagementDeleteApiIssueComment.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/CommentIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment successfully removed"
          },
          "204": {
            "description": "Comment successfully removed by previous request or does not exist"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments": {
      "get": {
        "tags": [
          "ApiIssueAttachment"
        ],
        "operationId": "ApiIssueAttachment_ListByService",
        "description": "Lists all attachments for the Issue associated with the specified API.",
        "x-ms-examples": {
          "ApiManagementListApiIssueAttachments": {
            "$ref": "./examples/ApiManagementListApiIssueAttachments.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|userId | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged Result response of issue attachments for the API.",
            "schema": {
              "$ref": "#/definitions/IssueAttachmentCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/IssueAttachmentContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments/{attachmentId}": {
      "head": {
        "tags": [
          "ApiIssueAttachment"
        ],
        "operationId": "ApiIssueAttachment_GetEntityTag",
        "description": "Gets the entity state (Etag) version of the issue Attachment for an API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiIssueAttachment": {
            "$ref": "./examples/ApiManagementHeadApiIssueAttachment.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/AttachmentIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiIssueAttachment"
        ],
        "operationId": "ApiIssueAttachment_Get",
        "description": "Gets the details of the issue Attachment for an API specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementGetApiIssueAttachment": {
            "$ref": "./examples/ApiManagementGetApiIssueAttachment.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/AttachmentIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified issue Attachment entity.",
            "schema": {
              "$ref": "#/definitions/IssueAttachmentContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiIssueAttachment"
        ],
        "operationId": "ApiIssueAttachment_CreateOrUpdate",
        "description": "Creates a new Attachment for the Issue in an API or updates an existing one.",
        "x-ms-examples": {
          "ApiManagementCreateApiIssueAttachment": {
            "$ref": "./examples/ApiManagementCreateApiIssueAttachment.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/AttachmentIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueAttachmentContract"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "New api issue attachment successfully added",
            "schema": {
              "$ref": "#/definitions/IssueAttachmentContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Api issue attachment successfully updated",
            "schema": {
              "$ref": "#/definitions/IssueAttachmentContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiIssueAttachment"
        ],
        "operationId": "ApiIssueAttachment_Delete",
        "description": "Deletes the specified comment from an Issue.",
        "x-ms-examples": {
          "ApiManagementDeleteApiIssueAttachment": {
            "$ref": "./examples/ApiManagementDeleteApiIssueAttachment.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IssueIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/AttachmentIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment successfully removed"
          },
          "204": {
            "description": "Attachment successfully removed by previous request or does not exist"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions": {
      "get": {
        "tags": [
          "ApiTagDescription"
        ],
        "operationId": "TagDescription_ListByApi",
        "description": "Lists all Tags descriptions in scope of API. Model similar to swagger - tagDescription is defined on API level but tag may be assigned to the Operations",
        "x-ms-examples": {
          "ApiManagementListApiTagDescriptions": {
            "$ref": "./examples/ApiManagementListApiTagDescriptions.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns a collection of tagDescriptions associated with the Api entity.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagDescriptionCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./apimtags.json#/definitions/TagDescriptionContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagId}": {
      "head": {
        "tags": [
          "ApiTagDescription"
        ],
        "operationId": "TagDescription_GetEntityState",
        "description": "Gets the entity state version of the tag specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiTagDescription": {
            "$ref": "./examples/ApiManagementHeadApiTagDescription.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Empty response body, ETag header entity state version.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiTagDescription"
        ],
        "operationId": "TagDescription_Get",
        "description": "Get Tag description in scope of API",
        "x-ms-examples": {
          "ApiManagementGetApiTagDescription": {
            "$ref": "./examples/ApiManagementGetApiTagDescription.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the description of the tag specified by its identifier in scope if the Api.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagDescriptionContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiTagDescription"
        ],
        "operationId": "TagDescription_CreateOrUpdate",
        "description": "Create/Update tag description in scope of the Api.",
        "x-ms-examples": {
          "ApiManagementCreateApiTagDescription": {
            "$ref": "./examples/ApiManagementCreateApiTagDescription.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagDescriptionCreateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchOptionalParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Tag Description was created for the Api.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagDescriptionContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Tag Description was updated for the Api.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagDescriptionContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiTagDescription"
        ],
        "operationId": "TagDescription_Delete",
        "description": "Delete tag description for the Api.",
        "x-ms-examples": {
          "ApiManagementDeleteApiTagDescription": {
            "$ref": "./examples/ApiManagementDeleteApiTagDescription.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/IfMatchRequiredParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag description successfully removed"
          },
          "204": {
            "description": "Tag description successfully removed by previous request or does not exist"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags": {
      "get": {
        "tags": [
          "ApiTag"
        ],
        "operationId": "Tag_ListByApi",
        "description": "Lists all Tags associated with the API.",
        "x-ms-examples": {
          "ApiManagementListApiTags": {
            "$ref": "./examples/ApiManagementListApiTags.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns a collection of tags associated with the Api entity.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./apimtags.json#/definitions/TagContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}": {
      "head": {
        "tags": [
          "ApiTag"
        ],
        "operationId": "Tag_GetEntityStateByApi",
        "description": "Gets the entity state version of the tag specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementHeadApiTag": {
            "$ref": "./examples/ApiManagementHeadApiTag.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Empty response body, ETag header entity state version.",
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ApiTag"
        ],
        "operationId": "Tag_GetByApi",
        "description": "Get tag associated with the API.",
        "x-ms-examples": {
          "ApiManagementGetApiTag": {
            "$ref": "./examples/ApiManagementGetApiTag.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the details of the tag specified by its identifier.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiTag"
        ],
        "operationId": "Tag_AssignToApi",
        "description": "Assign tag to the Api.",
        "x-ms-examples": {
          "ApiManagementCreateApiTag": {
            "$ref": "./examples/ApiManagementCreateApiTag.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Tag was assigned to the Api.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Tag is already assigned to the Api.",
            "schema": {
              "$ref": "./apimtags.json#/definitions/TagContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiTag"
        ],
        "operationId": "Tag_DetachFromApi",
        "description": "Detach the tag from the Api.",
        "x-ms-examples": {
          "ApiManagementDeleteApiTag": {
            "$ref": "./examples/ApiManagementDeleteApiTag.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TagIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "API/Tag association successfully removed"
          },
          "204": {
            "description": "API/Tag association successfully removed by previous request or does not exist"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operationsByTags": {
      "get": {
        "tags": [
          "ApiOperationsByTag"
        ],
        "operationId": "Operation_ListByTags",
        "description": "Lists a collection of operations associated with tags.",
        "x-ms-examples": {
          "ApiManagementListApiOperationsByTags": {
            "$ref": "./examples/ApiManagementListApiOperationsByTags.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n\r\n|name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|apiName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|method | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n|urlTemplate | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "name": "includeNotTaggedOperations",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include not tagged Operations."
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists a collection of TagResource entities.",
            "schema": {
              "$ref": "./apimtagresources.json#/definitions/TagResourceCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./apimtagresources.json#/definitions/TagResourceContract"
      }
    }
  },
  "x-ms-paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}?export=true": {
      "get": {
        "tags": [
          "Apis"
        ],
        "operationId": "ApiExport_Get",
        "description": "Gets the details of the API specified by its identifier in the format specified to the Storage Blob with SAS Key valid for 5 minutes.",
        "x-ms-examples": {
          "ApiManagementGetApiExportInOpenApi2dot0": {
            "$ref": "./examples/ApiManagementGetApiExportInOpenApi2dot0.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiIdRevParameter"
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "swagger-link",
              "wadl-link",
              "wsdl-link",
              "openapi-link"
            ],
            "x-ms-enum": {
              "name": "ExportFormat",
              "modelAsString": true,
              "values": [
                {
                  "value": "swagger-link",
                  "description": "Export the Api Definition in OpenApi Specification 2.0 format to the Storage Blob.",
                  "name": "Swagger"
                },
                {
                  "value": "wsdl-link",
                  "description": "Export the Api Definition in WSDL Schema to Storage Blob. This is only supported for APIs of Type `soap`",
                  "name": "Wsdl"
                },
                {
                  "value": "wadl-link",
                  "description": "Export the Api Definition in WADL Schema to Storage Blob.",
                  "name": "Wadl"
                },
                {
                  "value": "openapi-link",
                  "description": "Export the Api Definition in OpenApi Specification 3.0 to Storage Blob.",
                  "name": "OpenApi3"
                }
              ]
            },
            "description": "Format in which to export the Api Details to the Storage Blob with Sas Key valid for 5 minutes."
          },
          {
            "name": "export",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "true"
            ],
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ExportApi"
            },
            "description": "Query parameter required to export the API details."
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response contains a stream with a full set of API metadata and includes API entity with an embedded array of operation entities.",
            "schema": {
              "$ref": "#/definitions/ApiExportResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiExportResult": {
      "properties": {
        "link": {
          "type": "string",
          "description": "Link to the Storage Blob containing the result of the export operation. The Blob Uri is only valid for 5 minutes."
        }
      },
      "description": "API Export result Blob Uri."
    },
    "ApiCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiContract"
          },
          "description": "Page values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Api list representation."
    },
    "ApiContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiContractProperties",
          "description": "Api entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "API details."
    },
    "ApiCreateOrUpdateParameter": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiCreateOrUpdateProperties",
          "description": "Api entity create of update properties."
        }
      },
      "description": "API Create or Update Parameters."
    },
    "ApiCreateOrUpdateProperties": {
      "properties": {
        "contentValue": {
          "type": "string",
          "description": "Content value when Importing an API."
        },
        "contentFormat": {
          "type": "string",
          "description": "Format of the Content in which the API is getting imported.",
          "enum": [
            "wadl-xml",
            "wadl-link-json",
            "swagger-json",
            "swagger-link-json",
            "wsdl",
            "wsdl-link",
            "openapi",
            "openapi+json",
            "openapi-link"
          ],
          "x-ms-enum": {
            "name": "ContentFormat",
            "modelAsString": true,
            "values": [
              {
                "value": "wadl-xml",
                "description": "The contents are inline and Content type is a WADL document."
              },
              {
                "value": "wadl-link-json",
                "description": "The WADL document is hosted on a publicly accessible internet address."
              },
              {
                "value": "swagger-json",
                "description": "The contents are inline and Content Type is a OpenApi 2.0 Document."
              },
              {
                "value": "swagger-link-json",
                "description": "The Open Api 2.0 document is hosted on a publicly accessible internet address."
              },
              {
                "value": "wsdl",
                "description": "The contents are inline and the document is a WSDL/Soap document."
              },
              {
                "value": "wsdl-link",
                "description": "The WSDL document is hosted on a publicly accessible internet address."
              },
              {
                "value": "openapi",
                "description": "The contents are inline and Content Type is a OpenApi 3.0 Document in YAML format."
              },
              {
                "value": "openapi+json",
                "description": "The contents are inline and Content Type is a OpenApi 3.0 Document in JSON format."
              },
              {
                "value": "openapi-link",
                "description": "The Open Api 3.0 document is hosted on a publicly accessible internet address."
              }
            ]
          }
        },
        "wsdlSelector": {
          "type": "object",
          "description": "Criteria to limit import of WSDL to a subset of the document.",
          "properties": {
            "wsdlServiceName": {
              "type": "string",
              "description": "Name of service to import from WSDL"
            },
            "wsdlEndpointName": {
              "type": "string",
              "description": "Name of endpoint(port) to import from WSDL"
            }
          }
        },
        "apiType": {
          "type": "string",
          "description": "Type of Api to create. \n * `http` creates a SOAP to REST API \n * `soap` creates a SOAP pass-through API .",
          "enum": [
            "http",
            "soap"
          ],
          "x-ms-client-name": "SoapApiType",
          "x-ms-enum": {
            "name": "SoapApiType",
            "modelAsString": true,
            "values": [
              {
                "value": "http",
                "description": "Imports a SOAP API having a RESTful front end.",
                "name": "SoapToRest"
              },
              {
                "value": "soap",
                "description": "Imports the Soap API having a SOAP front end.",
                "name": "SoapPassThrough"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiContractProperties"
        }
      ],
      "description": "Api Create or Update Properties."
    },
    "ApiContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 0,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        },
        "apiVersionSet": {
          "$ref": "#/definitions/ApiVersionSetContractDetails"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "required": [
        "path"
      ],
      "description": "Api Entity Properties"
    },
    "ApiUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiContractUpdateProperties",
          "description": "Properties of the API entity that can be updated."
        }
      },
      "description": "API update contract details."
    },
    "ApiContractUpdateProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "description": "API update contract properties."
    },
    "ApiEntityBaseContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the API. May include HTML formatting tags."
        },
        "authenticationSettings": {
          "$ref": "#/definitions/AuthenticationSettingsContract",
          "description": "Collection of authentication settings included into this API."
        },
        "subscriptionKeyParameterNames": {
          "$ref": "#/definitions/SubscriptionKeyParameterNamesContract",
          "description": "Protocols over which API is made available."
        },
        "type": {
          "type": "string",
          "description": "Type of API.",
          "enum": [
            "http",
            "soap"
          ],
          "x-ms-client-name": "ApiType",
          "x-ms-enum": {
            "name": "ApiType",
            "modelAsString": true
          }
        },
        "apiRevision": {
          "type": "string",
          "description": "Describes the Revision of the Api. If no value is provided, default revision 1 is created",
          "minLength": 1,
          "maxLength": 100
        },
        "apiVersion": {
          "type": "string",
          "description": "Indicates the Version identifier of the API if the API is versioned",
          "maxLength": 100
        },
        "isCurrent": {
          "type": "boolean",
          "description": "Indicates if API revision is current api revision.",
          "readOnly": true
        },
        "isOnline": {
          "type": "boolean",
          "description": "Indicates if API revision is accessible via the gateway.",
          "readOnly": true
        },
        "apiRevisionDescription": {
          "type": "string",
          "description": "Description of the Api Revision.",
          "maxLength": 256
        },
        "apiVersionDescription": {
          "type": "string",
          "description": "Description of the Api Version.",
          "maxLength": 256
        },
        "apiVersionSetId": {
          "type": "string",
          "description": "A resource identifier for the related ApiVersionSet."
        },
        "subscriptionRequired": {
          "type": "boolean",
          "description": "Specifies whether an API or Product subscription is required for accessing the API."
        }
      },
      "description": "API base contract details."
    },
    "ApiRevisionCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiRevisionContract"
          },
          "description": "Page values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Api Revision list representation."
    },
    "ApiRevisionContract": {
      "properties": {
        "apiId": {
          "type": "string",
          "readOnly": true,
          "description": "Identifier of the API Revision."
        },
        "apiRevision": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100,
          "readOnly": true,
          "description": "Revision number of API."
        },
        "createdDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API Revision was created. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard."
        },
        "updatedDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API Revision were updated. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard."
        },
        "description": {
          "type": "string",
          "readOnly": true,
          "maxLength": 256,
          "description": "Description of the API Revision."
        },
        "privateUrl": {
          "type": "string",
          "readOnly": true,
          "description": "Gateway URL for accessing the non-current API Revision."
        },
        "isOnline": {
          "type": "boolean",
          "readOnly": true,
          "description": "Indicates if API revision is the current api revision."
        },
        "isCurrent": {
          "type": "boolean",
          "readOnly": true,
          "description": "Indicates if API revision is accessible via the gateway."
        }
      },
      "description": "Summary of revision metadata."
    },
    "ApiRevisionInfoContract": {
      "description": "Object used to create an API Revision or Version based on an existing API Revision",
      "properties": {
        "sourceApiId": {
          "type": "string",
          "description": "Resource identifier of API to be used to create the revision from."
        },
        "apiVersionName": {
          "type": "string",
          "maxLength": 100,
          "description": "Version identifier for the new API Version."
        },
        "apiRevisionDescription": {
          "type": "string",
          "maxLength": 256,
          "description": "Description of new API Revision."
        },
        "apiVersionSet": {
          "description": "Version set details",
          "$ref": "#/definitions/ApiVersionSetContractDetails"
        }
      }
    },
    "ApiVersionSetContractDetails": {
      "description": "An API Version Set contains the common configuration for a set of API Versions relating ",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier for existing API Version Set. Omit this value to create a new Version Set."
        },
        "description": {
          "type": "string",
          "description": "Description of API Version Set."
        },
        "versioningScheme": {
          "type": "string",
          "description": "An value that determines where the API Version identifer will be located in a HTTP request.",
          "enum": [
            "Segment",
            "Query",
            "Header"
          ]
        },
        "versionQueryName": {
          "type": "string",
          "description": "Name of query parameter that indicates the API Version if versioningScheme is set to `query`."
        },
        "versionHeaderName": {
          "type": "string",
          "description": "Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`."
        }
      }
    },
    "ApiReleaseCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiReleaseContract"
          },
          "description": "Page values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Api Revision list representation."
    },
    "ApiReleaseContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiReleaseContractProperties",
          "description": "Properties of the Api Release Contract."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Api Release details."
    },
    "ApiReleaseContractProperties": {
      "description": "API Release details",
      "properties": {
        "apiId": {
          "type": "string",
          "description": "Identifier of the API the release belongs to."
        },
        "createdDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API was released. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard."
        },
        "updatedDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API release was updated."
        },
        "notes": {
          "type": "string",
          "description": "Release Notes"
        }
      }
    },
    "AuthenticationSettingsContract": {
      "properties": {
        "oAuth2": {
          "$ref": "#/definitions/OAuth2AuthenticationSettingsContract",
          "description": "OAuth2 Authentication settings"
        },
        "openid": {
          "$ref": "#/definitions/OpenIdAuthenticationSettingsContract",
          "description": "OpenID Connect Authentication Settings"
        },
        "subscriptionKeyRequired": {
          "type": "boolean",
          "description": "Specifies whether subscription key is required during call to this API, true - API is included into closed products only, false - API is included into open products alone, null - there is a mix of products."
        }
      },
      "description": "API Authentication Settings."
    },
    "OAuth2AuthenticationSettingsContract": {
      "properties": {
        "authorizationServerId": {
          "type": "string",
          "description": "OAuth authorization server identifier."
        },
        "scope": {
          "type": "string",
          "description": "operations scope."
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "OpenIdAuthenticationSettingsContract": {
      "properties": {
        "openidProviderId": {
          "type": "string",
          "description": "OAuth authorization server identifier."
        },
        "bearerTokenSendingMethods": {
          "description": "How to send token to the server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BearerTokenSendingMethodsContract"
          }
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "BearerTokenSendingMethodsContract": {
      "type": "string",
      "description": "Form of an authorization grant, which the client uses to request the access token.",
      "enum": [
        "authorizationHeader",
        "query"
      ],
      "x-ms-enum": {
        "modelAsString": true,
        "name": "bearerTokenSendingMethods",
        "values": [
          {
            "value": "authorizationHeader",
            "description": "Access token will be transmitted in the Authorization header using Bearer schema"
          },
          {
            "value": "query",
            "description": "Access token will be transmitted as query parameters."
          }
        ]
      }
    },
    "OperationCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationContract"
          },
          "description": "Page values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Operation list representation."
    },
    "OperationContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/OperationContractProperties",
          "description": "Properties of the Operation Contract."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Api Operation details."
    },
    "OperationContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Operation Name.",
          "minLength": 1,
          "maxLength": 300
        },
        "method": {
          "type": "string",
          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
          "externalDocs": {
            "description": "As defined by RFC.",
            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
          }
        },
        "urlTemplate": {
          "type": "string",
          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
          "minLength": 1,
          "maxLength": 1000
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OperationEntityBaseContract"
        }
      ],
      "required": [
        "displayName",
        "method",
        "urlTemplate"
      ],
      "description": "Operation Contract Properties"
    },
    "OperationUpdateContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Operation Name.",
          "minLength": 1,
          "maxLength": 300
        },
        "method": {
          "type": "string",
          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
          "externalDocs": {
            "description": "As defined by RFC.",
            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
          }
        },
        "urlTemplate": {
          "type": "string",
          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
          "minLength": 1,
          "maxLength": 1000
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OperationEntityBaseContract"
        }
      ],
      "description": "Operation Update Contract Properties."
    },
    "OperationEntityBaseContract": {
      "properties": {
        "templateParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of URL template parameters."
        },
        "description": {
          "type": "string",
          "description": "Description of the operation. May include HTML formatting tags.",
          "maxLength": 1000
        },
        "request": {
          "$ref": "#/definitions/RequestContract",
          "description": "An entity containing request details."
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseContract"
          },
          "description": "Array of Operation responses."
        },
        "policies": {
          "type": "string",
          "description": "Operation Policies"
        }
      },
      "description": "Api Operation Entity Base Contract details."
    },
    "OperationUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/OperationUpdateContractProperties",
          "description": "Properties of the API Operation entity that can be updated."
        }
      },
      "description": "Api Operation Update Contract details."
    },
    "ParameterContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Parameter name."
        },
        "description": {
          "type": "string",
          "description": "Parameter description."
        },
        "type": {
          "type": "string",
          "description": "Parameter type."
        },
        "defaultValue": {
          "type": "string",
          "description": "Default parameter value."
        },
        "required": {
          "type": "boolean",
          "description": "whether parameter is required or not."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parameter values."
        }
      },
      "required": [
        "name",
        "type"
      ],
      "description": "Operation parameters details."
    },
    "RepresentationContract": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Specifies a registered or custom content type for this representation, e.g. application/xml."
        },
        "sample": {
          "type": "string",
          "description": "An example of the representation."
        },
        "schemaId": {
          "type": "string",
          "description": "Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'."
        },
        "typeName": {
          "type": "string",
          "description": "Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'."
        },
        "formParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'.."
        }
      },
      "required": [
        "contentType"
      ],
      "description": "Operation request/response representation details."
    },
    "RequestContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Operation request description."
        },
        "queryParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation request query parameters."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation request headers."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Collection of operation request representations."
        }
      },
      "description": "Operation request details."
    },
    "ResponseContract": {
      "properties": {
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Operation response HTTP status code."
        },
        "description": {
          "type": "string",
          "description": "Operation response description."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Collection of operation response representations."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation response headers."
        }
      },
      "required": [
        "statusCode"
      ],
      "description": "Operation response details."
    },
    "SubscriptionKeyParameterNamesContract": {
      "properties": {
        "header": {
          "type": "string",
          "description": "Subscription key header name."
        },
        "query": {
          "type": "string",
          "description": "Subscription key query string parameter name."
        }
      },
      "description": "Subscription key parameter names details.",
      "example": {
        "subscriptionKeyParameterNames": {
          "query": "customQueryParameterName",
          "header": "customHeaderParameterName"
        }
      }
    },
    "SchemaCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemaContract"
          },
          "description": "Api Schema Contract value.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "The response of the list schema operation."
    },
    "SchemaContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SchemaContractProperties",
          "description": "Properties of the Schema."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Schema Contract details."
    },
    "SchemaContractProperties": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media type of the schema document (e.g. application/json, application/xml)."
        },
        "document": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SchemaDocumentProperties",
          "description": "Properties of the Schema Document."
        }
      },
      "required": [
        "contentType"
      ],
      "description": "Schema contract Properties."
    },
    "SchemaDocumentProperties": {
      "properties": {
        "value": {
          "type": "string",
          "description": "Json escaped string defining the document representing the Schema."
        }
      },
      "description": "Schema Document Properties."
    },
    "IssueCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueContract"
          },
          "description": "Issue values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Issue list representation."
    },
    "IssueContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/IssueContractProperties",
          "description": "Properties of the Issue."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Issue Contract details."
    },
    "IssueUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/IssueUpdateContractProperties",
          "description": "Issue entity Update contract properties."
        }
      },
      "description": "Issue update Parameters."
    },
    "IssueContractProperties": {
      "properties": {
        "title": {
          "type": "string",
          "description": "The issue title."
        },
        "description": {
          "type": "string",
          "description": "Text describing the issue."
        },
        "userId": {
          "type": "string",
          "description": "A resource identifier for the user created the issue."
        }
      },
      "required": [
        "title",
        "description",
        "userId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/IssueContractBaseProperties"
        }
      ],
      "description": "Issue contract Properties."
    },
    "IssueUpdateContractProperties": {
      "properties": {
        "title": {
          "type": "string",
          "description": "The issue title."
        },
        "description": {
          "type": "string",
          "description": "Text describing the issue."
        },
        "userId": {
          "type": "string",
          "description": "A resource identifier for the user created the issue."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/IssueContractBaseProperties"
        }
      ],
      "description": "Issue contract Update Properties."
    },
    "IssueContractBaseProperties": {
      "properties": {
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the issue was created."
        },
        "state": {
          "type": "string",
          "description": "Status of the issue.",
          "enum": [
            "proposed",
            "open",
            "removed",
            "resolved",
            "closed"
          ],
          "x-ms-enum": {
            "name": "State",
            "modelAsString": true,
            "values": [
              {
                "value": "proposed",
                "description": "The issue is proposed."
              },
              {
                "value": "open",
                "description": "The issue is opened."
              },
              {
                "value": "removed",
                "description": "The issue was removed."
              },
              {
                "value": "resolved",
                "description": "The issue is now resolved."
              },
              {
                "value": "closed",
                "description": "The issue was closed."
              }
            ]
          }
        },
        "apiId": {
          "type": "string",
          "description": "A resource identifier for the API the issue was created for."
        }
      },
      "description": "Issue contract Base Properties."
    },
    "IssueCommentCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueCommentContract"
          },
          "description": "Issue Comment values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Issue Comment list representation."
    },
    "IssueCommentContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/IssueCommentContractProperties",
          "description": "Properties of the Issue Comment."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Issue Comment Contract details."
    },
    "IssueCommentContractProperties": {
      "properties": {
        "text": {
          "type": "string",
          "description": "Comment text."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the comment was created."
        },
        "userId": {
          "type": "string",
          "description": "A resource identifier for the user who left the comment."
        }
      },
      "required": [
        "text",
        "userId"
      ],
      "description": "Issue Comment contract Properties."
    },
    "IssueAttachmentCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueAttachmentContract"
          },
          "description": "Issue Attachment values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Issue Attachment list representation."
    },
    "IssueAttachmentContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/IssueAttachmentContractProperties",
          "description": "Properties of the Issue Attachment."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Issue Attachment Contract details."
    },
    "IssueAttachmentContractProperties": {
      "properties": {
        "title": {
          "type": "string",
          "description": "Filename by which the binary data will be saved."
        },
        "contentFormat": {
          "type": "string",
          "description": "Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property."
        },
        "content": {
          "type": "string",
          "description": "An HTTP link or Base64-encoded binary data."
        }
      },
      "required": [
        "title",
        "contentFormat",
        "content"
      ],
      "description": "Issue Attachment contract Properties."
    }
  },
  "parameters": { }
}