{
  "swagger": "2.0",
  "info": {
    "title": "Definitions file",
    "version": "2018-06-01-preview"
  },
  "paths": {},
  "definitions": {
    "AccessInformationContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier."
        },
        "primaryKey": {
          "type": "string",
          "description": "Primary access key."
        },
        "secondaryKey": {
          "type": "string",
          "description": "Secondary access key."
        },
        "enabled": {
          "type": "boolean",
          "description": "Tenant access information of the API Management service."
        }
      },
      "description": "Tenant access information contract of the API Management service."
    },
    "AccessInformationUpdateParameters": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Tenant access information of the API Management service."
        }
      },
      "description": "Tenant access information update parameters of the API Management service."
    },
    "ApiCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiContract"
          },
          "description": "Page values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Api list representation."
    },
    "ApiContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiContractProperties",
          "description": "Api entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "API details."
    },
    "ApiContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 0,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        },
        "apiVersionSet": {
          "$ref": "#/definitions/ApiVersionSetContractDetails"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "required": [
        "path"
      ],
      "description": "Api Entity Properties"
    },
    "ApiContractUpdateProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "description": "API update contract properties."
    },
    "ApiCreateOrUpdateParameter": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiCreateOrUpdateProperties",
          "description": "Api entity create of update properties."
        }
      },
      "description": "API Create or Update Parameters."
    },
    "ApiCreateOrUpdateProperties": {
      "properties": {
        "contentValue": {
          "type": "string",
          "description": "Content value when Importing an API."
        },
        "contentFormat": {
          "type": "string",
          "description": "Format of the Content in which the API is getting imported.",
          "enum": [
            "wadl-xml",
            "wadl-link-json",
            "swagger-json",
            "swagger-link-json",
            "wsdl",
            "wsdl-link",
            "openapi",
            "openapi+json",
            "openapi-link"
          ],
          "x-ms-enum": {
            "name": "ContentFormat",
            "modelAsString": true,
            "values": [
              {
                "value": "wadl-xml",
                "description": "The contents are inline and Content type is a WADL document."
              },
              {
                "value": "wadl-link-json",
                "description": "The WADL document is hosted on a publicly accessible internet address."
              },
              {
                "value": "swagger-json",
                "description": "The contents are inline and Content Type is a OpenApi 2.0 Document."
              },
              {
                "value": "swagger-link-json",
                "description": "The Open Api 2.0 document is hosted on a publicly accessible internet address."
              },
              {
                "value": "wsdl",
                "description": "The contents are inline and the document is a WSDL/Soap document."
              },
              {
                "value": "wsdl-link",
                "description": "The WSDL document is hosted on a publicly accessible internet address."
              },
              {
                "value": "openapi",
                "description": "The contents are inline and Content Type is a OpenApi 3.0 Document in YAML format."
              },
              {
                "value": "openapi+json",
                "description": "The contents are inline and Content Type is a OpenApi 3.0 Document in JSON format."
              },
              {
                "value": "openapi-link",
                "description": "The Open Api 3.0 document is hosted on a publicly accessible internet address."
              }
            ]
          }
        },
        "wsdlSelector": {
          "type": "object",
          "description": "Criteria to limit import of WSDL to a subset of the document.",
          "properties": {
            "wsdlServiceName": {
              "type": "string",
              "description": "Name of service to import from WSDL"
            },
            "wsdlEndpointName": {
              "type": "string",
              "description": "Name of endpoint(port) to import from WSDL"
            }
          }
        },
        "apiType": {
          "type": "string",
          "description": "Type of Api to create. \n * `http` creates a SOAP to REST API \n * `soap` creates a SOAP pass-through API .",
          "enum": [
            "http",
            "soap"
          ],
          "x-ms-client-name": "SoapApiType",
          "x-ms-enum": {
            "name": "SoapApiType",
            "modelAsString": true,
            "values": [
              {
                "value": "http",
                "description": "Imports a SOAP API having a RESTful front end.",
                "name": "SoapToRest"
              },
              {
                "value": "soap",
                "description": "Imports the Soap API having a SOAP front end.",
                "name": "SoapPassThrough"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiContractProperties"
        }
      ],
      "description": "Api Create or Update Properties."
    },
    "ApiEntityBaseContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the API. May include HTML formatting tags."
        },
        "authenticationSettings": {
          "$ref": "#/definitions/AuthenticationSettingsContract",
          "description": "Collection of authentication settings included into this API."
        },
        "subscriptionKeyParameterNames": {
          "$ref": "#/definitions/SubscriptionKeyParameterNamesContract",
          "description": "Protocols over which API is made available."
        },
        "type": {
          "type": "string",
          "description": "Type of API.",
          "enum": [
            "http",
            "soap"
          ],
          "x-ms-client-name": "ApiType",
          "x-ms-enum": {
            "name": "ApiType",
            "modelAsString": true
          }
        },
        "apiRevision": {
          "type": "string",
          "description": "Describes the Revision of the Api. If no value is provided, default revision 1 is created",
          "minLength": 1,
          "maxLength": 100
        },
        "apiVersion": {
          "type": "string",
          "description": "Indicates the Version identifier of the API if the API is versioned",
          "maxLength": 100
        },
        "isCurrent": {
          "type": "boolean",
          "description": "Indicates if API revision is current api revision.",
          "readOnly": true
        },
        "isOnline": {
          "type": "boolean",
          "description": "Indicates if API revision is accessible via the gateway.",
          "readOnly": true
        },
        "apiRevisionDescription": {
          "type": "string",
          "description": "Description of the Api Revision.",
          "maxLength": 256
        },
        "apiVersionDescription": {
          "type": "string",
          "description": "Description of the Api Version.",
          "maxLength": 256
        },
        "apiVersionSetId": {
          "type": "string",
          "description": "A resource identifier for the related ApiVersionSet."
        },
        "subscriptionRequired": {
          "type": "boolean",
          "description": "Specifies whether an API or Product subscription is required for accessing the API."
        }
      },
      "description": "API base contract details."
    },
    "ApiExportResult": {
      "properties": {
        "link": {
          "type": "string",
          "description": "Link to the Storage Blob containing the result of the export operation. The Blob Uri is only valid for 5 minutes."
        }
      },
      "description": "API Export result Blob Uri."
    },
    "ApiReleaseCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiReleaseContract"
          },
          "description": "Page values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Api Revision list representation."
    },
    "ApiReleaseContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiReleaseContractProperties",
          "description": "Properties of the Api Release Contract."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Api Release details."
    },
    "ApiReleaseContractProperties": {
      "description": "API Release details",
      "properties": {
        "apiId": {
          "type": "string",
          "description": "Identifier of the API the release belongs to."
        },
        "createdDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API was released. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard."
        },
        "updatedDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API release was updated."
        },
        "notes": {
          "type": "string",
          "description": "Release Notes"
        }
      }
    },
    "ApiRevisionCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiRevisionContract"
          },
          "description": "Page values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Api Revision list representation."
    },
    "ApiRevisionContract": {
      "properties": {
        "apiId": {
          "type": "string",
          "readOnly": true,
          "description": "Identifier of the API Revision."
        },
        "apiRevision": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100,
          "readOnly": true,
          "description": "Revision number of API."
        },
        "createdDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API Revision was created. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard."
        },
        "updatedDateTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The time the API Revision were updated. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard."
        },
        "description": {
          "type": "string",
          "readOnly": true,
          "maxLength": 256,
          "description": "Description of the API Revision."
        },
        "privateUrl": {
          "type": "string",
          "readOnly": true,
          "description": "Gateway URL for accessing the non-current API Revision."
        },
        "isOnline": {
          "type": "boolean",
          "readOnly": true,
          "description": "Indicates if API revision is the current api revision."
        },
        "isCurrent": {
          "type": "boolean",
          "readOnly": true,
          "description": "Indicates if API revision is accessible via the gateway."
        }
      },
      "description": "Summary of revision metadata."
    },
    "ApiRevisionInfoContract": {
      "description": "Object used to create an API Revision or Version based on an existing API Revision",
      "properties": {
        "sourceApiId": {
          "type": "string",
          "description": "Resource identifier of API to be used to create the revision from."
        },
        "apiVersionName": {
          "type": "string",
          "maxLength": 100,
          "description": "Version identifier for the new API Version."
        },
        "apiRevisionDescription": {
          "type": "string",
          "maxLength": 256,
          "description": "Description of new API Revision."
        },
        "apiVersionSet": {
          "description": "Version set details",
          "$ref": "#/definitions/ApiVersionSetContractDetails"
        }
      }
    },
    "ApiTagResourceContractProperties": {
      "properties": {
        "id": {
          "type": "string",
          "description": "API identifier in the form /apis/{apiId}."
        },
        "name": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        }
      },
      "allOf": [
        {
          "$ref": "./definitions.json#/definitions/ApiEntityBaseContract"
        }
      ],
      "description": "API contract properties for the Tag Resources."
    },
    "ApiUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiContractUpdateProperties",
          "description": "Properties of the API entity that can be updated."
        }
      },
      "description": "API update contract details."
    },
    "ApiVersionSetCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiVersionSetContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Api Version Set list representation."
    },
    "ApiVersionSetContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiVersionSetContractProperties",
          "description": "Api VersionSet contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Api Version Set Contract details."
    },
    "ApiVersionSetContractDetails": {
      "description": "An API Version Set contains the common configuration for a set of API Versions relating ",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier for existing API Version Set. Omit this value to create a new Version Set."
        },
        "description": {
          "type": "string",
          "description": "Description of API Version Set."
        },
        "versioningScheme": {
          "type": "string",
          "description": "An value that determines where the API Version identifier will be located in a HTTP request.",
          "enum": [
            "Segment",
            "Query",
            "Header"
          ]
        },
        "versionQueryName": {
          "type": "string",
          "description": "Name of query parameter that indicates the API Version if versioningScheme is set to `query`."
        },
        "versionHeaderName": {
          "type": "string",
          "description": "Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`."
        }
      }
    },
    "ApiVersionSetContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Name of API Version Set",
          "minLength": 1,
          "maxLength": 100
        },
        "versioningScheme": {
          "type": "string",
          "description": "An value that determines where the API Version identifier will be located in a HTTP request.",
          "enum": [
            "Segment",
            "Query",
            "Header"
          ],
          "x-ms-enum": {
            "name": "versioningScheme",
            "modelAsString": true,
            "values": [
              {
                "value": "Segment",
                "description": "The API Version is passed in a path segment."
              },
              {
                "value": "Query",
                "description": "The API Version is passed in a query parameter."
              },
              {
                "value": "Header",
                "description": "The API Version is passed in a HTTP header."
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiVersionSetEntityBase"
        }
      ],
      "required": [
        "displayName",
        "versioningScheme"
      ],
      "description": "Properties of an API Version Set."
    },
    "ApiVersionSetEntityBase": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of API Version Set."
        },
        "versionQueryName": {
          "type": "string",
          "description": "Name of query parameter that indicates the API Version if versioningScheme is set to `query`.",
          "minLength": 1,
          "maxLength": 100
        },
        "versionHeaderName": {
          "type": "string",
          "description": "Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.",
          "minLength": 1,
          "maxLength": 100
        }
      },
      "description": "Api Version set base parameters"
    },
    "ApiVersionSetUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiVersionSetUpdateParametersProperties",
          "description": "Parameters to update or create an Api Version Set Contract."
        }
      },
      "description": "Parameters to update or create an Api Version Set Contract."
    },
    "ApiVersionSetUpdateParametersProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Name of API Version Set",
          "minLength": 1,
          "maxLength": 100
        },
        "versioningScheme": {
          "type": "string",
          "description": "An value that determines where the API Version identifier will be located in a HTTP request.",
          "enum": [
            "Segment",
            "Query",
            "Header"
          ],
          "x-ms-enum": {
            "name": "versioningScheme",
            "modelAsString": true,
            "values": [
              {
                "value": "Segment",
                "description": "The API Version is passed in a path segment."
              },
              {
                "value": "Query",
                "description": "The API Version is passed in a query parameter."
              },
              {
                "value": "Header",
                "description": "The API Version is passed in a HTTP header."
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiVersionSetEntityBase"
        }
      ],
      "description": "Properties used to create or update an API Version Set."
    },
    "AuthenticationSettingsContract": {
      "properties": {
        "oAuth2": {
          "$ref": "#/definitions/OAuth2AuthenticationSettingsContract",
          "description": "OAuth2 Authentication settings"
        },
        "openid": {
          "$ref": "#/definitions/OpenIdAuthenticationSettingsContract",
          "description": "OpenID Connect Authentication Settings"
        },
        "subscriptionKeyRequired": {
          "type": "boolean",
          "description": "Specifies whether subscription key is required during call to this API, true - API is included into closed products only, false - API is included into open products alone, null - there is a mix of products."
        }
      },
      "description": "API Authentication Settings."
    },
    "AuthorizationServerCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationServerContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total record count number across all pages."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged OAuth2 Authorization Servers list representation."
    },
    "AuthorizationServerContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/AuthorizationServerContractProperties",
          "description": "Properties of the External OAuth authorization server Contract."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "External OAuth authorization server settings."
    },
    "AuthorizationServerContractBaseProperties": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the authorization server. Can contain HTML formatting tags."
        },
        "authorizationMethods": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "HEAD",
              "OPTIONS",
              "TRACE",
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ],
            "x-ms-enum": {
              "name": "AuthorizationMethod",
              "modelAsString": false
            }
          },
          "description": "HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional."
        },
        "clientAuthenticationMethod": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Basic",
              "Body"
            ],
            "x-ms-enum": {
              "name": "ClientAuthenticationMethod",
              "modelAsString": true,
              "values": [
                {
                  "value": "Basic",
                  "description": "Basic Client Authentication method."
                },
                {
                  "value": "Body",
                  "description": "Body based Authentication method."
                }
              ]
            }
          },
          "description": "Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format."
        },
        "tokenBodyParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenBodyParameterContract"
          },
          "description": "Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {\"name\" : \"name value\", \"value\": \"a value\"}."
        },
        "tokenEndpoint": {
          "type": "string",
          "description": "OAuth token endpoint. Contains absolute URI to entity being referenced.",
          "externalDocs": {
            "url": "http://tools.ietf.org/html/rfc6749#section-3.1"
          }
        },
        "supportState": {
          "type": "boolean",
          "description": "If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.",
          "externalDocs": {
            "url": "http://tools.ietf.org/html/rfc6749#section-3.1"
          }
        },
        "defaultScope": {
          "type": "string",
          "description": "Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.",
          "externalDocs": {
            "url": "http://tools.ietf.org/html/rfc6749#section-3.3"
          }
        },
        "bearerTokenSendingMethods": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "authorizationHeader",
              "query"
            ],
            "x-ms-enum": {
              "name": "BearerTokenSendingMethod",
              "modelAsString": true
            }
          },
          "description": "Specifies the mechanism by which access token is passed to the API. ",
          "externalDocs": {
            "url": "http://tools.ietf.org/html/rfc6749#section-4"
          }
        },
        "clientSecret": {
          "type": "string",
          "description": "Client or app secret registered with this authorization server."
        },
        "resourceOwnerUsername": {
          "type": "string",
          "description": "Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username."
        },
        "resourceOwnerPassword": {
          "type": "string",
          "description": "Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password."
        }
      },
      "description": "External OAuth authorization server Update settings contract."
    },
    "AuthorizationServerContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "User-friendly authorization server name.",
          "minLength": 1,
          "maxLength": 50
        },
        "clientRegistrationEndpoint": {
          "type": "string",
          "description": "Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced."
        },
        "authorizationEndpoint": {
          "type": "string",
          "description": "OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2."
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "authorizationCode",
              "implicit",
              "resourceOwnerPassword",
              "clientCredentials"
            ],
            "x-ms-enum": {
              "name": "GrantType",
              "modelAsString": true,
              "values": [
                {
                  "value": "authorizationCode",
                  "description": "Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1."
                },
                {
                  "value": "implicit",
                  "description": "Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2."
                },
                {
                  "value": "resourceOwnerPassword",
                  "description": "Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3."
                },
                {
                  "value": "clientCredentials",
                  "description": "Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4."
                }
              ]
            }
          },
          "description": "Form of an authorization grant, which the client uses to request the access token.",
          "externalDocs": {
            "url": "http://tools.ietf.org/html/rfc6749#section-4"
          }
        },
        "clientId": {
          "type": "string",
          "description": "Client or app id registered with this authorization server."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AuthorizationServerContractBaseProperties"
        }
      ],
      "required": [
        "displayName",
        "clientRegistrationEndpoint",
        "authorizationEndpoint",
        "clientId",
        "grantTypes"
      ],
      "description": "External OAuth authorization server settings Properties."
    },
    "AuthorizationServerUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/AuthorizationServerUpdateContractProperties",
          "description": "Properties of the External OAuth authorization server update Contract."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "External OAuth authorization server settings."
    },
    "AuthorizationServerUpdateContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "User-friendly authorization server name.",
          "minLength": 1,
          "maxLength": 50
        },
        "clientRegistrationEndpoint": {
          "type": "string",
          "description": "Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced."
        },
        "authorizationEndpoint": {
          "type": "string",
          "description": "OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2."
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "authorizationCode",
              "implicit",
              "resourceOwnerPassword",
              "clientCredentials"
            ],
            "x-ms-enum": {
              "name": "GrantType",
              "modelAsString": true,
              "values": [
                {
                  "value": "authorizationCode",
                  "description": "Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1."
                },
                {
                  "value": "implicit",
                  "description": "Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2."
                },
                {
                  "value": "resourceOwnerPassword",
                  "description": "Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3."
                },
                {
                  "value": "clientCredentials",
                  "description": "Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4."
                }
              ]
            }
          },
          "description": "Form of an authorization grant, which the client uses to request the access token.",
          "externalDocs": {
            "url": "http://tools.ietf.org/html/rfc6749#section-4"
          }
        },
        "clientId": {
          "type": "string",
          "description": "Client or app id registered with this authorization server."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AuthorizationServerContractBaseProperties"
        }
      ],
      "description": "External OAuth authorization server Update settings contract."
    },
    "BackendAuthorizationHeaderCredentials": {
      "properties": {
        "scheme": {
          "type": "string",
          "description": "Authentication Scheme name.",
          "minLength": 1,
          "maxLength": 100
        },
        "parameter": {
          "type": "string",
          "description": "Authentication Parameter value.",
          "minLength": 1,
          "maxLength": 300
        }
      },
      "required": [
        "scheme",
        "parameter"
      ],
      "description": "Authorization header information."
    },
    "BackendBaseParameters": {
      "properties": {
        "title": {
          "type": "string",
          "description": "Backend Title.",
          "minLength": 1,
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Backend Description.",
          "minLength": 1,
          "maxLength": 2000
        },
        "resourceId": {
          "type": "string",
          "description": "Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.",
          "minLength": 1,
          "maxLength": 2000
        },
        "properties": {
          "$ref": "#/definitions/BackendProperties",
          "description": "Backend Properties contract"
        },
        "credentials": {
          "$ref": "#/definitions/BackendCredentialsContract",
          "description": "Backend Credentials Contract Properties"
        },
        "proxy": {
          "$ref": "#/definitions/BackendProxyContract",
          "description": "Backend Proxy Contract Properties"
        },
        "tls": {
          "$ref": "#/definitions/BackendTlsProperties",
          "description": "Backend TLS Properties"
        }
      },
      "description": "Backend entity base Parameter set."
    },
    "BackendCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BackendContract"
          },
          "description": "Backend values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Backend list representation."
    },
    "BackendContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/BackendContractProperties",
          "description": "Backend entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Backend details."
    },
    "BackendContractProperties": {
      "properties": {
        "url": {
          "type": "string",
          "description": "Runtime Url of the Backend.",
          "minLength": 1,
          "maxLength": 2000
        },
        "protocol": {
          "type": "string",
          "enum": [
            "http",
            "soap"
          ],
          "x-ms-enum": {
            "name": "BackendProtocol",
            "modelAsString": true,
            "values": [
              {
                "value": "http",
                "description": "The Backend is a RESTful service."
              },
              {
                "value": "soap",
                "description": "The Backend is a SOAP service."
              }
            ]
          },
          "description": "Backend communication protocol."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BackendBaseParameters"
        }
      ],
      "required": [
        "url",
        "protocol"
      ],
      "description": "Parameters supplied to the Create Backend operation."
    },
    "BackendCredentialsContract": {
      "properties": {
        "certificate": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 32,
          "description": "List of Client Certificate Thumbprint."
        },
        "query": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": "Query Parameter description."
        },
        "header": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": "Header Parameter description."
        },
        "authorization": {
          "description": "Authorization header authentication",
          "$ref": "#/definitions/BackendAuthorizationHeaderCredentials"
        }
      },
      "description": "Details of the Credentials used to connect to Backend."
    },
    "BackendProperties": {
      "properties": {
        "serviceFabricCluster": {
          "$ref": "#/definitions/BackendServiceFabricClusterProperties",
          "description": "Backend Service Fabric Cluster Properties"
        }
      },
      "description": "Properties specific to the Backend Type."
    },
    "BackendProxyContract": {
      "externalDocs": {
        "url": "https://msdn.microsoft.com/en-us/library/system.net.webproxy(v=vs.110).aspx",
        "description": "Backend entity uses these details to connect to a WebProxy."
      },
      "properties": {
        "url": {
          "type": "string",
          "description": "WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.",
          "minLength": 1,
          "maxLength": 2000
        },
        "username": {
          "type": "string",
          "description": "Username to connect to the WebProxy server"
        },
        "password": {
          "type": "string",
          "description": "Password to connect to the WebProxy Server"
        }
      },
      "required": [
        "url"
      ],
      "description": "Details of the Backend WebProxy Server to use in the Request to Backend."
    },
    "BackendReconnectContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/BackendReconnectProperties",
          "description": "Reconnect request properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Reconnect request parameters."
    },
    "BackendReconnectProperties": {
      "properties": {
        "after": {
          "type": "string",
          "format": "duration",
          "description": "Duration in ISO8601 format after which reconnect will be initiated. Minimum duration of the Reconnect is PT2M."
        }
      },
      "description": "Properties to control reconnect requests."
    },
    "BackendServiceFabricClusterProperties": {
      "properties": {
        "clientCertificatethumbprint": {
          "description": "The client certificate thumbprint for the management endpoint.",
          "type": "string"
        },
        "maxPartitionResolutionRetries": {
          "description": "Maximum number of retries while attempting resolve the partition.",
          "format": "int32",
          "type": "integer"
        },
        "managementEndpoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The cluster management endpoint."
        },
        "serverCertificateThumbprints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Thumbprints of certificates cluster management service uses for tls communication"
        },
        "serverX509Names": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/X509CertificateName"
          },
          "description": "Server X509 Certificate Names Collection"
        }
      },
      "required": [
        "managementEndpoints",
        "clientCertificatethumbprint"
      ],
      "description": "Properties of the Service Fabric Type Backend."
    },
    "BackendTlsProperties": {
      "properties": {
        "validateCertificateChain": {
          "description": "Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.",
          "type": "boolean",
          "default": true
        },
        "validateCertificateName": {
          "description": "Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.",
          "type": "boolean",
          "default": true
        }
      },
      "description": "Properties controlling TLS Certificate Validation."
    },
    "BackendUpdateParameterProperties": {
      "properties": {
        "url": {
          "type": "string",
          "description": "Runtime Url of the Backend.",
          "minLength": 1,
          "maxLength": 2000
        },
        "protocol": {
          "type": "string",
          "enum": [
            "http",
            "soap"
          ],
          "x-ms-enum": {
            "name": "BackendProtocol",
            "modelAsString": true,
            "values": [
              {
                "value": "http",
                "description": "The Backend is a RESTful service."
              },
              {
                "value": "soap",
                "description": "The Backend is a SOAP service."
              }
            ]
          },
          "description": "Backend communication protocol."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BackendBaseParameters"
        }
      ],
      "description": "Parameters supplied to the Update Backend operation."
    },
    "BackendUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/BackendUpdateParameterProperties",
          "description": "Backend entity update contract properties."
        }
      },
      "description": "Backend update parameters."
    },
    "BearerTokenSendingMethodsContract": {
      "type": "string",
      "description": "Form of an authorization grant, which the client uses to request the access token.",
      "enum": [
        "authorizationHeader",
        "query"
      ],
      "x-ms-enum": {
        "modelAsString": true,
        "name": "bearerTokenSendingMethods",
        "values": [
          {
            "value": "authorizationHeader",
            "description": "Access token will be transmitted in the Authorization header using Bearer schema"
          },
          {
            "value": "query",
            "description": "Access token will be transmitted as query parameters."
          }
        ]
      }
    },
    "BodyDiagnosticSettings": {
      "properties": {
        "bytes": {
          "type": "integer",
          "format": "int32",
          "maximum": 8192,
          "description": "Number of request body bytes to log."
        }
      },
      "description": "Body logging settings."
    },
    "CacheCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CacheContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Caches list representation."
    },
    "CacheContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/CacheContractProperties",
          "description": "Cache properties details."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Cache details."
    },
    "CacheContractProperties": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Cache description",
          "maxLength": 2000
        },
        "connectionString": {
          "type": "string",
          "description": "Runtime connection string to cache",
          "maxLength": 300
        },
        "resourceId": {
          "type": "string",
          "description": "Original uri of entity in external system cache points to",
          "maxLength": 2000
        }
      },
      "required": [
        "connectionString"
      ],
      "description": "Properties of the Cache contract."
    },
    "CacheUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/CacheUpdateProperties",
          "description": "Cache update properties details."
        }
      },
      "description": "Cache update details."
    },
    "CacheUpdateProperties": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Cache description",
          "maxLength": 2000
        },
        "connectionString": {
          "type": "string",
          "description": "Runtime connection string to cache",
          "maxLength": 300
        },
        "resourceId": {
          "type": "string",
          "description": "Original uri of entity in external system cache points to",
          "maxLength": 2000
        }
      },
      "description": "Parameters supplied to the Update Cache operation."
    },
    "CertificateCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Certificates list representation."
    },
    "CertificateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/CertificateContractProperties",
          "description": "Certificate properties details."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Certificate details."
    },
    "CertificateContractProperties": {
      "properties": {
        "subject": {
          "type": "string",
          "description": "Subject attribute of the certificate."
        },
        "thumbprint": {
          "type": "string",
          "description": "Thumbprint of the certificate."
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        }
      },
      "required": [
        "subject",
        "thumbprint",
        "expirationDate"
      ],
      "description": "Properties of the Certificate contract."
    },
    "CertificateCreateOrUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/CertificateCreateOrUpdateProperties",
          "description": "Certificate create or update properties details."
        }
      },
      "description": "Certificate create or update details."
    },
    "CertificateCreateOrUpdateProperties": {
      "properties": {
        "data": {
          "type": "string",
          "description": "Base 64 encoded certificate using the application/x-pkcs12 representation."
        },
        "password": {
          "type": "string",
          "description": "Password for the Certificate"
        }
      },
      "required": [
        "data",
        "password"
      ],
      "description": "Parameters supplied to the CreateOrUpdate certificate operation."
    },
    "CurrentUserIdentity": {
      "properties": {
        "id": {
          "type": "string",
          "description": "API Management service user id."
        }
      }
    },
    "DeployConfigurationParameters": {
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the Git branch from which the configuration is to be deployed to the configuration database."
        },
        "force": {
          "type": "boolean",
          "description": "The value enforcing deleting subscriptions to products that are deleted in this update."
        }
      },
      "required": [
        "branch"
      ],
      "description": "Parameters supplied to the Deploy Configuration operation."
    },
    "DiagnosticCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Diagnostic list representation."
    },
    "DiagnosticContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/DiagnosticContractProperties",
          "description": "Diagnostic entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Diagnostic details."
    },
    "DiagnosticContractProperties": {
      "properties": {
        "alwaysLog": {
          "type": "string",
          "enum": [
            "allErrors"
          ],
          "x-ms-enum": {
            "name": "AlwaysLog",
            "modelAsString": true,
            "values": [
              {
                "value": "allErrors",
                "description": "Always log all erroneous request regardless of sampling settings."
              }
            ]
          },
          "description": "Specifies for what type of messages sampling settings should not apply."
        },
        "loggerId": {
          "type": "string",
          "description": "Resource Id of a target logger."
        },
        "sampling": {
          "$ref": "#/definitions/SamplingSettings",
          "description": "Sampling settings for Diagnostic."
        },
        "frontend": {
          "$ref": "#/definitions/PipelineDiagnosticSettings",
          "description": "Diagnostic settings for incoming/outgoing HTTP messages to the Gateway."
        },
        "backend": {
          "$ref": "#/definitions/PipelineDiagnosticSettings",
          "description": "Diagnostic settings for incoming/outgoing HTTP messages to the Backend"
        },
        "enableHttpCorrelationHeaders": {
          "type": "boolean",
          "description": "Whether to process Correlation Headers coming to Api Management Service. Only applicable to Application Insights diagnostics. Default is true."
        }
      },
      "required": [
        "loggerId"
      ],
      "description": "Diagnostic Entity Properties"
    },
    "EmailTemplateCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailTemplateContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged email template list representation."
    },
    "EmailTemplateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/EmailTemplateContractProperties",
          "description": "Email Template entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Email Template details."
    },
    "EmailTemplateContractProperties": {
      "properties": {
        "subject": {
          "type": "string",
          "description": "Subject of the Template.",
          "minLength": 1,
          "maxLength": 1000
        },
        "body": {
          "type": "string",
          "description": "Email Template Body. This should be a valid XDocument",
          "minLength": 1
        },
        "title": {
          "type": "string",
          "description": "Title of the Template."
        },
        "description": {
          "type": "string",
          "description": "Description of the Email Template."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Whether the template is the default template provided by Api Management or has been edited.",
          "readOnly": true
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailTemplateParametersContractProperties"
          },
          "description": "Email Template Parameter values."
        }
      },
      "required": [
        "body",
        "subject"
      ],
      "description": "Email Template Contract properties."
    },
    "EmailTemplateParametersContractProperties": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Template parameter name.",
          "minLength": 1,
          "maxLength": 256,
          "pattern": "^[A-Za-z0-9-._]+$"
        },
        "title": {
          "type": "string",
          "description": "Template parameter title.",
          "minLength": 1,
          "maxLength": 4096
        },
        "description": {
          "type": "string",
          "description": "Template parameter description.",
          "minLength": 1,
          "maxLength": 256,
          "pattern": "^[A-Za-z0-9-._]+$"
        }
      },
      "description": "Email Template Parameter contract."
    },
    "EmailTemplateUpdateParameterProperties": {
      "properties": {
        "subject": {
          "type": "string",
          "description": "Subject of the Template.",
          "minLength": 1,
          "maxLength": 1000
        },
        "title": {
          "type": "string",
          "description": "Title of the Template."
        },
        "description": {
          "type": "string",
          "description": "Description of the Email Template."
        },
        "body": {
          "type": "string",
          "description": "Email Template Body. This should be a valid XDocument",
          "minLength": 1
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailTemplateParametersContractProperties"
          },
          "description": "Email Template Parameter values."
        }
      },
      "description": "Email Template Update Contract properties."
    },
    "EmailTemplateUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/EmailTemplateUpdateParameterProperties",
          "description": "Email Template Update contract properties."
        }
      },
      "description": "Email Template update Parameters."
    },
    "GenerateSsoUrlResult": {
      "properties": {
        "value": {
          "type": "string",
          "description": "Redirect Url containing the SSO URL value."
        }
      },
      "description": "Generate SSO Url operations response details."
    },
    "GroupCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Group list representation."
    },
    "GroupContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/GroupContractProperties",
          "description": "Group entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Contract details."
    },
    "GroupContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Group name.",
          "maxLength": 300,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Group description. Can contain HTML formatting tags.",
          "maxLength": 1000
        },
        "builtIn": {
          "readOnly": true,
          "type": "boolean",
          "description": "true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false."
        },
        "type": {
          "type": "string",
          "description": "Group type.",
          "enum": [
            "custom",
            "system",
            "external"
          ],
          "x-ms-enum": {
            "name": "GroupType",
            "modelAsString": false
          }
        },
        "externalId": {
          "type": "string",
          "description": "For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null."
        }
      },
      "required": [
        "displayName"
      ],
      "description": "Group contract Properties."
    },
    "GroupCreateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/GroupCreateParametersProperties",
          "description": "Properties supplied to Create Group operation."
        }
      },
      "description": "Parameters supplied to the Create Group operation."
    },
    "GroupCreateParametersProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Group name.",
          "maxLength": 300,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Group description."
        },
        "type": {
          "type": "string",
          "description": "Group type.",
          "enum": [
            "custom",
            "system",
            "external"
          ],
          "x-ms-enum": {
            "name": "GroupType",
            "modelAsString": false
          }
        },
        "externalId": {
          "type": "string",
          "description": "Identifier of the external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null."
        }
      },
      "required": [
        "displayName"
      ],
      "description": "Parameters supplied to the Create Group operation."
    },
    "GroupUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/GroupUpdateParametersProperties",
          "description": "Group entity update contract properties."
        }
      },
      "description": "Parameters supplied to the Update Group operation."
    },
    "GroupUpdateParametersProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Group name.",
          "maxLength": 300,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Group description."
        },
        "type": {
          "type": "string",
          "description": "Group type.",
          "enum": [
            "custom",
            "system",
            "external"
          ],
          "x-ms-enum": {
            "name": "GroupType",
            "modelAsString": false
          }
        },
        "externalId": {
          "type": "string",
          "description": "Identifier of the external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null."
        }
      },
      "description": "Parameters supplied to the Update Group operation."
    },
    "HttpMessageDiagnostic": {
      "properties": {
        "headers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of HTTP Headers to log."
        },
        "body": {
          "$ref": "#/definitions/BodyDiagnosticSettings",
          "description": "Body logging settings."
        }
      },
      "description": "Http message diagnostic settings."
    },
    "IdentityProviderBaseParameters": {
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "facebook",
            "google",
            "microsoft",
            "twitter",
            "aad",
            "aadB2C"
          ],
          "x-ms-enum": {
            "name": "IdentityProviderType",
            "modelAsString": true,
            "values": [
              {
                "value": "facebook",
                "description": "Facebook as Identity provider."
              },
              {
                "value": "google",
                "description": "Google as Identity provider."
              },
              {
                "value": "microsoft",
                "description": "Microsoft Live as Identity provider."
              },
              {
                "value": "twitter",
                "description": "Twitter as Identity provider."
              },
              {
                "value": "aad",
                "description": "Azure Active Directory as Identity provider."
              },
              {
                "value": "aadB2C",
                "description": "Azure Active Directory B2C as Identity provider."
              }
            ]
          },
          "description": "Identity Provider Type identifier."
        },
        "allowedTenants": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 32,
          "description": "List of Allowed Tenants when configuring Azure Active Directory login."
        },
        "authority": {
          "type": "string",
          "description": "OpenID Connect discovery endpoint hostname for AAD or AAD B2C."
        },
        "signupPolicyName": {
          "type": "string",
          "description": "Signup Policy Name. Only applies to AAD B2C Identity Provider.",
          "minLength": 1
        },
        "signinPolicyName": {
          "type": "string",
          "description": "Signin Policy Name. Only applies to AAD B2C Identity Provider.",
          "minLength": 1
        },
        "profileEditingPolicyName": {
          "type": "string",
          "description": "Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.",
          "minLength": 1
        },
        "passwordResetPolicyName": {
          "type": "string",
          "description": "Password Reset Policy Name. Only applies to AAD B2C Identity Provider.",
          "minLength": 1
        }
      },
      "description": "Identity Provider Base Parameter Properties."
    },
    "IdentityProviderContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/IdentityProviderContractProperties",
          "description": "Identity Provider contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Identity Provider details."
    },
    "IdentityProviderContractProperties": {
      "properties": {
        "clientId": {
          "type": "string",
          "description": "Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.",
          "minLength": 1
        },
        "clientSecret": {
          "type": "string",
          "description": "Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.",
          "minLength": 1
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/IdentityProviderBaseParameters"
        }
      ],
      "required": [
        "clientId",
        "clientSecret"
      ],
      "description": "The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users."
    },
    "IdentityProviderList": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityProviderContract"
          },
          "description": "Identity Provider configuration values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "List of all the Identity Providers configured on the service instance."
    },
    "IdentityProviderUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/IdentityProviderUpdateProperties",
          "description": "Identity Provider update properties."
        }
      },
      "description": "Parameters supplied to update Identity Provider"
    },
    "IdentityProviderUpdateProperties": {
      "properties": {
        "clientId": {
          "type": "string",
          "description": "Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.",
          "minLength": 1
        },
        "clientSecret": {
          "type": "string",
          "description": "Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.",
          "minLength": 1
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/IdentityProviderBaseParameters"
        }
      ],
      "description": "Parameters supplied to the Update Identity Provider operation."
    },
    "IssueAttachmentCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueAttachmentContract"
          },
          "description": "Issue Attachment values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Issue Attachment list representation."
    },
    "IssueAttachmentContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/IssueAttachmentContractProperties",
          "description": "Properties of the Issue Attachment."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Issue Attachment Contract details."
    },
    "IssueAttachmentContractProperties": {
      "properties": {
        "title": {
          "type": "string",
          "description": "Filename by which the binary data will be saved."
        },
        "contentFormat": {
          "type": "string",
          "description": "Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property."
        },
        "content": {
          "type": "string",
          "description": "An HTTP link or Base64-encoded binary data."
        }
      },
      "required": [
        "title",
        "contentFormat",
        "content"
      ],
      "description": "Issue Attachment contract Properties."
    },
    "IssueCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueContract"
          },
          "description": "Issue values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Issue list representation."
    },
    "IssueCommentCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueCommentContract"
          },
          "description": "Issue Comment values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Issue Comment list representation."
    },
    "IssueCommentContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/IssueCommentContractProperties",
          "description": "Properties of the Issue Comment."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Issue Comment Contract details."
    },
    "IssueCommentContractProperties": {
      "properties": {
        "text": {
          "type": "string",
          "description": "Comment text."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the comment was created."
        },
        "userId": {
          "type": "string",
          "description": "A resource identifier for the user who left the comment."
        }
      },
      "required": [
        "text",
        "userId"
      ],
      "description": "Issue Comment contract Properties."
    },
    "IssueContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/IssueContractProperties",
          "description": "Properties of the Issue."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Issue Contract details."
    },
    "IssueContractBaseProperties": {
      "properties": {
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the issue was created."
        },
        "state": {
          "type": "string",
          "description": "Status of the issue.",
          "enum": [
            "proposed",
            "open",
            "removed",
            "resolved",
            "closed"
          ],
          "x-ms-enum": {
            "name": "State",
            "modelAsString": true,
            "values": [
              {
                "value": "proposed",
                "description": "The issue is proposed."
              },
              {
                "value": "open",
                "description": "The issue is opened."
              },
              {
                "value": "removed",
                "description": "The issue was removed."
              },
              {
                "value": "resolved",
                "description": "The issue is now resolved."
              },
              {
                "value": "closed",
                "description": "The issue was closed."
              }
            ]
          }
        },
        "apiId": {
          "type": "string",
          "description": "A resource identifier for the API the issue was created for."
        }
      },
      "description": "Issue contract Base Properties."
    },
    "IssueContractProperties": {
      "properties": {
        "title": {
          "type": "string",
          "description": "The issue title."
        },
        "description": {
          "type": "string",
          "description": "Text describing the issue."
        },
        "userId": {
          "type": "string",
          "description": "A resource identifier for the user created the issue."
        }
      },
      "required": [
        "title",
        "description",
        "userId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/IssueContractBaseProperties"
        }
      ],
      "description": "Issue contract Properties."
    },
    "IssueUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/IssueUpdateContractProperties",
          "description": "Issue entity Update contract properties."
        }
      },
      "description": "Issue update Parameters."
    },
    "IssueUpdateContractProperties": {
      "properties": {
        "title": {
          "type": "string",
          "description": "The issue title."
        },
        "description": {
          "type": "string",
          "description": "Text describing the issue."
        },
        "userId": {
          "type": "string",
          "description": "A resource identifier for the user created the issue."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/IssueContractBaseProperties"
        }
      ],
      "description": "Issue contract Update Properties."
    },
    "LoggerCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoggerContract"
          },
          "description": "Logger values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total record count number across all pages."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Logger list representation."
    },
    "LoggerContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/LoggerContractProperties",
          "description": "Logger entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Logger details."
    },
    "LoggerContractProperties": {
      "properties": {
        "loggerType": {
          "type": "string",
          "description": "Logger type.",
          "enum": [
            "azureEventHub",
            "applicationInsights"
          ],
          "x-ms-enum": {
            "name": "LoggerType",
            "modelAsString": true,
            "values": [
              {
                "value": "azureEventHub",
                "description": "Azure Event Hub as log destination."
              },
              {
                "value": "applicationInsights",
                "description": "Azure Application Insights as log destination."
              }
            ]
          }
        },
        "description": {
          "type": "string",
          "description": "Logger description.",
          "maxLength": 256
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The name and SendRule connection string of the event hub for azureEventHub logger.\nInstrumentation key for applicationInsights logger.",
          "example": {
            "name": "apim",
            "connectionString": "Endpoint=sb://contoso-ns.servicebus.windows.net/;SharedAccessKeyName=Sender;SharedAccessKey=..."
          }
        },
        "isBuffered": {
          "type": "boolean",
          "description": "Whether records are buffered in the logger before publishing. Default is assumed to be true."
        },
        "resourceId": {
          "type": "string",
          "description": "Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource)."
        }
      },
      "required": [
        "loggerType",
        "credentials"
      ],
      "description": "The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure Event Hubs."
    },
    "LoggerUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/LoggerUpdateParameters",
          "description": "Logger entity update contract properties."
        }
      },
      "description": "Logger update contract."
    },
    "LoggerUpdateParameters": {
      "properties": {
        "loggerType": {
          "type": "string",
          "description": "Logger type.",
          "enum": [
            "azureEventHub",
            "applicationInsights"
          ],
          "x-ms-enum": {
            "name": "LoggerType",
            "modelAsString": true,
            "values": [
              {
                "value": "azureEventHub",
                "description": "Azure Event Hub as log destination."
              },
              {
                "value": "applicationInsights",
                "description": "Azure Application Insights as log destination."
              }
            ]
          }
        },
        "description": {
          "type": "string",
          "description": "Logger description."
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Logger credentials."
        },
        "isBuffered": {
          "type": "boolean",
          "description": "Whether records are buffered in the logger before publishing. Default is assumed to be true."
        }
      },
      "description": "Parameters supplied to the Update Logger operation."
    },
    "NotificationCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Notification list representation."
    },
    "NotificationContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/NotificationContractProperties",
          "description": "Notification entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Notification details."
    },
    "NotificationContractProperties": {
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the Notification.",
          "minLength": 1,
          "maxLength": 1000
        },
        "description": {
          "type": "string",
          "description": "Description of the Notification."
        },
        "recipients": {
          "$ref": "#/definitions/RecipientsContractProperties",
          "description": "Recipient Parameter values."
        }
      },
      "required": [
        "title"
      ],
      "description": "Notification Contract properties."
    },
    "OAuth2AuthenticationSettingsContract": {
      "properties": {
        "authorizationServerId": {
          "type": "string",
          "description": "OAuth authorization server identifier."
        },
        "scope": {
          "type": "string",
          "description": "operations scope."
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "OpenIdAuthenticationSettingsContract": {
      "properties": {
        "openidProviderId": {
          "type": "string",
          "description": "OAuth authorization server identifier."
        },
        "bearerTokenSendingMethods": {
          "description": "How to send token to the server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BearerTokenSendingMethodsContract"
          }
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "OpenIdConnectProviderCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpenidConnectProviderContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged OpenIdProviders list representation."
    },
    "OpenidConnectProviderContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/OpenidConnectProviderContractProperties",
          "description": "OpenId Connect Provider contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "OpenId Connect Provider details."
    },
    "OpenidConnectProviderContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "User-friendly OpenID Connect Provider name.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "User-friendly description of OpenID Connect Provider."
        },
        "metadataEndpoint": {
          "type": "string",
          "description": "Metadata endpoint URI."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID of developer console which is the client application."
        },
        "clientSecret": {
          "type": "string",
          "description": "Client Secret of developer console which is the client application."
        }
      },
      "required": [
        "displayName",
        "metadataEndpoint",
        "clientId"
      ],
      "description": "OpenID Connect Providers Contract."
    },
    "OpenidConnectProviderUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/OpenidConnectProviderUpdateContractProperties",
          "description": "OpenId Connect Provider Update contract properties."
        }
      },
      "description": "Parameters supplied to the Update OpenID Connect Provider operation."
    },
    "OpenidConnectProviderUpdateContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "User-friendly OpenID Connect Provider name.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "User-friendly description of OpenID Connect Provider."
        },
        "metadataEndpoint": {
          "type": "string",
          "description": "Metadata endpoint URI."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID of developer console which is the client application."
        },
        "clientSecret": {
          "type": "string",
          "description": "Client Secret of developer console which is the client application."
        }
      },
      "description": "Parameters supplied to the Update OpenID Connect Provider operation."
    },
    "OperationCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationContract"
          },
          "description": "Page values.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "Paged Operation list representation."
    },
    "OperationContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/OperationContractProperties",
          "description": "Properties of the Operation Contract."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Api Operation details."
    },
    "OperationContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Operation Name.",
          "minLength": 1,
          "maxLength": 300
        },
        "method": {
          "type": "string",
          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
          "externalDocs": {
            "description": "As defined by RFC.",
            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
          }
        },
        "urlTemplate": {
          "type": "string",
          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
          "minLength": 1,
          "maxLength": 1000
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OperationEntityBaseContract"
        }
      ],
      "required": [
        "displayName",
        "method",
        "urlTemplate"
      ],
      "description": "Operation Contract Properties"
    },
    "OperationEntityBaseContract": {
      "properties": {
        "templateParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of URL template parameters."
        },
        "description": {
          "type": "string",
          "description": "Description of the operation. May include HTML formatting tags.",
          "maxLength": 1000
        },
        "request": {
          "$ref": "#/definitions/RequestContract",
          "description": "An entity containing request details."
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseContract"
          },
          "description": "Array of Operation responses."
        },
        "policies": {
          "type": "string",
          "description": "Operation Policies"
        }
      },
      "description": "Api Operation Entity Base Contract details."
    },
    "OperationResultContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Operation result identifier."
        },
        "status": {
          "type": "string",
          "description": "Status of an async operation.",
          "enum": [
            "Started",
            "InProgress",
            "Succeeded",
            "Failed"
          ],
          "x-ms-enum": {
            "name": "AsyncOperationStatus",
            "modelAsString": false
          }
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "Last update time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "resultInfo": {
          "type": "string",
          "description": "Optional result info."
        },
        "error": {
          "$ref": "./apimanagement.json#/definitions/ErrorResponseBody",
          "description": "Error Body Contract"
        },
        "actionLog": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationResultLogItemContract"
          },
          "readOnly": true,
          "description": "This property if only provided as part of the TenantConfiguration_Validate operation. It contains the log the entities which will be updated/created/deleted as part of the TenantConfiguration_Deploy operation."
        }
      },
      "description": "Operation Result."
    },
    "OperationResultLogItemContract": {
      "properties": {
        "objectType": {
          "type": "string",
          "description": "The type of entity contract."
        },
        "action": {
          "type": "string",
          "description": "Action like create/update/delete."
        },
        "objectKey": {
          "type": "string",
          "description": "Identifier of the entity being created/updated/deleted."
        }
      },
      "description": "Log of the entity being created, updated or deleted."
    },
    "OperationTagResourceContractProperties": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the operation in form /operations/{operationId}."
        },
        "name": {
          "type": "string",
          "description": "Operation name.",
          "readOnly": true
        },
        "apiName": {
          "type": "string",
          "description": "Api Name.",
          "readOnly": true
        },
        "apiRevision": {
          "type": "string",
          "description": "Api Revision.",
          "readOnly": true
        },
        "apiVersion": {
          "type": "string",
          "description": "Api Version.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Operation Description.",
          "readOnly": true
        },
        "method": {
          "type": "string",
          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
          "externalDocs": {
            "description": "As defined by RFC.",
            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
          },
          "readOnly": true
        },
        "urlTemplate": {
          "type": "string",
          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
          "readOnly": true
        }
      },
      "description": "Operation Entity contract Properties."
    },
    "OperationUpdateContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/OperationUpdateContractProperties",
          "description": "Properties of the API Operation entity that can be updated."
        }
      },
      "description": "Api Operation Update Contract details."
    },
    "OperationUpdateContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Operation Name.",
          "minLength": 1,
          "maxLength": 300
        },
        "method": {
          "type": "string",
          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
          "externalDocs": {
            "description": "As defined by RFC.",
            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
          }
        },
        "urlTemplate": {
          "type": "string",
          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
          "minLength": 1,
          "maxLength": 1000
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OperationEntityBaseContract"
        }
      ],
      "description": "Operation Update Contract Properties."
    },
    "ParameterContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Parameter name."
        },
        "description": {
          "type": "string",
          "description": "Parameter description."
        },
        "type": {
          "type": "string",
          "description": "Parameter type."
        },
        "defaultValue": {
          "type": "string",
          "description": "Default parameter value."
        },
        "required": {
          "type": "boolean",
          "description": "whether parameter is required or not."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parameter values."
        }
      },
      "required": [
        "name",
        "type"
      ],
      "description": "Operation parameters details."
    },
    "PipelineDiagnosticSettings": {
      "properties": {
        "request": {
          "$ref": "#/definitions/HttpMessageDiagnostic",
          "description": "Diagnostic settings for request."
        },
        "response": {
          "$ref": "#/definitions/HttpMessageDiagnostic",
          "description": "Diagnostic settings for response."
        }
      },
      "description": "Diagnostic settings for incoming/outgoing HTTP messages to the Gateway."
    },
    "PolicyCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyContract"
          },
          "description": "Policy Contract value."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "The response of the list policy operation."
    },
    "PolicyContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PolicyContractProperties",
          "description": "Properties of the Policy."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Policy Contract details."
    },
    "PolicyContractProperties": {
      "properties": {
        "policyContent": {
          "type": "string",
          "description": "Json escaped Xml Encoded contents of the Policy."
        },
        "contentFormat": {
          "type": "string",
          "description": "Format of the policyContent.",
          "enum": [
            "xml",
            "xml-link",
            "rawxml",
            "rawxml-link"
          ],
          "x-ms-enum": {
            "name": "PolicyContentFormat",
            "modelAsString": true,
            "values": [
              {
                "value": "xml",
                "description": "The contents are inline and Content type is an XML document."
              },
              {
                "value": "xml-link",
                "description": "The policy XML document is hosted on a http endpoint accessible from the API Management service."
              },
              {
                "value": "rawxml",
                "description": "The contents are inline and Content type is a non XML encoded policy document."
              },
              {
                "value": "rawxml-link",
                "description": "The policy document is not Xml encoded and is hosted on a http endpoint accessible from the API Management service."
              }
            ]
          },
          "default": "xml"
        }
      },
      "required": [
        "policyContent"
      ],
      "description": "Policy contract Properties."
    },
    "PolicySnippetContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Snippet name.",
          "readOnly": true
        },
        "content": {
          "type": "string",
          "description": "Snippet content.",
          "readOnly": true
        },
        "toolTip": {
          "type": "string",
          "description": "Snippet toolTip.",
          "readOnly": true
        },
        "scope": {
          "type": "integer",
          "description": "Binary OR value of the Snippet scope.",
          "readOnly": true
        }
      },
      "description": "Policy snippet."
    },
    "PolicySnippetsCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicySnippetContract"
          },
          "description": "Policy snippet value."
        }
      },
      "description": "The response of the list policy snippets operation."
    },
    "PortalDelegationSettings": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PortalDelegationSettingsProperties",
          "description": "Delegation settings contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Delegation settings for a developer portal."
    },
    "PortalDelegationSettingsProperties": {
      "properties": {
        "url": {
          "type": "string",
          "description": "A delegation Url."
        },
        "validationKey": {
          "type": "string",
          "description": "A base64-encoded validation key to validate, that a request is coming from Azure API Management."
        },
        "subscriptions": {
          "$ref": "#/definitions/SubscriptionsDelegationSettingsProperties",
          "description": "Subscriptions delegation settings."
        },
        "userRegistration": {
          "$ref": "#/definitions/RegistrationDelegationSettingsProperties",
          "description": "User registration delegation settings."
        }
      },
      "description": "Delegation settings contract properties."
    },
    "PortalSigninSettingProperties": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Redirect Anonymous users to the Sign-In page."
        }
      },
      "description": "Sign-in settings contract properties."
    },
    "PortalSigninSettings": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PortalSigninSettingProperties",
          "description": "Sign-in settings contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Sign-In settings for the Developer Portal."
    },
    "PortalSignupSettings": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PortalSignupSettingsProperties",
          "description": "Sign-up settings contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Sign-Up settings for a developer portal."
    },
    "PortalSignupSettingsProperties": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Allow users to sign up on a developer portal."
        },
        "termsOfService": {
          "type": "object",
          "$ref": "#/definitions/TermsOfServiceProperties",
          "description": "Terms of service contract properties."
        }
      },
      "description": "Sign-up settings contract properties."
    },
    "ProductCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Products list representation."
    },
    "ProductContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ProductContractProperties",
          "description": "Product entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Product details."
    },
    "ProductContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Product name.",
          "minLength": 1,
          "maxLength": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ProductEntityBaseParameters"
        }
      ],
      "required": [
        "displayName"
      ],
      "description": "Product profile."
    },
    "ProductEntityBaseParameters": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Product description. May include HTML formatting tags.",
          "minLength": 1,
          "maxLength": 1000
        },
        "terms": {
          "type": "string",
          "description": "Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process."
        },
        "subscriptionRequired": {
          "description": "Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.",
          "type": "boolean"
        },
        "approvalRequired": {
          "description": "whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of true.",
          "type": "boolean"
        },
        "subscriptionsLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of true."
        },
        "state": {
          "type": "string",
          "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.",
          "enum": [
            "notPublished",
            "published"
          ],
          "x-ms-enum": {
            "name": "ProductState",
            "modelAsString": false
          }
        }
      },
      "description": "Product Entity Base Parameters"
    },
    "ProductTagResourceContractProperties": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the product in the form of /products/{productId}"
        },
        "name": {
          "type": "string",
          "description": "Product name.",
          "minLength": 1,
          "maxLength": 300
        }
      },
      "allOf": [
        {
          "$ref": "./definitions.json#/definitions/ProductEntityBaseParameters"
        }
      ],
      "required": [
        "name"
      ],
      "description": "Product profile."
    },
    "ProductUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ProductUpdateProperties",
          "description": "Product entity Update contract properties."
        }
      },
      "description": "Product Update parameters."
    },
    "ProductUpdateProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Product name.",
          "maxLength": 300,
          "minLength": 1
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ProductEntityBaseParameters"
        }
      ],
      "description": "Parameters supplied to the Update Product operation."
    },
    "PropertyCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Property list representation."
    },
    "PropertyContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PropertyContractProperties",
          "description": "Property entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Property details."
    },
    "PropertyContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
          "minLength": 1,
          "maxLength": 256,
          "pattern": "^[A-Za-z0-9-._]+$"
        },
        "value": {
          "type": "string",
          "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
          "minLength": 1,
          "maxLength": 4096
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PropertyEntityBaseParameters"
        }
      ],
      "required": [
        "displayName",
        "value"
      ],
      "description": "Property Contract properties."
    },
    "PropertyEntityBaseParameters": {
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 32,
          "description": "Optional tags that when provided can be used to filter the property list."
        },
        "secret": {
          "description": "Determines whether the value is a secret and should be encrypted or not. Default value is false.",
          "type": "boolean"
        }
      },
      "description": "Property Entity Base Parameters set."
    },
    "PropertyUpdateParameterProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
          "minLength": 1,
          "maxLength": 256,
          "pattern": "^[A-Za-z0-9-._]+$"
        },
        "value": {
          "type": "string",
          "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
          "minLength": 1,
          "maxLength": 4096
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PropertyEntityBaseParameters"
        }
      ],
      "description": "Property Contract properties."
    },
    "PropertyUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PropertyUpdateParameterProperties",
          "description": "Property entity Update contract properties."
        }
      },
      "description": "Property update Parameters."
    },
    "QuotaCounterCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuotaCounterContract"
          },
          "description": "Quota counter values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total record count number across all pages."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Quota Counter list representation."
    },
    "QuotaCounterContract": {
      "properties": {
        "counterKey": {
          "type": "string",
          "description": "The Key value of the Counter. Must not be empty.",
          "minLength": 1
        },
        "periodKey": {
          "type": "string",
          "description": "Identifier of the Period for which the counter was collected. Must not be empty.",
          "minLength": 1
        },
        "periodStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the start of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "periodEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the end of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "value": {
          "$ref": "#/definitions/QuotaCounterValueContractProperties",
          "description": "Quota Value Properties"
        }
      },
      "required": [
        "counterKey",
        "periodKey",
        "periodStartTime",
        "periodEndTime"
      ],
      "description": "Quota counter details."
    },
    "QuotaCounterValueContract": {
      "properties": {
        "value": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/QuotaCounterValueContractProperties",
          "description": "Quota counter Value Properties."
        }
      },
      "description": "Quota counter value details."
    },
    "QuotaCounterValueContractProperties": {
      "properties": {
        "callsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times Counter was called."
        },
        "kbTransferred": {
          "type": "number",
          "format": "double",
          "description": "Data Transferred in KiloBytes."
        }
      },
      "description": "Quota counter value details."
    },
    "RecipientEmailCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipientEmailContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Recipient User list representation."
    },
    "RecipientEmailContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/RecipientEmailContractProperties",
          "description": "Recipient Email contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Recipient Email details."
    },
    "RecipientEmailContractProperties": {
      "properties": {
        "email": {
          "type": "string",
          "description": "User Email subscribed to notification."
        }
      },
      "description": "Recipient Email Contract Properties."
    },
    "RecipientsContractProperties": {
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of Emails subscribed for the notification."
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of Users subscribed for the notification."
        }
      },
      "description": "Notification Parameter contract."
    },
    "RecipientUserCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipientUserContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Recipient User list representation."
    },
    "RecipientUserContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/RecipientUsersContractProperties",
          "description": "Recipient User entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Recipient User details."
    },
    "RecipientUsersContractProperties": {
      "properties": {
        "userId": {
          "type": "string",
          "description": "API Management UserId subscribed to notification."
        }
      },
      "description": "Recipient User Contract Properties."
    },
    "RegistrationDelegationSettingsProperties": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable or disable delegation for user registration."
        }
      },
      "description": "User registration delegation settings properties."
    },
    "ReportCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportRecordContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total record count number across all pages."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Report records list representation."
    },
    "ReportRecordContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name depending on report endpoint specifies product, API, operation or developer name."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "interval": {
          "type": "string",
          "description": "Length of aggregation period.  Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations)."
        },
        "country": {
          "type": "string",
          "description": "Country to which this record data is related."
        },
        "region": {
          "type": "string",
          "description": "Country region to which this record data is related."
        },
        "zip": {
          "type": "string",
          "description": "Zip code to which this record data is related."
        },
        "userId": {
          "readOnly": true,
          "type": "string",
          "description": "User identifier path. /users/{userId}"
        },
        "productId": {
          "readOnly": true,
          "type": "string",
          "description": "Product identifier path. /products/{productId}"
        },
        "apiId": {
          "type": "string",
          "description": "API identifier path. /apis/{apiId}"
        },
        "operationId": {
          "type": "string",
          "description": "Operation identifier path. /apis/{apiId}/operations/{operationId}"
        },
        "apiRegion": {
          "type": "string",
          "description": "API region identifier."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Subscription identifier path. /subscriptions/{subscriptionId}"
        },
        "callCountSuccess": {
          "type": "integer",
          "format": "int32",
          "description": "Number of successful calls. This includes calls returning HttpStatusCode <= 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect"
        },
        "callCountBlocked": {
          "type": "integer",
          "format": "int32",
          "description": "Number of calls blocked due to invalid credentials. This includes calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests"
        },
        "callCountFailed": {
          "type": "integer",
          "format": "int32",
          "description": "Number of calls failed due to proxy or backend errors. This includes calls returning HttpStatusCode.BadRequest(400) and any Code between HttpStatusCode.InternalServerError (500) and 600"
        },
        "callCountOther": {
          "type": "integer",
          "format": "int32",
          "description": "Number of other calls."
        },
        "callCountTotal": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of calls."
        },
        "bandwidth": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth consumed."
        },
        "cacheHitCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times when content was served from cache policy."
        },
        "cacheMissCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times content was fetched from backend."
        },
        "apiTimeAvg": {
          "type": "number",
          "format": "double",
          "description": "Average time it took to process request."
        },
        "apiTimeMin": {
          "type": "number",
          "format": "double",
          "description": "Minimum time it took to process request."
        },
        "apiTimeMax": {
          "type": "number",
          "format": "double",
          "description": "Maximum time it took to process request."
        },
        "serviceTimeAvg": {
          "type": "number",
          "format": "double",
          "description": "Average time it took to process request on backend."
        },
        "serviceTimeMin": {
          "type": "number",
          "format": "double",
          "description": "Minimum time it took to process request on backend."
        },
        "serviceTimeMax": {
          "type": "number",
          "format": "double",
          "description": "Maximum time it took to process request on backend."
        }
      },
      "description": "Report data."
    },
    "RepresentationContract": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Specifies a registered or custom content type for this representation, e.g. application/xml."
        },
        "sample": {
          "type": "string",
          "description": "An example of the representation."
        },
        "schemaId": {
          "type": "string",
          "description": "Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'."
        },
        "typeName": {
          "type": "string",
          "description": "Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'."
        },
        "formParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'.."
        }
      },
      "required": [
        "contentType"
      ],
      "description": "Operation request/response representation details."
    },
    "RequestContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Operation request description."
        },
        "queryParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation request query parameters."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation request headers."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Collection of operation request representations."
        }
      },
      "description": "Operation request details."
    },
    "RequestReportCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestReportRecordContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total record count number across all pages."
        }
      },
      "description": "Paged Report records list representation."
    },
    "RequestReportRecordContract": {
      "properties": {
        "apiId": {
          "type": "string",
          "description": "API identifier path. /apis/{apiId}"
        },
        "operationId": {
          "type": "string",
          "description": "Operation identifier path. /apis/{apiId}/operations/{operationId}"
        },
        "productId": {
          "readOnly": true,
          "type": "string",
          "description": "Product identifier path. /products/{productId}"
        },
        "userId": {
          "readOnly": true,
          "type": "string",
          "description": "User identifier path. /users/{userId}"
        },
        "method": {
          "type": "string",
          "description": "The HTTP method associated with this request.."
        },
        "url": {
          "type": "string",
          "description": "The full URL associated with this request."
        },
        "ipAddress": {
          "type": "string",
          "description": "The client IP address associated with this request."
        },
        "backendResponseCode": {
          "type": "string",
          "description": "The HTTP status code received by the gateway as a result of forwarding this request to the backend."
        },
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "The HTTP status code returned by the gateway."
        },
        "responseSize": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the response returned by the gateway."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when this request was received by the gateway in ISO 8601 format."
        },
        "cache": {
          "type": "string",
          "description": "Specifies if response cache was involved in generating the response. If the value is none, the cache was not used. If the value is hit, cached response was returned. If the value is miss, the cache was used but lookup resulted in a miss and request was fulfilled by the backend."
        },
        "apiTime": {
          "type": "number",
          "format": "double",
          "description": "The total time it took to process this request."
        },
        "serviceTime": {
          "type": "number",
          "format": "double",
          "description": "he time it took to forward this request to the backend and get the response back."
        },
        "apiRegion": {
          "type": "string",
          "description": "Azure region where the gateway that processed this request is located."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Subscription identifier path. /subscriptions/{subscriptionId}"
        },
        "requestId": {
          "type": "string",
          "description": "Request Identifier."
        },
        "requestSize": {
          "type": "integer",
          "format": "int32",
          "description": "The size of this request.."
        }
      },
      "description": "Request Report data."
    },
    "ResponseContract": {
      "properties": {
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Operation response HTTP status code."
        },
        "description": {
          "type": "string",
          "description": "Operation response description."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Collection of operation response representations."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation response headers."
        }
      },
      "required": [
        "statusCode"
      ],
      "description": "Operation response details."
    },
    "SamplingSettings": {
      "properties": {
        "samplingType": {
          "type": "string",
          "description": "Sampling type.",
          "enum": [
            "fixed"
          ],
          "x-ms-enum": {
            "name": "SamplingType",
            "modelAsString": true,
            "values": [
              {
                "value": "fixed",
                "description": "Fixed-rate sampling."
              }
            ]
          }
        },
        "percentage": {
          "type": "number",
          "format": "double",
          "minimum": 0,
          "maximum": 100,
          "description": "Rate of sampling for fixed-rate sampling."
        }
      },
      "description": "Sampling settings for Diagnostic."
    },
    "SaveConfigurationParameter": {
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the Git branch in which to commit the current configuration snapshot."
        },
        "force": {
          "type": "boolean",
          "description": "The value if true, the current configuration database is committed to the Git repository, even if the Git repository has newer changes that would be overwritten."
        }
      },
      "required": [
        "branch"
      ],
      "description": "Parameters supplied to the Save Tenant Configuration operation."
    },
    "SchemaCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemaContract"
          },
          "description": "Api Schema Contract value.",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any.",
          "readOnly": true
        }
      },
      "description": "The response of the list schema operation."
    },
    "SchemaContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SchemaContractProperties",
          "description": "Properties of the Schema."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Schema Contract details."
    },
    "SchemaContractProperties": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media type of the schema document (e.g. application/json, application/xml)."
        },
        "document": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SchemaDocumentProperties",
          "description": "Properties of the Schema Document."
        }
      },
      "required": [
        "contentType"
      ],
      "description": "Schema contract Properties."
    },
    "SchemaDocumentProperties": {
      "properties": {
        "value": {
          "type": "string",
          "description": "Json escaped string defining the document representing the Schema."
        }
      },
      "description": "Schema Document Properties."
    },
    "SubscriptionCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Subscriptions list representation."
    },
    "SubscriptionContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SubscriptionContractProperties",
          "description": "Subscription contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Subscription details."
    },
    "SubscriptionContractProperties": {
      "properties": {
        "ownerId": {
          "type": "string",
          "description": "The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier."
        },
        "scope": {
          "type": "string",
          "description": "Scope like /products/{productId} or /apis or /apis/{apiId}."
        },
        "displayName": {
          "type": "string",
          "description": "The name of the subscription, or null if the subscription has no name.",
          "minLength": 0,
          "maxLength": 100
        },
        "state": {
          "type": "string",
          "description": "Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.",
          "enum": [
            "suspended",
            "active",
            "expired",
            "submitted",
            "rejected",
            "cancelled"
          ],
          "x-ms-enum": {
            "name": "SubscriptionState",
            "modelAsString": false
          }
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
          "readOnly": true
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "notificationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "primaryKey": {
          "type": "string",
          "description": "Subscription primary key.",
          "minLength": 1,
          "maxLength": 256
        },
        "secondaryKey": {
          "type": "string",
          "description": "Subscription secondary key.",
          "minLength": 1,
          "maxLength": 256
        },
        "stateComment": {
          "type": "string",
          "description": "Optional subscription comment added by an administrator."
        },
        "allowTracing": {
          "type": "boolean",
          "description": "Determines whether tracing is enabled",
          "x-apim-code-nillable": true
        }
      },
      "required": [
        "scope",
        "state",
        "primaryKey",
        "secondaryKey"
      ],
      "description": "Subscription details."
    },
    "SubscriptionCreateParameterProperties": {
      "properties": {
        "ownerId": {
          "type": "string",
          "description": "User (user id path) for whom subscription is being created in form /users/{userId}"
        },
        "scope": {
          "type": "string",
          "description": "Scope like /products/{productId} or /apis or /apis/{apiId}."
        },
        "displayName": {
          "type": "string",
          "description": "Subscription name.",
          "minLength": 1,
          "maxLength": 100
        },
        "primaryKey": {
          "type": "string",
          "description": "Primary subscription key. If not specified during request key will be generated automatically.",
          "minLength": 1,
          "maxLength": 256
        },
        "secondaryKey": {
          "type": "string",
          "description": "Secondary subscription key. If not specified during request key will be generated automatically.",
          "minLength": 1,
          "maxLength": 256
        },
        "state": {
          "type": "string",
          "description": "Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.",
          "enum": [
            "suspended",
            "active",
            "expired",
            "submitted",
            "rejected",
            "cancelled"
          ],
          "x-ms-enum": {
            "name": "SubscriptionState",
            "modelAsString": false
          }
        },
        "allowTracing": {
          "type": "boolean",
          "description": "Determines whether tracing can be enabled"
        }
      },
      "required": [
        "scope",
        "displayName"
      ],
      "description": "Parameters supplied to the Create subscription operation."
    },
    "SubscriptionCreateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SubscriptionCreateParameterProperties",
          "description": "Subscription contract properties."
        }
      },
      "description": "Subscription create details."
    },
    "SubscriptionKeyParameterNamesContract": {
      "properties": {
        "header": {
          "type": "string",
          "description": "Subscription key header name."
        },
        "query": {
          "type": "string",
          "description": "Subscription key query string parameter name."
        }
      },
      "description": "Subscription key parameter names details.",
      "example": {
        "subscriptionKeyParameterNames": {
          "query": "customQueryParameterName",
          "header": "customHeaderParameterName"
        }
      }
    },
    "SubscriptionsDelegationSettingsProperties": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable or disable delegation for subscriptions."
        }
      },
      "description": "Subscriptions delegation settings properties."
    },
    "SubscriptionUpdateParameterProperties": {
      "properties": {
        "ownerId": {
          "type": "string",
          "description": "User identifier path: /users/{userId}"
        },
        "scope": {
          "type": "string",
          "description": "Scope like /products/{productId} or /apis or /apis/{apiId}"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard."
        },
        "displayName": {
          "type": "string",
          "description": "Subscription name."
        },
        "primaryKey": {
          "type": "string",
          "description": "Primary subscription key.",
          "minLength": 1,
          "maxLength": 256
        },
        "secondaryKey": {
          "type": "string",
          "description": "Secondary subscription key.",
          "minLength": 1,
          "maxLength": 256
        },
        "state": {
          "type": "string",
          "description": "Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.",
          "enum": [
            "suspended",
            "active",
            "expired",
            "submitted",
            "rejected",
            "cancelled"
          ],
          "x-ms-enum": {
            "name": "SubscriptionState",
            "modelAsString": false
          }
        },
        "stateComment": {
          "type": "string",
          "description": "Comments describing subscription state change by the administrator."
        },
        "allowTracing": {
          "type": "boolean",
          "description": "Determines whether tracing can be enabled"
        }
      },
      "description": "Parameters supplied to the Update subscription operation."
    },
    "SubscriptionUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SubscriptionUpdateParameterProperties",
          "description": "Subscription Update contract properties."
        }
      },
      "description": "Subscription update details."
    },
    "TagCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Tag list representation."
    },
    "TagContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/TagContractProperties",
          "description": "Tag entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Tag Contract details."
    },
    "TagContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Tag name.",
          "maxLength": 160,
          "minLength": 1
        }
      },
      "required": [
        "displayName"
      ],
      "description": "Tag contract Properties."
    },
    "TagCreateUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/TagContractProperties",
          "description": "Properties supplied to Create Tag operation."
        }
      },
      "description": "Parameters supplied to Create/Update Tag operations."
    },
    "TagDescriptionBaseProperties": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the Tag."
        },
        "externalDocsUrl": {
          "type": "string",
          "description": "Absolute URL of external resources describing the tag.",
          "maxLength": 2000
        },
        "externalDocsDescription": {
          "type": "string",
          "description": "Description of the external resources describing the tag."
        }
      },
      "description": "Parameters supplied to the Create TagDescription operation."
    },
    "TagDescriptionCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagDescriptionContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged TagDescription list representation."
    },
    "TagDescriptionContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/TagDescriptionContractProperties",
          "description": "TagDescription entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "Contract details."
    },
    "TagDescriptionContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Tag name.",
          "maxLength": 160,
          "minLength": 1
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TagDescriptionBaseProperties"
        }
      ],
      "description": "TagDescription contract Properties."
    },
    "TagDescriptionCreateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/TagDescriptionBaseProperties",
          "description": "Properties supplied to Create TagDescription operation."
        }
      },
      "description": "Parameters supplied to the Create TagDescription operation."
    },
    "TagResourceCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagResourceContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Tag list representation."
    },
    "TagResourceContract": {
      "properties": {
        "tag": {
          "$ref": "#/definitions/TagTagResourceContractProperties",
          "description": "Tag associated with the resource."
        },
        "api": {
          "$ref": "#/definitions/ApiTagResourceContractProperties",
          "description": "Api associated with the tag."
        },
        "operation": {
          "$ref": "#/definitions/OperationTagResourceContractProperties",
          "description": "Operation associated with the tag."
        },
        "product": {
          "$ref": "#/definitions/ProductTagResourceContractProperties",
          "description": "Product associated with the tag."
        }
      },
      "required": [
        "tag"
      ],
      "description": "TagResource contract properties."
    },
    "TagTagResourceContractProperties": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Tag identifier"
        },
        "name": {
          "type": "string",
          "description": "Tag Name",
          "minLength": 1,
          "maxLength": 160
        }
      },
      "description": "Contract defining the Tag property in the Tag Resource Contract"
    },
    "TenantConfigurationSyncStateContract": {
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of Git branch."
        },
        "commitId": {
          "type": "string",
          "description": "The latest commit Id."
        },
        "isExport": {
          "type": "boolean",
          "description": "value indicating if last sync was save (true) or deploy (false) operation."
        },
        "isSynced": {
          "type": "boolean",
          "description": "value indicating if last synchronization was later than the configuration change."
        },
        "isGitEnabled": {
          "type": "boolean",
          "description": "value indicating whether Git configuration access is enabled."
        },
        "syncDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "configurationChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        }
      },
      "description": "Tenant Configuration Synchronization State."
    },
    "TermsOfServiceProperties": {
      "properties": {
        "text": {
          "type": "string",
          "description": "A terms of service text."
        },
        "enabled": {
          "type": "boolean",
          "description": "Display terms of service during a sign-up process."
        },
        "consentRequired": {
          "type": "boolean",
          "description": "Ask user for consent to the terms of service."
        }
      },
      "description": "Terms of service contract properties."
    },
    "TokenBodyParameterContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "body parameter name."
        },
        "value": {
          "type": "string",
          "description": "body parameter value."
        }
      },
      "required": [
        "name",
        "value"
      ],
      "description": "OAuth acquire token request body parameter (www-url-form-encoded)."
    },
    "UserCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Users list representation."
    },
    "UserContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/UserContractProperties",
          "description": "User entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "./apimanagement.json#/definitions/Resource"
        }
      ],
      "description": "User details."
    },
    "UserContractProperties": {
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name."
        },
        "lastName": {
          "type": "string",
          "description": "Last name."
        },
        "email": {
          "type": "string",
          "description": "Email address."
        },
        "registrationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "groups": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "./definitions.json#/definitions/GroupContractProperties"
          },
          "description": "Collection of groups user is part of."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/UserEntityBaseParameters"
        }
      ],
      "description": "User profile."
    },
    "UserCreateParameterProperties": {
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address. Must not be empty and must be unique within the service instance.",
          "minLength": 1,
          "maxLength": 254
        },
        "firstName": {
          "type": "string",
          "description": "First name.",
          "minLength": 1,
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "description": "Last name.",
          "minLength": 1,
          "maxLength": 100
        },
        "password": {
          "type": "string",
          "description": "User Password. If no value is provided, a default password is generated."
        },
        "confirmation": {
          "type": "string",
          "description": "Determines the type of confirmation e-mail that will be sent to the newly created user.",
          "enum": [
            "signup",
            "invite"
          ],
          "x-ms-enum": {
            "name": "Confirmation",
            "modelAsString": true,
            "values": [
              {
                "value": "signup",
                "description": "Send an e-mail to the user confirming they have successfully signed up."
              },
              {
                "value": "invite",
                "description": "Send an e-mail inviting the user to sign-up and complete registration."
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/UserEntityBaseParameters"
        }
      ],
      "required": [
        "email",
        "firstName",
        "lastName"
      ],
      "description": "Parameters supplied to the Create User operation."
    },
    "UserCreateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/UserCreateParameterProperties",
          "description": "User entity create contract properties."
        }
      },
      "description": "User create details."
    },
    "UserEntityBaseParameters": {
      "properties": {
        "state": {
          "type": "string",
          "description": "Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.",
          "enum": [
            "active",
            "blocked",
            "pending",
            "deleted"
          ],
          "default": "active",
          "x-ms-enum": {
            "name": "UserState",
            "modelAsString": true,
            "values": [
              {
                "value": "active",
                "description": "User state is active."
              },
              {
                "value": "blocked",
                "description": "User is blocked. Blocked users cannot authenticate at developer portal or call API."
              },
              {
                "value": "pending",
                "description": "User account is pending. Requires identity confirmation before it can be made active."
              },
              {
                "value": "deleted",
                "description": "User account is closed. All identities and related entities are removed."
              }
            ]
          }
        },
        "note": {
          "type": "string",
          "description": "Optional note about a user set by the administrator."
        },
        "identities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserIdentityContract"
          },
          "description": "Collection of user identities."
        }
      },
      "description": "User Entity Base Parameters set."
    },
    "UserIdentityCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserIdentityContract"
          },
          "description": "User Identity values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total record count number across all pages."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "List of Users Identity list representation."
    },
    "UserIdentityContract": {
      "properties": {
        "provider": {
          "type": "string",
          "description": "Identity provider name."
        },
        "id": {
          "type": "string",
          "description": "Identifier value within provider."
        }
      },
      "description": "User identity details."
    },
    "UserTokenParameters": {
      "properties": {
        "keyType": {
          "type": "string",
          "description": "The Key to be used to generate token for user.",
          "enum": [
            "primary",
            "secondary"
          ],
          "default": "primary",
          "x-ms-enum": {
            "name": "KeyType",
            "modelAsString": false
          }
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "description": "The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        }
      },
      "required": [
        "keyType",
        "expiry"
      ],
      "description": "Parameters supplied to the Get User Token operation."
    },
    "UserTokenResult": {
      "properties": {
        "value": {
          "type": "string",
          "description": "Shared Access Authorization token for the User."
        }
      },
      "description": "Get User Token response details."
    },
    "UserUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/UserUpdateParametersProperties",
          "description": "User entity update contract properties."
        }
      },
      "description": "User update parameters."
    },
    "UserUpdateParametersProperties": {
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address. Must not be empty and must be unique within the service instance.",
          "minLength": 1,
          "maxLength": 254
        },
        "password": {
          "type": "string",
          "description": "User Password."
        },
        "firstName": {
          "type": "string",
          "description": "First name.",
          "minLength": 1,
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "description": "Last name.",
          "minLength": 1,
          "maxLength": 100
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/UserEntityBaseParameters"
        }
      ],
      "description": "Parameters supplied to the Update User operation."
    },
    "X509CertificateName": {
      "properties": {
        "name": {
          "description": "Common Name of the Certificate.",
          "type": "string"
        },
        "issuerCertificateThumbprint": {
          "description": "Thumbprint for the Issuer of the Certificate.",
          "type": "string"
        }
      },
      "externalDocs": {
        "url": "https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-windows-cluster-x509-security"
      },
      "description": "Properties of server X509Names."
    }
  },
  "parameters": {}
}
