{
  "swagger": "2.0",
  "info": {
    "title": "ApiManagementClient",
    "description": "Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.",
    "version": "2017-03-01"
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{apimBaseUrl}",
    "useSchemePrefix": false,
    "positionInOperation": "first",
    "parameters": [
      {
        "name": "apimBaseUrl",
        "description": "The management endpoint of the API Management service, for example https://myapimservice.management.azure-api.net.",
        "required": true,
        "type": "string",
        "in": "path",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "Product_List",
        "description": "Lists a collection of products in the specified service instance.",
        "x-ms-examples": {
          "ApiManagementListProducts": {
            "$ref": "./examples/ApiManagementListProducts.json"
          }
        },
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| terms       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| state       | eq                     |                                             |"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "name": "expandGroups",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to true, the response contains an array of groups that have visibility to the product. The default is false."            
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Collection of the Product entities for the specified API Management service instance.",
            "schema": {
              "$ref": "#/definitions/ProductCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ProductContract"
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "Product_Get",
        "description": "Gets the details of the product specified by its identifier.",
        "x-ms-examples": {
          "ApiManagementGetProducts": {
            "$ref": "./examples/ApiManagementGetProducts.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Product entity.",
            "schema": {
              "$ref": "#/definitions/ProductContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "operationId": "Product_CreateOrUpdate",
        "description": "Creates or Updates a product.",
        "x-ms-examples": {
          "ApiManagementPutProducts": {
            "$ref": "./examples/ApiManagementPutProducts.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductContract"
            },
            "description": "Create or update parameters."
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Product was successfully created.",
            "schema": {
              "$ref": "#/definitions/ProductContract"
            }
          },
          "200": {
            "description": "Product was successfully updated.",
            "schema": {
              "$ref": "#/definitions/ProductContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Products"
        ],
        "operationId": "Product_Update",
        "description": "Update product.",
        "x-ms-examples": {
          "ApiManagementPatchProducts": {
            "$ref": "./examples/ApiManagementPatchProducts.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Product Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "operationId": "Product_Delete",
        "description": "Delete product.",
        "x-ms-examples": {
          "ApiManagementDeleteProducts": {
            "$ref": "./examples/ApiManagementDeleteProducts.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "deleteSubscriptions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Delete existing subscriptions to the product or not."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Product Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The product was successfully deleted."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/products/{productId}/apis": {
      "get": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApi_ListByProduct",
        "description": "Lists a collection of the APIs associated with a product.",
        "x-ms-examples": {
          "ApiManagementListProductsApis": {
            "$ref": "./examples/ApiManagementListProductsApis.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains a collection of Api entities in the product.",
            "schema": {
              "$ref": "./apimapis.json#/definitions/ApiCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./apimapis.json#/definitions/ApiContract"
      }
    },
    "/products/{productId}/apis/{apiId}": {
      "put": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApi_CreateOrUpdate",
        "description": "Adds an API to the specified product.",
        "x-ms-examples": {
          "ApiManagementPutProductsApis": {
            "$ref": "./examples/ApiManagementPutProductsApis.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "./apimapis.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The API was successfully added to the product.",
            "schema": {
              "$ref": "./apimapis.json#/definitions/ApiContract"
            }
          },
          "200": {
            "description": "The specified API is already added to the product.",
            "schema": {
              "$ref": "./apimapis.json#/definitions/ApiContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApi_Delete",
        "description": "Deletes the specified API from the specified product.",
        "x-ms-examples": {
          "ApiManagementDeleteProductsApis": {
            "$ref": "./examples/ApiManagementDeleteProductsApis.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "./apimapis.json#/parameters/ApiIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The API was successfully removed from the product."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/products/{productId}/groups": {
      "get": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroup_ListByProduct",
        "description": "Lists the collection of developer groups associated with the specified product.",
        "x-ms-examples": {
          "ApiManagementListProductsGroups": {
            "$ref": "./examples/ApiManagementListProductsGroups.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| type        | eq, ne                 | N/A                                         |"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists a collection of Group entities.",
            "schema": {
              "$ref": "./apimgroups.json#/definitions/GroupCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./apimgroups.json#/definitions/GroupContract"
      }
    },
    "/products/{productId}/groups/{groupId}": {
      "put": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroup_CreateOrUpdate",
        "description": "Adds the association between the specified developer group with the specified product.",
        "x-ms-examples": {
          "ApiManagementPutProductsGroups": {
            "$ref": "./examples/ApiManagementPutProductsGroups.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "./apimgroups.json#/parameters/GroupIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The group was successfully associated with the product.",
            "schema": {
              "$ref": "./apimgroups.json#/definitions/GroupContract"
            }
          },
          "200": {
            "description": "The specified group is already associated with the product.",
            "schema": {
              "$ref": "./apimgroups.json#/definitions/GroupContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroup_Delete",
        "description": "Deletes the association between the specified group and product.",
        "x-ms-examples": {
          "ApiManagementDeleteProductsGroups": {
            "$ref": "./examples/ApiManagementDeleteProductsGroups.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "./apimgroups.json#/parameters/GroupIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The group was successfully disassociated with the product."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/products/{productId}/subscriptions": {
      "get": {
        "tags": [
          "ProductSubscriptions"
        ],
        "operationId": "ProductSubscriptions_List",
        "description": "Lists the collection of subscriptions to the specified product.",
        "x-ms-examples": {
          "ApiManagementListProductsSubscriptions": {
            "$ref": "./examples/ApiManagementListProductsSubscriptions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field        | Supported operators    | Supported functions                         |\n|--------------|------------------------|---------------------------------------------|\n| id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| state        | eq                     |                                             |"
          },
          {
            "$ref": "./apimanagement.json#/parameters/TopQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists a collection of subscription entities.",
            "schema": {
              "$ref": "./apimsubscriptions.json#/definitions/SubscriptionCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./apimsubscriptions.json#/definitions/SubscriptionContract"
      }
    },
    "/products/{productId}/policies": {
      "get": {
        "tags": [
          "ProductPolicy"
        ],
        "operationId": "ProductPolicy_ListByProduct",
        "description": "Get the policy configuration at the Product level.",
        "x-ms-examples": {
          "ApiManagementListProductsPolicies": {
            "$ref": "./examples/ApiManagementListProductsPolicies.json"
          }
        },
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Product Policy information.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyCollection"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/products/{productId}/policies/{policyId}": {
      "get": {
        "tags": [
          "ProductPolicy"
        ],
        "operationId": "ProductPolicy_Get",
        "description": "Get the policy configuration at the Product level.",
        "x-ms-examples": {
          "ApiManagementGetProductsPolicies": {
            "$ref": "./examples/ApiManagementGetProductsPolicies.json"
          }
        },
        "produces": [
          "application/json",
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"
        ],
        "parameters": [
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Product Policy information.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            },
            "headers": {
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProductPolicy"
        ],
        "operationId": "ProductPolicy_CreateOrUpdate",
        "description": "Creates or updates policy configuration for the Product.",
        "x-ms-examples": {
          "ApiManagementPutProductsPolicies": {
            "$ref": "./examples/ApiManagementPutProductsPolicies.json"
          }
        },
        "consumes": [
          "application/json",
          "application/vnd.ms-azure-apim.policy+xml",
          "application/vnd.ms-azure-apim.policy.raw+xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            },
            "required": true,
            "description": "The policy contents to apply."
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Product policy configuration was successfully created.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            }
          },
          "200": {
            "description": "Product policy configuration of the tenant was successfully updated.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/PolicyContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductPolicy"
        ],
        "operationId": "ProductPolicy_Delete",
        "description": "Deletes the policy configuration at the Product.",
        "x-ms-examples": {
          "ApiManagementDeleteProductsPolicies": {
            "$ref": "./examples/ApiManagementDeleteProductsPolicies.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "./apimanagement.json#/parameters/PolicyIdParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state (Etag) version of the product policy to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "./apimanagement.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the policy configuration at the Product level."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ProductCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "description": "Total number of entities"
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Products list representation."
    },
    "ProductContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the Product entity."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ProductContractProperties"
        }
      ],
      "description": "Product details."
    },
    "ProductContractProperties": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Product name.",
          "minLength": 1,
          "maxLength": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ProductEntityBaseParameters"
        }
      ],
      "required": [
        "name"
      ],
      "description": "Product profile."
    },
    "ProductEntityBaseParameters": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Product description. May include HTML formatting tags.",
          "minLength": 1,
          "maxLength": 1000
        },
        "terms": {
          "type": "string",
          "description": "Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process."
        },
        "subscriptionRequired": {
          "description": "Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.",
          "type": "boolean"
        },
        "approvalRequired": {
          "description": "whether subscription approval is required. IfÂ false, new subscriptions will be approved automatically enabling developers to call the productâ€™s APIs immediately after subscribing. IfÂ true, administrators must manually approve the subscription before the developer can any of the productâ€™s APIs. Can be present only if subscriptionRequired property is present and has a value of false.",
          "type": "boolean"
        },
        "subscriptionsLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Whether the number of subscriptions a user can have to this product at the same time. Set toÂ nullÂ or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "state": {
          "type": "string",
          "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.",
          "enum": [
            "notPublished",
            "published"
          ],
          "x-ms-enum": {
            "name": "ProductState",
            "modelAsString": false
          }
        }
      },
      "description": "Product Entity Base Parameters"
    },
    "ProductUpdateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Product name.",
          "maxLength": 300,
          "minLength": 1
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ProductEntityBaseParameters"
        }
      ],
      "description": "Parameters supplied to the Update Product operation."
    }
  },
  "parameters": {
    "ProductIdParameter": {
      "name": "productId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Product identifier. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    }
  }
}