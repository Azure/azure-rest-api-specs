{
  "swagger": "2.0",
  "info": {
    "title": "Developer Services API - Authorized",
    "version": "2022-04-01-preview",
    "description": "Developer Services API - Everything you need to display your APIs.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "tags": [],
  "paths": {
    "/confirmations/users/{userId}/identities/basic": {
      "post": {
        "operationId": "Confirmations_CreateUserBasicIdentityConfirmation",
        "description": "Basic identity (Email) confirmation for a User.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "name": "identityConfirmationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.IdentityConfirmationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/delegation/urls/users/{userId}/{action}": {
      "post": {
        "operationId": "Delegation_CreateUserDelegationUrl",
        "description": "User specific delegation urls (CloseAccount, ChangePassword, ChangeProfile, Subscribe, Unsubscribe, Renew, Signout).",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "name": "action",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userDelegationOperationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.UserDelegationOperationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.UserDelegationOperationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "Users_GetUser",
        "description": "Get a user profile by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "operationId": "Users_CreateOrUpdateUser",
        "description": "Create or updatea a user by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": true,
            "x-ms-client-name": "ifMatch",
            "type": "string"
          },
          {
            "name": "userUpdate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "operationId": "Users_DeleteUser",
        "description": "Delete a user by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis": {
      "get": {
        "operationId": "Apis_ListApis",
        "description": "List a collection of APIs.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.Api"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.Api[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.Api>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}": {
      "get": {
        "operationId": "Apis_GetApi",
        "description": "Get the details of the API specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "name": "accept",
            "in": "header",
            "required": false,
            "type": "string",
            "enum": [
              "application/json",
              "application/vnd.sun.wadl+xml",
              "application/wsdl+xml",
              "application/vnd.swagger.doc+json",
              "application/vnd.oai.openapi",
              "application/vnd.oai.openapi+json"
            ]
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.Api"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        },
        "produces": [
          "application/json",
          "application/vnd.sun.wadl+xml",
          "application/wsdl+xml",
          "application/vnd.swagger.doc+json",
          "application/vnd.oai.openapi",
          "application/vnd.oai.openapi+json"
        ]
      }
    },
    "/users/{userId}/apis/{apiId}/authServers/oauth2": {
      "get": {
        "operationId": "Apis_ListApiOAuth2Providers",
        "description": "List of OAuth 2.0 servers associated with the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.AuthorizationServer"
                  },
                  "x-ms-identifiers": [],
                  "x-typespec-name": "DeveloperServicesAPI.Models.AuthorizationServer[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.AuthorizationServer>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/authServers/oauth2/{providerId}": {
      "get": {
        "operationId": "Apis_GetApiOAuth2Provider",
        "description": "Get OAuth 2.0 server specified by its identifier associated with the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.AuthorizationServer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/authServers/openidconnect": {
      "get": {
        "operationId": "Apis_ListApiOpenidProviders",
        "description": "List of OpenID Connect servers associated with the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.AuthorizationServer"
                  },
                  "x-ms-identifiers": [],
                  "x-typespec-name": "DeveloperServicesAPI.Models.AuthorizationServer[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.AuthorizationServer>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/authServers/openidconnect/{providerId}": {
      "get": {
        "operationId": "Apis_GetApiOpenidProvider",
        "description": "Get OpenID Connect server specified by its identifier associated with the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.AuthorizationServer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/hostnames": {
      "get": {
        "operationId": "Apis_ListApiHostnames",
        "description": "Hostnames of the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiHostname"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.ApiHostname[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.ApiHostname>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/operations": {
      "get": {
        "operationId": "Apis_ListApiOperations",
        "description": "Operations of the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.Operation"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.Operation[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.Operation>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/operations/{operationId}": {
      "get": {
        "operationId": "Apis_GetApiOperation",
        "description": "Operation specified by its identifier of the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.Operation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/operations/{operationId}/tags": {
      "get": {
        "operationId": "Apis_ListApiOperationTags",
        "description": "Operation tags specified by its identifier of the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.Tag"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.Tag[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.Tag>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/products": {
      "get": {
        "operationId": "Apis_ListApiProducts",
        "description": "List of public products associated with the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.Product"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.Product[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.Product>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/releases": {
      "get": {
        "operationId": "Apis_ListApiReleases",
        "description": "List of releases for the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiRelease"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.ApiRelease[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.ApiRelease>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/schemas": {
      "get": {
        "operationId": "Apis_ListApiSchemas",
        "description": "List a collection of APIs schemas.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiSchema"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.ApiSchema[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.ApiSchema>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/schemas/{schemaId}": {
      "get": {
        "operationId": "Apis_GetApiSchema",
        "description": "Get the details of the APIs schema specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "name": "schemaId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiSchema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apis/{apiId}/tags": {
      "get": {
        "operationId": "Apis_ListApiTags",
        "description": "Tags of the API.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.Apis.CommonParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.Tag"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.Tag[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.Tag>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apiVersionSets": {
      "get": {
        "operationId": "ApiVersionSets_ListApiVersionSets",
        "description": "List a collection of API version sets.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiVersionSet"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.ApiVersionSet[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.ApiVersionSet>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apiVersionSets/{versionSetId}": {
      "get": {
        "operationId": "ApiVersionSets_GetApiVersionSet",
        "description": "Get API version set specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/Routes.ApiVersionSets.CommonParams"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiVersionSet"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/apiVersionSets/{versionSetId}/apis": {
      "get": {
        "operationId": "ApiVersionSets_ListApiVersionSetApis",
        "description": "List a collection of API version set APIs specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          },
          {
            "$ref": "#/parameters/Routes.ApiVersionSets.CommonParams"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.Api"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.Api[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.Api>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/identities": {
      "get": {
        "operationId": "Confirmations_ListUserIdentities",
        "description": "List a collection of user identities.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.IdentityResult"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.IdentityResult[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.IdentityResult>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/identities/{provider}/{identity}": {
      "put": {
        "operationId": "Confirmations_CreateOrUpdateUserIdentityProvider",
        "description": "Creates or updates the given user identity.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          },
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "description": "The provider of the identity.",
            "type": "string"
          },
          {
            "name": "identity",
            "in": "path",
            "required": true,
            "description": "The identity.",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/products": {
      "get": {
        "operationId": "Products_ListProducts",
        "description": "List a collection of products.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.Product"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.Product[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.Product>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/products/{productId}": {
      "get": {
        "operationId": "Products_GetProduct",
        "description": "Get the details of the product specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.Product"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/products/{productId}/apis": {
      "get": {
        "operationId": "Products_ListProductApis",
        "description": "List a collection of products APIs.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.Api"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.Api[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.Api>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/products/{productId}/tags": {
      "get": {
        "operationId": "Products_ListProductTags",
        "description": "List a collection of products tags.",
        "parameters": [
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.UserParams"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.skip"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.top"
          },
          {
            "$ref": "#/parameters/DeveloperServicesAPI.Models.ListParams.filter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string",
                  "description": "Relative URL to next page of collection."
                },
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeveloperServicesAPI.Models.Tag"
                  },
                  "x-typespec-name": "DeveloperServicesAPI.Models.Tag[]",
                  "description": "Collection itself."
                }
              },
              "description": "Collection object for listing operations.",
              "required": [
                "nextLink",
                "value"
              ],
              "x-typespec-name": "DeveloperServicesAPI.Models.Collection<DeveloperServicesAPI.Models.Tag>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/DeveloperServicesAPI.Models.ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DeveloperServicesAPI.Models.Api": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "API identifier."
        },
        "name": {
          "type": "string",
          "description": "API name. Must be 1 to 300 characters long."
        },
        "description": {
          "type": "string",
          "description": "API description."
        },
        "subscriptionRequired": {
          "type": "boolean",
          "description": "Specifies whether an API subscription is required for accessing the API."
        },
        "path": {
          "type": "string",
          "description": "Path for API requests."
        },
        "protocols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiProtocol"
          },
          "x-typespec-name": "DeveloperServicesAPI.Models.ApiProtocol[]",
          "description": "Protocols over which API is made available."
        },
        "tagDescriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.TagDescription"
          },
          "x-typespec-name": "DeveloperServicesAPI.Models.TagDescription[]",
          "description": "Collection of Tag Descriptions included into this API."
        },
        "authenticationSettings": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.AuthenticationSettings",
          "description": "Collection of authentication settings included into this API."
        },
        "subscriptionKeyParameterNames": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.SubscriptionKeyParameterNames",
          "description": "Names of Subscription key parameters used by the API."
        },
        "termsOfServiceUrl": {
          "type": "string",
          "description": "A URL to the Terms of Service for the API. MUST be in the format of a URL."
        },
        "contact": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiContact",
          "description": "Contact information for the exposed API."
        },
        "license": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiLicense",
          "description": "License information for the exposed API."
        },
        "type": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiType",
          "description": "Type of API."
        },
        "apiVersion": {
          "type": "string",
          "description": "API version name"
        },
        "apiVersionDescription": {
          "type": "string",
          "description": "Api version description"
        },
        "apiVersionSetId": {
          "type": "string",
          "description": "Api version Set Identifier"
        }
      },
      "description": "API contract",
      "required": [
        "id",
        "name",
        "description",
        "path",
        "protocols",
        "authenticationSettings",
        "subscriptionKeyParameterNames",
        "apiVersionSetId"
      ]
    },
    "DeveloperServicesAPI.Models.ApiContact": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifying name of the contact person/organization.",
          "maxLength": 128
        },
        "url": {
          "type": "string",
          "description": "The URL pointing to the contact information. MUST be in the format of a URL.",
          "maxLength": 128
        },
        "email": {
          "type": "string",
          "description": "The email address of the contact person/organization. MUST be in the format of an email address.",
          "maxLength": 128
        }
      },
      "description": "API contact information",
      "required": [
        "name",
        "url",
        "email"
      ]
    },
    "DeveloperServicesAPI.Models.ApiHostname": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "API hostname identifier."
        },
        "value": {
          "type": "string",
          "description": "Hostname value."
        }
      },
      "description": "API hostname information",
      "required": [
        "id",
        "value"
      ]
    },
    "DeveloperServicesAPI.Models.ApiLicense": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The license name used for the API.",
          "maxLength": 128
        },
        "url": {
          "type": "string",
          "description": "A URL to the license used for the API. MUST be in the format of a URL.",
          "maxLength": 128
        }
      },
      "description": "API license information",
      "required": [
        "name",
        "url"
      ]
    },
    "DeveloperServicesAPI.Models.ApiProtocol": {
      "type": "string",
      "description": "API protocol information",
      "enum": [
        "http",
        "https",
        "ws",
        "wss"
      ],
      "x-ms-enum": {
        "name": "ApiProtocol",
        "modelAsString": true,
        "values": [
          {
            "name": "Http",
            "value": "http",
            "description": "HTTP scheme will be supported for API"
          },
          {
            "name": "Https",
            "value": "https",
            "description": "HTTPS scheme will be supported for API"
          },
          {
            "name": "Ws",
            "value": "ws",
            "description": "WebSocket scheme will be supported for API"
          },
          {
            "name": "Wss",
            "value": "wss",
            "description": "WebSocket Secure scheme will be supported for API"
          }
        ]
      }
    },
    "DeveloperServicesAPI.Models.ApiRelease": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "API release identifier."
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Release creation date and time."
        },
        "updatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Release update date and time."
        },
        "notes": {
          "type": "string",
          "description": "Release notes."
        }
      },
      "description": "API release information",
      "required": [
        "id",
        "createdDateTime",
        "updatedDateTime",
        "notes"
      ]
    },
    "DeveloperServicesAPI.Models.ApiSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "API schema identifier."
        },
        "contentType": {
          "type": "string",
          "description": "Media type of the schema document (e.g. application/json, application/xml)."
        },
        "document": {
          "type": "string",
          "description": "The document representing the Schema."
        }
      },
      "description": "A Schema used by an API.",
      "required": [
        "id",
        "contentType"
      ]
    },
    "DeveloperServicesAPI.Models.ApiType": {
      "type": "string",
      "description": "Type of API",
      "enum": [
        "http",
        "soap",
        "websocket",
        "graphql"
      ],
      "x-ms-enum": {
        "name": "ApiType",
        "modelAsString": true,
        "values": [
          {
            "name": "Http",
            "value": "http",
            "description": "API is a REST API"
          },
          {
            "name": "Soap",
            "value": "soap",
            "description": "API is a SOAP API"
          },
          {
            "name": "WebSocket",
            "value": "websocket",
            "description": "API is a WebSocket API"
          },
          {
            "name": "GraphQL",
            "value": "graphql",
            "description": "API is a GraphQL API"
          }
        ]
      }
    },
    "DeveloperServicesAPI.Models.ApiVersionSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "API Version Set identifier."
        },
        "name": {
          "type": "string",
          "description": "API Version Set name."
        },
        "description": {
          "type": "string",
          "description": "API Version Set description."
        },
        "versioningScheme": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.ApiVersionSetScheme",
          "description": "Versioning scheme."
        },
        "versionQueryName": {
          "type": "string",
          "description": "Version query name."
        },
        "versionHeaderName": {
          "type": "string",
          "description": "Version header name."
        }
      },
      "description": "API Version Set",
      "required": [
        "id",
        "name",
        "description",
        "versioningScheme",
        "versionQueryName",
        "versionHeaderName"
      ]
    },
    "DeveloperServicesAPI.Models.ApiVersionSetScheme": {
      "type": "string",
      "description": "Versioning scheme types.",
      "enum": [
        "Segment",
        "Query",
        "Header"
      ],
      "x-ms-enum": {
        "name": "ApiVersionSetScheme",
        "modelAsString": true,
        "values": [
          {
            "name": "Segment",
            "value": "Segment",
            "description": "Use segment for versioning scheme"
          },
          {
            "name": "Query",
            "value": "Query",
            "description": "Use query for versioning scheme"
          },
          {
            "name": "Header",
            "value": "Header",
            "description": "Use header for versioning scheme"
          }
        ]
      }
    },
    "DeveloperServicesAPI.Models.AuthenticationSettings": {
      "type": "object",
      "properties": {
        "oAuth2AuthenticationSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.OAuth2AuthenticationSettings"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.OAuth2AuthenticationSettings[]",
          "description": "Collection of OAuth2 authentication settings included into this API."
        },
        "openidAuthenticationSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.OpenidAuthenticationSettings"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.OpenidAuthenticationSettings[]",
          "description": "Collection of OpenID Connect authentication settings included into this API."
        },
        "subscriptionKeyRequired": {
          "type": "boolean",
          "description": "Specifies whether subscription key is required during call to this API, true - API is included into closed products only, false - API is included into open products alone, null - there is a mix of products."
        }
      },
      "description": "Authentication settings.",
      "required": [
        "oAuth2AuthenticationSettings",
        "openidAuthenticationSettings"
      ]
    },
    "DeveloperServicesAPI.Models.AuthorizationServer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique identifier of the authorization server."
        },
        "description": {
          "type": "string",
          "description": "The human-readable name of the authorization server."
        },
        "clientId": {
          "type": "string",
          "description": "The client ID of the authorization server."
        },
        "authorizationEndpoint": {
          "type": "string",
          "description": "OAuth authorization endpoint <see cref=\"http://tools.ietf.org/html/rfc6749#section-3.2\"/>."
        },
        "tokenEndpoint": {
          "type": "string",
          "description": "OAuth token endpoint. <see cref=\"http://tools.ietf.org/html/rfc6749#section-3.1\"/>."
        },
        "defaultScope": {
          "type": "string",
          "description": "Scope applied by default on the console page. <see cref=\"http://tools.ietf.org/html/rfc6749#section-3.3\"/>."
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.GrantType"
          },
          "x-typespec-name": "DeveloperServicesAPI.Models.GrantType[]",
          "description": "Form of an authorization grant, which the client uses to request the access token. <see cref=\"http://tools.ietf.org/html/rfc6749#section-4\"/>."
        },
        "useInTestConsole": {
          "type": "boolean",
          "description": "Authorization Server may be used in the test console."
        },
        "useInApiDocumentation": {
          "type": "boolean",
          "description": "Authorization Server may be used in the API documentation."
        }
      },
      "description": "External OAuth authorization server settings.",
      "required": [
        "name",
        "description",
        "clientId",
        "authorizationEndpoint",
        "tokenEndpoint",
        "defaultScope",
        "grantTypes",
        "useInTestConsole",
        "useInApiDocumentation"
      ]
    },
    "DeveloperServicesAPI.Models.BearerTokenSendingMethod": {
      "type": "string",
      "description": "Form of an authorization grant, which the client uses to request the access token.",
      "enum": [
        "authorizationHeader",
        "query"
      ],
      "x-ms-enum": {
        "name": "BearerTokenSendingMethod",
        "modelAsString": true,
        "values": [
          {
            "name": "AuthorizationHeader",
            "value": "authorizationHeader",
            "description": "Access token will be transmitted in the Authorization header using Bearer schema."
          },
          {
            "name": "Query",
            "value": "query",
            "description": "Access token will be transmitted as query parameter."
          }
        ]
      }
    },
    "DeveloperServicesAPI.Models.ClientAuthenticationMethod": {
      "type": "string",
      "description": "Supported methods of authorization.",
      "enum": [
        "Basic",
        "Body"
      ],
      "x-ms-enum": {
        "name": "ClientAuthenticationMethod",
        "modelAsString": true,
        "values": [
          {
            "name": "Basic",
            "value": "Basic",
            "description": "Client authentication information will be transmitted in the Authorization header using Basic schema."
          },
          {
            "name": "Body",
            "value": "Body",
            "description": "Client authentication information will be transmitted as www-url-form-encoded body parameter."
          }
        ]
      }
    },
    "DeveloperServicesAPI.Models.Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code."
        },
        "message": {
          "type": "string",
          "description": "Error message."
        },
        "details": {
          "type": "string",
          "description": "Error details if exists."
        }
      },
      "description": "Error.",
      "required": [
        "code",
        "message"
      ]
    },
    "DeveloperServicesAPI.Models.ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.Error",
          "description": "Error itself."
        }
      },
      "description": "Error response object.",
      "required": [
        "error"
      ]
    },
    "DeveloperServicesAPI.Models.GrantType": {
      "type": "string",
      "description": "Form of an authorization grant, which the client uses to request the access token. <see cref=\"http://tools.ietf.org/html/rfc6749#section-4\"/>.",
      "enum": [
        "authorizationCode",
        "implicit",
        "resourceOwnerPassword",
        "clientCredentials",
        "authorizationCodeWithPkce"
      ],
      "x-ms-enum": {
        "name": "GrantType",
        "modelAsString": true,
        "values": [
          {
            "name": "AuthorizationCode",
            "value": "authorizationCode",
            "description": "<see cref=\"http://tools.ietf.org/html/rfc6749#section-4.1\"/>"
          },
          {
            "name": "Implicit",
            "value": "implicit",
            "description": "<see cref=\"http://tools.ietf.org/html/rfc6749#section-4.2\"/>"
          },
          {
            "name": "ResourceOwnerPassword",
            "value": "resourceOwnerPassword",
            "description": "<see cref=\"http://tools.ietf.org/html/rfc6749#section-4.3\"/>"
          },
          {
            "name": "ClientCredentials",
            "value": "clientCredentials",
            "description": "<see cref=\"http://tools.ietf.org/html/rfc6749#section-4.4\"/>"
          },
          {
            "name": "AuthorizationCodeWithPkce",
            "value": "authorizationCodeWithPkce",
            "description": "<see cref=\"http://tools.ietf.org/html/rfc7636\"/>"
          }
        ]
      }
    },
    "DeveloperServicesAPI.Models.IdentityConfirmationRequest": {
      "type": "object",
      "properties": {
        "to": {
          "type": "string",
          "description": "The email address to send the confirmation to."
        },
        "reason": {
          "type": "string",
          "description": "Confirmation reason."
        }
      },
      "description": "API Management Notification Request",
      "required": [
        "to",
        "reason"
      ]
    },
    "DeveloperServicesAPI.Models.IdentityResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Signed user id."
        },
        "provider": {
          "type": "string",
          "description": "Identity provider of the user."
        }
      },
      "description": "UserId associate with credentials provided in request.",
      "required": [
        "id",
        "provider"
      ]
    },
    "DeveloperServicesAPI.Models.Method": {
      "type": "string",
      "description": "HTTP Method.",
      "enum": [
        "HEAD",
        "GET",
        "POST",
        "PUT",
        "PATCH",
        "DELETE",
        "OPTIONS",
        "TRACE",
        "CONNECT"
      ],
      "x-ms-enum": {
        "name": "Method",
        "modelAsString": true,
        "values": [
          {
            "name": "Head",
            "value": "HEAD",
            "description": "HTTP HEAD method. <see cref=\"http://tools.ietf.org/html/rfc2616#section-9.4\"/>"
          },
          {
            "name": "Get",
            "value": "GET",
            "description": "HTTP GET method. <see cref=\"http://tools.ietf.org/html/rfc2616#section-9.3\"/>"
          },
          {
            "name": "Post",
            "value": "POST",
            "description": "HTTP POST method. <see cref=\"http://tools.ietf.org/html/rfc2616#section-9.5\"/>"
          },
          {
            "name": "Put",
            "value": "PUT",
            "description": "HTTP PUT method. <see cref=\"http://tools.ietf.org/html/rfc2616#section-9.6\"/>"
          },
          {
            "name": "Patch",
            "value": "PATCH",
            "description": "HTTP PATCH method."
          },
          {
            "name": "Delete",
            "value": "DELETE",
            "description": "HTTP DELETE method. <see cref=\"http://tools.ietf.org/html/rfc2616#section-9.7\"/>"
          },
          {
            "name": "Options",
            "value": "OPTIONS",
            "description": "HTTP OPTIONS method. <see cref=\"http://tools.ietf.org/html/rfc2616#section-9.2\"/>"
          },
          {
            "name": "Trace",
            "value": "TRACE",
            "description": "HTTP TRACE method. <see cref=\"http://tools.ietf.org/html/rfc2616#section-9.8\"/>"
          },
          {
            "name": "Connect",
            "value": "CONNECT",
            "description": "HTTP CONNECT method. <see cref=\"http://tools.ietf.org/html/rfc2616#section-9.9\"/>"
          }
        ]
      }
    },
    "DeveloperServicesAPI.Models.NameValuePair": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "DeveloperServicesAPI.Models.OAuth2AuthenticationSettings": {
      "type": "object",
      "properties": {
        "authorizationServerId": {
          "type": "string",
          "description": "OAuth2 authorization server identifier."
        },
        "scope": {
          "type": "string",
          "description": "Operations scope."
        },
        "authorizationServer": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.OAuth2AuthorizationServer",
          "description": "OAuth2 authorization server."
        }
      },
      "description": "OAuth2 authentication settings.",
      "required": [
        "authorizationServerId",
        "scope"
      ]
    },
    "DeveloperServicesAPI.Models.OAuth2AuthorizationServer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "OAuth2 authorization server identifier."
        },
        "name": {
          "type": "string",
          "description": "OAuth2 authorization server name."
        },
        "description": {
          "type": "string",
          "description": "OAuth2 authorization server description."
        },
        "clientRegistrationEndpoint": {
          "type": "string",
          "description": "OAuth2 authorization server client registration endpoint."
        },
        "authorizationEndpoint": {
          "type": "string",
          "description": "OAuth2 authorization server authorization endpoint <see cref=\"http://tools.ietf.org/html/rfc6749#section-3.2\"/>."
        },
        "authorizationMethods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.Method"
          },
          "x-typespec-name": "DeveloperServicesAPI.Models.Method[]",
          "description": "Supported methods of authorization."
        },
        "clientAuthenticationMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.ClientAuthenticationMethod"
          },
          "x-typespec-name": "DeveloperServicesAPI.Models.ClientAuthenticationMethod[]",
          "description": "Supported methods of authentication."
        },
        "tokenBodyParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.NameValuePair"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.NameValuePair[]",
          "description": "Token request body parameters."
        },
        "tokenEndpoint": {
          "type": "string",
          "description": "OAuth token endpoint. <see cref=\"http://tools.ietf.org/html/rfc6749#section-3.1\"/>."
        },
        "useInTestConsole": {
          "type": "boolean",
          "description": "Authorization Server may be used in the test console."
        },
        "useInApiDocumentation": {
          "type": "boolean",
          "description": "Authorization Server may be used in the API documentation."
        },
        "supportState": {
          "type": "boolean",
          "description": "Authorization Server may support client credentials in body by spec. <see cref=\"http://tools.ietf.org/html/rfc6749#section-3.1\"/>."
        },
        "defaultScope": {
          "type": "string",
          "description": "Scope that is going to applied by default on the console page. <see cref=\"http://tools.ietf.org/html/rfc6749#section-3.3\"/>."
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.GrantType"
          },
          "x-typespec-name": "DeveloperServicesAPI.Models.GrantType[]",
          "description": "Form of an authorization grant, which the client uses to request the access token. <see cref=\"http://tools.ietf.org/html/rfc6749#section-4\"/>."
        },
        "bearerTokenSendingMethods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.BearerTokenSendingMethod"
          },
          "x-typespec-name": "DeveloperServicesAPI.Models.BearerTokenSendingMethod[]",
          "description": "Form of an authorization grant, which the client uses to request the access token. <see cref=\"http://tools.ietf.org/html/rfc6749#section-4\"/>."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID of developer console which is the client application."
        },
        "resourceOwnerUsername": {
          "type": "string",
          "description": "Username of the resource owner on behalf of whom developer console will make requests."
        },
        "resourceOwnerPassword": {
          "type": "string",
          "description": "Password of the resource owner on behalf of whom developer console will make requests."
        }
      },
      "description": "OAuth2 authorization server.",
      "required": [
        "id",
        "name",
        "description",
        "clientRegistrationEndpoint",
        "authorizationEndpoint",
        "authorizationMethods",
        "clientAuthenticationMethod",
        "tokenBodyParameters",
        "tokenEndpoint",
        "supportState",
        "defaultScope",
        "grantTypes",
        "bearerTokenSendingMethods",
        "clientId",
        "resourceOwnerUsername",
        "resourceOwnerPassword"
      ]
    },
    "DeveloperServicesAPI.Models.OpenidAuthenticationSettings": {
      "type": "object",
      "properties": {
        "openidProviderId": {
          "type": "string",
          "description": "OpenID Connect provider identifier."
        },
        "bearerTokenSendingMethods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.BearerTokenSendingMethod"
          },
          "x-typespec-name": "DeveloperServicesAPI.Models.BearerTokenSendingMethod[]",
          "description": "How to send token to the server."
        },
        "openidConnectProvider": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.OpenidConnectProvider",
          "description": "OpenID Connect provider."
        }
      },
      "description": "OpenID Connect authentication settings.",
      "required": [
        "openidProviderId",
        "bearerTokenSendingMethods"
      ]
    },
    "DeveloperServicesAPI.Models.OpenidConnectProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "OpenID Connect Provider identifier."
        },
        "name": {
          "type": "string",
          "description": "OpenID Connect Provider name."
        },
        "description": {
          "type": "string",
          "description": "OpenID Connect Provider description."
        },
        "metadataEndpoint": {
          "type": "string",
          "description": "OpenID Connect Provider metadata endpoint."
        },
        "useInTestConsole": {
          "type": "boolean",
          "description": "Open Id Connect Provider may be used in the test console."
        },
        "useInApiDocumentation": {
          "type": "boolean",
          "description": "Open Id Connect Provider may be used in the API documentation."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID of developer console which is the client application."
        }
      },
      "description": "OpenID Connect Provider settings.",
      "required": [
        "id",
        "name",
        "description",
        "metadataEndpoint",
        "clientId"
      ]
    },
    "DeveloperServicesAPI.Models.Operation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Operation identifier."
        },
        "name": {
          "type": "string",
          "description": "Operation name."
        },
        "description": {
          "type": "string",
          "description": "Operation description."
        },
        "method": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.Method",
          "description": "Operation method."
        },
        "urlTemplate": {
          "type": "string",
          "description": "Operation URL template."
        },
        "templateParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.Parameter"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.Parameter[]",
          "description": "Operation URL template parameters."
        },
        "request": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.Request",
          "description": "Operation request details."
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.Response"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.Response[]",
          "description": "Operation responses."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.Tag"
          },
          "x-typespec-name": "DeveloperServicesAPI.Models.Tag[]",
          "description": "Operation tags."
        }
      },
      "description": "API operation details.",
      "required": [
        "id",
        "name",
        "description",
        "method",
        "urlTemplate",
        "templateParameters",
        "request",
        "responses",
        "tags"
      ]
    },
    "DeveloperServicesAPI.Models.Parameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Parameter name."
        },
        "description": {
          "type": "string",
          "description": "Parameter description."
        },
        "type": {
          "type": "string",
          "description": "Parameter type."
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether parameter is required or not."
        },
        "defaultValue": {
          "type": "string",
          "description": "Parameter default value."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-typespec-name": "string[]",
          "description": "Parameter values."
        },
        "schemaId": {
          "type": "string",
          "description": "Parameter schema identifier."
        },
        "typeName": {
          "type": "string",
          "description": "Parameter type name."
        }
      },
      "description": "API operation method."
    },
    "DeveloperServicesAPI.Models.Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Product identifier."
        },
        "name": {
          "type": "string",
          "description": "Product name."
        },
        "description": {
          "type": "string",
          "description": "Product description."
        },
        "terms": {
          "type": "string",
          "description": "Product terms and conditions. Developer will have to accept these terms before he's allowed to call product API."
        },
        "subscriptionRequired": {
          "type": "boolean",
          "description": "Specifies whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true."
        },
        "approvalRequired": {
          "type": "boolean",
          "description": "Specifies whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can call any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of true."
        },
        "subscriptionsLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
        }
      },
      "description": "Product definition.",
      "required": [
        "id",
        "name",
        "description",
        "terms"
      ]
    },
    "DeveloperServicesAPI.Models.Representation": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Representation content type."
        },
        "schemaId": {
          "type": "string",
          "description": "Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'."
        },
        "typeName": {
          "type": "string",
          "description": "Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'."
        },
        "formParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.Parameter"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.Parameter[]",
          "description": "Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'."
        }
      },
      "description": "Operation request representation."
    },
    "DeveloperServicesAPI.Models.Request": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Request description."
        },
        "queryParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.Parameter"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.Parameter[]",
          "description": "Collection of operation request query parameters."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.Parameter"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.Parameter[]",
          "description": "Collection of operation request headers."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.Representation"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.Representation[]",
          "description": "Collection of operation request representations."
        }
      },
      "description": "Operation request description."
    },
    "DeveloperServicesAPI.Models.Response": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Operation response status code."
        },
        "description": {
          "type": "string",
          "description": "Operation response description."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.Parameter"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.Parameter[]",
          "description": "Collection of operation response headers."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperServicesAPI.Models.Representation"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "DeveloperServicesAPI.Models.Representation[]",
          "description": "Collection of operation response representations."
        }
      },
      "description": "Operation response description."
    },
    "DeveloperServicesAPI.Models.SubscriptionKeyParameterNames": {
      "type": "object",
      "properties": {
        "header": {
          "type": "string",
          "description": "Subscription key header name."
        },
        "query": {
          "type": "string",
          "description": "Subscription key query string parameter name."
        }
      },
      "description": "Subscription key parameter names.",
      "required": [
        "header",
        "query"
      ]
    },
    "DeveloperServicesAPI.Models.Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Tag ID."
        },
        "name": {
          "type": "string",
          "description": "Tag name."
        }
      },
      "description": "Tag definition.",
      "required": [
        "id",
        "name"
      ]
    },
    "DeveloperServicesAPI.Models.TagDescription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Tag description identifier."
        },
        "tagId": {
          "type": "string",
          "description": "Tag identifier."
        },
        "name": {
          "type": "string",
          "description": "Tag name. Must be 1 to 160 characters long."
        },
        "description": {
          "type": "string",
          "description": "Tag description. Must be 1 to 1000 characters long."
        },
        "externalDocsDescription": {
          "type": "string",
          "description": "Tag external documentation description."
        },
        "externalDocsUrl": {
          "type": "string",
          "description": "Tag external documentation URL."
        }
      },
      "description": "Tag with description.",
      "required": [
        "id",
        "tagId",
        "name",
        "description",
        "externalDocsDescription",
        "externalDocsUrl"
      ]
    },
    "DeveloperServicesAPI.Models.User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User id."
        },
        "email": {
          "type": "string",
          "description": "User email."
        },
        "firstName": {
          "type": "string",
          "description": "User first name."
        },
        "lastName": {
          "type": "string",
          "description": "User last name."
        },
        "state": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.UserState",
          "description": "User state."
        },
        "registrationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of user registration."
        }
      },
      "description": "User profile.",
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "state",
        "registrationDate"
      ]
    },
    "DeveloperServicesAPI.Models.UserDelegationOperationRequest": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "description": "Id of product. Is not required for all operations."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Id of subscription. Is not required for all operations."
        }
      },
      "description": "User delegation operation request",
      "required": [
        "productId",
        "subscriptionId"
      ]
    },
    "DeveloperServicesAPI.Models.UserDelegationOperationResponse": {
      "type": "object",
      "properties": {
        "redirectUrl": {
          "type": "string",
          "description": "Redirect URL"
        }
      },
      "description": "User delegation operation response",
      "required": [
        "redirectUrl"
      ]
    },
    "DeveloperServicesAPI.Models.UserState": {
      "type": "string",
      "description": "User state.",
      "enum": [
        "active",
        "blocked",
        "pending",
        "deleted"
      ],
      "x-ms-enum": {
        "name": "UserState",
        "modelAsString": true,
        "values": [
          {
            "name": "Active",
            "value": "active",
            "description": "User is active."
          },
          {
            "name": "Blocked",
            "value": "blocked",
            "description": "User is blocked. Blocked users cannot authenticate at developer portal or call API."
          },
          {
            "name": "Pending",
            "value": "pending",
            "description": "User account is pending. Requires identity confirmation"
          },
          {
            "name": "Deleted",
            "value": "deleted",
            "description": "User account is closed. All identities and related entities are removed."
          }
        ]
      }
    },
    "DeveloperServicesAPI.Models.UserUpdate": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "User password."
        },
        "firstName": {
          "type": "string",
          "description": "User first name."
        },
        "lastName": {
          "type": "string",
          "description": "User last name."
        },
        "state": {
          "$ref": "#/definitions/DeveloperServicesAPI.Models.UserState",
          "description": "User state."
        }
      },
      "description": "User update object."
    }
  },
  "parameters": {
    "DeveloperServicesAPI.Models.ListParams.filter": {
      "name": "filter",
      "in": "query",
      "required": false,
      "description": "OData filter query option.",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "DeveloperServicesAPI.Models.ListParams.skip": {
      "name": "skip",
      "in": "query",
      "required": false,
      "description": "Number of element to skip.",
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "DeveloperServicesAPI.Models.ListParams.top": {
      "name": "top",
      "in": "query",
      "required": false,
      "description": "Number of element to take from the top.",
      "maximum": 100,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "DeveloperServicesAPI.Models.UserParams": {
      "name": "userId",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Routes.ApiVersionSets.CommonParams": {
      "name": "versionSetId",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Routes.Apis.CommonParams": {
      "name": "apiId",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
