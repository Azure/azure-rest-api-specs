{
  "swagger": "2.0",
  "info": {
    "title": "Azure AgFoodPlatform Data Plane Service",
    "description": "APIs documentation for Azure AgPlatform DataPlane Service.",
    "version": "2024-11-01-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "paths": {
    "/catalogs": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "description": "Returns a paginated list of Catalog resources.",
        "operationId": "Catalogs_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CatalogListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalogs_List": {
            "$ref": "./examples/Catalogs_List.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "description": "Gets a specified Catalog resource.",
        "operationId": "Catalogs_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalogs_Get": {
            "$ref": "./examples/Catalogs_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Catalogs"
        ],
        "description": "Creates or updates a Catalog resource.",
        "operationId": "Catalogs_CreateOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of the Catalog resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "catalog",
            "description": "Catalog resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          }
        },
        "x-ms-examples": {
          "Catalogs_CreateOrUpdate": {
            "$ref": "./examples/Catalogs_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Catalogs"
        ],
        "description": "Deletes Catalog for given Catalog id.",
        "operationId": "Catalogs_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of Catalog to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalogs_Delete": {
            "$ref": "./examples/Catalogs_Delete.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/collections": {
      "get": {
        "tags": [
          "Collections"
        ],
        "description": "Returns a paginated list of Collection resources.",
        "operationId": "Collections_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CollectionListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Collections_List": {
            "$ref": "./examples/Collections_List.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/collections/{collectionId}": {
      "get": {
        "tags": [
          "Collections"
        ],
        "description": "Gets a specified Collection resource.",
        "operationId": "Collections_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "collectionId",
            "description": "Id of the Collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Collections_Get": {
            "$ref": "./examples/Collections_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Collections"
        ],
        "description": "Creates or updates a Collection resource.",
        "operationId": "Collections_CreateOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "description": "Id of the Collection resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of the Catalog resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "collection",
            "description": "Collection resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        },
        "x-ms-examples": {
          "Collections_CreateOrUpdate": {
            "$ref": "./examples/Collections_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Collections"
        ],
        "description": "Deletes Collection for given Collection id.",
        "operationId": "Collections_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "collectionId",
            "description": "Id of Collection to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Collections_Delete": {
            "$ref": "./examples/Collections_Delete.json"
          }
        }
      }
    },
    "/file:delete": {
      "post": {
        "tags": [
          "File"
        ],
        "description": "Deletes file.",
        "operationId": "File_Delete",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "request",
            "description": "request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-ms-examples": {
          "File_Delete": {
            "$ref": "./examples/File_Delete.json"
          }
        }
      }
    },
    "/file:download": {
      "post": {
        "tags": [
          "File"
        ],
        "description": "Downloads and returns file Stream as response for the given input filePath.",
        "operationId": "File_Download",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "request",
            "description": "request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary",
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "File_Download": {
            "$ref": "./examples/File_Download.json"
          }
        }
      }
    },
    "/file:upload": {
      "post": {
        "tags": [
          "File"
        ],
        "description": "Uploads a file.",
        "operationId": "File_Upload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "File_Upload": {
            "$ref": "./examples/File_Upload.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/collections/{collectionId}/items/:create": {
      "post": {
        "tags": [
          "Items"
        ],
        "description": "Creates or updates a Item resource.",
        "operationId": "Items_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "description": "Id of the Collection resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of the Catalog resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "item",
            "description": "Collection resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        },
        "x-ms-examples": {
          "Items_Create": {
            "$ref": "./examples/Items_Create.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/collections/{collectionId}/items/{itemId}": {
      "get": {
        "tags": [
          "Items"
        ],
        "description": "Gets a specified Item resource.",
        "operationId": "Items_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "collectionId",
            "description": "Id of the Collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "description": "Id of the Item.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Items_Get": {
            "$ref": "./examples/Items_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Items"
        ],
        "description": "Creates or updates a Item resource.",
        "operationId": "Items_CreateOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "description": "Id of the Item resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "collectionId",
            "description": "Id of the Collection resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of the Catalog resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "item",
            "description": "Item resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        },
        "x-ms-examples": {
          "Items_CreateOrUpdate": {
            "$ref": "./examples/Items_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "description": "Deletes Item for given Item id.",
        "operationId": "Items_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "Id of Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "collectionId",
            "description": "Id of Collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "description": "Id of Item to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Items_Delete": {
            "$ref": "./examples/Items_Delete.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/collections/{collectionId}/items:search": {
      "post": {
        "tags": [
          "Items"
        ],
        "description": "Search for Items across all parties by intersecting geometry.",
        "operationId": "Items_GetAllUnderCollection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "catalogId.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "collectionId",
            "description": "collectionId.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000, Default Value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "searchItemQuery",
            "description": "Query filters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ItemListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Items_GetAllUnderCollection": {
            "$ref": "./examples/Items_GetAllUnderCollection.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/items:search": {
      "post": {
        "tags": [
          "Items"
        ],
        "description": "Search for Items across all collections.",
        "operationId": "Items_SearchAcrossCollection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "catalogId.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000, Default Value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "searchItemQuery",
            "description": "Query filters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CrossCollectionItemSearchQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ItemListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Items_SearchAcrossCollection": {
            "$ref": "./examples/Items_SearchAcrossCollection.json"
          }
        }
      }
    },
    "/external/satellite:fetch": {
      "post": {
        "tags": [
          "Satellite"
        ],
        "description": "Fetches Satellite data.",
        "operationId": "Satellite_FetchItems",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default value = 10.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Skip token for getting next set of results.",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "searchItemsQuery",
            "description": "Query filters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SatelliteFetchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SatelliteFetchResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Satellite_FetchItems": {
            "$ref": "./examples/Satellite_FetchItems.json"
          }
        }
      }
    },
    "/external/satellite:stac": {
      "post": {
        "tags": [
          "Satellite"
        ],
        "description": "Searches for STAC items by collection id, bbox, intersecting geometry, start and end datetime.",
        "operationId": "Satellite_SearchItems",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default value = 10.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Skip token for getting next set of results.",
            "type": "integer",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "request",
            "description": "Request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SatelliteStacRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchFeaturesResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Satellite_SearchItems": {
            "$ref": "./examples/Satellite_SearchItems.json"
          }
        }
      }
    },
    "/schemas": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "description": "Returns a paginated list of Schema resources.",
        "operationId": "Schemas_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "names",
            "description": "Names of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filters on key-value pairs within the Properties object.\r\neg. \"{testKey} eq {testValue}\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Statuses of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Ids of the resource.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "minCreatedDateTime",
            "description": "Minimum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedDateTime",
            "description": "Maximum creation date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "minLastModifiedDateTime",
            "description": "Minimum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxLastModifiedDateTime",
            "description": "Maximum last modified date of resource (inclusive).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
            "type": "integer",
            "format": "int32",
            "default": 50,
            "maximum": 1000,
            "minimum": 10
          },
          {
            "in": "query",
            "name": "skipToken",
            "description": "Skip token for getting next set of results.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SchemaListResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Schemas_List": {
            "$ref": "./examples/Schemas_List.json"
          }
        }
      }
    },
    "/schemas/{schemaId}": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "description": "Gets a specified Schema resource.",
        "operationId": "Schemas_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schemaId",
            "description": "Id of the Schema.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Schema"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Schemas_Get": {
            "$ref": "./examples/Schemas_Get.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Schemas"
        ],
        "description": "Creates or updates a Schema resource.",
        "operationId": "Schemas_CreateOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schemaId",
            "description": "Id of the Schema resource.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "schema",
            "description": "Schema resource payload to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Schema"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Schema"
            }
          }
        },
        "x-ms-examples": {
          "Schemas_CreateOrUpdate": {
            "$ref": "./examples/Schemas_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Schemas"
        ],
        "description": "Deletes Schema for given Schema id.",
        "operationId": "Schemas_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schemaId",
            "description": "Id of Schema to be deleted.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Schemas_Delete": {
            "$ref": "./examples/Schemas_Delete.json"
          }
        }
      }
    },
    "/external/solutions:cancel-job": {
      "post": {
        "tags": [
          "Solutions"
        ],
        "description": "Cancel Solution job Async.",
        "operationId": "Solutions_CancelJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "solution",
            "description": "Solution.",
            "schema": {
              "$ref": "#/definitions/Solution"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SamplePartnerResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Solutions_CancelJob": {
            "$ref": "./examples/Solutions_CancelJob.json"
          }
        }
      }
    },
    "/external/solutions:create-job": {
      "post": {
        "tags": [
          "Solutions"
        ],
        "description": "Creates solution job async.",
        "operationId": "Solutions_CreateJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "solution",
            "description": "Solution.",
            "schema": {
              "$ref": "#/definitions/SolutionData"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/SamplePartnerResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "headers": {
              "Operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location for monitoring the operation state."
              },
              "x-ms-error-code": {
                "type": "string",
                "x-ms-client-name": "ErrorCode"
              }
            },
            "x-ms-error-response": true
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "Solutions_CreateJob": {
            "$ref": "./examples/Solutions_CreateJob.json"
          }
        }
      }
    },
    "/external/solutions:get-data": {
      "post": {
        "tags": [
          "Solutions"
        ],
        "description": "Gets solution Data async.",
        "operationId": "Solutions_GetData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "solution",
            "description": "Solution.",
            "schema": {
              "$ref": "#/definitions/SolutionData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SamplePartnerResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Solutions_GetData": {
            "$ref": "./examples/Solutions_GetData.json"
          }
        }
      }
    },
    "/external/solutions:get-job": {
      "post": {
        "tags": [
          "Solutions"
        ],
        "description": "Gets Solution get job response async.",
        "operationId": "Solutions_GetJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "solution",
            "description": "Solution.",
            "schema": {
              "$ref": "#/definitions/Solution"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SamplePartnerResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Solutions_GetJob": {
            "$ref": "./examples/Solutions_GetJob.json"
          }
        }
      }
    },
    "/external/weather:fetch": {
      "post": {
        "tags": [
          "Weather"
        ],
        "description": "Returns a list of WeatherData.",
        "operationId": "Weather_Get",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The requested API version",
            "type": "string",
            "default": "1.0",
            "required": true
          },
          {
            "in": "body",
            "name": "weatherRequest",
            "description": "Weather request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WeatherRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WeatherResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Weather_Get": {
            "$ref": "./examples/Weather_Get.json"
          }
        }
      }
    }
  },
  "definitions": {
    "ApiKeyAuthCredentials": {
      "description": "Api Key Auth Credentials class for API Key based Auth.",
      "required": [
        "apiKey"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AuthCredentials"
        }
      ],
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/KeyVaultProperties"
        }
      }
    },
    "Asset": {
      "description": "Asset.",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/DataFormat"
        },
        "name": {
          "description": "Name.",
          "type": "string"
        },
        "href": {
          "description": "Href.",
          "type": "string"
        }
      }
    },
    "AuthCredentials": {
      "description": "AuthCredentials abstract base class for Auth Purpose.",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/AuthCredentialsKind"
        }
      }
    },
    "AuthCredentialsKind": {
      "description": "Enum for different types of AuthCredentials supported.",
      "enum": [
        "OAuthClientCredentials",
        "ApiKeyAuthCredentials"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "AuthCredentialsKind",
        "modelAsString": true
      }
    },
    "Catalog": {
      "description": "Catalog.",
      "type": "object",
      "properties": {
        "links": {
          "description": "Links for referencing other objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "CatalogCollection": {
      "description": "Schema for storing catalog and collection id.",
      "type": "object",
      "properties": {
        "catalogId": {
          "description": "Catalog Id.",
          "type": "string",
          "readOnly": true
        },
        "collectionId": {
          "description": "Collection Id.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CatalogListResponse": {
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Catalog"
          }
        },
        "skipToken": {
          "type": "string"
        },
        "nextLink": {
          "type": "string"
        }
      }
    },
    "Collection": {
      "description": "Collection.",
      "required": [
        "schemaId"
      ],
      "type": "object",
      "properties": {
        "schemaId": {
          "description": "Schema Foreign Key.",
          "minLength": 1,
          "type": "string"
        },
        "catalogId": {
          "description": "CatalogId.",
          "type": "string",
          "readOnly": true
        },
        "links": {
          "description": "Links for referencing other objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "CollectionListResponse": {
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Collection"
          }
        },
        "skipToken": {
          "type": "string"
        },
        "nextLink": {
          "type": "string"
        }
      }
    },
    "CrossCollectionItemSearchQuery": {
      "description": "CrossCatalogItemSearchQuery.",
      "type": "object",
      "properties": {
        "collectionIds": {
          "description": "Owner Item Ids of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ownerItemIds": {
          "description": "Owner Item Ids of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataFilters": {
          "description": "Filters on key-value pairs within the Data object.\r\ne.g. \"{testKey} eq {testValue}\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "intersectsWithGeometry": {
          "$ref": "#/definitions/GeoJsonObject"
        },
        "ids": {
          "description": "Ids of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minCreatedDateTime": {
          "format": "date-time",
          "description": "Minimum creation date of resource (inclusive).",
          "type": "string"
        },
        "maxCreatedDateTime": {
          "format": "date-time",
          "description": "Maximum creation date of resource (inclusive).",
          "type": "string"
        },
        "minLastModifiedDateTime": {
          "format": "date-time",
          "description": "Minimum last modified date of resource (inclusive).",
          "type": "string"
        },
        "maxLastModifiedDateTime": {
          "format": "date-time",
          "description": "Maximum last modified date of resource (inclusive).",
          "type": "string"
        },
        "maxPageSize": {
          "format": "int32",
          "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
          "default": 50,
          "maximum": 1000,
          "minimum": 10,
          "type": "integer"
        },
        "skipToken": {
          "description": "Skip token for getting next set of results.",
          "type": "string"
        }
      }
    },
    "DataFormat": {
      "description": "Type of dataset.",
      "enum": [
        "Image",
        "Shapefile",
        "Binary"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "DataFormat",
        "modelAsString": true
      }
    },
    "DestinationType": {
      "description": "DestinationType.",
      "enum": [
        "Catalog",
        "Collection",
        "Item",
        "Asset"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "DestinationType",
        "modelAsString": true
      }
    },
    "Error": {
      "description": "An error from the Azure AgPlatform service.",
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Server-defined set of error codes.",
          "minLength": 1,
          "type": "string"
        },
        "message": {
          "description": "Human-readable representation of the error.",
          "minLength": 1,
          "type": "string"
        },
        "target": {
          "description": "Target of the error.",
          "type": "string"
        },
        "details": {
          "description": "Array of details about specific errors that led to this reported error.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "ErrorForLocation": {
      "description": "Model for error information for a failed location.",
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/WeatherLocation"
        },
        "code": {
          "format": "int32",
          "description": "Status code returned by data provider.",
          "type": "integer"
        },
        "description": {
          "description": "Description of the error.",
          "type": "string"
        },
        "retryable": {
          "description": "Flag suggesting if retry attempt with same request body should be made to fetch required data.",
          "type": "boolean"
        }
      }
    },
    "ErrorResponse": {
      "description": "An error response from the Azure AgPlatform service. See https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses for ErrorResponse reference document.",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        },
        "traceId": {
          "description": "Unique trace Id.",
          "type": "string"
        }
      }
    },
    "File": {
      "description": "File.",
      "required": [
        "filePath"
      ],
      "type": "object",
      "properties": {
        "filePath": {
          "description": "FilePath.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "GeoJsonObject": {
      "description": "GeoJSON (For more details: https://geojson.org/). Note: Coordinates are expected in [Longitude, Latitude] format.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/GeoJsonObjectType"
        }
      },
      "discriminator": "type"
    },
    "GeoJsonObjectType": {
      "description": "GeoJSON object type.",
      "enum": [
        "Point",
        "Polygon",
        "MultiPolygon"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "GeoJsonObjectType",
        "modelAsString": true
      }
    },
    "ImageFile": {
      "description": "Schema of image file resource.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "filePath": {
          "description": "ADLS path of the image file.",
          "type": "string"
        },
        "name": {
          "description": "Name of the image file.",
          "minLength": 1,
          "type": "string"
        },
        "imageFormat": {
          "$ref": "#/definitions/ImageFormat"
        },
        "resolution": {
          "format": "double",
          "description": "Resolution of image file in meters.",
          "type": "number"
        }
      }
    },
    "ImageFormat": {
      "description": "Supported image formats for scene resource.",
      "enum": [
        "TIF"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ImageFormat",
        "modelAsString": true
      }
    },
    "InnerError": {
      "description": "Inner error containing list of errors.See https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#innererror--object for InnerError reference document.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Specific error code than was provided by the containing error.",
          "type": "string"
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "Item": {
      "description": "Item.",
      "required": [
        "data"
      ],
      "type": "object",
      "properties": {
        "links": {
          "description": "Links.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "data": {
          "description": "Schema for records under the dataset.",
          "type": "object",
          "additionalProperties": {}
        },
        "ownerItemId": {
          "description": "OwnerItemId.",
          "type": "string"
        },
        "catalogId": {
          "description": "CatalogId.",
          "type": "string",
          "readOnly": true
        },
        "collectionId": {
          "description": "CollectionId.",
          "type": "string",
          "readOnly": true
        },
        "assets": {
          "description": "Assets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {},
          "example": {
            "key1": "value1",
            "key2": 123.45
          }
        }
      }
    },
    "ItemListResponse": {
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        },
        "skipToken": {
          "type": "string"
        },
        "nextLink": {
          "type": "string"
        }
      }
    },
    "ItemQuery": {
      "description": "CatalogQuery.",
      "type": "object",
      "properties": {
        "ownerItemIds": {
          "description": "Owner Item Ids of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataFilters": {
          "description": "Filters on key-value pairs within the Data object.\r\ne.g. \"{testKey} eq {testValue}\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "intersectsWithGeometry": {
          "$ref": "#/definitions/GeoJsonObject"
        },
        "ids": {
          "description": "Ids of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minCreatedDateTime": {
          "format": "date-time",
          "description": "Minimum creation date of resource (inclusive).",
          "type": "string"
        },
        "maxCreatedDateTime": {
          "format": "date-time",
          "description": "Maximum creation date of resource (inclusive).",
          "type": "string"
        },
        "minLastModifiedDateTime": {
          "format": "date-time",
          "description": "Minimum last modified date of resource (inclusive).",
          "type": "string"
        },
        "maxLastModifiedDateTime": {
          "format": "date-time",
          "description": "Maximum last modified date of resource (inclusive).",
          "type": "string"
        },
        "maxPageSize": {
          "format": "int32",
          "description": "Maximum number of items needed (inclusive).\r\nMinimum = 10, Maximum = 1000, Default value = 50.",
          "default": 50,
          "maximum": 1000,
          "minimum": 10,
          "type": "integer"
        },
        "skipToken": {
          "description": "Skip token for getting next set of results.",
          "type": "string"
        }
      }
    },
    "KeyVaultProperties": {
      "description": "Properties of the key vault.",
      "required": [
        "keyName",
        "keyVaultUri",
        "keyVersion"
      ],
      "type": "object",
      "properties": {
        "keyVaultUri": {
          "description": "Uri of the key vault.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "keyName": {
          "description": "Name of Key Vault key.",
          "maxLength": 256,
          "minLength": 2,
          "type": "string"
        },
        "keyVersion": {
          "description": "Version of Key Vault key.",
          "maxLength": 256,
          "minLength": 2,
          "type": "string"
        }
      }
    },
    "Link": {
      "description": "Link.",
      "type": "object",
      "properties": {
        "rel": {
          "$ref": "#/definitions/RelationshipType"
        },
        "href": {
          "description": "Href.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/DestinationType"
        }
      }
    },
    "Measures": {
      "description": "Schema for storing measurement readings and unit.",
      "type": "object",
      "properties": {
        "unit": {
          "description": "Data unit.",
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "description": "Data values.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        }
      }
    },
    "MultiPolygon": {
      "description": "MultiPolygon geometry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "required": [
            "coordinates",
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/definitions/GeoJsonObjectType"
            },
            "coordinates": {
              "description": "Gets or sets Coordinates of GeoJSON Object.\r\nIt must be an array of polygons, each polygon contains list of linear rings.\r\nFor Polygons with more than one of these rings, the first MUST be the exterior ring,\r\nand any others MUST be interior rings.",
              "minItems": 1,
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "format": "double",
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "MultiPolygon"
    },
    "OAuthClientCredentials": {
      "description": "OAuthClientCredentials for clientId clientSecret auth.",
      "required": [
        "clientId",
        "clientSecret"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AuthCredentials"
        }
      ],
      "properties": {
        "clientId": {
          "description": "ClientId associated with the provider.",
          "minLength": 1,
          "type": "string"
        },
        "clientSecret": {
          "$ref": "#/definitions/KeyVaultProperties"
        }
      }
    },
    "Point": {
      "description": "Point geometry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "required": [
            "coordinates",
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/definitions/GeoJsonObjectType"
            },
            "coordinates": {
              "description": "Gets or sets the coordinate of this point.\r\nIt must be an array of 2 or 3 elements for a 2D or 3D system.",
              "maximum": 3,
              "minimum": 2,
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Point"
    },
    "Polygon": {
      "description": "Polygon geometry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        },
        {
          "required": [
            "coordinates",
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/definitions/GeoJsonObjectType"
            },
            "coordinates": {
              "description": "Gets or sets type of the GeoJSON Object.\r\nIt must be an array of linear ring coordinate arrays.\r\nFor Polygons with more than one of these rings, the first MUST be the exterior ring,\r\nand any others MUST be interior rings.",
              "minItems": 1,
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "format": "double",
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      ],
      "x-ms-discriminator-value": "Polygon"
    },
    "RelationshipType": {
      "description": "Type of relationship.",
      "enum": [
        "DerivedFrom",
        "Child",
        "Parent"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "RelationshipType",
        "modelAsString": true
      }
    },
    "SamplePartnerRequestBody": {
      "description": "SamplePartnerRequestBody.",
      "type": "object",
      "properties": {
        "solutionId": {
          "description": "SolutionId.",
          "type": "string"
        },
        "partyId": {
          "description": "PartyId.",
          "type": "string"
        },
        "gddStartDate": {
          "format": "date-time",
          "description": "GddStartDate.",
          "type": "string"
        },
        "gddEndDate": {
          "format": "date-time",
          "description": "GddEndDate.",
          "type": "string"
        },
        "resourceId": {
          "description": "ResourceId.",
          "type": "string"
        },
        "resourceType": {
          "description": "ResourceType.",
          "type": "string"
        },
        "crop": {
          "description": "Crop.",
          "type": "string"
        },
        "temperatureUnit": {
          "description": "TemperatureUnit.",
          "type": "string"
        },
        "method": {
          "description": "Method.",
          "type": "string"
        }
      }
    },
    "SamplePartnerResponse": {
      "description": "SamplePartnerResponse.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id.",
          "type": "string"
        },
        "message": {
          "description": "Message.",
          "type": "string"
        },
        "status": {
          "description": "Status.",
          "type": "string"
        },
        "jobCreatedDateTime": {
          "format": "date-time",
          "description": "JobCreatedDateTime.",
          "type": "string"
        },
        "jobLastActionDateTime": {
          "format": "date-time",
          "description": "JobLastActionDateTime.",
          "type": "string"
        },
        "e2eid": {
          "description": "E2eid.",
          "type": "string"
        },
        "partnerRequestBody": {
          "$ref": "#/definitions/SamplePartnerRequestBody"
        }
      }
    },
    "SatelliteData": {
      "description": "Data Model for SatelliteIngestionJobRequest.",
      "type": "object",
      "properties": {
        "imageNames": {
          "description": "List of ImageNames.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "NDVI"
          ]
        },
        "imageFormats": {
          "description": "List of ImageFormats. Available value: TIF.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "TIF"
          ]
        },
        "imageResolutions": {
          "description": "List of ImageResolutions in meters. Available values: 10, 20, 60.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          },
          "example": [
            10
          ]
        }
      }
    },
    "SatelliteFetchData": {
      "description": "SatelliteFetchData.",
      "required": [
        "providerCollectionId"
      ],
      "type": "object",
      "properties": {
        "dateTime": {
          "format": "date-time",
          "description": "Start Date.",
          "type": "string"
        },
        "provider": {
          "description": "Provider of satellite data. Available Value: SentinelHub.",
          "type": "string"
        },
        "providerCollectionId": {
          "description": "Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c.",
          "minLength": 1,
          "type": "string"
        },
        "featureId": {
          "description": "Feature Id.",
          "type": "string"
        },
        "imageFiles": {
          "description": "ImageFiles.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageFile"
          }
        },
        "itemUri": {
          "description": "ItemUri.",
          "type": "string"
        },
        "id": {
          "description": "Id.",
          "type": "string"
        }
      }
    },
    "SatelliteFetchRequest": {
      "description": "Satellite Fetch Request.",
      "required": [
        "credentials",
        "data",
        "itemUri",
        "provider",
        "providerCollectionId"
      ],
      "type": "object",
      "properties": {
        "startDateTime": {
          "format": "date-time",
          "description": "Start Date.",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/OAuthClientCredentials"
        },
        "endDateTime": {
          "format": "date-time",
          "description": "End Date.",
          "type": "string"
        },
        "provider": {
          "description": "Provider of satellite data. Available Value: SentinelHub.",
          "minLength": 1,
          "type": "string"
        },
        "itemUri": {
          "description": "ItemUri.",
          "minLength": 1,
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/SatelliteData"
        },
        "providerCollectionId": {
          "description": "Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c.",
          "minLength": 1,
          "type": "string"
        },
        "featureId": {
          "description": "Feature Id.",
          "type": "string"
        }
      }
    },
    "SatelliteFetchResponse": {
      "description": "Satellite Fetch Response.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Value.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SatelliteFetchData"
          }
        }
      }
    },
    "SatelliteStacRequest": {
      "description": "Satellite  Stac Request.",
      "required": [
        "credentials",
        "provider",
        "providerCollectionId"
      ],
      "type": "object",
      "properties": {
        "startDateTime": {
          "format": "date-time",
          "description": "Start datetime of the time interval in which to search for Items.",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/OAuthClientCredentials"
        },
        "provider": {
          "description": "Provider of satellite data. Available Value: SentinelHub.",
          "minLength": 1,
          "type": "string"
        },
        "endDateTime": {
          "format": "date-time",
          "description": "End datetime of the time interval in which to search for Items.",
          "type": "string"
        },
        "intersects": {
          "$ref": "#/definitions/GeoJsonObject"
        },
        "bbox": {
          "description": "Only items that have a geometry that intersects the bounding box are selected.\r\nThe bounding box is provided as four numbers. The coordinate reference system of the values is WGS84 longitude/latitude.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "featureIds": {
          "description": "Array of feature ids to return.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "providerCollectionId": {
          "description": "Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "Schema": {
      "description": "SchemaModel.",
      "required": [
        "schemaModel"
      ],
      "type": "object",
      "properties": {
        "dependentCollections": {
          "description": "Dependent Collections.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogCollection"
          },
          "readOnly": true
        },
        "schemaModel": {
          "description": "Schema.",
          "type": "object",
          "additionalProperties": {}
        },
        "id": {
          "description": "Unique resource ID.",
          "type": "string",
          "readOnly": true
        },
        "eTag": {
          "description": "The ETag value to implement optimistic concurrency.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Status of the resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "modifiedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "readOnly": true,
          "example": "2020-12-31T11:10:21Z"
        },
        "source": {
          "description": "Source of the resource.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "description": "Name to identify resource.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Textual description of the resource.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "createdBy": {
          "description": "Created by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "modifiedBy": {
          "description": "Modified by user/tenant id.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A collection of key value pairs that belongs to the resource.\r\nEach pair must not have a key greater than 50 characters\r\nand must not have a value greater than 150 characters.\r\nNote: A maximum of 25 key value pairs can be provided for a resource and only string,\r\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "type": "object",
          "additionalProperties": {}
        }
      },
      "example": {
        "schemaModel": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 2,
              "maxLength": 100
            },
            "code": {
              "type": "string"
            },
            "Company": {
              "type": "string"
            },
            "MatterStateCode": {
              "type": "string"
            },
            "RegulatorNumbers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ChemicalTypeCodes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ChemicalTypeNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "SubstanceCodes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "SubstanceNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "SubstancePercentages": {
              "type": "number",
              "maximum": 100,
              "minimum": 0
            },
            "CreatedAtDate": {
              "type": "string",
              "format": "date-time"
            },
            "UpdatedAtDate": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "Company",
            "name"
          ]
        }
      }
    },
    "SchemaListResponse": {
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Schema"
          }
        },
        "skipToken": {
          "type": "string"
        },
        "nextLink": {
          "type": "string"
        }
      }
    },
    "SearchFeaturesResponse": {
      "description": "Paged response contains list of items and next property to get the next set of results.",
      "required": [
        "features"
      ],
      "type": "object",
      "properties": {
        "features": {
          "description": "List of items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StacItem"
          }
        },
        "nextLink": {
          "description": "URL to do the POST request with same filters,\r\nto get next set of items.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Solution": {
      "description": "Solution.",
      "required": [
        "partnerRequestBody",
        "partnerRequestHeaders",
        "requestPath",
        "solutionId"
      ],
      "type": "object",
      "properties": {
        "solutionId": {
          "description": "SolutionId.",
          "minLength": 1,
          "type": "string"
        },
        "requestPath": {
          "description": "RequestPath.",
          "minLength": 1,
          "type": "string"
        },
        "partnerRequestBody": {
          "description": "Properties.",
          "type": "object",
          "additionalProperties": {}
        },
        "partnerRequestHeaders": {
          "description": "Properties.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "SolutionData": {
      "description": "SolutionData.",
      "required": [
        "inputData",
        "partnerRequestBody",
        "partnerRequestHeaders",
        "requestPath",
        "solutionId"
      ],
      "type": "object",
      "properties": {
        "inputData": {
          "description": "Input Data.",
          "type": "object",
          "additionalProperties": {}
        },
        "solutionId": {
          "description": "SolutionId.",
          "minLength": 1,
          "type": "string"
        },
        "requestPath": {
          "description": "RequestPath.",
          "minLength": 1,
          "type": "string"
        },
        "partnerRequestBody": {
          "description": "Properties.",
          "type": "object",
          "additionalProperties": {}
        },
        "partnerRequestHeaders": {
          "description": "Properties.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "StacAsset": {
      "description": "Assets.",
      "type": "object",
      "properties": {
        "href": {
          "description": "The HREF of the asset.",
          "type": "string"
        },
        "title": {
          "description": "The title of the asset.",
          "type": "string"
        },
        "description": {
          "description": "The description of the asset.",
          "type": "string"
        },
        "type": {
          "description": "The type of the asset.",
          "type": "string"
        },
        "roles": {
          "description": "The roles of the asset.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "StacItem": {
      "description": "Schema of STAC Item.\r\nRefer for spec: https://github.com/radiantearth/stac-spec/blob/v1.0.0-beta.2/item-spec/item-spec.md#item-fields.",
      "required": [
        "assets",
        "id",
        "links",
        "properties",
        "stacVersion",
        "type"
      ],
      "type": "object",
      "properties": {
        "stacVersion": {
          "description": "The STAC version the Stac Item implements.",
          "minLength": 1,
          "type": "string"
        },
        "stacExtensions": {
          "description": "A list of extensions the Stac Item implements.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "Provider identifier. Globally unique ID by Data provider.",
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Type of the GeoJSON Object. It's value is always Feature.",
          "minLength": 1,
          "type": "string"
        },
        "geometry": {
          "description": "Defines the full footprint of the asset represented by this item.\r\nIts a GeoJSON geometry."
        },
        "bbox": {
          "description": "Bounding box of the item.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "properties": {
          "description": "A dictionary of additional metadata for the item."
        },
        "links": {
          "description": "List of link objects to resources and related URLs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StacLink"
          }
        },
        "assets": {
          "description": "Dictionary of asset objects, each with a unique key.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/StacAsset"
          }
        },
        "providerCollectionId": {
          "description": "The id of the STAC Collection this Stac Item references.",
          "type": "string"
        }
      }
    },
    "StacLink": {
      "description": "Link.",
      "type": "object",
      "properties": {
        "href": {
          "description": "The HREF of the link.",
          "type": "string"
        },
        "rel": {
          "description": "The relation type of the link.",
          "type": "string"
        },
        "type": {
          "description": "The type of the link. Optional.",
          "type": "string"
        },
        "title": {
          "description": "The title of the link. Optional.",
          "type": "string"
        }
      }
    },
    "WeatherData": {
      "description": "Schema of weather data.",
      "type": "object",
      "properties": {
        "additionalAttributes": {
          "description": "A collection of key value pairs that belongs to the resource. Each pair must not have a key greater than 50 characters and must not have a value greater than 250 characters. Note: A maximum of 100 key value pairs can be provided for a resource and only string and numeral values are supported.",
          "type": "object",
          "additionalProperties": {}
        },
        "wetBulbTemperature": {
          "$ref": "#/definitions/Measures"
        },
        "cloudCover": {
          "$ref": "#/definitions/Measures"
        },
        "dayOfWeek": {
          "description": "Day of week.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dayOrNight": {
          "description": "This data field indicates whether it is daytime or nighttime based on the Local Apparent Time of the location.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expirationTime": {
          "description": "Expiration time in Utc format.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "iconCode": {
          "description": "This number is the key to the weather icon lookup. The data field shows the icon number that is matched to represent the observed weather conditions.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "iconCodeExtend": {
          "description": "Code representing full set sensible weather.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "hasPrecipitation": {
          "description": "Indicates whether there is precipitation or not.",
          "type": "array",
          "items": {
            "type": "boolean"
          }
        },
        "pressureMeanSeaLevel": {
          "$ref": "#/definitions/Measures"
        },
        "relativeHumidity": {
          "$ref": "#/definitions/Measures"
        },
        "temperature": {
          "$ref": "#/definitions/Measures"
        },
        "temperatureDewPoint": {
          "$ref": "#/definitions/Measures"
        },
        "temperatureFeelsLike": {
          "$ref": "#/definitions/Measures"
        },
        "temperatureHeatIndex": {
          "$ref": "#/definitions/Measures"
        },
        "temperatureWindChill": {
          "$ref": "#/definitions/Measures"
        },
        "uvDescription": {
          "description": "The UV Index Description which complements the UV Index value by providing an associated level of risk of skin damage due to exposure (-2 = Not Available, -1 = No Report, 0 to 2 = Low, 3 to 5 = Moderate, 6 to 7 = High, 8 to 10 = Very High, 11 to 16 = Extreme).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uvIndex": {
          "description": "Hourly maximum UV index.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "validTimeLocal": {
          "description": "Time forecast is valid in local apparent time.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validTime": {
          "description": "Time forecast is valid in Utc format.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "visibility": {
          "$ref": "#/definitions/Measures"
        },
        "windDirection": {
          "$ref": "#/definitions/Measures"
        },
        "windGust": {
          "$ref": "#/definitions/Measures"
        },
        "windSpeed": {
          "$ref": "#/definitions/Measures"
        },
        "wxPhraseLong": {
          "description": "Hourly sensible weather phrase containing longer description.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "wxPhraseShort": {
          "description": "Hourly sensible weather phrase containing short description.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WeatherDataErrors": {
      "description": "Model for errors encountered for all failed locations.",
      "type": "object",
      "properties": {
        "locations": {
          "description": "List of errors encountered for all failed locations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorForLocation"
          }
        }
      }
    },
    "WeatherLocation": {
      "description": "Schema of Location data.",
      "required": [
        "type",
        "value"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Location Type eg. LatLong/IataCode/IcaoCode/Placeid/PostalKey.",
          "maxLength": 25,
          "minLength": 2,
          "type": "string"
        },
        "value": {
          "description": "Location Value eg. \"10,-25\" for LocationType Type \"LatLong\".",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        }
      }
    },
    "WeatherLocationData": {
      "description": "Schema of WeatherLocationData data.",
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/WeatherLocation"
        },
        "requestCompletionTime": {
          "description": "Request Completion Time in Utc of the location.",
          "type": "string"
        },
        "lastRefreshedDateTime": {
          "format": "date-time",
          "description": "Date-time when resource was last requested, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "type": "string",
          "example": "2020-12-31T11:10:21Z"
        },
        "data": {
          "$ref": "#/definitions/WeatherData"
        }
      }
    },
    "WeatherMetadata": {
      "description": "Schema of Weather Metadata.",
      "required": [
        "providerApiName",
        "providerName",
        "units",
        "weatherDataType"
      ],
      "type": "object",
      "properties": {
        "weatherDataType": {
          "description": "Type of weather data (forecast/historical).",
          "minLength": 1,
          "type": "string"
        },
        "providerName": {
          "description": "Weather provider name.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "providerApiName": {
          "description": "Provider's api name to which request is to be made.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "language": {
          "description": "Language (IETF BCP 47 language tag) in which search results should be returned by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.",
          "default": "en-US",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "units": {
          "description": "Units for which request to data provider is to be sent. Supported values are 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's' for Metric SI units.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "WeatherRequest": {
      "description": "WeatherRequest.",
      "required": [
        "providerApiName",
        "providerName",
        "units"
      ],
      "type": "object",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/ApiKeyAuthCredentials"
        },
        "locations": {
          "description": "List of locations for which weather data need to be fetched from the provider.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeatherLocation"
          }
        },
        "providerName": {
          "description": "Weather provider name.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "providerApiName": {
          "description": "Provider's api name to which request is to be made.",
          "maxLength": 100,
          "minLength": 2,
          "type": "string"
        },
        "language": {
          "description": "Language (IETF BCP 47 language tag) in which search results should be returned by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.",
          "default": "en-US",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "units": {
          "description": "Units for which request to data provider is to be sent. Supported values are 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's' for Metric SI units.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "WeatherResponse": {
      "description": "Schema of Weather Data Provider Response.",
      "required": [
        "weatherMetadata"
      ],
      "type": "object",
      "properties": {
        "weatherMetadata": {
          "$ref": "#/definitions/WeatherMetadata"
        },
        "status": {
          "description": "Indicates a Succeeded, Failed, or PartiallySucceeded response.",
          "type": "string"
        },
        "locations": {
          "description": "List of weather data for all the weather locations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeatherLocationData"
          }
        },
        "errors": {
          "$ref": "#/definitions/WeatherDataErrors"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Please provide a valid bearer token for authorized API calls. Note that you might need to clear your browser cache if you tried un-authenticated calls before."
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
