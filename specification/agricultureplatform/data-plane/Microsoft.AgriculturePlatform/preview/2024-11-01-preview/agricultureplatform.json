{
  "swagger": "2.0",
  "info": {
    "title": "Azure AgriculturePlatform Data Platform Service",
    "version": "2024-11-01-preview",
    "description": "APIs documentation for Azure AgPlatform DataPlane Service.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "required": true,
        "type": "string"
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "Catalogs"
    },
    {
      "name": "Collections"
    },
    {
      "name": "File"
    },
    {
      "name": "Items"
    },
    {
      "name": "Satellite"
    },
    {
      "name": "Schemas"
    },
    {
      "name": "Solutions"
    },
    {
      "name": "Weather"
    }
  ],
  "paths": {
    "/catalogs": {
      "get": {
        "operationId": "CatalogsOperations_List",
        "tags": [
          "Catalogs"
        ],
        "description": "Returns a paginated list of Catalog resources.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.names"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.propertyFilters"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.statuses"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.ids"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.minCreatedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.maxCreatedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.minLastModifiedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.maxLastModifiedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.maxPageSize"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.skipToken"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedCatalog"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalogs_List": {
            "$ref": "./examples/Catalogs_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/catalogs/{catalogId}": {
      "get": {
        "operationId": "CatalogsOperations_Get",
        "tags": [
          "Catalogs"
        ],
        "description": "Gets a specified Catalog resource.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalogs_Get": {
            "$ref": "./examples/Catalogs_Get.json"
          }
        }
      },
      "patch": {
        "operationId": "CatalogsOperations_CreateOrUpdate",
        "tags": [
          "Catalogs"
        ],
        "description": "Creates or updates a Catalog resource.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogCreateOrUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalogs_CreateOrUpdate": {
            "$ref": "./examples/Catalogs_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "CatalogsOperations_Delete",
        "tags": [
          "Catalogs"
        ],
        "description": "Deletes Catalog for given Catalog id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Catalogs_Delete": {
            "$ref": "./examples/Catalogs_Delete.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/collections": {
      "get": {
        "operationId": "CollectionsOperations_List",
        "tags": [
          "Collections"
        ],
        "description": "Returns a paginated list of Collection resources.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.names"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.propertyFilters"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.statuses"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.ids"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.minCreatedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.maxCreatedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.minLastModifiedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.maxLastModifiedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.maxPageSize"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.skipToken"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedCollection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Collections_List": {
            "$ref": "./examples/Collections_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/catalogs/{catalogId}/collections/{collectionId}": {
      "get": {
        "operationId": "CollectionsOperations_Get",
        "tags": [
          "Collections"
        ],
        "description": "Gets a specified Collection resource.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "Unique resource ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Collections_Get": {
            "$ref": "./examples/Collections_Get.json"
          }
        }
      },
      "patch": {
        "operationId": "CollectionsOperations_CreateOrUpdate",
        "tags": [
          "Collections"
        ],
        "description": "Creates or updates a Collection resource.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "Unique resource ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CollectionCreateOrUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Collections_CreateOrUpdate": {
            "$ref": "./examples/Collections_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "CollectionsOperations_Delete",
        "tags": [
          "Collections"
        ],
        "description": "Deletes Collection for given Collection id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "Unique resource ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Collections_Delete": {
            "$ref": "./examples/Collections_Delete.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/collections/{collectionId}/items/{itemId}": {
      "get": {
        "operationId": "ItemsOperations_Get",
        "tags": [
          "Items"
        ],
        "description": "Gets a specified Item resource.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "Unique resource ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Id of the Item.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Items_Get": {
            "$ref": "./examples/Items_Get.json"
          }
        }
      },
      "patch": {
        "operationId": "ItemsOperations_CreateOrUpdate",
        "tags": [
          "Items"
        ],
        "description": "Creates or updates a Item resource.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "Unique resource ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Id of the Item.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemCreateOrUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Items_CreateOrUpdate": {
            "$ref": "./examples/Items_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "ItemsOperations_Delete",
        "tags": [
          "Items"
        ],
        "description": "Deletes Item for given Item id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "Unique resource ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Id of the Item.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Items_Delete": {
            "$ref": "./examples/Items_Delete.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/collections/{collectionId}/items:create": {
      "post": {
        "operationId": "ItemsOperations_Create",
        "tags": [
          "Items"
        ],
        "description": "Creates or updates a Item resource.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "Unique resource ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ItemResponse"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/ItemResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Items_Create": {
            "$ref": "./examples/Items_Create.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/collections/{collectionId}/items:search": {
      "post": {
        "operationId": "ItemsOperations_GetAllUnderCollection",
        "tags": [
          "Items"
        ],
        "description": "Search for Items across all parties by intersecting geometry.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "Unique resource ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000,\nDefault Value = 50.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 50,
            "minimum": 10,
            "maximum": 1000,
            "x-ms-client-name": "maximumPageSize"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ItemListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Items_GetAllUnderCollection": {
            "$ref": "./examples/Items_GetAllUnderCollection.json"
          }
        }
      }
    },
    "/catalogs/{catalogId}/items:search": {
      "post": {
        "operationId": "ItemsOperations_SearchAcrossCollection",
        "tags": [
          "Items"
        ],
        "description": "Search for Items across all collections.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Id of the Catalog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000,\nDefault Value = 50.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 50,
            "minimum": 10,
            "maximum": 1000,
            "x-ms-client-name": "maximumPageSize"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CrossCollectionItemSearchQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ItemListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Items_SearchAcrossCollection": {
            "$ref": "./examples/Items_SearchAcrossCollection.json"
          }
        }
      }
    },
    "/external/satellite:fetch": {
      "post": {
        "operationId": "SatelliteOperations_FetchItems",
        "tags": [
          "Satellite"
        ],
        "description": "Fetches Satellite data.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "maxpagesize",
            "in": "query",
            "description": "Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default\nvalue = 10.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip token for getting next set of results.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 2147483647
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SatelliteFetchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SatelliteFetchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Satellite_FetchItems": {
            "$ref": "./examples/Satellite_FetchItems.json"
          }
        }
      }
    },
    "/external/satellite:stac": {
      "post": {
        "operationId": "SatelliteOperations_SearchItems",
        "tags": [
          "Satellite"
        ],
        "description": "Searches for STAC items by collection id, bbox, intersecting geometry, start\nand end datetime.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "maxpagesize",
            "in": "query",
            "description": "Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default\nvalue = 10.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip token for getting next set of results.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 2147483647
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SatelliteStacRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchFeaturesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Satellite_SearchItems": {
            "$ref": "./examples/Satellite_SearchItems.json"
          }
        }
      }
    },
    "/external/solutions:cancel-job": {
      "post": {
        "operationId": "SolutionsOperations_CancelJob",
        "tags": [
          "Solutions"
        ],
        "description": "Cancel Solution job Async.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Solution"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SamplePartnerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Solution_CancelJob": {
            "$ref": "./examples/Solutions_CancelJob.json"
          }
        }
      }
    },
    "/external/solutions:create-job": {
      "post": {
        "operationId": "SolutionsOperations_CreateJob",
        "tags": [
          "Solutions"
        ],
        "description": "Creates solution job async.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SolutionData"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "$ref": "#/definitions/SamplePartnerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Solution_CreateJob": {
            "$ref": "./examples/Solutions_CreateJob.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/external/solutions:get-data": {
      "post": {
        "operationId": "SolutionsOperations_GetData",
        "tags": [
          "Solutions"
        ],
        "description": "Gets solution Data async.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SolutionData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SamplePartnerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Solution_GetData": {
            "$ref": "./examples/Solutions_GetData.json"
          }
        }
      }
    },
    "/external/solutions:get-job": {
      "post": {
        "operationId": "SolutionsOperations_GetJob",
        "tags": [
          "Solutions"
        ],
        "description": "Gets Solution get job response async.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Solution"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SamplePartnerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Solution_GetJob": {
            "$ref": "./examples/Solutions_GetJob.json"
          }
        }
      }
    },
    "/external/weather:fetch": {
      "post": {
        "operationId": "WeatherOperations_Get",
        "tags": [
          "Weather"
        ],
        "description": "Returns a list of WeatherData.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WeatherRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/WeatherResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Weather_Get": {
            "$ref": "./examples/Weather_Get.json"
          }
        }
      }
    },
    "/file:delete": {
      "post": {
        "operationId": "FileOperations_Delete",
        "tags": [
          "File"
        ],
        "description": "Deletes file.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "File_Delete": {
            "$ref": "./examples/File_Delete.json"
          }
        }
      }
    },
    "/file:download": {
      "post": {
        "operationId": "FileOperations_Download",
        "tags": [
          "File"
        ],
        "description": "Downloads and returns file Stream as response for the given input filePath.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accept",
            "in": "header",
            "description": "Accept header",
            "required": true,
            "type": "string",
            "enum": [
              "application/json",
              "application/octet-stream"
            ],
            "x-ms-enum": {
              "modelAsString": true
            }
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "File_Download": {
            "$ref": "./examples/File_Download.json"
          }
        }
      }
    },
    "/file:upload": {
      "post": {
        "operationId": "FileOperations_Upload",
        "tags": [
          "File"
        ],
        "description": "Uploads a file.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "File_Upload": {
            "$ref": "./examples/File_Upload.json"
          }
        }
      }
    },
    "/schemas": {
      "get": {
        "operationId": "SchemasOperations_List",
        "tags": [
          "Schemas"
        ],
        "description": "Returns a paginated list of Schema resources.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.names"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.propertyFilters"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.statuses"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.ids"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.minCreatedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.maxCreatedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.minLastModifiedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.maxLastModifiedDateTime"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.maxPageSize"
          },
          {
            "$ref": "#/parameters/ListOperationQueryParameters.skipToken"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedSchema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Schemas_List": {
            "$ref": "./examples/Schemas_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/schemas/{schemaId}": {
      "get": {
        "operationId": "SchemasOperations_Get",
        "tags": [
          "Schemas"
        ],
        "description": "Gets a specified Schema resource.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "schemaId",
            "in": "path",
            "description": "Id of the Schema.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Schema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Schemas_Get": {
            "$ref": "./examples/Schemas_Get.json"
          }
        }
      },
      "patch": {
        "operationId": "SchemasOperations_CreateOrUpdate",
        "tags": [
          "Schemas"
        ],
        "description": "Creates or updates a Schema resource.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "schemaId",
            "in": "path",
            "description": "Id of the Schema.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaCreateOrUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Schema"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Schema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Schemas_CreateOrUpdate": {
            "$ref": "./examples/Schemas_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "SchemasOperations_Delete",
        "tags": [
          "Schemas"
        ],
        "description": "Deletes Schema for given Schema id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "schemaId",
            "in": "path",
            "description": "Id of the Schema.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Schemas_Delete": {
            "$ref": "./examples/Schemas_Delete.json"
          }
        }
      }
    }
  },
  "definitions": {
    "ApiKeyAuthCredentials": {
      "type": "object",
      "description": "Api Key Auth Credentials class for API Key based Auth.",
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/KeyVaultProperties",
          "description": "Properties of the key vault."
        }
      },
      "required": [
        "apiKey"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AuthCredentials"
        }
      ],
      "x-ms-discriminator-value": "ApiKeyAuthCredentials"
    },
    "Asset": {
      "type": "object",
      "description": "Asset.",
      "properties": {
        "type": {
          "$ref": "#/definitions/DataFormat",
          "description": "Type of dataset."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "href": {
          "type": "string",
          "description": "Href."
        }
      }
    },
    "AuthCredentials": {
      "type": "object",
      "description": "AuthCredentials abstract base class for Auth Purpose.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/AuthCredentialsKind",
          "description": "Enum for different types of AuthCredentials supported."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "AuthCredentialsKind": {
      "type": "string",
      "description": "Enum for different types of AuthCredentials supported.",
      "enum": [
        "OAuthClientCredentials",
        "ApiKeyAuthCredentials"
      ],
      "x-ms-enum": {
        "name": "AuthCredentialsKind",
        "modelAsString": true,
        "values": [
          {
            "name": "OAuthClientCredentials",
            "value": "OAuthClientCredentials",
            "description": "OAuthClientCredentials."
          },
          {
            "name": "ApiKeyAuthCredentials",
            "value": "ApiKeyAuthCredentials",
            "description": "ApiKeyAuthCredentials."
          }
        ]
      }
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "Catalog": {
      "type": "object",
      "description": "Catalog.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "eTag": {
          "type": "string",
          "description": "The ETag value to implement optimistic concurrency.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "modifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "createdBy": {
          "type": "string",
          "description": "Created by user/tenant id.",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "string",
          "description": "Modified by user/tenant id.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        },
        "id": {
          "type": "string",
          "description": "Id of the Catalog.",
          "readOnly": true
        }
      },
      "required": [
        "id"
      ]
    },
    "CatalogCollection": {
      "type": "object",
      "description": "Schema for storing catalog and collection id.",
      "properties": {
        "catalogId": {
          "type": "string",
          "description": "Catalog Id.",
          "readOnly": true
        },
        "collectionId": {
          "type": "string",
          "description": "Collection Id.",
          "readOnly": true
        }
      }
    },
    "CatalogCreateOrUpdate": {
      "type": "object",
      "description": "Catalog.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        }
      }
    },
    "Collection": {
      "type": "object",
      "description": "Collection.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "eTag": {
          "type": "string",
          "description": "The ETag value to implement optimistic concurrency.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "modifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "createdBy": {
          "type": "string",
          "description": "Created by user/tenant id.",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "string",
          "description": "Modified by user/tenant id.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        },
        "schemaId": {
          "type": "string",
          "description": "Schema Foreign Key.",
          "minLength": 1
        },
        "catalogId": {
          "type": "string",
          "description": "Id of the Catalog.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "Unique resource ID.",
          "readOnly": true
        }
      },
      "required": [
        "schemaId",
        "id"
      ]
    },
    "CollectionCreateOrUpdate": {
      "type": "object",
      "description": "Collection.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        },
        "schemaId": {
          "type": "string",
          "description": "Schema Foreign Key.",
          "minLength": 1
        }
      }
    },
    "CommonProps": {
      "type": "object",
      "description": "Common properties for resources.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "eTag": {
          "type": "string",
          "description": "The ETag value to implement optimistic concurrency.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "modifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "createdBy": {
          "type": "string",
          "description": "Created by user/tenant id.",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "string",
          "description": "Modified by user/tenant id.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        }
      }
    },
    "CrossCollectionItemSearchQuery": {
      "type": "object",
      "description": "CrossCatalogItemSearchQuery.",
      "properties": {
        "ownerItemIds": {
          "type": "array",
          "description": "Owner Item Ids of the resource.",
          "items": {
            "type": "string"
          }
        },
        "dataFilters": {
          "type": "array",
          "description": "Filters on key-value pairs within the Data object.\ne.g. \"{testKey} eq {testValue}\".",
          "items": {
            "type": "string"
          }
        },
        "intersectsWithGeometry": {
          "$ref": "#/definitions/GeoJsonObject",
          "description": "GeoJSON (For more details: https://geojson.org/). Note: Coordinates are\nexpected in [Longitude, Latitude] format."
        },
        "ids": {
          "type": "array",
          "description": "Ids of the resource.",
          "items": {
            "type": "string"
          }
        },
        "minCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Minimum creation date of resource (inclusive)."
        },
        "maxCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Maximum creation date of resource (inclusive)."
        },
        "minLastModifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Minimum last modified date of resource (inclusive)."
        },
        "maxLastModifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Maximum last modified date of resource (inclusive)."
        },
        "maxPageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of items needed (inclusive).\nMinimum = 10, Maximum = 1000, Default value = 50.",
          "default": 50,
          "minimum": 10,
          "maximum": 1000
        },
        "skipToken": {
          "type": "string",
          "description": "Skip token for getting next set of results."
        },
        "collectionIds": {
          "type": "array",
          "description": "Owner Item Ids of the resource.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DataFormat": {
      "type": "string",
      "description": "Type of dataset.",
      "enum": [
        "Image",
        "Shapefile",
        "Binary"
      ],
      "x-ms-enum": {
        "name": "DataFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "Image",
            "value": "Image",
            "description": "Image."
          },
          {
            "name": "Shapefile",
            "value": "Shapefile",
            "description": "Shapefile."
          },
          {
            "name": "Binary",
            "value": "Binary",
            "description": "Binary"
          }
        ]
      }
    },
    "DestinationType": {
      "type": "string",
      "description": "DestinationType.",
      "enum": [
        "Catalog",
        "Collection",
        "Item",
        "Asset"
      ],
      "x-ms-enum": {
        "name": "DestinationType",
        "modelAsString": true,
        "values": [
          {
            "name": "Catalog",
            "value": "Catalog",
            "description": "Catalog."
          },
          {
            "name": "Collection",
            "value": "Collection",
            "description": "Collection."
          },
          {
            "name": "Item",
            "value": "Item",
            "description": "Item."
          },
          {
            "name": "Asset",
            "value": "Asset",
            "description": "Asset."
          }
        ]
      }
    },
    "ErrorForLocation": {
      "type": "object",
      "description": "Model for error information for a failed location.",
      "properties": {
        "location": {
          "$ref": "#/definitions/WeatherLocation",
          "description": "Schema of Location data."
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned by data provider."
        },
        "description": {
          "type": "string",
          "description": "Description of the error."
        },
        "retryable": {
          "type": "boolean",
          "description": "Flag suggesting if retry attempt with same request body should be made to fetch\nrequired data."
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "description": "An error response from the Azure AgPlatform service. See\nhttps://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses\nfor ErrorResponse reference document.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "An error from the Azure AgPlatform service."
        },
        "traceId": {
          "type": "string",
          "description": "Unique trace Id."
        }
      }
    },
    "File": {
      "type": "object",
      "description": "File.",
      "properties": {
        "filePath": {
          "type": "string",
          "description": "FilePath.",
          "minLength": 1
        }
      },
      "required": [
        "filePath"
      ]
    },
    "FileDownloadResponse": {
      "type": "object",
      "description": "Represents the response for a file download operation.",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The binary data of the file."
        }
      },
      "required": [
        "data"
      ]
    },
    "FileResource": {
      "type": "object",
      "description": "Resource model for File API.",
      "properties": {
        "key": {
          "type": "string",
          "description": "Dummy key for file resource",
          "readOnly": true
        }
      },
      "required": [
        "key"
      ]
    },
    "GeoJsonObject": {
      "type": "object",
      "description": "GeoJSON (For more details: https://geojson.org/). Note: Coordinates are\nexpected in [Longitude, Latitude] format.",
      "properties": {
        "type": {
          "$ref": "#/definitions/GeoJsonObjectType",
          "description": "Type of GeoJSON object."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "GeoJsonObjectType": {
      "type": "string",
      "description": "GeoJSON object type.",
      "enum": [
        "Point",
        "Polygon",
        "MultiPolygon"
      ],
      "x-ms-enum": {
        "name": "GeoJsonObjectType",
        "modelAsString": true,
        "values": [
          {
            "name": "Point",
            "value": "Point",
            "description": "Point."
          },
          {
            "name": "Polygon",
            "value": "Polygon",
            "description": "Polygon."
          },
          {
            "name": "MultiPolygon",
            "value": "MultiPolygon",
            "description": "MultiPolygon."
          }
        ]
      }
    },
    "ImageFile": {
      "type": "object",
      "description": "Schema of image file resource.",
      "properties": {
        "filePath": {
          "type": "string",
          "description": "ADLS path of the image file."
        },
        "name": {
          "type": "string",
          "description": "Name of the image file.",
          "minLength": 1
        },
        "imageFormat": {
          "$ref": "#/definitions/ImageFormat",
          "description": "Supported image formats for scene resource."
        },
        "resolution": {
          "type": "number",
          "format": "double",
          "description": "Resolution of image file in meters."
        }
      },
      "required": [
        "name"
      ]
    },
    "ImageFormat": {
      "type": "string",
      "description": "Supported image formats for scene resource.",
      "enum": [
        "TIF"
      ],
      "x-ms-enum": {
        "name": "ImageFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "TIF",
            "value": "TIF",
            "description": "TIF."
          }
        ]
      }
    },
    "Item": {
      "type": "object",
      "description": "Item.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "eTag": {
          "type": "string",
          "description": "The ETag value to implement optimistic concurrency.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "modifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "createdBy": {
          "type": "string",
          "description": "Created by user/tenant id.",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "string",
          "description": "Modified by user/tenant id.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        },
        "data": {
          "type": "object",
          "description": "Schema for records under the dataset.",
          "additionalProperties": {}
        },
        "ownerItemId": {
          "type": "string",
          "description": "Owner Item Ids of the resource"
        },
        "catalogId": {
          "type": "string",
          "description": "Id of the Catalog resource.",
          "readOnly": true
        },
        "collectionId": {
          "type": "string",
          "description": "Id of the Collection resource.",
          "readOnly": true
        },
        "assets": {
          "type": "array",
          "description": "Assets.",
          "items": {
            "$ref": "#/definitions/Asset"
          },
          "x-ms-identifiers": []
        },
        "id": {
          "type": "string",
          "description": "Id of the Item.",
          "readOnly": true
        }
      },
      "required": [
        "data",
        "id"
      ]
    },
    "ItemCreateOrUpdate": {
      "type": "object",
      "description": "Item.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        },
        "data": {
          "type": "object",
          "description": "Schema for records under the dataset.",
          "additionalProperties": {}
        },
        "ownerItemId": {
          "type": "string",
          "description": "Owner Item Ids of the resource"
        },
        "assets": {
          "type": "array",
          "description": "Assets.",
          "items": {
            "$ref": "#/definitions/Asset"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ItemListResponse": {
      "type": "object",
      "description": "Represents a response containing a list of items.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of Items.",
          "items": {
            "$ref": "#/definitions/Item"
          }
        },
        "skipToken": {
          "type": "string",
          "description": "Skip token for getting next set of results."
        },
        "nextLink": {
          "type": "string",
          "description": "URL to do the POST request with same filters,\nto get next set of items."
        }
      },
      "required": [
        "value"
      ]
    },
    "ItemParameters": {
      "type": "object",
      "description": "ItemParameters model for Items api.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "eTag": {
          "type": "string",
          "description": "The ETag value to implement optimistic concurrency.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "modifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "createdBy": {
          "type": "string",
          "description": "Created by user/tenant id.",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "string",
          "description": "Modified by user/tenant id.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        },
        "data": {
          "type": "object",
          "description": "Schema for records under the dataset.",
          "additionalProperties": {}
        },
        "ownerItemId": {
          "type": "string",
          "description": "OwnerItemId."
        },
        "assets": {
          "type": "array",
          "description": "Assets.",
          "items": {
            "$ref": "#/definitions/Asset"
          },
          "x-ms-identifiers": []
        },
        "id": {
          "type": "string",
          "description": "Unique resource ID.",
          "readOnly": true
        }
      },
      "required": [
        "data"
      ]
    },
    "ItemQuery": {
      "type": "object",
      "description": "CatalogQuery.",
      "properties": {
        "ownerItemIds": {
          "type": "array",
          "description": "Owner Item Ids of the resource.",
          "items": {
            "type": "string"
          }
        },
        "dataFilters": {
          "type": "array",
          "description": "Filters on key-value pairs within the Data object.\ne.g. \"{testKey} eq {testValue}\".",
          "items": {
            "type": "string"
          }
        },
        "intersectsWithGeometry": {
          "$ref": "#/definitions/GeoJsonObject",
          "description": "GeoJSON (For more details: https://geojson.org/). Note: Coordinates are\nexpected in [Longitude, Latitude] format."
        },
        "ids": {
          "type": "array",
          "description": "Ids of the resource.",
          "items": {
            "type": "string"
          }
        },
        "minCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Minimum creation date of resource (inclusive)."
        },
        "maxCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Maximum creation date of resource (inclusive)."
        },
        "minLastModifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Minimum last modified date of resource (inclusive)."
        },
        "maxLastModifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Maximum last modified date of resource (inclusive)."
        },
        "maxPageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of items needed (inclusive).\nMinimum = 10, Maximum = 1000, Default value = 50.",
          "default": 50,
          "minimum": 10,
          "maximum": 1000
        },
        "skipToken": {
          "type": "string",
          "description": "Skip token for getting next set of results."
        }
      }
    },
    "ItemResponse": {
      "type": "object",
      "description": "ItemResponse model for Items api.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "eTag": {
          "type": "string",
          "description": "The ETag value to implement optimistic concurrency.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "modifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "createdBy": {
          "type": "string",
          "description": "Created by user/tenant id.",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "string",
          "description": "Modified by user/tenant id.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        },
        "data": {
          "type": "object",
          "description": "Schema for records under the dataset.",
          "additionalProperties": {}
        },
        "ownerItemId": {
          "type": "string",
          "description": "OwnerItemId."
        },
        "catalogId": {
          "type": "string",
          "description": "CatalogId.",
          "readOnly": true
        },
        "collectionId": {
          "type": "string",
          "description": "CollectionId.",
          "readOnly": true
        },
        "assets": {
          "type": "array",
          "description": "Assets.",
          "items": {
            "$ref": "#/definitions/Asset"
          },
          "x-ms-identifiers": []
        },
        "id": {
          "type": "string",
          "description": "Unique resource ID.",
          "readOnly": true
        }
      },
      "required": [
        "data"
      ]
    },
    "ItemsCommonProps": {
      "type": "object",
      "description": "Common properties for items api's.",
      "properties": {
        "ownerItemIds": {
          "type": "array",
          "description": "Owner Item Ids of the resource.",
          "items": {
            "type": "string"
          }
        },
        "dataFilters": {
          "type": "array",
          "description": "Filters on key-value pairs within the Data object.\ne.g. \"{testKey} eq {testValue}\".",
          "items": {
            "type": "string"
          }
        },
        "intersectsWithGeometry": {
          "$ref": "#/definitions/GeoJsonObject",
          "description": "GeoJSON (For more details: https://geojson.org/). Note: Coordinates are\nexpected in [Longitude, Latitude] format."
        },
        "ids": {
          "type": "array",
          "description": "Ids of the resource.",
          "items": {
            "type": "string"
          }
        },
        "minCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Minimum creation date of resource (inclusive)."
        },
        "maxCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Maximum creation date of resource (inclusive)."
        },
        "minLastModifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Minimum last modified date of resource (inclusive)."
        },
        "maxLastModifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Maximum last modified date of resource (inclusive)."
        },
        "maxPageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of items needed (inclusive).\nMinimum = 10, Maximum = 1000, Default value = 50.",
          "default": 50,
          "minimum": 10,
          "maximum": 1000
        },
        "skipToken": {
          "type": "string",
          "description": "Skip token for getting next set of results."
        }
      }
    },
    "ItemsInCatalog": {
      "type": "object",
      "description": "Item.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "eTag": {
          "type": "string",
          "description": "The ETag value to implement optimistic concurrency.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "modifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "createdBy": {
          "type": "string",
          "description": "Created by user/tenant id.",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "string",
          "description": "Modified by user/tenant id.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        },
        "data": {
          "type": "object",
          "description": "Schema for records under the dataset.",
          "additionalProperties": {}
        },
        "ownerItemId": {
          "type": "string",
          "description": "Owner Item Ids of the resource"
        },
        "catalogId": {
          "type": "string",
          "description": "Id of the Catalog resource.",
          "readOnly": true
        },
        "collectionId": {
          "type": "string",
          "description": "Id of the Collection resource.",
          "readOnly": true
        },
        "assets": {
          "type": "array",
          "description": "Assets.",
          "items": {
            "$ref": "#/definitions/Asset"
          },
          "x-ms-identifiers": []
        },
        "id": {
          "type": "string",
          "description": "Id of the Item.",
          "readOnly": true
        }
      },
      "required": [
        "data",
        "id"
      ]
    },
    "KeyVaultProperties": {
      "type": "object",
      "description": "Properties of the key vault.",
      "properties": {
        "keyVaultUri": {
          "type": "string",
          "description": "Uri of the key vault.",
          "minLength": 2,
          "maxLength": 100
        },
        "keyName": {
          "type": "string",
          "description": "Name of Key Vault key.",
          "minLength": 2,
          "maxLength": 256
        },
        "keyVersion": {
          "type": "string",
          "description": "Version of Key Vault key.",
          "minLength": 2,
          "maxLength": 256
        }
      },
      "required": [
        "keyVaultUri",
        "keyName",
        "keyVersion"
      ]
    },
    "Link": {
      "type": "object",
      "description": "Link.",
      "properties": {
        "rel": {
          "$ref": "#/definitions/RelationshipType",
          "description": "Type of relationship."
        },
        "href": {
          "type": "string",
          "description": "Href."
        },
        "type": {
          "$ref": "#/definitions/DestinationType",
          "description": "DestinationType."
        }
      }
    },
    "ListOperationResponseTraits": {
      "type": "object",
      "description": "Additional traits for ListResponse.",
      "properties": {
        "response": {
          "type": "object",
          "description": "Represents the additional traits in response from resourceList operations.",
          "properties": {
            "properties": {
              "type": "object",
              "properties": {
                "skipToken": {
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "properties"
          ]
        }
      },
      "required": [
        "response"
      ]
    },
    "Measures": {
      "type": "object",
      "description": "Schema for storing measurement readings and unit.",
      "properties": {
        "unit": {
          "type": "string",
          "description": "Data unit.",
          "minLength": 1,
          "maxLength": 50
        },
        "value": {
          "type": "array",
          "description": "Data values.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "MultiPolygon": {
      "type": "object",
      "description": "MultiPolygon geometry.",
      "properties": {
        "coordinates": {
          "type": "array",
          "description": "Gets or sets Coordinates of GeoJSON Object.\nIt must be an array of polygons, each polygon contains list of linear rings.\nFor Polygons with more than one of these rings, the first MUST be the exterior\nring,\nand any others MUST be interior rings.",
          "items": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "x-ms-identifiers": []
            },
            "x-ms-identifiers": []
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "coordinates"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        }
      ],
      "x-ms-discriminator-value": "MultiPolygon"
    },
    "OauthClientCredentials": {
      "type": "object",
      "description": "OAuthClientCredentials for clientId clientSecret auth.",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "ClientId associated with the provider.",
          "minLength": 1
        },
        "clientSecret": {
          "$ref": "#/definitions/KeyVaultProperties",
          "description": "Properties of the key vault."
        }
      },
      "required": [
        "clientId",
        "clientSecret"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AuthCredentials"
        }
      ],
      "x-ms-discriminator-value": "OAuthClientCredentials"
    },
    "PagedCatalog": {
      "type": "object",
      "description": "Paged collection of Catalog items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Catalog items on this page",
          "items": {
            "$ref": "#/definitions/Catalog"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        },
        "skipToken": {
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedCollection": {
      "type": "object",
      "description": "Paged collection of Collection items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Collection items on this page",
          "items": {
            "$ref": "#/definitions/Collection"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        },
        "skipToken": {
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedSchema": {
      "type": "object",
      "description": "Paged collection of Schema items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Schema items on this page",
          "items": {
            "$ref": "#/definitions/Schema"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        },
        "skipToken": {
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "Point": {
      "type": "object",
      "description": "Point geometry.",
      "properties": {
        "coordinates": {
          "type": "array",
          "description": "Gets or sets the coordinate of this point.\nIt must be an array of 2 or 3 elements for a 2D or 3D system.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "required": [
        "coordinates"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        }
      ],
      "x-ms-discriminator-value": "Point"
    },
    "Polygon": {
      "type": "object",
      "description": "Polygon geometry.",
      "properties": {
        "coordinates": {
          "type": "array",
          "description": "Gets or sets type of the GeoJSON Object.\nIt must be an array of linear ring coordinate arrays.\nFor Polygons with more than one of these rings, the first MUST be the exterior\nring,\nand any others MUST be interior rings.",
          "items": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            },
            "x-ms-identifiers": []
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "coordinates"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonObject"
        }
      ],
      "x-ms-discriminator-value": "Polygon"
    },
    "RelationshipType": {
      "type": "string",
      "description": "Type of relationship.",
      "enum": [
        "DerivedFrom",
        "Child",
        "Parent"
      ],
      "x-ms-enum": {
        "name": "RelationshipType",
        "modelAsString": true,
        "values": [
          {
            "name": "DerivedFrom",
            "value": "DerivedFrom",
            "description": "DerivedFrom."
          },
          {
            "name": "Child",
            "value": "Child",
            "description": "Contains."
          },
          {
            "name": "Parent",
            "value": "Parent",
            "description": "Parent."
          }
        ]
      }
    },
    "SamplePartnerAcceptedResponse": {
      "type": "object",
      "description": "Represents a successful 202 response from the Solutions API.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id."
        },
        "message": {
          "type": "string",
          "description": "Message."
        },
        "status": {
          "type": "string",
          "description": "Status."
        },
        "jobCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "JobCreatedDateTime."
        },
        "jobLastActionDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "JobLastActionDateTime."
        },
        "e2eid": {
          "type": "string",
          "description": "E2eid.",
          "x-ms-client-name": "e2Eid"
        },
        "partnerRequestBody": {
          "$ref": "#/definitions/SamplePartnerRequestBody",
          "description": "SamplePartnerRequestBody."
        }
      }
    },
    "SamplePartnerOkResponse": {
      "type": "object",
      "description": "Represents a successful 200 response from the Solutions API.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id."
        },
        "message": {
          "type": "string",
          "description": "Message."
        },
        "status": {
          "type": "string",
          "description": "Status."
        },
        "jobCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "JobCreatedDateTime."
        },
        "jobLastActionDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "JobLastActionDateTime."
        },
        "e2eid": {
          "type": "string",
          "description": "E2eid.",
          "x-ms-client-name": "e2Eid"
        },
        "partnerRequestBody": {
          "$ref": "#/definitions/SamplePartnerRequestBody",
          "description": "SamplePartnerRequestBody."
        }
      }
    },
    "SamplePartnerRequestBody": {
      "type": "object",
      "description": "SamplePartnerRequestBody.",
      "properties": {
        "solutionId": {
          "type": "string",
          "description": "SolutionId."
        },
        "partyId": {
          "type": "string",
          "description": "PartyId."
        },
        "gddStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "GddStartDate."
        },
        "gddEndDate": {
          "type": "string",
          "format": "date-time",
          "description": "GddEndDate."
        },
        "resourceId": {
          "type": "string",
          "description": "ResourceId."
        },
        "resourceType": {
          "type": "string",
          "description": "ResourceType."
        },
        "crop": {
          "type": "string",
          "description": "Crop."
        },
        "temperatureUnit": {
          "type": "string",
          "description": "TemperatureUnit."
        },
        "method": {
          "type": "string",
          "description": "Method."
        }
      }
    },
    "SamplePartnerResponse": {
      "type": "object",
      "description": "SamplePartnerResponse.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id."
        },
        "message": {
          "type": "string",
          "description": "Message."
        },
        "status": {
          "type": "string",
          "description": "Status."
        },
        "jobCreatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "JobCreatedDateTime."
        },
        "jobLastActionDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "JobLastActionDateTime."
        },
        "e2eid": {
          "type": "string",
          "description": "E2eid.",
          "x-ms-client-name": "e2Eid"
        },
        "partnerRequestBody": {
          "$ref": "#/definitions/SamplePartnerRequestBody",
          "description": "SamplePartnerRequestBody."
        }
      }
    },
    "SatelliteData": {
      "type": "object",
      "description": "Data Model for SatelliteIngestionJobRequest.",
      "properties": {
        "imageNames": {
          "type": "array",
          "description": "List of ImageNames.",
          "items": {
            "type": "string"
          }
        },
        "imageFormats": {
          "type": "array",
          "description": "List of ImageFormats. Available value: TIF.",
          "items": {
            "type": "string"
          }
        },
        "imageResolutions": {
          "type": "array",
          "description": "List of ImageResolutions in meters. Available values: 10, 20, 60.",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "SatelliteFetchData": {
      "type": "object",
      "description": "SatelliteFetchData.",
      "properties": {
        "dateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start Date."
        },
        "provider": {
          "type": "string",
          "description": "Provider of satellite data. Available Value: SentinelHub."
        },
        "providerCollectionId": {
          "type": "string",
          "description": "Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c.",
          "minLength": 1
        },
        "featureId": {
          "type": "string",
          "description": "Feature Id."
        },
        "imageFiles": {
          "type": "array",
          "description": "ImageFiles.",
          "items": {
            "$ref": "#/definitions/ImageFile"
          },
          "x-ms-identifiers": []
        },
        "itemUri": {
          "type": "string",
          "description": "ItemUri."
        },
        "id": {
          "type": "string",
          "description": "Id."
        }
      },
      "required": [
        "providerCollectionId"
      ]
    },
    "SatelliteFetchRequest": {
      "type": "object",
      "description": "Satellite Fetch Request.",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start Date."
        },
        "credentials": {
          "$ref": "#/definitions/OauthClientCredentials",
          "description": "OAuthClientCredentials for clientId clientSecret auth."
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End Date."
        },
        "provider": {
          "type": "string",
          "description": "Provider of satellite data. Available Value: SentinelHub.",
          "minLength": 1
        },
        "itemUri": {
          "type": "string",
          "description": "ItemUri.",
          "minLength": 1
        },
        "data": {
          "$ref": "#/definitions/SatelliteData",
          "description": "Data Model for SatelliteIngestionJobRequest."
        },
        "providerCollectionId": {
          "type": "string",
          "description": "Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c.",
          "minLength": 1
        },
        "featureId": {
          "type": "string",
          "description": "Feature Id."
        }
      },
      "required": [
        "credentials",
        "provider",
        "itemUri",
        "data",
        "providerCollectionId"
      ]
    },
    "SatelliteFetchResponse": {
      "type": "object",
      "description": "Satellite Fetch Response.",
      "properties": {
        "value": {
          "type": "array",
          "description": "Value.",
          "items": {
            "$ref": "#/definitions/SatelliteFetchData"
          }
        }
      }
    },
    "SatelliteResource": {
      "type": "object",
      "description": "Resource model for Satellite API.",
      "properties": {
        "key": {
          "type": "string",
          "description": "Dummy key for satellite resource",
          "readOnly": true
        }
      },
      "required": [
        "key"
      ]
    },
    "SatelliteStacRequest": {
      "type": "object",
      "description": "Satellite  Stac Request.",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start datetime of the time interval in which to search for Items."
        },
        "credentials": {
          "$ref": "#/definitions/OauthClientCredentials",
          "description": "OAuthClientCredentials for clientId clientSecret auth."
        },
        "provider": {
          "type": "string",
          "description": "Provider of satellite data. Available Value: SentinelHub.",
          "minLength": 1
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End datetime of the time interval in which to search for Items."
        },
        "intersects": {
          "$ref": "#/definitions/GeoJsonObject",
          "description": "GeoJSON (For more details: https://geojson.org/). Note: Coordinates are\nexpected in [Longitude, Latitude] format."
        },
        "bbox": {
          "type": "array",
          "description": "Only items that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four numbers. The coordinate reference system\nof the values is WGS84 longitude/latitude.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "featureIds": {
          "type": "array",
          "description": "Array of feature ids to return.",
          "items": {
            "type": "string"
          }
        },
        "providerCollectionId": {
          "type": "string",
          "description": "Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c.",
          "minLength": 1
        }
      },
      "required": [
        "credentials",
        "provider",
        "providerCollectionId"
      ]
    },
    "Schema": {
      "type": "object",
      "description": "SchemaModel.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "eTag": {
          "type": "string",
          "description": "The ETag value to implement optimistic concurrency.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "modifiedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.",
          "readOnly": true
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "createdBy": {
          "type": "string",
          "description": "Created by user/tenant id.",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "string",
          "description": "Modified by user/tenant id.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        },
        "dependentCollections": {
          "type": "array",
          "description": "Dependent Collections.",
          "items": {
            "$ref": "#/definitions/CatalogCollection"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "schemaModel": {
          "type": "object",
          "description": "Schema.",
          "additionalProperties": {}
        },
        "id": {
          "type": "string",
          "description": "Id of the Schema.",
          "readOnly": true
        }
      },
      "required": [
        "schemaModel",
        "id"
      ]
    },
    "SchemaCreateOrUpdate": {
      "type": "object",
      "description": "SchemaModel.",
      "properties": {
        "links": {
          "type": "array",
          "description": "Links for referencing other objects.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-ms-identifiers": []
        },
        "status": {
          "type": "string",
          "description": "Status of the resource.",
          "maxLength": 100
        },
        "source": {
          "type": "string",
          "description": "Source of the resource.",
          "minLength": 2,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "Name to identify resource.",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Textual description of the resource.",
          "maxLength": 500
        },
        "properties": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource.\nEach pair must not have a key greater than 50 characters\nand must not have a value greater than 150 characters.\nNote: A maximum of 25 key value pairs can be provided for a resource and only\nstring,\nnumeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.",
          "additionalProperties": {}
        },
        "schemaModel": {
          "type": "object",
          "description": "Schema.",
          "additionalProperties": {}
        }
      }
    },
    "SearchFeaturesResponse": {
      "type": "object",
      "description": "Paged response contains list of items and next property to get the next set of\nresults.",
      "properties": {
        "features": {
          "type": "array",
          "description": "List of items.",
          "items": {
            "$ref": "#/definitions/StacItem"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "URL to do the POST request with same filters,\nto get next set of items.",
          "readOnly": true
        }
      },
      "required": [
        "features"
      ]
    },
    "Solution": {
      "type": "object",
      "description": "Solution.",
      "properties": {
        "solutionId": {
          "type": "string",
          "description": "SolutionId.",
          "minLength": 1
        },
        "requestPath": {
          "type": "string",
          "description": "RequestPath.",
          "minLength": 1
        },
        "partnerRequestBody": {
          "type": "object",
          "description": "Properties.",
          "additionalProperties": {}
        },
        "partnerRequestHeaders": {
          "type": "object",
          "description": "Properties.",
          "additionalProperties": {}
        }
      },
      "required": [
        "solutionId",
        "requestPath",
        "partnerRequestBody",
        "partnerRequestHeaders"
      ]
    },
    "SolutionCommonProps": {
      "type": "object",
      "description": "Common properties for solutions api's.",
      "properties": {
        "solutionId": {
          "type": "string",
          "description": "SolutionId.",
          "minLength": 1
        },
        "requestPath": {
          "type": "string",
          "description": "RequestPath.",
          "minLength": 1
        },
        "partnerRequestBody": {
          "type": "object",
          "description": "Properties.",
          "additionalProperties": {}
        },
        "partnerRequestHeaders": {
          "type": "object",
          "description": "Properties.",
          "additionalProperties": {}
        }
      },
      "required": [
        "solutionId",
        "requestPath",
        "partnerRequestBody",
        "partnerRequestHeaders"
      ]
    },
    "SolutionData": {
      "type": "object",
      "description": "SolutionData.",
      "properties": {
        "solutionId": {
          "type": "string",
          "description": "SolutionId.",
          "minLength": 1
        },
        "requestPath": {
          "type": "string",
          "description": "RequestPath.",
          "minLength": 1
        },
        "partnerRequestBody": {
          "type": "object",
          "description": "Properties.",
          "additionalProperties": {}
        },
        "partnerRequestHeaders": {
          "type": "object",
          "description": "Properties.",
          "additionalProperties": {}
        },
        "inputData": {
          "type": "object",
          "description": "Input Data.",
          "additionalProperties": {}
        }
      },
      "required": [
        "solutionId",
        "requestPath",
        "partnerRequestBody",
        "partnerRequestHeaders",
        "inputData"
      ]
    },
    "SolutionResource": {
      "type": "object",
      "description": "Represents a resource solution in the Agriculture Platform Service.",
      "properties": {
        "key": {
          "type": "string",
          "description": "Dummy key for solution resource",
          "readOnly": true
        }
      },
      "required": [
        "key"
      ]
    },
    "StacAsset": {
      "type": "object",
      "description": "Assets.",
      "properties": {
        "href": {
          "type": "string",
          "description": "The HREF of the asset."
        },
        "title": {
          "type": "string",
          "description": "The title of the asset."
        },
        "description": {
          "type": "string",
          "description": "The description of the asset."
        },
        "type": {
          "type": "string",
          "description": "The type of the asset."
        },
        "roles": {
          "type": "array",
          "description": "The roles of the asset.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "StacItem": {
      "type": "object",
      "description": "Schema of STAC Item.\nRefer for spec:\nhttps://github.com/radiantearth/stac-spec/blob/v1.0.0-beta.2/item-spec/item-spec.md#item-fields.",
      "properties": {
        "stacVersion": {
          "type": "string",
          "description": "The STAC version the Stac Item implements.",
          "minLength": 1
        },
        "stacExtensions": {
          "type": "array",
          "description": "A list of extensions the Stac Item implements.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "description": "Provider identifier. Globally unique ID by Data provider.",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "description": "Type of the GeoJSON Object. It's value is always Feature.",
          "minLength": 1
        },
        "geometry": {
          "description": "Defines the full footprint of the asset represented by this item.\nIts a GeoJSON geometry."
        },
        "bbox": {
          "type": "array",
          "description": "Bounding box of the item.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "properties": {
          "description": "A dictionary of additional metadata for the item."
        },
        "links": {
          "type": "array",
          "description": "List of link objects to resources and related URLs.",
          "items": {
            "$ref": "#/definitions/StacLink"
          },
          "x-ms-identifiers": []
        },
        "assets": {
          "type": "object",
          "description": "Dictionary of asset objects, each with a unique key.",
          "additionalProperties": {
            "$ref": "#/definitions/StacAsset"
          }
        },
        "providerCollectionId": {
          "type": "string",
          "description": "The id of the STAC Collection this Stac Item references."
        }
      },
      "required": [
        "stacVersion",
        "id",
        "type",
        "properties",
        "links",
        "assets"
      ]
    },
    "StacLink": {
      "type": "object",
      "description": "Link.",
      "properties": {
        "href": {
          "type": "string",
          "description": "The HREF of the link."
        },
        "rel": {
          "type": "string",
          "description": "The relation type of the link."
        },
        "type": {
          "type": "string",
          "description": "The type of the link. Optional."
        },
        "title": {
          "type": "string",
          "description": "The title of the link. Optional."
        }
      }
    },
    "WeatherCommonProps": {
      "type": "object",
      "description": "Common parameters for weather-related api's.",
      "properties": {
        "providerName": {
          "type": "string",
          "description": "Weather provider name.",
          "minLength": 2,
          "maxLength": 100
        },
        "providerApiName": {
          "type": "string",
          "description": "Provider's api name to which request is to be made.",
          "minLength": 2,
          "maxLength": 100
        },
        "language": {
          "type": "string",
          "description": "Language (IETF BCP 47 language tag) in which search results should be returned\nby the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.",
          "default": "en-US",
          "maxLength": 100
        },
        "units": {
          "type": "string",
          "description": "Units for which request to data provider is to be sent. Supported values are\n'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'\nfor Metric SI units.",
          "minLength": 1
        }
      },
      "required": [
        "providerName",
        "providerApiName",
        "units"
      ]
    },
    "WeatherData": {
      "type": "object",
      "description": "Schema of weather data.",
      "properties": {
        "additionalAttributes": {
          "type": "object",
          "description": "A collection of key value pairs that belongs to the resource. Each pair must\nnot have a key greater than 50 characters and must not have a value greater\nthan 250 characters. Note: A maximum of 100 key value pairs can be provided for\na resource and only string and numeral values are supported.",
          "additionalProperties": {}
        },
        "wetBulbTemperature": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "cloudCover": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "dayOfWeek": {
          "type": "array",
          "description": "Day of week.",
          "items": {
            "type": "string"
          }
        },
        "dayOrNight": {
          "type": "array",
          "description": "This data field indicates whether it is daytime or nighttime based on the Local\nApparent Time of the location.",
          "items": {
            "type": "string"
          }
        },
        "expirationTime": {
          "type": "array",
          "description": "Expiration time in Utc format.",
          "items": {
            "type": "string"
          }
        },
        "iconCode": {
          "type": "array",
          "description": "This number is the key to the weather icon lookup. The data field shows the\nicon number that is matched to represent the observed weather conditions.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "iconCodeExtend": {
          "type": "array",
          "description": "Code representing full set sensible weather.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "hasPrecipitation": {
          "type": "array",
          "description": "Indicates whether there is precipitation or not.",
          "items": {
            "type": "boolean"
          }
        },
        "pressureMeanSeaLevel": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "relativeHumidity": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "temperature": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "temperatureDewPoint": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "temperatureFeelsLike": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "temperatureHeatIndex": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "temperatureWindChill": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "uvDescription": {
          "type": "array",
          "description": "The UV Index Description which complements the UV Index value by providing an\nassociated level of risk of skin damage due to exposure (-2 = Not Available, -1\n= No Report, 0 to 2 = Low, 3 to 5 = Moderate, 6 to 7 = High, 8 to 10 = Very\nHigh, 11 to 16 = Extreme).",
          "items": {
            "type": "string"
          }
        },
        "uvIndex": {
          "type": "array",
          "description": "Hourly maximum UV index.",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "validTimeLocal": {
          "type": "array",
          "description": "Time forecast is valid in local apparent time.",
          "items": {
            "type": "string"
          }
        },
        "validTime": {
          "type": "array",
          "description": "Time forecast is valid in Utc format.",
          "items": {
            "type": "string"
          }
        },
        "visibility": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "windDirection": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "windGust": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "windSpeed": {
          "$ref": "#/definitions/Measures",
          "description": "Schema for storing measurement readings and unit."
        },
        "wxPhraseLong": {
          "type": "array",
          "description": "Hourly sensible weather phrase containing longer description.",
          "items": {
            "type": "string"
          }
        },
        "wxPhraseShort": {
          "type": "array",
          "description": "Hourly sensible weather phrase containing short description.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WeatherDataErrors": {
      "type": "object",
      "description": "Model for errors encountered for all failed locations.",
      "properties": {
        "locations": {
          "type": "array",
          "description": "List of errors encountered for all failed locations.",
          "items": {
            "$ref": "#/definitions/ErrorForLocation"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "WeatherLocation": {
      "type": "object",
      "description": "Schema of Location data.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Location Type eg. LatLong/IataCode/IcaoCode/Placeid/PostalKey.",
          "minLength": 2,
          "maxLength": 25
        },
        "value": {
          "type": "string",
          "description": "Location Value eg. \"10,-25\" for LocationType Type \"LatLong\".",
          "minLength": 2,
          "maxLength": 100
        }
      },
      "required": [
        "type",
        "value"
      ]
    },
    "WeatherLocationData": {
      "type": "object",
      "description": "Schema of WeatherLocationData data.",
      "properties": {
        "location": {
          "$ref": "#/definitions/WeatherLocation",
          "description": "Schema of Location data."
        },
        "requestCompletionTime": {
          "type": "string",
          "description": "Request Completion Time in Utc of the location."
        },
        "lastRefreshedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time when resource was last requested, sample format: yyyy-MM-ddTHH:mm:ssZ."
        },
        "data": {
          "$ref": "#/definitions/WeatherData",
          "description": "Schema of weather data."
        }
      }
    },
    "WeatherMetadata": {
      "type": "object",
      "description": "Schema of Weather Metadata.",
      "properties": {
        "providerName": {
          "type": "string",
          "description": "Weather provider name.",
          "minLength": 2,
          "maxLength": 100
        },
        "providerApiName": {
          "type": "string",
          "description": "Provider's api name to which request is to be made.",
          "minLength": 2,
          "maxLength": 100
        },
        "language": {
          "type": "string",
          "description": "Language (IETF BCP 47 language tag) in which search results should be returned\nby the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.",
          "default": "en-US",
          "maxLength": 100
        },
        "units": {
          "type": "string",
          "description": "Units for which request to data provider is to be sent. Supported values are\n'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'\nfor Metric SI units.",
          "minLength": 1
        },
        "weatherDataType": {
          "type": "string",
          "description": "Type of weather data (forecast/historical).",
          "minLength": 1
        }
      },
      "required": [
        "providerName",
        "providerApiName",
        "units",
        "weatherDataType"
      ]
    },
    "WeatherRequest": {
      "type": "object",
      "description": "WeatherRequest.",
      "properties": {
        "providerName": {
          "type": "string",
          "description": "Weather provider name.",
          "minLength": 2,
          "maxLength": 100
        },
        "providerApiName": {
          "type": "string",
          "description": "Provider's api name to which request is to be made.",
          "minLength": 2,
          "maxLength": 100
        },
        "language": {
          "type": "string",
          "description": "Language (IETF BCP 47 language tag) in which search results should be returned\nby the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.",
          "default": "en-US",
          "maxLength": 100
        },
        "units": {
          "type": "string",
          "description": "Units for which request to data provider is to be sent. Supported values are\n'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'\nfor Metric SI units.",
          "minLength": 1
        },
        "credentials": {
          "$ref": "#/definitions/ApiKeyAuthCredentials",
          "description": "Api Key Auth Credentials class for API Key based Auth."
        },
        "locations": {
          "type": "array",
          "description": "List of locations for which weather data need to be fetched from the provider.",
          "items": {
            "$ref": "#/definitions/WeatherLocation"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "providerName",
        "providerApiName",
        "units"
      ]
    },
    "WeatherResource": {
      "type": "object",
      "description": "Resource model for Weather API.",
      "properties": {
        "key": {
          "type": "string",
          "description": "Dummy key for satellite resource",
          "readOnly": true
        }
      },
      "required": [
        "key"
      ]
    },
    "WeatherResponse": {
      "type": "object",
      "description": "Schema of Weather Data Provider Response.",
      "properties": {
        "weatherMetadata": {
          "$ref": "#/definitions/WeatherMetadata",
          "description": "Schema of Weather Metadata."
        },
        "status": {
          "type": "string",
          "description": "Indicates a Succeeded, Failed, or PartiallySucceeded response."
        },
        "locations": {
          "type": "array",
          "description": "List of weather data for all the weather locations.",
          "items": {
            "$ref": "#/definitions/WeatherLocationData"
          },
          "x-ms-identifiers": []
        },
        "errors": {
          "$ref": "#/definitions/WeatherDataErrors",
          "description": "Model for errors encountered for all failed locations."
        }
      },
      "required": [
        "weatherMetadata"
      ]
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "ListOperationQueryParameters.ids": {
      "name": "ids",
      "in": "query",
      "description": "Ids of the resource.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "x-ms-parameter-location": "method"
    },
    "ListOperationQueryParameters.maxCreatedDateTime": {
      "name": "maxCreatedDateTime",
      "in": "query",
      "description": "Maximum creation date of resource (inclusive).",
      "required": false,
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method"
    },
    "ListOperationQueryParameters.maxLastModifiedDateTime": {
      "name": "maxLastModifiedDateTime",
      "in": "query",
      "description": "Maximum last modified date of resource (inclusive).",
      "required": false,
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method"
    },
    "ListOperationQueryParameters.maxPageSize": {
      "name": "maxPageSize",
      "in": "query",
      "description": "Maximum number of items needed (inclusive).\nMinimum = 10, Maximum = 1000, Default value = 50.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "default": 50,
      "minimum": 10,
      "maximum": 1000,
      "x-ms-parameter-location": "method"
    },
    "ListOperationQueryParameters.minCreatedDateTime": {
      "name": "minCreatedDateTime",
      "in": "query",
      "description": "Minimum creation date of resource (inclusive).",
      "required": false,
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method"
    },
    "ListOperationQueryParameters.minLastModifiedDateTime": {
      "name": "minLastModifiedDateTime",
      "in": "query",
      "description": "Minimum last modified date of resource (inclusive).",
      "required": false,
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method"
    },
    "ListOperationQueryParameters.names": {
      "name": "names",
      "in": "query",
      "description": "Names of the resource.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "x-ms-parameter-location": "method"
    },
    "ListOperationQueryParameters.propertyFilters": {
      "name": "propertyFilters",
      "in": "query",
      "description": "Filters on key-value pairs within the Properties object.\neg. \"{testKey} eq {testValue}\".",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "x-ms-parameter-location": "method"
    },
    "ListOperationQueryParameters.skipToken": {
      "name": "skipToken",
      "in": "query",
      "description": "Skip token for getting next set of results.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ListOperationQueryParameters.statuses": {
      "name": "statuses",
      "in": "query",
      "description": "Statuses of the resource.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "x-ms-parameter-location": "method"
    }
  }
}
