{
  "swagger": "2.0",
  "info": {
    "title": "Azure Communication Routing Service",
    "version": "2023-11-01",
    "description": "Azure Communication Routing Service",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "required": true,
        "type": "string"
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [],
  "paths": {
    "/routing/classificationPolicies": {
      "get": {
        "operationId": "JobRouterAdministrationOperations_ListClassificationPolicies",
        "summary": "Retrieves existing classification policies.",
        "description": "Retrieves existing classification policies.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "maxpagesize",
            "in": "query",
            "description": "Maximum page size.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedClassificationPolicyItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/routing/classificationPolicies/{id}": {
      "get": {
        "operationId": "JobRouterAdministrationOperations_GetClassificationPolicy",
        "summary": "Retrieves an existing classification policy by Id.",
        "description": "Retrieves an existing classification policy by Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of this policy.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ClassificationPolicy"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "JobRouterAdministrationOperations_UpsertClassificationPolicy",
        "summary": "Creates or updates a classification policy.",
        "description": "Creates or updates a classification policy.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of this policy.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassificationPolicyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ClassificationPolicy"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/ClassificationPolicy"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "JobRouterAdministrationOperations_DeleteClassificationPolicy",
        "summary": "Delete a classification policy by Id.",
        "description": "Delete a classification policy by Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of this policy.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/distributionPolicies": {
      "get": {
        "operationId": "JobRouterAdministrationOperations_ListDistributionPolicies",
        "summary": "Retrieves existing distribution policies.",
        "description": "Retrieves existing distribution policies.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "maxpagesize",
            "in": "query",
            "description": "Maximum page size.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDistributionPolicyItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/routing/distributionPolicies/{id}": {
      "get": {
        "operationId": "JobRouterAdministrationOperations_GetDistributionPolicy",
        "summary": "Retrieves an existing distribution policy by Id.",
        "description": "Retrieves an existing distribution policy by Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the policy.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DistributionPolicy"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "JobRouterAdministrationOperations_UpsertDistributionPolicy",
        "summary": "Creates or updates a distribution policy.",
        "description": "Creates or updates a distribution policy.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the policy.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DistributionPolicyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DistributionPolicy"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/DistributionPolicy"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "JobRouterAdministrationOperations_DeleteDistributionPolicy",
        "summary": "Delete a distribution policy by Id.",
        "description": "Delete a distribution policy by Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the policy.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/exceptionPolicies": {
      "get": {
        "operationId": "JobRouterAdministrationOperations_ListExceptionPolicies",
        "summary": "Retrieves existing exception policies.",
        "description": "Retrieves existing exception policies.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "maxpagesize",
            "in": "query",
            "description": "Number of objects to return per page.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedExceptionPolicyItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/routing/exceptionPolicies/{id}": {
      "get": {
        "operationId": "JobRouterAdministrationOperations_GetExceptionPolicy",
        "summary": "Retrieves an existing exception policy by Id.",
        "description": "Retrieves an existing exception policy by Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the exception policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ExceptionPolicy"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "JobRouterAdministrationOperations_UpsertExceptionPolicy",
        "summary": "Creates or updates a exception policy.",
        "description": "Creates or updates a exception policy.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the exception policy",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExceptionPolicyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ExceptionPolicy"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/ExceptionPolicy"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "JobRouterAdministrationOperations_DeleteExceptionPolicy",
        "summary": "Deletes a exception policy by Id.",
        "description": "Deletes a exception policy by Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the exception policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/jobs": {
      "get": {
        "operationId": "JobRouterOperations_ListJobs",
        "summary": "Retrieves list of jobs based on filter parameters.",
        "description": "Retrieves list of jobs based on filter parameters.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "status",
            "in": "query",
            "description": "If specified, filter jobs by status.",
            "required": true,
            "type": "string",
            "enum": [
              "all",
              "pendingClassification",
              "queued",
              "assigned",
              "completed",
              "closed",
              "cancelled",
              "classificationFailed",
              "created",
              "pendingSchedule",
              "scheduled",
              "scheduleFailed",
              "waitingForActivation",
              "active"
            ],
            "x-ms-enum": {
              "name": "RouterJobStatusSelector",
              "modelAsString": true,
              "values": [
                {
                  "name": "all",
                  "value": "all",
                  "description": "Default"
                },
                {
                  "name": "pendingClassification",
                  "value": "pendingClassification",
                  "description": "Job is waiting to be classified."
                },
                {
                  "name": "queued",
                  "value": "queued",
                  "description": "Job has been queued."
                },
                {
                  "name": "assigned",
                  "value": "assigned",
                  "description": "Job has been assigned to a worker."
                },
                {
                  "name": "completed",
                  "value": "completed",
                  "description": "Job has been completed by a worker."
                },
                {
                  "name": "closed",
                  "value": "closed",
                  "description": "Job has been closed by a worker."
                },
                {
                  "name": "cancelled",
                  "value": "cancelled",
                  "description": "Job has been cancelled."
                },
                {
                  "name": "classificationFailed",
                  "value": "classificationFailed",
                  "description": "Classification process failed for the job."
                },
                {
                  "name": "created",
                  "value": "created",
                  "description": "Job has been created."
                },
                {
                  "name": "pendingSchedule",
                  "value": "pendingSchedule",
                  "description": "Job has been created but not been scheduled yet."
                },
                {
                  "name": "scheduled",
                  "value": "scheduled",
                  "description": "Job has been scheduled successfully."
                },
                {
                  "name": "scheduleFailed",
                  "value": "scheduleFailed",
                  "description": "Job scheduling failed."
                },
                {
                  "name": "waitingForActivation",
                  "value": "waitingForActivation",
                  "description": "Job is in a suspended state and waiting for an update."
                },
                {
                  "name": "active",
                  "value": "active",
                  "description": "Job is in a state of PendingClassification or Queued or Assigned or ClassificationFailed or Completed or PendingSchedule or Scheduled or ScheduleFailed or WaitingForActivation."
                }
              ]
            }
          },
          {
            "name": "queueId",
            "in": "query",
            "description": "If specified, filter jobs by queue.",
            "required": true,
            "type": "string"
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "If specified, filter jobs by channel.",
            "required": true,
            "type": "string"
          },
          {
            "name": "classificationPolicyId",
            "in": "query",
            "description": "If specified, filter jobs by classificationPolicy.",
            "required": true,
            "type": "string"
          },
          {
            "name": "scheduledBefore",
            "in": "query",
            "description": "If specified, filter on jobs that was scheduled before or at given timestamp.\nRange: (-Inf, scheduledBefore].",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "scheduledAfter",
            "in": "query",
            "description": "If specified, filter on jobs that was scheduled at or after given value. Range:\n[scheduledAfter, +Inf).",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "maxpagesize",
            "in": "query",
            "description": "Number of objects to return per page.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedRouterJobItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/routing/jobs/{id}": {
      "get": {
        "operationId": "JobRouterOperations_GetJob",
        "summary": "Retrieves an existing job by Id.",
        "description": "Retrieves an existing job by Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the job.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RouterJob"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "JobRouterOperations_UpsertJob",
        "summary": "Creates or updates a router job.",
        "description": "Creates or updates a router job.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouterJobUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RouterJob"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/RouterJob"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "JobRouterOperations_DeleteJob",
        "summary": "Deletes a job and all of its traces.",
        "description": "Deletes a job and all of its traces.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the job.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/jobs/{id}:reclassify": {
      "post": {
        "operationId": "JobRouterOperations_ReclassifyJobAction",
        "summary": "Reclassify a job.",
        "description": "Reclassify a job.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "name": "reclassifyJobRequest",
            "in": "body",
            "description": "Request object for reclassifying a job.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/jobs/{id}:cancel": {
      "post": {
        "operationId": "JobRouterOperations_CancelJobAction",
        "summary": "Submits request to cancel an existing job by Id while supplying free-form\ncancellation reason.",
        "description": "Submits request to cancel an existing job by Id while supplying free-form\ncancellation reason.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "name": "cancelJobRequest",
            "in": "body",
            "description": "Request model for cancelling job.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelJobRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/jobs/{id}:complete": {
      "post": {
        "operationId": "JobRouterOperations_CompleteJobAction",
        "summary": "Completes an assigned job.",
        "description": "Completes an assigned job.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "name": "completeJobRequest",
            "in": "body",
            "description": "Request model for completing job.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteJobRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/jobs/{id}:close": {
      "post": {
        "operationId": "JobRouterOperations_CloseJobAction",
        "summary": "Closes a completed job.",
        "description": "Closes a completed job.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "name": "closeJobRequest",
            "in": "body",
            "description": "Request model for closing job.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseJobRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/jobs/{id}/assignments/{assignmentId}:unassign": {
      "post": {
        "operationId": "JobRouterOperations_UnassignJobAction",
        "summary": "Un-assign a job.",
        "description": "Un-assign a job.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the job to un-assign.",
            "required": true,
            "type": "string"
          },
          {
            "name": "assignmentId",
            "in": "path",
            "description": "Id of the assignment to un-assign.",
            "required": true,
            "type": "string"
          },
          {
            "name": "unassignJobRequest",
            "in": "body",
            "description": "Request body for unassign route.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnassignJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/UnassignJobResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/jobs/{id}/position": {
      "get": {
        "operationId": "JobRouterOperations_GetInQueuePosition",
        "summary": "Gets a job's position details.",
        "description": "Gets a job's position details.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RouterJobPositionDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/queues": {
      "get": {
        "operationId": "JobRouterAdministrationOperations_ListQueues",
        "summary": "Retrieves existing queues.",
        "description": "Retrieves existing queues.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "maxpagesize",
            "in": "query",
            "description": "Number of objects to return per page.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedRouterQueueItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/routing/queues/{id}": {
      "get": {
        "operationId": "JobRouterAdministrationOperations_GetQueue",
        "summary": "Retrieves an existing queue by Id.",
        "description": "Retrieves an existing queue by Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of this queue",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RouterQueue"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "JobRouterAdministrationOperations_UpsertQueue",
        "summary": "Creates or updates a queue.",
        "description": "Creates or updates a queue.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of this queue",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouterQueueUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RouterQueue"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/RouterQueue"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "JobRouterAdministrationOperations_DeleteQueue",
        "summary": "Deletes a queue by Id.",
        "description": "Deletes a queue by Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of this queue",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/queues/{id}/statistics": {
      "get": {
        "operationId": "JobRouterOperations_GetQueueStatistics",
        "summary": "Retrieves a queue's statistics.",
        "description": "Retrieves a queue's statistics.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the queue to retrieve statistics.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RouterQueueStatistics"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/workers": {
      "get": {
        "operationId": "JobRouterOperations_ListWorkers",
        "summary": "Retrieves existing workers.",
        "description": "Retrieves existing workers.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "state",
            "in": "query",
            "description": "If specified, select workers by worker state.",
            "required": true,
            "type": "string",
            "enum": [
              "active",
              "draining",
              "inactive",
              "all"
            ],
            "x-ms-enum": {
              "name": "RouterWorkerStateSelector",
              "modelAsString": true,
              "values": [
                {
                  "name": "active",
                  "value": "active",
                  "description": "Worker is active and available to take offers."
                },
                {
                  "name": "draining",
                  "value": "draining",
                  "description": "Worker is not active, if there are existing offers they are being revoked. No new offers are sent."
                },
                {
                  "name": "inactive",
                  "value": "inactive",
                  "description": "Worker is not active. No new offers are sent."
                },
                {
                  "name": "all",
                  "value": "all",
                  "description": "Worker is active or draining or inactive."
                }
              ]
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "If specified, select workers who have a channel configuration with this channel.",
            "required": true,
            "type": "string"
          },
          {
            "name": "queueId",
            "in": "query",
            "description": "If specified, select workers who are assigned to this queue.",
            "required": true,
            "type": "string"
          },
          {
            "name": "hasCapacity",
            "in": "query",
            "description": "If set to true, select only workers who have capacity for the channel specified\nby `channelId` or for any channel if `channelId` not specified. If set to\nfalse, then will return all workers including workers without any capacity for\njobs. Defaults to false.",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "maxpagesize",
            "in": "query",
            "description": "Number of objects to return per page.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedRouterWorkerItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/routing/workers/{workerId}": {
      "get": {
        "operationId": "JobRouterOperations_GetWorker",
        "summary": "Retrieves an existing worker by Id.",
        "description": "Retrieves an existing worker by Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "workerId",
            "in": "path",
            "description": "Id of the worker.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RouterWorker"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "JobRouterOperations_UpsertWorker",
        "summary": "Creates or updates a worker.",
        "description": "Creates or updates a worker.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "workerId",
            "in": "path",
            "description": "Id of the worker.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifMatch"
          },
          {
            "$ref": "#/parameters/RouterConditionalRequestHeaders.ifUnmodifiedSince"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouterWorkerUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RouterWorker"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/RouterWorker"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              },
              "Last-Modified": {
                "type": "string",
                "description": "The last modified timestamp."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "JobRouterOperations_DeleteWorker",
        "summary": "Deletes a worker and all of its traces.",
        "description": "Deletes a worker and all of its traces.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "workerId",
            "in": "path",
            "description": "Id of the worker.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/workers/{workerId}/offers/{offerId}:accept": {
      "post": {
        "operationId": "JobRouterOperations_AcceptJobAction",
        "summary": "Accepts an offer to work on a job and returns a 409/Conflict if another agent\naccepted the job already.",
        "description": "Accepts an offer to work on a job and returns a 409/Conflict if another agent\naccepted the job already.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "workerId",
            "in": "path",
            "description": "Id of the worker.",
            "required": true,
            "type": "string"
          },
          {
            "name": "offerId",
            "in": "path",
            "description": "Id of the offer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AcceptJobOfferResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/routing/workers/{workerId}/offers/{offerId}:decline": {
      "post": {
        "operationId": "JobRouterOperations_DeclineJobAction",
        "summary": "Declines an offer to work on a job.",
        "description": "Declines an offer to work on a job.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "workerId",
            "in": "path",
            "description": "Id of the worker.",
            "required": true,
            "type": "string"
          },
          {
            "name": "offerId",
            "in": "path",
            "description": "Id of the offer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "declineJobOfferRequest",
            "in": "body",
            "description": "Request model for declining offer.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeclineJobOfferRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AcceptJobOfferResult": {
      "type": "object",
      "description": "Response containing Id's for the worker, job, and assignment from an accepted\noffer",
      "properties": {
        "assignmentId": {
          "type": "string",
          "description": "The assignment Id that assigns a worker that has accepted an offer to a job."
        },
        "jobId": {
          "type": "string",
          "description": "The Id of the job assigned."
        },
        "workerId": {
          "type": "string",
          "description": "The Id of the worker that has been assigned this job."
        }
      },
      "required": [
        "assignmentId",
        "jobId",
        "workerId"
      ]
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "Azure.Core.eTag": {
      "type": "string",
      "format": "eTag",
      "description": "The ETag (or entity tag) HTTP response header is an identifier for a specific version of a resource.\nIt lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response if the content was not changed.\n\nIt is a string of ASCII characters placed between double quotes, like \"675af34563dc-tr34\"."
    },
    "BestWorkerMode": {
      "type": "object",
      "description": "Jobs are distributed to the worker with the strongest abilities available.",
      "properties": {
        "scoringRule": {
          "$ref": "#/definitions/RouterRule",
          "description": "A rule of one of the following types:\n            \nStaticRule:  A rule\nproviding static rules that always return the same result, regardless of\ninput.\nDirectMapRule:  A rule that return the same labels as the input\nlabels.\nExpressionRule: A rule providing inline expression\nrules.\nFunctionRule: A rule providing a binding to an HTTP Triggered Azure\nFunction.\nWebhookRule: A rule providing a binding to a webserver following\nOAuth2.0 authentication protocol."
        },
        "scoringRuleOptions": {
          "$ref": "#/definitions/ScoringRuleOptions",
          "description": "Encapsulates all options that can be passed as parameters for scoring rule with\nBestWorkerMode"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DistributionMode"
        }
      ],
      "x-ms-discriminator-value": "best-worker"
    },
    "CancelExceptionAction": {
      "type": "object",
      "description": "An action that marks a job as cancelled",
      "properties": {
        "note": {
          "type": "string",
          "description": "(Optional) A note that will be appended to the jobs' Notes collection with the\ncurrent timestamp."
        },
        "dispositionCode": {
          "type": "string",
          "description": "(Optional) Indicates the outcome of the job, populate this field with your own\ncustom values."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ExceptionAction"
        }
      ],
      "x-ms-discriminator-value": "cancel"
    },
    "CancelJobRequest": {
      "type": "object",
      "description": "Request payload for deleting a job",
      "properties": {
        "note": {
          "type": "string",
          "description": "(Optional) A note that will be appended to the jobs' Notes collection with the\ncurrent timestamp."
        },
        "dispositionCode": {
          "type": "string",
          "description": "Indicates the outcome of the job, populate this field with your own custom\nvalues.\nIf not provided, default value of \"Cancelled\" is set."
        }
      }
    },
    "ChannelConfiguration": {
      "type": "object",
      "description": "Represents the capacity a job in this channel will consume from a worker",
      "properties": {
        "capacityCostPerJob": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of capacity that an instance of a job of this channel will consume\nof the total worker capacity."
        },
        "maxNumberOfJobs": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of jobs that can be supported concurrently for this channel."
        }
      },
      "required": [
        "capacityCostPerJob"
      ]
    },
    "ChannelConfigurationUpdate": {
      "type": "object",
      "description": "Represents the capacity a job in this channel will consume from a worker",
      "properties": {
        "capacityCostPerJob": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of capacity that an instance of a job of this channel will consume\nof the total worker capacity."
        },
        "maxNumberOfJobs": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of jobs that can be supported concurrently for this channel."
        }
      }
    },
    "ClassificationPolicy": {
      "type": "object",
      "description": "A container for the rules that govern how jobs are classified.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of this policy.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Friendly name of this policy."
        },
        "fallbackQueueId": {
          "type": "string",
          "description": "The fallback queue to select if the queue selector doesn't find a match."
        },
        "queueSelectors": {
          "type": "array",
          "description": "The queue selectors to resolve a queue for a given job.",
          "items": {
            "$ref": "#/definitions/QueueSelectorAttachment"
          },
          "x-ms-identifiers": []
        },
        "prioritizationRule": {
          "$ref": "#/definitions/RouterRule",
          "description": "A rule of one of the following types:\n            \nStaticRule:  A rule\nproviding static rules that always return the same result, regardless of\ninput.\nDirectMapRule:  A rule that return the same labels as the input\nlabels.\nExpressionRule: A rule providing inline expression\nrules.\nFunctionRule: A rule providing a binding to an HTTP Triggered Azure\nFunction.\nWebhookRule: A rule providing a binding to a webserver following\nOAuth2.0 authentication protocol."
        },
        "workerSelectors": {
          "type": "array",
          "description": "The worker label selectors to attach to a given job.",
          "items": {
            "$ref": "#/definitions/WorkerSelectorAttachment"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "id"
      ]
    },
    "ClassificationPolicyItem": {
      "type": "object",
      "description": "Paged instance of ClassificationPolicy",
      "properties": {
        "classificationPolicy": {
          "$ref": "#/definitions/ClassificationPolicy",
          "description": "A container for the rules that govern how jobs are classified."
        },
        "etag": {
          "$ref": "#/definitions/Azure.Core.eTag",
          "description": "(Optional) The Concurrency Token."
        }
      },
      "required": [
        "classificationPolicy",
        "etag"
      ]
    },
    "ClassificationPolicyUpdate": {
      "type": "object",
      "description": "A container for the rules that govern how jobs are classified.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Friendly name of this policy."
        },
        "fallbackQueueId": {
          "type": "string",
          "description": "The fallback queue to select if the queue selector doesn't find a match."
        },
        "queueSelectors": {
          "type": "array",
          "description": "The queue selectors to resolve a queue for a given job.",
          "items": {
            "$ref": "#/definitions/QueueSelectorAttachment"
          },
          "x-ms-identifiers": []
        },
        "prioritizationRule": {
          "$ref": "#/definitions/RouterRule",
          "description": "A rule of one of the following types:\n            \nStaticRule:  A rule\nproviding static rules that always return the same result, regardless of\ninput.\nDirectMapRule:  A rule that return the same labels as the input\nlabels.\nExpressionRule: A rule providing inline expression\nrules.\nFunctionRule: A rule providing a binding to an HTTP Triggered Azure\nFunction.\nWebhookRule: A rule providing a binding to a webserver following\nOAuth2.0 authentication protocol."
        },
        "workerSelectors": {
          "type": "array",
          "description": "The worker label selectors to attach to a given job.",
          "items": {
            "$ref": "#/definitions/WorkerSelectorAttachment"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "CloseJobRequest": {
      "type": "object",
      "description": "Request payload for closing jobs",
      "properties": {
        "assignmentId": {
          "type": "string",
          "description": "The assignment within which the job is to be closed."
        },
        "dispositionCode": {
          "type": "string",
          "description": "Indicates the outcome of the job, populate this field with your own custom\nvalues."
        },
        "closeAt": {
          "type": "string",
          "format": "date-time",
          "description": "If not provided, worker capacity is released immediately along with a\nJobClosedEvent notification.\nIf provided, worker capacity is released along\nwith a JobClosedEvent notification at a future time in UTC."
        },
        "note": {
          "type": "string",
          "description": "(Optional) A note that will be appended to the jobs' Notes collection with the\ncurrent timestamp."
        }
      },
      "required": [
        "assignmentId"
      ]
    },
    "CompleteJobRequest": {
      "type": "object",
      "description": "Request payload for completing jobs",
      "properties": {
        "assignmentId": {
          "type": "string",
          "description": "The assignment within the job to complete."
        },
        "note": {
          "type": "string",
          "description": "(Optional) A note that will be appended to the jobs' Notes collection with the\ncurrent timestamp."
        }
      },
      "required": [
        "assignmentId"
      ]
    },
    "ConditionalQueueSelectorAttachment": {
      "type": "object",
      "description": "Describes a set of queue selectors that will be attached if the given condition\nresolves to true",
      "properties": {
        "condition": {
          "$ref": "#/definitions/RouterRule",
          "description": "A rule of one of the following types:\n            \nStaticRule:  A rule\nproviding static rules that always return the same result, regardless of\ninput.\nDirectMapRule:  A rule that return the same labels as the input\nlabels.\nExpressionRule: A rule providing inline expression\nrules.\nFunctionRule: A rule providing a binding to an HTTP Triggered Azure\nFunction.\nWebhookRule: A rule providing a binding to a webserver following\nOAuth2.0 authentication protocol."
        },
        "queueSelectors": {
          "type": "array",
          "description": "The queue selectors to attach",
          "items": {
            "$ref": "#/definitions/RouterQueueSelector"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "condition",
        "queueSelectors"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/QueueSelectorAttachment"
        }
      ],
      "x-ms-discriminator-value": "conditional"
    },
    "ConditionalWorkerSelectorAttachment": {
      "type": "object",
      "description": "Describes a set of worker selectors that will be attached if the given\ncondition resolves to true",
      "properties": {
        "condition": {
          "$ref": "#/definitions/RouterRule",
          "description": "A rule of one of the following types:\n            \nStaticRule:  A rule\nproviding static rules that always return the same result, regardless of\ninput.\nDirectMapRule:  A rule that return the same labels as the input\nlabels.\nExpressionRule: A rule providing inline expression\nrules.\nFunctionRule: A rule providing a binding to an HTTP Triggered Azure\nFunction.\nWebhookRule: A rule providing a binding to a webserver following\nOAuth2.0 authentication protocol."
        },
        "workerSelectors": {
          "type": "array",
          "description": "The worker selectors to attach",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "condition",
        "workerSelectors"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WorkerSelectorAttachment"
        }
      ],
      "x-ms-discriminator-value": "conditional"
    },
    "DeclineJobOfferRequest": {
      "type": "object",
      "description": "Request payload for declining offers",
      "properties": {
        "retryOfferAt": {
          "type": "string",
          "format": "date-time",
          "description": "If the RetryOfferAt is not provided, then this job will not be offered again to\nthe worker who declined this job unless\nthe worker is de-registered and\nre-registered.  If a RetryOfferAt time is provided, then the job will be\nre-matched to\neligible workers at the retry time in UTC.  The worker that\ndeclined the job will also be eligible for the job at that time."
        }
      }
    },
    "DirectMapRouterRule": {
      "type": "object",
      "description": "A rule that return the same labels as the input labels.",
      "properties": {},
      "allOf": [
        {
          "$ref": "#/definitions/RouterRule"
        }
      ],
      "x-ms-discriminator-value": "direct-map-rule"
    },
    "DistributionMode": {
      "type": "object",
      "description": "Abstract base class for defining a distribution mode",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for DistributionMode."
        },
        "minConcurrentOffers": {
          "type": "integer",
          "format": "int32",
          "description": "Governs the minimum desired number of active concurrent offers a job can have."
        },
        "maxConcurrentOffers": {
          "type": "integer",
          "format": "int32",
          "description": "Governs the maximum number of active concurrent offers a job can have."
        },
        "bypassSelectors": {
          "type": "boolean",
          "description": "(Optional)\nIf set to true, then router will match workers to jobs even if they\ndon't match label selectors.\nWarning: You may get workers that are not\nqualified for the job they are matched with if you set this\nvariable to true.\nThis flag is intended more for temporary usage.\nBy default, set to false."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "DistributionPolicy": {
      "type": "object",
      "description": "Policy governing how jobs are distributed to workers",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the policy.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The human readable name of the policy."
        },
        "offerExpiresAfterSeconds": {
          "type": "number",
          "format": "double",
          "description": "The number of seconds after which any offers created under this policy will be\nexpired."
        },
        "mode": {
          "$ref": "#/definitions/DistributionMode",
          "description": "Abstract base class for defining a distribution mode"
        }
      },
      "required": [
        "id"
      ]
    },
    "DistributionPolicyItem": {
      "type": "object",
      "description": "Paged instance of DistributionPolicy",
      "properties": {
        "distributionPolicy": {
          "$ref": "#/definitions/DistributionPolicy",
          "description": "Policy governing how jobs are distributed to workers"
        },
        "etag": {
          "$ref": "#/definitions/Azure.Core.eTag",
          "description": "(Optional) The Concurrency Token."
        }
      },
      "required": [
        "distributionPolicy",
        "etag"
      ]
    },
    "DistributionPolicyUpdate": {
      "type": "object",
      "description": "Policy governing how jobs are distributed to workers",
      "properties": {
        "name": {
          "type": "string",
          "description": "The human readable name of the policy."
        },
        "offerExpiresAfterSeconds": {
          "type": "number",
          "format": "double",
          "description": "The number of seconds after which any offers created under this policy will be\nexpired."
        },
        "mode": {
          "$ref": "#/definitions/DistributionMode",
          "description": "Abstract base class for defining a distribution mode"
        }
      }
    },
    "ExceptionAction": {
      "type": "object",
      "description": "The action to take when the exception is triggered",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for ExceptionAction."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "ExceptionPolicy": {
      "type": "object",
      "description": "A policy that defines actions to execute when exception are triggered.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Id of the exception policy",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "(Optional) The name of the exception policy."
        },
        "exceptionRules": {
          "type": "object",
          "description": "(Optional) A dictionary collection of exception rules on the exception policy.\nKey is the Id of each exception rule.",
          "additionalProperties": {
            "$ref": "#/definitions/ExceptionRule"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "ExceptionPolicyItem": {
      "type": "object",
      "description": "Paged instance of ExceptionPolicy",
      "properties": {
        "exceptionPolicy": {
          "$ref": "#/definitions/ExceptionPolicy",
          "description": "A policy that defines actions to execute when exception are triggered."
        },
        "etag": {
          "$ref": "#/definitions/Azure.Core.eTag",
          "description": "(Optional) The Concurrency Token."
        }
      },
      "required": [
        "exceptionPolicy",
        "etag"
      ]
    },
    "ExceptionPolicyUpdate": {
      "type": "object",
      "description": "A policy that defines actions to execute when exception are triggered.",
      "properties": {
        "name": {
          "type": "string",
          "description": "(Optional) The name of the exception policy."
        },
        "exceptionRules": {
          "type": "object",
          "description": "(Optional) A dictionary collection of exception rules on the exception policy.\nKey is the Id of each exception rule.",
          "additionalProperties": {
            "$ref": "#/definitions/ExceptionRuleUpdate"
          }
        }
      }
    },
    "ExceptionRule": {
      "type": "object",
      "description": "A rule that defines actions to execute upon a specific trigger.",
      "properties": {
        "trigger": {
          "$ref": "#/definitions/ExceptionTrigger",
          "description": "The trigger for this exception rule"
        },
        "actions": {
          "type": "object",
          "description": "A dictionary collection of actions to perform once the exception is triggered.\nKey is the Id of each exception action.",
          "additionalProperties": {
            "$ref": "#/definitions/ExceptionAction"
          }
        }
      },
      "required": [
        "trigger",
        "actions"
      ]
    },
    "ExceptionRuleUpdate": {
      "type": "object",
      "description": "A rule that defines actions to execute upon a specific trigger.",
      "properties": {
        "trigger": {
          "$ref": "#/definitions/ExceptionTrigger",
          "description": "The trigger for this exception rule"
        },
        "actions": {
          "type": "object",
          "description": "A dictionary collection of actions to perform once the exception is triggered.\nKey is the Id of each exception action.",
          "additionalProperties": {
            "$ref": "#/definitions/ExceptionAction"
          }
        }
      }
    },
    "ExceptionTrigger": {
      "type": "object",
      "description": "The trigger for this exception rule",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for ExceptionTrigger."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "ExpressionRouterRule": {
      "type": "object",
      "description": "A rule providing inline expression rules.",
      "properties": {
        "language": {
          "$ref": "#/definitions/ExpressionRouterRuleLanguage",
          "description": "The expression language to compile to and execute"
        },
        "expression": {
          "type": "string",
          "description": "The string containing the expression to evaluate. Should contain return\nstatement with calculated values."
        }
      },
      "required": [
        "expression"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RouterRule"
        }
      ],
      "x-ms-discriminator-value": "expression-rule"
    },
    "ExpressionRouterRuleLanguage": {
      "type": "string",
      "description": "The available expression languages that can be configured",
      "enum": [
        "powerFx"
      ],
      "x-ms-enum": {
        "name": "ExpressionRouterRuleLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "powerFx",
            "value": "powerFx",
            "description": "PowerFx"
          }
        ]
      }
    },
    "FunctionRouterRule": {
      "type": "object",
      "description": "A rule providing a binding to an HTTP Triggered Azure Function.",
      "properties": {
        "functionUri": {
          "type": "string",
          "format": "uri",
          "description": "URL for Azure Function"
        },
        "credential": {
          "$ref": "#/definitions/FunctionRouterRuleCredential",
          "description": "Credentials used to access Azure function rule"
        }
      },
      "required": [
        "functionUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RouterRule"
        }
      ],
      "x-ms-discriminator-value": "azure-function-rule"
    },
    "FunctionRouterRuleCredential": {
      "type": "object",
      "description": "Credentials used to access Azure function rule",
      "properties": {
        "functionKey": {
          "type": "string",
          "description": "(Optional) Access key scoped to a particular function"
        },
        "appKey": {
          "type": "string",
          "description": "(Optional) Access key scoped to a Azure Function app.\nThis key grants access to\nall functions under the app."
        },
        "clientId": {
          "type": "string",
          "description": "(Optional) Client id, when AppKey is provided\nIn context of Azure function,\nthis is usually the name of the key"
        }
      }
    },
    "JobMatchModeType": {
      "type": "string",
      "description": "Discriminator values for supported matching mode types.",
      "enum": [
        "queueAndMatchMode",
        "scheduleAndSuspendMode",
        "suspendMode"
      ],
      "x-ms-enum": {
        "name": "JobMatchModeType",
        "modelAsString": true,
        "values": [
          {
            "name": "queueAndMatchMode",
            "value": "queueAndMatchMode",
            "description": "Discriminator used when matching worker to a job is required to be done right after job is queued."
          },
          {
            "name": "scheduleAndSuspendMode",
            "value": "scheduleAndSuspendMode",
            "description": "Discriminator used for scheduling jobs to be queued at a future time."
          },
          {
            "name": "suspendMode",
            "value": "suspendMode",
            "description": "Discriminator used when matching workers to a job needs to be suspended."
          }
        ]
      }
    },
    "JobMatchingMode": {
      "type": "object",
      "description": "The matching mode to be applied to this job.\n            \nSupported types:\n    \n       \nQueueAndMatchMode: Used when matching worker to a job is required to be\ndone right after job is queued.\nScheduleAndSuspendMode: Used for scheduling\njobs to be queued at a future time. At specified time, matching of a worker to\nthe job will not start automatically.\nSuspendMode: Used when matching workers\nto a job needs to be suspended.",
      "properties": {
        "modeType": {
          "$ref": "#/definitions/JobMatchModeType",
          "description": "Discriminator value used to differentiate between supported matching mode types."
        },
        "queueAndMatchMode": {
          "description": "Describes a matching mode where matching worker to a job is automatically\nstarted after job is queued successfully."
        },
        "scheduleAndSuspendMode": {
          "$ref": "#/definitions/ScheduleAndSuspendMode",
          "description": "Describes a matching mode used for scheduling jobs to be queued at a future\ntime.\nAt the specified time, matching worker to a job will not start\nautomatically."
        },
        "suspendMode": {
          "description": "Describes a matching mode where matching worker to a job is suspended."
        }
      }
    },
    "LabelOperator": {
      "type": "string",
      "description": "Describes supported operations on label values.",
      "enum": [
        "equal",
        "notEqual",
        "lessThan",
        "lessThanEqual",
        "greaterThan",
        "greaterThanEqual"
      ],
      "x-ms-enum": {
        "name": "LabelOperator",
        "modelAsString": true,
        "values": [
          {
            "name": "equal",
            "value": "equal",
            "description": "Equal"
          },
          {
            "name": "notEqual",
            "value": "notEqual",
            "description": "Not Equal"
          },
          {
            "name": "lessThan",
            "value": "lessThan",
            "description": "Less than"
          },
          {
            "name": "lessThanEqual",
            "value": "lessThanEqual",
            "description": "Less than or equal"
          },
          {
            "name": "greaterThan",
            "value": "greaterThan",
            "description": "Greater than"
          },
          {
            "name": "greaterThanEqual",
            "value": "greaterThanEqual",
            "description": "Greater than or equal"
          }
        ]
      }
    },
    "LongestIdleMode": {
      "type": "object",
      "description": "Jobs are directed to the worker who has been idle longest.",
      "properties": {},
      "allOf": [
        {
          "$ref": "#/definitions/DistributionMode"
        }
      ],
      "x-ms-discriminator-value": "longest-idle"
    },
    "ManualReclassifyExceptionAction": {
      "type": "object",
      "description": "An action that manually reclassifies a job by providing the queue, priority and\nworker selectors.",
      "properties": {
        "queueId": {
          "type": "string",
          "description": "Updated QueueId."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "Updated Priority."
        },
        "workerSelectors": {
          "type": "array",
          "description": "Updated WorkerSelectors.",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ExceptionAction"
        }
      ],
      "x-ms-discriminator-value": "manual-reclassify"
    },
    "Oauth2ClientCredential": {
      "type": "object",
      "description": "OAuth2.0 Credentials used to Contoso's Authorization server.\nReference:\nhttps://www.oauth.com/oauth2-servers/access-tokens/client-credentials/",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "ClientId for Contoso Authorization server."
        },
        "clientSecret": {
          "type": "string",
          "description": "Client secret for Contoso Authorization server."
        }
      }
    },
    "PagedClassificationPolicyItem": {
      "type": "object",
      "description": "A paged collection of classification policies.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ClassificationPolicyItem items on this page",
          "items": {
            "$ref": "#/definitions/ClassificationPolicyItem"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDistributionPolicyItem": {
      "type": "object",
      "description": "A paged collection of distribution policies.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DistributionPolicyItem items on this page",
          "items": {
            "$ref": "#/definitions/DistributionPolicyItem"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedExceptionPolicyItem": {
      "type": "object",
      "description": "A paged collection of exception policies.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ExceptionPolicyItem items on this page",
          "items": {
            "$ref": "#/definitions/ExceptionPolicyItem"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedRouterJobItem": {
      "type": "object",
      "description": "A paged collection of jobs.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RouterJobItem items on this page",
          "items": {
            "$ref": "#/definitions/RouterJobItem"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedRouterQueueItem": {
      "type": "object",
      "description": "A paged collection of queues.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RouterQueueItem items on this page",
          "items": {
            "$ref": "#/definitions/RouterQueueItem"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedRouterWorkerItem": {
      "type": "object",
      "description": "A paged collection of workers.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RouterWorkerItem items on this page",
          "items": {
            "$ref": "#/definitions/RouterWorkerItem"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PassThroughQueueSelectorAttachment": {
      "type": "object",
      "description": "Attaches a queue selector where the value is passed through from the job label\nwith the same key",
      "properties": {
        "key": {
          "type": "string",
          "description": "The label key to query against"
        },
        "labelOperator": {
          "$ref": "#/definitions/LabelOperator",
          "description": "Describes how the value of the label is compared to the value pass through"
        }
      },
      "required": [
        "key",
        "labelOperator"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/QueueSelectorAttachment"
        }
      ],
      "x-ms-discriminator-value": "pass-through"
    },
    "PassThroughWorkerSelectorAttachment": {
      "type": "object",
      "description": "Attaches a worker selector where the value is passed through from the job label\nwith the same key",
      "properties": {
        "key": {
          "type": "string",
          "description": "The label key to query against"
        },
        "labelOperator": {
          "$ref": "#/definitions/LabelOperator",
          "description": "Describes how the value of the label is compared to the value pass through"
        },
        "expiresAfterSeconds": {
          "type": "number",
          "format": "double",
          "description": "Describes how long the attached label selector is valid in seconds."
        }
      },
      "required": [
        "key",
        "labelOperator"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WorkerSelectorAttachment"
        }
      ],
      "x-ms-discriminator-value": "pass-through"
    },
    "QueueLengthExceptionTrigger": {
      "type": "object",
      "description": "Trigger for an exception action on exceeding queue length",
      "properties": {
        "threshold": {
          "type": "integer",
          "format": "int32",
          "description": "Threshold of number of jobs ahead in the queue to for this trigger to fire."
        }
      },
      "required": [
        "threshold"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ExceptionTrigger"
        }
      ],
      "x-ms-discriminator-value": "queue-length"
    },
    "QueueSelectorAttachment": {
      "type": "object",
      "description": "An attachment of queue selectors to resolve a queue to a job from a\nclassification policy",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for QueueSelectorAttachment."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "QueueWeightedAllocation": {
      "type": "object",
      "description": "Contains the weight percentage and queue selectors to be applied if selected\nfor weighted distributions.",
      "properties": {
        "weight": {
          "type": "number",
          "format": "double",
          "description": "The percentage of this weight, expressed as a fraction of 1."
        },
        "queueSelectors": {
          "type": "array",
          "description": "A collection of queue selectors that will be applied if this allocation is\nselected.",
          "items": {
            "$ref": "#/definitions/RouterQueueSelector"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "weight",
        "queueSelectors"
      ]
    },
    "ReclassifyExceptionAction": {
      "type": "object",
      "description": "An action that modifies labels on a job and then reclassifies it",
      "properties": {
        "classificationPolicyId": {
          "type": "string",
          "description": "(optional) The new classification policy that will determine queue, priority\nand worker selectors."
        },
        "labelsToUpsert": {
          "type": "object",
          "description": "(optional) Dictionary containing the labels to update (or add if not existing)\nin key-value pairs",
          "additionalProperties": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ExceptionAction"
        }
      ],
      "x-ms-discriminator-value": "reclassify"
    },
    "RoundRobinMode": {
      "type": "object",
      "description": "Jobs are distributed in order to workers, starting with the worker that is\nafter the last worker to receive a job.",
      "properties": {},
      "allOf": [
        {
          "$ref": "#/definitions/DistributionMode"
        }
      ],
      "x-ms-discriminator-value": "round-robin"
    },
    "RouterJob": {
      "type": "object",
      "description": "A unit of work to be routed",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the job.",
          "readOnly": true
        },
        "channelReference": {
          "type": "string",
          "description": "Reference to an external parent context, eg. call ID."
        },
        "status": {
          "$ref": "#/definitions/RouterJobStatus",
          "description": "The status of the Job.",
          "readOnly": true
        },
        "enqueuedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time a job was queued in UTC.",
          "readOnly": true
        },
        "channelId": {
          "type": "string",
          "description": "The channel identifier. eg. voice, chat, etc."
        },
        "classificationPolicyId": {
          "type": "string",
          "description": "The Id of the Classification policy used for classifying a job."
        },
        "queueId": {
          "type": "string",
          "description": "The Id of the Queue that this job is queued to."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The priority of this job."
        },
        "dispositionCode": {
          "type": "string",
          "description": "Reason code for cancelled or closed jobs."
        },
        "requestedWorkerSelectors": {
          "type": "array",
          "description": "A collection of manually specified label selectors, which a worker must satisfy\nin order to process this job.",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          },
          "x-ms-identifiers": []
        },
        "attachedWorkerSelectors": {
          "type": "array",
          "description": "A collection of label selectors attached by a classification policy, which a\nworker must satisfy in order to process this job.",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "labels": {
          "type": "object",
          "description": "A set of key/value pairs that are identifying attributes used by the rules\nengines to make decisions.",
          "additionalProperties": true
        },
        "assignments": {
          "type": "object",
          "description": "A collection of the assignments of the job.\nKey is AssignmentId.",
          "additionalProperties": {
            "$ref": "#/definitions/RouterJobAssignment"
          },
          "readOnly": true
        },
        "tags": {
          "type": "object",
          "description": "A set of non-identifying attributes attached to this job",
          "additionalProperties": true
        },
        "notes": {
          "type": "object",
          "description": "Notes attached to a job, sorted by timestamp",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scheduledAt": {
          "type": "string",
          "format": "date-time",
          "description": "If set, job will be scheduled to be enqueued at a given time",
          "readOnly": true
        },
        "matchingMode": {
          "$ref": "#/definitions/JobMatchingMode",
          "description": "The matching mode to be applied to this job.\n            \nSupported types:\n    \n       \nQueueAndMatchMode: Used when matching worker to a job is required to be\ndone right after job is queued.\nScheduleAndSuspendMode: Used for scheduling\njobs to be queued at a future time. At specified time, matching of a worker to\nthe job will not start automatically.\nSuspendMode: Used when matching workers\nto a job needs to be suspended."
        }
      },
      "required": [
        "id"
      ]
    },
    "RouterJobAssignment": {
      "type": "object",
      "description": "Assignment details of a job to a worker",
      "properties": {
        "assignmentId": {
          "type": "string",
          "description": "The Id of the job assignment."
        },
        "workerId": {
          "type": "string",
          "description": "The Id of the Worker assigned to the job."
        },
        "assignedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The assignment time of the job in UTC."
        },
        "completedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time the job was marked as completed after being assigned in UTC."
        },
        "closedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time the job was marked as closed after being completed in UTC."
        }
      },
      "required": [
        "assignmentId",
        "assignedAt"
      ]
    },
    "RouterJobItem": {
      "type": "object",
      "description": "Paged instance of RouterJob",
      "properties": {
        "job": {
          "$ref": "#/definitions/RouterJob",
          "description": "A unit of work to be routed"
        },
        "etag": {
          "$ref": "#/definitions/Azure.Core.eTag",
          "description": "(Optional) The Concurrency Token."
        }
      },
      "required": [
        "job",
        "etag"
      ]
    },
    "RouterJobOffer": {
      "type": "object",
      "description": "An offer of a job to a worker",
      "properties": {
        "offerId": {
          "type": "string",
          "description": "The Id of the offer."
        },
        "jobId": {
          "type": "string",
          "description": "The Id of the job."
        },
        "capacityCost": {
          "type": "integer",
          "format": "int32",
          "description": "The capacity cost consumed by the job offer."
        },
        "offeredAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time the offer was created in UTC."
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time that the offer will expire in UTC."
        }
      },
      "required": [
        "offerId",
        "jobId",
        "capacityCost"
      ]
    },
    "RouterJobPositionDetails": {
      "type": "object",
      "description": "Position and estimated wait time for a job.",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "Id of the job these details are about."
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "Position of the job in question within that queue."
        },
        "queueId": {
          "type": "string",
          "description": "Id of the queue this job is enqueued in."
        },
        "queueLength": {
          "type": "integer",
          "format": "int32",
          "description": "Length of the queue: total number of enqueued jobs."
        },
        "estimatedWaitTimeMinutes": {
          "type": "number",
          "format": "double",
          "description": "Estimated wait time of the job rounded up to the nearest minute"
        }
      },
      "required": [
        "jobId",
        "position",
        "queueId",
        "queueLength",
        "estimatedWaitTimeMinutes"
      ]
    },
    "RouterJobStatus": {
      "type": "string",
      "description": "The status of the Job.",
      "enum": [
        "pendingClassification",
        "queued",
        "assigned",
        "completed",
        "closed",
        "cancelled",
        "classificationFailed",
        "created",
        "pendingSchedule",
        "scheduled",
        "scheduleFailed",
        "waitingForActivation"
      ],
      "x-ms-enum": {
        "name": "RouterJobStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "pendingClassification",
            "value": "pendingClassification",
            "description": "Job is waiting to be classified."
          },
          {
            "name": "queued",
            "value": "queued",
            "description": "Job has been queued."
          },
          {
            "name": "assigned",
            "value": "assigned",
            "description": "Job has been assigned to a worker."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "Job has been completed by a worker."
          },
          {
            "name": "closed",
            "value": "closed",
            "description": "Job has been closed by a worker."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "Job has been cancelled."
          },
          {
            "name": "classificationFailed",
            "value": "classificationFailed",
            "description": "Classification process failed for the job."
          },
          {
            "name": "created",
            "value": "created",
            "description": "Job has been created."
          },
          {
            "name": "pendingSchedule",
            "value": "pendingSchedule",
            "description": "Job has been created but not been scheduled yet."
          },
          {
            "name": "scheduled",
            "value": "scheduled",
            "description": "Job has been scheduled successfully."
          },
          {
            "name": "scheduleFailed",
            "value": "scheduleFailed",
            "description": "Job scheduling failed."
          },
          {
            "name": "waitingForActivation",
            "value": "waitingForActivation",
            "description": "Job is in a suspended state and waiting for an update."
          }
        ]
      }
    },
    "RouterJobUpdate": {
      "type": "object",
      "description": "A unit of work to be routed",
      "properties": {
        "channelReference": {
          "type": "string",
          "description": "Reference to an external parent context, eg. call ID."
        },
        "channelId": {
          "type": "string",
          "description": "The channel identifier. eg. voice, chat, etc."
        },
        "classificationPolicyId": {
          "type": "string",
          "description": "The Id of the Classification policy used for classifying a job."
        },
        "queueId": {
          "type": "string",
          "description": "The Id of the Queue that this job is queued to."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The priority of this job."
        },
        "dispositionCode": {
          "type": "string",
          "description": "Reason code for cancelled or closed jobs."
        },
        "requestedWorkerSelectors": {
          "type": "array",
          "description": "A collection of manually specified label selectors, which a worker must satisfy\nin order to process this job.",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          },
          "x-ms-identifiers": []
        },
        "labels": {
          "type": "object",
          "description": "A set of key/value pairs that are identifying attributes used by the rules\nengines to make decisions.",
          "additionalProperties": true
        },
        "tags": {
          "type": "object",
          "description": "A set of non-identifying attributes attached to this job",
          "additionalProperties": true
        },
        "notes": {
          "type": "object",
          "description": "Notes attached to a job, sorted by timestamp",
          "additionalProperties": {
            "type": "string"
          }
        },
        "matchingMode": {
          "$ref": "#/definitions/JobMatchingMode",
          "description": "The matching mode to be applied to this job.\n            \nSupported types:\n    \n       \nQueueAndMatchMode: Used when matching worker to a job is required to be\ndone right after job is queued.\nScheduleAndSuspendMode: Used for scheduling\njobs to be queued at a future time. At specified time, matching of a worker to\nthe job will not start automatically.\nSuspendMode: Used when matching workers\nto a job needs to be suspended."
        }
      }
    },
    "RouterQueue": {
      "type": "object",
      "description": "A queue that can contain jobs to be routed.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Id of this queue",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of this queue."
        },
        "distributionPolicyId": {
          "type": "string",
          "description": "The ID of the distribution policy that will determine how a job is distributed\nto workers."
        },
        "labels": {
          "type": "object",
          "description": "A set of key/value pairs that are identifying attributes used by the rules\nengines to make decisions.",
          "additionalProperties": true
        },
        "exceptionPolicyId": {
          "type": "string",
          "description": "(Optional) The ID of the exception policy that determines various job\nescalation rules."
        }
      },
      "required": [
        "id"
      ]
    },
    "RouterQueueItem": {
      "type": "object",
      "description": "Paged instance of RouterQueue",
      "properties": {
        "queue": {
          "$ref": "#/definitions/RouterQueue",
          "description": "A queue that can contain jobs to be routed."
        },
        "etag": {
          "$ref": "#/definitions/Azure.Core.eTag",
          "description": "(Optional) The Concurrency Token."
        }
      },
      "required": [
        "queue",
        "etag"
      ]
    },
    "RouterQueueSelector": {
      "type": "object",
      "description": "Describes a condition that must be met against a set of labels for queue\nselection",
      "properties": {
        "key": {
          "type": "string",
          "description": "The label key to query against"
        },
        "labelOperator": {
          "$ref": "#/definitions/LabelOperator",
          "description": "Describes how the value of the label is compared to the value defined on the\nlabel selector"
        },
        "value": {
          "description": "The value to compare against the actual label value with the given operator"
        }
      },
      "required": [
        "key",
        "labelOperator"
      ]
    },
    "RouterQueueStatistics": {
      "type": "object",
      "description": "Statistics for the queue",
      "properties": {
        "queueId": {
          "type": "string",
          "description": "Id of the queue these details are about."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length of the queue: total number of enqueued jobs."
        },
        "estimatedWaitTimeMinutes": {
          "type": "object",
          "description": "The estimated wait time of this queue rounded up to the nearest minute, grouped\nby job priority",
          "additionalProperties": {
            "format": "double",
            "type": "number"
          }
        },
        "longestJobWaitTimeMinutes": {
          "type": "number",
          "format": "double",
          "description": "The wait time of the job that has been enqueued in this queue for the longest."
        }
      },
      "required": [
        "queueId",
        "length"
      ]
    },
    "RouterQueueUpdate": {
      "type": "object",
      "description": "A queue that can contain jobs to be routed.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this queue."
        },
        "distributionPolicyId": {
          "type": "string",
          "description": "The ID of the distribution policy that will determine how a job is distributed\nto workers."
        },
        "labels": {
          "type": "object",
          "description": "A set of key/value pairs that are identifying attributes used by the rules\nengines to make decisions.",
          "additionalProperties": true
        },
        "exceptionPolicyId": {
          "type": "string",
          "description": "(Optional) The ID of the exception policy that determines various job\nescalation rules."
        }
      }
    },
    "RouterRule": {
      "type": "object",
      "description": "A rule of one of the following types:\n            \nStaticRule:  A rule\nproviding static rules that always return the same result, regardless of\ninput.\nDirectMapRule:  A rule that return the same labels as the input\nlabels.\nExpressionRule: A rule providing inline expression\nrules.\nFunctionRule: A rule providing a binding to an HTTP Triggered Azure\nFunction.\nWebhookRule: A rule providing a binding to a webserver following\nOAuth2.0 authentication protocol.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for RouterRule."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "RouterWorker": {
      "type": "object",
      "description": "An entity for jobs to be routed to",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the worker.",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/RouterWorkerState",
          "description": "The current state of the worker.",
          "readOnly": true
        },
        "queueAssignments": {
          "type": "object",
          "description": "The queue(s) that this worker can receive work from.",
          "additionalProperties": true
        },
        "totalCapacity": {
          "type": "integer",
          "format": "int32",
          "description": "The total capacity score this worker has to manage multiple concurrent jobs."
        },
        "labels": {
          "type": "object",
          "description": "A set of key/value pairs that are identifying attributes used by the rules\nengines to make decisions.",
          "additionalProperties": true
        },
        "tags": {
          "type": "object",
          "description": "A set of non-identifying attributes attached to this worker.",
          "additionalProperties": true
        },
        "channelConfigurations": {
          "type": "object",
          "description": "The channel(s) this worker can handle and their impact on the workers capacity.",
          "additionalProperties": {
            "$ref": "#/definitions/ChannelConfiguration"
          }
        },
        "offers": {
          "type": "array",
          "description": "A list of active offers issued to this worker.",
          "items": {
            "$ref": "#/definitions/RouterJobOffer"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "assignedJobs": {
          "type": "array",
          "description": "A list of assigned jobs attached to this worker.",
          "items": {
            "$ref": "#/definitions/RouterWorkerAssignment"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "loadRatio": {
          "type": "number",
          "format": "double",
          "description": "A value indicating the workers capacity. A value of '1' means all capacity is\nconsumed. A value of '0' means no capacity is currently consumed.",
          "readOnly": true
        },
        "availableForOffers": {
          "type": "boolean",
          "description": "A flag indicating this worker is open to receive offers or not."
        }
      },
      "required": [
        "id"
      ]
    },
    "RouterWorkerAssignment": {
      "type": "object",
      "description": "The assignment for a worker to a job",
      "properties": {
        "assignmentId": {
          "type": "string",
          "description": "The Id of the assignment."
        },
        "jobId": {
          "type": "string",
          "description": "The Id of the Job assigned."
        },
        "capacityCost": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of capacity this assignment has consumed on the worker."
        },
        "assignedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The assignment time of the job in UTC."
        }
      },
      "required": [
        "assignmentId",
        "jobId",
        "capacityCost",
        "assignedAt"
      ]
    },
    "RouterWorkerItem": {
      "type": "object",
      "description": "Paged instance of RouterWorker",
      "properties": {
        "worker": {
          "$ref": "#/definitions/RouterWorker",
          "description": "An entity for jobs to be routed to"
        },
        "etag": {
          "$ref": "#/definitions/Azure.Core.eTag",
          "description": "(Optional) The Concurrency Token."
        }
      },
      "required": [
        "worker",
        "etag"
      ]
    },
    "RouterWorkerSelector": {
      "type": "object",
      "description": "Describes a condition that must be met against a set of labels for worker\nselection",
      "properties": {
        "key": {
          "type": "string",
          "description": "The label key to query against"
        },
        "labelOperator": {
          "$ref": "#/definitions/LabelOperator",
          "description": "Describes how the value of the label is compared to the value defined on the\nlabel selector"
        },
        "value": {
          "description": "The value to compare against the actual label value with the given operator"
        },
        "expiresAfterSeconds": {
          "type": "number",
          "format": "double",
          "description": "Describes how long this label selector is valid in seconds."
        },
        "expedite": {
          "type": "boolean",
          "description": "Pushes the job to the front of the queue as long as this selector is active."
        },
        "status": {
          "$ref": "#/definitions/RouterWorkerSelectorStatus",
          "description": "The status of the worker selector.",
          "readOnly": true
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which this worker selector expires in UTC",
          "readOnly": true
        }
      },
      "required": [
        "key",
        "labelOperator"
      ]
    },
    "RouterWorkerSelectorStatus": {
      "type": "string",
      "description": "The status of the worker selector.",
      "enum": [
        "active",
        "expired"
      ],
      "x-ms-enum": {
        "name": "RouterWorkerSelectorStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "active",
            "value": "active",
            "description": "Active"
          },
          {
            "name": "expired",
            "value": "expired",
            "description": "Expired"
          }
        ]
      }
    },
    "RouterWorkerState": {
      "type": "string",
      "description": "Enums for worker status",
      "enum": [
        "active",
        "draining",
        "inactive"
      ],
      "x-ms-enum": {
        "name": "RouterWorkerState",
        "modelAsString": true,
        "values": [
          {
            "name": "active",
            "value": "active",
            "description": "Worker is active and available to take offers."
          },
          {
            "name": "draining",
            "value": "draining",
            "description": "Worker is not active, if there are existing offers they are being revoked. No new offers are sent."
          },
          {
            "name": "inactive",
            "value": "inactive",
            "description": "Worker is not active. No new offers are sent."
          }
        ]
      }
    },
    "RouterWorkerUpdate": {
      "type": "object",
      "description": "An entity for jobs to be routed to",
      "properties": {
        "queueAssignments": {
          "type": "object",
          "description": "The queue(s) that this worker can receive work from.",
          "additionalProperties": true
        },
        "totalCapacity": {
          "type": "integer",
          "format": "int32",
          "description": "The total capacity score this worker has to manage multiple concurrent jobs."
        },
        "labels": {
          "type": "object",
          "description": "A set of key/value pairs that are identifying attributes used by the rules\nengines to make decisions.",
          "additionalProperties": true
        },
        "tags": {
          "type": "object",
          "description": "A set of non-identifying attributes attached to this worker.",
          "additionalProperties": true
        },
        "channelConfigurations": {
          "type": "object",
          "description": "The channel(s) this worker can handle and their impact on the workers capacity.",
          "additionalProperties": {
            "$ref": "#/definitions/ChannelConfigurationUpdate"
          }
        },
        "availableForOffers": {
          "type": "boolean",
          "description": "A flag indicating this worker is open to receive offers or not."
        }
      }
    },
    "RuleEngineQueueSelectorAttachment": {
      "type": "object",
      "description": "Attaches queue selectors to a job when the RouterRule is resolved",
      "properties": {
        "rule": {
          "$ref": "#/definitions/RouterRule",
          "description": "A rule of one of the following types:\n            \nStaticRule:  A rule\nproviding static rules that always return the same result, regardless of\ninput.\nDirectMapRule:  A rule that return the same labels as the input\nlabels.\nExpressionRule: A rule providing inline expression\nrules.\nFunctionRule: A rule providing a binding to an HTTP Triggered Azure\nFunction.\nWebhookRule: A rule providing a binding to a webserver following\nOAuth2.0 authentication protocol."
        }
      },
      "required": [
        "rule"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/QueueSelectorAttachment"
        }
      ],
      "x-ms-discriminator-value": "rule-engine"
    },
    "RuleEngineWorkerSelectorAttachment": {
      "type": "object",
      "description": "Attaches worker selectors to a job when a RouterRule is resolved",
      "properties": {
        "rule": {
          "$ref": "#/definitions/RouterRule",
          "description": "A rule of one of the following types:\n            \nStaticRule:  A rule\nproviding static rules that always return the same result, regardless of\ninput.\nDirectMapRule:  A rule that return the same labels as the input\nlabels.\nExpressionRule: A rule providing inline expression\nrules.\nFunctionRule: A rule providing a binding to an HTTP Triggered Azure\nFunction.\nWebhookRule: A rule providing a binding to a webserver following\nOAuth2.0 authentication protocol."
        }
      },
      "required": [
        "rule"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WorkerSelectorAttachment"
        }
      ],
      "x-ms-discriminator-value": "rule-engine"
    },
    "ScheduleAndSuspendMode": {
      "type": "object",
      "description": "Describes a matching mode used for scheduling jobs to be queued at a future\ntime.\nAt the specified time, matching worker to a job will not start\nautomatically.",
      "properties": {
        "scheduleAt": {
          "type": "string",
          "format": "date-time",
          "description": "Scheduled time."
        }
      }
    },
    "ScoringRuleOptions": {
      "type": "object",
      "description": "Encapsulates all options that can be passed as parameters for scoring rule with\nBestWorkerMode",
      "properties": {
        "batchSize": {
          "type": "integer",
          "format": "int32",
          "description": "(Optional) Set batch size when AllowScoringBatchOfWorkers is set to true.\nDefaults to 20 if not configured."
        },
        "scoringParameters": {
          "type": "array",
          "description": "(Optional) List of extra parameters from the job that will be sent as part of\nthe payload to scoring rule.\nIf not set, the job's labels (sent in the payload\nas `job`) and the job's worker selectors (sent in the payload as\n`selectors`)\nare added to the payload of the scoring rule by default.\nNote:\nWorker labels are always sent with scoring payload.",
          "items": {
            "$ref": "#/definitions/ScoringRuleParameterSelector"
          }
        },
        "allowScoringBatchOfWorkers": {
          "type": "boolean",
          "description": "(Optional)\nIf set to true, will score workers in batches, and the parameter\nname of the worker labels will be sent as `workers`.\nBy default, set to false\nand the parameter name for the worker labels will be sent as `worker`.\nNote: If\nenabled, use BatchSize to set batch size."
        },
        "descendingOrder": {
          "type": "boolean",
          "description": "(Optional)\nIf false, will sort scores by ascending order. By default, set to\ntrue."
        }
      }
    },
    "ScoringRuleParameterSelector": {
      "type": "string",
      "description": "Supported parameters for scoring workers",
      "enum": [
        "jobLabels",
        "workerSelectors"
      ],
      "x-ms-enum": {
        "name": "ScoringRuleParameterSelector",
        "modelAsString": true,
        "values": [
          {
            "name": "jobLabels",
            "value": "jobLabels",
            "description": "Parameter to add job labels to scoring payload.  Property is sent as `job`."
          },
          {
            "name": "workerSelectors",
            "value": "workerSelectors",
            "description": "Parameter to add worker selectors from the job to scoring payload.  Property is sent as `selectors`."
          }
        ]
      }
    },
    "StaticQueueSelectorAttachment": {
      "type": "object",
      "description": "Describes a queue selector that will be attached to the job",
      "properties": {
        "queueSelector": {
          "$ref": "#/definitions/RouterQueueSelector",
          "description": "Describes a condition that must be met against a set of labels for queue\nselection"
        }
      },
      "required": [
        "queueSelector"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/QueueSelectorAttachment"
        }
      ],
      "x-ms-discriminator-value": "static"
    },
    "StaticRouterRule": {
      "type": "object",
      "description": "A rule providing static rules that always return the same result, regardless of\ninput.",
      "properties": {
        "value": {
          "description": "The static value this rule always returns."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RouterRule"
        }
      ],
      "x-ms-discriminator-value": "static-rule"
    },
    "StaticWorkerSelectorAttachment": {
      "type": "object",
      "description": "Describes a worker selector that will be attached to the job",
      "properties": {
        "workerSelector": {
          "$ref": "#/definitions/RouterWorkerSelector",
          "description": "Describes a condition that must be met against a set of labels for worker\nselection"
        }
      },
      "required": [
        "workerSelector"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WorkerSelectorAttachment"
        }
      ],
      "x-ms-discriminator-value": "static"
    },
    "UnassignJobRequest": {
      "type": "object",
      "description": "Request payload for unassigning a job.",
      "properties": {
        "suspendMatching": {
          "type": "boolean",
          "description": "If SuspendMatching is true, then the job is not queued for re-matching with a\nworker."
        }
      }
    },
    "UnassignJobResult": {
      "type": "object",
      "description": "Response payload after a job has been successfully unassigned.",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "The Id of the job unassigned."
        },
        "unassignmentCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of times a job is unassigned. At a maximum 3."
        }
      },
      "required": [
        "jobId",
        "unassignmentCount"
      ]
    },
    "WaitTimeExceptionTrigger": {
      "type": "object",
      "description": "Trigger for an exception action on exceeding wait time",
      "properties": {
        "thresholdSeconds": {
          "type": "number",
          "format": "double",
          "description": "Threshold for wait time for this trigger."
        }
      },
      "required": [
        "thresholdSeconds"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ExceptionTrigger"
        }
      ],
      "x-ms-discriminator-value": "wait-time"
    },
    "WebhookRouterRule": {
      "type": "object",
      "description": "A rule providing a binding to an external web server.",
      "properties": {
        "authorizationServerUri": {
          "type": "string",
          "format": "uri",
          "description": "Uri for Authorization Server."
        },
        "clientCredential": {
          "$ref": "#/definitions/Oauth2ClientCredential",
          "description": "OAuth2.0 Credentials used to Contoso's Authorization server.\nReference:\nhttps://www.oauth.com/oauth2-servers/access-tokens/client-credentials/"
        },
        "webhookUri": {
          "type": "string",
          "format": "uri",
          "description": "Uri for Contoso's Web Server."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RouterRule"
        }
      ],
      "x-ms-discriminator-value": "webhook-rule"
    },
    "WeightedAllocationQueueSelectorAttachment": {
      "type": "object",
      "description": "Describes multiple sets of queue selectors, of which one will be selected and\nattached according to a weighting",
      "properties": {
        "allocations": {
          "type": "array",
          "description": "A collection of percentage based weighted allocations.",
          "items": {
            "$ref": "#/definitions/QueueWeightedAllocation"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "allocations"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/QueueSelectorAttachment"
        }
      ],
      "x-ms-discriminator-value": "weighted-allocation-queue-selector"
    },
    "WeightedAllocationWorkerSelectorAttachment": {
      "type": "object",
      "description": "Describes multiple sets of worker selectors, of which one will be selected and\nattached according to a weighting",
      "properties": {
        "allocations": {
          "type": "array",
          "description": "A collection of percentage based weighted allocations.",
          "items": {
            "$ref": "#/definitions/WorkerWeightedAllocation"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "allocations"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WorkerSelectorAttachment"
        }
      ],
      "x-ms-discriminator-value": "weighted-allocation-worker-selector"
    },
    "WorkerSelectorAttachment": {
      "type": "object",
      "description": "An attachment which attaches worker selectors to a job",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for WorkerSelectorAttachment."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "WorkerWeightedAllocation": {
      "type": "object",
      "description": "Contains the weight percentage and worker selectors to be applied if selected\nfor weighted distributions.",
      "properties": {
        "weight": {
          "type": "number",
          "format": "double",
          "description": "The percentage of this weight, expressed as a fraction of 1."
        },
        "workerSelectors": {
          "type": "array",
          "description": "A collection of worker selectors that will be applied if this allocation is\nselected.",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "weight",
        "workerSelectors"
      ]
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "RouterConditionalRequestHeaders.ifMatch": {
      "name": "If-Match",
      "in": "header",
      "description": "The request should only proceed if an entity matches this string.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "ifMatch"
    },
    "RouterConditionalRequestHeaders.ifUnmodifiedSince": {
      "name": "If-Unmodified-Since",
      "in": "header",
      "description": "The request should only proceed if the entity was not modified after this time.",
      "required": false,
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "ifUnmodifiedSince"
    }
  }
}
