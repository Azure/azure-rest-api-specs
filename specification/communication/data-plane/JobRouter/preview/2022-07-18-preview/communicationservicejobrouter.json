{
  "swagger": "2.0",
  "info": {
    "title": "Azure Communication Routing Service",
    "description": "Azure Communication Routing Service",
    "version": "2022-07-18-preview"
  },
  "paths": {
    "/routing/classificationPolicies/{id}": {
      "patch": {
        "tags": [
          "ClassificationPolicies"
        ],
        "summary": "Creates or updates a classification policy.",
        "operationId": "JobRouterAdministration_UpsertClassificationPolicy",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the classification policy.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "patch",
            "description": "Model of classification policy properties to be patched. See also: https://datatracker.ietf.org/doc/html/rfc7386.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassificationPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClassificationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ClassificationPolicy"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Creates a Classification policy": {
            "$ref": "./examples/ClassificationPolicies_CreateClassificationPolicy.json"
          },
          "Update a Classification policy": {
            "$ref": "./examples/ClassificationPolicies_UpdateClassificationPolicy.json"
          }
        }
      },
      "get": {
        "tags": [
          "ClassificationPolicies"
        ],
        "summary": "Retrieves an existing classification policy by Id.",
        "operationId": "JobRouterAdministration_GetClassificationPolicy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the classification policy.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClassificationPolicy"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get a single Classification policy": {
            "$ref": "./examples/ClassificationPolicies_GetClassificationPolicy.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ClassificationPolicies"
        ],
        "summary": "Delete a classification policy by Id.",
        "operationId": "JobRouterAdministration_DeleteClassificationPolicy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the classification policy.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete a Classification policy": {
            "$ref": "./examples/ClassificationPolicies_DeleteClassificationPolicy.json"
          }
        }
      }
    },
    "/routing/classificationPolicies": {
      "get": {
        "tags": [
          "ClassificationPolicies"
        ],
        "summary": "Retrieves existing classification policies.",
        "operationId": "JobRouterAdministration_ListClassificationPolicies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "Maximum page size.",
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClassificationPolicyCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Classification policies with pagination (max page size)": {
            "$ref": "./examples/ClassificationPolicies_ListClassificationPoliciesWithPageSize.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink",
          "itemName": "value"
        }
      }
    },
    "/routing/distributionPolicies/{id}": {
      "patch": {
        "tags": [
          "DistributionPolicies"
        ],
        "summary": "Creates or updates a distribution policy.",
        "operationId": "JobRouterAdministration_UpsertDistributionPolicy",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the distribution policy.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "patch",
            "description": "Model of distribution policy properties to be patched. See also: https://datatracker.ietf.org/doc/html/rfc7386.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DistributionPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DistributionPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DistributionPolicy"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Creates a Distribution policy": {
            "$ref": "./examples/DistributionPolicies_CreateDistributionPolicy.json"
          },
          "Update a Distribution policy": {
            "$ref": "./examples/DistributionPolicies_UpdateDistributionPolicy.json"
          }
        }
      },
      "get": {
        "tags": [
          "DistributionPolicies"
        ],
        "summary": "Retrieves an existing distribution policy by Id.",
        "operationId": "JobRouterAdministration_GetDistributionPolicy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the distribution policy.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DistributionPolicy"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get a single Distribution policy": {
            "$ref": "./examples/DistributionPolicies_GetDistributionPolicy.json"
          }
        }
      },
      "delete": {
        "tags": [
          "DistributionPolicies"
        ],
        "summary": "Delete a distribution policy by Id.",
        "operationId": "JobRouterAdministration_DeleteDistributionPolicy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the distribution policy.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete a Distribution policy": {
            "$ref": "./examples/DistributionPolicies_DeleteDistributionPolicy.json"
          }
        }
      }
    },
    "/routing/distributionPolicies": {
      "get": {
        "tags": [
          "DistributionPolicies"
        ],
        "summary": "Retrieves existing distribution policies.",
        "operationId": "JobRouterAdministration_ListDistributionPolicies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "Maximum page size.",
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DistributionPolicyCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Distribution policies with pagination (max page size)": {
            "$ref": "./examples/DistributionPolicies_ListDistributionPoliciesWithPageSize.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink",
          "itemName": "value"
        }
      }
    },
    "/routing/exceptionPolicies/{id}": {
      "patch": {
        "tags": [
          "ExceptionPolicies"
        ],
        "summary": "Creates or updates a exception policy.",
        "operationId": "JobRouterAdministration_UpsertExceptionPolicy",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the exception policy.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "patch",
            "description": "Model of exception policy properties to be patched. See also: https://datatracker.ietf.org/doc/html/rfc7386",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExceptionPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExceptionPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ExceptionPolicy"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Creates a Exception policy": {
            "$ref": "./examples/ExceptionPolicies_CreateExceptionPolicy.json"
          },
          "Update a Exception policy": {
            "$ref": "./examples/ExceptionPolicies_UpdateExceptionPolicy.json"
          }
        }
      },
      "get": {
        "tags": [
          "ExceptionPolicies"
        ],
        "summary": "Retrieves an existing exception policy by Id.",
        "operationId": "JobRouterAdministration_GetExceptionPolicy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the exception policy to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExceptionPolicy"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get a single Exception policy": {
            "$ref": "./examples/ExceptionPolicies_GetExceptionPolicy.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ExceptionPolicies"
        ],
        "summary": "Deletes a exception policy by Id.",
        "operationId": "JobRouterAdministration_DeleteExceptionPolicy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the exception policy to delete.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete a Exception policy": {
            "$ref": "./examples/ExceptionPolicies_DeleteExceptionPolicy.json"
          }
        }
      }
    },
    "/routing/exceptionPolicies": {
      "get": {
        "tags": [
          "ExceptionPolicies"
        ],
        "summary": "Retrieves existing exception policies.",
        "operationId": "JobRouterAdministration_ListExceptionPolicies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "Number of objects to return per page.",
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExceptionPolicyCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Exception policies with pagination (max page size)": {
            "$ref": "./examples/ExceptionPolicies_ListExceptionPoliciesWithPageSize.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink",
          "itemName": "value"
        }
      }
    },
    "/routing/jobs/{id}": {
      "patch": {
        "tags": [
          "Jobs"
        ],
        "summary": "Creates or updates a router job.",
        "operationId": "JobRouter_UpsertJob",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "patch",
            "description": "Model of job properties to be created or patched. See also: https://datatracker.ietf.org/doc/html/rfc7386.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouterJob"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterJob"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RouterJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Creates a new Job": {
            "$ref": "./examples/Jobs_CreateJob.json"
          },
          "Update a job": {
            "$ref": "./examples/Jobs_UpdateJob.json"
          },
          "Creates a scheduled job": {
            "$ref": "./examples/Jobs_CreateScheduledJob.json"
          }
        }
      },
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieves an existing job by Id.",
        "operationId": "JobRouter_GetJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the job to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterJob"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get a single Job": {
            "$ref": "./examples/Jobs_GetJob.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Jobs"
        ],
        "summary": "Deletes a job and all of its traces.",
        "operationId": "JobRouter_DeleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Deletes a job and all of its traces": {
            "$ref": "./examples/Jobs_DeleteJob.json"
          }
        }
      }
    },
    "/routing/jobs/{id}:reclassify": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Reclassify a job.",
        "operationId": "JobRouter_ReclassifyJobAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "reclassifyJobRequest",
            "description": "Request object for reclassifying a job.",
            "schema": {
              "$ref": "#/definitions/ReclassifyJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReclassifyJobResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Reclassify a job": {
            "$ref": "./examples/Jobs_ReclassifyJob.json"
          }
        }
      }
    },
    "/routing/jobs/{id}:cancel": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Submits request to cancel an existing job by Id while supplying free-form cancellation reason.",
        "operationId": "JobRouter_CancelJobAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "cancelJobRequest",
            "description": "Request model for cancelling job.",
            "schema": {
              "$ref": "#/definitions/CancelJobRequest"
            },
            "x-ms-client-flatten": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelJobResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Cancels a job": {
            "$ref": "./examples/Jobs_RequestJobCancel.json"
          }
        }
      }
    },
    "/routing/jobs/{id}:complete": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Completes an assigned job.",
        "operationId": "JobRouter_CompleteJobAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "completeJobRequest",
            "description": "Request model for completing job.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteJobRequest"
            },
            "x-ms-client-flatten": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompleteJobResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Completes a job": {
            "$ref": "./examples/Jobs_CompleteJob.json"
          }
        }
      }
    },
    "/routing/jobs/{id}:close": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Closes a completed job.",
        "operationId": "JobRouter_CloseJobAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "closeJobRequest",
            "description": "Request model for closing job.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseJobRequest"
            },
            "x-ms-client-flatten": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CloseJobResult"
            }
          },
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CloseJobResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Closes a job": {
            "$ref": "./examples/Jobs_CloseJob.json"
          }
        }
      }
    },
    "/routing/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieves list of jobs based on filter parameters.",
        "operationId": "JobRouter_ListJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "description": "If specified, filter jobs by status.",
            "type": "string",
            "default": "all",
            "enum": [
              "all",
              "pendingClassification",
              "queued",
              "assigned",
              "completed",
              "closed",
              "cancelled",
              "classificationFailed",
              "created",
              "pendingSchedule",
              "scheduled",
              "scheduleFailed",
              "waitingForActivation",
              "active"
            ],
            "x-ms-enum": {
              "name": "RouterJobStatusSelector",
              "modelAsString": true
            }
          },
          {
            "in": "query",
            "name": "queueId",
            "description": "If specified, filter jobs by queue.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "channelId",
            "description": "If specified, filter jobs by channel.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "classificationPolicyId",
            "description": "If specified, filter jobs by classificationPolicy.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "scheduledBefore",
            "description": "If specified, filter on jobs that was scheduled before or at given timestamp. Range: (-Inf, scheduledBefore].",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "scheduledAfter",
            "description": "If specified, filter on jobs that was scheduled at or after given value. Range: [scheduledAfter, +Inf).",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "Number of objects to return per page.",
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterJobCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Gets a list of jobs with pagination (max page size)": {
            "$ref": "./examples/Jobs_GetJobsWithPageSize.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink",
          "itemName": "value"
        }
      }
    },
    "/routing/jobs/{id}/position": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Gets a job's position details.",
        "operationId": "JobRouter_GetInQueuePosition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterJobPositionDetails"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Gets a job position in a queue": {
            "$ref": "./examples/Jobs_GetInQueuePosition.json"
          }
        }
      }
    },
    "/routing/jobs/{id}/assignments/{assignmentId}:unassign": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Un-assign a job.",
        "operationId": "JobRouter_UnassignJobAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the job to un-assign.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "assignmentId",
            "description": "Id of the assignment to un-assign.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "unassignJobRequest",
            "description": "Request body for unassign route.",
            "schema": {
              "$ref": "#/definitions/UnassignJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UnassignJobResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Unassigns a job": {
            "$ref": "./examples/Jobs_UnassignJob.json"
          }
        }
      }
    },
    "/routing/workers/{workerId}/offers/{offerId}:accept": {
      "post": {
        "tags": [
          "Offers"
        ],
        "summary": "Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.",
        "operationId": "JobRouter_AcceptJobAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workerId",
            "description": "Id of the worker.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "offerId",
            "description": "Id of the offer.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AcceptJobOfferResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Accept a Job Offer": {
            "$ref": "./examples/Offers_AcceptJobOffer.json"
          }
        }
      }
    },
    "/routing/workers/{workerId}/offers/{offerId}:decline": {
      "post": {
        "tags": [
          "Offers"
        ],
        "summary": "Declines an offer to work on a job.",
        "operationId": "JobRouter_DeclineJobAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workerId",
            "description": "Id of the worker.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "offerId",
            "description": "Id of the offer.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "declineJobOfferRequest",
            "description": "Request model for declining offer.",
            "schema": {
              "$ref": "#/definitions/DeclineJobOfferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeclineJobOfferResult"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Decline a Job Offer": {
            "$ref": "./examples/Offers_DeclineJobOffer.json"
          }
        }
      }
    },
    "/routing/queues/{id}": {
      "patch": {
        "tags": [
          "Queues"
        ],
        "summary": "Creates or updates a queue.",
        "operationId": "JobRouterAdministration_UpsertQueue",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the queue.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "patch",
            "description": "Model of queue properties to be patched. See also: https://datatracker.ietf.org/doc/html/rfc7386.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouterQueue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterQueue"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RouterQueue"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Update a Queue": {
            "$ref": "./examples/Queues_UpdateQueue.json"
          },
          "Create a Queue": {
            "$ref": "./examples/Queues_CreateQueue.json"
          }
        }
      },
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Retrieves an existing queue by Id.",
        "operationId": "JobRouterAdministration_GetQueue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the queue to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterQueue"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get a single Queue": {
            "$ref": "./examples/Queues_GetQueue.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Queues"
        ],
        "summary": "Deletes a queue by Id.",
        "operationId": "JobRouterAdministration_DeleteQueue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the queue to delete.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete a Queue": {
            "$ref": "./examples/Queues_DeleteQueue.json"
          }
        }
      }
    },
    "/routing/queues": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Retrieves existing queues.",
        "operationId": "JobRouterAdministration_ListQueues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "Number of objects to return per page.",
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterQueueCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Queues with pagination (max page size)": {
            "$ref": "./examples/Queues_ListQueuesWithPageSize.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink",
          "itemName": "value"
        }
      }
    },
    "/routing/queues/{id}/statistics": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Retrieves a queue's statistics.",
        "operationId": "JobRouter_GetQueueStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the queue to retrieve statistics.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterQueueStatistics"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get a single Queue": {
            "$ref": "./examples/Queues_GetQueueStatistics.json"
          }
        }
      }
    },
    "/routing/workers/{workerId}": {
      "patch": {
        "tags": [
          "Workers"
        ],
        "summary": "Creates or updates a worker.",
        "operationId": "JobRouter_UpsertWorker",
        "consumes": [
          "application/merge-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workerId",
            "description": "Id of the worker.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "in": "body",
            "name": "patch",
            "description": "Model of worker properties to be created or patched. See also: https://datatracker.ietf.org/doc/html/rfc7386.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouterWorker"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterWorker"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RouterWorker"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create a Worker": {
            "$ref": "./examples/Workers_CreateWorker.json"
          },
          "Update a Worker properties": {
            "$ref": "./examples/Workers_UpdateWorker.json"
          },
          "Register a Worker": {
            "$ref": "./examples/Workers_RegisterWorker.json"
          },
          "Deregister an active Worker": {
            "$ref": "./examples/Workers_DeregisterActiveWorker.json"
          },
          "Deregister a inactive Worker": {
            "$ref": "./examples/Workers_DeregisterInactiveWorker.json"
          }
        }
      },
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "Retrieves an existing worker by Id.",
        "operationId": "JobRouter_GetWorker",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workerId",
            "description": "Id of the worker to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterWorker"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get a single Worker": {
            "$ref": "./examples/Workers_GetWorker.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Workers"
        ],
        "summary": "Deletes a worker and all of its traces.",
        "operationId": "JobRouter_DeleteWorker",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workerId",
            "description": "Id of the worker to delete.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete a Worker and all of its traces": {
            "$ref": "./examples/Workers_DeleteWorker.json"
          }
        }
      }
    },
    "/routing/workers": {
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "Retrieves existing workers.",
        "operationId": "JobRouter_ListWorkers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "state",
            "description": "If specified, select workers by worker state.",
            "type": "string",
            "default": "all",
            "enum": [
              "active",
              "draining",
              "inactive",
              "all"
            ],
            "x-ms-enum": {
              "name": "RouterWorkerStateSelector",
              "modelAsString": true
            }
          },
          {
            "in": "query",
            "name": "channelId",
            "description": "If specified, select workers who have a channel configuration with this channel.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "queueId",
            "description": "If specified, select workers who are assigned to this queue.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "hasCapacity",
            "description": "If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "maxpagesize",
            "description": "Number of objects to return per page.",
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RouterWorkerCollection"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/CommunicationErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "List workers with pagination (max page size)": {
            "$ref": "./examples/Workers_GetWorkersWithPageSize.json"
          },
          "List available Workers by channel": {
            "$ref": "./examples/Workers_GetAvailableWorkersByChannel.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink",
          "itemName": "value"
        }
      }
    }
  },
  "definitions": {
    "AcceptJobOfferResult": {
      "description": "Response containing Id's for the worker, job, and assignment from an accepted offer",
      "required": [
        "assignmentId",
        "jobId",
        "workerId"
      ],
      "type": "object",
      "properties": {
        "assignmentId": {
          "description": "The assignment Id that assigns a worker that has accepted an offer to a job.",
          "minLength": 1,
          "type": "string"
        },
        "jobId": {
          "description": "The Id of the job assigned.",
          "minLength": 1,
          "type": "string"
        },
        "workerId": {
          "description": "The Id of the worker that has been assigned this job.",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "BestWorkerMode": {
      "description": "Jobs are distributed to the worker with the strongest abilities available.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DistributionMode"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing BestWorkerMode",
          "type": "string"
        },
        "scoringRule": {
          "$ref": "#/definitions/RouterRule"
        },
        "scoringRuleOptions": {
          "$ref": "#/definitions/ScoringRuleOptions"
        }
      },
      "x-ms-discriminator-value": "best-worker"
    },
    "CancelExceptionAction": {
      "description": "An action that marks a job as cancelled",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExceptionAction"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing CancelExceptionAction",
          "type": "string"
        },
        "note": {
          "description": "(Optional) A note that will be appended to the jobs' Notes collection with the current timestamp.",
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        },
        "dispositionCode": {
          "description": "(Optional) Indicates the outcome of the job, populate this field with your own custom values.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "cancel"
    },
    "CancelJobRequest": {
      "description": "Request payload for deleting a job",
      "type": "object",
      "properties": {
        "note": {
          "description": "(Optional) A note that will be appended to the jobs' Notes collection with the current timestamp.",
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        },
        "dispositionCode": {
          "description": "Indicates the outcome of the job, populate this field with your own custom values.\r\nIf not provided, default value of \"Cancelled\" is set.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "CancelJobResult": {
      "description": "Response payload from cancelling a job",
      "type": "object",
      "properties": {}
    },
    "ChannelConfiguration": {
      "description": "Represents the capacity a job in this channel will consume from a worker",
      "required": [
        "capacityCostPerJob"
      ],
      "type": "object",
      "properties": {
        "capacityCostPerJob": {
          "format": "int32",
          "description": "The amount of capacity that an instance of a job of this channel will consume of the total worker capacity.",
          "type": "integer"
        },
        "maxNumberOfJobs": {
          "format": "int32",
          "description": "The maximum number of jobs that can be supported concurrently for this channel.",
          "type": "integer"
        }
      }
    },
    "ClassificationPolicy": {
      "description": "A container for the rules that govern how jobs are classified.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of this policy.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Friendly name of this policy.",
          "type": "string"
        },
        "fallbackQueueId": {
          "description": "The fallback queue to select if the queue selector doesn't find a match.",
          "type": "string"
        },
        "queueSelectors": {
          "description": "The queue selectors to resolve a queue for a given job.",
          "type": "array",
          "items": {
            "description": "An attachment of queue selectors to resolve a queue to a job from a classification policy"
          }
        },
        "prioritizationRule": {
          "$ref": "#/definitions/RouterRule"
        },
        "workerSelectors": {
          "description": "The worker label selectors to attach to a given job.",
          "type": "array",
          "items": {
            "description": "An attachment which attaches worker selectors to a job"
          }
        }
      }
    },
    "ClassificationPolicyCollection": {
      "description": "A paged collection of classification policies.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassificationPolicyItem"
          }
        },
        "nextLink": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ClassificationPolicyItem": {
      "description": "Paged instance of ClassificationPolicy",
      "type": "object",
      "properties": {
        "classificationPolicy": {
          "$ref": "#/definitions/ClassificationPolicy"
        },
        "etag": {
          "description": "(Optional) The Concurrency Token.",
          "type": "string"
        }
      }
    },
    "CloseJobRequest": {
      "description": "Request payload for closing jobs",
      "required": [
        "assignmentId"
      ],
      "type": "object",
      "properties": {
        "assignmentId": {
          "description": "The assignment within which the job is to be closed.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "dispositionCode": {
          "description": "Indicates the outcome of the job, populate this field with your own custom values.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "closeAt": {
          "format": "date-time",
          "description": "If not provided, worker capacity is released immediately along with a JobClosedEvent notification.\r\nIf provided, worker capacity is released along with a JobClosedEvent notification at a future time in UTC.",
          "type": "string"
        },
        "note": {
          "description": "(Optional) A note that will be appended to the jobs' Notes collection with the current timestamp.",
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "CloseJobResult": {
      "description": "Response payload from closing a job",
      "type": "object",
      "properties": {}
    },
    "CommunicationError": {
      "$ref": "../../../Common/stable/2021-03-07/common.json#/definitions/CommunicationError"
    },
    "CommunicationErrorResponse": {
      "$ref": "../../../Common/stable/2021-03-07/common.json#/definitions/CommunicationErrorResponse"
    },
    "CompleteJobRequest": {
      "description": "Request payload for completing jobs",
      "required": [
        "assignmentId"
      ],
      "type": "object",
      "properties": {
        "assignmentId": {
          "description": "The assignment within the job to complete.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "note": {
          "description": "(Optional) A note that will be appended to the jobs' Notes collection with the current timestamp.",
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "CompleteJobResult": {
      "description": "Response payload from completing a job",
      "type": "object",
      "properties": {}
    },
    "ConditionalQueueSelectorAttachment": {
      "description": "Describes a set of queue selectors that will be attached if the given condition resolves to true",
      "required": [
        "condition",
        "queueSelectors"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/QueueSelectorAttachment"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing ConditionalQueueSelectorAttachment",
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/RouterRule"
        },
        "queueSelectors": {
          "description": "The queue selectors to attach",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterQueueSelector"
          }
        }
      },
      "x-ms-discriminator-value": "conditional"
    },
    "ConditionalWorkerSelectorAttachment": {
      "description": "Describes a set of worker selectors that will be attached if the given condition resolves to true",
      "required": [
        "condition",
        "workerSelectors"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkerSelectorAttachment"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing ConditionalWorkerSelectorAttachment",
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/RouterRule"
        },
        "workerSelectors": {
          "description": "The worker selectors to attach",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          }
        }
      },
      "x-ms-discriminator-value": "conditional"
    },
    "DeclineJobOfferRequest": {
      "description": "Request payload for declining offers",
      "type": "object",
      "properties": {
        "retryOfferAt": {
          "format": "date-time",
          "description": "If the RetryOfferAt is not provided, then this job will not be offered again to the worker who declined this job unless\r\nthe worker is de-registered and re-registered.  If a RetryOfferAt time is provided, then the job will be re-matched to\r\neligible workers at the retry time in UTC.  The worker that declined the job will also be eligible for the job at that time.",
          "type": "string"
        }
      }
    },
    "DeclineJobOfferResult": {
      "description": "Response payload from declining a job",
      "type": "object",
      "properties": {}
    },
    "DirectMapRouterRule": {
      "description": "A rule that return the same labels as the input labels.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RouterRule"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing DirectMapRouterRule",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "direct-map-rule"
    },
    "DistributionMode": {
      "description": "Abstract base class for defining a distribution mode",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type discriminator describing a sub-type of Mode",
          "type": "string"
        },
        "minConcurrentOffers": {
          "format": "int32",
          "description": "Governs the minimum desired number of active concurrent offers a job can have.",
          "type": "integer"
        },
        "maxConcurrentOffers": {
          "format": "int32",
          "description": "Governs the maximum number of active concurrent offers a job can have.",
          "type": "integer"
        },
        "bypassSelectors": {
          "description": "(Optional)\r\nIf set to true, then router will match workers to jobs even if they don't match label selectors.\r\nWarning: You may get workers that are not qualified for the job they are matched with if you set this\r\nvariable to true. This flag is intended more for temporary usage.\r\nBy default, set to false.",
          "type": "boolean"
        }
      },
      "discriminator": "kind"
    },
    "DistributionPolicy": {
      "description": "Policy governing how jobs are distributed to workers",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique identifier of the policy.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The human readable name of the policy.",
          "type": "string"
        },
        "offerExpiresAfterSeconds": {
          "format": "double",
          "description": "The number of seconds after which any offers created under this policy will be expired.",
          "type": "number"
        },
        "mode": {
          "$ref": "#/definitions/DistributionMode"
        }
      }
    },
    "DistributionPolicyCollection": {
      "description": "A paged collection of distribution policies.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DistributionPolicyItem"
          }
        },
        "nextLink": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DistributionPolicyItem": {
      "description": "Paged instance of DistributionPolicy",
      "type": "object",
      "properties": {
        "distributionPolicy": {
          "$ref": "#/definitions/DistributionPolicy"
        },
        "etag": {
          "description": "(Optional) The Concurrency Token.",
          "type": "string"
        }
      }
    },
    "ExceptionAction": {
      "description": "The action to take when the exception is triggered",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type discriminator describing a sub-type of ExceptionAction",
          "type": "string"
        }
      },
      "discriminator": "kind"
    },
    "ExceptionPolicy": {
      "description": "A policy that defines actions to execute when exception are triggered.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Id of the exception policy",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "(Optional) The name of the exception policy.",
          "type": "string"
        },
        "exceptionRules": {
          "description": "(Optional) A dictionary collection of exception rules on the exception policy. Key is the Id of each exception rule.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ExceptionRule"
          }
        }
      }
    },
    "ExceptionPolicyCollection": {
      "description": "A paged collection of exception policies.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExceptionPolicyItem"
          }
        },
        "nextLink": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ExceptionPolicyItem": {
      "description": "Paged instance of ExceptionPolicy",
      "type": "object",
      "properties": {
        "exceptionPolicy": {
          "$ref": "#/definitions/ExceptionPolicy"
        },
        "etag": {
          "description": "(Optional) The Concurrency Token.",
          "type": "string"
        }
      }
    },
    "ExceptionRule": {
      "description": "A rule that defines actions to execute upon a specific trigger.",
      "required": [
        "actions",
        "trigger"
      ],
      "type": "object",
      "properties": {
        "trigger": {
          "$ref": "#/definitions/ExceptionTrigger"
        },
        "actions": {
          "description": "A dictionary collection of actions to perform once the exception is triggered. Key is the Id of each exception action.",
          "type": "object",
          "additionalProperties": {
            "description": "The action to take when the exception is triggered"
          }
        }
      }
    },
    "ExceptionTrigger": {
      "description": "The trigger for this exception rule",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type discriminator describing a sub-type of ExceptionTrigger",
          "type": "string"
        }
      },
      "discriminator": "kind"
    },
    "ExpressionRouterRule": {
      "description": "A rule providing inline expression rules.",
      "required": [
        "expression"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RouterRule"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing ExpressionRouterRule",
          "type": "string"
        },
        "language": {
          "description": "The expression language to compile to and execute",
          "enum": [
            "powerFx"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ExpressionRouterRuleLanguage",
            "modelAsString": true
          }
        },
        "expression": {
          "description": "The string containing the expression to evaluate. Should contain return statement with calculated values.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "expression-rule"
    },
    "FunctionRouterRule": {
      "description": "A rule providing a binding to an HTTP Triggered Azure Function.",
      "required": [
        "functionUri"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RouterRule"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing FunctionRouterRule",
          "type": "string"
        },
        "functionUri": {
          "format": "uri",
          "description": "URL for Azure Function",
          "type": "string"
        },
        "credential": {
          "$ref": "#/definitions/FunctionRouterRuleCredential"
        }
      },
      "x-ms-discriminator-value": "azure-function-rule"
    },
    "FunctionRouterRuleCredential": {
      "description": "Credentials used to access Azure function rule",
      "type": "object",
      "properties": {
        "functionKey": {
          "description": "(Optional) Access key scoped to a particular function",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "appKey": {
          "description": "(Optional) Access key scoped to a Azure Function app.\r\nThis key grants access to all functions under the app.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "clientId": {
          "description": "(Optional) Client id, when AppKey is provided\r\nIn context of Azure function, this is usually the name of the key",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "JobMatchingMode": {
      "description": "The matching mode to be applied to this job.\r\n            \r\nSupported types:\r\n            \r\nQueueAndMatchMode: Used when matching worker to a job is required to be done right after job is queued.\r\nScheduleAndSuspendMode: Used for scheduling jobs to be queued at a future time. At specified time, matching of a worker to the job will not start automatically.\r\nSuspendMode: Used when matching workers to a job needs to be suspended.",
      "type": "object",
      "properties": {
        "modeType": {
          "description": "Discriminator value used to differentiate between supported matching mode types.",
          "enum": [
            "queueAndMatchMode",
            "scheduleAndSuspendMode",
            "suspendMode"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "JobMatchModeType",
            "modelAsString": true
          }
        },
        "queueAndMatchMode": {
          "$ref": "#/definitions/QueueAndMatchMode"
        },
        "scheduleAndSuspendMode": {
          "$ref": "#/definitions/ScheduleAndSuspendMode"
        },
        "suspendMode": {
          "$ref": "#/definitions/SuspendMode"
        }
      }
    },
    "LongestIdleMode": {
      "description": "Jobs are directed to the worker who has been idle longest.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DistributionMode"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing LongestIdleMode",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "longest-idle"
    },
    "ManualReclassifyExceptionAction": {
      "description": "An action that manually reclassifies a job by providing the queue, priority and worker selectors.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExceptionAction"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing ManualReclassifyExceptionAction",
          "type": "string"
        },
        "queueId": {
          "description": "Updated QueueId.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "description": "Updated Priority.",
          "type": "integer"
        },
        "workerSelectors": {
          "description": "Updated WorkerSelectors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          }
        }
      },
      "x-ms-discriminator-value": "manual-reclassify"
    },
    "Oauth2ClientCredential": {
      "description": "OAuth2.0 Credentials used to Contoso's Authorization server.\r\nReference: https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/",
      "type": "object",
      "properties": {
        "clientId": {
          "description": "ClientId for Contoso Authorization server.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "clientSecret": {
          "description": "Client secret for Contoso Authorization server.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "PassThroughQueueSelectorAttachment": {
      "description": "Attaches a queue selector where the value is passed through from the job label with the same key",
      "required": [
        "key",
        "labelOperator"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/QueueSelectorAttachment"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing PassThroughQueueSelectorAttachment",
          "type": "string"
        },
        "key": {
          "description": "The label key to query against",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "labelOperator": {
          "description": "Describes how the value of the label is compared to the value pass through",
          "enum": [
            "equal",
            "notEqual",
            "lessThan",
            "lessThanEqual",
            "greaterThan",
            "greaterThanEqual"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LabelOperator",
            "modelAsString": true
          }
        }
      },
      "x-ms-discriminator-value": "pass-through"
    },
    "PassThroughWorkerSelectorAttachment": {
      "description": "Attaches a worker selector where the value is passed through from the job label with the same key",
      "required": [
        "key",
        "labelOperator"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkerSelectorAttachment"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing PassThroughWorkerSelectorAttachment",
          "type": "string"
        },
        "key": {
          "description": "The label key to query against",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "labelOperator": {
          "description": "Describes how the value of the label is compared to the value pass through",
          "enum": [
            "equal",
            "notEqual",
            "lessThan",
            "lessThanEqual",
            "greaterThan",
            "greaterThanEqual"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LabelOperator",
            "modelAsString": true
          }
        },
        "expiresAfterSeconds": {
          "format": "double",
          "description": "Describes how long the attached label selector is valid in seconds.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "pass-through"
    },
    "QueueAndMatchMode": {
      "description": "Describes a matching mode where matching worker to a job is automatically started after job is queued successfully.",
      "type": "object"
    },
    "QueueLengthExceptionTrigger": {
      "description": "Trigger for an exception action on exceeding queue length",
      "required": [
        "threshold"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExceptionTrigger"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing a sub-type of QueueLengthExceptionTrigger",
          "type": "string"
        },
        "threshold": {
          "format": "int32",
          "description": "Threshold of number of jobs ahead in the queue to for this trigger to fire.",
          "type": "integer"
        }
      },
      "x-ms-discriminator-value": "queue-length"
    },
    "QueueSelectorAttachment": {
      "description": "An attachment of queue selectors to resolve a queue to a job from a classification policy",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type discriminator describing the type of queue selector attachment",
          "type": "string"
        }
      },
      "discriminator": "kind"
    },
    "QueueWeightedAllocation": {
      "description": "Contains the weight percentage and queue selectors to be applied if selected for weighted distributions.",
      "required": [
        "queueSelectors",
        "weight"
      ],
      "type": "object",
      "properties": {
        "weight": {
          "format": "double",
          "description": "The percentage of this weight, expressed as a fraction of 1.",
          "type": "number"
        },
        "queueSelectors": {
          "description": "A collection of queue selectors that will be applied if this allocation is selected.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterQueueSelector"
          }
        }
      }
    },
    "ReclassifyExceptionAction": {
      "description": "An action that modifies labels on a job and then reclassifies it",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExceptionAction"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing ReclassifyExceptionAction.",
          "type": "string"
        },
        "classificationPolicyId": {
          "description": "(optional) The new classification policy that will determine queue, priority and worker selectors.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "labelsToUpsert": {
          "description": "(optional) Dictionary containing the labels to update (or add if not existing) in key-value pairs",
          "type": "object",
          "additionalProperties": {}
        }
      },
      "x-ms-discriminator-value": "reclassify"
    },
    "ReclassifyJobRequest": {
      "description": "Request payload for reclassifying jobs",
      "type": "object"
    },
    "ReclassifyJobResult": {
      "description": "Response payload from reclassifying a job",
      "type": "object",
      "properties": {}
    },
    "RoundRobinMode": {
      "description": "Jobs are distributed in order to workers, starting with the worker that is after the last worker to receive a job.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DistributionMode"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing RoundRobinMode",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "round-robin"
    },
    "RouterJob": {
      "description": "A unit of work to be routed",
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the job.",
          "type": "string",
          "readOnly": true
        },
        "channelReference": {
          "description": "Reference to an external parent context, eg. call ID.",
          "type": "string"
        },
        "status": {
          "description": "The status of the Job.",
          "enum": [
            "pendingClassification",
            "queued",
            "assigned",
            "completed",
            "closed",
            "cancelled",
            "classificationFailed",
            "created",
            "pendingSchedule",
            "scheduled",
            "scheduleFailed",
            "waitingForActivation"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "RouterJobStatus",
            "modelAsString": true
          }
        },
        "enqueuedAt": {
          "format": "date-time",
          "description": "The time a job was queued in UTC.",
          "type": "string",
          "readOnly": true
        },
        "channelId": {
          "description": "The channel identifier. eg. voice, chat, etc.",
          "type": "string"
        },
        "classificationPolicyId": {
          "description": "The Id of the Classification policy used for classifying a job.",
          "type": "string"
        },
        "queueId": {
          "description": "The Id of the Queue that this job is queued to.",
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "description": "The priority of this job.",
          "type": "integer"
        },
        "dispositionCode": {
          "description": "Reason code for cancelled or closed jobs.",
          "type": "string"
        },
        "requestedWorkerSelectors": {
          "description": "A collection of manually specified label selectors, which a worker must satisfy in order to process this job.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          }
        },
        "attachedWorkerSelectors": {
          "description": "A collection of label selectors attached by a classification policy, which a worker must satisfy in order to process this job.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          },
          "readOnly": true
        },
        "labels": {
          "description": "A set of key/value pairs that are identifying attributes used by the rules engines to make decisions.",
          "type": "object",
          "additionalProperties": {}
        },
        "assignments": {
          "description": "A collection of the assignments of the job.\r\nKey is AssignmentId.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RouterJobAssignment"
          },
          "readOnly": true
        },
        "tags": {
          "description": "A set of non-identifying attributes attached to this job",
          "type": "object",
          "additionalProperties": {}
        },
        "notes": {
          "description": "Notes attached to a job, sorted by timestamp",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scheduledAt": {
          "format": "date-time",
          "description": "If set, job will be scheduled to be enqueued at a given time",
          "type": "string",
          "readOnly": true
        },
        "matchingMode": {
          "$ref": "#/definitions/JobMatchingMode"
        }
      }
    },
    "RouterJobAssignment": {
      "description": "Assignment details of a job to a worker",
      "required": [
        "assignedAt",
        "assignmentId"
      ],
      "type": "object",
      "properties": {
        "assignmentId": {
          "description": "The Id of the job assignment.",
          "minLength": 1,
          "type": "string"
        },
        "workerId": {
          "description": "The Id of the Worker assigned to the job.",
          "type": "string"
        },
        "assignedAt": {
          "format": "date-time",
          "description": "The assignment time of the job in UTC.",
          "type": "string"
        },
        "completedAt": {
          "format": "date-time",
          "description": "The time the job was marked as completed after being assigned in UTC.",
          "type": "string"
        },
        "closedAt": {
          "format": "date-time",
          "description": "The time the job was marked as closed after being completed in UTC.",
          "type": "string"
        }
      }
    },
    "RouterJobCollection": {
      "description": "A paged collection of jobs.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterJobItem"
          }
        },
        "nextLink": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RouterJobItem": {
      "description": "Paged instance of RouterJob",
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/RouterJob"
        },
        "etag": {
          "description": "(Optional) The Concurrency Token.",
          "type": "string"
        }
      }
    },
    "RouterJobOffer": {
      "description": "An offer of a job to a worker",
      "required": [
        "capacityCost",
        "jobId",
        "offerId"
      ],
      "type": "object",
      "properties": {
        "offerId": {
          "description": "The Id of the offer.",
          "minLength": 1,
          "type": "string"
        },
        "jobId": {
          "description": "The Id of the job.",
          "minLength": 1,
          "type": "string"
        },
        "capacityCost": {
          "format": "int32",
          "description": "The capacity cost consumed by the job offer.",
          "type": "integer"
        },
        "offeredAt": {
          "format": "date-time",
          "description": "The time the offer was created in UTC.",
          "type": "string"
        },
        "expiresAt": {
          "format": "date-time",
          "description": "The time that the offer will expire in UTC.",
          "type": "string"
        }
      }
    },
    "RouterJobPositionDetails": {
      "description": "Position and estimated wait time for a job.",
      "required": [
        "estimatedWaitTimeMinutes",
        "jobId",
        "position",
        "queueId",
        "queueLength"
      ],
      "type": "object",
      "properties": {
        "jobId": {
          "description": "Id of the job these details are about.",
          "minLength": 1,
          "type": "string"
        },
        "position": {
          "format": "int32",
          "description": "Position of the job in question within that queue.",
          "type": "integer"
        },
        "queueId": {
          "description": "Id of the queue this job is enqueued in.",
          "minLength": 1,
          "type": "string"
        },
        "queueLength": {
          "format": "int32",
          "description": "Length of the queue: total number of enqueued jobs.",
          "type": "integer"
        },
        "estimatedWaitTimeMinutes": {
          "format": "double",
          "description": "Estimated wait time of the job rounded up to the nearest minute",
          "type": "number"
        }
      }
    },
    "RouterQueue": {
      "description": "A queue that can contain jobs to be routed.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Id of this queue",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The name of this queue.",
          "type": "string"
        },
        "distributionPolicyId": {
          "description": "The ID of the distribution policy that will determine how a job is distributed to workers.",
          "type": "string"
        },
        "labels": {
          "description": "A set of key/value pairs that are identifying attributes used by the rules engines to make decisions.",
          "type": "object",
          "additionalProperties": {}
        },
        "exceptionPolicyId": {
          "description": "(Optional) The ID of the exception policy that determines various job escalation rules.",
          "type": "string"
        }
      }
    },
    "RouterQueueAssignment": {
      "description": "An assignment of a worker to a queue",
      "type": "object"
    },
    "RouterQueueCollection": {
      "description": "A paged collection of queues.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterQueueItem"
          }
        },
        "nextLink": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RouterQueueItem": {
      "description": "Paged instance of RouterQueue",
      "type": "object",
      "properties": {
        "queue": {
          "$ref": "#/definitions/RouterQueue"
        },
        "etag": {
          "description": "(Optional) The Concurrency Token.",
          "type": "string"
        }
      }
    },
    "RouterQueueSelector": {
      "description": "Describes a condition that must be met against a set of labels for queue selection",
      "required": [
        "key",
        "labelOperator"
      ],
      "type": "object",
      "properties": {
        "key": {
          "description": "The label key to query against",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "labelOperator": {
          "description": "Describes how the value of the label is compared to the value defined on the label selector",
          "enum": [
            "equal",
            "notEqual",
            "lessThan",
            "lessThanEqual",
            "greaterThan",
            "greaterThanEqual"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LabelOperator",
            "modelAsString": true
          }
        },
        "value": {
          "description": "The value to compare against the actual label value with the given operator",
          "type": "object"
        }
      }
    },
    "RouterQueueStatistics": {
      "description": "Statistics for the queue",
      "required": [
        "length",
        "queueId"
      ],
      "type": "object",
      "properties": {
        "queueId": {
          "description": "Id of the queue these details are about.",
          "minLength": 1,
          "type": "string"
        },
        "length": {
          "format": "int32",
          "description": "Length of the queue: total number of enqueued jobs.",
          "type": "integer"
        },
        "estimatedWaitTimeMinutes": {
          "description": "The estimated wait time of this queue rounded up to the nearest minute, grouped by job priority",
          "type": "object",
          "additionalProperties": {
            "format": "double",
            "type": "number"
          }
        },
        "longestJobWaitTimeMinutes": {
          "format": "double",
          "description": "The wait time of the job that has been enqueued in this queue for the longest.",
          "type": "number"
        }
      }
    },
    "RouterRule": {
      "description": "A rule of one of the following types:\r\n            \r\nStaticRule:  A rule providing static rules that always return the same result, regardless of input.\r\nDirectMapRule:  A rule that return the same labels as the input labels.\r\nExpressionRule: A rule providing inline expression rules.\r\nAzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.\r\nWebhookRule: A rule providing a binding to a webserver following OAuth2.0 authentication protocol.",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type discriminator describing a sub-type of Rule",
          "type": "string"
        }
      },
      "discriminator": "kind"
    },
    "RouterWorker": {
      "description": "An entity for jobs to be routed to",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the worker.",
          "type": "string",
          "readOnly": true
        },
        "state": {
          "description": "The current state of the worker.",
          "enum": [
            "active",
            "draining",
            "inactive"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "RouterWorkerState",
            "modelAsString": true
          }
        },
        "queueAssignments": {
          "description": "The queue(s) that this worker can receive work from.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RouterQueueAssignment"
          }
        },
        "totalCapacity": {
          "format": "int32",
          "description": "The total capacity score this worker has to manage multiple concurrent jobs.",
          "type": "integer"
        },
        "labels": {
          "description": "A set of key/value pairs that are identifying attributes used by the rules engines to make decisions.",
          "type": "object",
          "additionalProperties": {}
        },
        "tags": {
          "description": "A set of non-identifying attributes attached to this worker.",
          "type": "object",
          "additionalProperties": {}
        },
        "channelConfigurations": {
          "description": "The channel(s) this worker can handle and their impact on the workers capacity.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ChannelConfiguration"
          }
        },
        "offers": {
          "description": "A list of active offers issued to this worker.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterJobOffer"
          },
          "readOnly": true
        },
        "assignedJobs": {
          "description": "A list of assigned jobs attached to this worker.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterWorkerAssignment"
          },
          "readOnly": true
        },
        "loadRatio": {
          "format": "double",
          "description": "A value indicating the workers capacity. A value of '1' means all capacity is consumed. A value of '0' means no capacity is currently consumed.",
          "type": "number",
          "readOnly": true
        },
        "availableForOffers": {
          "description": "A flag indicating this worker is open to receive offers or not.",
          "type": "boolean"
        }
      }
    },
    "RouterWorkerAssignment": {
      "description": "The assignment for a worker to a job",
      "required": [
        "assignedAt",
        "assignmentId",
        "capacityCost",
        "jobId"
      ],
      "type": "object",
      "properties": {
        "assignmentId": {
          "description": "The Id of the assignment.",
          "minLength": 1,
          "type": "string"
        },
        "jobId": {
          "description": "The Id of the Job assigned.",
          "minLength": 1,
          "type": "string"
        },
        "capacityCost": {
          "format": "int32",
          "description": "The amount of capacity this assignment has consumed on the worker.",
          "type": "integer"
        },
        "assignedAt": {
          "format": "date-time",
          "description": "The assignment time of the job in UTC.",
          "type": "string"
        }
      }
    },
    "RouterWorkerCollection": {
      "description": "A paged collection of workers.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterWorkerItem"
          }
        },
        "nextLink": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RouterWorkerItem": {
      "description": "Paged instance of RouterWorker",
      "type": "object",
      "properties": {
        "worker": {
          "$ref": "#/definitions/RouterWorker"
        },
        "etag": {
          "description": "(Optional) The Concurrency Token.",
          "type": "string"
        }
      }
    },
    "RouterWorkerSelector": {
      "description": "Describes a condition that must be met against a set of labels for worker selection",
      "required": [
        "key",
        "labelOperator"
      ],
      "type": "object",
      "properties": {
        "key": {
          "description": "The label key to query against",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "labelOperator": {
          "description": "Describes how the value of the label is compared to the value defined on the label selector",
          "enum": [
            "equal",
            "notEqual",
            "lessThan",
            "lessThanEqual",
            "greaterThan",
            "greaterThanEqual"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LabelOperator",
            "modelAsString": true
          }
        },
        "value": {
          "description": "The value to compare against the actual label value with the given operator",
          "type": "object"
        },
        "expiresAfterSeconds": {
          "format": "double",
          "description": "Describes how long this label selector is valid in seconds.",
          "type": "number"
        },
        "expedite": {
          "description": "Pushes the job to the front of the queue as long as this selector is active.",
          "type": "boolean"
        },
        "status": {
          "description": "The status of the worker selector.",
          "enum": [
            "active",
            "expired"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "RouterWorkerSelectorStatus",
            "modelAsString": true
          }
        },
        "expiresAt": {
          "format": "date-time",
          "description": "The time at which this worker selector expires in UTC",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RuleEngineQueueSelectorAttachment": {
      "description": "Attaches queue selectors to a job when the RouterRule is resolved",
      "required": [
        "rule"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/QueueSelectorAttachment"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing RuleEngineQueueSelectorAttachment",
          "type": "string"
        },
        "rule": {
          "$ref": "#/definitions/RouterRule"
        }
      },
      "x-ms-discriminator-value": "rule-engine"
    },
    "RuleEngineWorkerSelectorAttachment": {
      "description": "Attaches worker selectors to a job when a RouterRule is resolved",
      "required": [
        "rule"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkerSelectorAttachment"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing RuleEngineWorkerSelectorAttachment",
          "type": "string"
        },
        "rule": {
          "$ref": "#/definitions/RouterRule"
        }
      },
      "x-ms-discriminator-value": "rule-engine"
    },
    "ScheduleAndSuspendMode": {
      "description": "Describes a matching mode used for scheduling jobs to be queued at a future time.\r\nAt the specified time, matching worker to a job will not start automatically.",
      "type": "object",
      "properties": {
        "scheduleAt": {
          "format": "date-time",
          "description": "Scheduled time.",
          "type": "string"
        }
      }
    },
    "ScoringRuleOptions": {
      "description": "Encapsulates all options that can be passed as parameters for scoring rule with BestWorkerMode",
      "type": "object",
      "properties": {
        "batchSize": {
          "format": "int32",
          "description": "(Optional) Set batch size when AllowScoringBatchOfWorkers is set to true. Defaults to 20 if not configured.",
          "type": "integer"
        },
        "scoringParameters": {
          "description": "(Optional) List of extra parameters from the job that will be sent as part of the payload to scoring rule.\r\nIf not set, the job's labels (sent in the payload as `job`) and the job's worker selectors (sent in the payload as `selectors`)\r\nare added to the payload of the scoring rule by default.\r\nNote: Worker labels are always sent with scoring payload.",
          "type": "array",
          "items": {
            "description": "Supported parameters for scoring workers",
            "enum": [
              "jobLabels",
              "workerSelectors"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ScoringRuleParameterSelector",
              "modelAsString": true
            }
          }
        },
        "allowScoringBatchOfWorkers": {
          "description": "(Optional)\r\nIf set to true, will score workers in batches, and the parameter name of the worker labels will be sent as `workers`.\r\nBy default, set to false and the parameter name for the worker labels will be sent as `worker`.\r\nNote: If enabled, use BatchSize to set batch size.",
          "type": "boolean"
        },
        "descendingOrder": {
          "description": "(Optional)\r\nIf false, will sort scores by ascending order. By default, set to true.",
          "type": "boolean"
        }
      }
    },
    "StaticQueueSelectorAttachment": {
      "description": "Describes a queue selector that will be attached to the job",
      "required": [
        "queueSelector"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/QueueSelectorAttachment"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing StaticQueueSelectorAttachment",
          "type": "string"
        },
        "queueSelector": {
          "$ref": "#/definitions/RouterQueueSelector"
        }
      },
      "x-ms-discriminator-value": "static"
    },
    "StaticRouterRule": {
      "description": "A rule providing static rules that always return the same result, regardless of input.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RouterRule"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing StaticRouterRule",
          "type": "string"
        },
        "value": {
          "description": "The static value this rule always returns.",
          "maxLength": 500,
          "minLength": 0,
          "type": "object"
        }
      },
      "x-ms-discriminator-value": "static-rule"
    },
    "StaticWorkerSelectorAttachment": {
      "description": "Describes a worker selector that will be attached to the job",
      "required": [
        "workerSelector"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkerSelectorAttachment"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing StaticWorkerSelectorAttachment",
          "type": "string"
        },
        "workerSelector": {
          "$ref": "#/definitions/RouterWorkerSelector"
        }
      },
      "x-ms-discriminator-value": "static"
    },
    "SuspendMode": {
      "description": "Describes a matching mode where matching worker to a job is suspended.",
      "type": "object"
    },
    "UnassignJobRequest": {
      "description": "Request payload for unassigning a job.",
      "type": "object",
      "properties": {
        "suspendMatching": {
          "description": "If SuspendMatching is true, then the job is not queued for re-matching with a worker.",
          "type": "boolean"
        }
      }
    },
    "UnassignJobResult": {
      "description": "Response payload after a job has been successfully unassigned.",
      "required": [
        "jobId",
        "unassignmentCount"
      ],
      "type": "object",
      "properties": {
        "jobId": {
          "description": "The Id of the job unassigned.",
          "minLength": 1,
          "type": "string"
        },
        "unassignmentCount": {
          "format": "int32",
          "description": "The number of times a job is unassigned. At a maximum 3.",
          "type": "integer"
        }
      }
    },
    "WaitTimeExceptionTrigger": {
      "description": "Trigger for an exception action on exceeding wait time",
      "required": [
        "thresholdSeconds"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExceptionTrigger"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing a sub-type of WaitTimeExceptionTrigger",
          "type": "string"
        },
        "thresholdSeconds": {
          "format": "double",
          "description": "Threshold for wait time for this trigger.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "wait-time"
    },
    "WebhookRouterRule": {
      "description": "A rule providing a binding to an external web server.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RouterRule"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing WebhookRouterRule",
          "type": "string"
        },
        "authorizationServerUri": {
          "format": "uri",
          "description": "Uri for Authorization Server.",
          "type": "string"
        },
        "clientCredential": {
          "$ref": "#/definitions/Oauth2ClientCredential"
        },
        "webhookUri": {
          "format": "uri",
          "description": "Uri for Contoso's Web Server.",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "webhook-rule"
    },
    "WeightedAllocationQueueSelectorAttachment": {
      "description": "Describes multiple sets of queue selectors, of which one will be selected and attached according to a weighting",
      "required": [
        "allocations"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/QueueSelectorAttachment"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing WeightedAllocationQueueSelectorAttachment",
          "type": "string"
        },
        "allocations": {
          "description": "A collection of percentage based weighted allocations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueueWeightedAllocation"
          }
        }
      },
      "x-ms-discriminator-value": "weighted-allocation-queue-selector"
    },
    "WeightedAllocationWorkerSelectorAttachment": {
      "description": "Describes multiple sets of worker selectors, of which one will be selected and attached according to a weighting",
      "required": [
        "allocations"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/WorkerSelectorAttachment"
        }
      ],
      "properties": {
        "kind": {
          "description": "The type discriminator describing WeightedAllocationWorkerSelectorAttachment",
          "type": "string"
        },
        "allocations": {
          "description": "A collection of percentage based weighted allocations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkerWeightedAllocation"
          }
        }
      },
      "x-ms-discriminator-value": "weighted-allocation-worker-selector"
    },
    "WorkerSelectorAttachment": {
      "description": "An attachment which attaches worker selectors to a job",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type discriminator describing the type of worker selector attachment",
          "type": "string"
        }
      },
      "discriminator": "kind"
    },
    "WorkerWeightedAllocation": {
      "description": "Contains the weight percentage and worker selectors to be applied if selected for weighted distributions.",
      "required": [
        "weight",
        "workerSelectors"
      ],
      "type": "object",
      "properties": {
        "weight": {
          "format": "double",
          "description": "The percentage of this weight, expressed as a fraction of 1.",
          "type": "number"
        },
        "workerSelectors": {
          "description": "A collection of worker selectors that will be applied if this allocation is selected.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouterWorkerSelector"
          }
        }
      }
    }
  },
  "parameters": {
    "ApiVersionParameter": {
      "in": "query",
      "name": "api-version",
      "description": "Version of API to invoke.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Endpoint": {
      "in": "path",
      "name": "endpoint",
      "description": "The endpoint of the Azure Communication resource.",
      "required": true,
      "type": "string",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "client"
    }
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  }
}
