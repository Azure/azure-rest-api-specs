{
  "swagger": "2.0",
  "info": {
    "title": "CommunicationMessagesClient",
    "version": "2025-04-01-preview",
    "description": "Azure Communication Messages Service",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "The communication resource, for example https://my-resource.communication.azure.com",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "AadOauth2Auth": [
        "https://communication.azure.com/.default"
      ]
    },
    {
      "ApiKeyAuth": []
    }
  ],
  "securityDefinitions": {
    "AadOauth2Auth": {
      "type": "oauth2",
      "description": "The Azure Active Directory OAuth2 Flow",
      "flow": "accessCode",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "https://communication.azure.com/.default": ""
      },
      "tokenUrl": "https://login.microsoftonline.com/common/oauth2/token"
    },
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "Template"
    },
    {
      "name": "Notifications"
    },
    {
      "name": "Stream"
    },
    {
      "name": "ConversationAdministration"
    },
    {
      "name": "ConversationThread"
    }
  ],
  "paths": {
    "/messages/channels/{channelId}/templates": {
      "get": {
        "operationId": "TemplateOperations_ListTemplates",
        "tags": [
          "Template"
        ],
        "description": "List all templates for given Azure Communication Services channel",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The registration ID of the channel.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "Number of objects to return per page.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedMessageTemplateItem"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Gets a list of templates": {
            "$ref": "./examples/Template_ListTemplates.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/messages/conversations": {
      "get": {
        "operationId": "ConversationThreadOperations_ListConversations",
        "tags": [
          "ConversationThread"
        ],
        "description": "Retrieves list of conversations.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "Number of objects to return per page.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "participantId",
            "in": "query",
            "description": "The participant user ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "The id of channel",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedConversation"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Retrieves list of conversations": {
            "$ref": "./examples/ConversationThread_ListConversations.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "operationId": "ConversationAdministrationOperations_CreateConversation",
        "tags": [
          "ConversationAdministration"
        ],
        "description": "Creates a new conversation. This is only for create operation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateConversationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/CommunicationConversation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Creates a new conversation": {
            "$ref": "./examples/ConversationAdministration_CreateConversation.json"
          }
        }
      }
    },
    "/messages/conversations/{conversationId}": {
      "get": {
        "operationId": "ConversationAdministrationOperations_GetConversation",
        "tags": [
          "ConversationAdministration"
        ],
        "description": "Gets the details of a specific conversation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CommunicationConversation"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Gets the details of a specific conversation": {
            "$ref": "./examples/ConversationAdministration_GetConversation.json"
          }
        }
      },
      "delete": {
        "operationId": "ConversationAdministrationOperations_DeleteConversation",
        "tags": [
          "ConversationAdministration"
        ],
        "description": "Deletes a specific conversation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "Repeatability-Result": {
                "type": "string",
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": false,
                  "values": [
                    {
                      "name": "accepted",
                      "value": "accepted",
                      "description": "If the request was accepted and the server guarantees that the server state reflects a single execution of the operation."
                    },
                    {
                      "name": "rejected",
                      "value": "rejected",
                      "description": "If the request was rejected because the combination of Repeatability-First-Sent and Repeatability-Request-ID were invalid\nor because the Repeatability-First-Sent value was outside the range of values held by the server."
                    }
                  ]
                }
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Deletes a specific conversation": {
            "$ref": "./examples/ConversationAdministration_DeleteConversation.json"
          }
        }
      }
    },
    "/messages/conversations/{conversationId}:terminate": {
      "post": {
        "operationId": "ConversationAdministrationOperations_TerminateConversation",
        "tags": [
          "ConversationAdministration"
        ],
        "description": "Terminates a specific conversation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "Repeatability-Result": {
                "type": "string",
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": false,
                  "values": [
                    {
                      "name": "accepted",
                      "value": "accepted",
                      "description": "If the request was accepted and the server guarantees that the server state reflects a single execution of the operation."
                    },
                    {
                      "name": "rejected",
                      "value": "rejected",
                      "description": "If the request was rejected because the combination of Repeatability-First-Sent and Repeatability-Request-ID were invalid\nor because the Repeatability-First-Sent value was outside the range of values held by the server."
                    }
                  ]
                }
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Terminates a specific conversation": {
            "$ref": "./examples/ConversationAdministration_TerminateConversation.json"
          }
        }
      }
    },
    "/messages/conversations/{conversationId}:analyze": {
      "post": {
        "operationId": "ConversationThreadOperations_AnalyzeConversation",
        "tags": [
          "ConversationThread"
        ],
        "description": "Get AI Analysis of a conversation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/GetConversationThreadAnalysisResult"
            },
            "headers": {
              "Repeatability-Result": {
                "type": "string",
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": false,
                  "values": [
                    {
                      "name": "accepted",
                      "value": "accepted",
                      "description": "If the request was accepted and the server guarantees that the server state reflects a single execution of the operation."
                    },
                    {
                      "name": "rejected",
                      "value": "rejected",
                      "description": "If the request was rejected because the combination of Repeatability-First-Sent and Repeatability-Request-ID were invalid\nor because the Repeatability-First-Sent value was outside the range of values held by the server."
                    }
                  ]
                }
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Get AI Analysis of a conversation": {
            "$ref": "./examples/ConversationThread_AnalyzeConversation.json"
          }
        }
      }
    },
    "/messages/conversations/{conversationId}/messages": {
      "get": {
        "operationId": "ConversationThreadOperations_ListMessages",
        "tags": [
          "ConversationThread"
        ],
        "description": "Retrieves list of conversation messages.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "Number of objects to return per page.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "participantId",
            "in": "query",
            "description": "The participant user ID",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedConversationMessageItem"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Retrieves list of conversation messages": {
            "$ref": "./examples/ConversationThread_ListMessages.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/messages/conversations/{conversationId}/messages:send": {
      "post": {
        "operationId": "ConversationThreadOperations_SendMessage",
        "tags": [
          "ConversationThread"
        ],
        "description": "Sends a conversation message from Business to User.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "$ref": "#/parameters/ConversationThreadSendRequestBody"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SendConversationMessageResult"
            },
            "headers": {
              "Repeatability-Result": {
                "type": "string",
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": false,
                  "values": [
                    {
                      "name": "accepted",
                      "value": "accepted",
                      "description": "If the request was accepted and the server guarantees that the server state reflects a single execution of the operation."
                    },
                    {
                      "name": "rejected",
                      "value": "rejected",
                      "description": "If the request was rejected because the combination of Repeatability-First-Sent and Repeatability-Request-ID were invalid\nor because the Repeatability-First-Sent value was outside the range of values held by the server."
                    }
                  ]
                }
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Sends a conversation message from Business to User": {
            "$ref": "./examples/ConversationThread_SendMessage.json"
          }
        }
      }
    },
    "/messages/conversations/{conversationId}/participants:add": {
      "post": {
        "operationId": "ConversationThreadOperations_AddParticipants",
        "tags": [
          "ConversationThread"
        ],
        "description": "Adds participants to a specific conversation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "$ref": "#/parameters/AddParticipantsRequestBody"
          }
        ],
        "responses": {
          "207": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/AddParticipantsResult"
            },
            "headers": {
              "Repeatability-Result": {
                "type": "string",
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": false,
                  "values": [
                    {
                      "name": "accepted",
                      "value": "accepted",
                      "description": "If the request was accepted and the server guarantees that the server state reflects a single execution of the operation."
                    },
                    {
                      "name": "rejected",
                      "value": "rejected",
                      "description": "If the request was rejected because the combination of Repeatability-First-Sent and Repeatability-Request-ID were invalid\nor because the Repeatability-First-Sent value was outside the range of values held by the server."
                    }
                  ]
                }
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Adds participants to a specific conversation": {
            "$ref": "./examples/ConversationThread_AddParticipants.json"
          }
        }
      }
    },
    "/messages/conversations/{conversationId}/participants:remove": {
      "post": {
        "operationId": "ConversationThreadOperations_RemoveParticipants",
        "tags": [
          "ConversationThread"
        ],
        "description": "remove a participant from a conversation",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "$ref": "#/parameters/RemoveParticipantsRequestBody"
          }
        ],
        "responses": {
          "207": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/RemoveParticipantsResult"
            },
            "headers": {
              "Repeatability-Result": {
                "type": "string",
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": false,
                  "values": [
                    {
                      "name": "accepted",
                      "value": "accepted",
                      "description": "If the request was accepted and the server guarantees that the server state reflects a single execution of the operation."
                    },
                    {
                      "name": "rejected",
                      "value": "rejected",
                      "description": "If the request was rejected because the combination of Repeatability-First-Sent and Repeatability-Request-ID were invalid\nor because the Repeatability-First-Sent value was outside the range of values held by the server."
                    }
                  ]
                }
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "remove a participant from a conversation": {
            "$ref": "./examples/ConversationThread_RemoveParticipants.json"
          }
        }
      }
    },
    "/messages/notifications:send": {
      "post": {
        "operationId": "NotificationMessagesOperations_Send",
        "tags": [
          "Notifications"
        ],
        "description": "Sends a notification message from Business to User.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "$ref": "#/parameters/NotificationMessagesSendRequestBody"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "$ref": "#/definitions/SendMessageResult"
            },
            "headers": {
              "Repeatability-Result": {
                "type": "string",
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": false,
                  "values": [
                    {
                      "name": "accepted",
                      "value": "accepted",
                      "description": "If the request was accepted and the server guarantees that the server state reflects a single execution of the operation."
                    },
                    {
                      "name": "rejected",
                      "value": "rejected",
                      "description": "If the request was rejected because the combination of Repeatability-First-Sent and Repeatability-Request-ID were invalid\nor because the Repeatability-First-Sent value was outside the range of values held by the server."
                    }
                  ]
                }
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Sends a notification message - Interactive Button": {
            "$ref": "./examples/NotificationMessages_SendButtonInteractiveMessage.json"
          },
          "Sends a notification message - Interactive List": {
            "$ref": "./examples/NotificationMessages_SendListInteractiveMessage.json"
          },
          "Sends a notification message - Interactive Url": {
            "$ref": "./examples/NotificationMessages_SendUrlInteractiveMessage.json"
          },
          "Sends a notification message - Reaction": {
            "$ref": "./examples/NotificationMessages_SendReaction.json"
          },
          "Sends a notification message - Sticker": {
            "$ref": "./examples/NotificationMessages_SendSticker.json"
          },
          "Sends a notification message - Template": {
            "$ref": "./examples/NotificationMessages_SendTemplate.json"
          },
          "Sends a notification message - audio": {
            "$ref": "./examples/NotificationMessages_SendAudio.json"
          },
          "Sends a notification message - document": {
            "$ref": "./examples/NotificationMessages_SendDocument.json"
          },
          "Sends a notification message - image": {
            "$ref": "./examples/NotificationMessages_SendImage.json"
          },
          "Sends a notification message - text": {
            "$ref": "./examples/NotificationMessages_SendText.json"
          },
          "Sends a notification message - video": {
            "$ref": "./examples/NotificationMessages_SendVideo.json"
          }
        }
      }
    },
    "/messages/streams/{id}": {
      "get": {
        "operationId": "StreamOperations_GetMedia",
        "tags": [
          "Stream"
        ],
        "description": "Download the Media payload from a User to Business message.",
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The stream ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "file"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "Download media": {
            "$ref": "./examples/Stream_GetMedia.json"
          }
        }
      }
    }
  },
  "definitions": {
    "ActionBindings": {
      "type": "object",
      "description": "Binding actions to the interactive message.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/MessageActionBindingKind",
          "description": "Kind of the MessageActionBinding."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "ActionGroup": {
      "type": "object",
      "description": "The Action Group content.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the ActionGroup."
        },
        "items": {
          "type": "array",
          "description": "Array of items in ActionGroup.",
          "items": {
            "$ref": "#/definitions/ActionGroupItem"
          }
        }
      },
      "required": [
        "title",
        "items"
      ]
    },
    "ActionGroupContent": {
      "type": "object",
      "description": "The action content of type ActionGroup.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the actionGroup content."
        },
        "groups": {
          "type": "array",
          "description": "Set or group of actions.",
          "items": {
            "$ref": "#/definitions/ActionGroup"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "title",
        "groups"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "group"
    },
    "ActionGroupItem": {
      "type": "object",
      "description": "The Action group item in the content.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the Item."
        },
        "title": {
          "type": "string",
          "description": "Title of the Item."
        },
        "description": {
          "type": "string",
          "description": "Description of the Item."
        }
      },
      "required": [
        "id",
        "title",
        "description"
      ]
    },
    "AddParticipantsOptions": {
      "type": "object",
      "description": "Request payload for adding participants to a conversation.",
      "properties": {
        "participants": {
          "type": "array",
          "description": "List of participants to add.",
          "items": {
            "$ref": "#/definitions/ConversationParticipant"
          }
        }
      },
      "required": [
        "participants"
      ]
    },
    "AddParticipantsResult": {
      "type": "object",
      "description": "Response for the add participants operation.",
      "properties": {
        "invalidParticipants": {
          "type": "array",
          "description": "List of Ids with Errors if failed to be added",
          "items": {
            "$ref": "#/definitions/UpdateParticipantsResult"
          }
        }
      },
      "required": [
        "invalidParticipants"
      ]
    },
    "AudioConversationMessageContent": {
      "type": "object",
      "description": "A request to send an audio conversation message.",
      "properties": {
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "A media url for the file. Required if the type is one of the supported media types, e.g. image"
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ConversationMessageContent"
        }
      ],
      "x-ms-discriminator-value": "audio"
    },
    "AudioNotificationContent": {
      "type": "object",
      "description": "A request to send an audio notification.",
      "properties": {
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "A media url for the file. Required if the type is one of the supported media types, e.g. image"
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/NotificationContent"
        }
      ],
      "x-ms-discriminator-value": "audio"
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md#handling-errors.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "Azure.Core.uuid": {
      "type": "string",
      "format": "uuid",
      "description": "Universally Unique Identifier"
    },
    "BotContact": {
      "type": "object",
      "description": "Bot Contact.",
      "properties": {
        "botAppId": {
          "type": "string",
          "description": "Bot App Id of the Bot Contact."
        }
      },
      "required": [
        "botAppId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Contact"
        }
      ],
      "x-ms-discriminator-value": "bot"
    },
    "ButtonContent": {
      "type": "object",
      "description": "The message content of type Button information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Id of the button content."
        },
        "title": {
          "type": "string",
          "description": "Title of the button content."
        }
      },
      "required": [
        "id",
        "title"
      ]
    },
    "ButtonSetContent": {
      "type": "object",
      "description": "The message content of type ButtonSet/ List of buttons information.",
      "properties": {
        "buttons": {
          "type": "array",
          "description": "Unique Id of the button content.",
          "items": {
            "$ref": "#/definitions/ButtonContent"
          }
        }
      },
      "required": [
        "buttons"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "buttonSet"
    },
    "CommunicationContact": {
      "type": "object",
      "description": "Communication Contact.",
      "allOf": [
        {
          "$ref": "#/definitions/Contact"
        }
      ],
      "x-ms-discriminator-value": "communication"
    },
    "CommunicationConversation": {
      "type": "object",
      "description": "A conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The conversation ID.",
          "readOnly": true
        },
        "topic": {
          "type": "string",
          "description": "The conversation topic."
        },
        "deliveryChannelIds": {
          "type": "array",
          "description": "List of delivery channel IDs.",
          "items": {
            "type": "string"
          }
        },
        "outboundDeliveryStrategy": {
          "$ref": "#/definitions/OutboundDeliveryStrategyKind",
          "description": "Outbound delivery strategy for the conversation."
        },
        "participants": {
          "type": "array",
          "description": "List of participants involved in the conversation.",
          "items": {
            "$ref": "#/definitions/ConversationParticipant"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "CommunicationMessageKind": {
      "type": "string",
      "description": "The type of message.",
      "enum": [
        "text",
        "image",
        "image_v0",
        "document",
        "video",
        "audio",
        "template",
        "sticker",
        "reaction",
        "interactive"
      ],
      "x-ms-enum": {
        "name": "CommunicationMessageKind",
        "modelAsString": true,
        "values": [
          {
            "name": "text",
            "value": "text",
            "description": "Text message type."
          },
          {
            "name": "image",
            "value": "image",
            "description": "Image message type."
          },
          {
            "name": "image_v0",
            "value": "image_v0",
            "description": "Image message type. Legacy image type for `MediaNotificationContent` which is being deprecated"
          },
          {
            "name": "document",
            "value": "document",
            "description": "Document message type."
          },
          {
            "name": "video",
            "value": "video",
            "description": "Video message type."
          },
          {
            "name": "audio",
            "value": "audio",
            "description": "Audio message type."
          },
          {
            "name": "template",
            "value": "template",
            "description": "Template message type."
          },
          {
            "name": "sticker",
            "value": "sticker",
            "description": "Sticker message type."
          },
          {
            "name": "reaction",
            "value": "reaction",
            "description": "Reaction message type."
          },
          {
            "name": "interactive",
            "value": "interactive",
            "description": "Interactive Actionable message type."
          }
        ]
      }
    },
    "CommunicationMessagesChannel": {
      "type": "string",
      "description": "The type of the communication messages channel.",
      "enum": [
        "whatsApp"
      ],
      "x-ms-enum": {
        "name": "CommunicationMessagesChannel",
        "modelAsString": true,
        "values": [
          {
            "name": "whatsApp",
            "value": "whatsApp",
            "description": "The WhatsApp communication messages channel type."
          }
        ]
      }
    },
    "Contact": {
      "type": "object",
      "description": "Details of an external platform contact.",
      "properties": {
        "id": {
          "type": "string",
          "description": "External platform identifier."
        },
        "kind": {
          "$ref": "#/definitions/MessagePlatformKind",
          "description": "Type of message platform (e.g., WhatsApp)."
        }
      },
      "discriminator": "kind",
      "required": [
        "id",
        "kind"
      ]
    },
    "ConversationMessageContent": {
      "type": "object",
      "description": "Details of the conversation message content.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/CommunicationMessageKind",
          "description": "The type discriminator describing a message type."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "ConversationMessageItem": {
      "type": "object",
      "description": "The conversation message as returned from the service.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Message ID.",
          "readOnly": true
        },
        "sequenceId": {
          "type": "integer",
          "format": "int64",
          "description": "Message sequence ID."
        },
        "message": {
          "$ref": "#/definitions/ConversationMessageContent",
          "description": "Payload of a threaded conversation message."
        },
        "senderDisplayName": {
          "type": "string",
          "description": "The display name of the message sender."
        },
        "senderCommunicationIdentifier": {
          "type": "string",
          "description": "The communication identifier of the message sender."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the message is sent."
        }
      },
      "required": [
        "id",
        "message",
        "senderCommunicationIdentifier",
        "createdOn"
      ]
    },
    "ConversationParticipant": {
      "type": "object",
      "description": "Advanced Messaging conversation participant.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Participant Identifier.",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "Participant display name."
        },
        "kind": {
          "$ref": "#/definitions/ParticipantKind",
          "description": "The type discriminator describing a participant type."
        }
      },
      "discriminator": "kind",
      "required": [
        "id",
        "kind"
      ]
    },
    "CreateConversationRequest": {
      "type": "object",
      "description": "Request payload for creating a conversation.",
      "properties": {
        "conversation": {
          "$ref": "#/definitions/CommunicationConversation",
          "description": "The conversation details.",
          "x-ms-mutability": [
            "create"
          ]
        },
        "initialMessage": {
          "$ref": "#/definitions/Message",
          "description": "An initial message within the conversation."
        }
      },
      "required": [
        "conversation"
      ]
    },
    "DocumentConversationMessageContent": {
      "type": "object",
      "description": "A request to send a document conversation message.",
      "properties": {
        "caption": {
          "type": "string",
          "description": "Optional text content."
        },
        "fileName": {
          "type": "string",
          "description": "Optional name for the file."
        },
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "A media url for the file. Required if the type is one of the supported media types, e.g. image"
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ConversationMessageContent"
        }
      ],
      "x-ms-discriminator-value": "document"
    },
    "DocumentMessageContent": {
      "type": "object",
      "description": "The message content of type document information.",
      "properties": {
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "MediaUri of the media content."
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "document"
    },
    "DocumentNotificationContent": {
      "type": "object",
      "description": "A request to send a document notification.",
      "properties": {
        "caption": {
          "type": "string",
          "description": "Optional text content."
        },
        "fileName": {
          "type": "string",
          "description": "Optional name for the file."
        },
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "A media url for the file. Required if the type is one of the supported media types, e.g. image"
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/NotificationContent"
        }
      ],
      "x-ms-discriminator-value": "document"
    },
    "ExternalConversationParticipant": {
      "type": "object",
      "description": "External conversation participant.",
      "properties": {
        "contacts": {
          "type": "array",
          "description": "List of external platform identifiers for the participant.",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        }
      },
      "required": [
        "contacts"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ConversationParticipant"
        }
      ],
      "x-ms-discriminator-value": "external"
    },
    "GetConversationThreadAnalysisResult": {
      "type": "object",
      "description": "Result of the get conversation messages AI Analysis operation.",
      "properties": {
        "summary": {
          "type": "string",
          "description": "The AI summary of the conversation messages."
        }
      },
      "required": [
        "summary"
      ]
    },
    "ImageConversationMessageContent": {
      "type": "object",
      "description": "A request to send an image conversation message.",
      "properties": {
        "caption": {
          "type": "string",
          "description": "Optional text content."
        },
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "A media url for the file. Required if the type is one of the supported media types, e.g. image"
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ConversationMessageContent"
        }
      ],
      "x-ms-discriminator-value": "image"
    },
    "ImageMessageContent": {
      "type": "object",
      "description": "The message content of type image information.",
      "properties": {
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "MediaUri of the media content."
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "image"
    },
    "ImageNotificationContent": {
      "type": "object",
      "description": "A request to send an image notification.",
      "properties": {
        "caption": {
          "type": "string",
          "description": "Optional text content."
        },
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "A media url for the file. Required if the type is one of the supported media types, e.g. image"
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/NotificationContent"
        }
      ],
      "x-ms-discriminator-value": "image"
    },
    "InteractiveMessage": {
      "type": "object",
      "description": "The Interactive message content to which user can read and respond.",
      "properties": {
        "header": {
          "$ref": "#/definitions/MessageContent",
          "description": "Gets or Sets Header content. Supports the following types:text, images etc."
        },
        "body": {
          "$ref": "#/definitions/TextMessageContent",
          "description": "Gets or Sets Message body content. Emojis, markdown, and links are supported."
        },
        "footer": {
          "$ref": "#/definitions/TextMessageContent",
          "description": "Gets or Sets Message footer content. Emojis, markdown, and links are supported."
        },
        "action": {
          "$ref": "#/definitions/ActionBindings",
          "description": "The binding object to get or set Action which describes options user have to respond to message."
        }
      },
      "required": [
        "body",
        "action"
      ]
    },
    "InteractiveNotificationContent": {
      "type": "object",
      "description": "A request to send an Interactive message notification.",
      "properties": {
        "interactiveMessage": {
          "$ref": "#/definitions/InteractiveMessage",
          "description": "The interactive message content."
        }
      },
      "required": [
        "interactiveMessage"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/NotificationContent"
        }
      ],
      "x-ms-discriminator-value": "interactive"
    },
    "InternalConversationParticipant": {
      "type": "object",
      "description": "Internal conversation participant.",
      "properties": {
        "contact": {
          "$ref": "#/definitions/Contact",
          "description": "The internal platform identifiers for the participant."
        }
      },
      "required": [
        "contact"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ConversationParticipant"
        }
      ],
      "x-ms-discriminator-value": "internal"
    },
    "LinkContent": {
      "type": "object",
      "description": "The message content of type Url information.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the url content."
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The url in the content."
        }
      },
      "required": [
        "title",
        "url"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "url"
    },
    "MediaNotificationContent": {
      "type": "object",
      "description": "@deprecated A request to send an image notification.",
      "properties": {
        "content": {
          "type": "string",
          "description": "Optional text content."
        },
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "A media url for the file. Required if the type is one of the supported media types, e.g. image"
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/NotificationContent"
        }
      ],
      "x-ms-discriminator-value": "image_v0"
    },
    "Message": {
      "type": "object",
      "description": "Details of a message.",
      "properties": {
        "content": {
          "type": "string",
          "description": "Content of the message."
        }
      },
      "required": [
        "content"
      ]
    },
    "MessageActionBindingKind": {
      "type": "string",
      "description": "The Kind of interactive message channel action binding like WhatsAppListAction.",
      "enum": [
        "whatsAppListAction",
        "whatsAppButtonAction",
        "whatsAppUrlAction"
      ],
      "x-ms-enum": {
        "name": "MessageActionBindingKind",
        "modelAsString": true,
        "values": [
          {
            "name": "whatsAppListAction",
            "value": "whatsAppListAction",
            "description": "The WhatsApp List action binding kind."
          },
          {
            "name": "whatsAppButtonAction",
            "value": "whatsAppButtonAction",
            "description": "The WhatsApp Button action binding kind."
          },
          {
            "name": "whatsAppUrlAction",
            "value": "whatsAppUrlAction",
            "description": "The WhatsApp Url action binding kind."
          }
        ]
      }
    },
    "MessageContent": {
      "type": "object",
      "description": "The message content object used to create interactive messages components.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/MessageContentKind",
          "description": "Kind of MessageContent."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "MessageContentKind": {
      "type": "string",
      "description": "The kind of Interactive message content.",
      "enum": [
        "text",
        "image",
        "video",
        "document",
        "group",
        "buttonSet",
        "url"
      ],
      "x-ms-enum": {
        "name": "MessageContentKind",
        "modelAsString": true,
        "values": [
          {
            "name": "text",
            "value": "text",
            "description": "The text content type."
          },
          {
            "name": "image",
            "value": "image",
            "description": "The image content type."
          },
          {
            "name": "video",
            "value": "video",
            "description": "The video content type."
          },
          {
            "name": "document",
            "value": "document",
            "description": "The document content type."
          },
          {
            "name": "group",
            "value": "group",
            "description": "The ActionSet content type."
          },
          {
            "name": "buttonSet",
            "value": "buttonSet",
            "description": "The ButtonSet content type."
          },
          {
            "name": "url",
            "value": "url",
            "description": "The Url content type."
          }
        ]
      }
    },
    "MessagePlatformKind": {
      "type": "string",
      "description": "Defines the type of message platform.",
      "enum": [
        "communication",
        "bot",
        "whatsApp"
      ],
      "x-ms-enum": {
        "name": "MessagePlatformKind",
        "modelAsString": true,
        "values": [
          {
            "name": "communication",
            "value": "communication",
            "description": "Azure Communication platform."
          },
          {
            "name": "bot",
            "value": "bot",
            "description": "Bot platform."
          },
          {
            "name": "whatsApp",
            "value": "whatsApp",
            "description": "WhatsApp platform."
          }
        ]
      }
    },
    "MessageReceipt": {
      "type": "object",
      "description": "Receipt of the sending one message.",
      "properties": {
        "messageId": {
          "type": "string",
          "description": "The message id."
        },
        "to": {
          "type": "string",
          "description": "The native external platform user identifier of the recipient."
        }
      },
      "required": [
        "messageId",
        "to"
      ]
    },
    "MessageTemplate": {
      "type": "object",
      "description": "The template object used to create templates.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the template."
        },
        "language": {
          "type": "string",
          "description": "The template's language, in the ISO 639 format, consist of a two-letter language code followed by an optional two-letter country code, e.g., 'en' or 'en_US'."
        },
        "values": {
          "type": "array",
          "description": "The template values.",
          "items": {
            "$ref": "#/definitions/MessageTemplateValue"
          },
          "x-ms-identifiers": []
        },
        "bindings": {
          "$ref": "#/definitions/MessageTemplateBindings",
          "description": "The binding object to link values to the template specific locations"
        }
      },
      "required": [
        "name",
        "language"
      ]
    },
    "MessageTemplateBindings": {
      "type": "object",
      "description": "The binding object to link values to the template specific locations",
      "properties": {
        "kind": {
          "$ref": "#/definitions/MessageTemplateBindingsKind",
          "description": "The type discriminator describing a template bindings type."
        }
      },
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "MessageTemplateBindingsKind": {
      "type": "string",
      "description": "The type of the message template.",
      "enum": [
        "whatsApp"
      ],
      "x-ms-enum": {
        "name": "MessageTemplateBindingsKind",
        "modelAsString": true,
        "values": [
          {
            "name": "whatsApp",
            "value": "whatsApp",
            "description": "The WhatsApp template type."
          }
        ]
      }
    },
    "MessageTemplateDocument": {
      "type": "object",
      "description": "The message template's document value information.",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The (public) URL of the media."
        },
        "caption": {
          "type": "string",
          "description": "The [optional] caption of the media object."
        },
        "fileName": {
          "type": "string",
          "description": "The [optional] filename of the media file."
        }
      },
      "required": [
        "url"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageTemplateValue"
        }
      ],
      "x-ms-discriminator-value": "document"
    },
    "MessageTemplateImage": {
      "type": "object",
      "description": "The message template's image value information.",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The (public) URL of the media."
        },
        "caption": {
          "type": "string",
          "description": "The [optional] caption of the media object."
        },
        "fileName": {
          "type": "string",
          "description": "The [optional] filename of the media file."
        }
      },
      "required": [
        "url"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageTemplateValue"
        }
      ],
      "x-ms-discriminator-value": "image"
    },
    "MessageTemplateItem": {
      "type": "object",
      "description": "The message template as returned from the service.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The template's name.",
          "readOnly": true
        },
        "language": {
          "type": "string",
          "description": "The template's language, in the ISO 639 format, consist of a two-letter language code followed by an optional two-letter country code, e.g., 'en' or 'en_US'."
        },
        "status": {
          "$ref": "#/definitions/MessageTemplateStatus",
          "description": "The aggregated template status."
        },
        "kind": {
          "$ref": "#/definitions/CommunicationMessagesChannel",
          "description": "The type discriminator describing a template type."
        }
      },
      "discriminator": "kind",
      "required": [
        "name",
        "language",
        "status",
        "kind"
      ]
    },
    "MessageTemplateLocation": {
      "type": "object",
      "description": "The message template's location value information.",
      "properties": {
        "locationName": {
          "type": "string",
          "description": "The [Optional] name of the location."
        },
        "address": {
          "type": "string",
          "description": "The [Optional] address of the location."
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "The latitude of the location."
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "The longitude of the location."
        }
      },
      "required": [
        "latitude",
        "longitude"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageTemplateValue"
        }
      ],
      "x-ms-discriminator-value": "location"
    },
    "MessageTemplateQuickAction": {
      "type": "object",
      "description": "The message template's quick action value information.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The [Optional] quick action text"
        },
        "payload": {
          "type": "string",
          "description": "The [Optional] quick action payload"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MessageTemplateValue"
        }
      ],
      "x-ms-discriminator-value": "quickAction"
    },
    "MessageTemplateStatus": {
      "type": "string",
      "description": "The aggregated template status.",
      "enum": [
        "approved",
        "rejected",
        "pending",
        "paused"
      ],
      "x-ms-enum": {
        "name": "MessageTemplateStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "approved",
            "value": "approved",
            "description": "Message template is approved."
          },
          {
            "name": "rejected",
            "value": "rejected",
            "description": "Message template is rejected."
          },
          {
            "name": "pending",
            "value": "pending",
            "description": "Message template is pending."
          },
          {
            "name": "paused",
            "value": "paused",
            "description": "Message template is paused."
          }
        ]
      }
    },
    "MessageTemplateText": {
      "type": "object",
      "description": "The message template's text value information.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text value."
        }
      },
      "required": [
        "text"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageTemplateValue"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "MessageTemplateValue": {
      "type": "object",
      "description": "The class describes a parameter of a template.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Template binding reference name"
        },
        "kind": {
          "$ref": "#/definitions/MessageTemplateValueKind",
          "description": "The type discriminator describing a template parameter type."
        }
      },
      "discriminator": "kind",
      "required": [
        "name",
        "kind"
      ]
    },
    "MessageTemplateValueKind": {
      "type": "string",
      "description": "The type of the template parameter.",
      "enum": [
        "text",
        "image",
        "document",
        "video",
        "location",
        "quickAction"
      ],
      "x-ms-enum": {
        "name": "MessageTemplateValueKind",
        "modelAsString": true,
        "values": [
          {
            "name": "text",
            "value": "text",
            "description": "The text template parameter type."
          },
          {
            "name": "image",
            "value": "image",
            "description": "The image template parameter type."
          },
          {
            "name": "document",
            "value": "document",
            "description": "The document template parameter type."
          },
          {
            "name": "video",
            "value": "video",
            "description": "The video template parameter type."
          },
          {
            "name": "location",
            "value": "location",
            "description": "The location template parameter type."
          },
          {
            "name": "quickAction",
            "value": "quickAction",
            "description": "The quick action template parameter type."
          }
        ]
      }
    },
    "MessageTemplateVideo": {
      "type": "object",
      "description": "The message template's video value information.",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The (public) URL of the media."
        },
        "caption": {
          "type": "string",
          "description": "The [optional] caption of the media object."
        },
        "fileName": {
          "type": "string",
          "description": "The [optional] filename of the media file."
        }
      },
      "required": [
        "url"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageTemplateValue"
        }
      ],
      "x-ms-discriminator-value": "video"
    },
    "NotificationContent": {
      "type": "object",
      "description": "Details of the message to send.",
      "properties": {
        "channelRegistrationId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "The Channel Registration ID for the Business Identifier."
        },
        "to": {
          "type": "array",
          "description": "The native external platform user identifiers of the recipient.",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "$ref": "#/definitions/CommunicationMessageKind",
          "description": "The type discriminator describing a message type."
        }
      },
      "discriminator": "kind",
      "required": [
        "channelRegistrationId",
        "to",
        "kind"
      ]
    },
    "OutboundDeliveryStrategyKind": {
      "type": "string",
      "description": "The options of the outbound delivery strategy for messages sent by participants in a conversation.",
      "enum": [
        "internalOnly",
        "allParticipants"
      ],
      "x-ms-enum": {
        "name": "OutboundDeliveryStrategyKind",
        "modelAsString": true,
        "values": [
          {
            "name": "internalOnly",
            "value": "internalOnly",
            "description": "Delivery strategy for internal only."
          },
          {
            "name": "allParticipants",
            "value": "allParticipants",
            "description": "Delivery strategy for all participants."
          }
        ]
      }
    },
    "PagedConversation": {
      "type": "object",
      "description": "Paged collection of Conversation items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Conversation items on this page",
          "items": {
            "$ref": "#/definitions/CommunicationConversation"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedConversationMessageItem": {
      "type": "object",
      "description": "Paged collection of ConversationMessageItem items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ConversationMessageItem items on this page",
          "items": {
            "$ref": "#/definitions/ConversationMessageItem"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedMessageTemplateItem": {
      "type": "object",
      "description": "Paged collection of MessageTemplateItem items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MessageTemplateItem items on this page",
          "items": {
            "$ref": "#/definitions/MessageTemplateItem"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ParticipantKind": {
      "type": "string",
      "description": "The type of a participant in a threaded conversation.",
      "enum": [
        "internal",
        "external"
      ],
      "x-ms-enum": {
        "name": "ParticipantKind",
        "modelAsString": true,
        "values": [
          {
            "name": "internal",
            "value": "internal",
            "description": "A participant internal to Azure Communication Services."
          },
          {
            "name": "external",
            "value": "external",
            "description": "A participant on other platforms"
          }
        ]
      }
    },
    "ReactionNotificationContent": {
      "type": "object",
      "description": "A request to send a Reaction notification.",
      "properties": {
        "emoji": {
          "type": "string",
          "description": "emoji content like \\uD83D\\uDE00."
        },
        "messageId": {
          "type": "string",
          "description": "ID of the previous message you want to reply to."
        }
      },
      "required": [
        "emoji",
        "messageId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/NotificationContent"
        }
      ],
      "x-ms-discriminator-value": "reaction"
    },
    "RemoveParticipantsOptions": {
      "type": "object",
      "description": "Request payload for removing participants from a conversation.",
      "properties": {
        "participantIds": {
          "type": "array",
          "description": "The participant IDs to remove.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "participantIds"
      ]
    },
    "RemoveParticipantsResult": {
      "type": "object",
      "description": "Response for the remove participants operation.",
      "properties": {
        "invalidParticipants": {
          "type": "array",
          "description": "List of Ids with Errors if failed to be added",
          "items": {
            "$ref": "#/definitions/UpdateParticipantsResult"
          }
        }
      },
      "required": [
        "invalidParticipants"
      ]
    },
    "SendConversationMessageOptions": {
      "type": "object",
      "description": "Request payload for sending a conversation message.",
      "properties": {
        "request": {
          "$ref": "#/definitions/ConversationMessageContent",
          "description": "Details of a send conversation message request."
        },
        "outboundDeliveryStrategy": {
          "$ref": "#/definitions/OutboundDeliveryStrategyKind",
          "description": "The options of the outbound delivery strategy for messages sent by participants in a conversation.\r\nSupports internalOnly, allChannels."
        }
      },
      "required": [
        "request"
      ]
    },
    "SendConversationMessageResult": {
      "type": "object",
      "description": "Result of the send conversation message operation.",
      "properties": {
        "messageId": {
          "type": "string",
          "description": "A server-generated Advanced Messaging conversation message id."
        }
      },
      "required": [
        "messageId"
      ]
    },
    "SendMessageResult": {
      "type": "object",
      "description": "Result of the send message operation.",
      "properties": {
        "receipts": {
          "type": "array",
          "description": "Receipts of the send message operation.",
          "items": {
            "$ref": "#/definitions/MessageReceipt"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "receipts"
      ]
    },
    "StickerNotificationContent": {
      "type": "object",
      "description": "A request to send a Sticker notification.",
      "properties": {
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "A media url for the file. Required if the type is one of the supported media types, e.g. image"
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/NotificationContent"
        }
      ],
      "x-ms-discriminator-value": "sticker"
    },
    "TemplateConversationMessageContent": {
      "type": "object",
      "description": "A request to send a template conversation message.",
      "properties": {
        "template": {
          "$ref": "#/definitions/MessageTemplate",
          "description": "The template object used to create templates."
        }
      },
      "required": [
        "template"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ConversationMessageContent"
        }
      ],
      "x-ms-discriminator-value": "template"
    },
    "TemplateNotificationContent": {
      "type": "object",
      "description": "A request to send a template notification.",
      "properties": {
        "template": {
          "$ref": "#/definitions/MessageTemplate",
          "description": "The template object used to create templates."
        }
      },
      "required": [
        "template"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/NotificationContent"
        }
      ],
      "x-ms-discriminator-value": "template"
    },
    "TextConversationMessageContent": {
      "type": "object",
      "description": "A request to send a text conversation message.",
      "properties": {
        "content": {
          "type": "string",
          "description": "Message content."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ConversationMessageContent"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "TextMessageContent": {
      "type": "object",
      "description": "The message content of type text information.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text value."
        }
      },
      "required": [
        "text"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "TextNotificationContent": {
      "type": "object",
      "description": "A request to send a text notification.",
      "properties": {
        "content": {
          "type": "string",
          "description": "Message content."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/NotificationContent"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "UpdateParticipantsResult": {
      "type": "object",
      "description": "Response for the remove participants operation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Participant User Id."
        },
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "Error of the participant operation."
        }
      },
      "required": [
        "id"
      ]
    },
    "VideoConversationMessageContent": {
      "type": "object",
      "description": "A request to send a video conversation message.",
      "properties": {
        "caption": {
          "type": "string",
          "description": "Optional text content."
        },
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "A media url for the file. Required if the type is one of the supported media types, e.g. image"
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ConversationMessageContent"
        }
      ],
      "x-ms-discriminator-value": "video"
    },
    "VideoMessageContent": {
      "type": "object",
      "description": "The message content of type video information.",
      "properties": {
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "MediaUri of the media content."
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "video"
    },
    "VideoNotificationContent": {
      "type": "object",
      "description": "A request to send a video notification.",
      "properties": {
        "caption": {
          "type": "string",
          "description": "Optional text content."
        },
        "mediaUri": {
          "type": "string",
          "format": "uri",
          "description": "A media url for the file. Required if the type is one of the supported media types, e.g. image"
        }
      },
      "required": [
        "mediaUri"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/NotificationContent"
        }
      ],
      "x-ms-discriminator-value": "video"
    },
    "WhatsAppButtonActionBindings": {
      "type": "object",
      "description": "WhatsApp Binding actions to the interactive message.",
      "properties": {
        "content": {
          "$ref": "#/definitions/ButtonSetContent",
          "description": "Action content of Interactive message."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ActionBindings"
        }
      ],
      "x-ms-discriminator-value": "whatsAppButtonAction"
    },
    "WhatsAppContact": {
      "type": "object",
      "description": "WhatsApp Contact.",
      "allOf": [
        {
          "$ref": "#/definitions/Contact"
        }
      ],
      "x-ms-discriminator-value": "whatsApp"
    },
    "WhatsAppListActionBindings": {
      "type": "object",
      "description": "WhatsApp List Binding actions to the interactive message.",
      "properties": {
        "content": {
          "$ref": "#/definitions/ActionGroupContent",
          "description": "Action content of Interactive message."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ActionBindings"
        }
      ],
      "x-ms-discriminator-value": "whatsAppListAction"
    },
    "WhatsAppMessageButtonSubType": {
      "type": "string",
      "description": "The WhatsApp button sub type.",
      "enum": [
        "quickReply",
        "url"
      ],
      "x-ms-enum": {
        "name": "WhatsAppMessageButtonSubType",
        "modelAsString": true,
        "values": [
          {
            "name": "quickReply",
            "value": "quickReply",
            "description": "The WhatsApp button sub type is quick reply."
          },
          {
            "name": "url",
            "value": "url",
            "description": "The WhatsApp button sub type is url."
          }
        ]
      }
    },
    "WhatsAppMessageTemplateBindings": {
      "type": "object",
      "description": "The template bindings for WhatsApp",
      "properties": {
        "header": {
          "type": "array",
          "description": "The header template bindings",
          "items": {
            "$ref": "#/definitions/WhatsAppMessageTemplateBindingsComponent"
          },
          "x-ms-identifiers": []
        },
        "body": {
          "type": "array",
          "description": "The body template bindings",
          "items": {
            "$ref": "#/definitions/WhatsAppMessageTemplateBindingsComponent"
          },
          "x-ms-identifiers": []
        },
        "footer": {
          "type": "array",
          "description": "The footer template bindings",
          "items": {
            "$ref": "#/definitions/WhatsAppMessageTemplateBindingsComponent"
          },
          "x-ms-identifiers": []
        },
        "buttons": {
          "type": "array",
          "description": "The button template bindings",
          "items": {
            "$ref": "#/definitions/WhatsAppMessageTemplateBindingsButton"
          },
          "x-ms-identifiers": []
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MessageTemplateBindings"
        }
      ],
      "x-ms-discriminator-value": "whatsApp"
    },
    "WhatsAppMessageTemplateBindingsButton": {
      "type": "object",
      "description": "The template bindings component button for WhatsApp",
      "properties": {
        "subType": {
          "$ref": "#/definitions/WhatsAppMessageButtonSubType",
          "description": "The WhatsApp button sub type"
        },
        "refValue": {
          "type": "string",
          "description": "The name of the referenced item in the template values."
        }
      },
      "required": [
        "subType",
        "refValue"
      ]
    },
    "WhatsAppMessageTemplateBindingsComponent": {
      "type": "object",
      "description": "The template bindings component for WhatsApp",
      "properties": {
        "refValue": {
          "type": "string",
          "description": "The name of the referenced item in the template values."
        }
      },
      "required": [
        "refValue"
      ]
    },
    "WhatsAppMessageTemplateItem": {
      "type": "object",
      "description": "The WhatsApp-specific template response contract",
      "properties": {
        "content": {
          "description": "WhatsApp platform's template content. This is the payload returned from WhatsApp API."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MessageTemplateItem"
        }
      ],
      "x-ms-discriminator-value": "whatsApp"
    },
    "WhatsAppUrlActionBindings": {
      "type": "object",
      "description": "WhatsApp Binding actions to the interactive message.",
      "properties": {
        "content": {
          "$ref": "#/definitions/LinkContent",
          "description": "Action content of Interactive message."
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ActionBindings"
        }
      ],
      "x-ms-discriminator-value": "whatsAppUrlAction"
    }
  },
  "parameters": {
    "AddParticipantsRequestBody": {
      "name": "options",
      "in": "body",
      "description": "Details of the payload for adding participants to a conversation.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/AddParticipantsOptions"
      },
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.ClientRequestIdHeader": {
      "name": "x-ms-client-request-id",
      "in": "header",
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "required": false,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "clientRequestId"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent": {
      "name": "Repeatability-First-Sent",
      "in": "header",
      "description": "Specifies the date and time at which the request was first created.",
      "required": false,
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "repeatabilityFirstSent"
    },
    "Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId": {
      "name": "Repeatability-Request-ID",
      "in": "header",
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "repeatabilityRequestId"
    },
    "ConversationThreadSendRequestBody": {
      "name": "options",
      "in": "body",
      "description": "Details of the conversation message to send.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/SendConversationMessageOptions"
      },
      "x-ms-parameter-location": "method"
    },
    "NotificationMessagesSendRequestBody": {
      "name": "body",
      "in": "body",
      "description": "Details of the message to send.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/NotificationContent"
      },
      "x-ms-parameter-location": "method"
    },
    "RemoveParticipantsRequestBody": {
      "name": "options",
      "in": "body",
      "description": "Details of the request body for removing participants from a conversation.",
      "required": true,
      "schema": {
        "$ref": "#/definitions/RemoveParticipantsOptions"
      },
      "x-ms-parameter-location": "method"
    }
  }
}
