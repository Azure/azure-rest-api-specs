{
  "swagger": "2.0",
  "info": {
    "title": "Azure-ContainerStorageRP",
    "version": "2023-03-01-preview",
    "description": "Azure Container Storage Resource Provider API.",
    "x-cadl-generated": [
      {
        "emitter": "@azure-tools/cadl-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "Operations"
    },
    {
      "name": "Pools"
    },
    {
      "name": "Volumes"
    },
    {
      "name": "VolumeSnapshots"
    }
  ],
  "paths": {
    "/providers/Microsoft.ContainerStorage/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "operationId": "Operations_List",
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Operations_List_MaximumSet_Gen": {
            "$ref": "./examples/Operations_List_MaximumSet_Gen.json"
          },
          "Operations_List_MinimumSet_Gen": {
            "$ref": "./examples/Operations_List_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerStorage/pools": {
      "get": {
        "tags": [
          "Pools"
        ],
        "operationId": "Pools_ListBySubscription",
        "description": "List Pool resources by subscription ID",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/PoolListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Pools_ListBySubscription_MaximumSet_Gen": {
            "$ref": "./examples/Pools_ListBySubscription_MaximumSet_Gen.json"
          },
          "Pools_ListBySubscription_MinimumSet_Gen": {
            "$ref": "./examples/Pools_ListBySubscription_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools": {
      "get": {
        "tags": [
          "Pools"
        ],
        "operationId": "Pools_ListByResourceGroup",
        "description": "List Pool resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/PoolListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Pools_ListByResourceGroup_MaximumSet_Gen": {
            "$ref": "./examples/Pools_ListByResourceGroup_MaximumSet_Gen.json"
          },
          "Pools_ListByResourceGroup_MinimumSet_Gen": {
            "$ref": "./examples/Pools_ListByResourceGroup_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}": {
      "get": {
        "tags": [
          "Pools"
        ],
        "operationId": "Pools_Get",
        "description": "Get a Pool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Pool"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Pools_Get_MaximumSet_Gen": {
            "$ref": "./examples/Pools_Get_MaximumSet_Gen.json"
          },
          "Pools_Get_MinimumSet_Gen": {
            "$ref": "./examples/Pools_Get_MinimumSet_Gen.json"
          }
        }
      },
      "put": {
        "tags": [
          "Pools"
        ],
        "operationId": "Pools_CreateOrUpdate",
        "description": "Create a Pool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/Pool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Pool"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header has the uri for monitoring the operation state.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Pool"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Pools_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/Pools_CreateOrUpdate_MaximumSet_Gen.json"
          },
          "Pools_CreateOrUpdate_MinimumSet_Gen": {
            "$ref": "./examples/Pools_CreateOrUpdate_MinimumSet_Gen.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Pools"
        ],
        "operationId": "Pools_Delete",
        "description": "Delete a Pool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header has the uri for monitoring the operation state.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Pools_Delete_MaximumSet_Gen": {
            "$ref": "./examples/Pools_Delete_MaximumSet_Gen.json"
          },
          "Pools_Delete_MinimumSet_Gen": {
            "$ref": "./examples/Pools_Delete_MinimumSet_Gen.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Pools"
        ],
        "operationId": "Pools_Update",
        "description": "Update a Pool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/PoolUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Pool"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header has the uri for monitoring the operation state.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Pools_Update_MaximumSet_Gen": {
            "$ref": "./examples/Pools_Update_MaximumSet_Gen.json"
          },
          "Pools_Update_MinimumSet_Gen": {
            "$ref": "./examples/Pools_Update_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}/volumes": {
      "get": {
        "tags": [
          "Volumes"
        ],
        "operationId": "Volumes_ListByPool",
        "description": "List Volume resources by Pool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VolumeListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Volumes_ListByPool_MaximumSet_Gen": {
            "$ref": "./examples/Volumes_ListByPool_MaximumSet_Gen.json"
          },
          "Volumes_ListByPool_MinimumSet_Gen": {
            "$ref": "./examples/Volumes_ListByPool_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}/volumes/{volumeName}": {
      "get": {
        "tags": [
          "Volumes"
        ],
        "operationId": "Volumes_Get",
        "description": "Get a Volume",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "volumeName",
            "in": "path",
            "required": true,
            "description": "Volume Resource",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Volumes_Get_MaximumSet_Gen": {
            "$ref": "./examples/Volumes_Get_MaximumSet_Gen.json"
          },
          "Volumes_Get_MinimumSet_Gen": {
            "$ref": "./examples/Volumes_Get_MinimumSet_Gen.json"
          }
        }
      },
      "put": {
        "tags": [
          "Volumes"
        ],
        "operationId": "Volumes_CreateOrUpdate",
        "description": "Create a Volume",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "volumeName",
            "in": "path",
            "required": true,
            "description": "Volume Resource",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header has the uri for monitoring the operation state.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Volumes_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/Volumes_CreateOrUpdate_MaximumSet_Gen.json"
          },
          "Volumes_CreateOrUpdate_MinimumSet_Gen": {
            "$ref": "./examples/Volumes_CreateOrUpdate_MinimumSet_Gen.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Volumes"
        ],
        "operationId": "Volumes_Delete",
        "description": "Delete a Volume",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "volumeName",
            "in": "path",
            "required": true,
            "description": "Volume Resource",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header has the uri for monitoring the operation state.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Volumes_Delete_MaximumSet_Gen": {
            "$ref": "./examples/Volumes_Delete_MaximumSet_Gen.json"
          },
          "Volumes_Delete_MinimumSet_Gen": {
            "$ref": "./examples/Volumes_Delete_MinimumSet_Gen.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Volumes"
        ],
        "operationId": "Volumes_Update",
        "description": "Update a Volume",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "volumeName",
            "in": "path",
            "required": true,
            "description": "Volume Resource",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/VolumeUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header has the uri for monitoring the operation state.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Volumes_Update_MaximumSet_Gen": {
            "$ref": "./examples/Volumes_Update_MaximumSet_Gen.json"
          },
          "Volumes_Update_MinimumSet_Gen": {
            "$ref": "./examples/Volumes_Update_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}/volumeSnapshots": {
      "get": {
        "tags": [
          "VolumeSnapshots"
        ],
        "operationId": "VolumeSnapshots_ListByPool",
        "description": "List VolumeSnapshot resources by Pool",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VolumeSnapshotListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "VolumeSnapshots_ListByPool_MaximumSet_Gen": {
            "$ref": "./examples/VolumeSnapshots_ListByPool_MaximumSet_Gen.json"
          },
          "VolumeSnapshots_ListByPool_MinimumSet_Gen": {
            "$ref": "./examples/VolumeSnapshots_ListByPool_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}/volumeSnapshots/{volumeSnapshotName}": {
      "get": {
        "tags": [
          "VolumeSnapshots"
        ],
        "operationId": "VolumeSnapshots_Get",
        "description": "Get a VolumeSnapshot",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "volumeSnapshotName",
            "in": "path",
            "required": true,
            "description": "Volume Snapshot Resource",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VolumeSnapshot"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "VolumeSnapshots_Get_MaximumSet_Gen": {
            "$ref": "./examples/VolumeSnapshots_Get_MaximumSet_Gen.json"
          },
          "VolumeSnapshots_Get_MinimumSet_Gen": {
            "$ref": "./examples/VolumeSnapshots_Get_MinimumSet_Gen.json"
          }
        }
      },
      "put": {
        "tags": [
          "VolumeSnapshots"
        ],
        "operationId": "VolumeSnapshots_CreateOrUpdate",
        "description": "Create a VolumeSnapshot",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "volumeSnapshotName",
            "in": "path",
            "required": true,
            "description": "Volume Snapshot Resource",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/VolumeSnapshot"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VolumeSnapshot"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header has the uri for monitoring the operation state.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/VolumeSnapshot"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "VolumeSnapshots_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/VolumeSnapshots_CreateOrUpdate_MaximumSet_Gen.json"
          },
          "VolumeSnapshots_CreateOrUpdate_MinimumSet_Gen": {
            "$ref": "./examples/VolumeSnapshots_CreateOrUpdate_MinimumSet_Gen.json"
          }
        }
      },
      "delete": {
        "tags": [
          "VolumeSnapshots"
        ],
        "operationId": "VolumeSnapshots_Delete",
        "description": "Delete a VolumeSnapshot",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "volumeSnapshotName",
            "in": "path",
            "required": true,
            "description": "Volume Snapshot Resource",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header has the uri for monitoring the operation state.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "VolumeSnapshots_Delete_MaximumSet_Gen": {
            "$ref": "./examples/VolumeSnapshots_Delete_MaximumSet_Gen.json"
          },
          "VolumeSnapshots_Delete_MinimumSet_Gen": {
            "$ref": "./examples/VolumeSnapshots_Delete_MinimumSet_Gen.json"
          }
        }
      },
      "patch": {
        "tags": [
          "VolumeSnapshots"
        ],
        "operationId": "VolumeSnapshots_Update",
        "description": "Update a VolumeSnapshot",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "poolName",
            "in": "path",
            "required": true,
            "description": "Pool Object",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "volumeSnapshotName",
            "in": "path",
            "required": true,
            "description": "Volume Snapshot Resource",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/VolumeSnapshotUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/VolumeSnapshot"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "The Location header has the uri for monitoring the operation state.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "VolumeSnapshots_Update_MaximumSet_Gen": {
            "$ref": "./examples/VolumeSnapshots_Update_MaximumSet_Gen.json"
          },
          "VolumeSnapshots_Update_MinimumSet_Gen": {
            "$ref": "./examples/VolumeSnapshots_Update_MinimumSet_Gen.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessMode": {
      "type": "string",
      "enum": [
        "ReadWriteOnce",
        "ReadOnlyMany",
        "ReadWriteMany",
        "ReadWriteOncePod"
      ],
      "x-ms-enum": {
        "name": "AccessMode",
        "modelAsString": true
      }
    },
    "AccountTier": {
      "type": "string",
      "enum": [
        "Invalid",
        "Standard",
        "Premium",
        "Ultra"
      ],
      "x-ms-enum": {
        "name": "AccountTier",
        "modelAsString": true
      }
    },
    "Action": {
      "type": "string",
      "enum": [
        "Deny",
        "Allow"
      ],
      "x-ms-enum": {
        "name": "Action",
        "modelAsString": true
      }
    },
    "Custom.LocationHeader": {
      "type": "object",
      "properties": {},
      "description": "The location uri of the operation."
    },
    "Custom.RetryAfterHeaderCustom": {
      "type": "object",
      "properties": {},
      "description": "The retry-after envelope."
    },
    "DiskPoolProperties": {
      "type": "object",
      "properties": {
        "csiParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "List of KV pairs to set in StorageClass to configure CSI driver."
        },
        "maxVolumeCapacityGiB": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum capacity of the volumes in GiB the user intends to create. Default 512.",
          "default": 512
        },
        "disks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags)."
        }
      },
      "description": "Disk Pool Properties"
    },
    "DiskProperties": {
      "type": "object",
      "properties": {
        "resourceId": {
          "type": "string",
          "description": "Reference to Managed Disk"
        },
        "wwn": {
          "type": "string",
          "description": "Manufacturer Disk ID"
        },
        "capacityGiB": {
          "type": "integer",
          "format": "int64",
          "description": "Capacity of disk in GiB"
        },
        "diskType": {
          "$ref": "#/definitions/DiskType",
          "description": "Type of disk"
        },
        "displayName": {
          "type": "string",
          "description": "SKU or Manufacturer type/name"
        },
        "nodeName": {
          "type": "string",
          "description": "Name of the node disk is attached on"
        },
        "devicePath": {
          "type": "string",
          "description": "Used to import SSD to discover WWN"
        }
      },
      "description": "Disk Properties Model",
      "required": [
        "resourceId",
        "wwn",
        "capacityGiB",
        "diskType",
        "displayName",
        "nodeName",
        "devicePath"
      ]
    },
    "DiskType": {
      "type": "string",
      "enum": [
        "Local",
        "Managed"
      ],
      "x-ms-enum": {
        "name": "DiskType",
        "modelAsString": true
      }
    },
    "ElasticSanPoolProperties": {
      "type": "object",
      "properties": {
        "sanName": {
          "type": "string",
          "description": "Name of an existing SAN."
        },
        "resourceGroup": {
          "type": "string",
          "description": "Resource group of an existing SAN."
        },
        "volumeGroup": {
          "type": "string",
          "description": "Volume group of an existing SAN."
        }
      },
      "description": "Elastic San Pool Properties",
      "required": [
        "sanName",
        "resourceGroup",
        "volumeGroup"
      ]
    },
    "ElasticSanPoolPropertiesUpdate": {
      "type": "object",
      "properties": {
        "sanName": {
          "type": "string",
          "description": "Name of an existing SAN."
        },
        "resourceGroup": {
          "type": "string",
          "description": "Resource group of an existing SAN."
        },
        "volumeGroup": {
          "type": "string",
          "description": "Volume group of an existing SAN."
        }
      },
      "description": "Elastic San Pool Properties"
    },
    "EncryptionType": {
      "type": "string",
      "enum": [
        "EncryptionAtRestWithPlatformKey"
      ],
      "x-ms-enum": {
        "name": "EncryptionType",
        "modelAsString": true
      }
    },
    "EphemeralPoolProperties": {
      "type": "object",
      "properties": {
        "diskSelector": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Template name or KV pairs containing disk selection criteria, e.g. model=\"Microsoft NVMe Direct Disk\" to match all Lsv2 NVMe disks."
        },
        "disks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags)."
        },
        "diskFormat": {
          "type": "boolean",
          "description": "Consent to format the local disks.",
          "default": false
        }
      },
      "description": "Ephemeral Pool Properties",
      "required": [
        "diskSelector",
        "disks"
      ]
    },
    "EphemeralPoolPropertiesUpdate": {
      "type": "object",
      "properties": {
        "diskSelector": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Template name or KV pairs containing disk selection criteria, e.g. model=\"Microsoft NVMe Direct Disk\" to match all Lsv2 NVMe disks."
        },
        "disks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags)."
        },
        "diskFormat": {
          "type": "boolean",
          "description": "Consent to format the local disks.",
          "default": false
        }
      },
      "description": "Ephemeral Pool Properties"
    },
    "ManagedPoolProperties": {
      "type": "object",
      "properties": {},
      "description": "Managed Pool Properties"
    },
    "NetworkRuleSet": {
      "type": "object",
      "properties": {
        "defaultAction": {
          "$ref": "#/definitions/Action",
          "description": "Default action"
        },
        "virtualNetworkRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetworkRule"
          },
          "x-cadl-name": "VirtualNetworkRule[]",
          "description": "Virtual network rules"
        }
      },
      "description": "Network Rule Set definition",
      "required": [
        "defaultAction",
        "virtualNetworkRules"
      ]
    },
    "PlacementProperties": {
      "type": "object",
      "properties": {
        "affinityLabelSelector": {
          "type": "string",
          "description": "Affinity label selector"
        },
        "antiAffinityLabelSelector": {
          "type": "string",
          "description": "Anti affinity label selector"
        },
        "whenUnsatisfiable": {
          "$ref": "#/definitions/WhenUnsatisfiable",
          "description": "When unsatisfiable"
        }
      },
      "description": "Placement Properties Model",
      "required": [
        "affinityLabelSelector",
        "antiAffinityLabelSelector",
        "whenUnsatisfiable"
      ]
    },
    "Pool": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/PoolProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Pool resource",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "PoolListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pool"
          },
          "x-cadl-name": "Pool[]",
          "description": "The Pool items on this page"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-cadl-name": "Rest.ResourceLocation"
        }
      },
      "description": "The response of a Pool list operation.",
      "required": [
        "value"
      ]
    },
    "PoolProperties": {
      "type": "object",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "poolType": {
          "$ref": "#/definitions/PoolType",
          "description": "Type of the Pool: ephemeral, disk, managed, or elasticsan."
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "List of availability zones that resources can be created in."
        },
        "poolCapacityGiB": {
          "type": "integer",
          "format": "int64",
          "description": "Initial capacity of the pool in GiB."
        },
        "assignments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For portable there can be many."
        },
        "ephemeralPoolProperties": {
          "$ref": "#/definitions/EphemeralPoolProperties",
          "description": "Ephemeral Pool Properties"
        },
        "diskPoolProperties": {
          "$ref": "#/definitions/DiskPoolProperties",
          "description": "Disk Pool Properties"
        },
        "elasticSanPoolProperties": {
          "$ref": "#/definitions/ElasticSanPoolProperties",
          "description": "Elastic San Pool Properties"
        }
      },
      "description": "Pool Properties",
      "required": [
        "poolType",
        "zones",
        "poolCapacityGiB",
        "assignments",
        "elasticSanPoolProperties"
      ]
    },
    "PoolType": {
      "type": "number",
      "enum": [
        1,
        2,
        3,
        4
      ],
      "x-ms-enum": {
        "name": "PoolType",
        "modelAsString": true,
        "values": [
          {
            "name": "Ephemeral",
            "value": 1
          },
          {
            "name": "Disk",
            "value": 2
          },
          {
            "name": "Managed",
            "value": 3
          },
          {
            "name": "ElasticSan",
            "value": 4
          }
        ]
      }
    },
    "PoolUpdate": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/PoolUpdateProperties",
          "x-ms-client-flatten": true
        }
      },
      "description": "The type used for update operations of the Pool."
    },
    "PoolUpdateProperties": {
      "type": "object",
      "properties": {
        "poolType": {
          "$ref": "#/definitions/PoolType",
          "description": "Type of the Pool: ephemeral, disk, managed, or elasticsan."
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "List of availability zones that resources can be created in."
        },
        "poolCapacityGiB": {
          "type": "integer",
          "format": "int64",
          "description": "Initial capacity of the pool in GiB."
        },
        "assignments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For portable there can be many."
        },
        "ephemeralPoolProperties": {
          "$ref": "#/definitions/EphemeralPoolPropertiesUpdate",
          "description": "Ephemeral Pool Properties"
        },
        "diskPoolProperties": {
          "$ref": "#/definitions/DiskPoolProperties",
          "description": "Disk Pool Properties"
        },
        "elasticSanPoolProperties": {
          "$ref": "#/definitions/ElasticSanPoolPropertiesUpdate",
          "description": "Elastic San Pool Properties"
        }
      },
      "description": "The updatable properties of the Pool."
    },
    "ProtocolType": {
      "type": "string",
      "enum": [
        "None",
        "iSCSI"
      ],
      "x-ms-enum": {
        "name": "ProtocolType",
        "modelAsString": true
      }
    },
    "ProvisioningState": {
      "type": "string",
      "description": "Provisioning state of the resource.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Provisioning",
        "Updating",
        "Deleting",
        "Accepted"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true
      }
    },
    "ReclaimPolicy": {
      "type": "string",
      "enum": [
        "Delete",
        "Retain"
      ],
      "x-ms-enum": {
        "name": "ReclaimPolicy",
        "modelAsString": true
      }
    },
    "Sku": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/SkuName",
          "description": "Sku name"
        },
        "tier": {
          "$ref": "#/definitions/AccountTier",
          "description": "Sku Account Tier"
        }
      },
      "description": "Sku definition",
      "required": [
        "name",
        "tier"
      ]
    },
    "SkuName": {
      "type": "string",
      "enum": [
        "Invalid",
        "Premium_LRS",
        "Premium_ZRS"
      ],
      "x-ms-enum": {
        "name": "SkuName",
        "modelAsString": true
      }
    },
    "VirtualNetworkRule": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/Action",
          "description": "Action of rule",
          "default": "Allow"
        },
        "id": {
          "type": "string",
          "description": "Id of rule"
        }
      },
      "description": "Virtual Network Rule definition",
      "required": [
        "id"
      ]
    },
    "Volume": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VolumeProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Concrete proxy resource types can be created by aliasing this type using a specific property type.",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "VolumeBindingMode": {
      "type": "string",
      "enum": [
        "Immediate",
        "WaitFirstForCustomer"
      ],
      "x-ms-enum": {
        "name": "VolumeBindingMode",
        "modelAsString": true
      }
    },
    "VolumeListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "x-cadl-name": "Volume[]",
          "description": "The Volume items on this page"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-cadl-name": "Rest.ResourceLocation"
        }
      },
      "description": "The response of a Volume list operation.",
      "required": [
        "value"
      ]
    },
    "VolumeMode": {
      "type": "string",
      "enum": [
        "Filesystem",
        "Raw"
      ],
      "x-ms-enum": {
        "name": "VolumeMode",
        "modelAsString": true
      }
    },
    "VolumeProperties": {
      "type": "object",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "String KV pairs indicating labels"
        },
        "capacityGiB": {
          "type": "integer",
          "format": "int64",
          "description": "Requested capacity in GiB"
        },
        "volumeMode": {
          "$ref": "#/definitions/VolumeMode",
          "description": "Indicates how the volume should be attached"
        },
        "reclaimPolicy": {
          "$ref": "#/definitions/ReclaimPolicy",
          "description": "Reclaim Policy, Delete or Retain"
        },
        "mountOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "List of string mount options"
        }
      },
      "description": "Volume Properties",
      "required": [
        "labels",
        "capacityGiB",
        "volumeMode",
        "reclaimPolicy",
        "mountOptions"
      ]
    },
    "VolumeSnapshot": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VolumeSnapshotProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Concrete proxy resource types can be created by aliasing this type using a specific property type.",
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "VolumeSnapshotListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeSnapshot"
          },
          "x-cadl-name": "VolumeSnapshot[]",
          "description": "The VolumeSnapshot items on this page"
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "x-cadl-name": "Rest.ResourceLocation"
        }
      },
      "description": "The response of a VolumeSnapshot list operation.",
      "required": [
        "value"
      ]
    },
    "VolumeSnapshotProperties": {
      "type": "object",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation.",
          "readOnly": true
        },
        "source": {
          "type": "string",
          "description": "Reference to the source volume"
        },
        "volumeMode": {
          "$ref": "#/definitions/VolumeMode",
          "description": "Indicates how the volumes created from the snapshot should be attached"
        },
        "reclaimPolicy": {
          "$ref": "#/definitions/ReclaimPolicy",
          "description": "Reclaim Policy, Delete or Retain"
        },
        "mountOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "List of string mount options"
        }
      },
      "description": "Volume Snapshot Properties",
      "required": [
        "source",
        "volumeMode",
        "reclaimPolicy",
        "mountOptions"
      ]
    },
    "VolumeSnapshotUpdate": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VolumeSnapshotUpdateProperties",
          "x-ms-client-flatten": true
        }
      },
      "description": "The type used for update operations of the VolumeSnapshot."
    },
    "VolumeSnapshotUpdateProperties": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "description": "Reference to the source volume"
        },
        "volumeMode": {
          "$ref": "#/definitions/VolumeMode",
          "description": "Indicates how the volumes created from the snapshot should be attached"
        },
        "reclaimPolicy": {
          "$ref": "#/definitions/ReclaimPolicy",
          "description": "Reclaim Policy, Delete or Retain"
        },
        "mountOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "List of string mount options"
        }
      },
      "description": "The updatable properties of the VolumeSnapshot."
    },
    "VolumeUpdate": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/VolumeUpdateProperties",
          "x-ms-client-flatten": true
        }
      },
      "description": "The type used for update operations of the Volume."
    },
    "VolumeUpdateProperties": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "String KV pairs indicating labels"
        },
        "capacityGiB": {
          "type": "integer",
          "format": "int64",
          "description": "Requested capacity in GiB"
        },
        "volumeMode": {
          "$ref": "#/definitions/VolumeMode",
          "description": "Indicates how the volume should be attached"
        },
        "reclaimPolicy": {
          "$ref": "#/definitions/ReclaimPolicy",
          "description": "Reclaim Policy, Delete or Retain"
        },
        "mountOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "List of string mount options"
        }
      },
      "description": "The updatable properties of the Volume."
    },
    "WhenUnsatisfiable": {
      "type": "string",
      "enum": [
        "DoNotSchedule",
        "ScheduleAnyway"
      ],
      "x-ms-enum": {
        "name": "WhenUnsatisfiable",
        "modelAsString": true
      }
    }
  },
  "parameters": {}
}
