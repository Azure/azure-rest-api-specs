import "@cadl-lang/rest";
import "@cadl-lang/openapi3";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-providerhub";
import "@azure-tools/cadl-azure-resource-manager";

import "./custom_operations.cadl";

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.ResourceManager;
using Azure.ResourceManager.Foundations;
using Microsoft.ContainerStorage.Custom;

@armProviderNamespace
@service({
  title: "Azure-ContainerStorageRP",
  version: "2023-03-01-preview",
})
@doc("Azure Container Storage Resource Provider API.")
@useDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
namespace Microsoft.ContainerStorage;

interface Operations extends Azure.ResourceManager.Operations {}

// START POOL

@doc("Pool resource")
model Pool is TrackedResource<PoolProperties> {
  @doc("Pool Object")
  @pattern("^[a-zA-Z0-9-]{3,24}$")
  @key("poolName")
  @path
  @segment("pools")
  name: string;
}

@doc("Pool Properties")
model PoolProperties {
  // @doc("Sku of Pool")
  // sku: Sku;

  @visibility("read")
  @doc("The status of the last operation.")
  provisioningState?: ProvisioningState;

  @doc("Type of the Pool: ephemeral, disk, managed, or elasticsan.")
  poolType: PoolType;
  
  @doc("List of availability zones that resources can be created in.")
  zones: string[];

  @doc("Initial capacity of the pool in GiB.")
  poolCapacityGiB: int64;

  // @doc("List of boolean feature-flags, e.g. pool/volume auto-expansion, reclaim policy.")
  // features?: Record<boolean>;

  @doc("List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For portable there can be many.")
  assignments: string[];

  // Don't include in preview
  // @doc("Type of encryption. Allowed values: EncryptionAtRestWithPlatformKey.")
  // encryption: EncryptionType;

  @doc("Ephemeral Pool Properties")
  ephemeralPoolProperties?: EphemeralPoolProperties;

  // @doc("Managed Pool Properties")
  // managedPoolProperties?: ManagedPoolProperties;

  @doc("Disk Pool Properties")
  diskPoolProperties?: DiskPoolProperties;

  @doc("Elastic San Pool Properties")
  elasticSanPoolProperties: ElasticSanPoolProperties;
}

@doc("Ephemeral Pool Properties")
model EphemeralPoolProperties {
  // Post preview
  // @doc("The number of data copies. Default 3.")
  // replicas?: int64 = 3;

  @doc("Template name or KV pairs containing disk selection criteria, e.g. model=\"Microsoft NVMe Direct Disk\" to match all Lsv2 NVMe disks.")
  diskSelector: string[];

  @doc("Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).")
  disks: string[];

  @doc("Consent to format the local disks.")
  diskFormat?: boolean = false;
}

@doc("Managed Pool Properties")
model ManagedPoolProperties {}

@doc("Elastic San Pool Properties")
model ElasticSanPoolProperties {
  @doc("Name of an existing SAN.")
  sanName: string;

  @doc("Resource group of an existing SAN.")
  resourceGroup: string;

  @doc("Volume group of an existing SAN.")
  volumeGroup: string;
}

@doc("Disk Pool Properties")
model DiskPoolProperties {
  // Don't include in preview 
  // @doc("Name of the CSI provisioner, e.g. disk.csi.azure.com")
  // csiProvisioner?: string;

  @doc("List of KV pairs to set in StorageClass to configure CSI driver.")
  csiParams?: Record<string>;
  
  // @doc("Initial capacity of disks. Application volumes must fit within single disks.")
  // diskCapacityRequest: int64;

  @doc("Maximum capacity of the volumes in GiB the user intends to create. Default 512.")
  maxVolumeCapacityGiB?: int64 = 512;

  @doc("Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).")
  disks?: string[];
}

@doc("Sku definition")
model Sku {
    @doc("Sku name")
    name: SkuName;

    @doc("Sku Account Tier")
    tier: AccountTier;
}

enum SkuName {
  Invalid,
  Premium_LRS,
  Premium_ZRS
}

enum AccountTier {
  Invalid,
  Standard,
  Premium,
  Ultra
}

@doc("Network Rule Set definition")
model NetworkRuleSet {
    @doc("Default action")
    defaultAction: Action;

    @doc("Virtual network rules")
    virtualNetworkRules: VirtualNetworkRule[];
}

@doc("Virtual Network Rule definition")
model VirtualNetworkRule {
    @doc("Action of rule")
    action?: Action = Action.Allow;

    @doc("Id of rule")
    id: string;
}

enum Action {
    Deny,
    Allow
}

enum ProtocolType {
    None,
    iSCSI
}

enum EncryptionType {
    EncryptionAtRestWithPlatformKey
}

enum PoolType {
  Ephemeral: 1,
  Disk: 2,
  Managed: 3,
  ElasticSan: 4 
}

enum VolumeBindingMode {
  Immediate,
  WaitFirstForCustomer
}

@doc("Disk Properties Model")
model DiskProperties {
    @doc("Reference to Managed Disk")
    resourceId: string;

    @doc("Manufacturer Disk ID")
    wwn: string;

    @doc("Capacity of disk in GiB")
    capacityGiB: int64;

    @doc("Type of disk")
    diskType: DiskType;

    @doc("SKU or Manufacturer type/name")
    displayName: string;

    @doc("Name of the node disk is attached on")
    nodeName: string;

    @doc("Used to import SSD to discover WWN")
    devicePath: string;
}

enum DiskType {
  Local,
  Managed
}


@doc("Provisioning state of the resource.")
@Azure.Core.lroStatus
enum ProvisioningState {
  Succeeded,
  Failed,
  Canceled,
  Provisioning,
  Updating,
  Deleting,
  Accepted,
}

// END POOL

// START VOLUME

@parentResource(Pool)
model Volume is ProxyResource<VolumeProperties> {
  @doc("Volume Resource")
  @pattern("^[a-zA-Z0-9-]{3,24}$")

  @key("volumeName")
  @path
  @segment("volumes")
  name: string;
}
  
@doc("Volume Properties")
model VolumeProperties {
  @visibility("read")
  @doc("The status of the last operation.")
  provisioningState?: ProvisioningState;

  // Will not have features enabled by these flags for preview
  // @doc("List of boolean feature-flags, e.g. pool/volume auto-expansion, reclaim policy.")
  // features?: Record<boolean>;

  @doc("String KV pairs indicating labels")
  labels: Record<string>;

  @doc("Requested capacity in GiB")
  capacityGiB: int64;

  @doc("Indicates how the volume should be attached")
  volumeMode: VolumeMode;

  // Set default to RWO in RP and pass it through
  // @doc("Indicates how the volume can be accessed")
  // accessMode: AccessMode;

  // Don't support replication for preview
  // @doc("Number of replicas")
  // replicas: int64;

  @doc("Reclaim Policy, Delete or Retain")
  reclaimPolicy: ReclaimPolicy;

  @doc("List of string mount options")
  mountOptions: string[];

  // Don't support for preview
  // @doc("Placement properties")
  // placementProperties: PlacementProperties;
}

enum VolumeMode {
  Filesystem,
  Raw
}

enum AccessMode {
  ReadWriteOnce,
  ReadOnlyMany,
  ReadWriteMany,
  ReadWriteOncePod
}

enum ReclaimPolicy {
  Delete,
  Retain
}

@doc("Placement Properties Model")
model PlacementProperties {
  @doc("Affinity label selector")
  affinityLabelSelector: string;

  @doc("Anti affinity label selector")
  antiAffinityLabelSelector: string;

  @doc("When unsatisfiable")
  whenUnsatisfiable: WhenUnsatisfiable;
}

enum WhenUnsatisfiable {
  DoNotSchedule,
  ScheduleAnyway
}

// END VOLUME

// START VOLUME SNAPSHOT

@parentResource(Pool)
model VolumeSnapshot is ProxyResource<VolumeSnapshotProperties> {
  @doc("Volume Snapshot Resource")
  @pattern("^[a-zA-Z0-9-]{3,24}$")

  @key("volumeSnapshotName")
  @path
  @segment("volumeSnapshots")
  name: string;
}
  
@doc("Volume Snapshot Properties")
model VolumeSnapshotProperties {
  @visibility("read")
  @doc("The status of the last operation.")
  provisioningState?: ProvisioningState;

  // Don't include in preview
  // @doc("List of boolean feature-flags, e.g. pool/volume auto-expansion, reclaim policy.")
  // features?: Record<boolean>;

  @doc("Reference to the source volume")
  source: string;

  @doc("Indicates how the volumes created from the snapshot should be attached")
  volumeMode: VolumeMode;

  @doc("Reclaim Policy, Delete or Retain")
  reclaimPolicy: ReclaimPolicy;

  @doc("List of string mount options")
  mountOptions: string[];
}

// END VOLUME SNAPSHOT
  
@armResourceOperations
interface Pools extends ResourceOperationsCustom<Pool, PoolProperties> {}

@armResourceOperations
interface Volumes extends ResourceOperationsCustom<Volume, VolumeProperties> {}

@armResourceOperations
interface VolumeSnapshots extends ResourceOperationsCustom<VolumeSnapshot, VolumeSnapshotProperties> {}