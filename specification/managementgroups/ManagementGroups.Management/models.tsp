import "@typespec/rest";
import "@typespec/http";
import "@azure-tools/typespec-azure-core";
import "@azure-tools/typespec-azure-resource-manager";

using TypeSpec.Rest;
using TypeSpec.Http;
using Azure.ResourceManager;
using Azure.ResourceManager.Foundations;

namespace Microsoft.Management;

interface Operations extends Azure.ResourceManager.Operations {}

union ManagementGroupExpandType {
  string,
  children: "children",
  path: "path",
  ancestors: "ancestors",
}

union EntitySearchType {
  string,
  AllowedParents: "AllowedParents",
  AllowedChildren: "AllowedChildren",
  ParentAndFirstLevelChildren: "ParentAndFirstLevelChildren",
  ParentOnly: "ParentOnly",
  ChildrenOnly: "ChildrenOnly",
}

union EntityViewParameterType {
  string,
  FullHierarchy: "FullHierarchy",
  GroupsOnly: "GroupsOnly",
  SubscriptionsOnly: "SubscriptionsOnly",
  Audit: "Audit",
}

/**
 * The type of child resource.
 */
enum ManagementGroupChildType {
  `Microsoft.Management/managementGroups`,
  `/subscriptions`,
}

/**
 * Required if nameAvailable == false. Invalid indicates the name provided does not match the resource provider's naming requirements (incorrect length, unsupported characters, etc.) AlreadyExists indicates that the name is already in use and is therefore unavailable.
 */
enum Reason {
  Invalid,
  AlreadyExists,
}

/**
 * The users specific permissions to this item.
 */
enum Permissions {
  noaccess,
  view,
  edit,
  delete,
}

/**
 * The status of the Tenant Backfill
 */
enum Status {
  NotStarted,
  NotStartedButGroupsExist,
  Started,
  Failed,
  Cancelled,
  Completed,
}

/**
 * The management group resource.
 */
model ManagementGroupInfo {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  id?: string;

  /**
   * The type of the resource. For example, Microsoft.Management/managementGroups
   */
  @visibility("read")
  type?: string;

  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  name?: string;

  /**
   * The generic properties of a management group.
   */
  properties?: ManagementGroupInfoProperties;
}

/**
 * The generic properties of a management group.
 */
model ManagementGroupInfoProperties {
  /**
   * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;

  /**
   * The friendly name of the management group.
   */
  displayName?: string;
}

/**
 * The details of the error.
 */
model ErrorDetails {
  /**
   * One of a server-defined set of error codes.
   */
  code?: string;

  /**
   * A human-readable representation of the error.
   */
  message?: string;

  /**
   * A human-readable representation of the error's details.
   */
  details?: string;
}

/**
 * The generic properties of a management group.
 */
model ManagementGroupProperties {
  /**
   * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;

  /**
   * The friendly name of the management group.
   */
  displayName?: string;

  /**
   * The details of a management group.
   */
  details?: ManagementGroupDetails;

  /**
   * The list of children.
   */
  children?: ManagementGroupChildInfo[];
}

/**
 * The details of a management group.
 */
model ManagementGroupDetails {
  /**
   * The version number of the object.
   */
  version?: int32;

  /**
   * The date and time when this object was last updated.
   */
  // FIXME: (utcDateTime) Please double check that this is the correct type for your scenario.
  updatedTime?: utcDateTime;

  /**
   * The identity of the principal or process that updated the object.
   */
  updatedBy?: string;

  /**
   * (Optional) The ID of the parent management group.
   */
  parent?: ParentGroupInfo;

  /**
   * The path from the root to the current group.
   */
  @OpenAPI.extension("x-ms-identifiers", ["name"])
  path?: ManagementGroupPathElement[];

  /**
   * The ancestors of the management group.
   */
  managementGroupAncestors?: string[];

  /**
   * The ancestors of the management group displayed in reversed order, from immediate parent to the root.
   */
  @OpenAPI.extension("x-ms-identifiers", ["name"])
  managementGroupAncestorsChain?: ManagementGroupPathElement[];
}

/**
 * (Optional) The ID of the parent management group.
 */
model ParentGroupInfo {
  /**
   * The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  id?: string;

  /**
   * The name of the parent management group
   */
  name?: string;

  /**
   * The friendly name of the parent management group.
   */
  displayName?: string;
}

/**
 * A path element of a management group ancestors.
 */
model ManagementGroupPathElement {
  /**
   * The name of the group.
   */
  name?: string;

  /**
   * The friendly name of the group.
   */
  displayName?: string;
}

/**
 * The child information of a management group.
 */
model ManagementGroupChildInfo {
  /**
   * The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups)
   */
  type?: ManagementGroupChildType;

  /**
   * The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  id?: string;

  /**
   * The name of the child entity.
   */
  name?: string;

  /**
   * The friendly name of the child resource.
   */
  displayName?: string;

  /**
   * The list of children.
   */
  children?: ManagementGroupChildInfo[];
}

/**
 * Management group creation parameters.
 */
model CreateManagementGroupRequest {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  id?: string;

  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups
   */
  @visibility("read")
  type?: string;

  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  name?: string;

  /**
   * The generic properties of a management group used during creation.
   */
  properties?: CreateManagementGroupProperties;
}

/**
 * The generic properties of a management group used during creation.
 */
model CreateManagementGroupProperties {
  /**
   * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  tenantId?: string;

  /**
   * The friendly name of the management group. If no value is passed then this  field will be set to the groupId.
   */
  displayName?: string;

  /**
   * The details of a management group used during creation.
   */
  details?: CreateManagementGroupDetails;

  /**
   * The list of children.
   */
  @visibility("read")
  children?: CreateManagementGroupChildInfo[];
}

/**
 * The details of a management group used during creation.
 */
model CreateManagementGroupDetails {
  /**
   * The version number of the object.
   */
  @visibility("read")
  version?: int32;

  /**
   * The date and time when this object was last updated.
   */
  @visibility("read")
  // FIXME: (utcDateTime) Please double check that this is the correct type for your scenario.
  updatedTime?: utcDateTime;

  /**
   * The identity of the principal or process that updated the object.
   */
  @visibility("read")
  updatedBy?: string;

  /**
   * (Optional) The ID of the parent management group used during creation.
   */
  parent?: CreateParentGroupInfo;
}

/**
 * (Optional) The ID of the parent management group used during creation.
 */
model CreateParentGroupInfo {
  /**
   * The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  id?: string;

  /**
   * The name of the parent management group
   */
  @visibility("read")
  name?: string;

  /**
   * The friendly name of the parent management group.
   */
  @visibility("read")
  displayName?: string;
}

/**
 * The child information of a management group used during creation.
 */
model CreateManagementGroupChildInfo {
  /**
   * The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups)
   */
  @visibility("read")
  type?: ManagementGroupChildType;

  /**
   * The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  id?: string;

  /**
   * The name of the child entity.
   */
  @visibility("read")
  name?: string;

  /**
   * The friendly name of the child resource.
   */
  @visibility("read")
  displayName?: string;

  /**
   * The list of children.
   */
  @visibility("read")
  children?: CreateManagementGroupChildInfo[];
}

/**
 * The results of Azure-AsyncOperation.
 */
model AzureAsyncOperationResults {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  id?: string;

  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups
   */
  @visibility("read")
  type?: string;

  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  name?: string;

  /**
   * The current status of the asynchronous operation performed . For example, Running, Succeeded, Failed
   */
  @visibility("read")
  status?: string;

  /**
   * The generic properties of a management group.
   */
  properties?: ManagementGroupInfoProperties;
}

/**
 * Management group patch parameters.
 */
model PatchManagementGroupRequest {
  /**
   * The friendly name of the management group.
   */
  displayName?: string;

  /**
   * (Optional) The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  parentGroupId?: string;
}

/**
 * Describes the result of the request to view descendants.
 */
model DescendantListResult is Azure.Core.Page<DescendantInfo>;

/**
 * The descendant.
 */
model DescendantInfo {
  /**
   * The fully qualified ID for the descendant.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000 or /subscriptions/0000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  id?: string;

  /**
   * The type of the resource. For example, Microsoft.Management/managementGroups or /subscriptions
   */
  @visibility("read")
  type?: string;

  /**
   * The name of the descendant. For example, 00000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  name?: string;

  /**
   * The generic properties of an descendant.
   */
  properties?: DescendantInfoProperties;
}

/**
 * The generic properties of an descendant.
 */
model DescendantInfoProperties {
  /**
   * The friendly name of the management group.
   */
  displayName?: string;

  /**
   * The ID of the parent management group.
   */
  parent?: DescendantParentGroupInfo;
}

/**
 * The ID of the parent management group.
 */
model DescendantParentGroupInfo {
  /**
   * The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  id?: string;
}

/**
 * The generic properties of subscription under a management group.
 */
model SubscriptionUnderManagementGroupProperties {
  /**
   * The AAD Tenant ID associated with the subscription. For example, 00000000-0000-0000-0000-000000000000
   */
  tenant?: string;

  /**
   * The friendly name of the subscription.
   */
  displayName?: string;

  /**
   * The ID of the parent management group.
   */
  parent?: DescendantParentGroupInfo;

  /**
   * The state of the subscription.
   */
  state?: string;
}

/**
 * The hierarchy settings resource.
 */
model HierarchySettingsInfo {
  /**
   * The fully qualified ID for the settings object.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000/settings/default.
   */
  @visibility("read")
  id?: string;

  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups/settings.
   */
  @visibility("read")
  type?: string;

  /**
   * The name of the object. In this case, default.
   */
  @visibility("read")
  name?: string;

  /**
   * The generic properties of hierarchy settings.
   */
  properties?: HierarchySettingsProperties;
}

/**
 * The generic properties of hierarchy settings.
 */
model HierarchySettingsProperties {
  /**
   * The AAD Tenant ID associated with the hierarchy settings. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;

  /**
   * Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access.
   */
  requireAuthorizationForGroupCreation?: boolean;

  /**
   * Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup
   */
  defaultManagementGroup?: string;
}

/**
 * Parameters for creating or updating Management Group settings
 */
model CreateOrUpdateSettingsRequest {
  /**
   * The properties of the request to create or update Management Group settings
   */
  properties?: CreateOrUpdateSettingsProperties;
}

/**
 * The properties of the request to create or update Management Group settings
 */
model CreateOrUpdateSettingsProperties {
  /**
   * Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access.
   */
  requireAuthorizationForGroupCreation?: boolean;

  /**
   * Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup
   */
  defaultManagementGroup?: string;
}

/**
 * The object that represents the operation.
 */
model OperationDisplayProperties {
  /**
   * The name of the provider.
   */
  @visibility("read")
  provider?: string;

  /**
   * The resource on which the operation is performed.
   */
  @visibility("read")
  resource?: string;

  /**
   * The operation that can be performed.
   */
  @visibility("read")
  operation?: string;

  /**
   * Operation description.
   */
  @visibility("read")
  description?: string;
}

/**
 * Management group name availability check parameters.
 */
model CheckNameAvailabilityRequest {
  /**
   * the name to check for availability
   */
  name?: string;

  /**
   * fully qualified resource type which includes provider namespace
   */
  type?: "Microsoft.Management/managementGroups";
}

/**
 * Describes the result of the request to check management group name availability.
 */
model CheckNameAvailabilityResult {
  /**
   * Required. True indicates name is valid and available. False indicates the name is invalid, unavailable, or both.
   */
  @visibility("read")
  nameAvailable?: boolean;

  /**
   * Required if nameAvailable == false. Invalid indicates the name provided does not match the resource provider's naming requirements (incorrect length, unsupported characters, etc.) AlreadyExists indicates that the name is already in use and is therefore unavailable.
   */
  @visibility("read")
  reason?: Reason;

  /**
   * Required if nameAvailable == false. Localized. If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that is already in use, and direct them to select a different name.
   */
  @visibility("read")
  message?: string;
}

/**
 * Describes the result of the request to view entities.
 */
model EntityListResult is Azure.Core.Page<EntityInfo> {
  /**
   * Total count of records that match the filter
   */
  @visibility("read")
  count?: int32;
}

/**
 * The entity.
 */
model EntityInfo {
  /**
   * The fully qualified ID for the entity.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  id?: string;

  /**
   * The type of the resource. For example, Microsoft.Management/managementGroups
   */
  @visibility("read")
  type?: string;

  /**
   * The name of the entity. For example, 00000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  name?: string;

  /**
   * The generic properties of an entity.
   */
  properties?: EntityInfoProperties;
}

/**
 * The generic properties of an entity.
 */
model EntityInfoProperties {
  /**
   * The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000
   */
  tenantId?: string;

  /**
   * The friendly name of the management group.
   */
  displayName?: string;

  /**
   * (Optional) The ID of the parent management group.
   */
  parent?: EntityParentGroupInfo;

  /**
   * The users specific permissions to this item.
   */
  permissions?: Permissions;

  /**
   * The users specific permissions to this item.
   */
  inheritedPermissions?: Permissions;

  /**
   * Number of Descendants
   */
  numberOfDescendants?: int32;

  /**
   * Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.
   */
  numberOfChildren?: int32;

  /**
   * Number of children is the number of Groups that are exactly one level underneath the current Group.
   */
  numberOfChildGroups?: int32;

  /**
   * The parent display name chain from the root group to the immediate parent
   */
  parentDisplayNameChain?: string[];

  /**
   * The parent name chain from the root group to the immediate parent
   */
  parentNameChain?: string[];
}

/**
 * (Optional) The ID of the parent management group.
 */
model EntityParentGroupInfo {
  /**
   * The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  id?: string;
}

/**
 * The tenant backfill status
 */
model TenantBackfillStatusResult {
  /**
   * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  tenantId?: string;

  /**
   * The status of the Tenant Backfill
   */
  @visibility("read")
  status?: Status;
}

/**
 * The results of an asynchronous operation.
 */
model OperationResults {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  id?: string;

  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups
   */
  @visibility("read")
  type?: string;

  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  name?: string;

  /**
   * The generic properties of a management group.
   */
  properties?: ManagementGroupInfoProperties;
}

/**
 * The management group details for the hierarchy view.
 */
model EntityHierarchyItem {
  /**
   * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  id?: string;

  /**
   * The type of the resource.  For example, Microsoft.Management/managementGroups
   */
  @visibility("read")
  type?: string;

  /**
   * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
   */
  @visibility("read")
  name?: string;

  /**
   * The generic properties of a management group.
   */
  properties?: EntityHierarchyItemProperties;
}

/**
 * The generic properties of a management group.
 */
model EntityHierarchyItemProperties {
  /**
   * The friendly name of the management group.
   */
  displayName?: string;

  /**
   * The users specific permissions to this item.
   */
  permissions?: Permissions;

  /**
   * The list of children.
   */
  children?: EntityHierarchyItem[];
}
