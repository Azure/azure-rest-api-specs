{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft Playwright Service Reporting Data Plane API",
    "version": "2025-01-02-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "eastus.api.playwright.microsoft.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://preview.playwright-int.io/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "https://preview.playwright-int.io/.default": ""
      }
    }
  },
  "tags": [
    {
      "name": "test-run"
    },
    {
      "name": "test-result"
    }
  ],
  "paths": {
    "/accounts/{accountId}/test-results": {
      "get": {
        "operationId": "TestResults_ListTestResults",
        "tags": [
          "test-result"
        ],
        "description": "List Testresults.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.OrderByQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedTestResult"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/accounts/{accountId}/test-results/summary": {
      "post": {
        "operationId": "TestResults_GetTestResultsSummary",
        "tags": [
          "test-result"
        ],
        "description": "Get Testresults summary.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.OrderByQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/StatusSummaryList"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/test-results:uploadBatch": {
      "post": {
        "operationId": "TestResults_UploadBatch",
        "tags": [
          "test-result"
        ],
        "description": "Upload Test Results.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadTestResultsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/test-runs": {
      "get": {
        "operationId": "TestRuns_ListTestRuns",
        "tags": [
          "test-run"
        ],
        "description": "List testruns.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.OrderByQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedTestRun"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/accounts/{accountId}/test-runs/{testRunId}": {
      "get": {
        "operationId": "TestRuns_GetTestRuns",
        "tags": [
          "test-run"
        ],
        "description": "Gets a testrun.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+"
          },
          {
            "name": "testRunId",
            "in": "path",
            "description": "Identifier of the test run.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TestRun"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "TestRuns_CreateOrUpdateTestRun",
        "tags": [
          "test-run"
        ],
        "description": "Creates or updates a testrun.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+"
          },
          {
            "name": "testRunId",
            "in": "path",
            "description": "Identifier of the test run.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestRunCreateOrUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TestRun"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/TestRun"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/test-runs/{testRunId}:createArtifactsUploadBaseUri": {
      "post": {
        "operationId": "TestRuns_CreateArtifactsUploadBaseUri",
        "tags": [
          "test-run"
        ],
        "description": "Get TestResults Upload Uri.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+"
          },
          {
            "name": "testRunId",
            "in": "path",
            "description": "Identifier of the test run.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TestResultsUri"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/test-runs/{testRunId}:updateShardExecutionStatus": {
      "post": {
        "operationId": "TestRuns_UpdateShardExecutionStatus",
        "tags": [
          "test-run"
        ],
        "description": "Resource action operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+"
          },
          {
            "name": "testRunId",
            "in": "path",
            "description": "Identifier of the test run.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestRunShardDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/test-runs/metadata": {
      "post": {
        "operationId": "TestRuns_GetTestRunMetadata",
        "tags": [
          "test-run"
        ],
        "description": "Get TestRun metadata for an Odata filter.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.OrderByQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TestRunsMetadata"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/test-runs/summary": {
      "post": {
        "operationId": "TestRuns_GetTestRunSummary",
        "tags": [
          "test-run"
        ],
        "description": "Get TestRun summary for an Odata filter.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id.",
            "required": true,
            "type": "string",
            "maxLength": 64,
            "pattern": "[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.OrderByQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/StatusSummaryList"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessLevel": {
      "type": "string",
      "description": "Access levels for test results URI.",
      "enum": [
        "Read",
        "Write",
        "ReadWrite",
        "ReadAddCreateWrite"
      ],
      "x-ms-enum": {
        "name": "AccessLevel",
        "modelAsString": true,
        "values": [
          {
            "name": "Read",
            "value": "Read",
            "description": "Read access."
          },
          {
            "name": "Write",
            "value": "Write",
            "description": "Write access."
          },
          {
            "name": "ReadWrite",
            "value": "ReadWrite",
            "description": "Read and write access."
          },
          {
            "name": "ReadAddCreateWrite",
            "value": "ReadAddCreateWrite",
            "description": "Read, add, create, and write access."
          }
        ]
      }
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "BrowserType": {
      "type": "string",
      "description": "Supported browser Types for tests",
      "enum": [
        "CHROMIUM",
        "WEBKIT",
        "FIREFOX"
      ],
      "x-ms-enum": {
        "name": "BrowserType",
        "modelAsString": true,
        "values": [
          {
            "name": "CHROMIUM",
            "value": "CHROMIUM",
            "description": "Chromium"
          },
          {
            "name": "WEBKIT",
            "value": "WEBKIT",
            "description": "Webkit"
          },
          {
            "name": "FIREFOX",
            "value": "FIREFOX",
            "description": "Safari"
          }
        ]
      }
    },
    "CiConfig": {
      "type": "object",
      "description": "Model representing continuous integration (CI) configuration. ",
      "properties": {
        "ciProviderName": {
          "$ref": "#/definitions/CiProviderName",
          "description": "Name of the CI provider.  GitHub | ADO"
        },
        "branch": {
          "type": "string",
          "description": "Branch name in the source code repository.",
          "maxLength": 500
        },
        "author": {
          "type": "string",
          "description": "Author of the commit triggering the test run.",
          "maxLength": 500
        },
        "commitId": {
          "type": "string",
          "description": "ID of the commit triggering the test run.",
          "maxLength": 500
        },
        "revisionUrl": {
          "type": "string",
          "description": "URL linking to the revision details.",
          "maxLength": 1000
        }
      }
    },
    "CiProviderName": {
      "type": "string",
      "description": "Supported CI provider for tests",
      "enum": [
        "GITHUB",
        "ADO",
        "DEFAULT"
      ],
      "x-ms-enum": {
        "name": "CiProviderName",
        "modelAsString": true,
        "values": [
          {
            "name": "GITHUB",
            "value": "GITHUB",
            "description": "GitHub"
          },
          {
            "name": "ADO",
            "value": "ADO",
            "description": "Ado"
          },
          {
            "name": "DEFAULT",
            "value": "DEFAULT",
            "description": "default"
          }
        ]
      }
    },
    "CloudRunSummary": {
      "type": "object",
      "description": "Model representing summary information about a test run.",
      "properties": {
        "status": {
          "$ref": "#/definitions/TestRunStatus",
          "description": "Status of the test run. Allowed values: RUNNING  | CLIENT_COMPLETE | SERVER_COMPLETE"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the test run in datetime(RFC 3339 literal format)."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time of the test run."
        },
        "billableTime": {
          "type": "integer",
          "format": "int32",
          "description": "Billable time for the test run. Available after testRun Ends"
        },
        "totalTime": {
          "type": "integer",
          "format": "int32",
          "description": "Total time taken for the test run."
        },
        "numBrowserSessions": {
          "type": "integer",
          "format": "int32",
          "description": "Number of browser sessions used in the test run."
        },
        "jobs": {
          "type": "array",
          "description": "List of jobs associated with the test run.",
          "items": {
            "type": "string"
          }
        },
        "projects": {
          "type": "array",
          "description": "List of projects associated with the test run.",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "description": "List of tags associated with the test run.",
          "items": {
            "type": "string"
          }
        },
        "errorMessages": {
          "type": "array",
          "description": "List of errorMessages encountered by  reporter client. Beyond the limit errorMessages will be truncated",
          "maxItems": 1000,
          "items": {
            "type": "string"
          }
        },
        "uploadMetadata": {
          "$ref": "#/definitions/UploadMetadata",
          "description": "Metadata related to test run uploads."
        }
      },
      "required": [
        "status",
        "startTime",
        "endTime",
        "billableTime",
        "totalTime",
        "numBrowserSessions",
        "jobs",
        "projects",
        "tags"
      ]
    },
    "CloudRunSummaryCreateOrUpdate": {
      "type": "object",
      "description": "Model representing summary information about a test run.",
      "properties": {
        "status": {
          "$ref": "#/definitions/TestRunStatus",
          "description": "Status of the test run. Allowed values: RUNNING  | CLIENT_COMPLETE | SERVER_COMPLETE"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the test run in datetime(RFC 3339 literal format)."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time of the test run."
        },
        "billableTime": {
          "type": "integer",
          "format": "int32",
          "description": "Billable time for the test run. Available after testRun Ends"
        },
        "totalTime": {
          "type": "integer",
          "format": "int32",
          "description": "Total time taken for the test run."
        },
        "numBrowserSessions": {
          "type": "integer",
          "format": "int32",
          "description": "Number of browser sessions used in the test run."
        },
        "jobs": {
          "type": "array",
          "description": "List of jobs associated with the test run.",
          "items": {
            "type": "string"
          }
        },
        "projects": {
          "type": "array",
          "description": "List of projects associated with the test run.",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "description": "List of tags associated with the test run.",
          "items": {
            "type": "string"
          }
        },
        "errorMessages": {
          "type": "array",
          "description": "List of errorMessages encountered by  reporter client. Beyond the limit errorMessages will be truncated",
          "maxItems": 1000,
          "items": {
            "type": "string"
          }
        },
        "uploadMetadata": {
          "$ref": "#/definitions/UploadMetadataCreateOrUpdate",
          "description": "Metadata related to test run uploads."
        }
      }
    },
    "OsType": {
      "type": "string",
      "description": "Supported OS  for tests",
      "enum": [
        "WINDOWS",
        "LINUX",
        "MAC"
      ],
      "x-ms-enum": {
        "name": "OsType",
        "modelAsString": true,
        "values": [
          {
            "name": "WINDOWS",
            "value": "WINDOWS",
            "description": "Windows"
          },
          {
            "name": "LINUX",
            "value": "LINUX",
            "description": "Linux"
          },
          {
            "name": "MAC",
            "value": "MAC",
            "description": "MAC"
          }
        ]
      }
    },
    "PagedTestResult": {
      "type": "object",
      "description": "Paged collection of TestResult items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The TestResult items on this page",
          "items": {
            "$ref": "#/definitions/TestResult"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedTestRun": {
      "type": "object",
      "description": "Paged collection of TestRun items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The TestRun items on this page",
          "items": {
            "$ref": "#/definitions/TestRun"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PreviousRetrySummary": {
      "type": "object",
      "description": "Summary of previous retries.",
      "properties": {
        "testExecutionId": {
          "type": "string",
          "description": "Identifier of the test execution."
        },
        "retry": {
          "type": "integer",
          "format": "uint32",
          "description": "Number of retry attempts."
        },
        "status": {
          "type": "string",
          "description": "Status of the test execution."
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "description": "Duration of the test execution."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the test execution- RFC 3339 literal format "
        },
        "attachmentsMetadata": {
          "type": "string",
          "description": "Metadata related to attachments."
        },
        "artifactsPath": {
          "type": "array",
          "description": "List of artifacts paths.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "testExecutionId",
        "retry",
        "status",
        "duration",
        "startTime",
        "attachmentsMetadata"
      ]
    },
    "ReportingSummary": {
      "type": "object",
      "description": "Model representing summary of test run results.",
      "properties": {
        "numTotalTests": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of tests executed."
        },
        "numPassedTests": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tests that passed."
        },
        "numFailedTests": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tests that failed."
        },
        "numSkippedTests": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tests that were skipped."
        },
        "numFlakyTests": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tests that were flaky."
        },
        "status": {
          "$ref": "#/definitions/TestStatus",
          "description": "Status of the test run - PASSED | FAILED | INTERRUPTED | TIMEDOUT"
        }
      },
      "required": [
        "numTotalTests",
        "numPassedTests",
        "numFailedTests",
        "numSkippedTests",
        "numFlakyTests",
        "status"
      ]
    },
    "ReportingSummaryCreateOrUpdate": {
      "type": "object",
      "description": "Model representing summary of test run results.",
      "properties": {
        "numTotalTests": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of tests executed."
        },
        "numPassedTests": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tests that passed."
        },
        "numFailedTests": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tests that failed."
        },
        "numSkippedTests": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tests that were skipped."
        },
        "numFlakyTests": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tests that were flaky."
        },
        "status": {
          "$ref": "#/definitions/TestStatus",
          "description": "Status of the test run - PASSED | FAILED | INTERRUPTED | TIMEDOUT"
        }
      }
    },
    "RunnerType": {
      "type": "string",
      "description": "Supported Runner Types for tests",
      "enum": [
        "MSTEST",
        "NUNIT",
        "PLAYRIGHT"
      ],
      "x-ms-enum": {
        "name": "RunnerType",
        "modelAsString": true,
        "values": [
          {
            "name": "MSTEST",
            "value": "MSTEST",
            "description": "MSTEST"
          },
          {
            "name": "NUNIT",
            "value": "NUNIT",
            "description": "NUNIT"
          },
          {
            "name": "PLAYRIGHT",
            "value": "PLAYRIGHT",
            "description": "PLAYRIGHT"
          }
        ]
      }
    },
    "Shard": {
      "type": "object",
      "description": "Model representing a shard.",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of shards.",
          "maximum": 1000
        }
      },
      "required": [
        "total"
      ]
    },
    "ShardCreateOrUpdate": {
      "type": "object",
      "description": "Model representing a shard.",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of shards.",
          "maximum": 1000
        }
      }
    },
    "StatusSummary": {
      "type": "object",
      "description": "Count of a specific status such as PASSED for a run ",
      "properties": {
        "status": {
          "type": "string",
          "description": " Status of a testrun or test "
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": " Count  of the specified status"
        }
      },
      "required": [
        "status",
        "count"
      ]
    },
    "StatusSummaryList": {
      "type": "object",
      "description": "Summary statistics of tests.",
      "properties": {
        "statusSummary": {
          "type": "array",
          "description": "Model to represent status of testrun/test",
          "items": {
            "$ref": "#/definitions/StatusSummary"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "statusSummary"
      ]
    },
    "TestFramework": {
      "type": "object",
      "description": "Model representing a test framework.",
      "properties": {
        "name": {
          "$ref": "#/definitions/TestFrameworkName",
          "description": "Name of the test framework. Supported Frameworks are Playwright"
        },
        "version": {
          "type": "string",
          "description": "Version of the test framework."
        },
        "runnerName": {
          "$ref": "#/definitions/RunnerType",
          "description": "Name of the test runner.Supported Frameworks are MSTEST, Playwright, NUNIT"
        }
      },
      "required": [
        "name",
        "version",
        "runnerName"
      ]
    },
    "TestFrameworkCreateOrUpdate": {
      "type": "object",
      "description": "Model representing a test framework.",
      "properties": {
        "name": {
          "$ref": "#/definitions/TestFrameworkName",
          "description": "Name of the test framework. Supported Frameworks are Playwright"
        },
        "version": {
          "type": "string",
          "description": "Version of the test framework."
        },
        "runnerName": {
          "$ref": "#/definitions/RunnerType",
          "description": "Name of the test runner.Supported Frameworks are MSTEST, Playwright, NUNIT"
        }
      }
    },
    "TestFrameworkName": {
      "type": "string",
      "description": "Supported Framework",
      "enum": [
        "PLAYRIGHT"
      ],
      "x-ms-enum": {
        "name": "TestFrameworkName",
        "modelAsString": true,
        "values": [
          {
            "name": "PLAYRIGHT",
            "value": "PLAYRIGHT",
            "description": "PLAYRIGHT"
          }
        ]
      }
    },
    "TestResult": {
      "type": "object",
      "description": "Details of a single test result.",
      "properties": {
        "testExecutionId": {
          "type": "string",
          "description": "Identifier of the test execution.",
          "maxLength": 200,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testId": {
          "type": "string",
          "description": "Identifier of the test.",
          "maxLength": 200,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testCombinationId": {
          "type": "string",
          "description": "Identifier of the test combination.",
          "maxLength": 200,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "runId": {
          "type": "string",
          "description": "Identifier of the test run.",
          "maxLength": 200,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "shardId": {
          "type": "string",
          "description": "Identifier of the shard.",
          "maxLength": 200,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "accountId": {
          "type": "string",
          "description": "Identifier of the account.",
          "maxLength": 200,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "suiteId": {
          "type": "string",
          "description": "Identifier of the suite.",
          "maxLength": 200,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testTitle": {
          "type": "string",
          "description": "Title of the test.",
          "maxLength": 500,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "suiteTitle": {
          "type": "string",
          "description": "Title of the suite.",
          "maxLength": 500,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "fileName": {
          "type": "string",
          "description": "Name of the file.",
          "maxLength": 300,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "lineNumber": {
          "type": "integer",
          "format": "uint32",
          "description": "Line number.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "retry": {
          "type": "integer",
          "format": "uint32",
          "description": "Number of retry attempts. max retry is 20. After which testresults metadata will not be stored",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "status": {
          "$ref": "#/definitions/TestStatus",
          "description": "Status of the test.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "webTestConfig": {
          "$ref": "#/definitions/WebTestConfig",
          "description": "Configuration for the web test.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "ciConfig": {
          "$ref": "#/definitions/CiConfig",
          "description": "Continuous integration configuration.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "resultsSummary": {
          "$ref": "#/definitions/TestResultsSummary",
          "description": "Summary of test results.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "previousRetries": {
          "type": "array",
          "description": "Previous retry summaries.",
          "items": {
            "$ref": "#/definitions/PreviousRetrySummary"
          },
          "x-ms-identifiers": []
        },
        "tags": {
          "type": "array",
          "description": "List of tags associated with the test result.",
          "maxItems": 100,
          "items": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "annotations": {
          "type": "array",
          "description": "List of annotations.",
          "maxItems": 100,
          "items": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "artifactsPath": {
          "type": "string",
          "description": "Relative path in Storage for all the artifacts of this test",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "testExecutionId",
        "testId",
        "testCombinationId",
        "runId",
        "shardId",
        "accountId",
        "suiteId",
        "testTitle",
        "suiteTitle",
        "fileName",
        "lineNumber",
        "retry",
        "status",
        "resultsSummary",
        "artifactsPath"
      ]
    },
    "TestResultsSummary": {
      "type": "object",
      "description": "Summary of test results.",
      "properties": {
        "status": {
          "$ref": "#/definitions/TestStatus",
          "description": "Status of the test results."
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "description": "Duration of the test execution in milliseconds."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the test execution.- (RFC 3339 literal format)"
        },
        "attachmentsMetadata": {
          "type": "string",
          "description": "Metadata related to attachments- comma separated IMAGE, VIDEO, TRACE as applicable"
        }
      },
      "required": [
        "status",
        "duration",
        "startTime"
      ]
    },
    "TestResultsUri": {
      "type": "object",
      "description": "Model representing a test results URI.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "URI for accessing test results."
        },
        "createdAt": {
          "type": "string",
          "description": "Creation timestamp of the test results URI- RFC 3339 literal format"
        },
        "expiresAt": {
          "type": "string",
          "description": "Expiration timestamp of the test results URI- RFC 3339 literal format"
        },
        "accessLevel": {
          "$ref": "#/definitions/AccessLevel",
          "description": "Access level for the test results URI."
        }
      },
      "required": [
        "uri",
        "createdAt",
        "expiresAt",
        "accessLevel"
      ]
    },
    "TestResultsUriCreateOrUpdate": {
      "type": "object",
      "description": "Model representing a test results URI.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "URI for accessing test results."
        },
        "createdAt": {
          "type": "string",
          "description": "Creation timestamp of the test results URI- RFC 3339 literal format"
        },
        "expiresAt": {
          "type": "string",
          "description": "Expiration timestamp of the test results URI- RFC 3339 literal format"
        },
        "accessLevel": {
          "$ref": "#/definitions/AccessLevel",
          "description": "Access level for the test results URI."
        }
      }
    },
    "TestRun": {
      "type": "object",
      "description": "Model representing detailed information about a test run.",
      "properties": {
        "testRunId": {
          "type": "string",
          "description": "Identifier of the test run.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the test run, unicode characters allowed.",
          "maxLength": 200
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the test run -RFC 3339 literal format",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "creatorId": {
          "type": "string",
          "description": "Creator's identifier."
        },
        "creatorName": {
          "type": "string",
          "description": "Creator's name."
        },
        "summary": {
          "$ref": "#/definitions/CloudRunSummary",
          "description": "Summary of the test run."
        },
        "resultsSummary": {
          "$ref": "#/definitions/ReportingSummary",
          "description": "Summary of test run results."
        },
        "ciConfig": {
          "$ref": "#/definitions/CiConfig",
          "description": "Continuous integration configuration.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testRunConfig": {
          "$ref": "#/definitions/TestRunConfig",
          "description": "Client configuration for the test run.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testResultsUri": {
          "$ref": "#/definitions/TestResultsUri",
          "description": "URI for accessing test results."
        },
        "isCloudRunEnabled": {
          "type": "boolean",
          "description": "Flag indicating if cloud run is enabled."
        },
        "isCloudReportingEnabled": {
          "type": "boolean",
          "description": "Must be set to true when Customers want to use Reporting Feature ",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "testRunId",
        "startTime",
        "creatorId",
        "creatorName",
        "summary",
        "resultsSummary",
        "testRunConfig",
        "testResultsUri",
        "isCloudRunEnabled",
        "isCloudReportingEnabled"
      ]
    },
    "TestRunConfig": {
      "type": "object",
      "description": "Model representing client configuration.",
      "properties": {
        "retries": {
          "type": "integer",
          "format": "int32",
          "description": "Number of retry attempts.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "repeatEach": {
          "type": "integer",
          "format": "int32",
          "description": "Interval between repeated test runs.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of worker instances.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testFramework": {
          "$ref": "#/definitions/TestFramework",
          "description": "Details of the test framework used.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "shards": {
          "$ref": "#/definitions/Shard",
          "description": "Details of the shards used in the test.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "timeout": {
          "type": "integer",
          "format": "int32",
          "description": "Timeout duration for test execution.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testType": {
          "type": "string",
          "description": "Type of test being executed (default: WebTest).",
          "default": "WebTest",
          "maxLength": 200,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testSdkLanguage": {
          "$ref": "#/definitions/TestSdkLanguage",
          "description": "Programming language used for the test SDK. Supported languages are 'JavaScript', 'TypeScript', 'Csharp'",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "reporterPackageVersion": {
          "type": "string",
          "description": "Version of the reporter package.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "timeout",
        "testSdkLanguage"
      ]
    },
    "TestRunConfigCreateOrUpdate": {
      "type": "object",
      "description": "Model representing client configuration.",
      "properties": {
        "retries": {
          "type": "integer",
          "format": "int32",
          "description": "Number of retry attempts.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "repeatEach": {
          "type": "integer",
          "format": "int32",
          "description": "Interval between repeated test runs.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of worker instances.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testFramework": {
          "$ref": "#/definitions/TestFrameworkCreateOrUpdate",
          "description": "Details of the test framework used.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "shards": {
          "$ref": "#/definitions/ShardCreateOrUpdate",
          "description": "Details of the shards used in the test.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "timeout": {
          "type": "integer",
          "format": "int32",
          "description": "Timeout duration for test execution.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testType": {
          "type": "string",
          "description": "Type of test being executed (default: WebTest).",
          "default": "WebTest",
          "maxLength": 200,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testSdkLanguage": {
          "$ref": "#/definitions/TestSdkLanguage",
          "description": "Programming language used for the test SDK. Supported languages are 'JavaScript', 'TypeScript', 'Csharp'",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "reporterPackageVersion": {
          "type": "string",
          "description": "Version of the reporter package.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      }
    },
    "TestRunCreateOrUpdate": {
      "type": "object",
      "description": "Model representing detailed information about a test run.",
      "properties": {
        "testRunId": {
          "type": "string",
          "description": "Identifier of the test run.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the test run, unicode characters allowed.",
          "maxLength": 200
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the test run -RFC 3339 literal format",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "creatorId": {
          "type": "string",
          "description": "Creator's identifier."
        },
        "creatorName": {
          "type": "string",
          "description": "Creator's name."
        },
        "summary": {
          "$ref": "#/definitions/CloudRunSummaryCreateOrUpdate",
          "description": "Summary of the test run."
        },
        "resultsSummary": {
          "$ref": "#/definitions/ReportingSummaryCreateOrUpdate",
          "description": "Summary of test run results."
        },
        "ciConfig": {
          "$ref": "#/definitions/CiConfig",
          "description": "Continuous integration configuration.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testRunConfig": {
          "$ref": "#/definitions/TestRunConfigCreateOrUpdate",
          "description": "Client configuration for the test run.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "testResultsUri": {
          "$ref": "#/definitions/TestResultsUriCreateOrUpdate",
          "description": "URI for accessing test results."
        },
        "isCloudRunEnabled": {
          "type": "boolean",
          "description": "Flag indicating if cloud run is enabled."
        },
        "isCloudReportingEnabled": {
          "type": "boolean",
          "description": "Must be set to true when Customers want to use Reporting Feature ",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      }
    },
    "TestRunShardDto": {
      "type": "object",
      "description": "DTO representing a Test Run Shard.",
      "properties": {
        "shardId": {
          "type": "string",
          "description": "Shard Id for the shard",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "summary": {
          "$ref": "#/definitions/UpdateShardExecutionSummary",
          "description": "Summary of the test run shard.",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "number of workers used by playwright client.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "isUploadCompleted": {
          "type": "boolean",
          "description": "Flag indicating if upload is completed for the shard.",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        }
      },
      "required": [
        "shardId",
        "summary",
        "workers"
      ]
    },
    "TestRunStatus": {
      "type": "string",
      "description": "Status of the test run.",
      "enum": [
        "RUNNING",
        "CLIENT_COMPLETE",
        "SERVER_COMPLETE"
      ],
      "x-ms-enum": {
        "name": "TestRunStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "RUNNING",
            "value": "RUNNING",
            "description": "The test run is currently running."
          },
          {
            "name": "CLIENT_COMPLETE",
            "value": "CLIENT_COMPLETE",
            "description": "The test run completed on the client side."
          },
          {
            "name": "SERVER_COMPLETE",
            "value": "SERVER_COMPLETE",
            "description": "The test run completed on the server side."
          }
        ]
      }
    },
    "TestRunsMetadata": {
      "type": "object",
      "description": "Metadata for  testruns/builds.",
      "properties": {
        "branches": {
          "type": "array",
          "description": "List of CI branches for a testrun",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "branches"
      ]
    },
    "TestSdkLanguage": {
      "type": "string",
      "description": "Supported Test SDK Language.",
      "enum": [
        "JAVASCRIPT",
        "TYPESCRIPT",
        "CSHARP"
      ],
      "x-ms-enum": {
        "name": "TestSdkLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "JAVASCRIPT",
            "value": "JAVASCRIPT",
            "description": "JavaScript."
          },
          {
            "name": "TYPESCRIPT",
            "value": "TYPESCRIPT",
            "description": "TypeScript"
          },
          {
            "name": "CSHARP",
            "value": "CSHARP",
            "description": "Csharp"
          }
        ]
      }
    },
    "TestStatus": {
      "type": "string",
      "description": "status of a test execution",
      "enum": [
        "PASSED",
        "FAILED",
        "SKIPPED",
        "INTERRUPTED",
        "TIMEDOUT"
      ],
      "x-ms-enum": {
        "name": "TestStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "PASSED",
            "value": "PASSED",
            "description": "The test passed successfully."
          },
          {
            "name": "FAILED",
            "value": "FAILED",
            "description": "The test failed."
          },
          {
            "name": "SKIPPED",
            "value": "SKIPPED",
            "description": "The test was skipped."
          },
          {
            "name": "INTERRUPTED",
            "value": "INTERRUPTED",
            "description": "The test was interrupted."
          },
          {
            "name": "TIMEDOUT",
            "value": "TIMEDOUT",
            "description": "The test timed out."
          }
        ]
      }
    },
    "UpdateShardExecutionSummary": {
      "type": "object",
      "description": "Model to update shard result.",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the test run in datetime(RFC 3339 literal format)."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time of the test run."
        },
        "errorMessages": {
          "type": "array",
          "description": "List of errorMessages encountered by  reporter client. Beyond the limit errorMessages will be truncated",
          "maxItems": 1000,
          "items": {
            "type": "string"
          }
        },
        "uploadMetadata": {
          "$ref": "#/definitions/UploadMetadata",
          "description": "Metadata related to test run uploads."
        }
      },
      "required": [
        "startTime",
        "endTime"
      ]
    },
    "UploadMetadata": {
      "type": "object",
      "description": "Model representing upload metadata.",
      "properties": {
        "numTestResults": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of test results uploaded."
        },
        "numTotalAttachments": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of attachments uploaded."
        },
        "sizeTotalAttachments": {
          "type": "integer",
          "format": "int64",
          "description": "Total size of attachments uploaded in Bytes."
        }
      },
      "required": [
        "numTestResults",
        "numTotalAttachments",
        "sizeTotalAttachments"
      ]
    },
    "UploadMetadataCreateOrUpdate": {
      "type": "object",
      "description": "Model representing upload metadata.",
      "properties": {
        "numTestResults": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of test results uploaded."
        },
        "numTotalAttachments": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of attachments uploaded."
        },
        "sizeTotalAttachments": {
          "type": "integer",
          "format": "int64",
          "description": "Total size of attachments uploaded in Bytes."
        }
      }
    },
    "UploadTestResultsRequest": {
      "type": "object",
      "description": "Request object for uploading test results.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of test results.",
          "maxItems": 100,
          "items": {
            "$ref": "#/definitions/TestResult"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value"
      ]
    },
    "WebTestConfig": {
      "type": "object",
      "description": "Configuration details for the web test.",
      "properties": {
        "jobName": {
          "type": "string",
          "description": "Name of the job.",
          "maxLength": 500
        },
        "projectName": {
          "type": "string",
          "description": "Name of the project.",
          "maxLength": 500
        },
        "browserType": {
          "$ref": "#/definitions/BrowserType",
          "description": "Name of the browser."
        },
        "os": {
          "$ref": "#/definitions/OsType",
          "description": "Operating system details."
        }
      },
      "required": [
        "jobName",
        "projectName",
        "browserType",
        "os"
      ]
    }
  },
  "parameters": {
    "Azure.Core.ClientRequestIdHeader": {
      "name": "x-ms-client-request-id",
      "in": "header",
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "required": false,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "clientRequestId"
    },
    "Azure.Core.FilterQueryParameter": {
      "name": "filter",
      "in": "query",
      "description": "Filter the result list using the given expression.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "Azure.Core.MaxPageSizeQueryParameter": {
      "name": "maxpagesize",
      "in": "query",
      "description": "The maximum number of result items per page.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.OrderByQueryParameter": {
      "name": "orderby",
      "in": "query",
      "description": "Expressions that specify the order of returned results.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.SkipQueryParameter": {
      "name": "skip",
      "in": "query",
      "description": "The number of result items to skip.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.TopQueryParameter": {
      "name": "top",
      "in": "query",
      "description": "The number of result items to return.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    }
  }
}
