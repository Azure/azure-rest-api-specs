// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armplaywrighttesting

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzurePlaywrightServiceAccountsClient contains the methods for the Microsoft.AzurePlaywrightService namespace.
// Don't use this type directly, use NewAzurePlaywrightServiceAccountsClient() instead.
type AzurePlaywrightServiceAccountsClient struct {
	internal *arm.Client
}

// NewAzurePlaywrightServiceAccountsClient creates a new instance of AzurePlaywrightServiceAccountsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzurePlaywrightServiceAccountsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*AzurePlaywrightServiceAccountsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzurePlaywrightServiceAccountsClient{
		internal: cl,
	}
	return client, nil
}

// CheckNameAvailability - Adds check global name availability operation, normally used if a resource name must be globally
// unique.
//   - subscriptionID - The ID of the target subscription.
//   - body - The CheckAvailability request
//   - options - AzurePlaywrightServiceAccountsClientCheckNameAvailabilityOptions contains the optional parameters for the AzurePlaywrightServiceAccountsClient.CheckNameAvailability
//     method.
func (client *AzurePlaywrightServiceAccountsClient) CheckNameAvailability(ctx context.Context, subscriptionID string, body CheckNameAvailabilityRequest, options *AzurePlaywrightServiceAccountsClientCheckNameAvailabilityOptions) (AzurePlaywrightServiceAccountsClientCheckNameAvailabilityResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzurePlaywrightServiceAccountsClient.CheckNameAvailability")
	req, err := client.checkNameAvailabilityCreateRequest(ctx, subscriptionID, body, options)
	if err != nil {
		return AzurePlaywrightServiceAccountsClientCheckNameAvailabilityResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzurePlaywrightServiceAccountsClientCheckNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzurePlaywrightServiceAccountsClientCheckNameAvailabilityResponse{}, err
	}
	resp, err := client.checkNameAvailabilityHandleResponse(httpResp)
	return resp, err
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *AzurePlaywrightServiceAccountsClient) checkNameAvailabilityCreateRequest(ctx context.Context, subscriptionID string, body CheckNameAvailabilityRequest, options *AzurePlaywrightServiceAccountsClientCheckNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzurePlaywrightService/checkNameAvailability"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *AzurePlaywrightServiceAccountsClient) checkNameAvailabilityHandleResponse(resp *http.Response) (AzurePlaywrightServiceAccountsClientCheckNameAvailabilityResponse, error) {
	result := AzurePlaywrightServiceAccountsClientCheckNameAvailabilityResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckNameAvailabilityResponse); err != nil {
		return AzurePlaywrightServiceAccountsClientCheckNameAvailabilityResponse{}, err
	}
	return result, nil
}

// BeginCreateOrUpdate - Create a Account
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Name of account.
//   - resource - Resource create parameters.
//   - options - AzurePlaywrightServiceAccountsClientCreateOrUpdateOptions contains the optional parameters for the AzurePlaywrightServiceAccountsClient.CreateOrUpdate
//     method.
func (client *AzurePlaywrightServiceAccountsClient) BeginCreateOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, resource Account, options *AzurePlaywrightServiceAccountsClientCreateOrUpdateOptions) (*runtime.Poller[AzurePlaywrightServiceAccountsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, subscriptionID, resourceGroupName, accountName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzurePlaywrightServiceAccountsClientCreateOrUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzurePlaywrightServiceAccountsClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Create a Account
func (client *AzurePlaywrightServiceAccountsClient) createOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, resource Account, options *AzurePlaywrightServiceAccountsClientCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzurePlaywrightServiceAccountsClient.BeginCreateOrUpdate")
	req, err := client.createOrUpdateCreateRequest(ctx, subscriptionID, resourceGroupName, accountName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AzurePlaywrightServiceAccountsClient) createOrUpdateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, resource Account, options *AzurePlaywrightServiceAccountsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzurePlaywrightService/accounts/{accountName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a Account
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Name of account.
//   - options - AzurePlaywrightServiceAccountsClientDeleteOptions contains the optional parameters for the AzurePlaywrightServiceAccountsClient.Delete
//     method.
func (client *AzurePlaywrightServiceAccountsClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, options *AzurePlaywrightServiceAccountsClientDeleteOptions) (*runtime.Poller[AzurePlaywrightServiceAccountsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, accountName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzurePlaywrightServiceAccountsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzurePlaywrightServiceAccountsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a Account
func (client *AzurePlaywrightServiceAccountsClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, options *AzurePlaywrightServiceAccountsClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzurePlaywrightServiceAccountsClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, accountName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AzurePlaywrightServiceAccountsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, options *AzurePlaywrightServiceAccountsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzurePlaywrightService/accounts/{accountName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a Account
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Name of account.
//   - options - AzurePlaywrightServiceAccountsClientGetOptions contains the optional parameters for the AzurePlaywrightServiceAccountsClient.Get
//     method.
func (client *AzurePlaywrightServiceAccountsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, options *AzurePlaywrightServiceAccountsClientGetOptions) (AzurePlaywrightServiceAccountsClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzurePlaywrightServiceAccountsClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, accountName, options)
	if err != nil {
		return AzurePlaywrightServiceAccountsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzurePlaywrightServiceAccountsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzurePlaywrightServiceAccountsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AzurePlaywrightServiceAccountsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, options *AzurePlaywrightServiceAccountsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzurePlaywrightService/accounts/{accountName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzurePlaywrightServiceAccountsClient) getHandleResponse(resp *http.Response) (AzurePlaywrightServiceAccountsClientGetResponse, error) {
	result := AzurePlaywrightServiceAccountsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Account); err != nil {
		return AzurePlaywrightServiceAccountsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List Account resources by resource group
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - AzurePlaywrightServiceAccountsClientListByResourceGroupOptions contains the optional parameters for the AzurePlaywrightServiceAccountsClient.NewListByResourceGroupPager
//     method.
func (client *AzurePlaywrightServiceAccountsClient) NewListByResourceGroupPager(subscriptionID string, resourceGroupName string, options *AzurePlaywrightServiceAccountsClientListByResourceGroupOptions) *runtime.Pager[AzurePlaywrightServiceAccountsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzurePlaywrightServiceAccountsClientListByResourceGroupResponse]{
		More: func(page AzurePlaywrightServiceAccountsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzurePlaywrightServiceAccountsClientListByResourceGroupResponse) (AzurePlaywrightServiceAccountsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzurePlaywrightServiceAccountsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return AzurePlaywrightServiceAccountsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AzurePlaywrightServiceAccountsClient) listByResourceGroupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *AzurePlaywrightServiceAccountsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzurePlaywrightService/accounts"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AzurePlaywrightServiceAccountsClient) listByResourceGroupHandleResponse(resp *http.Response) (AzurePlaywrightServiceAccountsClientListByResourceGroupResponse, error) {
	result := AzurePlaywrightServiceAccountsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccountListResult); err != nil {
		return AzurePlaywrightServiceAccountsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List Account resources by subscription ID
//   - subscriptionID - The ID of the target subscription.
//   - options - AzurePlaywrightServiceAccountsClientListBySubscriptionOptions contains the optional parameters for the AzurePlaywrightServiceAccountsClient.NewListBySubscriptionPager
//     method.
func (client *AzurePlaywrightServiceAccountsClient) NewListBySubscriptionPager(subscriptionID string, options *AzurePlaywrightServiceAccountsClientListBySubscriptionOptions) *runtime.Pager[AzurePlaywrightServiceAccountsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzurePlaywrightServiceAccountsClientListBySubscriptionResponse]{
		More: func(page AzurePlaywrightServiceAccountsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzurePlaywrightServiceAccountsClientListBySubscriptionResponse) (AzurePlaywrightServiceAccountsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzurePlaywrightServiceAccountsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return AzurePlaywrightServiceAccountsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AzurePlaywrightServiceAccountsClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *AzurePlaywrightServiceAccountsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzurePlaywrightService/accounts"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AzurePlaywrightServiceAccountsClient) listBySubscriptionHandleResponse(resp *http.Response) (AzurePlaywrightServiceAccountsClientListBySubscriptionResponse, error) {
	result := AzurePlaywrightServiceAccountsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccountListResult); err != nil {
		return AzurePlaywrightServiceAccountsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Update a Account
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - Name of account.
//   - properties - The resource properties to be updated.
//   - options - AzurePlaywrightServiceAccountsClientUpdateOptions contains the optional parameters for the AzurePlaywrightServiceAccountsClient.Update
//     method.
func (client *AzurePlaywrightServiceAccountsClient) Update(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, properties AccountUpdate, options *AzurePlaywrightServiceAccountsClientUpdateOptions) (AzurePlaywrightServiceAccountsClientUpdateResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzurePlaywrightServiceAccountsClient.Update")
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, accountName, properties, options)
	if err != nil {
		return AzurePlaywrightServiceAccountsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzurePlaywrightServiceAccountsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzurePlaywrightServiceAccountsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *AzurePlaywrightServiceAccountsClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, properties AccountUpdate, options *AzurePlaywrightServiceAccountsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzurePlaywrightService/accounts/{accountName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *AzurePlaywrightServiceAccountsClient) updateHandleResponse(resp *http.Response) (AzurePlaywrightServiceAccountsClientUpdateResponse, error) {
	result := AzurePlaywrightServiceAccountsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Account); err != nil {
		return AzurePlaywrightServiceAccountsClientUpdateResponse{}, err
	}
	return result, nil
}
