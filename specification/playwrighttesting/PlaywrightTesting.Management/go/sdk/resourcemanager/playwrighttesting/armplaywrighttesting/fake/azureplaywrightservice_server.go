// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// AzurePlaywrightServiceServer is a fake server for instances of the armplaywrighttesting.AzurePlaywrightServiceClient type.
type AzurePlaywrightServiceServer struct {
	// AzurePlaywrightServiceAccountQuotasServer contains the fakes for client AzurePlaywrightServiceAccountQuotasClient
	AzurePlaywrightServiceAccountQuotasServer AzurePlaywrightServiceAccountQuotasServer

	// AzurePlaywrightServiceAccountsServer contains the fakes for client AzurePlaywrightServiceAccountsClient
	AzurePlaywrightServiceAccountsServer AzurePlaywrightServiceAccountsServer

	// AzurePlaywrightServiceOperationsServer contains the fakes for client AzurePlaywrightServiceOperationsClient
	AzurePlaywrightServiceOperationsServer AzurePlaywrightServiceOperationsServer

	// AzurePlaywrightServiceQuotasServer contains the fakes for client AzurePlaywrightServiceQuotasClient
	AzurePlaywrightServiceQuotasServer AzurePlaywrightServiceQuotasServer
}

// NewAzurePlaywrightServiceServerTransport creates a new instance of AzurePlaywrightServiceServerTransport with the provided implementation.
// The returned AzurePlaywrightServiceServerTransport instance is connected to an instance of armplaywrighttesting.AzurePlaywrightServiceClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAzurePlaywrightServiceServerTransport(srv *AzurePlaywrightServiceServer) *AzurePlaywrightServiceServerTransport {
	return &AzurePlaywrightServiceServerTransport{srv: srv}
}

// AzurePlaywrightServiceServerTransport connects instances of armplaywrighttesting.AzurePlaywrightServiceClient to instances of AzurePlaywrightServiceServer.
// Don't use this type directly, use NewAzurePlaywrightServiceServerTransport instead.
type AzurePlaywrightServiceServerTransport struct {
	srv                                         *AzurePlaywrightServiceServer
	trMu                                        sync.Mutex
	trAzurePlaywrightServiceAccountQuotasServer *AzurePlaywrightServiceAccountQuotasServerTransport
	trAzurePlaywrightServiceAccountsServer      *AzurePlaywrightServiceAccountsServerTransport
	trAzurePlaywrightServiceOperationsServer    *AzurePlaywrightServiceOperationsServerTransport
	trAzurePlaywrightServiceQuotasServer        *AzurePlaywrightServiceQuotasServerTransport
}

// Do implements the policy.Transporter interface for AzurePlaywrightServiceServerTransport.
func (a *AzurePlaywrightServiceServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (a *AzurePlaywrightServiceServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "AzurePlaywrightServiceAccountQuotasClient":
		initServer(&a.trMu, &a.trAzurePlaywrightServiceAccountQuotasServer, func() *AzurePlaywrightServiceAccountQuotasServerTransport {
			return NewAzurePlaywrightServiceAccountQuotasServerTransport(&a.srv.AzurePlaywrightServiceAccountQuotasServer)
		})
		resp, err = a.trAzurePlaywrightServiceAccountQuotasServer.Do(req)
	case "AzurePlaywrightServiceAccountsClient":
		initServer(&a.trMu, &a.trAzurePlaywrightServiceAccountsServer, func() *AzurePlaywrightServiceAccountsServerTransport {
			return NewAzurePlaywrightServiceAccountsServerTransport(&a.srv.AzurePlaywrightServiceAccountsServer)
		})
		resp, err = a.trAzurePlaywrightServiceAccountsServer.Do(req)
	case "AzurePlaywrightServiceOperationsClient":
		initServer(&a.trMu, &a.trAzurePlaywrightServiceOperationsServer, func() *AzurePlaywrightServiceOperationsServerTransport {
			return NewAzurePlaywrightServiceOperationsServerTransport(&a.srv.AzurePlaywrightServiceOperationsServer)
		})
		resp, err = a.trAzurePlaywrightServiceOperationsServer.Do(req)
	case "AzurePlaywrightServiceQuotasClient":
		initServer(&a.trMu, &a.trAzurePlaywrightServiceQuotasServer, func() *AzurePlaywrightServiceQuotasServerTransport {
			return NewAzurePlaywrightServiceQuotasServerTransport(&a.srv.AzurePlaywrightServiceQuotasServer)
		})
		resp, err = a.trAzurePlaywrightServiceQuotasServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
