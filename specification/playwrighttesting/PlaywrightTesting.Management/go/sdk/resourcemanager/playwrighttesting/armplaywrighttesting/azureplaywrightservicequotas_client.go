// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armplaywrighttesting

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzurePlaywrightServiceQuotasClient contains the methods for the Microsoft.AzurePlaywrightService namespace.
// Don't use this type directly, use NewAzurePlaywrightServiceQuotasClient() instead.
type AzurePlaywrightServiceQuotasClient struct {
	internal *arm.Client
}

// NewAzurePlaywrightServiceQuotasClient creates a new instance of AzurePlaywrightServiceQuotasClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzurePlaywrightServiceQuotasClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*AzurePlaywrightServiceQuotasClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzurePlaywrightServiceQuotasClient{
		internal: cl,
	}
	return client, nil
}

// Get - Get subscription quota by name.
//   - subscriptionID - The ID of the target subscription.
//   - location - The location of quota in ARM Normalized format like eastus, southeastasia etc.
//   - quotaName - The quota name.
//   - options - AzurePlaywrightServiceQuotasClientGetOptions contains the optional parameters for the AzurePlaywrightServiceQuotasClient.Get
//     method.
func (client *AzurePlaywrightServiceQuotasClient) Get(ctx context.Context, subscriptionID string, location string, quotaName QuotaNames, options *AzurePlaywrightServiceQuotasClientGetOptions) (AzurePlaywrightServiceQuotasClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzurePlaywrightServiceQuotasClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, location, quotaName, options)
	if err != nil {
		return AzurePlaywrightServiceQuotasClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzurePlaywrightServiceQuotasClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzurePlaywrightServiceQuotasClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AzurePlaywrightServiceQuotasClient) getCreateRequest(ctx context.Context, subscriptionID string, location string, quotaName QuotaNames, options *AzurePlaywrightServiceQuotasClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzurePlaywrightService/locations/{location}/quotas/{quotaName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if quotaName == "" {
		return nil, errors.New("parameter quotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{quotaName}", url.PathEscape(string(quotaName)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzurePlaywrightServiceQuotasClient) getHandleResponse(resp *http.Response) (AzurePlaywrightServiceQuotasClientGetResponse, error) {
	result := AzurePlaywrightServiceQuotasClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Quota); err != nil {
		return AzurePlaywrightServiceQuotasClientGetResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List quotas for a given subscription Id.
//   - subscriptionID - The ID of the target subscription.
//   - location - The location of quota in ARM Normalized format like eastus, southeastasia etc.
//   - options - AzurePlaywrightServiceQuotasClientListBySubscriptionOptions contains the optional parameters for the AzurePlaywrightServiceQuotasClient.NewListBySubscriptionPager
//     method.
func (client *AzurePlaywrightServiceQuotasClient) NewListBySubscriptionPager(subscriptionID string, location string, options *AzurePlaywrightServiceQuotasClientListBySubscriptionOptions) *runtime.Pager[AzurePlaywrightServiceQuotasClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzurePlaywrightServiceQuotasClientListBySubscriptionResponse]{
		More: func(page AzurePlaywrightServiceQuotasClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzurePlaywrightServiceQuotasClientListBySubscriptionResponse) (AzurePlaywrightServiceQuotasClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzurePlaywrightServiceQuotasClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, location, options)
			}, nil)
			if err != nil {
				return AzurePlaywrightServiceQuotasClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AzurePlaywrightServiceQuotasClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, location string, options *AzurePlaywrightServiceQuotasClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzurePlaywrightService/locations/{location}/quotas"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AzurePlaywrightServiceQuotasClient) listBySubscriptionHandleResponse(resp *http.Response) (AzurePlaywrightServiceQuotasClientListBySubscriptionResponse, error) {
	result := AzurePlaywrightServiceQuotasClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QuotaListResult); err != nil {
		return AzurePlaywrightServiceQuotasClientListBySubscriptionResponse{}, err
	}
	return result, nil
}
