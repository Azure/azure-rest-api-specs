// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/playwrighttesting/armplaywrighttesting"
	"net/http"
	"net/url"
	"regexp"
)

// AzurePlaywrightServiceAccountQuotasServer is a fake server for instances of the armplaywrighttesting.AzurePlaywrightServiceAccountQuotasClient type.
type AzurePlaywrightServiceAccountQuotasServer struct {
	// Get is the fake for method AzurePlaywrightServiceAccountQuotasClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, subscriptionID string, resourceGroupName string, accountName string, quotaName armplaywrighttesting.QuotaNames, options *armplaywrighttesting.AzurePlaywrightServiceAccountQuotasClientGetOptions) (resp azfake.Responder[armplaywrighttesting.AzurePlaywrightServiceAccountQuotasClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByAccountPager is the fake for method AzurePlaywrightServiceAccountQuotasClient.NewListByAccountPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByAccountPager func(subscriptionID string, resourceGroupName string, accountName string, options *armplaywrighttesting.AzurePlaywrightServiceAccountQuotasClientListByAccountOptions) (resp azfake.PagerResponder[armplaywrighttesting.AzurePlaywrightServiceAccountQuotasClientListByAccountResponse])
}

// NewAzurePlaywrightServiceAccountQuotasServerTransport creates a new instance of AzurePlaywrightServiceAccountQuotasServerTransport with the provided implementation.
// The returned AzurePlaywrightServiceAccountQuotasServerTransport instance is connected to an instance of armplaywrighttesting.AzurePlaywrightServiceAccountQuotasClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAzurePlaywrightServiceAccountQuotasServerTransport(srv *AzurePlaywrightServiceAccountQuotasServer) *AzurePlaywrightServiceAccountQuotasServerTransport {
	return &AzurePlaywrightServiceAccountQuotasServerTransport{
		srv:                   srv,
		newListByAccountPager: newTracker[azfake.PagerResponder[armplaywrighttesting.AzurePlaywrightServiceAccountQuotasClientListByAccountResponse]](),
	}
}

// AzurePlaywrightServiceAccountQuotasServerTransport connects instances of armplaywrighttesting.AzurePlaywrightServiceAccountQuotasClient to instances of AzurePlaywrightServiceAccountQuotasServer.
// Don't use this type directly, use NewAzurePlaywrightServiceAccountQuotasServerTransport instead.
type AzurePlaywrightServiceAccountQuotasServerTransport struct {
	srv                   *AzurePlaywrightServiceAccountQuotasServer
	newListByAccountPager *tracker[azfake.PagerResponder[armplaywrighttesting.AzurePlaywrightServiceAccountQuotasClientListByAccountResponse]]
}

// Do implements the policy.Transporter interface for AzurePlaywrightServiceAccountQuotasServerTransport.
func (a *AzurePlaywrightServiceAccountQuotasServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *AzurePlaywrightServiceAccountQuotasServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "AzurePlaywrightServiceAccountQuotasClient.Get":
		resp, err = a.dispatchGet(req)
	case "AzurePlaywrightServiceAccountQuotasClient.NewListByAccountPager":
		resp, err = a.dispatchNewListByAccountPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (a *AzurePlaywrightServiceAccountQuotasServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzurePlaywrightService/accounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotas/(?P<quotaName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	quotaNameParam, err := parseWithCast(matches[regex.SubexpIndex("quotaName")], func(v string) (armplaywrighttesting.QuotaNames, error) {
		p, unescapeErr := url.PathUnescape(v)
		if unescapeErr != nil {
			return "", unescapeErr
		}
		return armplaywrighttesting.QuotaNames(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), subscriptionIDParam, resourceGroupNameParam, accountNameParam, quotaNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AccountQuota, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AzurePlaywrightServiceAccountQuotasServerTransport) dispatchNewListByAccountPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByAccountPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByAccountPager not implemented")}
	}
	newListByAccountPager := a.newListByAccountPager.get(req)
	if newListByAccountPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzurePlaywrightService/accounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotas`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListByAccountPager(subscriptionIDParam, resourceGroupNameParam, accountNameParam, nil)
		newListByAccountPager = &resp
		a.newListByAccountPager.add(req, newListByAccountPager)
		server.PagerResponderInjectNextLinks(newListByAccountPager, req, func(page *armplaywrighttesting.AzurePlaywrightServiceAccountQuotasClientListByAccountResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByAccountPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByAccountPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByAccountPager) {
		a.newListByAccountPager.remove(req)
	}
	return resp, nil
}
