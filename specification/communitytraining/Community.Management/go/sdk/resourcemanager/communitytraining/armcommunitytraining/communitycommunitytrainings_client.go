// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcommunitytraining

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CommunityCommunityTrainingsClient contains the methods for the Microsoft.Community namespace.
// Don't use this type directly, use NewCommunityCommunityTrainingsClient() instead.
type CommunityCommunityTrainingsClient struct {
	internal *arm.Client
}

// NewCommunityCommunityTrainingsClient creates a new instance of CommunityCommunityTrainingsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCommunityCommunityTrainingsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*CommunityCommunityTrainingsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CommunityCommunityTrainingsClient{
		internal: cl,
	}
	return client, nil
}

// BeginCreate - Create a CommunityTraining
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communityTrainingName - The name of the Community Training Resource
//   - resource - Resource create parameters.
//   - options - CommunityCommunityTrainingsClientCreateOptions contains the optional parameters for the CommunityCommunityTrainingsClient.Create
//     method.
func (client *CommunityCommunityTrainingsClient) BeginCreate(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, resource CommunityTraining, options *CommunityCommunityTrainingsClientCreateOptions) (*runtime.Poller[CommunityCommunityTrainingsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, subscriptionID, resourceGroupName, communityTrainingName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[CommunityCommunityTrainingsClientCreateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[CommunityCommunityTrainingsClientCreateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Create - Create a CommunityTraining
func (client *CommunityCommunityTrainingsClient) create(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, resource CommunityTraining, options *CommunityCommunityTrainingsClientCreateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CommunityCommunityTrainingsClient.BeginCreate")
	req, err := client.createCreateRequest(ctx, subscriptionID, resourceGroupName, communityTrainingName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *CommunityCommunityTrainingsClient) createCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, resource CommunityTraining, options *CommunityCommunityTrainingsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Community/communityTrainings/{communityTrainingName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communityTrainingName == "" {
		return nil, errors.New("parameter communityTrainingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communityTrainingName}", url.PathEscape(communityTrainingName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a CommunityTraining
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communityTrainingName - The name of the Community Training Resource
//   - options - CommunityCommunityTrainingsClientDeleteOptions contains the optional parameters for the CommunityCommunityTrainingsClient.Delete
//     method.
func (client *CommunityCommunityTrainingsClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, options *CommunityCommunityTrainingsClientDeleteOptions) (*runtime.Poller[CommunityCommunityTrainingsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, communityTrainingName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[CommunityCommunityTrainingsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[CommunityCommunityTrainingsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a CommunityTraining
func (client *CommunityCommunityTrainingsClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, options *CommunityCommunityTrainingsClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CommunityCommunityTrainingsClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, communityTrainingName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CommunityCommunityTrainingsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, options *CommunityCommunityTrainingsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Community/communityTrainings/{communityTrainingName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communityTrainingName == "" {
		return nil, errors.New("parameter communityTrainingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communityTrainingName}", url.PathEscape(communityTrainingName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a CommunityTraining
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communityTrainingName - The name of the Community Training Resource
//   - options - CommunityCommunityTrainingsClientGetOptions contains the optional parameters for the CommunityCommunityTrainingsClient.Get
//     method.
func (client *CommunityCommunityTrainingsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, options *CommunityCommunityTrainingsClientGetOptions) (CommunityCommunityTrainingsClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CommunityCommunityTrainingsClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, communityTrainingName, options)
	if err != nil {
		return CommunityCommunityTrainingsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CommunityCommunityTrainingsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return CommunityCommunityTrainingsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *CommunityCommunityTrainingsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, options *CommunityCommunityTrainingsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Community/communityTrainings/{communityTrainingName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communityTrainingName == "" {
		return nil, errors.New("parameter communityTrainingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communityTrainingName}", url.PathEscape(communityTrainingName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CommunityCommunityTrainingsClient) getHandleResponse(resp *http.Response) (CommunityCommunityTrainingsClientGetResponse, error) {
	result := CommunityCommunityTrainingsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CommunityTraining); err != nil {
		return CommunityCommunityTrainingsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List CommunityTraining resources by resource group
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CommunityCommunityTrainingsClientListByResourceGroupOptions contains the optional parameters for the CommunityCommunityTrainingsClient.NewListByResourceGroupPager
//     method.
func (client *CommunityCommunityTrainingsClient) NewListByResourceGroupPager(subscriptionID string, resourceGroupName string, options *CommunityCommunityTrainingsClientListByResourceGroupOptions) *runtime.Pager[CommunityCommunityTrainingsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[CommunityCommunityTrainingsClientListByResourceGroupResponse]{
		More: func(page CommunityCommunityTrainingsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CommunityCommunityTrainingsClientListByResourceGroupResponse) (CommunityCommunityTrainingsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CommunityCommunityTrainingsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return CommunityCommunityTrainingsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *CommunityCommunityTrainingsClient) listByResourceGroupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *CommunityCommunityTrainingsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Community/communityTrainings"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *CommunityCommunityTrainingsClient) listByResourceGroupHandleResponse(resp *http.Response) (CommunityCommunityTrainingsClientListByResourceGroupResponse, error) {
	result := CommunityCommunityTrainingsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListResult); err != nil {
		return CommunityCommunityTrainingsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List CommunityTraining resources by subscription ID
//   - subscriptionID - The ID of the target subscription.
//   - options - CommunityCommunityTrainingsClientListBySubscriptionOptions contains the optional parameters for the CommunityCommunityTrainingsClient.NewListBySubscriptionPager
//     method.
func (client *CommunityCommunityTrainingsClient) NewListBySubscriptionPager(subscriptionID string, options *CommunityCommunityTrainingsClientListBySubscriptionOptions) *runtime.Pager[CommunityCommunityTrainingsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[CommunityCommunityTrainingsClientListBySubscriptionResponse]{
		More: func(page CommunityCommunityTrainingsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CommunityCommunityTrainingsClientListBySubscriptionResponse) (CommunityCommunityTrainingsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CommunityCommunityTrainingsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return CommunityCommunityTrainingsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *CommunityCommunityTrainingsClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *CommunityCommunityTrainingsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Community/communityTrainings"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *CommunityCommunityTrainingsClient) listBySubscriptionHandleResponse(resp *http.Response) (CommunityCommunityTrainingsClientListBySubscriptionResponse, error) {
	result := CommunityCommunityTrainingsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListResult); err != nil {
		return CommunityCommunityTrainingsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a CommunityTraining
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communityTrainingName - The name of the Community Training Resource
//   - properties - The resource properties to be updated.
//   - options - CommunityCommunityTrainingsClientUpdateOptions contains the optional parameters for the CommunityCommunityTrainingsClient.Update
//     method.
func (client *CommunityCommunityTrainingsClient) BeginUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, properties Update, options *CommunityCommunityTrainingsClientUpdateOptions) (*runtime.Poller[CommunityCommunityTrainingsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, subscriptionID, resourceGroupName, communityTrainingName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[CommunityCommunityTrainingsClientUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[CommunityCommunityTrainingsClientUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Update - Update a CommunityTraining
func (client *CommunityCommunityTrainingsClient) update(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, properties Update, options *CommunityCommunityTrainingsClientUpdateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CommunityCommunityTrainingsClient.BeginUpdate")
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, communityTrainingName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *CommunityCommunityTrainingsClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, communityTrainingName string, properties Update, options *CommunityCommunityTrainingsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Community/communityTrainings/{communityTrainingName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communityTrainingName == "" {
		return nil, errors.New("parameter communityTrainingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communityTrainingName}", url.PathEscape(communityTrainingName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
