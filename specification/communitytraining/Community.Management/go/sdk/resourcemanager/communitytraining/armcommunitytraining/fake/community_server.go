// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// CommunityServer is a fake server for instances of the armcommunitytraining.CommunityClient type.
type CommunityServer struct {
	// CommunityCommunityTrainingsServer contains the fakes for client CommunityCommunityTrainingsClient
	CommunityCommunityTrainingsServer CommunityCommunityTrainingsServer

	// CommunityOperationsServer contains the fakes for client CommunityOperationsClient
	CommunityOperationsServer CommunityOperationsServer
}

// NewCommunityServerTransport creates a new instance of CommunityServerTransport with the provided implementation.
// The returned CommunityServerTransport instance is connected to an instance of armcommunitytraining.CommunityClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCommunityServerTransport(srv *CommunityServer) *CommunityServerTransport {
	return &CommunityServerTransport{srv: srv}
}

// CommunityServerTransport connects instances of armcommunitytraining.CommunityClient to instances of CommunityServer.
// Don't use this type directly, use NewCommunityServerTransport instead.
type CommunityServerTransport struct {
	srv                                 *CommunityServer
	trMu                                sync.Mutex
	trCommunityCommunityTrainingsServer *CommunityCommunityTrainingsServerTransport
	trCommunityOperationsServer         *CommunityOperationsServerTransport
}

// Do implements the policy.Transporter interface for CommunityServerTransport.
func (c *CommunityServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (c *CommunityServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "CommunityCommunityTrainingsClient":
		initServer(&c.trMu, &c.trCommunityCommunityTrainingsServer, func() *CommunityCommunityTrainingsServerTransport {
			return NewCommunityCommunityTrainingsServerTransport(&c.srv.CommunityCommunityTrainingsServer)
		})
		resp, err = c.trCommunityCommunityTrainingsServer.Do(req)
	case "CommunityOperationsClient":
		initServer(&c.trMu, &c.trCommunityOperationsServer, func() *CommunityOperationsServerTransport {
			return NewCommunityOperationsServerTransport(&c.srv.CommunityOperationsServer)
		})
		resp, err = c.trCommunityOperationsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
