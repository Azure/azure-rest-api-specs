{
  "openapi": "3.0.1",
  "info": {
      "title": "Community Training REST APIs v1",
      "description": "Documentation for REST APIs (Version:1) of Community Training. <br><br> Note: Bearer Token is required..... Authenticate the token by clicking on the \"Authorize\" button or on the Lock icon. <br>",
      "version": "v1"
  },
  "paths": {
      "/api/v1/admin/globaladministrators": {
          "get": {
              "tags": [
                  "AdminApi"
              ],
              "summary": "Get list of organization administrators",
              "responses": {
                  "200": {
                      "description": "Organization administrators retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/SuperAdminsModel"
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "AdminApi"
              ],
              "summary": "Delete super administrators.",
              "requestBody": {
                  "description": "List of Super Administrator contacts to be removed.",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Successful deletion.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/OrganizationModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "If trying to remove self from the list."
                  }
              }
          }
      },
      "/api/v1/admin/analytics": {
          "get": {
              "tags": [
                  "AdminApi"
              ],
              "summary": "Get analytics reports filtered for categories or courses",
              "parameters": [
                  {
                      "name": "organizationId",
                      "in": "query",
                      "description": "Optional identifier to filter reports for an organization",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": -1
                      }
                  },
                  {
                      "name": "offerId",
                      "in": "query",
                      "description": "Optional identifier to filter reports for a category",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": -1
                      }
                  },
                  {
                      "name": "courseId",
                      "in": "query",
                      "description": "Optional identifier to filter reports for a course",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": -1
                      }
                  },
                  {
                      "name": "userId",
                      "in": "query",
                      "description": "Optional identifier to filter reports for a user",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": -1
                      }
                  },
                  {
                      "name": "offerName",
                      "in": "query",
                      "description": "Optional category name, required when filtering reports for a category",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Analytics reports retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AccessibleUsersModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Category Administrator doesn't have access to that category"
                  },
                  "404": {
                      "description": "Provided OfferId is invalid"
                  }
              }
          }
      },
      "/api/v1/admin/course/{courseId}/lessonAnalytics": {
          "get": {
              "tags": [
                  "AdminApi"
              ],
              "summary": "Get lesson analytics for course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Identifier to filter reports for a course",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Analytics reports retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AccessibleUsersModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "The Administrator doesn't have access to that course"
                  },
                  "404": {
                      "description": "Provided CourseId is invalid"
                  }
              }
          }
      },
      "/api/v1/admin/course/{courseId}/quizAnalytics": {
          "get": {
              "tags": [
                  "AdminApi"
              ],
              "summary": "Get quiz analytics for course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Identifier to filter reports for a course",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Analytics reports retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AccessibleUsersModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "The Administrator doesn't have access to that course"
                  },
                  "404": {
                      "description": "Provided CourseId is invalid"
                  }
              }
          }
      },
      "/api/v1/admin/category/{categoryId}/course/{courseId}/graphAnalytics": {
          "get": {
              "tags": [
                  "AdminApi"
              ],
              "summary": "Get analytics graph and course meta analytics for course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Identifier to filter reports for a course",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "Identifier to filter reports for a category",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Analytics reports retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AccessibleUsersModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "The Administrator doesn't have access to that category or course"
                  },
                  "404": {
                      "description": "Provided CategoryID or CourseId is invalid"
                  }
              }
          }
      },
      "/api/v1/admin/course/{courseId}/learnerAnalytics": {
          "get": {
              "tags": [
                  "AdminApi"
              ],
              "summary": "Get learner analytics for course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Identifier to filter reports for a course",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "searchTerm",
                      "in": "query",
                      "description": "Optional search term",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Analytics reports retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AccessibleUsersModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "The Administrator doesn't have access to that course"
                  },
                  "404": {
                      "description": "Provided CourseId is invalid"
                  }
              }
          }
      },
      "/api/v1/admin/users": {
          "get": {
              "tags": [
                  "AdminApi"
              ],
              "summary": "Get paginated list of all users.",
              "description": "Changes\r\n\r\n  1. This api now accepts 2 additional query parameters 'orgId' and 'orgName'. \r\n  \r\n      1.1. Pass these parameter to search users in the organization identified by 'orgId' or by 'orgName'.\r\n      \r\n      1.2. In case both 'orgId' and 'orgName' are passed.Preference will be given to 'orgId'.\r\n      \r\n      1.3. In case both 'orgId' and 'orgName' are missing. User will be listed from all organizations.\r\n      \r\n  2. Only super admins listed users from all the organizations.\r\n  3. Organization admin can listed users from the organizations where they have admin rights.",
              "parameters": [
                  {
                      "name": "orgId",
                      "in": "query",
                      "description": "Optional Parameter: Organization id.",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "orgName",
                      "in": "query",
                      "description": "Optional Parameter: Organization name.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "skip",
                      "in": "query",
                      "description": "Number of user entries to skip",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 0
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Number of user entries to retrieve after the skipped entries",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 1000
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Users retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AllUsersModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "The Administrator doesn't have access to fetch users"
                  },
                  "404": {
                      "description": "Provided OrgId/ OrgName is invalid"
                  }
              }
          }
      },
      "/api/v1/organizations/Administrators": {
          "post": {
              "tags": [
                  "AdminApi"
              ],
              "summary": "Add super administrators.",
              "requestBody": {
                  "description": "Contacts to be added as Super Administrators.",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Successful addition of Super Administrators.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/OrganizationModel"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Requested Super Administrator not found."
                  }
              }
          },
          "delete": {
              "tags": [
                  "AdminApi"
              ],
              "summary": "Delete super administrators.",
              "requestBody": {
                  "description": "List of Super Administrator contacts to be removed.",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Successful deletion.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/OrganizationModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "If trying to remove self from the list."
                  }
              }
          }
      },
      "/api/v1/Analytics/Course/{courseId}/Learner/{userId}": {
          "get": {
              "tags": [
                  "Analytics"
              ],
              "summary": "Get course progress details for a learner",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier for which learner progress details are to be retrieved",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier for which course progress details are to be retrieved",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Learner course progress details retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/LearnerModulesProgressDetail"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Insufficient permissions to get learner course progress details for the provided course or user"
                  },
                  "404": {
                      "description": "Invalid course or user identifier"
                  }
              }
          }
      },
      "/api/v1/Analytics/Course/{courseId}/Quiz/{quizId}/Learner/{userId}": {
          "get": {
              "tags": [
                  "Analytics"
              ],
              "summary": "Get quiz progress details report for a learner",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier for which learner progress details are to be retrieved",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "quizId",
                      "in": "path",
                      "description": "Quiz identifier for which learner progress details are to be retrieved",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier for which quiz progress details are to be retrieved",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Learner quiz progress details retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/UserQuizProgressDetails"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Insufficient permissions to get learner quiz progress details for the provided course or user"
                  },
                  "404": {
                      "description": "Invalid course, quiz or user identifier"
                  }
              }
          }
      },
      "/api/v1/Analytics/Learner/{userId}/ReportCard": {
          "get": {
              "tags": [
                  "Analytics"
              ],
              "summary": "Get report card for a learner",
              "parameters": [
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier for which the report card is to be retrieved",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Learner report card retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/LearnerReportCard"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Invalid user identifier"
                  }
              }
          }
      },
      "/api/v1/Category": {
          "post": {
              "tags": [
                  "Category"
              ],
              "summary": "Create a new category\r\nCategory data is not localized",
              "requestBody": {
                  "description": "Category metadata",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CategoryMetadata"
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Returns the category Id after successfully creating a new category",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "integer",
                                  "format": "int32"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "The caller doesn't have necessary permission for this organization"
                  },
                  "404": {
                      "description": "Organization doesn't exist"
                  }
              }
          }
      },
      "/api/v1/Category/{categoryId}": {
          "put": {
              "tags": [
                  "Category"
              ],
              "summary": "Update an existing category",
              "description": "Category data not localized.\r\nChanges\r\n1. Move all the courses in the selected category to the new organization.\r\n2. If category is being moved from a non common organization to common organization and 'IsGlobalContentEnabled' is enabled.\r\n   No relationship is broken.Update the category organization\r\n3. Else\r\n\r\n   3.1. Remove courses assigned to the users in current organization.\r\n   \r\n   3.2. Remove category and its courses from learning paths in current organization.\r\n   \r\n   3.3. Remove category and courses assigned to groups in current organization.\r\n   \r\n   3.4. Update category organization.\r\n   \r\n4. Only super admin or organization admin of organization to which category is being moved to can call this api.",
              "parameters": [
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "Identifier for the category to be updated",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "isAsync",
                      "in": "query",
                      "description": "Run this operation asynchronously.",
                      "schema": {
                          "type": "boolean",
                          "default": true
                      }
                  }
              ],
              "requestBody": {
                  "description": "Category metadata for update",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CategoryMetadata"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Category updated successfully"
                  },
                  "400": {
                      "description": "Category's Organization can't be updated from Global organization"
                  },
                  "403": {
                      "description": "The caller doesn't have necessary permission for this category/organization"
                  },
                  "404": {
                      "description": "Organization/Category doesn't exist"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Category"
              ],
              "summary": "Delete an existing category",
              "parameters": [
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "Identifier for the category to be deleted",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "204": {
                      "description": "Category deleted successfully"
                  },
                  "403": {
                      "description": "The caller doesn't have necessary permission for this category"
                  },
                  "404": {
                      "description": "Category doesn't exist"
                  }
              }
          }
      },
      "/api/v1/Category/{categoryId}/Administrators": {
          "post": {
              "tags": [
                  "Category"
              ],
              "summary": "Add category administrators",
              "parameters": [
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "Category identifier for which administrators are to be added",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "List of administrator contacts to be added",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Category administrators added successfully"
                  },
                  "403": {
                      "description": "The caller doesn't have necessary permission for this category"
                  },
                  "404": {
                      "description": "Category/user doesn't exist"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Category"
              ],
              "summary": "Remove category administrators.",
              "parameters": [
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "Category identifier from which administrators are to be removed",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "List of administrator contacts to be removed",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Category administrators removed successfully"
                  },
                  "403": {
                      "description": "The caller doesn't have necessary permission for this category"
                  },
                  "404": {
                      "description": "Category doesn't exist"
                  }
              }
          }
      },
      "/api/v1/category/{categoryId}/administrator/{adminUserId}": {
          "delete": {
              "tags": [
                  "Category"
              ],
              "summary": "Remove category administrator.",
              "parameters": [
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "Category identifier from which administrator is to be removed",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "adminUserId",
                      "in": "path",
                      "description": "User Id of the administrator to be removed",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Category administrator removed successfully"
                  },
                  "403": {
                      "description": "The caller doesn't have necessary permission for this category"
                  },
                  "404": {
                      "description": "Category doesn't exist"
                  }
              }
          }
      },
      "/api/v1/Category/{categoryId}/Course": {
          "post": {
              "tags": [
                  "Category"
              ],
              "summary": "Add a new course under a category",
              "parameters": [
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "Identifier for the category in which the course is to be added",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Course metadata for addition",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseMetadata"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseMetadata"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseMetadata"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseMetadata"
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Course added successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "integer",
                                  "format": "int32"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Input validation fails"
                  },
                  "404": {
                      "description": "Category doesn't exist"
                  }
              }
          }
      },
      "/api/v1/Category/Upload/SAS": {
          "get": {
              "tags": [
                  "Category"
              ],
              "summary": "Get SAS token with file upload permission",
              "responses": {
                  "200": {
                      "description": "SAS token generated successfully."
                  }
              }
          }
      },
      "/api/v1/Category/{categoryId}/Courses": {
          "post": {
              "tags": [
                  "Category"
              ],
              "summary": "Bulk upload courses",
              "description": "Bulk upload of course should be done in following manner:\r\n\r\n1. Course content files should be organized in a predefined structure.\r\n2. Get a SAS token for the container in which the course content files are to be uploaded.\r\n3. Upload the course content files to the container using the SAS token.\r\n4. Call this API with the category identifier.",
              "parameters": [
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "Identifier for the category in which the courses are to be added",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Import content object for holding import related data.",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportContent"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportContent"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportContent"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportContent"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "202": {
                      "description": "Course content files successfully validated and accepted for addition"
                  },
                  "400": {
                      "description": "Invalid Content type/file structure"
                  },
                  "404": {
                      "description": "Category doesn't exist"
                  }
              }
          }
      },
      "/api/v1/category/administrators": {
          "get": {
              "tags": [
                  "Category"
              ],
              "summary": "Get category administrators",
              "parameters": [
                  {
                      "name": "offerId",
                      "in": "query",
                      "description": "Category identifier for which administrators are to be retrieved",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "organizationId",
                      "in": "query",
                      "description": "Identifier for the organization containing the category",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Category administrators retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CategoryOfferEntity"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Insufficient permissions to get administrators of provided category"
                  },
                  "404": {
                      "description": "Category not found"
                  }
              }
          }
      },
      "/api/v1/Certificate/Templates": {
          "get": {
              "tags": [
                  "Certificate"
              ],
              "summary": "Get all Certificate Templates",
              "responses": {
                  "200": {
                      "description": "Successful retrieval of all certificate templates",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CertificateTemplate"
                                  }
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "No certificate templates uploaded"
                  }
              }
          }
      },
      "/api/v1/Certificate/Template/{templateId}": {
          "get": {
              "tags": [
                  "Certificate"
              ],
              "summary": "Get Certificate Template corresponding to provided identifier",
              "parameters": [
                  {
                      "name": "templateId",
                      "in": "path",
                      "description": "The template identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successfully retrieval of certificate template metadata",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CertificateTemplate"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Incorrect template identifier"
                  }
              }
          },
          "put": {
              "tags": [
                  "Certificate"
              ],
              "summary": "Update a certificate template",
              "parameters": [
                  {
                      "name": "templateId",
                      "in": "path",
                      "description": "The template identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "The template data",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful update of existing template"
                  },
                  "404": {
                      "description": "Template with given template identifier does not exist"
                  },
                  "409": {
                      "description": "Certificate template name is not unique"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Certificate"
              ],
              "summary": "Delete a certificate template",
              "parameters": [
                  {
                      "name": "templateId",
                      "in": "path",
                      "description": "The template identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful deletion of certificate template"
                  },
                  "404": {
                      "description": "Template with given template identifier does not exist"
                  }
              }
          }
      },
      "/api/v1/Certificate/Template": {
          "post": {
              "tags": [
                  "Certificate"
              ],
              "summary": "Add a new certificate template",
              "requestBody": {
                  "description": "The template data",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Successful creation of new template",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "integer",
                                  "format": "int32"
                              }
                          }
                      }
                  },
                  "409": {
                      "description": "Certificate template name is not unique"
                  }
              }
          }
      },
      "/api/v1/Certificate/Template/Preview": {
          "post": {
              "tags": [
                  "Certificate"
              ],
              "summary": "Get preview certificate",
              "requestBody": {
                  "description": "The template data",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CertificateTemplate"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Successfully generate certificate preview Url",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid template Url or language"
                  }
              }
          }
      },
      "/api/v1/Certificates": {
          "get": {
              "tags": [
                  "Certificate"
              ],
              "summary": "Get all certificates for a user",
              "responses": {
                  "200": {
                      "description": "Successfully received all certificates",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CertificatesResponseModel"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/api/v1/offline/synchronize/courses/{courseId}": {
          "delete": {
              "tags": [
                  "ContentSync"
              ],
              "summary": "Publishes message to IoT Hub to delete course on edge devices.",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "The course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Course delete message posted to IoT Hub successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/EdgeDeviceListModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Administrator doesn't have access to that course"
                  },
                  "404": {
                      "description": "Provided course ID is invalid"
                  }
              }
          }
      },
      "/api/v1/Courses": {
          "get": {
              "tags": [
                  "Courses"
              ],
              "summary": "Get all self and auto-enrolled courses for the user when registration Status is null \r\nGet all registered courses for the user based on registration status",
              "parameters": [
                  {
                      "name": "registrationStatus",
                      "in": "query",
                      "description": "Registration status",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of course information",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ContentEntity"
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "No course exists for the user"
                  },
                  "400": {
                      "description": "Invalid registration status"
                  }
              }
          }
      },
      "/api/v1/Course/{courseId}/users": {
          "get": {
              "tags": [
                  "Courses"
              ],
              "summary": "Search users in the course",
              "parameters": [
                  {
                      "name": "searchTerm",
                      "in": "query",
                      "description": "Search term",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of users for the courseId",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/User"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid search term"
                  },
                  "403": {
                      "description": "User doesn't have permission"
                  },
                  "404": {
                      "description": "Course not found"
                  }
              }
          }
      },
      "/api/v1/Courses/{courseId}/Certificate": {
          "get": {
              "tags": [
                  "Courses"
              ],
              "summary": "Generate and get certificate URL for the course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful generation of certificate URL",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "No certificate generated"
                  }
              }
          }
      },
      "/api/v1/Courses/Status": {
          "put": {
              "tags": [
                  "Courses"
              ],
              "summary": "Update lesson completion status of the course",
              "requestBody": {
                  "description": "List of modules to be updated",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ModulesList"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ModulesList"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ModulesList"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ModulesList"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Successful updation of course modules",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CourseModuleResponseList"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid course module"
                  },
                  "403": {
                      "description": "User doesn't have permission"
                  }
              }
          }
      },
      "/api/v1/Courses/{courseId}/Lesson": {
          "get": {
              "tags": [
                  "Courses"
              ],
              "summary": "Get the course lesson(s) URL",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of lesson urls",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SecureLessonEntity"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User doesn't have permission"
                  },
                  "404": {
                      "description": "Course not found"
                  }
              }
          }
      },
      "/api/v1/Courses/{courseId}/Token": {
          "get": {
              "tags": [
                  "Courses"
              ],
              "summary": "Get token to access lesson's content",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful generation of token for accessing lesson content",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/MediaServicesToken"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Invalid or forbidden user."
                  },
                  "404": {
                      "description": "Course with the specified identifier not found."
                  }
              }
          }
      },
      "/api/v1/Courses/{courseId}/Metadata": {
          "get": {
              "tags": [
                  "Courses"
              ],
              "summary": "Get the meta data for the course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of CourseOutlineMode",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CourseOutlineModel"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Course with the specified identifier not found."
                  }
              }
          }
      },
      "/api/v1/course/administrators": {
          "get": {
              "tags": [
                  "Courses"
              ],
              "summary": "Get the course administrator(s)",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "query",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "skip",
                      "in": "query",
                      "description": "Number of rows to skip",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 0
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Required page size",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 1000
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of Administrator(s)",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CourseOfferEntity"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Invalid or forbidden user."
                  },
                  "404": {
                      "description": "Course with the specified identifier not found."
                  }
              }
          }
      },
      "/api/v1/admin/deleteCourseUserProgress": {
          "delete": {
              "tags": [
                  "Courses"
              ],
              "summary": "Delete progress of a user from a course.",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "query",
                      "description": "The course identifier",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "userContact",
                      "in": "query",
                      "description": "User's contact whose progress is to be deleted",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "204": {
                      "description": "Course user progress deletion successfully triggered asynchronously."
                  },
                  "404": {
                      "description": "The course does not exist."
                  }
              }
          }
      },
      "/api/v1/courses/{courseId}/users/completeprogress": {
          "post": {
              "tags": [
                  "Courses"
              ],
              "summary": "Marks a course as complete for the provided list of users",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Successfully marked completion status for all users"
                  },
                  "206": {
                      "description": "Successfully marked completion status for some users"
                  },
                  "400": {
                      "description": "Specified course or part of user data doesn't exist and/or is invalid"
                  },
                  "404": {
                      "description": "The course does not exist."
                  }
              }
          }
      },
      "/api/v1/courses/{courseId}/completeprogress": {
          "post": {
              "tags": [
                  "Courses"
              ],
              "summary": "Marks course complete for user, if course is external course, for now it is just for MS learn courses.",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successfully marked completion status for given user."
                  },
                  "400": {
                      "description": "Specified course or part of user data doesn't exist and/or is invalid."
                  },
                  "403": {
                      "description": "The user doesn't have permission."
                  },
                  "404": {
                      "description": "The course does not exist."
                  }
              }
          }
      },
      "/api/v1/courses/{courseId}/groups": {
          "get": {
              "tags": [
                  "Courses"
              ],
              "summary": "Get groups for a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "The course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Groups for course received successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GroupInfo"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "If the user doesn't have access to view groups for course."
                  },
                  "404": {
                      "description": "If the course Id is not proper."
                  }
              }
          }
      },
      "/api/v1/courses/{courseId}/lessons/importprogress": {
          "post": {
              "tags": [
                  "Courses"
              ],
              "summary": "Import progress of lessons",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "The course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Progress of lessons in the course",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportLessonProgressHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportLessonProgressHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportLessonProgressHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportLessonProgressHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "List of lesson with progress import status",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CourseModuleResponseList"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "If the user doesn't have access to import progress"
                  },
                  "404": {
                      "description": "If the course id is not proper, user id is not proper and lesson ids not proper"
                  }
              }
          }
      },
      "/api/v1/courses/{courseId}/studyBuddyLearnerBot": {
          "post": {
              "tags": [
                  "Courses"
              ],
              "summary": "Handles the POST request for studyBuddyLearnerBot endpoint",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Request body model",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/StudyBuddyLearnerBotRequest"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "Success response"
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "500": {
                      "description": "Internal server error"
                  }
              }
          }
      },
      "/api/v1/deployment/info": {
          "get": {
              "tags": [
                  "Deployment"
              ],
              "summary": "Get deployment information",
              "responses": {
                  "200": {
                      "description": "Returns deployment version information",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DeploymentInfo"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/api/v1/offline/devices": {
          "get": {
              "tags": [
                  "EdgeDevice"
              ],
              "summary": "Get paginated list of edge devices",
              "parameters": [
                  {
                      "name": "skip",
                      "in": "query",
                      "description": "Number of user entries to skip",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 0
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Number of user entries to retrieve after the skipped entries",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Edge Devices retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/EdgeDeviceListModel"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/uploadsprogress": {
          "get": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Get the upload and encoding status of all video lessons for a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "list of video lesson and their encoding progress status received successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/LessonStatus"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "This user doesn't have access to the specified course"
                  },
                  "404": {
                      "description": "No course found with this course identifier"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/Lesson": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Add or update lesson to a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Content data for the lesson",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/Lesson"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Lesson"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Lesson"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/Lesson"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "integer",
                                  "format": "int32"
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "Lesson got updated successfully"
                  },
                  "403": {
                      "description": "This user doesn't have access to the specified course"
                  },
                  "404": {
                      "description": "No course found with this course identifier"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/CourseItems": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Bulk upload course items inside an already existing course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "202": {
                      "description": "Successful upload"
                  },
                  "400": {
                      "description": "The request is not a multipart request\r\n            or the zip doesn't contain a valid JSON file"
                  },
                  "403": {
                      "description": "This user doesn't have access to the specified course"
                  },
                  "404": {
                      "description": "No course found with this course identifier"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/KC": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Add or update quiz to a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Quiz content",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/KC"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/KC"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/KC"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/KC"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Quiz addition/updation is successful",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "integer",
                                  "format": "int32"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "This user doesn't have access to the specified course"
                  },
                  "404": {
                      "description": "No course found with this course identifier"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/CourseItem": {
          "delete": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Remove lessons or quizes from a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Course item content to be removed",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/RemoveCourseItem"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/RemoveCourseItem"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/RemoveCourseItem"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/RemoveCourseItem"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Course item got deleted successfully"
                  },
                  "403": {
                      "description": "This user doesn't have access to the specified course"
                  },
                  "404": {
                      "description": "No course found with this course identifier"
                  }
              }
          }
      },
      "/api/v1/editCourse/{courseId}/lesson/{lessonId}/textTracks": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Add or update text tracks to a video lesson",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "lessonId",
                      "in": "path",
                      "description": "Lesson identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "language",
                      "in": "query",
                      "description": "The language",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "201": {
                      "description": "Text track added successfully"
                  },
                  "400": {
                      "description": "The request is not a supported lesson type"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course/lesson doesn't exist"
                  }
              }
          },
          "delete": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Remove the text tracks from a video lesson",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "lessonId",
                      "in": "path",
                      "description": "Lesson identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "language",
                      "in": "query",
                      "description": "The language",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "The text track got deleted successfully"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course/lesson doesn't exist"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/KC/{knowledgeCheckId}/Questions": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Add questions to a quiz",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "knowledgeCheckId",
                      "in": "path",
                      "description": "Knowledge check identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Question content to be added",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/AddKCQuestions"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/AddKCQuestions"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/AddKCQuestions"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/AddKCQuestions"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Question got added successfully"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course/quiz doesn't exist"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/Question/{questionId}": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Add or update question to a quiz",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "questionId",
                      "in": "path",
                      "description": "Question identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Question content for add or update",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/AddUpdateQuestion"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/AddUpdateQuestion"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/AddUpdateQuestion"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/AddUpdateQuestion"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "integer",
                                  "format": "int32"
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "Question got added/updated successfully"
                  },
                  "400": {
                      "description": "The question validation fails"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course doesn't exist"
                  }
              }
          }
      },
      "/api/v1/EditCourse/Questions": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Import questions from csv",
              "parameters": [
                  {
                      "name": "source",
                      "in": "query",
                      "description": "Source type",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Questions imported successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/StringResult"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "CSV file is not provided\r\n            or provided CSV file is not valid"
                  },
                  "415": {
                      "description": "Not a Multi-part request"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/Publish": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Publish a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Course published successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/StringResult"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Video encoding fails"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course doesn't exist"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/content": {
          "get": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Get course item information along with their publish status",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Course item information retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course doesn't exist"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/ItemsOrder": {
          "put": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Update course items order",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Items to be updated",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateItemsOrder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateItemsOrder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateItemsOrder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateItemsOrder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Course item order updated successfully"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course doesn't exist"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/CourseMetadata": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Upload course metadata",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Course meta data",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseMetadata"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseMetadata"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseMetadata"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseMetadata"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Course metadata updated successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Language/course data validation fails"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course doesn't exist"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/ChildCourses": {
          "get": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Get all child courses.",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Course child list fetched successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CourseCategoryInfo"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course doesn't exist"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}": {
          "delete": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Delete a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Course deleted successfully"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course doesn't exist"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/Users": {
          "delete": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Remove users from course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "User identifiers to be removed",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Users have been removed from the course successfully"
                  },
                  "400": {
                      "description": "Course user validation fails"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course doesn't exist"
                  }
              }
          }
      },
      "/api/v1/EditCourse/{courseId}/Administrators": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Add course administrators",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Administrator contacts to be added",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Course administrator has been added successfully"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course/user doesn't exist"
                  }
              }
          },
          "delete": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Remove specified users from list of administrators of a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Administrator contacts to be removed",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Course administrator has been removed successfully"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course doesn't exist"
                  }
              }
          }
      },
      "/api/v1/editCourse/{courseId}/administrator/{adminUserId}": {
          "delete": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Remove specified user from list of administrators of a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "adminUserId",
                      "in": "path",
                      "description": "User Id of the administrator to be removed",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Course administrator has been removed successfully"
                  },
                  "403": {
                      "description": "The user does not have access to the course"
                  },
                  "404": {
                      "description": "The course doesn't exist"
                  }
              }
          }
      },
      "/api/v1/courses/{courseId}/summary": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Summarize the contents of provided course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Id of the course for which summary should be generated.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "forceGenerate",
                      "in": "query",
                      "description": "Flag to consider the generation should be forced or not",
                      "schema": {
                          "type": "boolean",
                          "default": false
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful summarization of contents of provided course",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/SummarizeContentResponse"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User doesn't have access to the course"
                  },
                  "404": {
                      "description": "Provided course not found"
                  },
                  "503": {
                      "description": "Summarization of contents feature is not enabled"
                  }
              }
          },
          "get": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Get summary of contents for given course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Id of the course for which summaries are requested for",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Summaries of the lessons that are part of the course provided",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SummaryResponse"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User doesn't have access to the course"
                  },
                  "404": {
                      "description": "Provided course not found"
                  },
                  "503": {
                      "description": "Summarization of contents feature is not enabled"
                  }
              }
          }
      },
      "/api/v1/courses/{courseId}/summary/pdf": {
          "post": {
              "tags": [
                  "EditCourse"
              ],
              "summary": "Generates PDF on the provided course summaries",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Id of the course for which summaries are requested for",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Request with user modified summaries",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/SummaryRequest"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Memory stream of the PDF file generated",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/MemoryStream"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User doesn't have access to the course"
                  },
                  "404": {
                      "description": "Provided course not found"
                  },
                  "503": {
                      "description": "Summarization of contents feature is not enabled"
                  }
              }
          }
      },
      "/api/v1/export/courses": {
          "post": {
              "tags": [
                  "Export"
              ],
              "summary": "Download entire content for the specified courses",
              "responses": {
                  "200": {
                      "description": "Successful archival of course content"
                  },
                  "400": {
                      "description": "Invalid request body."
                  },
                  "403": {
                      "description": "Administrator doesn't have access to any of the provided course"
                  },
                  "404": {
                      "description": "Any of the provided course ID is invalid"
                  }
              }
          }
      },
      "/api/v1/ExternalAuthToken/RefreshToken/{identityProvider}": {
          "post": {
              "tags": [
                  "ExternalAuthToken"
              ],
              "summary": "Gets a new access token and refresh token pair\r\nfrom the identity provider",
              "parameters": [
                  {
                      "name": "identityProvider",
                      "in": "path",
                      "description": "Identity provider",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/TokenResponse"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/api/v1/externalContent/contentProviders": {
          "get": {
              "tags": [
                  "ExternalContent"
              ],
              "summary": "Get list of all content providers.",
              "responses": {
                  "200": {
                      "description": "Organization administrators retrieved successfully"
                  }
              }
          }
      },
      "/api/v1/externalContent/contentProvider/{contentProviderId}/content": {
          "get": {
              "tags": [
                  "ExternalContent"
              ],
              "summary": "Get external course by content provider Id.",
              "parameters": [
                  {
                      "name": "contentProviderId",
                      "in": "path",
                      "description": "Content provider Id.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Number of record to fetch.",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "skip",
                      "in": "query",
                      "description": "Number of record to skip.",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Organization administrators retrieved successfully"
                  },
                  "404": {
                      "description": "Provided content provider ID is invalid"
                  }
              }
          }
      },
      "/api/v1/externalContent/contentProvider/{contentProviderId}/search": {
          "get": {
              "tags": [
                  "ExternalContent"
              ],
              "summary": "Search external course by search term.",
              "parameters": [
                  {
                      "name": "contentProviderId",
                      "in": "path",
                      "description": "Content provider Id.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "searchTerm",
                      "in": "query",
                      "description": "The search term.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Number of record to fetch.",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "skip",
                      "in": "query",
                      "description": "Number of record to skip.",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Organization administrators retrieved successfully"
                  },
                  "400": {
                      "description": "Search Term hasn't been provided"
                  },
                  "404": {
                      "description": "Provided content provider ID is invalid"
                  }
              }
          }
      },
      "/api/v1/globalSettings": {
          "get": {
              "tags": [
                  "GlobalConfig"
              ],
              "summary": "Get global config data.",
              "responses": {
                  "200": {
                      "description": "Successful retrieval of Organization data.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/GlobalSettings"
                              }
                          }
                      }
                  }
              }
          },
          "put": {
              "tags": [
                  "GlobalConfig"
              ],
              "summary": "Update global settings data.",
              "requestBody": {
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/GlobalSettings"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/GlobalSettings"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/GlobalSettings"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/GlobalSettings"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Successful updation of Global settings.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/api/v1/Groups": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get the groups belonging to administrator",
              "responses": {
                  "200": {
                      "description": "Successful retrieval of groups belonging to administrator",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GroupInfo"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "Group"
              ],
              "summary": "Add the group",
              "requestBody": {
                  "description": "Group meta data",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupMetadata"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupMetadata"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupMetadata"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupMetadata"
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Successful creation of the group",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/GroupInfo"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid group data"
                  }
              }
          }
      },
      "/api/v1/Groups/Search": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get the groups belonging to administrator",
              "parameters": [
                  {
                      "name": "searchTerm",
                      "in": "query",
                      "description": "Optional search term",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of groups belonging to administrator",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GroupInfo"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/api/v1/Groups/{groupId}/learners": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get learners performance data for specified group and provide optional search among those learners",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "offset",
                      "in": "query",
                      "description": "The offset",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "searchTerm",
                      "in": "query",
                      "description": "Optional search term",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of learners performance data for specified group",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/UserInfoModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/groups/{groupId}/courses/{courseId}/learners": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get learners performance data for specified group and course and provide optional search among those learners",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "offset",
                      "in": "query",
                      "description": "The offset",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "searchTerm",
                      "in": "query",
                      "description": "Optional search term",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of learners performance data for specified group and course",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/UserInfoModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/Groups/{groupId}": {
          "put": {
              "tags": [
                  "Group"
              ],
              "summary": "Update the group",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Group meta data",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupMetadata"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupMetadata"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupMetadata"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupMetadata"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful update"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Group"
              ],
              "summary": "Delete the group",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful delete"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/Groups/{groupId}/Users": {
          "delete": {
              "tags": [
                  "Group"
              ],
              "summary": "Remove the users from a group",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "List of user identifiers to be removed",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful delete"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          },
          "post": {
              "tags": [
                  "Group"
              ],
              "summary": "Add users to a group.",
              "description": "Accepts\r\n  \r\nMulti part form data\r\n<br>\r\n  \r\n    - Json array of user contacts.\r\n      Sample format: [\"user_contact\", \"user_contact\", \"user_contact\"]\r\n<br>\r\n\r\n    - Csv file of users. CSV file should be attached to request with filename as \"CsvDoc\".\r\n      Sample format can be downloaded from 'Bulk upload Users' pop up.\r\n<br>\r\n  Json\r\n  \r\n    - List of user view models.\r\n    \r\n      Sample format:\r\n      \r\n      {\r\n        \"users\": [\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000007\",\r\n            \"firstName\": \"FN-07\",\r\n            \"lastName\": \"LN-07\",\r\n            \"customProfilefields\": {\r\n              \"Textfield\": \"1\",\r\n              \"Multiselect\": \"MS01\"\r\n            }\r\n          },\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000008\",\r\n            \"firstName\": \"FN-08\",\r\n            \"lastName\": \"LN-08\",\r\n            \"customProfilefields\": {\r\n              \"Dropdown\": \"DD01\",\r\n              \"Multiselect\": \"MS01;MS02\"\r\n            }\r\n          },\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000009\",\r\n            \"firstName\": \"FN-08\",\r\n            \"lastName\": \"LN-08\",\r\n            \"customProfilefields\": {\r\n              \"Textfield\": \"1\",\r\n              \"Dropdown\": \"DD01\",\r\n              \"Multiselect\": [\"MS01\",\"MS02\",\"MS03\"]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n\r\nChanges\r\n1. This api now accepts 2 additional query parameters\r\n    \r\n    1.1. errorLimit\r\n  \r\n      1.1.1. Pass the parameter to stop further processing if number of exception encountered by the system is equal to ‘errorLimit’. \r\n             errorLimit default to 10\r\n       \r\n    1.2. 'isAsync'\r\n  \r\n      1.2.1. Default value is isAsync is set to true. Which indicates actual user addition and updation will be done asynchronously.\r\n             Users data validation is done synchronously, actual users creation and updation is done asynchronously.\r\n             Explicitly pass isAsync=false to call user addition and updation synchronously.\r\n            \r\n2. For existing user passed, if user's organization id is not same as group's organization id. User addition is blocked.\r\n3. Error response has been updated to new format.\r\n4. Only super admins, organization admins of the organization the selected group belongs to,\r\n   and group admin of the selected group can call this api.",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "isAsync",
                      "in": "query",
                      "description": "Flag to indicate whether the operation should be done asynchronously or not",
                      "schema": {
                          "type": "boolean",
                          "default": false
                      }
                  },
                  {
                      "name": "errorLimit",
                      "in": "query",
                      "description": "After encountering 'errorLimit' number of errors.Stop processing.",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 10
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "multipart/form-data": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "formFile": {
                                      "type": "string",
                                      "description": "For uploading users csv file",
                                      "format": "binary"
                                  }
                              }
                          },
                          "encoding": {
                              "formFile": {
                                  "style": "form"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful addition"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/Groups/{groupId}/Administrators": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get the group administrators",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of learners performance data for specified group and course",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GroupAdminInfo"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          },
          "post": {
              "tags": [
                  "Group"
              ],
              "summary": "Add the group administrator",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Administrator contacts to be added in the group",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful addition"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Group"
              ],
              "summary": "Remove administrators from a group",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "List of administrator identifiers to be removed",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful deletion"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/Groups/{groupId}/Courses": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get the categories and courses\r\nCategory data is not localized",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of categories and courses",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CategoryCourseInfo"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          },
          "post": {
              "tags": [
                  "Group"
              ],
              "summary": "Add courses to group",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "List of Course identifiers with their priority in the user group.",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CoursePriorityDataHolder"
                              }
                          }
                      },
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CoursePriorityDataHolder"
                              }
                          }
                      },
                      "text/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CoursePriorityDataHolder"
                              }
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CoursePriorityDataHolder"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful addition"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Group"
              ],
              "summary": "Remove courses from group",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Course identifiers",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful deletion"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/Groups/{groupId}/LearningPathCourses": {
          "post": {
              "tags": [
                  "Group"
              ],
              "summary": "Add courses to group",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "List of Course and Learning path identifiers with their priority in the user group along with operation type.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/LearningPathGroupAssigmentRequest"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Successful addition"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  },
                  "415": {
                      "description": "Request content-type should be 'application/json'"
                  }
              }
          }
      },
      "/api/v1/Groups/{groupId}/Rules": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get the group rules",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of group rules",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/RulesObject"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          },
          "post": {
              "tags": [
                  "Group"
              ],
              "summary": "Update the group rules",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Rules data to be updated",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateRulesObject"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateRulesObject"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateRulesObject"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateRulesObject"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful updation"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/Groups/SyncStatus": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get groups synchronize status",
              "responses": {
                  "200": {
                      "description": "Successful retrieval of groups synchronize status",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/Groups/Sync": {
          "post": {
              "tags": [
                  "Group"
              ],
              "summary": "Synchronizes groups for administrator",
              "responses": {
                  "200": {
                      "description": "Successful retrieval of groups synchronize status",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/Groups/{groupId}/Users/SyncStatus": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get the group users synchronize status",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of groups synchronize status",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/Groups/{groupId}/Users/Sync": {
          "post": {
              "tags": [
                  "Group"
              ],
              "summary": "Synchronizes users for a group",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of groups synchronize status",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/Groups/{groupId}/RestrictedCourses": {
          "post": {
              "tags": [
                  "Group"
              ],
              "summary": "Adds the courses to restrictedCourseGroup.",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "List of Course identifiers",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "201": {
                      "description": "Successful addition"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Group"
              ],
              "summary": "Removes the courses from restrictedCourseGroup and courseGroup.",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Course identifiers",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/CourseIdDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful deletion"
                  },
                  "403": {
                      "description": "User don't have permission to perform operation"
                  }
              }
          }
      },
      "/api/v1/learningpath/courses": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get all the learning paths and their courses assignable to the current group.",
              "description": "Changes\r\n1. Query parameter 'groupId' is now mandatory.\r\n2. Returned courses will belong to learning paths which are in same organizations as the group identified by 'groupId'.\r\n3. In case the deployment type is 'IsMultiOrgDeployment' and 'IsGlobalContentEnabled' content is enabled, \r\n   response will also contain courses from common organization learning paths.\r\n4. Only super admins, organization admins of the organization the selected group belong to,\r\n   and group admin of the selected group can call this api.",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "query",
                      "description": "Group identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Learning path courses received successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/LearningPathGroupAssignmentResponse"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "If the user Id is not proper."
                  },
                  "403": {
                      "description": "If the user doesn't have access to view learning paths."
                  }
              }
          }
      },
      "/api/v1/admin/group/{groupId}/categoriesAndCourses": {
          "get": {
              "tags": [
                  "Group"
              ],
              "summary": "Get hierarchical list of categories and courses for the Group Admin",
              "description": "Category data is not localized.\r\n\r\nChanges\r\n 1. Returned courses will belong to categories which are in same organizations as the group identified by 'groupId'.\r\n 2. In case the deployment type is 'IsMultiOrgDeployment' and 'IsGlobalContentEnabled' content is enabled, \r\n    response will also contain courses from common organization categories as well.\r\n 3. Only super admins, organization admins of the organization the selected group belong to,\r\n    and group admin of the selected group can call this api.",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Optional group identifier for getting categories and courses assigned to a group",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "restrictCourse",
                      "in": "query",
                      "description": "When the flag is enabled, response is required for the \"Restrict Course\" tab, else for \"Assign Course\" tab",
                      "schema": {
                          "type": "boolean",
                          "default": false
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Categories and courses retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/HomeModel"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Invalid group identifier"
                  }
              }
          }
      },
      "/api/v1/learningpaths": {
          "get": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Get the list of learning paths for displaying to the administrator.",
              "description": "Return non-localized data",
              "responses": {
                  "200": {
                      "description": "list of learning paths received successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/LearningPathMetadataResponseEntity"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/api/v1/learningpath": {
          "post": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Add a learning path.",
              "description": "Request content has non-localized data",
              "requestBody": {
                  "description": "Learning path metadata.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/LearningPathMetadata"
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Learning path added successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "integer",
                                  "format": "int32"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "If the organization Id is invalid."
                  }
              }
          }
      },
      "/api/v1/learningpath/{learningPathId}/administrators": {
          "get": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Get the list of Administrators of a learning path.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Learning path administrators received successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/LearningPathAdministrator"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path does not exist."
                  }
              }
          },
          "post": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Add a list of Administrators to a learning path.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "List of Administrator Contacts.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Learning path administrators added successfully."
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path/user does not exist."
                  }
              }
          },
          "delete": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Remove a list of Administrators of a learning path.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "List of Administrator Contacts.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Learning path administrators removed successfully."
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path does not exist."
                  }
              }
          }
      },
      "/api/v1/learningpath/{learningPathId}/administrator/{adminUserId}": {
          "delete": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Remove an Administrator of a learning path.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "adminUserId",
                      "in": "path",
                      "description": "User Id of the Administrator.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "204": {
                      "description": "Learning path administrator removed successfully."
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path does not exist."
                  }
              }
          }
      },
      "/api/v1/learningpath/{learningPathId}/metadata": {
          "put": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Edit metadata of a learning path.",
              "description": "The request content is non-localized",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Learning path metadata.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/LearningPathMetadata"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Learning path metadata updated successfully."
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path does not exist."
                  }
              }
          }
      },
      "/api/v1/learningpath/{learningPathId}": {
          "delete": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Delete a learning path.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "204": {
                      "description": "Learning path deleted successfully."
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path does not exist."
                  }
              }
          }
      },
      "/api/v1/admin/learningpath/{learningPathId}/courses": {
          "get": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Get Courses of a learning path.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Learning path courses received successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/LearningPathCourse"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path does not exist."
                  }
              }
          },
          "post": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Update Courses of a learning path.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Course mappings entity.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/LearningPathCourseUpdateRequest"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Learning path courses updated successfully."
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path or the re-order/removal request courses do not exist."
                  },
                  "409": {
                      "description": "If the request is for adding an already existing course."
                  }
              }
          }
      },
      "/api/v1/learningpath/{learningPathId}/users": {
          "delete": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Remove a list of users from a learning path.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "user identifier list.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Users has been removed from Learning path successfully."
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path does not exist."
                  }
              }
          },
          "get": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Get the users of the Learning Path.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Course identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "searchTerm",
                      "in": "query",
                      "description": "Search term.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "skip",
                      "in": "query",
                      "description": "Number of rows to skip.",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 0
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Required page size.",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 1000
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/UsersModel"
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "Users has been removed from Learning path successfully."
                  },
                  "400": {
                      "description": "If the search term is not proper."
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path does not exist."
                  }
              }
          },
          "post": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Assign learning path to users.",
              "description": "Accepts\r\n\r\n   - Json array of user contacts.\r\n     \r\n     Sample format: \r\n```\r\n     {\"Contacts\":[\"abc1@somemail.com\", \"abc2@somemail.com\", \"abc3@somemail.com\"]}\r\n```\r\nChanges\r\n\r\n  1. Create/Update user flows are now blocked. User can not be created/updated by this api call.\r\n  2. This api will only assign lp to users in case\r\n  \r\n     a. User already exists.\r\n     \r\n     b. Learning path org id and same as user org id.\r\n     \r\n  3. Only exception to 2.b is 'IsGlobalContentEnabled'. In case the deployment type is 'IsMultiOrgDeployment' and\r\n     'IsGlobalContentEnabled' content is enabled. learning paths belonging to 'common' organization can be assigned to a\r\n     user in any organization.\r\n  4. This api now accepts 2 additional query parameter\r\n  \r\n     a. 'isAsync': Default value is isAsync is set to true. Which indicates actual learning path assignment will be done asynchronously.\r\n        Explicitly pass isAsync=false to call learning path assignment synchronously.\r\n        \r\n     b. 'errorLimit': Pass this parameter to stop further processing, if number of exception encountered by the system is equal to 'errorLimit'.\r\n        'errorLimit' default to 10.\r\n        \r\n  5. Error response has been updated to new format.\r\n  6. Only super admins, organization admins of the organization the learning path belong to,\r\n     and learning path admin of current learning path can call this api.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "isAsync",
                      "in": "query",
                      "description": "Flag to indicate whether the operation should be done asynchronously or not. Defaults to true.",
                      "schema": {
                          "type": "boolean",
                          "default": true
                      }
                  },
                  {
                      "name": "errorLimit",
                      "in": "query",
                      "description": "After encountering 'errorLimit' number of errors. Stop processing.",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 10
                      }
                  }
              ],
              "requestBody": {
                  "description": "user contact list.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Users has been added to Learning path successfully."
                  },
                  "400": {
                      "description": "If the user details aren't proper."
                  },
                  "403": {
                      "description": "If the user doesn't have access to view groups for learning path."
                  },
                  "404": {
                      "description": "If the learningPath Id is not proper."
                  }
              }
          }
      },
      "/api/v1/learningpaths/{learningPathId}/groups": {
          "get": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Get groups for a learning path",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "The learning path identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Groups for learning path received successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GroupInfo"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "If the user doesn't have access to view groups for learning path."
                  },
                  "404": {
                      "description": "If the learningPath Id is not proper."
                  }
              }
          }
      },
      "/api/v1/learningpath/{learningPathId}/progress": {
          "delete": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Delete progress of a user from a learning path",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "User identifier whose progress is to be deleted",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Learning path user progress deletion triggered asynchronously."
                  },
                  "400": {
                      "description": "If the user contacts are not proper."
                  },
                  "403": {
                      "description": "If the user doesn't have access to learning path."
                  },
                  "404": {
                      "description": "The learning path does not exist."
                  }
              }
          }
      },
      "/api/v1/learningpath/{learningPathId}/categoriesAndCourses": {
          "get": {
              "tags": [
                  "LearningPathAdmin"
              ],
              "summary": "Get hierarchical list of categories and courses for the Learning Path",
              "description": "Category data is not localized.\r\n\r\nChanges\r\n1. This api will now depend on learning path id.\r\n2. Returned courses will belong to categories which are in same organizations as the\r\n   learning path identified by 'learningPathId'.\r\n3. In case the deployment type is 'IsMultiOrgDeployment' and 'IsGlobalContentEnabled' content is enabled,\r\n   response will also contain courses from common organization categories.\r\n4. Only super admins, organization admins of the organization the selected learning path belongs to,\r\n   and learning path admin of the selected learning path can call this api.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Categories and courses retrieved successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/HomeModel"
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "If the user doesn't have access to view groups for learning path."
                  },
                  "404": {
                      "description": "If the learningPath Id is not proper."
                  }
              }
          }
      },
      "/api/v1/learner/learningpath/{learningPathId}/courses": {
          "get": {
              "tags": [
                  "LearningPathLearner"
              ],
              "summary": "Get Courses of a learning path.",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning path identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Learning path courses received successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/LearningPathResponseEntity"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "The learning path does not contain any course or the learning path doesn't exist."
                  }
              }
          }
      },
      "/api/v1/learner/learningpath/{learningPathId}/Certificate": {
          "get": {
              "tags": [
                  "LearningPathLearner"
              ],
              "summary": "Generate and get certificate URL for the learning path",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "description": "Learning Path identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful generation of certificate URL",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "No certificate generated"
                  },
                  "404": {
                      "description": "Learning Path not found"
                  }
              }
          }
      },
      "/api/v1/lessons/{lessonId}/forums": {
          "get": {
              "tags": [
                  "Lesson"
              ],
              "summary": "Get lesson forum comments",
              "parameters": [
                  {
                      "name": "lessonId",
                      "in": "path",
                      "description": "Lesson identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of forum comments",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ForumPost"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "If the user doesn't have access to the lesson"
                  }
              }
          },
          "post": {
              "tags": [
                  "Lesson"
              ],
              "summary": "Submit lesson forum post",
              "parameters": [
                  {
                      "name": "lessonId",
                      "in": "path",
                      "description": "Lesson identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Forum comment",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ForumComment"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ForumComment"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ForumComment"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ForumComment"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Successful submission of forum comment",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ForumPost"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Forum comment validation failure"
                  },
                  "403": {
                      "description": "If the user doesn't have access to the lesson"
                  }
              }
          }
      },
      "/api/v1/lessons/{lessonId}/sasurl": {
          "post": {
              "tags": [
                  "Lesson"
              ],
              "summary": "Get valid blob URL given an expired blob URL",
              "parameters": [
                  {
                      "name": "lessonId",
                      "in": "path",
                      "description": "Lesson identifier for which we need SAS url",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Expired blob link",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/BlobLink"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/BlobLink"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/BlobLink"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/BlobLink"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "Successful retrieval of blob url",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid input blob link"
                  }
              }
          }
      },
      "/api/v1/offline/manage/addUser": {
          "post": {
              "tags": [
                  "ManageUser"
              ],
              "summary": "Add user with a random number and OTP",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdentityDetails"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/UserIdentityDetails"
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "Successful addition or updation"
                  }
              }
          }
      },
      "/api/v1/offline/manage/setPassword": {
          "post": {
              "tags": [
                  "ManageUser"
              ],
              "summary": "Allows admin to update user password.",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdatePasswordRequest"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successfully updated the user password."
                  }
              }
          }
      },
      "/api/v1/offline/manage/resetPassword": {
          "post": {
              "tags": [
                  "ManageUser"
              ],
              "summary": "Allows learners to update their passwords.",
              "requestBody": {
                  "description": "Request of",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ResetPasswordRequest"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successfully reset the user password."
                  }
              }
          }
      },
      "/api/v1/Manifest/TopLevel": {
          "get": {
              "tags": [
                  "ManifestProxy"
              ],
              "summary": "Get top level HTTP Live Stream (HLS) playlist",
              "parameters": [
                  {
                      "name": "playbackUrl",
                      "in": "query",
                      "description": "The playback URL",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "token",
                      "in": "query",
                      "description": "The video authorization token",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Top level HLS playlist has been fetched successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Token and/or playback URL isn't valid"
                  }
              }
          }
      },
      "/api/v1/Manifest/SecondLevel": {
          "get": {
              "tags": [
                  "ManifestProxy"
              ],
              "summary": "Get second level HTTP Live Stream (HLS) playlist",
              "parameters": [
                  {
                      "name": "playbackUrl",
                      "in": "query",
                      "description": "The playback URL",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "token",
                      "in": "query",
                      "description": "The video authorization token",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Second level HLS playlist has been fetched successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Token and/or playback URL isn't valid"
                  }
              }
          }
      },
      "/api/v1/Manifest/storage/{path}": {
          "get": {
              "tags": [
                  "ManifestProxy"
              ],
              "summary": "Gets the blob content from azure storage account.",
              "description": "Gets the blob content from azure storage account only for configured extensions\r\n\r\nOtherwise, Redirect to blob url with SAS(Shared access signature)\r\n\r\nSample Request URL: /api/v1/manifest/storage/htmllessoncontent/3295/oq3xg/js/local_storage_manager.js\r\n\r\nRedirect URl: {ContentEndPoint}/storage/htmllessoncontent/3295/oq3xg/js/local_storage_manager.js?sasToken",
              "parameters": [
                  {
                      "name": "path",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of blob content."
                  }
              }
          }
      },
      "/api/v1/Notifications": {
          "get": {
              "tags": [
                  "Notification"
              ],
              "summary": "Get all notifications for the current user",
              "parameters": [
                  {
                      "name": "createdBefore",
                      "in": "query",
                      "description": "Created timestamp",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "adminNotificationOnly",
                      "in": "query",
                      "description": "Fetch administrator only notifications",
                      "schema": {
                          "type": "boolean",
                          "default": false
                      }
                  },
                  {
                      "name": "retrieveOnlyAnnouncements",
                      "in": "query",
                      "description": "Fetch announcements only or all notifications",
                      "schema": {
                          "type": "boolean",
                          "default": false
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of notification",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/NotificationResponseEntity"
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "If there is no notification for the user or notification is disabled"
                  }
              }
          },
          "put": {
              "tags": [
                  "Notification"
              ],
              "summary": "Update the notification status of a particular notification for a user",
              "requestBody": {
                  "description": "Notification data to be updated",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateNotificationEntityList"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateNotificationEntityList"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateNotificationEntityList"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UpdateNotificationEntityList"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Successful update of notifications",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/UpdateNotificationResponseEntity"
                                  }
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "If notification is disabled"
                  },
                  "206": {
                      "description": "Partial update of notifications"
                  },
                  "400": {
                      "description": "If notifications provided is empty"
                  }
              }
          }
      },
      "/api/v1/Notifications/GroupAnnouncement": {
          "get": {
              "tags": [
                  "Notification"
              ],
              "summary": "Get the group announcements created before a date",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "query",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "createdBefore",
                      "in": "query",
                      "description": "Ths date before which group announcements are required",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of group announcements",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/NotificationResponseEntity"
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "If there is no group announcements to return"
                  },
                  "400": {
                      "description": "If invalid group identifier is provided"
                  }
              }
          },
          "post": {
              "tags": [
                  "Notification"
              ],
              "summary": "Send the group announcement",
              "parameters": [
                  {
                      "name": "groupId",
                      "in": "query",
                      "description": "Group identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Group announcement content",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupAnnouncementModel"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupAnnouncementModel"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupAnnouncementModel"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/GroupAnnouncementModel"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful notification send"
                  },
                  "400": {
                      "description": "Wrong group identifier is provided"
                  }
              }
          }
      },
      "/api/v1/Notifications/AsyncJobsProgress": {
          "get": {
              "tags": [
                  "Notification"
              ],
              "summary": "Get async job statuses by tracking IDs",
              "parameters": [
                  {
                      "name": "trackingIds",
                      "in": "query",
                      "description": "List of tracking IDs of the jobs",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successfully procured job statuses for the tracking Ids provided"
                  },
                  "204": {
                      "description": "Notifications disabled by the user"
                  },
                  "400": {
                      "description": "Wrong tracking identifier is provided in the request"
                  }
              }
          }
      },
      "/api/v1/logs/mct": {
          "get": {
              "tags": [
                  "OfflineLog"
              ],
              "summary": "Get zip file containing MCT logs",
              "responses": {
                  "200": {
                      "description": ""
                  }
              }
          }
      },
      "/api/v1/organization": {
          "get": {
              "tags": [
                  "Organization"
              ],
              "summary": "Get all organizations.",
              "responses": {
                  "200": {
                      "description": "Successful retrieval of organizations.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/OrganizationDTO"
                                  }
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "No additional organizations created."
                  }
              }
          },
          "post": {
              "tags": [
                  "Organization"
              ],
              "summary": "Create an Organization.",
              "requestBody": {
                  "description": "The organization data Microsoft.Learning.Mlx.Models.OrganizationDTO.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/OrganizationDTO"
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Successful creation of organization.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "integer",
                                  "format": "int32"
                              }
                          }
                      }
                  },
                  "409": {
                      "description": "Organization name and/or tenantId is not unique."
                  }
              }
          }
      },
      "/api/v1/organization/{orgId}": {
          "put": {
              "tags": [
                  "Organization"
              ],
              "summary": "Update organization.",
              "parameters": [
                  {
                      "name": "orgId",
                      "in": "path",
                      "description": "The organization identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "The updated organization data.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/OrganizationDTO"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Successful updation of organization."
                  },
                  "403": {
                      "description": "Organization identifier is of default organization."
                  },
                  "404": {
                      "description": "Organization with specified Id/name does not exist."
                  }
              }
          },
          "delete": {
              "tags": [
                  "Organization"
              ],
              "summary": "Delete Organization.",
              "parameters": [
                  {
                      "name": "orgId",
                      "in": "path",
                      "description": "The organization identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "204": {
                      "description": "Successful deletion of organization."
                  },
                  "403": {
                      "description": "Organization identifier is of default organization."
                  },
                  "404": {
                      "description": "Organization with specified Id does not exist."
                  }
              }
          }
      },
      "/api/v1/organization/{organizationId}/config": {
          "get": {
              "tags": [
                  "Organization"
              ],
              "summary": "Get organization data.",
              "parameters": [
                  {
                      "name": "organizationId",
                      "in": "path",
                      "description": "The organization identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of Organization data.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/OrganizationModel"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Organization with specified Id does not exist."
                  }
              }
          },
          "put": {
              "tags": [
                  "Organization"
              ],
              "summary": "Update organization data by identifier.",
              "parameters": [
                  {
                      "name": "organizationId",
                      "in": "path",
                      "description": "Organization identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful updation of Organization data.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Provided OrgData is invalid."
                  },
                  "403": {
                      "description": "User doesn't have access to Organization with specified Id."
                  },
                  "404": {
                      "description": "Organization with specified Id does not exist."
                  }
              }
          }
      },
      "/api/v1/organizationadministrator": {
          "get": {
              "tags": [
                  "OrganizationAdmin"
              ],
              "summary": "Get all organization administrators.",
              "responses": {
                  "200": {
                      "description": "Successful retrieval of organization admins.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/OrganizationAdminDTO"
                                  }
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "No organization admins added in instance."
                  },
                  "403": {
                      "description": "Insufficient permissions to get organization administrators"
                  }
              }
          },
          "post": {
              "tags": [
                  "OrganizationAdmin"
              ],
              "summary": "Create new Organization Admin.",
              "requestBody": {
                  "description": "The organization admin data Microsoft.Learning.Mlx.Models.OrganizationAdminDTO.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/OrganizationAdminDTO"
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Successful creation of organization admin."
                  },
                  "400": {
                      "description": "Request payload format is invalid or Organization Identifier list in request payload is empty."
                  },
                  "403": {
                      "description": "Insufficient permissions to add organization administrator"
                  },
                  "404": {
                      "description": "No admin found with the provided contact."
                  }
              }
          },
          "put": {
              "tags": [
                  "OrganizationAdmin"
              ],
              "summary": "Update organization admin.",
              "requestBody": {
                  "description": "The updated organization admin data.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/OrganizationAdminDTO"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Successful update of organization admin data."
                  },
                  "400": {
                      "description": "Organization Identifier list in request payload is empty or Request payload format is invalid."
                  },
                  "403": {
                      "description": "Insufficient permissions to update organization administrator"
                  }
              }
          },
          "delete": {
              "tags": [
                  "OrganizationAdmin"
              ],
              "summary": "Delete organization Admin.",
              "requestBody": {
                  "description": "The organization admin contacts.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ContactsDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Successful deletion of organization admin."
                  },
                  "403": {
                      "description": "organization admin contact to delete is of current user."
                  }
              }
          }
      },
      "/api/v1/organizationadministrator/organizations": {
          "get": {
              "tags": [
                  "OrganizationAdmin"
              ],
              "summary": "Get organizations for current authenticated user.",
              "responses": {
                  "200": {
                      "description": "Successful retrieval of organizations.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/OrganizationDTO"
                                  }
                              }
                          }
                      }
                  },
                  "204": {
                      "description": "No administrable organizations for current user."
                  }
              }
          }
      },
      "/api/v1/Profile/Picture": {
          "post": {
              "tags": [
                  "Profile"
              ],
              "summary": "Update profile picture",
              "responses": {
                  "200": {
                      "description": "Successful update of user profile picture",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Unsupported profile picture"
                  }
              }
          }
      },
      "/api/v1/Profile": {
          "put": {
              "tags": [
                  "Profile"
              ],
              "summary": "Update user profile details",
              "description": "Request sample format -\r\n```\r\n{\r\n    \"department\": \"engineering\",\r\n    \"specialization\": \"back-end engineering\",\r\n    \"preferred programming language\": \"c#\"\r\n}\r\n```\r\nThe keys in the above JSON are the profile field default names\r\n\r\nThe values are the user specified values",
              "responses": {
                  "200": {
                      "description": "Successful update of user profile details"
                  },
                  "400": {
                      "description": "If any of the validation checks fail"
                  }
              }
          }
      },
      "/api/v1/Profile/Role": {
          "get": {
              "tags": [
                  "Profile"
              ],
              "summary": "Get user role to decide whether to show the user a control to switch between learner and administrator views",
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/UserRole"
                              }
                          }
                      }
                  },
                  "412": {
                      "description": "Precondition failed, if user is not existing"
                  }
              }
          }
      },
      "/api/v1/quizzes/{quizId}/answer": {
          "post": {
              "tags": [
                  "Quiz"
              ],
              "summary": "Submit answers to quiz identified by the quiz id",
              "parameters": [
                  {
                      "name": "quizId",
                      "in": "path",
                      "description": "Quiz identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "User's answer to the question",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserQuestionAnswerModel"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserQuestionAnswerModel"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserQuestionAnswerModel"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserQuestionAnswerModel"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Successful submission of quiz answer"
                  },
                  "400": {
                      "description": "Provided quiz answer data isn't valid"
                  },
                  "404": {
                      "description": "Quiz not found"
                  }
              }
          }
      },
      "/api/v1/quizzes/{quizId}/userImages": {
          "post": {
              "tags": [
                  "Quiz"
              ],
              "summary": "Uploads user images for quiz",
              "parameters": [
                  {
                      "name": "quizId",
                      "in": "path",
                      "description": "Quiz identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful submission of quiz images"
                  },
                  "400": {
                      "description": "File not provided or not supported"
                  },
                  "404": {
                      "description": "Quiz not found"
                  }
              }
          }
      },
      "/api/v1/courses/{courseId}/quiz/importprogress": {
          "post": {
              "tags": [
                  "Quiz"
              ],
              "summary": "Import progress of quizzes",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "The course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Progress of quizzes in the course",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportQuizProgressHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportQuizProgressHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportQuizProgressHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportQuizProgressHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "List of quizzes with progress import status.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/QuizSubmissionStatusResponseList"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Quiz progress data is invalid."
                  },
                  "403": {
                      "description": "If the user doesn't have access to import progress"
                  },
                  "404": {
                      "description": "If the course id is not proper, user contact is not proper and quiz ids not proper"
                  }
              }
          }
      },
      "/api/v1/Reports/Overview/Categories": {
          "get": {
              "tags": [
                  "Reports"
              ],
              "summary": "Download categories in overview analytics",
              "responses": {
                  "200": {
                      "description": "Successful download of categories in overview analytics"
                  }
              }
          }
      },
      "/api/v1/Reports/Category/{categoryId}/Courses": {
          "get": {
              "tags": [
                  "Reports"
              ],
              "summary": "Download courses in category analytics",
              "parameters": [
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "Category identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful download of courses in category analytics"
                  },
                  "403": {
                      "description": "Access not allowed"
                  },
                  "404": {
                      "description": "Category not found"
                  }
              }
          }
      },
      "/api/v1/Reports/Course/{courseId}/Lessons": {
          "get": {
              "tags": [
                  "Reports"
              ],
              "summary": "Download lessons in course analytics",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful download of lessons in course analytics"
                  },
                  "403": {
                      "description": "Access not allowed"
                  },
                  "404": {
                      "description": "Course not found"
                  }
              }
          }
      },
      "/api/v1/Reports/Course/{courseId}/Quizzes": {
          "get": {
              "tags": [
                  "Reports"
              ],
              "summary": "Download quizzes in course analytics",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful download of quizzes in course analytics"
                  },
                  "403": {
                      "description": "Access not allowed"
                  },
                  "404": {
                      "description": "Course not found"
                  }
              }
          }
      },
      "/api/v1/Reports/Course/{courseId}/Learners": {
          "get": {
              "tags": [
                  "Reports"
              ],
              "summary": "Download learners in course analytics",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "description": "Course identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful download of learner information in course analytics"
                  },
                  "403": {
                      "description": "Access not allowed"
                  },
                  "404": {
                      "description": "Course not found"
                  }
              }
          }
      },
      "/api/v1/Reports/Learner/{userId}/ReportCard": {
          "get": {
              "tags": [
                  "Reports"
              ],
              "summary": "Download learner report card data",
              "parameters": [
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful download of learner report card data"
                  },
                  "404": {
                      "description": "Invalid user id"
                  }
              }
          }
      },
      "/api/v1/Reports/Users": {
          "get": {
              "tags": [
                  "Reports"
              ],
              "summary": "Download user information for administrator.",
              "description": "This api is now deprecated for downloading user csv please use the latest version.",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "query",
                      "description": "Course identifier",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 0
                      }
                  },
                  {
                      "name": "groupId",
                      "in": "query",
                      "description": "Group identifier",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 0
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful download of learner report card data"
                  },
                  "400": {
                      "description": "Invalid course id or group id"
                  }
              }
          }
      },
      "/api/v1/content": {
          "get": {
              "tags": [
                  "Search"
              ],
              "summary": "Get content items i.e. courses, categories and lessons that are most relevant to the provided search term",
              "parameters": [
                  {
                      "name": "search",
                      "in": "query",
                      "description": "The provided search term",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of search result(s)"
                  },
                  "400": {
                      "description": "Search term is empty"
                  }
              }
          }
      },
      "/api/v1/content/suggest": {
          "get": {
              "tags": [
                  "Search"
              ],
              "summary": "Get suggested content item i.e. courses, categories and lesson suggestions that are most relevant to the provided search term",
              "parameters": [
                  {
                      "name": "suggest",
                      "in": "query",
                      "description": "The provided term",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of suggestions based on provided term"
                  },
                  "400": {
                      "description": "Provided term is empty"
                  }
              }
          }
      },
      "/api/v1/users/contact": {
          "post": {
              "tags": [
                  "User"
              ],
              "summary": "Update user's contact.",
              "description": "Sample json:\r\n```\r\n    POST\r\n    {\r\n        currentContact: \"test@gmail.com\",\r\n        newContact: \"janedoe@gmail.com\"\r\n    }\r\n```",
              "requestBody": {
                  "description": "Current contact and the contact which is supposed to replace the current contact of the user.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserContactDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "Successful addition/updation of users."
                  },
                  "400": {
                      "description": "Bad Request."
                  }
              }
          }
      },
      "/api/v1/users": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": "Get list of users with email address, first name or last name matching the search term.",
              "description": "Changes\r\n1. This api now accepts 1 additional query parameters 'orgId'\r\n\r\n    a. Pass this parameter to search users in the organization identified by orgId.\r\n     \r\n    b. In case users already exist.They will move to the selected organization.\r\n     \r\n2. Only super admins can get/search users from any organization.\r\n3. Organization admin can get/search users only on those organization where they have admin rights.",
              "parameters": [
                  {
                      "name": "orgId",
                      "in": "query",
                      "description": "Identifier of organization in which user needs to be searched.",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "searchTerm",
                      "in": "query",
                      "description": "Search term",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Successful retrieval of user search result(s) that matches search term",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/MlxUser"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "If user search term is less than 3"
                  },
                  "403": {
                      "description": "If user doesn't have required permission"
                  },
                  "404": {
                      "description": "The organization doesn't exist"
                  }
              }
          },
          "delete": {
              "tags": [
                  "User"
              ],
              "summary": "Delete users with the Ids specified in the request body",
              "description": "Sample request:\r\n    DELETE\r\n```\r\n    {\r\n       \"Ids\": [\r\n          1045\r\n       ]\r\n    }\r\n```",
              "requestBody": {
                  "description": "Data holder for user identifiers",
                  "content": {
                      "application/json-patch+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "text/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      },
                      "application/*+json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserIdDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful deletion"
                  }
              }
          },
          "post": {
              "tags": [
                  "User"
              ],
              "summary": "Add/Update users.",
              "description": "Accepts\r\n  \r\nMulti part form data\r\n<br>\r\n  \r\n    - Json array of user contacts.\r\n      Sample format: [\"user_contact\", \"user_contact\", \"user_contact\"]\r\n<br>\r\n\r\n    - Csv file of users. CSV file should be attached to request with filename as \"CsvDoc\".\r\n      Sample format can be downloaded from 'Bulk upload Users' pop up.\r\n<br>\r\n  Json\r\n  \r\n    - List of user view models.\r\n    \r\n      Sample format:\r\n      \r\n      {\r\n        \"users\": [\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000007\",\r\n            \"firstName\": \"FN-07\",\r\n            \"lastName\": \"LN-07\",\r\n            \"customProfilefields\": {\r\n              \"Textfield\": \"1\",\r\n              \"Multiselect\": \"MS01\"\r\n            }\r\n          },\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000008\",\r\n            \"firstName\": \"FN-08\",\r\n            \"lastName\": \"LN-08\",\r\n            \"customProfilefields\": {\r\n              \"Dropdown\": \"DD01\",\r\n              \"Multiselect\": \"MS01;MS02\"\r\n            }\r\n          },\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000009\",\r\n            \"firstName\": \"FN-08\",\r\n            \"lastName\": \"LN-08\",\r\n            \"customProfilefields\": {\r\n              \"Textfield\": \"1\",\r\n              \"Dropdown\": \"DD01\",\r\n              \"Multiselect\": [\"MS01\",\"MS02\",\"MS03\"]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n\r\nChanges\r\n1. This api now accepts 4 additional query parameters\r\n\r\n    1.1. orgId\r\n    \r\n      1.1.1. Pass this parameter to create users in the organization identified by orgId.\r\n      \r\n      1.1.2. In case users already exist.They will move to the selected organization.\r\n    \r\n    1.2. orgName\r\n    \r\n      1.2.1. Pass this parameter to create users in the organization identified by orgName.\r\n      \r\n      1.2.2. In case users already exist.They will move to the selected organization.\r\n    \r\n    1.3. errorLimit\r\n  \r\n      1.3.1. Pass the parameter to stop further processing if number of exception encountered by the system is equal to ‘errorLimit’. \r\n             errorLimit default to 10\r\n       \r\n    1.4. 'isAsync'\r\n  \r\n      1.4.1. Default value is isAsync is set to true. Which indicates actual user addition and updation will be done asynchronously.\r\n             Users data validation is done synchronously, actual users creation and updation is done asynchronously.\r\n             Explicitly pass isAsync=false to call user addition and updation synchronously.\r\n     \r\n2. In case both orgId and orgName are missing. It is assumed that users are being added to default organization.Organization id = 1.\r\n3. In case both orgId and orgName are passed preference will be given to orgId.\r\n4. Error response has been updated to new format.\r\n5. Only super admins can create/update users in any organization.\r\n6. Organization admin can create/updated users only on those organization where they have admin rights.",
              "parameters": [
                  {
                      "name": "orgId",
                      "in": "query",
                      "description": "Optional Parameter: Organization id to which user is being moved.",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "orgName",
                      "in": "query",
                      "description": "Optional Parameter: Organization name to which user is being moved.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "isAsync",
                      "in": "query",
                      "description": "Optional Parameter: Flag to indicate whether the operation should be done asynchronously or not. Defaults to true.",
                      "schema": {
                          "type": "boolean",
                          "default": true
                      }
                  },
                  {
                      "name": "errorLimit",
                      "in": "query",
                      "description": "Optional Parameter: After encountering 'errorLimit' number of errors. Stop processing. Defaults to 10.",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 10
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "multipart/form-data": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "formFile": {
                                      "type": "string",
                                      "description": "For uploading users csv file",
                                      "format": "binary"
                                  }
                              }
                          },
                          "encoding": {
                              "formFile": {
                                  "style": "form"
                              }
                          }
                      },
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "formFile": {
                                      "type": "string",
                                      "description": "For uploading users csv file",
                                      "format": "binary"
                                  }
                              }
                          },
                          "encoding": {
                              "formFile": {
                                  "style": "form"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "Successful addition/updation of users."
                  },
                  "400": {
                      "description": "If content type isn't provided."
                  },
                  "403": {
                      "description": "The user doesn't have required permissions."
                  },
                  "404": {
                      "description": "The organization doesn't exists."
                  }
              }
          }
      },
      "/api/v1/users/progress": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": "Get progress details for all users",
              "responses": {
                  "200": {
                      "description": "Successful download of user progress json file"
                  }
              }
          },
          "post": {
              "tags": [
                  "User"
              ],
              "summary": "Upload file containing progress details, validate data and import the same",
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "202": {
                      "description": "Successfully uploaded progress details file"
                  },
                  "400": {
                      "description": "Invalid file MIME type or JSON data format"
                  }
              }
          }
      },
      "/api/v1/user/organization": {
          "put": {
              "tags": [
                  "User"
              ],
              "summary": "Update the Organization Identifier for the user.",
              "description": "Sample request Body\r\n```\r\n{\r\n    \"userContact\":\"+91 1048523706\",\r\n    \"organizationName\": \"Drivers | Laos\"\r\n}\r\n```",
              "requestBody": {
                  "description": "Data holder for organizations name and user contact.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserOrganizationDataHolder"
                          }
                      }
                  }
              },
              "responses": {
                  "204": {
                      "description": "the organization identifier has been updated successfully."
                  },
                  "403": {
                      "description": "If the admin user doesn't have access to update organization identifier of the user."
                  },
                  "404": {
                      "description": "The user or the organization does not exist."
                  }
              }
          }
      },
      "/api/v1/users/{userId}/groups": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": "Get groups for the user.",
              "parameters": [
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "The user identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Groups for a user received successfully."
                  },
                  "404": {
                      "description": "If the user Identifier is not proper."
                  }
              }
          }
      },
      "/api/v1/users/{userId}/learningpaths": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": "Get learning paths for the user.",
              "parameters": [
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "The user identifier.",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Learning paths for a user received successfully."
                  },
                  "404": {
                      "description": "If the user Identifier is not proper."
                  }
              }
          }
      },
      "/api/v1/users/GetByContact": {
          "post": {
              "tags": [
                  "User"
              ],
              "summary": "Fetches details for the user with the given contact details.",
              "description": "All admins can call the api.",
              "requestBody": {
                  "description": "Contact detail for the user.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "Groups for a user received successfully.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/MlxUser"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "If the user with given contact details is not present."
                  }
              }
          }
      },
      "/api/v1/courses/{courseId}/users/{userId}/enrollments": {
          "delete": {
              "tags": [
                  "UserEnrollment"
              ],
              "summary": "Endpoint for removing user enrollment from a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "If course enrollment for user has been removed successfully"
                  },
                  "400": {
                      "description": "If user is enrolled to course specified via groups"
                  },
                  "403": {
                      "description": "If user doesn't have access to the specified course"
                  },
                  "404": {
                      "description": "If user specified doesn't exist"
                  }
              }
          }
      },
      "/api/v1/learningpaths/{learningPathId}/users/{userId}/enrollments": {
          "delete": {
              "tags": [
                  "UserEnrollment"
              ],
              "summary": "Endpoint for removing user enrollment from a learning path",
              "parameters": [
                  {
                      "name": "learningPathId",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "204": {
                      "description": "If learning path enrollment for user has been removed successfully"
                  },
                  "400": {
                      "description": "If user is enrolled to learning path specified via groups"
                  },
                  "403": {
                      "description": "If user doesn't have access to the specified learning path"
                  },
                  "404": {
                      "description": "If user specified doesn't exist"
                  }
              }
          }
      },
      "/api/v1/courses/{courseId}/register": {
          "post": {
              "tags": [
                  "UserEnrollment"
              ],
              "summary": "Endpoint for enrolling the calling user to a course",
              "parameters": [
                  {
                      "name": "courseId",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "If course has been successfully enrolled for the user"
                  },
                  "400": {
                      "description": "If course specified does not have enrollment type of self-enroll"
                  },
                  "404": {
                      "description": "If course specified does not exist"
                  }
              }
          }
      }
  },
  "components": {
      "schemas": {
          "AccessibleUsersModel": {
              "type": "object",
              "properties": {
                  "Model": {
                      "$ref": "#/components/schemas/CourseAnalyticsModel"
                  },
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OfferId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OfferName": {
                      "type": "string",
                      "nullable": true
                  },
                  "LessonsCount": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "QuizzesCount": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "LearnersEnrolled": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseCompletions": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "AddKCQuestions": {
              "type": "object",
              "properties": {
                  "QuestionsIdsString": {
                      "type": "string",
                      "nullable": true
                  },
                  "RemoveOldQuestions": {
                      "type": "boolean"
                  }
              },
              "additionalProperties": false
          },
          "AddUpdateQuestion": {
              "type": "object",
              "properties": {
                  "Type": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Content": {
                      "type": "string",
                      "nullable": true
                  },
                  "AnswerOptions": {
                      "type": "string",
                      "nullable": true
                  },
                  "AssessmentImages": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "nullable": true
                  },
                  "Comments": {
                      "type": "string",
                      "default": "",
                      "nullable": true
                  },
                  "IsShuffleAnswers": {
                      "type": "boolean",
                      "default": false
                  },
                  "IsPrivate": {
                      "type": "boolean",
                      "default": false
                  },
                  "Weightage": {
                      "type": "number",
                      "format": "double",
                      "default": 1
                  },
                  "Tags": {
                      "type": "string",
                      "default": "",
                      "nullable": true
                  },
                  "Answer": {
                      "type": "string",
                      "nullable": true
                  },
                  "Uuid": {
                      "type": "string",
                      "nullable": true
                  },
                  "AdditionalInfo": {
                      "$ref": "#/components/schemas/AdditionalInfo"
                  }
              },
              "additionalProperties": false
          },
          "AdditionalInfo": {
              "type": "object",
              "properties": {
                  "FillBlankInfo": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/BlankInfo"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "Admin": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "AdminEmailId": {
                      "type": "string",
                      "nullable": true
                  },
                  "AddedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "AddedBy": {
                      "type": "string",
                      "nullable": true
                  },
                  "RoleType": {
                      "type": "string",
                      "nullable": true
                  },
                  "RoleName": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "AllUsersModel": {
              "type": "object",
              "properties": {
                  "NextPageLink": {
                      "type": "string",
                      "nullable": true
                  },
                  "UserDetails": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/MlxUser"
                      },
                      "nullable": true
                  },
                  "TotalUsers": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "BlankInfo": {
              "type": "object",
              "properties": {
                  "BlankId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "BlankType": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "MatchCriterion": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "BlankUserAnswer": {
              "type": "object",
              "properties": {
                  "BlankId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Answer": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "BlobLink": {
              "type": "object",
              "properties": {
                  "BlobUrl": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CategoryCourseInfo": {
              "type": "object",
              "properties": {
                  "CategoryList": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CategoryInfo"
                      },
                      "nullable": true
                  },
                  "CourseList": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CourseInfo"
                      },
                      "nullable": true
                  },
                  "RestrictedCourseList": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CourseInfo"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CategoryEntity": {
              "type": "object",
              "properties": {
                  "CategoryId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CategoryName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CategoryDescription": {
                      "type": "string",
                      "nullable": true
                  },
                  "CategoryImage": {
                      "type": "string",
                      "nullable": true
                  },
                  "Courses": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CourseEntity"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CategoryInfo": {
              "type": "object",
              "properties": {
                  "CategoryIdKey": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CategoryName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CategoryNames": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LocalizedData"
                      },
                      "nullable": true
                  },
                  "DefaultLanguageCode": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CategoryListInfo": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Name": {
                      "type": "string",
                      "nullable": true
                  },
                  "Names": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LocalizedData"
                      },
                      "nullable": true
                  },
                  "DefaultLanguageCode": {
                      "type": "string",
                      "nullable": true
                  },
                  "Logo": {
                      "type": "string",
                      "nullable": true
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OrganizationName": {
                      "type": "string",
                      "nullable": true
                  },
                  "Uuid": {
                      "type": "string",
                      "nullable": true
                  },
                  "HasEditAccess": {
                      "type": "boolean"
                  }
              },
              "additionalProperties": false
          },
          "CategoryMetadata": {
              "type": "object",
              "properties": {
                  "CategoryName": {
                      "type": "string",
                      "nullable": true
                  },
                  "LogoUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Uuid": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CategoryOfferEntity": {
              "type": "object",
              "properties": {
                  "AdminModel": {
                      "$ref": "#/components/schemas/CoursesModel"
                  },
                  "CurrentUserRole": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CertificateStatus": {
              "enum": [
                  "NotApplicable",
                  "CompletionStatus",
                  "CertificationQuiz",
                  "CompletionStatusAndCertificationQuiz"
              ],
              "type": "string"
          },
          "CertificateTemplate": {
              "type": "object",
              "properties": {
                  "TemplateId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Name": {
                      "type": "string",
                      "nullable": true
                  },
                  "TemplateUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "Language": {
                      "type": "string",
                      "nullable": true
                  },
                  "TemplateString": {
                      "type": "string",
                      "nullable": true
                  },
                  "UseTemplateString": {
                      "type": "boolean"
                  }
              },
              "additionalProperties": false
          },
          "CertificateTemplateConfig": {
              "type": "object",
              "properties": {
                  "URL": {
                      "type": "string",
                      "nullable": true
                  },
                  "Language": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CertificatesResponseModel": {
              "type": "object",
              "properties": {
                  "CourseCertificates": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CourseCertificateDTO"
                      },
                      "nullable": true
                  },
                  "LearningPathCertificates": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LearningPathCertificateDTO"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CollegeModel": {
              "type": "object",
              "properties": {
                  "OfferId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OfferName": {
                      "type": "string",
                      "nullable": true
                  },
                  "OfferDesc": {
                      "type": "string",
                      "nullable": true
                  },
                  "ImageUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "OfferNamePart1": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                  },
                  "OfferNamePart2": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                  }
              },
              "additionalProperties": false
          },
          "ContactsDataHolder": {
              "required": [
                  "Contacts"
              ],
              "type": "object",
              "properties": {
                  "Contacts": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              },
              "additionalProperties": false
          },
          "ContentEntity": {
              "type": "object",
              "properties": {
                  "CategoryEntityList": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CategoryEntity"
                      },
                      "nullable": true
                  },
                  "LearningPaths": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LearningPathResponseEntity"
                      },
                      "nullable": true
                  },
                  "certificatesCount": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "CourseAnalyticsModel": {
              "type": "object",
              "properties": {
                  "LearnersInCourseAnalytics": {
                      "type": "string",
                      "nullable": true
                  },
                  "LessonsInCourseAnalytics": {
                      "type": "string",
                      "nullable": true
                  },
                  "QuizInCourseAnalytics": {
                      "type": "string",
                      "nullable": true
                  },
                  "LearnersEnrolledOverTime": {
                      "type": "string",
                      "nullable": true
                  },
                  "CourseEnrollmentsAndCompletionsOverTime": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CourseCategoryInfo": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ParentId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ContentLanguage": {
                      "type": "string",
                      "nullable": true
                  },
                  "ParentCourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Name": {
                      "type": "string",
                      "nullable": true
                  },
                  "Description": {
                      "type": "string",
                      "nullable": true
                  },
                  "Logo": {
                      "type": "string",
                      "nullable": true
                  },
                  "ParentName": {
                      "type": "string",
                      "nullable": true
                  },
                  "ParentNames": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LocalizedData"
                      },
                      "nullable": true
                  },
                  "ParentDefaultLanguageCode": {
                      "type": "string",
                      "nullable": true
                  },
                  "EnrollmentType": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "IsCertificate": {
                      "type": "boolean"
                  },
                  "LearningFlowType": {
                      "type": "boolean"
                  },
                  "CertificateTemplateId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "NumPublishedLessons": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "NumPublishedKCs": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OrganizationName": {
                      "type": "string",
                      "nullable": true
                  },
                  "ImportContentType": {
                      "$ref": "#/components/schemas/ImportContentType"
                  },
                  "ImportContentURL": {
                      "type": "string",
                      "nullable": true
                  },
                  "FeedbackFormUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "HasEditAccess": {
                      "type": "boolean"
                  },
                  "OfflineSync": {
                      "type": "boolean"
                  },
                  "SummaryGenerationStatus": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CourseCertificateDTO": {
              "type": "object",
              "properties": {
                  "CourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  },
                  "Url": {
                      "type": "string",
                      "nullable": true
                  },
                  "GeneratedAt": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "CertificateStatus": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "CourseEntity": {
              "type": "object",
              "properties": {
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CourseDescription": {
                      "type": "string",
                      "nullable": true
                  },
                  "ProductId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseImage": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsRegistered": {
                      "type": "boolean"
                  },
                  "FeedbackFormURL": {
                      "type": "string",
                      "nullable": true
                  },
                  "CompletionPercentage": {
                      "type": "number",
                      "format": "double"
                  },
                  "CourseItemCount": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "PublishedLessonCount": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "LastLessonID": {
                      "type": "integer",
                      "format": "int32",
                      "nullable": true
                  },
                  "IsCertificateEnabled": {
                      "type": "boolean",
                      "nullable": true
                  },
                  "CourseCompletionDate": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                  },
                  "Priority": {
                      "type": "string",
                      "nullable": true
                  },
                  "ImportContentType": {
                      "$ref": "#/components/schemas/ImportContentType"
                  },
                  "ImportContentURL": {
                      "type": "string",
                      "nullable": true
                  },
                  "ParentCourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ContentLanguage": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CourseIdDataHolder": {
              "required": [
                  "CourseIds"
              ],
              "type": "object",
              "properties": {
                  "CourseIds": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              },
              "additionalProperties": false
          },
          "CourseInfo": {
              "type": "object",
              "properties": {
                  "CourseIdKey": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CoursePriority": {
                      "type": "string",
                      "nullable": true
                  },
                  "ParentId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "IsSelected": {
                      "type": "boolean"
                  }
              },
              "additionalProperties": false
          },
          "CourseMetadata": {
              "type": "object",
              "properties": {
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  },
                  "ContentLanguage": {
                      "type": "string",
                      "nullable": true
                  },
                  "ParentCourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseDesc": {
                      "type": "string",
                      "default": "",
                      "nullable": true
                  },
                  "ParentCourseUUId": {
                      "type": "string",
                      "nullable": true
                  },
                  "Authors": {
                      "type": "string",
                      "nullable": true
                  },
                  "Lync": {
                      "type": "string",
                      "nullable": true
                  },
                  "Skype": {
                      "type": "string",
                      "nullable": true
                  },
                  "StartDate": {
                      "type": "string",
                      "nullable": true
                  },
                  "EndDate": {
                      "type": "string",
                      "nullable": true
                  },
                  "ImgUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "RegCode": {
                      "type": "string",
                      "nullable": true
                  },
                  "Tags": {
                      "type": "string",
                      "nullable": true
                  },
                  "CourseRegistrationFlow": {
                      "$ref": "#/components/schemas/CourseRegistrationFlow"
                  },
                  "CertificateStatus": {
                      "$ref": "#/components/schemas/CertificateStatus"
                  },
                  "LearningFlowType": {
                      "$ref": "#/components/schemas/LearningFlowType"
                  },
                  "CertificateTemplateId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ImportContentType": {
                      "$ref": "#/components/schemas/ImportContentType"
                  },
                  "ImportContentURL": {
                      "type": "string",
                      "nullable": true
                  },
                  "FeedbackFormUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "Uuid": {
                      "type": "string",
                      "nullable": true
                  },
                  "OfflineSync": {
                      "type": "boolean"
                  }
              },
              "additionalProperties": false
          },
          "CourseModel": {
              "type": "object",
              "properties": {
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CourseDescription": {
                      "type": "string",
                      "nullable": true
                  },
                  "ProductId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseImage": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsRegistered": {
                      "type": "boolean"
                  },
                  "FeedbackFormURL": {
                      "type": "string",
                      "nullable": true
                  },
                  "KcProgress": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "LessonProgress": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Score": {
                      "type": "string",
                      "nullable": true
                  },
                  "HasEditAccess": {
                      "type": "boolean"
                  },
                  "IsPublished": {
                      "type": "boolean"
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseStartDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "CourseEndDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "CertificateUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "HasQuiz": {
                      "type": "boolean"
                  },
                  "CourseCompletionPercentage": {
                      "type": "number",
                      "format": "double"
                  }
              },
              "additionalProperties": false
          },
          "CourseModule": {
              "required": [
                  "Id",
                  "Status"
              ],
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Status": {
                      "$ref": "#/components/schemas/CourseModuleStatus"
                  },
                  "Score": {
                      "type": "number",
                      "format": "double",
                      "default": 0
                  },
                  "Metadata": {
                      "type": "string",
                      "default": "",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CourseModuleResponse": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Status": {
                      "type": "string",
                      "nullable": true
                  },
                  "ErrorCode": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ErrorMessage": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CourseModuleResponseList": {
              "type": "object",
              "properties": {
                  "CourseModuleResponseItemList": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CourseModuleResponse"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CourseModuleStatus": {
              "enum": [
                  "notCompleted",
                  "completed"
              ],
              "type": "string"
          },
          "CourseOfferEntity": {
              "type": "object",
              "properties": {
                  "AdminModel": {
                      "$ref": "#/components/schemas/CourseUsersModel"
                  },
                  "CurrentUserRole": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CourseOutlineModel": {
              "type": "object",
              "properties": {
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CourseDescription": {
                      "type": "string",
                      "nullable": true
                  },
                  "ProductId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseImage": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsRegistered": {
                      "type": "boolean"
                  },
                  "FeedbackFormURL": {
                      "type": "string",
                      "nullable": true
                  },
                  "CourseItems": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "nullable": true
                  },
                  "ImportContentType": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ImportContentURL": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "CoursePriority": {
              "enum": [
                  "Default",
                  "Optional",
                  "Recommended",
                  "Required"
              ],
              "type": "string"
          },
          "CoursePriorityDataHolder": {
              "required": [
                  "CourseId",
                  "Priority"
              ],
              "type": "object",
              "properties": {
                  "CourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Priority": {
                      "$ref": "#/components/schemas/CoursePriority"
                  }
              },
              "additionalProperties": false
          },
          "CourseRegistrationFlow": {
              "enum": [
                  "OpenToAll",
                  "SelfSignup",
                  "AdminManaged"
              ],
              "type": "string"
          },
          "CourseUsersModel": {
              "type": "object",
              "properties": {
                  "NextPageLink": {
                      "type": "string",
                      "nullable": true
                  },
                  "Users": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/User"
                      },
                      "nullable": true
                  },
                  "Admins": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Admin"
                      },
                      "nullable": true
                  },
                  "TotalUsers": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "TotalAdmins": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "CoursesModel": {
              "type": "object",
              "properties": {
                  "Admins": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Admin"
                      },
                      "nullable": true
                  },
                  "Colleges": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CollegeModel"
                      },
                      "nullable": true
                  },
                  "Courses": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CourseModel"
                      },
                      "nullable": true
                  },
                  "SubColleges": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CollegeModel"
                      },
                      "nullable": true
                  },
                  "CollegeName": {
                      "type": "string",
                      "nullable": true
                  },
                  "Description": {
                      "type": "string",
                      "nullable": true
                  },
                  "CollegeLogo": {
                      "type": "string",
                      "nullable": true
                  },
                  "UniversityId": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "DeploymentInfo": {
              "type": "object",
              "properties": {
                  "PackageVersion": {
                      "type": "string",
                      "nullable": true
                  },
                  "ApplicationVersion": {
                      "type": "string",
                      "nullable": true
                  },
                  "DataMigrationVersion": {
                      "type": "string",
                      "nullable": true
                  },
                  "ServiceUpdateDate": {
                      "type": "string",
                      "nullable": true
                  },
                  "DatabaseUpdateDate": {
                      "type": "string",
                      "nullable": true
                  },
                  "DatabaseBuildDate": {
                      "type": "string",
                      "nullable": true
                  },
                  "PackageBuildDate": {
                      "type": "string",
                      "nullable": true
                  },
                  "PendingMigrationIDs": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "nullable": true
                  },
                  "CompletedMigrationIDs": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "nullable": true
                  },
                  "ApplicationBuildDetails": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "EdgeDeviceListModel": {
              "type": "object",
              "properties": {
                  "EdgeDevices": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/EdgeDeviceModel"
                      },
                      "nullable": true
                  },
                  "TotalDeviceCount": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "NextLink": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "EdgeDeviceModel": {
              "type": "object",
              "properties": {
                  "DeviceId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "DeviceName": {
                      "type": "string",
                      "nullable": true
                  },
                  "DevicePrefix": {
                      "type": "string",
                      "nullable": true
                  },
                  "CreatedAt": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "IsActive": {
                      "type": "boolean"
                  }
              },
              "additionalProperties": false
          },
          "Expression": {
              "type": "object",
              "properties": {
                  "Operator": {
                      "type": "string",
                      "nullable": true
                  },
                  "Operands": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "FillBlankQuestionUserAnswers": {
              "type": "object",
              "properties": {
                  "FillBlankUserAnswers": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/BlankUserAnswer"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "ForumComment": {
              "type": "object",
              "properties": {
                  "PostMessage": {
                      "type": "string",
                      "nullable": true
                  },
                  "ParentPost": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "ForumPost": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "string",
                      "nullable": true
                  },
                  "AuthorId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "AuthorName": {
                      "type": "string",
                      "nullable": true
                  },
                  "AuthorProfileImage": {
                      "type": "string",
                      "nullable": true
                  },
                  "DatePosted": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "PostMessage": {
                      "type": "string",
                      "nullable": true
                  },
                  "ParentPost": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "GlobalSettings": {
              "type": "object",
              "properties": {
                  "Whitelist": {
                      "type": "boolean"
                  },
                  "RestrictedGroup": {
                      "type": "boolean"
                  }
              },
              "additionalProperties": false
          },
          "GroupAdminInfo": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Name": {
                      "type": "string",
                      "nullable": true
                  },
                  "ContactInfo": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "GroupAnnouncementModel": {
              "type": "object",
              "properties": {
                  "AnnouncementMessage": {
                      "type": "string",
                      "nullable": true
                  },
                  "UserIds": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "GroupInfo": {
              "type": "object",
              "properties": {
                  "GroupId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "GroupName": {
                      "type": "string",
                      "nullable": true
                  },
                  "GroupDescription": {
                      "type": "string",
                      "nullable": true
                  },
                  "NumberOfUsers": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "GroupType": {
                      "type": "string",
                      "nullable": true
                  },
                  "Rules": {
                      "type": "string",
                      "nullable": true
                  },
                  "RulesObj": {
                      "$ref": "#/components/schemas/RulesObject"
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OrganizationName": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "GroupMetadata": {
              "type": "object",
              "properties": {
                  "GroupName": {
                      "type": "string",
                      "nullable": true
                  },
                  "GroupDescription": {
                      "type": "string",
                      "nullable": true
                  },
                  "AdminContact": {
                      "type": "string",
                      "nullable": true
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "HomeModel": {
              "type": "object",
              "properties": {
                  "Offers": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CategoryListInfo"
                      },
                      "nullable": true
                  },
                  "CourseItems": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CourseCategoryInfo"
                      },
                      "nullable": true
                  },
                  "RestrictedCourseItems": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CourseCategoryInfo"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "ImportContent": {
              "type": "object",
              "properties": {
                  "ImportType": {
                      "$ref": "#/components/schemas/ImportContentType"
                  },
                  "ContentBody": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "ImportContentType": {
              "enum": [
                  "MsLearn",
                  "MsDigitalContent",
                  "UploadCoursesByFile"
              ],
              "type": "string"
          },
          "ImportLessonProgressHolder": {
              "type": "object",
              "properties": {
                  "UserContact": {
                      "type": "string",
                      "nullable": true
                  },
                  "LessonProgress": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CourseModule"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "ImportQuizProgressHolder": {
              "type": "object",
              "properties": {
                  "UserContact": {
                      "type": "string",
                      "nullable": true
                  },
                  "QuizProgress": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/QuizData"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "KC": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "string",
                      "nullable": true
                  },
                  "Title": {
                      "type": "string",
                      "nullable": true
                  },
                  "Description": {
                      "type": "string",
                      "nullable": true
                  },
                  "TotalScore": {
                      "type": "string",
                      "default": "100",
                      "nullable": true
                  },
                  "DisplayOrder": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "StartTime": {
                      "type": "string",
                      "nullable": true
                  },
                  "EndTime": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsCertificationKc": {
                      "type": "boolean",
                      "default": false
                  },
                  "QuestionIds": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsShuffleQuestions": {
                      "type": "boolean",
                      "default": true
                  },
                  "MaxQuestionsOnShuffle": {
                      "type": "integer",
                      "format": "int32",
                      "default": 0
                  },
                  "IsAnswerCorrectnessHidden": {
                      "type": "boolean",
                      "default": true
                  },
                  "MessageOnQuizEnd": {
                      "type": "string",
                      "nullable": true
                  },
                  "ReminderBeforeDays": {
                      "type": "integer",
                      "format": "int32",
                      "default": -1
                  },
                  "IsSurvey": {
                      "type": "boolean",
                      "default": false
                  },
                  "PassingPercent": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "QuizType": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "NumOfAttempts": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Uuid": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "KCRetake": {
              "type": "object",
              "properties": {
                  "RetakeId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "UserId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ModuleId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Score": {
                      "type": "number",
                      "format": "float",
                      "nullable": true
                  },
                  "AddedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "CustomString1": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomString2": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomString3": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomString4": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomString5": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomString6": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomString7": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomText1": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomText2": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomInt1": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomInt2": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomInt3": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomInt4": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "LearnerAnswers": {
              "type": "object",
              "properties": {
                  "Answer": {
                      "type": "string",
                      "format": "string",
                      "nullable": true
                  },
                  "FillBlankAnswers": {
                      "$ref": "#/components/schemas/FillBlankQuestionUserAnswers"
                  },
                  "CorrectAnswer": {
                      "type": "string",
                      "format": "string",
                      "nullable": true
                  },
                  "QuestionId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "IsCorrect": {
                      "type": "boolean"
                  },
                  "AnswerImported": {
                      "type": "boolean",
                      "default": false
                  }
              },
              "additionalProperties": false
          },
          "LearnerModulesProgressDetail": {
              "type": "object",
              "properties": {
                  "ModuleId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "IsCompleted": {
                      "type": "string",
                      "nullable": true
                  },
                  "Score": {
                      "type": "number",
                      "format": "float"
                  },
                  "IsKC": {
                      "type": "boolean"
                  },
                  "Title": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "LearnerReportCard": {
              "type": "object",
              "properties": {
                  "NameOfUser": {
                      "type": "string",
                      "nullable": true
                  },
                  "ContactOfUser": {
                      "type": "string",
                      "nullable": true
                  },
                  "EmailOfUser": {
                      "type": "string",
                      "nullable": true
                  },
                  "ProfilePicURIOfUser": {
                      "type": "string",
                      "nullable": true
                  },
                  "NumberOfModulesCompleted": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "TotalNumberOfModulesEnrolled": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "AverageQuizScoreForUser": {
                      "type": "number",
                      "format": "double"
                  },
                  "ModuleDetails": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LearnerReportCardModuleDetails"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "LearnerReportCardModuleDetails": {
              "type": "object",
              "properties": {
                  "ModuleId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ModuleName": {
                      "type": "string",
                      "nullable": true
                  },
                  "EnrolledOn": {
                      "type": "string",
                      "nullable": true
                  },
                  "AverageQuizScorePercentage": {
                      "type": "string",
                      "nullable": true
                  },
                  "AvgQuizScoreStr": {
                      "type": "number",
                      "format": "float"
                  },
                  "ModuleCompletionPercentage": {
                      "type": "number",
                      "format": "float"
                  },
                  "NumberOfQuizzesTaken": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "NumberOfQuizzesInModule": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "IsBlocked": {
                      "type": "boolean"
                  },
                  "CoursePriority": {
                      "type": "string",
                      "nullable": true
                  },
                  "ParentCourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CompletedOn": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "LearningFlowType": {
              "enum": [
                  "LearningFlowUnorderedType",
                  "LearningFlowOrderedType"
              ],
              "type": "string"
          },
          "LearningPathAdministrator": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Contact": {
                      "type": "string",
                      "nullable": true
                  },
                  "AddedDateTime": {
                      "type": "string",
                      "format": "date-time"
                  }
              },
              "additionalProperties": false
          },
          "LearningPathCertificateDTO": {
              "type": "object",
              "properties": {
                  "LearningPathId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "LearningPathName": {
                      "type": "string",
                      "nullable": true
                  },
                  "Url": {
                      "type": "string",
                      "nullable": true
                  },
                  "GeneratedAt": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "CertificateStatus": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "LearningPathCourse": {
              "type": "object",
              "properties": {
                  "CourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CategoryId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "DisplayOrder": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "MappingId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CategoryName": {
                      "type": "string",
                      "nullable": true
                  },
                  "LocalizedCategoryNames": {
                      "type": "string",
                      "nullable": true
                  },
                  "NumPublishedLessons": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "NumPublishedQuizes": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CategoryThumbnailUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "CourseThumbnailUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "Priority": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "LearningPathCourseBase": {
              "type": "object",
              "properties": {
                  "CourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CategoryId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "DisplayOrder": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "LearningPathCourseEntity": {
              "type": "object",
              "properties": {
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CourseDescription": {
                      "type": "string",
                      "nullable": true
                  },
                  "ProductId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseImage": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsRegistered": {
                      "type": "boolean"
                  },
                  "FeedbackFormURL": {
                      "type": "string",
                      "nullable": true
                  },
                  "CompletionPercentage": {
                      "type": "number",
                      "format": "double"
                  },
                  "PublishedLessonCount": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "LastLessonID": {
                      "type": "integer",
                      "format": "int32",
                      "nullable": true
                  },
                  "IsCertificateEnabled": {
                      "type": "boolean",
                      "nullable": true
                  },
                  "CourseCompletionDate": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                  },
                  "Priority": {
                      "type": "string",
                      "nullable": true
                  },
                  "CategoryId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CategoryName": {
                      "type": "string",
                      "nullable": true
                  },
                  "ImportContentType": {
                      "$ref": "#/components/schemas/ImportContentType"
                  },
                  "ImportContentURL": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "LearningPathCourseUpdateRequest": {
              "type": "object",
              "properties": {
                  "ReorderedCourses": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LearningPathCourse"
                      },
                      "nullable": true
                  },
                  "RemovedCourseIds": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "nullable": true
                  },
                  "AddedCourses": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LearningPathCourseBase"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "LearningPathCourseWrapper": {
              "type": "object",
              "properties": {
                  "CourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CategoryId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "DisplayOrder": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "MappingId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CategoryName": {
                      "type": "string",
                      "nullable": true
                  },
                  "LocalizedCategoryNames": {
                      "type": "string",
                      "nullable": true
                  },
                  "NumPublishedLessons": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "NumPublishedQuizes": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CategoryThumbnailUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "CourseThumbnailUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "Priority": {
                      "type": "string",
                      "nullable": true
                  },
                  "LearningPathId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "LearningPathName": {
                      "type": "string",
                      "nullable": true
                  },
                  "LocalizedLearningPathNames": {
                      "type": "string",
                      "nullable": true
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "LearningPathGroupAssigmentRequest": {
              "required": [
                  "AddedCoursePriorities",
                  "AddedLearningPathIds",
                  "RemovedCourseIds",
                  "RemovedLearningPathIds",
                  "UpdatedCoursePriorities"
              ],
              "type": "object",
              "properties": {
                  "AddedCoursePriorities": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CoursePriorityDataHolder"
                      }
                  },
                  "UpdatedCoursePriorities": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CoursePriorityDataHolder"
                      }
                  },
                  "RemovedCourseIds": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  "AddedLearningPathIds": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  "RemovedLearningPathIds": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              },
              "additionalProperties": false
          },
          "LearningPathGroupAssignmentResponse": {
              "type": "object",
              "properties": {
                  "Courses": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LearningPathCourseWrapper"
                      },
                      "nullable": true
                  },
                  "AssignedLearningPathIds": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "LearningPathMetadata": {
              "type": "object",
              "properties": {
                  "Name": {
                      "type": "string",
                      "nullable": true
                  },
                  "Description": {
                      "type": "string",
                      "nullable": true
                  },
                  "IconFileUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "CertificateStatus": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CertificateTemplateId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OrderRestrictionEnabled": {
                      "type": "boolean"
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "LearningPathMetadataResponseEntity": {
              "type": "object",
              "properties": {
                  "Name": {
                      "type": "string",
                      "nullable": true
                  },
                  "Description": {
                      "type": "string",
                      "nullable": true
                  },
                  "IconFileUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "CertificateStatus": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CertificateTemplateId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OrderRestrictionEnabled": {
                      "type": "boolean"
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "OrganizationName": {
                      "type": "string",
                      "nullable": true
                  },
                  "HasEditAccess": {
                      "type": "boolean"
                  }
              },
              "additionalProperties": false
          },
          "LearningPathResponseEntity": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Name": {
                      "type": "string",
                      "nullable": true
                  },
                  "Description": {
                      "type": "string",
                      "nullable": true
                  },
                  "Logo": {
                      "type": "string",
                      "nullable": true
                  },
                  "Priority": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsOrderRestrictionEnabled": {
                      "type": "boolean"
                  },
                  "CompletionPercentage": {
                      "type": "number",
                      "format": "double"
                  },
                  "AdminEnrolledCourseIds": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "nullable": true
                  },
                  "Courses": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LearningPathCourseEntity"
                      },
                      "nullable": true
                  },
                  "CertificateUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "CertificateStatus": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "Lesson": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "string",
                      "nullable": true
                  },
                  "Title": {
                      "type": "string",
                      "nullable": true
                  },
                  "Description": {
                      "type": "string",
                      "default": "",
                      "nullable": true
                  },
                  "Url": {
                      "type": "string",
                      "default": "",
                      "nullable": true
                  },
                  "DownloadUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "ThumbnailUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "DisplayOrder": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Tags": {
                      "type": "string",
                      "nullable": true
                  },
                  "VideoAsset": {
                      "type": "string",
                      "nullable": true
                  },
                  "RowVersion": {
                      "type": "string",
                      "format": "byte",
                      "nullable": true
                  },
                  "FileType": {
                      "type": "string",
                      "nullable": true
                  },
                  "Uuid": {
                      "type": "string",
                      "nullable": true
                  },
                  "LessonType": {
                      "$ref": "#/components/schemas/LessonType"
                  },
                  "FileExtension": {
                      "type": "string",
                      "default": "",
                      "nullable": true
                  },
                  "Metadata": {
                      "type": "string",
                      "nullable": true
                  },
                  "SummaryGenerationStatus": {
                      "$ref": "#/components/schemas/SummaryGenerationStatus"
                  },
                  "SummaryUrl": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "LessonStatus": {
              "type": "object",
              "properties": {
                  "LessonId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ThumbnailStatus": {
                      "type": "string",
                      "nullable": true
                  },
                  "ThumbnailProgress": {
                      "type": "number",
                      "format": "double"
                  },
                  "EncodingStatus": {
                      "type": "string",
                      "nullable": true
                  },
                  "EncodingProgress": {
                      "type": "number",
                      "format": "double"
                  }
              },
              "additionalProperties": false
          },
          "LessonType": {
              "enum": [
                  "Unknown",
                  "Pdf",
                  "Doc",
                  "Docx",
                  "Xls",
                  "Xlsx",
                  "Ppt",
                  "Pptx",
                  "Video",
                  "Epub",
                  "Audio",
                  "ExternalLink",
                  "HTML",
                  "Scorm1_2",
                  "Summary"
              ],
              "type": "string"
          },
          "LocalizedData": {
              "type": "object",
              "properties": {
                  "LanguageCode": {
                      "type": "string",
                      "nullable": true
                  },
                  "Value": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "MediaServicesToken": {
              "type": "object",
              "properties": {
                  "Token": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "MemoryStream": {
              "type": "object",
              "properties": {
                  "CanTimeout": {
                      "type": "boolean",
                      "readOnly": true
                  },
                  "ReadTimeout": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "WriteTimeout": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CanRead": {
                      "type": "boolean",
                      "readOnly": true
                  },
                  "CanSeek": {
                      "type": "boolean",
                      "readOnly": true
                  },
                  "CanWrite": {
                      "type": "boolean",
                      "readOnly": true
                  },
                  "Capacity": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Length": {
                      "type": "integer",
                      "format": "int64",
                      "readOnly": true
                  },
                  "Position": {
                      "type": "integer",
                      "format": "int64"
                  }
              },
              "additionalProperties": false
          },
          "MlxUser": {
              "type": "object",
              "properties": {
                  "RoleBitmask": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "SignInToken": {
                      "type": "string",
                      "nullable": true
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "SignInName": {
                      "type": "string",
                      "nullable": true
                  },
                  "FirstName": {
                      "type": "string",
                      "nullable": true
                  },
                  "LastName": {
                      "type": "string",
                      "nullable": true
                  },
                  "College": {
                      "type": "string",
                      "nullable": true
                  },
                  "Name": {
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                  },
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "EmailAddress": {
                      "type": "string",
                      "nullable": true
                  },
                  "SignInEmailAddress": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsActive": {
                      "type": "boolean"
                  },
                  "OrganizationChannel": {
                      "type": "string",
                      "nullable": true
                  },
                  "Points": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "AccessToken": {
                      "type": "string",
                      "nullable": true
                  },
                  "Phone": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsReferrer": {
                      "type": "boolean"
                  },
                  "StateName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CityName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CollegeId": {
                      "type": "string",
                      "nullable": true
                  },
                  "ProfilePicUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsComplete": {
                      "type": "boolean",
                      "nullable": true
                  },
                  "PasswordResetRequired": {
                      "type": "boolean",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "ModulesList": {
              "required": [
                  "CourseModules"
              ],
              "type": "object",
              "properties": {
                  "CourseModules": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CourseModule"
                      }
                  }
              },
              "additionalProperties": false
          },
          "NotificationEntity": {
              "type": "object",
              "properties": {
                  "NotificationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Message": {
                      "type": "string",
                      "nullable": true
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "DetailsJSON": {
                      "type": "string",
                      "nullable": true
                  },
                  "ActionLink": {
                      "type": "string",
                      "nullable": true
                  },
                  "Action": {
                      "type": "string",
                      "nullable": true
                  },
                  "Entity": {
                      "type": "string",
                      "nullable": true
                  },
                  "Type": {
                      "type": "string",
                      "nullable": true
                  },
                  "CreateDateTime": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "CreatedBy": {
                      "type": "integer",
                      "format": "int32",
                      "nullable": true
                  },
                  "Status": {
                      "type": "string",
                      "nullable": true
                  },
                  "UserId": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "NotificationResponseEntity": {
              "type": "object",
              "properties": {
                  "Notifications": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/NotificationEntity"
                      },
                      "nullable": true
                  },
                  "NextPageEntity": {
                      "$ref": "#/components/schemas/PaginationEntity"
                  },
                  "TotalUnreadNotifications": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Error": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "OrganizationAdminDTO": {
              "type": "object",
              "properties": {
                  "OrganizationIds": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "nullable": true
                  },
                  "Contact": {
                      "type": "string",
                      "nullable": true
                  },
                  "Name": {
                      "type": "string",
                      "nullable": true
                  },
                  "Organizations": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/OrganizationDTO"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "OrganizationDTO": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Name": {
                      "type": "string",
                      "nullable": true
                  },
                  "Description": {
                      "type": "string",
                      "default": "",
                      "nullable": true
                  },
                  "TenantId": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "OrganizationModel": {
              "type": "object",
              "properties": {
                  "OrganizationSetting": {
                      "$ref": "#/components/schemas/OrganizationSetting"
                  },
                  "Settings": {
                      "type": "string",
                      "nullable": true,
                      "writeOnly": true
                  },
                  "OrganizationId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Idp": {
                      "type": "string",
                      "nullable": true
                  },
                  "OrganizationCode": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "OrganizationSetting": {
              "type": "object",
              "properties": {
                  "Whitelist": {
                      "type": "boolean",
                      "default": false
                  },
                  "AppTitle": {
                      "type": "string",
                      "nullable": true
                  },
                  "MobileAppName": {
                      "type": "string",
                      "nullable": true
                  },
                  "MobileAppShortName": {
                      "type": "string",
                      "nullable": true
                  },
                  "BannerBgImage": {
                      "type": "string",
                      "nullable": true
                  },
                  "BannerTitle": {
                      "type": "string",
                      "nullable": true
                  },
                  "LogoUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "MobileLogoUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "MobileLogoUrlCollection": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "string",
                          "nullable": true
                      },
                      "nullable": true
                  },
                  "OrganizationName": {
                      "type": "string",
                      "nullable": true
                  },
                  "FooterTitle": {
                      "type": "string",
                      "nullable": true
                  },
                  "FooterText": {
                      "type": "string",
                      "nullable": true
                  },
                  "PrimaryColourTheme": {
                      "type": "string",
                      "nullable": true
                  },
                  "MobileBackgroundColour": {
                      "type": "string",
                      "nullable": true
                  },
                  "PrivacyTerms": {
                      "type": "string",
                      "nullable": true
                  },
                  "LanguagesEnabled": {
                      "type": "string",
                      "default": "",
                      "nullable": true
                  },
                  "CertificateTemplateURL": {
                      "type": "string",
                      "default": "",
                      "nullable": true
                  },
                  "CertificateTemplateConfig": {
                      "$ref": "#/components/schemas/CertificateTemplateConfig"
                  },
                  "RestrictedGroup": {
                      "type": "boolean",
                      "default": false
                  }
              },
              "additionalProperties": false
          },
          "PaginationEntity": {
              "type": "object",
              "properties": {
                  "NextPageLink": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "Query": {
              "type": "object",
              "properties": {
                  "Field": {
                      "type": "string",
                      "nullable": true
                  },
                  "FieldKey": {
                      "type": "string",
                      "nullable": true
                  },
                  "Expr": {
                      "$ref": "#/components/schemas/Expression"
                  }
              },
              "additionalProperties": false
          },
          "QuestionData": {
              "required": [
                  "Id",
                  "IsCorrect"
              ],
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "IsCorrect": {
                      "type": "boolean"
                  },
                  "Answer": {
                      "type": "string",
                      "default": null,
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "QuizData": {
              "required": [
                  "Id",
                  "QuestionProgress"
              ],
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "QuestionProgress": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/QuestionData"
                      }
                  }
              },
              "additionalProperties": false
          },
          "QuizResultItem": {
              "type": "object",
              "properties": {
                  "QuestionId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "QuestionText": {
                      "type": "string",
                      "nullable": true
                  },
                  "Answer": {
                      "type": "string",
                      "nullable": true
                  },
                  "UserAnswer": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsCorrect": {
                      "type": "string",
                      "nullable": true
                  },
                  "QuestionWeightage": {
                      "type": "number",
                      "format": "double"
                  }
              },
              "additionalProperties": false
          },
          "QuizSubmissionResponse": {
              "type": "object",
              "properties": {
                  "QuizId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "TotalCorrectAnswers": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "RemainingAttempts": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "BestScore": {
                      "type": "string",
                      "nullable": true
                  },
                  "QuizType": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "QuizSubmissionStatusResponse": {
              "required": [
                  "Id",
                  "Status"
              ],
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Status": {
                      "minLength": 1,
                      "type": "string"
                  },
                  "SubmissionResponse": {
                      "$ref": "#/components/schemas/QuizSubmissionResponse"
                  },
                  "ErrorCode": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ErrorMessage": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "QuizSubmissionStatusResponseList": {
              "required": [
                  "QuizSubmissionResponseItemList"
              ],
              "type": "object",
              "properties": {
                  "QuizSubmissionResponseItemList": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/QuizSubmissionStatusResponse"
                      }
                  }
              },
              "additionalProperties": false
          },
          "RemoveCourseItem": {
              "type": "object",
              "properties": {
                  "CourseItemId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Title": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "ResetPasswordRequest": {
              "required": [
                  "NewPassword",
                  "OldPassword"
              ],
              "type": "object",
              "properties": {
                  "OldPassword": {
                      "minLength": 1,
                      "type": "string",
                      "format": "password"
                  },
                  "NewPassword": {
                      "maxLength": 100,
                      "minLength": 4,
                      "type": "string",
                      "format": "password"
                  },
                  "ConfirmPassword": {
                      "type": "string",
                      "format": "password",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "RulesObject": {
              "type": "object",
              "properties": {
                  "Query": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Query"
                      },
                      "nullable": true
                  },
                  "QueryOp": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "SecureLessonEntity": {
              "type": "object",
              "properties": {
                  "LessonId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "LessonDownloadURL": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "StringResult": {
              "type": "object",
              "properties": {
                  "Error": {
                      "type": "string",
                      "nullable": true
                  },
                  "Result": {
                      "type": "string",
                      "nullable": true
                  },
                  "Count": {
                      "type": "integer",
                      "format": "int32",
                      "nullable": true
                  },
                  "IsSuperAdminLogin": {
                      "type": "boolean"
                  },
                  "Questions": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/spGetQuestions_Result"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "StudyBuddyLearnerBotRequest": {
              "type": "object",
              "properties": {
                  "Query": {
                      "type": "string",
                      "nullable": true
                  },
                  "ChatHistory": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "SummarizeContentResponse": {
              "type": "object",
              "properties": {
                  "SummaryGenerationStatus": {
                      "type": "string",
                      "nullable": true
                  },
                  "Message": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "SummaryGenerationStatus": {
              "enum": [
                  "None",
                  "Processing",
                  "Generated",
                  "Failed"
              ],
              "type": "string"
          },
          "SummaryRequest": {
              "type": "object",
              "properties": {
                  "UserSummaries": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/UserSummary"
                      },
                      "nullable": true
                  },
                  "CourseName": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "SummaryResponse": {
              "type": "object",
              "properties": {
                  "LessonName": {
                      "type": "string",
                      "nullable": true
                  },
                  "LessonId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "GeneratedSummary": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "nullable": true
                  },
                  "ModifiedSummary": {
                      "type": "string",
                      "nullable": true
                  },
                  "LessonContent": {
                      "type": "string",
                      "nullable": true
                  },
                  "SummaryGenerationStatus": {
                      "$ref": "#/components/schemas/SummaryGenerationStatus"
                  }
              },
              "additionalProperties": false
          },
          "SuperAdminsModel": {
              "type": "object",
              "properties": {
                  "SuperAdminDetails": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/User"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "TokenResponse": {
              "type": "object",
              "properties": {
                  "AccessToken": {
                      "type": "string",
                      "nullable": true
                  },
                  "RefreshToken": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UpdateItemsOrder": {
              "type": "object",
              "properties": {
                  "CourseItemIdsCsv": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UpdateNotificationEntity": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Status": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UpdateNotificationEntityList": {
              "type": "object",
              "properties": {
                  "NotificationList": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/UpdateNotificationEntity"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UpdateNotificationResponseEntity": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Status": {
                      "type": "boolean"
                  },
                  "ErrorMessage": {
                      "type": "string",
                      "nullable": true
                  },
                  "ErrorCode": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "UpdatePasswordRequest": {
              "required": [
                  "NewPassword",
                  "Username"
              ],
              "type": "object",
              "properties": {
                  "Username": {
                      "minLength": 1,
                      "type": "string"
                  },
                  "NewPassword": {
                      "minLength": 1,
                      "type": "string",
                      "format": "password"
                  }
              },
              "additionalProperties": false
          },
          "UpdateRulesObject": {
              "type": "object",
              "properties": {
                  "RulesObject": {
                      "$ref": "#/components/schemas/RulesObject"
                  },
                  "Scenario": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "User": {
              "required": [
                  "EmailAddress",
                  "FirstName",
                  "LastName"
              ],
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "FirstName": {
                      "maxLength": 100,
                      "minLength": 1,
                      "type": "string"
                  },
                  "LastName": {
                      "maxLength": 100,
                      "minLength": 1,
                      "type": "string"
                  },
                  "College": {
                      "maxLength": 100,
                      "type": "string",
                      "nullable": true
                  },
                  "EmailAddress": {
                      "minLength": 1,
                      "type": "string",
                      "format": "email"
                  },
                  "IsActive": {
                      "type": "boolean"
                  },
                  "Roles": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "nullable": true
                  },
                  "IsEnrolled": {
                      "type": "boolean"
                  },
                  "ChangedDateTime": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "Points": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Phone": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsReferrer": {
                      "type": "boolean"
                  },
                  "StateName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CityName": {
                      "type": "string",
                      "nullable": true
                  },
                  "CollegeId": {
                      "type": "string",
                      "nullable": true
                  },
                  "IsComplete": {
                      "type": "boolean"
                  },
                  "Score": {
                      "type": "string",
                      "nullable": true
                  },
                  "AssessmentsCompleted": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ModulesCompleted": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ProfilePictureUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "CreatedDateTime": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "Name": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UserContactDataHolder": {
              "type": "object",
              "properties": {
                  "CurrentContact": {
                      "type": "string",
                      "nullable": true
                  },
                  "NewContact": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UserContactsDataHolder": {
              "type": "object",
              "properties": {
                  "userContacts": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UserIdDataHolder": {
              "required": [
                  "Ids"
              ],
              "type": "object",
              "properties": {
                  "Ids": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              },
              "additionalProperties": false
          },
          "UserIdentityDetails": {
              "required": [
                  "Username"
              ],
              "type": "object",
              "properties": {
                  "Username": {
                      "minLength": 1,
                      "type": "string"
                  },
                  "Password": {
                      "type": "string",
                      "format": "password",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UserInfo": {
              "type": "object",
              "properties": {
                  "Id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "Name": {
                      "type": "string",
                      "nullable": true
                  },
                  "FirstName": {
                      "type": "string",
                      "nullable": true
                  },
                  "LastName": {
                      "type": "string",
                      "nullable": true
                  },
                  "ProfilePicUrl": {
                      "type": "string",
                      "nullable": true
                  },
                  "ContactInfo": {
                      "type": "string",
                      "nullable": true
                  },
                  "State": {
                      "type": "string",
                      "nullable": true
                  },
                  "CustomProfileFields": {
                      "type": "string",
                      "nullable": true
                  },
                  "CoursesEnrolled": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "UserGroups": {
                      "type": "string",
                      "nullable": true
                  },
                  "CoursesCompleted": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CertificatesReceived": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseCompletionPercentage": {
                      "type": "number",
                      "format": "double"
                  },
                  "AverageQuizScore": {
                      "type": "number",
                      "format": "double"
                  },
                  "CourseEndDate": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                  },
                  "CourseModuleCompleted": {
                      "type": "integer",
                      "format": "int32",
                      "nullable": true
                  },
                  "TotalCourseItem": {
                      "type": "integer",
                      "format": "int32",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UserInfoModel": {
              "type": "object",
              "properties": {
                  "NextPageLink": {
                      "type": "string",
                      "nullable": true
                  },
                  "UserList": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/UserInfo"
                      },
                      "nullable": true
                  },
                  "TotalUsers": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "IsSuperAdminLogin": {
                      "type": "boolean"
                  },
                  "AverageGroupCompletionPercentage": {
                      "type": "number",
                      "format": "double"
                  }
              },
              "additionalProperties": false
          },
          "UserOrganizationDataHolder": {
              "type": "object",
              "properties": {
                  "UserContact": {
                      "type": "string",
                      "nullable": true
                  },
                  "OrganizationName": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UserQuestionAnswerModel": {
              "type": "object",
              "properties": {
                  "QuizId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "SubmittedAnswers": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/LearnerAnswers"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UserQuizProgressDetails": {
              "type": "object",
              "properties": {
                  "QuizName": {
                      "type": "string",
                      "nullable": true
                  },
                  "Score": {
                      "type": "number",
                      "format": "double"
                  },
                  "QuizId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "CourseId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "UserId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "ResultItems": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/QuizResultItem"
                      },
                      "nullable": true
                  },
                  "Retakes": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/KCRetake"
                      },
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UserRole": {
              "type": "object",
              "properties": {
                  "Processed": {
                      "type": "string",
                      "nullable": true
                  },
                  "Role": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          },
          "UserSummary": {
              "type": "object",
              "properties": {
                  "ModifiedSummary": {
                      "type": "string",
                      "nullable": true
                  },
                  "LessonId": {
                      "type": "string",
                      "nullable": true
                  },
                  "LessonName": {
                      "type": "string",
                      "nullable": true
                  },
                  "SummaryGenerationStatus": {
                      "$ref": "#/components/schemas/SummaryGenerationStatus"
                  }
              },
              "additionalProperties": false
          },
          "UsersModel": {
              "type": "object",
              "properties": {
                  "NextPageLink": {
                      "type": "string",
                      "nullable": true
                  },
                  "Users": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/User"
                      },
                      "nullable": true
                  },
                  "TotalUsers": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "additionalProperties": false
          },
          "spGetQuestions_Result": {
              "type": "object",
              "properties": {
                  "QuestionId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "AuthorId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "QuestionTypeId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "IsActive": {
                      "type": "boolean"
                  },
                  "IsPrivate": {
                      "type": "boolean"
                  },
                  "CategoryId": {
                      "type": "integer",
                      "format": "int32",
                      "nullable": true
                  },
                  "CreateDatetime": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "QuestionContent": {
                      "type": "string",
                      "nullable": true
                  },
                  "Answer": {
                      "type": "string",
                      "nullable": true
                  },
                  "AnswerOptions": {
                      "type": "string",
                      "nullable": true
                  },
                  "AnswerComments": {
                      "type": "string",
                      "nullable": true
                  },
                  "ErrorReported": {
                      "type": "boolean",
                      "nullable": true
                  },
                  "ErrorReportExplanation": {
                      "type": "string",
                      "nullable": true
                  },
                  "UsageCount": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "IsShuffleAnswers": {
                      "type": "boolean"
                  },
                  "Weightage": {
                      "type": "number",
                      "format": "double"
                  },
                  "Uuid": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                  },
                  "AdditionalInfo": {
                      "type": "string",
                      "nullable": true
                  },
                  "tagList": {
                      "type": "string",
                      "nullable": true
                  }
              },
              "additionalProperties": false
          }
      },
      "securitySchemes": {
          "Bearer": {
              "type": "apiKey",
              "description": "Authorization by Bearer Token.  <br><br>To generate Authorization token, please refer below link: <br><br>https://learn.microsoft.com/en-us/azure/industry/training-services/microsoft-community-training/rest-api-management/api-documentation#api-authentication <br   br>Value should have prefix Bearer space then access token <br>Eg: [Bearer \\<access token \\>] <br>",
              "name": "Authorization",
              "in": "header"
          }
      }
  },
  "security": [
      {
          "Bearer": []
      }
  ]
}
