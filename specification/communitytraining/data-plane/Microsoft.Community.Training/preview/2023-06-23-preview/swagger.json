{
  "swagger": "2.0",
  "info": {
    "title": "Community Training REST APIs v1",
    "description": "Documentation for REST APIs (Version:1) of Community Training. <br><br> Note: Bearer Token is required..... Authenticate the token by clicking on the \"Authorize\" button or on the Lock icon. <br>",
    "version": "2023-06-23"
  },
  "paths": {
    "/api/v1/admin/globaladministrators": {
      "get": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Get list of organization administrators",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Organization administrators retrieved successfully",
            "schema": {
              "$ref": "#/definitions/SuperAdminsModel"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Delete super administrators.",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of Super Administrator contacts to be removed.",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion.",
            "schema": {
              "$ref": "#/definitions/OrganizationModel"
            }
          },
          "403": {
            "description": "If trying to remove self from the list."
          }
        }
      }
    },
    "/api/v1/admin/analytics": {
      "get": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Get analytics reports filtered for categories or courses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organizationId",
            "description": "Optional identifier to filter reports for an organization",
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          {
            "in": "query",
            "name": "offerId",
            "description": "Optional identifier to filter reports for a category",
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          {
            "in": "query",
            "name": "courseId",
            "description": "Optional identifier to filter reports for a course",
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Optional identifier to filter reports for a user",
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          {
            "in": "query",
            "name": "offerName",
            "description": "Optional category name, required when filtering reports for a category",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics reports retrieved successfully",
            "schema": {
              "$ref": "#/definitions/AccessibleUsersModel"
            }
          },
          "403": {
            "description": "Category Administrator doesn't have access to that category"
          },
          "404": {
            "description": "Provided OfferId is invalid"
          }
        }
      }
    },
    "/api/v1/admin/course/{courseId}/lessonAnalytics": {
      "get": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Get lesson analytics for course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Identifier to filter reports for a course",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics reports retrieved successfully",
            "schema": {
              "$ref": "#/definitions/AccessibleUsersModel"
            }
          },
          "403": {
            "description": "The Administrator doesn't have access to that course"
          },
          "404": {
            "description": "Provided CourseId is invalid"
          }
        }
      }
    },
    "/api/v1/admin/course/{courseId}/quizAnalytics": {
      "get": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Get quiz analytics for course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Identifier to filter reports for a course",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics reports retrieved successfully",
            "schema": {
              "$ref": "#/definitions/AccessibleUsersModel"
            }
          },
          "403": {
            "description": "The Administrator doesn't have access to that course"
          },
          "404": {
            "description": "Provided CourseId is invalid"
          }
        }
      }
    },
    "/api/v1/admin/category/{categoryId}/course/{courseId}/graphAnalytics": {
      "get": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Get analytics graph and course meta analytics for course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Identifier to filter reports for a course",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "Identifier to filter reports for a category",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics reports retrieved successfully",
            "schema": {
              "$ref": "#/definitions/AccessibleUsersModel"
            }
          },
          "403": {
            "description": "The Administrator doesn't have access to that category or course"
          },
          "404": {
            "description": "Provided CategoryID or CourseId is invalid"
          }
        }
      }
    },
    "/api/v1/admin/course/{courseId}/learnerAnalytics": {
      "get": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Get learner analytics for course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Identifier to filter reports for a course",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "searchTerm",
            "description": "Optional search term",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics reports retrieved successfully",
            "schema": {
              "$ref": "#/definitions/AccessibleUsersModel"
            }
          },
          "403": {
            "description": "The Administrator doesn't have access to that course"
          },
          "404": {
            "description": "Provided CourseId is invalid"
          }
        }
      }
    },
    "/api/v1/admin/users": {
      "get": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Get paginated list of all users.",
        "description": "Changes\r\n\r\n  1. This api now accepts 2 additional query parameters 'orgId' and 'orgName'. \r\n  \r\n      1.1. Pass these parameter to search users in the organization identified by 'orgId' or by 'orgName'.\r\n      \r\n      1.2. In case both 'orgId' and 'orgName' are passed.Preference will be given to 'orgId'.\r\n      \r\n      1.3. In case both 'orgId' and 'orgName' are missing. User will be listed from all organizations.\r\n      \r\n  2. Only super admins listed users from all the organizations.\r\n  3. Organization admin can listed users from the organizations where they have admin rights.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "orgId",
            "description": "Optional Parameter: Organization id.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "orgName",
            "description": "Optional Parameter: Organization name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of user entries to skip",
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Number of user entries to retrieve after the skipped entries",
            "type": "integer",
            "format": "int32",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "schema": {
              "$ref": "#/definitions/AllUsersModel"
            }
          },
          "403": {
            "description": "The Administrator doesn't have access to fetch users"
          },
          "404": {
            "description": "Provided OrgId/ OrgName is invalid"
          }
        }
      }
    },
    "/api/v1/organizations/Administrators": {
      "post": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Add super administrators.",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Contacts to be added as Super Administrators.",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful addition of Super Administrators.",
            "schema": {
              "$ref": "#/definitions/OrganizationModel"
            }
          },
          "404": {
            "description": "Requested Super Administrator not found."
          }
        }
      },
      "delete": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Delete super administrators.",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of Super Administrator contacts to be removed.",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion.",
            "schema": {
              "$ref": "#/definitions/OrganizationModel"
            }
          },
          "403": {
            "description": "If trying to remove self from the list."
          }
        }
      }
    },
    "/api/v1/Analytics/Course/{courseId}/Learner/{userId}": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Get course progress details for a learner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier for which learner progress details are to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "userId",
            "description": "User identifier for which course progress details are to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Learner course progress details retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LearnerModulesProgressDetail"
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to get learner course progress details for the provided course or user"
          },
          "404": {
            "description": "Invalid course or user identifier"
          }
        }
      }
    },
    "/api/v1/Analytics/Course/{courseId}/Quiz/{quizId}/Learner/{userId}": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Get quiz progress details report for a learner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier for which learner progress details are to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "quizId",
            "description": "Quiz identifier for which learner progress details are to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "userId",
            "description": "User identifier for which quiz progress details are to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Learner quiz progress details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/UserQuizProgressDetails"
            }
          },
          "403": {
            "description": "Insufficient permissions to get learner quiz progress details for the provided course or user"
          },
          "404": {
            "description": "Invalid course, quiz or user identifier"
          }
        }
      }
    },
    "/api/v1/Analytics/Learner/{userId}/ReportCard": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Get report card for a learner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "User identifier for which the report card is to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Learner report card retrieved successfully",
            "schema": {
              "$ref": "#/definitions/LearnerReportCard"
            }
          },
          "404": {
            "description": "Invalid user identifier"
          }
        }
      }
    },
    "/api/v1/Category": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Create a new category\r\nCategory data is not localized",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Category metadata",
            "schema": {
              "$ref": "#/definitions/CategoryMetadata"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the category Id after successfully creating a new category",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "403": {
            "description": "The caller doesn't have necessary permission for this organization"
          },
          "404": {
            "description": "Organization doesn't exist"
          }
        }
      }
    },
    "/api/v1/Category/{categoryId}": {
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Update an existing category",
        "description": "Category data not localized.\r\nChanges\r\n1. Move all the courses in the selected category to the new organization.\r\n2. If category is being moved from a non common organization to common organization and 'IsGlobalContentEnabled' is enabled.\r\n   No relationship is broken.Update the category organization\r\n3. Else\r\n\r\n   3.1. Remove courses assigned to the users in current organization.\r\n   \r\n   3.2. Remove category and its courses from learning paths in current organization.\r\n   \r\n   3.3. Remove category and courses assigned to groups in current organization.\r\n   \r\n   3.4. Update category organization.\r\n   \r\n4. Only super admin or organization admin of organization to which category is being moved to can call this api.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "description": "Identifier for the category to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "isAsync",
            "description": "Run this operation asynchronously.",
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Category metadata for update",
            "schema": {
              "$ref": "#/definitions/CategoryMetadata"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category updated successfully"
          },
          "400": {
            "description": "Category's Organization can't be updated from Global organization"
          },
          "403": {
            "description": "The caller doesn't have necessary permission for this category/organization"
          },
          "404": {
            "description": "Organization/Category doesn't exist"
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Delete an existing category",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "description": "Identifier for the category to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Category deleted successfully"
          },
          "403": {
            "description": "The caller doesn't have necessary permission for this category"
          },
          "404": {
            "description": "Category doesn't exist"
          }
        }
      }
    },
    "/api/v1/Category/{categoryId}/Administrators": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Add category administrators",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "description": "Category identifier for which administrators are to be added",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of administrator contacts to be added",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Category administrators added successfully"
          },
          "403": {
            "description": "The caller doesn't have necessary permission for this category"
          },
          "404": {
            "description": "Category/user doesn't exist"
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Remove category administrators.",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "description": "Category identifier from which administrators are to be removed",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of administrator contacts to be removed",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Category administrators removed successfully"
          },
          "403": {
            "description": "The caller doesn't have necessary permission for this category"
          },
          "404": {
            "description": "Category doesn't exist"
          }
        }
      }
    },
    "/api/v1/category/{categoryId}/administrator/{adminUserId}": {
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Remove category administrator.",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "description": "Category identifier from which administrator is to be removed",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "adminUserId",
            "description": "User Id of the administrator to be removed",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Category administrator removed successfully"
          },
          "403": {
            "description": "The caller doesn't have necessary permission for this category"
          },
          "404": {
            "description": "Category doesn't exist"
          }
        }
      }
    },
    "/api/v1/Category/{categoryId}/Course": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Add a new course under a category",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "description": "Identifier for the category in which the course is to be added",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Course metadata for addition",
            "schema": {
              "$ref": "#/definitions/CourseMetadata"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Course added successfully",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "400": {
            "description": "Input validation fails"
          },
          "404": {
            "description": "Category doesn't exist"
          }
        }
      }
    },
    "/api/v1/Category/Upload/SAS": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get SAS token with file upload permission",
        "responses": {
          "200": {
            "description": "SAS token generated successfully."
          }
        }
      }
    },
    "/api/v1/Category/{categoryId}/Courses": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Bulk upload courses",
        "description": "Bulk upload of course should be done in following manner:\r\n\r\n1. Course content files should be organized in a predefined structure.\r\n2. Get a SAS token for the container in which the course content files are to be uploaded.\r\n3. Upload the course content files to the container using the SAS token.\r\n4. Call this API with the category identifier.",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "description": "Identifier for the category in which the courses are to be added",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Import content object for holding import related data.",
            "schema": {
              "$ref": "#/definitions/ImportContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Course content files successfully validated and accepted for addition"
          },
          "400": {
            "description": "Invalid Content type/file structure"
          },
          "404": {
            "description": "Category doesn't exist"
          }
        }
      }
    },
    "/api/v1/category/administrators": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get category administrators",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offerId",
            "description": "Category identifier for which administrators are to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "organizationId",
            "description": "Identifier for the organization containing the category",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Category administrators retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CategoryOfferEntity"
            }
          },
          "403": {
            "description": "Insufficient permissions to get administrators of provided category"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/api/v1/Certificate/Templates": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "summary": "Get all Certificate Templates",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of all certificate templates",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CertificateTemplate"
              }
            }
          },
          "204": {
            "description": "No certificate templates uploaded"
          }
        }
      }
    },
    "/api/v1/Certificate/Template/{templateId}": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "summary": "Get Certificate Template corresponding to provided identifier",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "description": "The template identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieval of certificate template metadata",
            "schema": {
              "$ref": "#/definitions/CertificateTemplate"
            }
          },
          "404": {
            "description": "Incorrect template identifier"
          }
        }
      },
      "put": {
        "tags": [
          "Certificate"
        ],
        "summary": "Update a certificate template",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "description": "The template identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The template data",
            "schema": {
              "$ref": "#/definitions/CertificateTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful update of existing template"
          },
          "404": {
            "description": "Template with given template identifier does not exist"
          },
          "409": {
            "description": "Certificate template name is not unique"
          }
        }
      },
      "delete": {
        "tags": [
          "Certificate"
        ],
        "summary": "Delete a certificate template",
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "description": "The template identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful deletion of certificate template"
          },
          "404": {
            "description": "Template with given template identifier does not exist"
          }
        }
      }
    },
    "/api/v1/Certificate/Template": {
      "post": {
        "tags": [
          "Certificate"
        ],
        "summary": "Add a new certificate template",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The template data",
            "schema": {
              "$ref": "#/definitions/CertificateTemplate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful creation of new template",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "409": {
            "description": "Certificate template name is not unique"
          }
        }
      }
    },
    "/api/v1/Certificate/Template/Preview": {
      "post": {
        "tags": [
          "Certificate"
        ],
        "summary": "Get preview certificate",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The template data",
            "schema": {
              "$ref": "#/definitions/CertificateTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generate certificate preview Url",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid template Url or language"
          }
        }
      }
    },
    "/api/v1/Certificates": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "summary": "Get all certificates for a user",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully received all certificates",
            "schema": {
              "$ref": "#/definitions/CertificatesResponseModel"
            }
          }
        }
      }
    },
    "/api/v1/offline/synchronize/courses/{courseId}": {
      "delete": {
        "tags": [
          "ContentSync"
        ],
        "summary": "Publishes message to IoT Hub to delete course on edge devices.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "The course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Course delete message posted to IoT Hub successfully",
            "schema": {
              "$ref": "#/definitions/EdgeDeviceListModel"
            }
          },
          "403": {
            "description": "Administrator doesn't have access to that course"
          },
          "404": {
            "description": "Provided course ID is invalid"
          }
        }
      }
    },
    "/api/v1/Courses": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Get all self and auto-enrolled courses for the user when registration Status is null \r\nGet all registered courses for the user based on registration status",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "registrationStatus",
            "description": "Registration status",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of course information",
            "schema": {
              "$ref": "#/definitions/ContentEntity"
            }
          },
          "204": {
            "description": "No course exists for the user"
          },
          "400": {
            "description": "Invalid registration status"
          }
        }
      }
    },
    "/api/v1/Course/{courseId}/users": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Search users in the course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "searchTerm",
            "description": "Search term",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of users for the courseId",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Invalid search term"
          },
          "403": {
            "description": "User doesn't have permission"
          },
          "404": {
            "description": "Course not found"
          }
        }
      }
    },
    "/api/v1/Courses/{courseId}/Certificate": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Generate and get certificate URL for the course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful generation of certificate URL",
            "schema": {
              "type": "string"
            }
          },
          "204": {
            "description": "No certificate generated"
          }
        }
      }
    },
    "/api/v1/Courses/Status": {
      "put": {
        "tags": [
          "Courses"
        ],
        "summary": "Update lesson completion status of the course",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of modules to be updated",
            "schema": {
              "$ref": "#/definitions/ModulesList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful updation of course modules",
            "schema": {
              "$ref": "#/definitions/CourseModuleResponseList"
            }
          },
          "400": {
            "description": "Invalid course module"
          },
          "403": {
            "description": "User doesn't have permission"
          }
        }
      }
    },
    "/api/v1/Courses/{courseId}/Lesson": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Get the course lesson(s) URL",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of lesson urls",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecureLessonEntity"
              }
            }
          },
          "403": {
            "description": "User doesn't have permission"
          },
          "404": {
            "description": "Course not found"
          }
        }
      }
    },
    "/api/v1/Courses/{courseId}/Token": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Get token to access lesson's content",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful generation of token for accessing lesson content",
            "schema": {
              "$ref": "#/definitions/MediaServicesToken"
            }
          },
          "403": {
            "description": "Invalid or forbidden user."
          },
          "404": {
            "description": "Course with the specified identifier not found."
          }
        }
      }
    },
    "/api/v1/Courses/{courseId}/Metadata": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Get the meta data for the course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of CourseOutlineMode",
            "schema": {
              "$ref": "#/definitions/CourseOutlineModel"
            }
          },
          "404": {
            "description": "Course with the specified identifier not found."
          }
        }
      }
    },
    "/api/v1/course/administrators": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Get the course administrator(s)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of rows to skip",
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Required page size",
            "type": "integer",
            "format": "int32",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of Administrator(s)",
            "schema": {
              "$ref": "#/definitions/CourseOfferEntity"
            }
          },
          "403": {
            "description": "Invalid or forbidden user."
          },
          "404": {
            "description": "Course with the specified identifier not found."
          }
        }
      }
    },
    "/api/v1/admin/deleteCourseUserProgress": {
      "delete": {
        "tags": [
          "Courses"
        ],
        "summary": "Delete progress of a user from a course.",
        "parameters": [
          {
            "in": "query",
            "name": "courseId",
            "description": "The course identifier",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "userContact",
            "description": "User's contact whose progress is to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Course user progress deletion successfully triggered asynchronously."
          },
          "404": {
            "description": "The course does not exist."
          }
        }
      }
    },
    "/api/v1/courses/{courseId}/users/completeprogress": {
      "post": {
        "tags": [
          "Courses"
        ],
        "summary": "Marks a course as complete for the provided list of users",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UserContactsDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully marked completion status for all users"
          },
          "206": {
            "description": "Successfully marked completion status for some users"
          },
          "400": {
            "description": "Specified course or part of user data doesn't exist and/or is invalid"
          },
          "404": {
            "description": "The course does not exist."
          }
        }
      }
    },
    "/api/v1/courses/{courseId}/completeprogress": {
      "post": {
        "tags": [
          "Courses"
        ],
        "summary": "Marks course complete for user, if course is external course, for now it is just for MS learn courses.",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully marked completion status for given user."
          },
          "400": {
            "description": "Specified course or part of user data doesn't exist and/or is invalid."
          },
          "403": {
            "description": "The user doesn't have permission."
          },
          "404": {
            "description": "The course does not exist."
          }
        }
      }
    },
    "/api/v1/courses/{courseId}/groups": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Get groups for a course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "The course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups for course received successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupInfo"
              }
            }
          },
          "403": {
            "description": "If the user doesn't have access to view groups for course."
          },
          "404": {
            "description": "If the course Id is not proper."
          }
        }
      }
    },
    "/api/v1/courses/{courseId}/lessons/importprogress": {
      "post": {
        "tags": [
          "Courses"
        ],
        "summary": "Import progress of lessons",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "The course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Progress of lessons in the course",
            "schema": {
              "$ref": "#/definitions/ImportLessonProgressHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of lesson with progress import status",
            "schema": {
              "$ref": "#/definitions/CourseModuleResponseList"
            }
          },
          "403": {
            "description": "If the user doesn't have access to import progress"
          },
          "404": {
            "description": "If the course id is not proper, user id is not proper and lesson ids not proper"
          }
        }
      }
    },
    "/api/v1/courses/{courseId}/studyBuddyLearnerBot": {
      "post": {
        "tags": [
          "Courses"
        ],
        "summary": "Handles the POST request for studyBuddyLearnerBot endpoint",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request body model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudyBuddyLearnerBotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/deployment/info": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "summary": "Get deployment information",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returns deployment version information",
            "schema": {
              "$ref": "#/definitions/DeploymentInfo"
            }
          }
        }
      }
    },
    "/api/v1/offline/devices": {
      "get": {
        "tags": [
          "EdgeDevice"
        ],
        "summary": "Get paginated list of edge devices",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "Number of user entries to skip",
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Number of user entries to retrieve after the skipped entries",
            "type": "integer",
            "format": "int32",
            "default": 100
          }
        ],
        "responses": {
          "200": {
            "description": "Edge Devices retrieved successfully",
            "schema": {
              "$ref": "#/definitions/EdgeDeviceListModel"
            }
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/uploadsprogress": {
      "get": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Get the upload and encoding status of all video lessons for a course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "list of video lesson and their encoding progress status received successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LessonStatus"
              }
            }
          },
          "403": {
            "description": "This user doesn't have access to the specified course"
          },
          "404": {
            "description": "No course found with this course identifier"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/Lesson": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Add or update lesson to a course",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Content data for the lesson",
            "schema": {
              "$ref": "#/definitions/Lesson"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "204": {
            "description": "Lesson got updated successfully"
          },
          "403": {
            "description": "This user doesn't have access to the specified course"
          },
          "404": {
            "description": "No course found with this course identifier"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/CourseItems": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Bulk upload course items inside an already existing course",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Successful upload"
          },
          "400": {
            "description": "The request is not a multipart request\r\n            or the zip doesn't contain a valid JSON file"
          },
          "403": {
            "description": "This user doesn't have access to the specified course"
          },
          "404": {
            "description": "No course found with this course identifier"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/KC": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Add or update quiz to a course",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Quiz content",
            "schema": {
              "$ref": "#/definitions/KC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quiz addition/updation is successful",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "403": {
            "description": "This user doesn't have access to the specified course"
          },
          "404": {
            "description": "No course found with this course identifier"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/CourseItem": {
      "delete": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Remove lessons or quizes from a course",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Course item content to be removed",
            "schema": {
              "$ref": "#/definitions/RemoveCourseItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Course item got deleted successfully"
          },
          "403": {
            "description": "This user doesn't have access to the specified course"
          },
          "404": {
            "description": "No course found with this course identifier"
          }
        }
      }
    },
    "/api/v1/editCourse/{courseId}/lesson/{lessonId}/textTracks": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Add or update text tracks to a video lesson",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "lessonId",
            "description": "Lesson identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Text track added successfully"
          },
          "400": {
            "description": "The request is not a supported lesson type"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course/lesson doesn't exist"
          }
        }
      },
      "delete": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Remove the text tracks from a video lesson",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "lessonId",
            "description": "Lesson identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "The text track got deleted successfully"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course/lesson doesn't exist"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/KC/{knowledgeCheckId}/Questions": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Add questions to a quiz",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "knowledgeCheckId",
            "description": "Knowledge check identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Question content to be added",
            "schema": {
              "$ref": "#/definitions/AddKCQuestions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Question got added successfully"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course/quiz doesn't exist"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/Question/{questionId}": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Add or update question to a quiz",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "questionId",
            "description": "Question identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Question content for add or update",
            "schema": {
              "$ref": "#/definitions/AddUpdateQuestion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "204": {
            "description": "Question got added/updated successfully"
          },
          "400": {
            "description": "The question validation fails"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course doesn't exist"
          }
        }
      }
    },
    "/api/v1/EditCourse/Questions": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Import questions from csv",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "source",
            "description": "Source type",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Questions imported successfully",
            "schema": {
              "$ref": "#/definitions/StringResult"
            }
          },
          "400": {
            "description": "CSV file is not provided\r\n            or provided CSV file is not valid"
          },
          "415": {
            "description": "Not a Multi-part request"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/Publish": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Publish a course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Course published successfully",
            "schema": {
              "$ref": "#/definitions/StringResult"
            }
          },
          "400": {
            "description": "Video encoding fails"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course doesn't exist"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/content": {
      "get": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Get course item information along with their publish status",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Course item information retrieved successfully",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course doesn't exist"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/ItemsOrder": {
      "put": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Update course items order",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Items to be updated",
            "schema": {
              "$ref": "#/definitions/UpdateItemsOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Course item order updated successfully"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course doesn't exist"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/CourseMetadata": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Upload course metadata",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Course meta data",
            "schema": {
              "$ref": "#/definitions/CourseMetadata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course metadata updated successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Language/course data validation fails"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course doesn't exist"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/ChildCourses": {
      "get": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Get all child courses.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Course child list fetched successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CourseCategoryInfo"
              }
            }
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course doesn't exist"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}": {
      "delete": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Delete a course",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Course deleted successfully"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course doesn't exist"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/Users": {
      "delete": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Remove users from course",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User identifiers to be removed",
            "schema": {
              "$ref": "#/definitions/UserIdDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Users have been removed from the course successfully"
          },
          "400": {
            "description": "Course user validation fails"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course doesn't exist"
          }
        }
      }
    },
    "/api/v1/EditCourse/{courseId}/Administrators": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Add course administrators",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Administrator contacts to be added",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Course administrator has been added successfully"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course/user doesn't exist"
          }
        }
      },
      "delete": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Remove specified users from list of administrators of a course",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Administrator contacts to be removed",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Course administrator has been removed successfully"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course doesn't exist"
          }
        }
      }
    },
    "/api/v1/editCourse/{courseId}/administrator/{adminUserId}": {
      "delete": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Remove specified user from list of administrators of a course",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "adminUserId",
            "description": "User Id of the administrator to be removed",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Course administrator has been removed successfully"
          },
          "403": {
            "description": "The user does not have access to the course"
          },
          "404": {
            "description": "The course doesn't exist"
          }
        }
      }
    },
    "/api/v1/courses/{courseId}/summary": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Summarize the contents of provided course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Id of the course for which summary should be generated.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "forceGenerate",
            "description": "Flag to consider the generation should be forced or not",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful summarization of contents of provided course",
            "schema": {
              "$ref": "#/definitions/SummarizeContentResponse"
            }
          },
          "403": {
            "description": "User doesn't have access to the course"
          },
          "404": {
            "description": "Provided course not found"
          },
          "503": {
            "description": "Summarization of contents feature is not enabled"
          }
        }
      },
      "get": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Get summary of contents for given course",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Id of the course for which summaries are requested for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Summaries of the lessons that are part of the course provided",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SummaryResponse"
              }
            }
          },
          "403": {
            "description": "User doesn't have access to the course"
          },
          "404": {
            "description": "Provided course not found"
          },
          "503": {
            "description": "Summarization of contents feature is not enabled"
          }
        }
      }
    },
    "/api/v1/courses/{courseId}/summary/pdf": {
      "post": {
        "tags": [
          "EditCourse"
        ],
        "summary": "Generates PDF on the provided course summaries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Id of the course for which summaries are requested for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request with user modified summaries",
            "schema": {
              "$ref": "#/definitions/SummaryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Memory stream of the PDF file generated",
            "schema": {
              "$ref": "#/definitions/MemoryStream"
            }
          },
          "403": {
            "description": "User doesn't have access to the course"
          },
          "404": {
            "description": "Provided course not found"
          },
          "503": {
            "description": "Summarization of contents feature is not enabled"
          }
        }
      }
    },
    "/api/v1/export/courses": {
      "post": {
        "tags": [
          "Export"
        ],
        "summary": "Download entire content for the specified courses",
        "responses": {
          "200": {
            "description": "Successful archival of course content"
          },
          "400": {
            "description": "Invalid request body."
          },
          "403": {
            "description": "Administrator doesn't have access to any of the provided course"
          },
          "404": {
            "description": "Any of the provided course ID is invalid"
          }
        }
      }
    },
    "/api/v1/ExternalAuthToken/RefreshToken/{identityProvider}": {
      "post": {
        "tags": [
          "ExternalAuthToken"
        ],
        "summary": "Gets a new access token and refresh token pair\r\nfrom the identity provider",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identityProvider",
            "description": "Identity provider",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          }
        }
      }
    },
    "/api/v1/externalContent/contentProviders": {
      "get": {
        "tags": [
          "ExternalContent"
        ],
        "summary": "Get list of all content providers.",
        "responses": {
          "200": {
            "description": "Organization administrators retrieved successfully"
          }
        }
      }
    },
    "/api/v1/externalContent/contentProvider/{contentProviderId}/content": {
      "get": {
        "tags": [
          "ExternalContent"
        ],
        "summary": "Get external course by content provider Id.",
        "parameters": [
          {
            "in": "path",
            "name": "contentProviderId",
            "description": "Content provider Id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Number of record to fetch.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of record to skip.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization administrators retrieved successfully"
          },
          "404": {
            "description": "Provided content provider ID is invalid"
          }
        }
      }
    },
    "/api/v1/externalContent/contentProvider/{contentProviderId}/search": {
      "get": {
        "tags": [
          "ExternalContent"
        ],
        "summary": "Search external course by search term.",
        "parameters": [
          {
            "in": "path",
            "name": "contentProviderId",
            "description": "Content provider Id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "searchTerm",
            "description": "The search term.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Number of record to fetch.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of record to skip.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization administrators retrieved successfully"
          },
          "400": {
            "description": "Search Term hasn't been provided"
          },
          "404": {
            "description": "Provided content provider ID is invalid"
          }
        }
      }
    },
    "/api/v1/globalSettings": {
      "get": {
        "tags": [
          "GlobalConfig"
        ],
        "summary": "Get global config data.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of Organization data.",
            "schema": {
              "$ref": "#/definitions/GlobalSettings"
            }
          }
        }
      },
      "put": {
        "tags": [
          "GlobalConfig"
        ],
        "summary": "Update global settings data.",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/GlobalSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful updation of Global settings.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/Groups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get the groups belonging to administrator",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of groups belonging to administrator",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupInfo"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add the group",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Group meta data",
            "schema": {
              "$ref": "#/definitions/GroupMetadata"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful creation of the group",
            "schema": {
              "$ref": "#/definitions/GroupInfo"
            }
          },
          "400": {
            "description": "Invalid group data"
          }
        }
      }
    },
    "/api/v1/Groups/Search": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get the groups belonging to administrator",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "searchTerm",
            "description": "Optional search term",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of groups belonging to administrator",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupInfo"
              }
            }
          }
        }
      }
    },
    "/api/v1/Groups/{groupId}/learners": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get learners performance data for specified group and provide optional search among those learners",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "The offset",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "searchTerm",
            "description": "Optional search term",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of learners performance data for specified group",
            "schema": {
              "$ref": "#/definitions/UserInfoModel"
            }
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/groups/{groupId}/courses/{courseId}/learners": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get learners performance data for specified group and course and provide optional search among those learners",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "The offset",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "searchTerm",
            "description": "Optional search term",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of learners performance data for specified group and course",
            "schema": {
              "$ref": "#/definitions/UserInfoModel"
            }
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/Groups/{groupId}": {
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Update the group",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Group meta data",
            "schema": {
              "$ref": "#/definitions/GroupMetadata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful update"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete the group",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful delete"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/Groups/{groupId}/Users": {
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Remove the users from a group",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of user identifiers to be removed",
            "schema": {
              "$ref": "#/definitions/UserIdDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful delete"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add users to a group.",
        "description": "Accepts\r\n  \r\nMulti part form data\r\n<br>\r\n  \r\n    - Json array of user contacts.\r\n      Sample format: [\"user_contact\", \"user_contact\", \"user_contact\"]\r\n<br>\r\n\r\n    - Csv file of users. CSV file should be attached to request with filename as \"CsvDoc\".\r\n      Sample format can be downloaded from 'Bulk upload Users' pop up.\r\n<br>\r\n  Json\r\n  \r\n    - List of user view models.\r\n    \r\n      Sample format:\r\n      \r\n      {\r\n        \"users\": [\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000007\",\r\n            \"firstName\": \"FN-07\",\r\n            \"lastName\": \"LN-07\",\r\n            \"customProfilefields\": {\r\n              \"Textfield\": \"1\",\r\n              \"Multiselect\": \"MS01\"\r\n            }\r\n          },\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000008\",\r\n            \"firstName\": \"FN-08\",\r\n            \"lastName\": \"LN-08\",\r\n            \"customProfilefields\": {\r\n              \"Dropdown\": \"DD01\",\r\n              \"Multiselect\": \"MS01;MS02\"\r\n            }\r\n          },\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000009\",\r\n            \"firstName\": \"FN-08\",\r\n            \"lastName\": \"LN-08\",\r\n            \"customProfilefields\": {\r\n              \"Textfield\": \"1\",\r\n              \"Dropdown\": \"DD01\",\r\n              \"Multiselect\": [\"MS01\",\"MS02\",\"MS03\"]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n\r\nChanges\r\n1. This api now accepts 2 additional query parameters\r\n    \r\n    1.1. errorLimit\r\n  \r\n      1.1.1. Pass the parameter to stop further processing if number of exception encountered by the system is equal to ‘errorLimit’. \r\n             errorLimit default to 10\r\n       \r\n    1.2. 'isAsync'\r\n  \r\n      1.2.1. Default value is isAsync is set to true. Which indicates actual user addition and updation will be done asynchronously.\r\n             Users data validation is done synchronously, actual users creation and updation is done asynchronously.\r\n             Explicitly pass isAsync=false to call user addition and updation synchronously.\r\n            \r\n2. For existing user passed, if user's organization id is not same as group's organization id. User addition is blocked.\r\n3. Error response has been updated to new format.\r\n4. Only super admins, organization admins of the organization the selected group belongs to,\r\n   and group admin of the selected group can call this api.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "isAsync",
            "description": "Flag to indicate whether the operation should be done asynchronously or not",
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "errorLimit",
            "description": "After encountering 'errorLimit' number of errors.Stop processing.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "formData",
            "name": "formFile",
            "description": "For uploading users csv file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful addition"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/Groups/{groupId}/Administrators": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get the group administrators",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of learners performance data for specified group and course",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupAdminInfo"
              }
            }
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add the group administrator",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Administrator contacts to be added in the group",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful addition"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Remove administrators from a group",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of administrator identifiers to be removed",
            "schema": {
              "$ref": "#/definitions/UserIdDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful deletion"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/Groups/{groupId}/Courses": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get the categories and courses\r\nCategory data is not localized",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of categories and courses",
            "schema": {
              "$ref": "#/definitions/CategoryCourseInfo"
            }
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add courses to group",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of Course identifiers with their priority in the user group.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CoursePriorityDataHolder"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful addition"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Remove courses from group",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Course identifiers",
            "schema": {
              "$ref": "#/definitions/CourseIdDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful deletion"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/Groups/{groupId}/LearningPathCourses": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add courses to group",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of Course and Learning path identifiers with their priority in the user group along with operation type.",
            "schema": {
              "$ref": "#/definitions/LearningPathGroupAssigmentRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful addition"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          },
          "415": {
            "description": "Request content-type should be 'application/json'"
          }
        }
      }
    },
    "/api/v1/Groups/{groupId}/Rules": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get the group rules",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of group rules",
            "schema": {
              "$ref": "#/definitions/RulesObject"
            }
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Update the group rules",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Rules data to be updated",
            "schema": {
              "$ref": "#/definitions/UpdateRulesObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful updation"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/Groups/SyncStatus": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get groups synchronize status",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of groups synchronize status",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/Groups/Sync": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Synchronizes groups for administrator",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of groups synchronize status",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/Groups/{groupId}/Users/SyncStatus": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get the group users synchronize status",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of groups synchronize status",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/Groups/{groupId}/Users/Sync": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Synchronizes users for a group",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of groups synchronize status",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/Groups/{groupId}/RestrictedCourses": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Adds the courses to restrictedCourseGroup.",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of Course identifiers",
            "schema": {
              "$ref": "#/definitions/CourseIdDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Successful addition"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Removes the courses from restrictedCourseGroup and courseGroup.",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Course identifiers",
            "schema": {
              "$ref": "#/definitions/CourseIdDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful deletion"
          },
          "403": {
            "description": "User don't have permission to perform operation"
          }
        }
      }
    },
    "/api/v1/learningpath/courses": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get all the learning paths and their courses assignable to the current group.",
        "description": "Changes\r\n1. Query parameter 'groupId' is now mandatory.\r\n2. Returned courses will belong to learning paths which are in same organizations as the group identified by 'groupId'.\r\n3. In case the deployment type is 'IsMultiOrgDeployment' and 'IsGlobalContentEnabled' content is enabled, \r\n   response will also contain courses from common organization learning paths.\r\n4. Only super admins, organization admins of the organization the selected group belong to,\r\n   and group admin of the selected group can call this api.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "groupId",
            "description": "Group identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Learning path courses received successfully.",
            "schema": {
              "$ref": "#/definitions/LearningPathGroupAssignmentResponse"
            }
          },
          "400": {
            "description": "If the user Id is not proper."
          },
          "403": {
            "description": "If the user doesn't have access to view learning paths."
          }
        }
      }
    },
    "/api/v1/admin/group/{groupId}/categoriesAndCourses": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get hierarchical list of categories and courses for the Group Admin",
        "description": "Category data is not localized.\r\n\r\nChanges\r\n 1. Returned courses will belong to categories which are in same organizations as the group identified by 'groupId'.\r\n 2. In case the deployment type is 'IsMultiOrgDeployment' and 'IsGlobalContentEnabled' content is enabled, \r\n    response will also contain courses from common organization categories as well.\r\n 3. Only super admins, organization admins of the organization the selected group belong to,\r\n    and group admin of the selected group can call this api.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Optional group identifier for getting categories and courses assigned to a group",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "restrictCourse",
            "description": "When the flag is enabled, response is required for the \"Restrict Course\" tab, else for \"Assign Course\" tab",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Categories and courses retrieved successfully",
            "schema": {
              "$ref": "#/definitions/HomeModel"
            }
          },
          "404": {
            "description": "Invalid group identifier"
          }
        }
      }
    },
    "/api/v1/learningpaths": {
      "get": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Get the list of learning paths for displaying to the administrator.",
        "description": "Return non-localized data",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "list of learning paths received successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LearningPathMetadataResponseEntity"
              }
            }
          }
        }
      }
    },
    "/api/v1/learningpath": {
      "post": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Add a learning path.",
        "description": "Request content has non-localized data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Learning path metadata.",
            "schema": {
              "$ref": "#/definitions/LearningPathMetadata"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Learning path added successfully.",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "404": {
            "description": "If the organization Id is invalid."
          }
        }
      }
    },
    "/api/v1/learningpath/{learningPathId}/administrators": {
      "get": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Get the list of Administrators of a learning path.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Learning path administrators received successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LearningPathAdministrator"
              }
            }
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Add a list of Administrators to a learning path.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of Administrator Contacts.",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Learning path administrators added successfully."
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path/user does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Remove a list of Administrators of a learning path.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of Administrator Contacts.",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Learning path administrators removed successfully."
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path does not exist."
          }
        }
      }
    },
    "/api/v1/learningpath/{learningPathId}/administrator/{adminUserId}": {
      "delete": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Remove an Administrator of a learning path.",
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "adminUserId",
            "description": "User Id of the Administrator.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Learning path administrator removed successfully."
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path does not exist."
          }
        }
      }
    },
    "/api/v1/learningpath/{learningPathId}/metadata": {
      "put": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Edit metadata of a learning path.",
        "description": "The request content is non-localized",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Learning path metadata.",
            "schema": {
              "$ref": "#/definitions/LearningPathMetadata"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Learning path metadata updated successfully."
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path does not exist."
          }
        }
      }
    },
    "/api/v1/learningpath/{learningPathId}": {
      "delete": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Delete a learning path.",
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Learning path deleted successfully."
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path does not exist."
          }
        }
      }
    },
    "/api/v1/admin/learningpath/{learningPathId}/courses": {
      "get": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Get Courses of a learning path.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Learning path courses received successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LearningPathCourse"
              }
            }
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Update Courses of a learning path.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Course mappings entity.",
            "schema": {
              "$ref": "#/definitions/LearningPathCourseUpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Learning path courses updated successfully."
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path or the re-order/removal request courses do not exist."
          },
          "409": {
            "description": "If the request is for adding an already existing course."
          }
        }
      }
    },
    "/api/v1/learningpath/{learningPathId}/users": {
      "delete": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Remove a list of users from a learning path.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "user identifier list.",
            "schema": {
              "$ref": "#/definitions/UserIdDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Users has been removed from Learning path successfully."
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path does not exist."
          }
        }
      },
      "get": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Get the users of the Learning Path.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Course identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "searchTerm",
            "description": "Search term.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of rows to skip.",
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Required page size.",
            "type": "integer",
            "format": "int32",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsersModel"
            }
          },
          "204": {
            "description": "Users has been removed from Learning path successfully."
          },
          "400": {
            "description": "If the search term is not proper."
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Assign learning path to users.",
        "description": "Accepts\r\n\r\n   - Json array of user contacts.\r\n     \r\n     Sample format: \r\n```\r\n     {\"Contacts\":[\"abc1@somemail.com\", \"abc2@somemail.com\", \"abc3@somemail.com\"]}\r\n```\r\nChanges\r\n\r\n  1. Create/Update user flows are now blocked. User can not be created/updated by this api call.\r\n  2. This api will only assign lp to users in case\r\n  \r\n     a. User already exists.\r\n     \r\n     b. Learning path org id and same as user org id.\r\n     \r\n  3. Only exception to 2.b is 'IsGlobalContentEnabled'. In case the deployment type is 'IsMultiOrgDeployment' and\r\n     'IsGlobalContentEnabled' content is enabled. learning paths belonging to 'common' organization can be assigned to a\r\n     user in any organization.\r\n  4. This api now accepts 2 additional query parameter\r\n  \r\n     a. 'isAsync': Default value is isAsync is set to true. Which indicates actual learning path assignment will be done asynchronously.\r\n        Explicitly pass isAsync=false to call learning path assignment synchronously.\r\n        \r\n     b. 'errorLimit': Pass this parameter to stop further processing, if number of exception encountered by the system is equal to 'errorLimit'.\r\n        'errorLimit' default to 10.\r\n        \r\n  5. Error response has been updated to new format.\r\n  6. Only super admins, organization admins of the organization the learning path belong to,\r\n     and learning path admin of current learning path can call this api.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "isAsync",
            "description": "Flag to indicate whether the operation should be done asynchronously or not. Defaults to true.",
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "name": "errorLimit",
            "description": "After encountering 'errorLimit' number of errors. Stop processing.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "body",
            "name": "body",
            "description": "user contact list.",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Users has been added to Learning path successfully."
          },
          "400": {
            "description": "If the user details aren't proper."
          },
          "403": {
            "description": "If the user doesn't have access to view groups for learning path."
          },
          "404": {
            "description": "If the learningPath Id is not proper."
          }
        }
      }
    },
    "/api/v1/learningpaths/{learningPathId}/groups": {
      "get": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Get groups for a learning path",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "The learning path identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups for learning path received successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupInfo"
              }
            }
          },
          "403": {
            "description": "If the user doesn't have access to view groups for learning path."
          },
          "404": {
            "description": "If the learningPath Id is not proper."
          }
        }
      }
    },
    "/api/v1/learningpath/{learningPathId}/progress": {
      "delete": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Delete progress of a user from a learning path",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User identifier whose progress is to be deleted",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Learning path user progress deletion triggered asynchronously."
          },
          "400": {
            "description": "If the user contacts are not proper."
          },
          "403": {
            "description": "If the user doesn't have access to learning path."
          },
          "404": {
            "description": "The learning path does not exist."
          }
        }
      }
    },
    "/api/v1/learningpath/{learningPathId}/categoriesAndCourses": {
      "get": {
        "tags": [
          "LearningPathAdmin"
        ],
        "summary": "Get hierarchical list of categories and courses for the Learning Path",
        "description": "Category data is not localized.\r\n\r\nChanges\r\n1. This api will now depend on learning path id.\r\n2. Returned courses will belong to categories which are in same organizations as the\r\n   learning path identified by 'learningPathId'.\r\n3. In case the deployment type is 'IsMultiOrgDeployment' and 'IsGlobalContentEnabled' content is enabled,\r\n   response will also contain courses from common organization categories.\r\n4. Only super admins, organization admins of the organization the selected learning path belongs to,\r\n   and learning path admin of the selected learning path can call this api.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Categories and courses retrieved successfully",
            "schema": {
              "$ref": "#/definitions/HomeModel"
            }
          },
          "403": {
            "description": "If the user doesn't have access to view groups for learning path."
          },
          "404": {
            "description": "If the learningPath Id is not proper."
          }
        }
      }
    },
    "/api/v1/learner/learningpath/{learningPathId}/courses": {
      "get": {
        "tags": [
          "LearningPathLearner"
        ],
        "summary": "Get Courses of a learning path.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning path identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Learning path courses received successfully.",
            "schema": {
              "$ref": "#/definitions/LearningPathResponseEntity"
            }
          },
          "404": {
            "description": "The learning path does not contain any course or the learning path doesn't exist."
          }
        }
      }
    },
    "/api/v1/learner/learningpath/{learningPathId}/Certificate": {
      "get": {
        "tags": [
          "LearningPathLearner"
        ],
        "summary": "Generate and get certificate URL for the learning path",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "description": "Learning Path identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful generation of certificate URL",
            "schema": {
              "type": "string"
            }
          },
          "204": {
            "description": "No certificate generated"
          },
          "404": {
            "description": "Learning Path not found"
          }
        }
      }
    },
    "/api/v1/lessons/{lessonId}/forums": {
      "get": {
        "tags": [
          "Lesson"
        ],
        "summary": "Get lesson forum comments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "lessonId",
            "description": "Lesson identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of forum comments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ForumPost"
              }
            }
          },
          "403": {
            "description": "If the user doesn't have access to the lesson"
          }
        }
      },
      "post": {
        "tags": [
          "Lesson"
        ],
        "summary": "Submit lesson forum post",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "lessonId",
            "description": "Lesson identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Forum comment",
            "schema": {
              "$ref": "#/definitions/ForumComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful submission of forum comment",
            "schema": {
              "$ref": "#/definitions/ForumPost"
            }
          },
          "400": {
            "description": "Forum comment validation failure"
          },
          "403": {
            "description": "If the user doesn't have access to the lesson"
          }
        }
      }
    },
    "/api/v1/lessons/{lessonId}/sasurl": {
      "post": {
        "tags": [
          "Lesson"
        ],
        "summary": "Get valid blob URL given an expired blob URL",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "lessonId",
            "description": "Lesson identifier for which we need SAS url",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Expired blob link",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlobLink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of blob url",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid input blob link"
          }
        }
      }
    },
    "/api/v1/offline/manage/addUser": {
      "post": {
        "tags": [
          "ManageUser"
        ],
        "summary": "Add user with a random number and OTP",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UserIdentityDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserIdentityDetails"
            }
          },
          "204": {
            "description": "Successful addition or updation"
          }
        }
      }
    },
    "/api/v1/offline/manage/setPassword": {
      "post": {
        "tags": [
          "ManageUser"
        ],
        "summary": "Allows admin to update user password.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successfully updated the user password."
          }
        }
      }
    },
    "/api/v1/offline/manage/resetPassword": {
      "post": {
        "tags": [
          "ManageUser"
        ],
        "summary": "Allows learners to update their passwords.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request of",
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successfully reset the user password."
          }
        }
      }
    },
    "/api/v1/Manifest/TopLevel": {
      "get": {
        "tags": [
          "ManifestProxy"
        ],
        "summary": "Get top level HTTP Live Stream (HLS) playlist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "playbackUrl",
            "description": "The playback URL",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "token",
            "description": "The video authorization token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Top level HLS playlist has been fetched successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Token and/or playback URL isn't valid"
          }
        }
      }
    },
    "/api/v1/Manifest/SecondLevel": {
      "get": {
        "tags": [
          "ManifestProxy"
        ],
        "summary": "Get second level HTTP Live Stream (HLS) playlist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "playbackUrl",
            "description": "The playback URL",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "token",
            "description": "The video authorization token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Second level HLS playlist has been fetched successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Token and/or playback URL isn't valid"
          }
        }
      }
    },
    "/api/v1/Manifest/storage/{path}": {
      "get": {
        "tags": [
          "ManifestProxy"
        ],
        "summary": "Gets the blob content from azure storage account.",
        "description": "Gets the blob content from azure storage account only for configured extensions\r\n\r\nOtherwise, Redirect to blob url with SAS(Shared access signature)\r\n\r\nSample Request URL: /api/v1/manifest/storage/htmllessoncontent/3295/oq3xg/js/local_storage_manager.js\r\n\r\nRedirect URl: {ContentEndPoint}/storage/htmllessoncontent/3295/oq3xg/js/local_storage_manager.js?sasToken",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of blob content."
          }
        }
      }
    },
    "/api/v1/Notifications": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get all notifications for the current user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdBefore",
            "description": "Created timestamp",
            "type": "string"
          },
          {
            "in": "query",
            "name": "adminNotificationOnly",
            "description": "Fetch administrator only notifications",
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "retrieveOnlyAnnouncements",
            "description": "Fetch announcements only or all notifications",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of notification",
            "schema": {
              "$ref": "#/definitions/NotificationResponseEntity"
            }
          },
          "204": {
            "description": "If there is no notification for the user or notification is disabled"
          }
        }
      },
      "put": {
        "tags": [
          "Notification"
        ],
        "summary": "Update the notification status of a particular notification for a user",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Notification data to be updated",
            "schema": {
              "$ref": "#/definitions/UpdateNotificationEntityList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful update of notifications",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateNotificationResponseEntity"
              }
            }
          },
          "204": {
            "description": "If notification is disabled"
          },
          "206": {
            "description": "Partial update of notifications"
          },
          "400": {
            "description": "If notifications provided is empty"
          }
        }
      }
    },
    "/api/v1/Notifications/GroupAnnouncement": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get the group announcements created before a date",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "createdBefore",
            "description": "Ths date before which group announcements are required",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of group announcements",
            "schema": {
              "$ref": "#/definitions/NotificationResponseEntity"
            }
          },
          "204": {
            "description": "If there is no group announcements to return"
          },
          "400": {
            "description": "If invalid group identifier is provided"
          }
        }
      },
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Send the group announcement",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "groupId",
            "description": "Group identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Group announcement content",
            "schema": {
              "$ref": "#/definitions/GroupAnnouncementModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful notification send"
          },
          "400": {
            "description": "Wrong group identifier is provided"
          }
        }
      }
    },
    "/api/v1/Notifications/AsyncJobsProgress": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get async job statuses by tracking IDs",
        "parameters": [
          {
            "in": "query",
            "name": "trackingIds",
            "description": "List of tracking IDs of the jobs",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully procured job statuses for the tracking Ids provided"
          },
          "204": {
            "description": "Notifications disabled by the user"
          },
          "400": {
            "description": "Wrong tracking identifier is provided in the request"
          }
        }
      }
    },
    "/api/v1/logs/mct": {
      "get": {
        "tags": [
          "OfflineLog"
        ],
        "summary": "Get zip file containing MCT logs",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/organization": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all organizations.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of organizations.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationDTO"
              }
            }
          },
          "204": {
            "description": "No additional organizations created."
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create an Organization.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The organization data Microsoft.Learning.Mlx.Models.OrganizationDTO.",
            "schema": {
              "$ref": "#/definitions/OrganizationDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful creation of organization.",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "409": {
            "description": "Organization name and/or tenantId is not unique."
          }
        }
      }
    },
    "/api/v1/organization/{orgId}": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Update organization.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "description": "The organization identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The updated organization data.",
            "schema": {
              "$ref": "#/definitions/OrganizationDTO"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful updation of organization."
          },
          "403": {
            "description": "Organization identifier is of default organization."
          },
          "404": {
            "description": "Organization with specified Id/name does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Delete Organization.",
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "description": "The organization identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion of organization."
          },
          "403": {
            "description": "Organization identifier is of default organization."
          },
          "404": {
            "description": "Organization with specified Id does not exist."
          }
        }
      }
    },
    "/api/v1/organization/{organizationId}/config": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get organization data.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "description": "The organization identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of Organization data.",
            "schema": {
              "$ref": "#/definitions/OrganizationModel"
            }
          },
          "404": {
            "description": "Organization with specified Id does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Update organization data by identifier.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "description": "Organization identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful updation of Organization data.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Provided OrgData is invalid."
          },
          "403": {
            "description": "User doesn't have access to Organization with specified Id."
          },
          "404": {
            "description": "Organization with specified Id does not exist."
          }
        }
      }
    },
    "/api/v1/organizationadministrator": {
      "get": {
        "tags": [
          "OrganizationAdmin"
        ],
        "summary": "Get all organization administrators.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of organization admins.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationAdminDTO"
              }
            }
          },
          "204": {
            "description": "No organization admins added in instance."
          },
          "403": {
            "description": "Insufficient permissions to get organization administrators"
          }
        }
      },
      "post": {
        "tags": [
          "OrganizationAdmin"
        ],
        "summary": "Create new Organization Admin.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The organization admin data Microsoft.Learning.Mlx.Models.OrganizationAdminDTO.",
            "schema": {
              "$ref": "#/definitions/OrganizationAdminDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful creation of organization admin."
          },
          "400": {
            "description": "Request payload format is invalid or Organization Identifier list in request payload is empty."
          },
          "403": {
            "description": "Insufficient permissions to add organization administrator"
          },
          "404": {
            "description": "No admin found with the provided contact."
          }
        }
      },
      "put": {
        "tags": [
          "OrganizationAdmin"
        ],
        "summary": "Update organization admin.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The updated organization admin data.",
            "schema": {
              "$ref": "#/definitions/OrganizationAdminDTO"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful update of organization admin data."
          },
          "400": {
            "description": "Organization Identifier list in request payload is empty or Request payload format is invalid."
          },
          "403": {
            "description": "Insufficient permissions to update organization administrator"
          }
        }
      },
      "delete": {
        "tags": [
          "OrganizationAdmin"
        ],
        "summary": "Delete organization Admin.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The organization admin contacts.",
            "schema": {
              "$ref": "#/definitions/ContactsDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion of organization admin."
          },
          "403": {
            "description": "organization admin contact to delete is of current user."
          }
        }
      }
    },
    "/api/v1/organizationadministrator/organizations": {
      "get": {
        "tags": [
          "OrganizationAdmin"
        ],
        "summary": "Get organizations for current authenticated user.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of organizations.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationDTO"
              }
            }
          },
          "204": {
            "description": "No administrable organizations for current user."
          }
        }
      }
    },
    "/api/v1/Profile/Picture": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Update profile picture",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful update of user profile picture",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Unsupported profile picture"
          }
        }
      }
    },
    "/api/v1/Profile": {
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Update user profile details",
        "description": "Request sample format -\r\n```\r\n{\r\n    \"department\": \"engineering\",\r\n    \"specialization\": \"back-end engineering\",\r\n    \"preferred programming language\": \"c#\"\r\n}\r\n```\r\nThe keys in the above JSON are the profile field default names\r\n\r\nThe values are the user specified values",
        "responses": {
          "200": {
            "description": "Successful update of user profile details"
          },
          "400": {
            "description": "If any of the validation checks fail"
          }
        }
      }
    },
    "/api/v1/Profile/Role": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get user role to decide whether to show the user a control to switch between learner and administrator views",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "412": {
            "description": "Precondition failed, if user is not existing"
          }
        }
      }
    },
    "/api/v1/quizzes/{quizId}/answer": {
      "post": {
        "tags": [
          "Quiz"
        ],
        "summary": "Submit answers to quiz identified by the quiz id",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "quizId",
            "description": "Quiz identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User's answer to the question",
            "schema": {
              "$ref": "#/definitions/UserQuestionAnswerModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful submission of quiz answer"
          },
          "400": {
            "description": "Provided quiz answer data isn't valid"
          },
          "404": {
            "description": "Quiz not found"
          }
        }
      }
    },
    "/api/v1/quizzes/{quizId}/userImages": {
      "post": {
        "tags": [
          "Quiz"
        ],
        "summary": "Uploads user images for quiz",
        "parameters": [
          {
            "in": "path",
            "name": "quizId",
            "description": "Quiz identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful submission of quiz images"
          },
          "400": {
            "description": "File not provided or not supported"
          },
          "404": {
            "description": "Quiz not found"
          }
        }
      }
    },
    "/api/v1/courses/{courseId}/quiz/importprogress": {
      "post": {
        "tags": [
          "Quiz"
        ],
        "summary": "Import progress of quizzes",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "The course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Progress of quizzes in the course",
            "schema": {
              "$ref": "#/definitions/ImportQuizProgressHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of quizzes with progress import status.",
            "schema": {
              "$ref": "#/definitions/QuizSubmissionStatusResponseList"
            }
          },
          "400": {
            "description": "Quiz progress data is invalid."
          },
          "403": {
            "description": "If the user doesn't have access to import progress"
          },
          "404": {
            "description": "If the course id is not proper, user contact is not proper and quiz ids not proper"
          }
        }
      }
    },
    "/api/v1/Reports/Overview/Categories": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download categories in overview analytics",
        "responses": {
          "200": {
            "description": "Successful download of categories in overview analytics"
          }
        }
      }
    },
    "/api/v1/Reports/Category/{categoryId}/Courses": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download courses in category analytics",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "description": "Category identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful download of courses in category analytics"
          },
          "403": {
            "description": "Access not allowed"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/api/v1/Reports/Course/{courseId}/Lessons": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download lessons in course analytics",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful download of lessons in course analytics"
          },
          "403": {
            "description": "Access not allowed"
          },
          "404": {
            "description": "Course not found"
          }
        }
      }
    },
    "/api/v1/Reports/Course/{courseId}/Quizzes": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download quizzes in course analytics",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful download of quizzes in course analytics"
          },
          "403": {
            "description": "Access not allowed"
          },
          "404": {
            "description": "Course not found"
          }
        }
      }
    },
    "/api/v1/Reports/Course/{courseId}/Learners": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download learners in course analytics",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "description": "Course identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful download of learner information in course analytics"
          },
          "403": {
            "description": "Access not allowed"
          },
          "404": {
            "description": "Course not found"
          }
        }
      }
    },
    "/api/v1/Reports/Learner/{userId}/ReportCard": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download learner report card data",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "User identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful download of learner report card data"
          },
          "404": {
            "description": "Invalid user id"
          }
        }
      }
    },
    "/api/v1/Reports/Users": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download user information for administrator.",
        "description": "This api is now deprecated for downloading user csv please use the latest version.",
        "parameters": [
          {
            "in": "query",
            "name": "courseId",
            "description": "Course identifier",
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "in": "query",
            "name": "groupId",
            "description": "Group identifier",
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful download of learner report card data"
          },
          "400": {
            "description": "Invalid course id or group id"
          }
        }
      }
    },
    "/api/v1/content": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get content items i.e. courses, categories and lessons that are most relevant to the provided search term",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "description": "The provided search term",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of search result(s)"
          },
          "400": {
            "description": "Search term is empty"
          }
        }
      }
    },
    "/api/v1/content/suggest": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get suggested content item i.e. courses, categories and lesson suggestions that are most relevant to the provided search term",
        "parameters": [
          {
            "in": "query",
            "name": "suggest",
            "description": "The provided term",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of suggestions based on provided term"
          },
          "400": {
            "description": "Provided term is empty"
          }
        }
      }
    },
    "/api/v1/users/contact": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update user's contact.",
        "description": "Sample json:\r\n```\r\n    POST\r\n    {\r\n        currentContact: \"test@gmail.com\",\r\n        newContact: \"janedoe@gmail.com\"\r\n    }\r\n```",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Current contact and the contact which is supposed to replace the current contact of the user.",
            "schema": {
              "$ref": "#/definitions/UserContactDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful addition/updation of users."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get list of users with email address, first name or last name matching the search term.",
        "description": "Changes\r\n1. This api now accepts 1 additional query parameters 'orgId'\r\n\r\n    a. Pass this parameter to search users in the organization identified by orgId.\r\n     \r\n    b. In case users already exist.They will move to the selected organization.\r\n     \r\n2. Only super admins can get/search users from any organization.\r\n3. Organization admin can get/search users only on those organization where they have admin rights.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "orgId",
            "description": "Identifier of organization in which user needs to be searched.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "searchTerm",
            "description": "Search term",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of user search result(s) that matches search term",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MlxUser"
              }
            }
          },
          "400": {
            "description": "If user search term is less than 3"
          },
          "403": {
            "description": "If user doesn't have required permission"
          },
          "404": {
            "description": "The organization doesn't exist"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete users with the Ids specified in the request body",
        "description": "Sample request:\r\n    DELETE\r\n```\r\n    {\r\n       \"Ids\": [\r\n          1045\r\n       ]\r\n    }\r\n```",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data holder for user identifiers",
            "schema": {
              "$ref": "#/definitions/UserIdDataHolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful deletion"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add/Update users.",
        "description": "Accepts\r\n  \r\nMulti part form data\r\n<br>\r\n  \r\n    - Json array of user contacts.\r\n      Sample format: [\"user_contact\", \"user_contact\", \"user_contact\"]\r\n<br>\r\n\r\n    - Csv file of users. CSV file should be attached to request with filename as \"CsvDoc\".\r\n      Sample format can be downloaded from 'Bulk upload Users' pop up.\r\n<br>\r\n  Json\r\n  \r\n    - List of user view models.\r\n    \r\n      Sample format:\r\n      \r\n      {\r\n        \"users\": [\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000007\",\r\n            \"firstName\": \"FN-07\",\r\n            \"lastName\": \"LN-07\",\r\n            \"customProfilefields\": {\r\n              \"Textfield\": \"1\",\r\n              \"Multiselect\": \"MS01\"\r\n            }\r\n          },\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000008\",\r\n            \"firstName\": \"FN-08\",\r\n            \"lastName\": \"LN-08\",\r\n            \"customProfilefields\": {\r\n              \"Dropdown\": \"DD01\",\r\n              \"Multiselect\": \"MS01;MS02\"\r\n            }\r\n          },\r\n          {\r\n            \"countryCode\": \"91\",\r\n            \"contact\": \"4321000009\",\r\n            \"firstName\": \"FN-08\",\r\n            \"lastName\": \"LN-08\",\r\n            \"customProfilefields\": {\r\n              \"Textfield\": \"1\",\r\n              \"Dropdown\": \"DD01\",\r\n              \"Multiselect\": [\"MS01\",\"MS02\",\"MS03\"]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n\r\nChanges\r\n1. This api now accepts 4 additional query parameters\r\n\r\n    1.1. orgId\r\n    \r\n      1.1.1. Pass this parameter to create users in the organization identified by orgId.\r\n      \r\n      1.1.2. In case users already exist.They will move to the selected organization.\r\n    \r\n    1.2. orgName\r\n    \r\n      1.2.1. Pass this parameter to create users in the organization identified by orgName.\r\n      \r\n      1.2.2. In case users already exist.They will move to the selected organization.\r\n    \r\n    1.3. errorLimit\r\n  \r\n      1.3.1. Pass the parameter to stop further processing if number of exception encountered by the system is equal to ‘errorLimit’. \r\n             errorLimit default to 10\r\n       \r\n    1.4. 'isAsync'\r\n  \r\n      1.4.1. Default value is isAsync is set to true. Which indicates actual user addition and updation will be done asynchronously.\r\n             Users data validation is done synchronously, actual users creation and updation is done asynchronously.\r\n             Explicitly pass isAsync=false to call user addition and updation synchronously.\r\n     \r\n2. In case both orgId and orgName are missing. It is assumed that users are being added to default organization.Organization id = 1.\r\n3. In case both orgId and orgName are passed preference will be given to orgId.\r\n4. Error response has been updated to new format.\r\n5. Only super admins can create/update users in any organization.\r\n6. Organization admin can create/updated users only on those organization where they have admin rights.",
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "orgId",
            "description": "Optional Parameter: Organization id to which user is being moved.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "orgName",
            "description": "Optional Parameter: Organization name to which user is being moved.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "isAsync",
            "description": "Optional Parameter: Flag to indicate whether the operation should be done asynchronously or not. Defaults to true.",
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "name": "errorLimit",
            "description": "Optional Parameter: After encountering 'errorLimit' number of errors. Stop processing. Defaults to 10.",
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "in": "formData",
            "name": "formFile",
            "description": "For uploading users csv file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Successful addition/updation of users."
          },
          "400": {
            "description": "If content type isn't provided."
          },
          "403": {
            "description": "The user doesn't have required permissions."
          },
          "404": {
            "description": "The organization doesn't exists."
          }
        }
      }
    },
    "/api/v1/users/progress": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get progress details for all users",
        "responses": {
          "200": {
            "description": "Successful download of user progress json file"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Upload file containing progress details, validate data and import the same",
        "responses": {
          "200": {
            "description": "Success"
          },
          "202": {
            "description": "Successfully uploaded progress details file"
          },
          "400": {
            "description": "Invalid file MIME type or JSON data format"
          }
        }
      }
    },
    "/api/v1/user/organization": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update the Organization Identifier for the user.",
        "description": "Sample request Body\r\n```\r\n{\r\n    \"userContact\":\"+91 1048523706\",\r\n    \"organizationName\": \"Drivers | Laos\"\r\n}\r\n```",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data holder for organizations name and user contact.",
            "schema": {
              "$ref": "#/definitions/UserOrganizationDataHolder"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "the organization identifier has been updated successfully."
          },
          "403": {
            "description": "If the admin user doesn't have access to update organization identifier of the user."
          },
          "404": {
            "description": "The user or the organization does not exist."
          }
        }
      }
    },
    "/api/v1/users/{userId}/groups": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get groups for the user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups for a user received successfully."
          },
          "404": {
            "description": "If the user Identifier is not proper."
          }
        }
      }
    },
    "/api/v1/users/{userId}/learningpaths": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get learning paths for the user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The user identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Learning paths for a user received successfully."
          },
          "404": {
            "description": "If the user Identifier is not proper."
          }
        }
      }
    },
    "/api/v1/users/GetByContact": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Fetches details for the user with the given contact details.",
        "description": "All admins can call the api.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Contact detail for the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Groups for a user received successfully.",
            "schema": {
              "$ref": "#/definitions/MlxUser"
            }
          },
          "404": {
            "description": "If the user with given contact details is not present."
          }
        }
      }
    },
    "/api/v1/courses/{courseId}/users/{userId}/enrollments": {
      "delete": {
        "tags": [
          "UserEnrollment"
        ],
        "summary": "Endpoint for removing user enrollment from a course",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "If course enrollment for user has been removed successfully"
          },
          "400": {
            "description": "If user is enrolled to course specified via groups"
          },
          "403": {
            "description": "If user doesn't have access to the specified course"
          },
          "404": {
            "description": "If user specified doesn't exist"
          }
        }
      }
    },
    "/api/v1/learningpaths/{learningPathId}/users/{userId}/enrollments": {
      "delete": {
        "tags": [
          "UserEnrollment"
        ],
        "summary": "Endpoint for removing user enrollment from a learning path",
        "parameters": [
          {
            "in": "path",
            "name": "learningPathId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "If learning path enrollment for user has been removed successfully"
          },
          "400": {
            "description": "If user is enrolled to learning path specified via groups"
          },
          "403": {
            "description": "If user doesn't have access to the specified learning path"
          },
          "404": {
            "description": "If user specified doesn't exist"
          }
        }
      }
    },
    "/api/v1/courses/{courseId}/register": {
      "post": {
        "tags": [
          "UserEnrollment"
        ],
        "summary": "Endpoint for enrolling the calling user to a course",
        "parameters": [
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "If course has been successfully enrolled for the user"
          },
          "400": {
            "description": "If course specified does not have enrollment type of self-enroll"
          },
          "404": {
            "description": "If course specified does not exist"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessibleUsersModel": {
      "type": "object",
      "properties": {
        "Model": {
          "$ref": "#/definitions/CourseAnalyticsModel"
        },
        "CourseName": {
          "type": "string"
        },
        "CourseId": {
          "format": "int32",
          "type": "integer"
        },
        "OfferId": {
          "format": "int32",
          "type": "integer"
        },
        "OfferName": {
          "type": "string"
        },
        "LessonsCount": {
          "format": "int32",
          "type": "integer"
        },
        "QuizzesCount": {
          "format": "int32",
          "type": "integer"
        },
        "LearnersEnrolled": {
          "format": "int32",
          "type": "integer"
        },
        "CourseCompletions": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "AddKCQuestions": {
      "type": "object",
      "properties": {
        "QuestionsIdsString": {
          "type": "string"
        },
        "RemoveOldQuestions": {
          "type": "boolean"
        }
      }
    },
    "AddUpdateQuestion": {
      "type": "object",
      "properties": {
        "Type": {
          "format": "int32",
          "type": "integer"
        },
        "Content": {
          "type": "string"
        },
        "AnswerOptions": {
          "type": "string"
        },
        "AssessmentImages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Comments": {
          "default": "",
          "type": "string"
        },
        "IsShuffleAnswers": {
          "default": false,
          "type": "boolean"
        },
        "IsPrivate": {
          "default": false,
          "type": "boolean"
        },
        "Weightage": {
          "format": "double",
          "default": 1,
          "type": "number"
        },
        "Tags": {
          "default": "",
          "type": "string"
        },
        "Answer": {
          "type": "string"
        },
        "Uuid": {
          "type": "string"
        },
        "AdditionalInfo": {
          "$ref": "#/definitions/AdditionalInfo"
        }
      }
    },
    "AdditionalInfo": {
      "type": "object",
      "properties": {
        "FillBlankInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlankInfo"
          }
        }
      }
    },
    "Admin": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "AdminEmailId": {
          "type": "string"
        },
        "AddedDate": {
          "format": "date-time",
          "type": "string"
        },
        "AddedBy": {
          "type": "string"
        },
        "RoleType": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      }
    },
    "AllUsersModel": {
      "type": "object",
      "properties": {
        "NextPageLink": {
          "type": "string"
        },
        "UserDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MlxUser"
          }
        },
        "TotalUsers": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "BlankInfo": {
      "type": "object",
      "properties": {
        "BlankId": {
          "format": "int32",
          "type": "integer"
        },
        "BlankType": {
          "format": "int32",
          "type": "integer"
        },
        "MatchCriterion": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "BlankUserAnswer": {
      "type": "object",
      "properties": {
        "BlankId": {
          "format": "int32",
          "type": "integer"
        },
        "Answer": {
          "type": "string"
        }
      }
    },
    "BlobLink": {
      "type": "object",
      "properties": {
        "BlobUrl": {
          "type": "string"
        }
      }
    },
    "CategoryCourseInfo": {
      "type": "object",
      "properties": {
        "CategoryList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryInfo"
          }
        },
        "CourseList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseInfo"
          }
        },
        "RestrictedCourseList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseInfo"
          }
        }
      }
    },
    "CategoryEntity": {
      "type": "object",
      "properties": {
        "CategoryId": {
          "format": "int32",
          "type": "integer"
        },
        "CategoryName": {
          "type": "string"
        },
        "CategoryDescription": {
          "type": "string"
        },
        "CategoryImage": {
          "type": "string"
        },
        "Courses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseEntity"
          }
        }
      }
    },
    "CategoryInfo": {
      "type": "object",
      "properties": {
        "CategoryIdKey": {
          "format": "int32",
          "type": "integer"
        },
        "CategoryName": {
          "type": "string"
        },
        "CategoryNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocalizedData"
          }
        },
        "DefaultLanguageCode": {
          "type": "string"
        }
      }
    },
    "CategoryListInfo": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Names": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocalizedData"
          }
        },
        "DefaultLanguageCode": {
          "type": "string"
        },
        "Logo": {
          "type": "string"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationName": {
          "type": "string"
        },
        "Uuid": {
          "type": "string"
        },
        "HasEditAccess": {
          "type": "boolean"
        }
      }
    },
    "CategoryMetadata": {
      "type": "object",
      "properties": {
        "CategoryName": {
          "type": "string"
        },
        "LogoUrl": {
          "type": "string"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "Uuid": {
          "type": "string"
        }
      }
    },
    "CategoryOfferEntity": {
      "type": "object",
      "properties": {
        "AdminModel": {
          "$ref": "#/definitions/CoursesModel"
        },
        "CurrentUserRole": {
          "type": "string"
        }
      }
    },
    "CertificateStatus": {
      "enum": [
        "NotApplicable",
        "CompletionStatus",
        "CertificationQuiz",
        "CompletionStatusAndCertificationQuiz"
      ],
      "type": "string"
    },
    "CertificateTemplate": {
      "type": "object",
      "properties": {
        "TemplateId": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "TemplateUrl": {
          "type": "string"
        },
        "Language": {
          "type": "string"
        },
        "TemplateString": {
          "type": "string"
        },
        "UseTemplateString": {
          "type": "boolean"
        }
      }
    },
    "CertificateTemplateConfig": {
      "type": "object",
      "properties": {
        "URL": {
          "type": "string"
        },
        "Language": {
          "type": "string"
        }
      }
    },
    "CertificatesResponseModel": {
      "type": "object",
      "properties": {
        "CourseCertificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseCertificateDTO"
          }
        },
        "LearningPathCertificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LearningPathCertificateDTO"
          }
        }
      }
    },
    "CollegeModel": {
      "type": "object",
      "properties": {
        "OfferId": {
          "format": "int32",
          "type": "integer"
        },
        "OfferName": {
          "type": "string"
        },
        "OfferDesc": {
          "type": "string"
        },
        "ImageUrl": {
          "type": "string"
        },
        "OfferNamePart1": {
          "type": "string",
          "readOnly": true
        },
        "OfferNamePart2": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ContactsDataHolder": {
      "required": [
        "Contacts"
      ],
      "type": "object",
      "properties": {
        "Contacts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ContentEntity": {
      "type": "object",
      "properties": {
        "CategoryEntityList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryEntity"
          }
        },
        "LearningPaths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LearningPathResponseEntity"
          }
        },
        "certificatesCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CourseAnalyticsModel": {
      "type": "object",
      "properties": {
        "LearnersInCourseAnalytics": {
          "type": "string"
        },
        "LessonsInCourseAnalytics": {
          "type": "string"
        },
        "QuizInCourseAnalytics": {
          "type": "string"
        },
        "LearnersEnrolledOverTime": {
          "type": "string"
        },
        "CourseEnrollmentsAndCompletionsOverTime": {
          "type": "string"
        }
      }
    },
    "CourseCategoryInfo": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "ParentId": {
          "format": "int32",
          "type": "integer"
        },
        "ContentLanguage": {
          "type": "string"
        },
        "ParentCourseId": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Logo": {
          "type": "string"
        },
        "ParentName": {
          "type": "string"
        },
        "ParentNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocalizedData"
          }
        },
        "ParentDefaultLanguageCode": {
          "type": "string"
        },
        "EnrollmentType": {
          "format": "int32",
          "type": "integer"
        },
        "IsCertificate": {
          "type": "boolean"
        },
        "LearningFlowType": {
          "type": "boolean"
        },
        "CertificateTemplateId": {
          "format": "int32",
          "type": "integer"
        },
        "NumPublishedLessons": {
          "format": "int32",
          "type": "integer"
        },
        "NumPublishedKCs": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationName": {
          "type": "string"
        },
        "ImportContentType": {
          "$ref": "#/definitions/ImportContentType"
        },
        "ImportContentURL": {
          "type": "string"
        },
        "FeedbackFormUrl": {
          "type": "string"
        },
        "HasEditAccess": {
          "type": "boolean"
        },
        "OfflineSync": {
          "type": "boolean"
        },
        "SummaryGenerationStatus": {
          "type": "string"
        }
      }
    },
    "CourseCertificateDTO": {
      "type": "object",
      "properties": {
        "CourseId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseName": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        },
        "GeneratedAt": {
          "format": "date-time",
          "type": "string"
        },
        "CertificateStatus": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CourseEntity": {
      "type": "object",
      "properties": {
        "CourseName": {
          "type": "string"
        },
        "CourseDescription": {
          "type": "string"
        },
        "ProductId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseImage": {
          "type": "string"
        },
        "IsRegistered": {
          "type": "boolean"
        },
        "FeedbackFormURL": {
          "type": "string"
        },
        "CompletionPercentage": {
          "format": "double",
          "type": "number"
        },
        "CourseItemCount": {
          "format": "int32",
          "type": "integer"
        },
        "PublishedLessonCount": {
          "format": "int32",
          "type": "integer"
        },
        "LastLessonID": {
          "format": "int32",
          "type": "integer"
        },
        "IsCertificateEnabled": {
          "type": "boolean"
        },
        "CourseCompletionDate": {
          "format": "date-time",
          "type": "string"
        },
        "Priority": {
          "type": "string"
        },
        "ImportContentType": {
          "$ref": "#/definitions/ImportContentType"
        },
        "ImportContentURL": {
          "type": "string"
        },
        "ParentCourseId": {
          "format": "int32",
          "type": "integer"
        },
        "ContentLanguage": {
          "type": "string"
        }
      }
    },
    "CourseIdDataHolder": {
      "required": [
        "CourseIds"
      ],
      "type": "object",
      "properties": {
        "CourseIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "CourseInfo": {
      "type": "object",
      "properties": {
        "CourseIdKey": {
          "format": "int32",
          "type": "integer"
        },
        "CourseName": {
          "type": "string"
        },
        "CoursePriority": {
          "type": "string"
        },
        "ParentId": {
          "format": "int32",
          "type": "integer"
        },
        "IsSelected": {
          "type": "boolean"
        }
      }
    },
    "CourseMetadata": {
      "type": "object",
      "properties": {
        "CourseName": {
          "type": "string"
        },
        "ContentLanguage": {
          "type": "string"
        },
        "ParentCourseId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseDesc": {
          "default": "",
          "type": "string"
        },
        "ParentCourseUUId": {
          "type": "string"
        },
        "Authors": {
          "type": "string"
        },
        "Lync": {
          "type": "string"
        },
        "Skype": {
          "type": "string"
        },
        "StartDate": {
          "type": "string"
        },
        "EndDate": {
          "type": "string"
        },
        "ImgUrl": {
          "type": "string"
        },
        "RegCode": {
          "type": "string"
        },
        "Tags": {
          "type": "string"
        },
        "CourseRegistrationFlow": {
          "$ref": "#/definitions/CourseRegistrationFlow"
        },
        "CertificateStatus": {
          "$ref": "#/definitions/CertificateStatus"
        },
        "LearningFlowType": {
          "$ref": "#/definitions/LearningFlowType"
        },
        "CertificateTemplateId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "ImportContentType": {
          "$ref": "#/definitions/ImportContentType"
        },
        "ImportContentURL": {
          "type": "string"
        },
        "FeedbackFormUrl": {
          "type": "string"
        },
        "Uuid": {
          "type": "string"
        },
        "OfflineSync": {
          "type": "boolean"
        }
      }
    },
    "CourseModel": {
      "type": "object",
      "properties": {
        "CourseName": {
          "type": "string"
        },
        "CourseDescription": {
          "type": "string"
        },
        "ProductId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseImage": {
          "type": "string"
        },
        "IsRegistered": {
          "type": "boolean"
        },
        "FeedbackFormURL": {
          "type": "string"
        },
        "KcProgress": {
          "format": "int32",
          "type": "integer"
        },
        "LessonProgress": {
          "format": "int32",
          "type": "integer"
        },
        "Score": {
          "type": "string"
        },
        "HasEditAccess": {
          "type": "boolean"
        },
        "IsPublished": {
          "type": "boolean"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "CourseEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "CertificateUrl": {
          "type": "string"
        },
        "HasQuiz": {
          "type": "boolean"
        },
        "CourseCompletionPercentage": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "CourseModule": {
      "required": [
        "Id",
        "Status"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Status": {
          "$ref": "#/definitions/CourseModuleStatus"
        },
        "Score": {
          "format": "double",
          "default": 0,
          "type": "number"
        },
        "Metadata": {
          "default": "",
          "type": "string"
        }
      }
    },
    "CourseModuleResponse": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Status": {
          "type": "string"
        },
        "ErrorCode": {
          "format": "int32",
          "type": "integer"
        },
        "ErrorMessage": {
          "type": "string"
        }
      }
    },
    "CourseModuleResponseList": {
      "type": "object",
      "properties": {
        "CourseModuleResponseItemList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseModuleResponse"
          }
        }
      }
    },
    "CourseModuleStatus": {
      "enum": [
        "notCompleted",
        "completed"
      ],
      "type": "string"
    },
    "CourseOfferEntity": {
      "type": "object",
      "properties": {
        "AdminModel": {
          "$ref": "#/definitions/CourseUsersModel"
        },
        "CurrentUserRole": {
          "type": "string"
        }
      }
    },
    "CourseOutlineModel": {
      "type": "object",
      "properties": {
        "CourseName": {
          "type": "string"
        },
        "CourseDescription": {
          "type": "string"
        },
        "ProductId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseImage": {
          "type": "string"
        },
        "IsRegistered": {
          "type": "boolean"
        },
        "FeedbackFormURL": {
          "type": "string"
        },
        "CourseItems": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ImportContentType": {
          "format": "int32",
          "type": "integer"
        },
        "ImportContentURL": {
          "type": "string"
        }
      }
    },
    "CoursePriority": {
      "enum": [
        "Default",
        "Optional",
        "Recommended",
        "Required"
      ],
      "type": "string"
    },
    "CoursePriorityDataHolder": {
      "required": [
        "CourseId",
        "Priority"
      ],
      "type": "object",
      "properties": {
        "CourseId": {
          "format": "int32",
          "type": "integer"
        },
        "Priority": {
          "$ref": "#/definitions/CoursePriority"
        }
      }
    },
    "CourseRegistrationFlow": {
      "enum": [
        "OpenToAll",
        "SelfSignup",
        "AdminManaged"
      ],
      "type": "string"
    },
    "CourseUsersModel": {
      "type": "object",
      "properties": {
        "NextPageLink": {
          "type": "string"
        },
        "Users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "Admins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Admin"
          }
        },
        "TotalUsers": {
          "format": "int32",
          "type": "integer"
        },
        "TotalAdmins": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CoursesModel": {
      "type": "object",
      "properties": {
        "Admins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Admin"
          }
        },
        "Colleges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollegeModel"
          }
        },
        "Courses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseModel"
          }
        },
        "SubColleges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollegeModel"
          }
        },
        "CollegeName": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "CollegeLogo": {
          "type": "string"
        },
        "UniversityId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "DeploymentInfo": {
      "type": "object",
      "properties": {
        "PackageVersion": {
          "type": "string"
        },
        "ApplicationVersion": {
          "type": "string"
        },
        "DataMigrationVersion": {
          "type": "string"
        },
        "ServiceUpdateDate": {
          "type": "string"
        },
        "DatabaseUpdateDate": {
          "type": "string"
        },
        "DatabaseBuildDate": {
          "type": "string"
        },
        "PackageBuildDate": {
          "type": "string"
        },
        "PendingMigrationIDs": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "CompletedMigrationIDs": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "ApplicationBuildDetails": {
          "type": "string"
        }
      }
    },
    "EdgeDeviceListModel": {
      "type": "object",
      "properties": {
        "EdgeDevices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeDeviceModel"
          }
        },
        "TotalDeviceCount": {
          "format": "int32",
          "type": "integer"
        },
        "NextLink": {
          "type": "string"
        }
      }
    },
    "EdgeDeviceModel": {
      "type": "object",
      "properties": {
        "DeviceId": {
          "format": "int32",
          "type": "integer"
        },
        "DeviceName": {
          "type": "string"
        },
        "DevicePrefix": {
          "type": "string"
        },
        "CreatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        }
      }
    },
    "Expression": {
      "type": "object",
      "properties": {
        "Operator": {
          "type": "string"
        },
        "Operands": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FillBlankQuestionUserAnswers": {
      "type": "object",
      "properties": {
        "FillBlankUserAnswers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlankUserAnswer"
          }
        }
      }
    },
    "ForumComment": {
      "type": "object",
      "properties": {
        "PostMessage": {
          "type": "string"
        },
        "ParentPost": {
          "type": "string"
        }
      }
    },
    "ForumPost": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AuthorId": {
          "format": "int32",
          "type": "integer"
        },
        "AuthorName": {
          "type": "string"
        },
        "AuthorProfileImage": {
          "type": "string"
        },
        "DatePosted": {
          "format": "date-time",
          "type": "string"
        },
        "PostMessage": {
          "type": "string"
        },
        "ParentPost": {
          "type": "string"
        }
      }
    },
    "GlobalSettings": {
      "type": "object",
      "properties": {
        "Whitelist": {
          "type": "boolean"
        },
        "RestrictedGroup": {
          "type": "boolean"
        }
      }
    },
    "GroupAdminInfo": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "ContactInfo": {
          "type": "string"
        }
      }
    },
    "GroupAnnouncementModel": {
      "type": "object",
      "properties": {
        "AnnouncementMessage": {
          "type": "string"
        },
        "UserIds": {
          "type": "string"
        }
      }
    },
    "GroupInfo": {
      "type": "object",
      "properties": {
        "GroupId": {
          "format": "int32",
          "type": "integer"
        },
        "GroupName": {
          "type": "string"
        },
        "GroupDescription": {
          "type": "string"
        },
        "NumberOfUsers": {
          "format": "int32",
          "type": "integer"
        },
        "GroupType": {
          "type": "string"
        },
        "Rules": {
          "type": "string"
        },
        "RulesObj": {
          "$ref": "#/definitions/RulesObject"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationName": {
          "type": "string"
        }
      }
    },
    "GroupMetadata": {
      "type": "object",
      "properties": {
        "GroupName": {
          "type": "string"
        },
        "GroupDescription": {
          "type": "string"
        },
        "AdminContact": {
          "type": "string"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "HomeModel": {
      "type": "object",
      "properties": {
        "Offers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryListInfo"
          }
        },
        "CourseItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseCategoryInfo"
          }
        },
        "RestrictedCourseItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseCategoryInfo"
          }
        }
      }
    },
    "ImportContent": {
      "type": "object",
      "properties": {
        "ImportType": {
          "$ref": "#/definitions/ImportContentType"
        },
        "ContentBody": {
          "type": "string"
        }
      }
    },
    "ImportContentType": {
      "enum": [
        "MsLearn",
        "MsDigitalContent",
        "UploadCoursesByFile"
      ],
      "type": "string"
    },
    "ImportLessonProgressHolder": {
      "type": "object",
      "properties": {
        "UserContact": {
          "type": "string"
        },
        "LessonProgress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseModule"
          }
        }
      }
    },
    "ImportQuizProgressHolder": {
      "type": "object",
      "properties": {
        "UserContact": {
          "type": "string"
        },
        "QuizProgress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuizData"
          }
        }
      }
    },
    "KC": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "TotalScore": {
          "default": "100",
          "type": "string"
        },
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        },
        "StartTime": {
          "type": "string"
        },
        "EndTime": {
          "type": "string"
        },
        "IsCertificationKc": {
          "default": false,
          "type": "boolean"
        },
        "QuestionIds": {
          "type": "string"
        },
        "IsShuffleQuestions": {
          "default": true,
          "type": "boolean"
        },
        "MaxQuestionsOnShuffle": {
          "format": "int32",
          "default": 0,
          "type": "integer"
        },
        "IsAnswerCorrectnessHidden": {
          "default": true,
          "type": "boolean"
        },
        "MessageOnQuizEnd": {
          "type": "string"
        },
        "ReminderBeforeDays": {
          "format": "int32",
          "default": -1,
          "type": "integer"
        },
        "IsSurvey": {
          "default": false,
          "type": "boolean"
        },
        "PassingPercent": {
          "format": "int32",
          "type": "integer"
        },
        "QuizType": {
          "format": "int32",
          "type": "integer"
        },
        "NumOfAttempts": {
          "format": "int32",
          "type": "integer"
        },
        "Uuid": {
          "type": "string"
        }
      }
    },
    "KCRetake": {
      "type": "object",
      "properties": {
        "RetakeId": {
          "format": "int32",
          "type": "integer"
        },
        "UserId": {
          "format": "int32",
          "type": "integer"
        },
        "ModuleId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseId": {
          "format": "int32",
          "type": "integer"
        },
        "Score": {
          "format": "float",
          "type": "number"
        },
        "AddedDate": {
          "format": "date-time",
          "type": "string"
        },
        "CustomString1": {
          "type": "string"
        },
        "CustomString2": {
          "type": "string"
        },
        "CustomString3": {
          "type": "string"
        },
        "CustomString4": {
          "type": "string"
        },
        "CustomString5": {
          "type": "string"
        },
        "CustomString6": {
          "type": "string"
        },
        "CustomString7": {
          "type": "string"
        },
        "CustomText1": {
          "type": "string"
        },
        "CustomText2": {
          "type": "string"
        },
        "CustomInt1": {
          "type": "string"
        },
        "CustomInt2": {
          "type": "string"
        },
        "CustomInt3": {
          "type": "string"
        },
        "CustomInt4": {
          "type": "string"
        }
      }
    },
    "LearnerAnswers": {
      "type": "object",
      "properties": {
        "Answer": {
          "format": "string",
          "type": "string"
        },
        "FillBlankAnswers": {
          "$ref": "#/definitions/FillBlankQuestionUserAnswers"
        },
        "CorrectAnswer": {
          "format": "string",
          "type": "string"
        },
        "QuestionId": {
          "format": "int32",
          "type": "integer"
        },
        "IsCorrect": {
          "type": "boolean"
        },
        "AnswerImported": {
          "default": false,
          "type": "boolean"
        }
      }
    },
    "LearnerModulesProgressDetail": {
      "type": "object",
      "properties": {
        "ModuleId": {
          "format": "int32",
          "type": "integer"
        },
        "IsCompleted": {
          "type": "string"
        },
        "Score": {
          "format": "float",
          "type": "number"
        },
        "IsKC": {
          "type": "boolean"
        },
        "Title": {
          "type": "string"
        }
      }
    },
    "LearnerReportCard": {
      "type": "object",
      "properties": {
        "NameOfUser": {
          "type": "string"
        },
        "ContactOfUser": {
          "type": "string"
        },
        "EmailOfUser": {
          "type": "string"
        },
        "ProfilePicURIOfUser": {
          "type": "string"
        },
        "NumberOfModulesCompleted": {
          "format": "int32",
          "type": "integer"
        },
        "TotalNumberOfModulesEnrolled": {
          "format": "int32",
          "type": "integer"
        },
        "AverageQuizScoreForUser": {
          "format": "double",
          "type": "number"
        },
        "ModuleDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LearnerReportCardModuleDetails"
          }
        }
      }
    },
    "LearnerReportCardModuleDetails": {
      "type": "object",
      "properties": {
        "ModuleId": {
          "format": "int32",
          "type": "integer"
        },
        "ModuleName": {
          "type": "string"
        },
        "EnrolledOn": {
          "type": "string"
        },
        "AverageQuizScorePercentage": {
          "type": "string"
        },
        "AvgQuizScoreStr": {
          "format": "float",
          "type": "number"
        },
        "ModuleCompletionPercentage": {
          "format": "float",
          "type": "number"
        },
        "NumberOfQuizzesTaken": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfQuizzesInModule": {
          "format": "int32",
          "type": "integer"
        },
        "IsBlocked": {
          "type": "boolean"
        },
        "CoursePriority": {
          "type": "string"
        },
        "ParentCourseId": {
          "format": "int32",
          "type": "integer"
        },
        "CompletedOn": {
          "type": "string"
        }
      }
    },
    "LearningFlowType": {
      "enum": [
        "LearningFlowUnorderedType",
        "LearningFlowOrderedType"
      ],
      "type": "string"
    },
    "LearningPathAdministrator": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Contact": {
          "type": "string"
        },
        "AddedDateTime": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "LearningPathCertificateDTO": {
      "type": "object",
      "properties": {
        "LearningPathId": {
          "format": "int32",
          "type": "integer"
        },
        "LearningPathName": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        },
        "GeneratedAt": {
          "format": "date-time",
          "type": "string"
        },
        "CertificateStatus": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "LearningPathCourse": {
      "type": "object",
      "properties": {
        "CourseId": {
          "format": "int32",
          "type": "integer"
        },
        "CategoryId": {
          "format": "int32",
          "type": "integer"
        },
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        },
        "MappingId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseName": {
          "type": "string"
        },
        "CategoryName": {
          "type": "string"
        },
        "LocalizedCategoryNames": {
          "type": "string"
        },
        "NumPublishedLessons": {
          "format": "int32",
          "type": "integer"
        },
        "NumPublishedQuizes": {
          "format": "int32",
          "type": "integer"
        },
        "CategoryThumbnailUrl": {
          "type": "string"
        },
        "CourseThumbnailUrl": {
          "type": "string"
        },
        "Priority": {
          "type": "string"
        }
      }
    },
    "LearningPathCourseBase": {
      "type": "object",
      "properties": {
        "CourseId": {
          "format": "int32",
          "type": "integer"
        },
        "CategoryId": {
          "format": "int32",
          "type": "integer"
        },
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "LearningPathCourseEntity": {
      "type": "object",
      "properties": {
        "CourseName": {
          "type": "string"
        },
        "CourseDescription": {
          "type": "string"
        },
        "ProductId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseImage": {
          "type": "string"
        },
        "IsRegistered": {
          "type": "boolean"
        },
        "FeedbackFormURL": {
          "type": "string"
        },
        "CompletionPercentage": {
          "format": "double",
          "type": "number"
        },
        "PublishedLessonCount": {
          "format": "int32",
          "type": "integer"
        },
        "LastLessonID": {
          "format": "int32",
          "type": "integer"
        },
        "IsCertificateEnabled": {
          "type": "boolean"
        },
        "CourseCompletionDate": {
          "format": "date-time",
          "type": "string"
        },
        "Priority": {
          "type": "string"
        },
        "CategoryId": {
          "format": "int32",
          "type": "integer"
        },
        "CategoryName": {
          "type": "string"
        },
        "ImportContentType": {
          "$ref": "#/definitions/ImportContentType"
        },
        "ImportContentURL": {
          "type": "string"
        }
      }
    },
    "LearningPathCourseUpdateRequest": {
      "type": "object",
      "properties": {
        "ReorderedCourses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LearningPathCourse"
          }
        },
        "RemovedCourseIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "AddedCourses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LearningPathCourseBase"
          }
        }
      }
    },
    "LearningPathCourseWrapper": {
      "type": "object",
      "properties": {
        "CourseId": {
          "format": "int32",
          "type": "integer"
        },
        "CategoryId": {
          "format": "int32",
          "type": "integer"
        },
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        },
        "MappingId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseName": {
          "type": "string"
        },
        "CategoryName": {
          "type": "string"
        },
        "LocalizedCategoryNames": {
          "type": "string"
        },
        "NumPublishedLessons": {
          "format": "int32",
          "type": "integer"
        },
        "NumPublishedQuizes": {
          "format": "int32",
          "type": "integer"
        },
        "CategoryThumbnailUrl": {
          "type": "string"
        },
        "CourseThumbnailUrl": {
          "type": "string"
        },
        "Priority": {
          "type": "string"
        },
        "LearningPathId": {
          "format": "int32",
          "type": "integer"
        },
        "LearningPathName": {
          "type": "string"
        },
        "LocalizedLearningPathNames": {
          "type": "string"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "LearningPathGroupAssigmentRequest": {
      "required": [
        "AddedCoursePriorities",
        "AddedLearningPathIds",
        "RemovedCourseIds",
        "RemovedLearningPathIds",
        "UpdatedCoursePriorities"
      ],
      "type": "object",
      "properties": {
        "AddedCoursePriorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoursePriorityDataHolder"
          }
        },
        "UpdatedCoursePriorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoursePriorityDataHolder"
          }
        },
        "RemovedCourseIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "AddedLearningPathIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "RemovedLearningPathIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "LearningPathGroupAssignmentResponse": {
      "type": "object",
      "properties": {
        "Courses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LearningPathCourseWrapper"
          }
        },
        "AssignedLearningPathIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "LearningPathMetadata": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IconFileUrl": {
          "type": "string"
        },
        "CertificateStatus": {
          "format": "int32",
          "type": "integer"
        },
        "CertificateTemplateId": {
          "format": "int32",
          "type": "integer"
        },
        "OrderRestrictionEnabled": {
          "type": "boolean"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "LearningPathMetadataResponseEntity": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IconFileUrl": {
          "type": "string"
        },
        "CertificateStatus": {
          "format": "int32",
          "type": "integer"
        },
        "CertificateTemplateId": {
          "format": "int32",
          "type": "integer"
        },
        "OrderRestrictionEnabled": {
          "type": "boolean"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationName": {
          "type": "string"
        },
        "HasEditAccess": {
          "type": "boolean"
        }
      }
    },
    "LearningPathResponseEntity": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Logo": {
          "type": "string"
        },
        "Priority": {
          "type": "string"
        },
        "IsOrderRestrictionEnabled": {
          "type": "boolean"
        },
        "CompletionPercentage": {
          "format": "double",
          "type": "number"
        },
        "AdminEnrolledCourseIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "Courses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LearningPathCourseEntity"
          }
        },
        "CertificateUrl": {
          "type": "string"
        },
        "CertificateStatus": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Lesson": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Description": {
          "default": "",
          "type": "string"
        },
        "Url": {
          "default": "",
          "type": "string"
        },
        "DownloadUrl": {
          "type": "string"
        },
        "ThumbnailUrl": {
          "type": "string"
        },
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        },
        "Tags": {
          "type": "string"
        },
        "VideoAsset": {
          "type": "string"
        },
        "RowVersion": {
          "format": "byte",
          "type": "string"
        },
        "FileType": {
          "type": "string"
        },
        "Uuid": {
          "type": "string"
        },
        "LessonType": {
          "$ref": "#/definitions/LessonType"
        },
        "FileExtension": {
          "default": "",
          "type": "string"
        },
        "Metadata": {
          "type": "string"
        },
        "SummaryGenerationStatus": {
          "$ref": "#/definitions/SummaryGenerationStatus"
        },
        "SummaryUrl": {
          "type": "string"
        }
      }
    },
    "LessonStatus": {
      "type": "object",
      "properties": {
        "LessonId": {
          "format": "int32",
          "type": "integer"
        },
        "ThumbnailStatus": {
          "type": "string"
        },
        "ThumbnailProgress": {
          "format": "double",
          "type": "number"
        },
        "EncodingStatus": {
          "type": "string"
        },
        "EncodingProgress": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "LessonType": {
      "enum": [
        "Unknown",
        "Pdf",
        "Doc",
        "Docx",
        "Xls",
        "Xlsx",
        "Ppt",
        "Pptx",
        "Video",
        "Epub",
        "Audio",
        "ExternalLink",
        "HTML",
        "Scorm1_2",
        "Summary"
      ],
      "type": "string"
    },
    "LocalizedData": {
      "type": "object",
      "properties": {
        "LanguageCode": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "MediaServicesToken": {
      "type": "object",
      "properties": {
        "Token": {
          "type": "string"
        }
      }
    },
    "MemoryStream": {
      "type": "object",
      "properties": {
        "CanTimeout": {
          "type": "boolean",
          "readOnly": true
        },
        "ReadTimeout": {
          "format": "int32",
          "type": "integer"
        },
        "WriteTimeout": {
          "format": "int32",
          "type": "integer"
        },
        "CanRead": {
          "type": "boolean",
          "readOnly": true
        },
        "CanSeek": {
          "type": "boolean",
          "readOnly": true
        },
        "CanWrite": {
          "type": "boolean",
          "readOnly": true
        },
        "Capacity": {
          "format": "int32",
          "type": "integer"
        },
        "Length": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "Position": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "MlxUser": {
      "type": "object",
      "properties": {
        "RoleBitmask": {
          "format": "int64",
          "type": "integer"
        },
        "SignInToken": {
          "type": "string"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "SignInName": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "College": {
          "type": "string"
        },
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "EmailAddress": {
          "type": "string"
        },
        "SignInEmailAddress": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "OrganizationChannel": {
          "type": "string"
        },
        "Points": {
          "format": "int32",
          "type": "integer"
        },
        "AccessToken": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "IsReferrer": {
          "type": "boolean"
        },
        "StateName": {
          "type": "string"
        },
        "CityName": {
          "type": "string"
        },
        "CollegeId": {
          "type": "string"
        },
        "ProfilePicUrl": {
          "type": "string"
        },
        "IsComplete": {
          "type": "boolean"
        },
        "PasswordResetRequired": {
          "type": "boolean"
        }
      }
    },
    "ModulesList": {
      "required": [
        "CourseModules"
      ],
      "type": "object",
      "properties": {
        "CourseModules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseModule"
          }
        }
      }
    },
    "NotificationEntity": {
      "type": "object",
      "properties": {
        "NotificationId": {
          "format": "int32",
          "type": "integer"
        },
        "Message": {
          "type": "string"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "DetailsJSON": {
          "type": "string"
        },
        "ActionLink": {
          "type": "string"
        },
        "Action": {
          "type": "string"
        },
        "Entity": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "CreateDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "CreatedBy": {
          "format": "int32",
          "type": "integer"
        },
        "Status": {
          "type": "string"
        },
        "UserId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "NotificationResponseEntity": {
      "type": "object",
      "properties": {
        "Notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationEntity"
          }
        },
        "NextPageEntity": {
          "$ref": "#/definitions/PaginationEntity"
        },
        "TotalUnreadNotifications": {
          "format": "int32",
          "type": "integer"
        },
        "Error": {
          "type": "string"
        }
      }
    },
    "OrganizationAdminDTO": {
      "type": "object",
      "properties": {
        "OrganizationIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "Contact": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Organizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationDTO"
          }
        }
      }
    },
    "OrganizationDTO": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "default": "",
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        }
      }
    },
    "OrganizationModel": {
      "type": "object",
      "properties": {
        "OrganizationSetting": {
          "$ref": "#/definitions/OrganizationSetting"
        },
        "Settings": {
          "type": "string"
        },
        "OrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "Idp": {
          "type": "string"
        },
        "OrganizationCode": {
          "type": "string"
        }
      }
    },
    "OrganizationSetting": {
      "type": "object",
      "properties": {
        "Whitelist": {
          "default": false,
          "type": "boolean"
        },
        "AppTitle": {
          "type": "string"
        },
        "MobileAppName": {
          "type": "string"
        },
        "MobileAppShortName": {
          "type": "string"
        },
        "BannerBgImage": {
          "type": "string"
        },
        "BannerTitle": {
          "type": "string"
        },
        "LogoUrl": {
          "type": "string"
        },
        "MobileLogoUrl": {
          "type": "string"
        },
        "MobileLogoUrlCollection": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "OrganizationName": {
          "type": "string"
        },
        "FooterTitle": {
          "type": "string"
        },
        "FooterText": {
          "type": "string"
        },
        "PrimaryColourTheme": {
          "type": "string"
        },
        "MobileBackgroundColour": {
          "type": "string"
        },
        "PrivacyTerms": {
          "type": "string"
        },
        "LanguagesEnabled": {
          "default": "",
          "type": "string"
        },
        "CertificateTemplateURL": {
          "default": "",
          "type": "string"
        },
        "CertificateTemplateConfig": {
          "$ref": "#/definitions/CertificateTemplateConfig"
        },
        "RestrictedGroup": {
          "default": false,
          "type": "boolean"
        }
      }
    },
    "PaginationEntity": {
      "type": "object",
      "properties": {
        "NextPageLink": {
          "type": "string"
        }
      }
    },
    "Query": {
      "type": "object",
      "properties": {
        "Field": {
          "type": "string"
        },
        "FieldKey": {
          "type": "string"
        },
        "Expr": {
          "$ref": "#/definitions/Expression"
        }
      }
    },
    "QuestionData": {
      "required": [
        "Id",
        "IsCorrect"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "IsCorrect": {
          "type": "boolean"
        },
        "Answer": {
          "default": null,
          "type": "string"
        }
      }
    },
    "QuizData": {
      "required": [
        "Id",
        "QuestionProgress"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "QuestionProgress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionData"
          }
        }
      }
    },
    "QuizResultItem": {
      "type": "object",
      "properties": {
        "QuestionId": {
          "format": "int32",
          "type": "integer"
        },
        "QuestionText": {
          "type": "string"
        },
        "Answer": {
          "type": "string"
        },
        "UserAnswer": {
          "type": "string"
        },
        "IsCorrect": {
          "type": "string"
        },
        "QuestionWeightage": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "QuizSubmissionResponse": {
      "type": "object",
      "properties": {
        "QuizId": {
          "format": "int32",
          "type": "integer"
        },
        "TotalCorrectAnswers": {
          "format": "int32",
          "type": "integer"
        },
        "RemainingAttempts": {
          "format": "int32",
          "type": "integer"
        },
        "BestScore": {
          "type": "string"
        },
        "QuizType": {
          "type": "string"
        }
      }
    },
    "QuizSubmissionStatusResponse": {
      "required": [
        "Id",
        "Status"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Status": {
          "minLength": 1,
          "type": "string"
        },
        "SubmissionResponse": {
          "$ref": "#/definitions/QuizSubmissionResponse"
        },
        "ErrorCode": {
          "format": "int32",
          "type": "integer"
        },
        "ErrorMessage": {
          "type": "string"
        }
      }
    },
    "QuizSubmissionStatusResponseList": {
      "required": [
        "QuizSubmissionResponseItemList"
      ],
      "type": "object",
      "properties": {
        "QuizSubmissionResponseItemList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuizSubmissionStatusResponse"
          }
        }
      }
    },
    "RemoveCourseItem": {
      "type": "object",
      "properties": {
        "CourseItemId": {
          "format": "int32",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        }
      }
    },
    "ResetPasswordRequest": {
      "required": [
        "NewPassword",
        "OldPassword"
      ],
      "type": "object",
      "properties": {
        "OldPassword": {
          "format": "password",
          "minLength": 1,
          "type": "string"
        },
        "NewPassword": {
          "format": "password",
          "maxLength": 100,
          "minLength": 4,
          "type": "string"
        },
        "ConfirmPassword": {
          "format": "password",
          "type": "string"
        }
      }
    },
    "RulesObject": {
      "type": "object",
      "properties": {
        "Query": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Query"
          }
        },
        "QueryOp": {
          "type": "string"
        }
      }
    },
    "SecureLessonEntity": {
      "type": "object",
      "properties": {
        "LessonId": {
          "format": "int32",
          "type": "integer"
        },
        "LessonDownloadURL": {
          "type": "string"
        }
      }
    },
    "StringResult": {
      "type": "object",
      "properties": {
        "Error": {
          "type": "string"
        },
        "Result": {
          "type": "string"
        },
        "Count": {
          "format": "int32",
          "type": "integer"
        },
        "IsSuperAdminLogin": {
          "type": "boolean"
        },
        "Questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/spGetQuestions_Result"
          }
        }
      }
    },
    "StudyBuddyLearnerBotRequest": {
      "type": "object",
      "properties": {
        "Query": {
          "type": "string"
        },
        "ChatHistory": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SummarizeContentResponse": {
      "type": "object",
      "properties": {
        "SummaryGenerationStatus": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "SummaryGenerationStatus": {
      "enum": [
        "None",
        "Processing",
        "Generated",
        "Failed"
      ],
      "type": "string"
    },
    "SummaryRequest": {
      "type": "object",
      "properties": {
        "UserSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSummary"
          }
        },
        "CourseName": {
          "type": "string"
        }
      }
    },
    "SummaryResponse": {
      "type": "object",
      "properties": {
        "LessonName": {
          "type": "string"
        },
        "LessonId": {
          "format": "int32",
          "type": "integer"
        },
        "GeneratedSummary": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ModifiedSummary": {
          "type": "string"
        },
        "LessonContent": {
          "type": "string"
        },
        "SummaryGenerationStatus": {
          "$ref": "#/definitions/SummaryGenerationStatus"
        }
      }
    },
    "SuperAdminsModel": {
      "type": "object",
      "properties": {
        "SuperAdminDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "TokenResponse": {
      "type": "object",
      "properties": {
        "AccessToken": {
          "type": "string"
        },
        "RefreshToken": {
          "type": "string"
        }
      }
    },
    "UpdateItemsOrder": {
      "type": "object",
      "properties": {
        "CourseItemIdsCsv": {
          "type": "string"
        }
      }
    },
    "UpdateNotificationEntity": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Status": {
          "type": "string"
        }
      }
    },
    "UpdateNotificationEntityList": {
      "type": "object",
      "properties": {
        "NotificationList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateNotificationEntity"
          }
        }
      }
    },
    "UpdateNotificationResponseEntity": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Status": {
          "type": "boolean"
        },
        "ErrorMessage": {
          "type": "string"
        },
        "ErrorCode": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UpdatePasswordRequest": {
      "required": [
        "NewPassword",
        "Username"
      ],
      "type": "object",
      "properties": {
        "Username": {
          "minLength": 1,
          "type": "string"
        },
        "NewPassword": {
          "format": "password",
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "UpdateRulesObject": {
      "type": "object",
      "properties": {
        "RulesObject": {
          "$ref": "#/definitions/RulesObject"
        },
        "Scenario": {
          "type": "string"
        }
      }
    },
    "User": {
      "required": [
        "EmailAddress",
        "FirstName",
        "LastName"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "FirstName": {
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "LastName": {
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "College": {
          "maxLength": 100,
          "type": "string"
        },
        "EmailAddress": {
          "format": "email",
          "minLength": 1,
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsEnrolled": {
          "type": "boolean"
        },
        "ChangedDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "Points": {
          "format": "int32",
          "type": "integer"
        },
        "Phone": {
          "type": "string"
        },
        "IsReferrer": {
          "type": "boolean"
        },
        "StateName": {
          "type": "string"
        },
        "CityName": {
          "type": "string"
        },
        "CollegeId": {
          "type": "string"
        },
        "IsComplete": {
          "type": "boolean"
        },
        "Score": {
          "type": "string"
        },
        "AssessmentsCompleted": {
          "format": "int32",
          "type": "integer"
        },
        "ModulesCompleted": {
          "format": "int32",
          "type": "integer"
        },
        "ProfilePictureUrl": {
          "type": "string"
        },
        "CreatedDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "UserContactDataHolder": {
      "type": "object",
      "properties": {
        "CurrentContact": {
          "type": "string"
        },
        "NewContact": {
          "type": "string"
        }
      }
    },
    "UserContactsDataHolder": {
      "type": "object",
      "properties": {
        "userContacts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserIdDataHolder": {
      "required": [
        "Ids"
      ],
      "type": "object",
      "properties": {
        "Ids": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "UserIdentityDetails": {
      "required": [
        "Username"
      ],
      "type": "object",
      "properties": {
        "Username": {
          "minLength": 1,
          "type": "string"
        },
        "Password": {
          "format": "password",
          "type": "string"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "ProfilePicUrl": {
          "type": "string"
        },
        "ContactInfo": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "CustomProfileFields": {
          "type": "string"
        },
        "CoursesEnrolled": {
          "format": "int32",
          "type": "integer"
        },
        "UserGroups": {
          "type": "string"
        },
        "CoursesCompleted": {
          "format": "int32",
          "type": "integer"
        },
        "CertificatesReceived": {
          "format": "int32",
          "type": "integer"
        },
        "CourseCompletionPercentage": {
          "format": "double",
          "type": "number"
        },
        "AverageQuizScore": {
          "format": "double",
          "type": "number"
        },
        "CourseEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "CourseModuleCompleted": {
          "format": "int32",
          "type": "integer"
        },
        "TotalCourseItem": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UserInfoModel": {
      "type": "object",
      "properties": {
        "NextPageLink": {
          "type": "string"
        },
        "UserList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInfo"
          }
        },
        "TotalUsers": {
          "format": "int32",
          "type": "integer"
        },
        "IsSuperAdminLogin": {
          "type": "boolean"
        },
        "AverageGroupCompletionPercentage": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "UserOrganizationDataHolder": {
      "type": "object",
      "properties": {
        "UserContact": {
          "type": "string"
        },
        "OrganizationName": {
          "type": "string"
        }
      }
    },
    "UserQuestionAnswerModel": {
      "type": "object",
      "properties": {
        "QuizId": {
          "format": "int32",
          "type": "integer"
        },
        "SubmittedAnswers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LearnerAnswers"
          }
        }
      }
    },
    "UserQuizProgressDetails": {
      "type": "object",
      "properties": {
        "QuizName": {
          "type": "string"
        },
        "Score": {
          "format": "double",
          "type": "number"
        },
        "QuizId": {
          "format": "int32",
          "type": "integer"
        },
        "CourseId": {
          "format": "int32",
          "type": "integer"
        },
        "UserId": {
          "format": "int32",
          "type": "integer"
        },
        "ResultItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuizResultItem"
          }
        },
        "Retakes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KCRetake"
          }
        }
      }
    },
    "UserRole": {
      "type": "object",
      "properties": {
        "Processed": {
          "type": "string"
        },
        "Role": {
          "type": "string"
        }
      }
    },
    "UserSummary": {
      "type": "object",
      "properties": {
        "ModifiedSummary": {
          "type": "string"
        },
        "LessonId": {
          "type": "string"
        },
        "LessonName": {
          "type": "string"
        },
        "SummaryGenerationStatus": {
          "$ref": "#/definitions/SummaryGenerationStatus"
        }
      }
    },
    "UsersModel": {
      "type": "object",
      "properties": {
        "NextPageLink": {
          "type": "string"
        },
        "Users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "TotalUsers": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "spGetQuestions_Result": {
      "type": "object",
      "properties": {
        "QuestionId": {
          "format": "int32",
          "type": "integer"
        },
        "AuthorId": {
          "format": "int32",
          "type": "integer"
        },
        "QuestionTypeId": {
          "format": "int32",
          "type": "integer"
        },
        "IsActive": {
          "type": "boolean"
        },
        "IsPrivate": {
          "type": "boolean"
        },
        "CategoryId": {
          "format": "int32",
          "type": "integer"
        },
        "CreateDatetime": {
          "format": "date-time",
          "type": "string"
        },
        "QuestionContent": {
          "type": "string"
        },
        "Answer": {
          "type": "string"
        },
        "AnswerOptions": {
          "type": "string"
        },
        "AnswerComments": {
          "type": "string"
        },
        "ErrorReported": {
          "type": "boolean"
        },
        "ErrorReportExplanation": {
          "type": "string"
        },
        "UsageCount": {
          "format": "int32",
          "type": "integer"
        },
        "IsShuffleAnswers": {
          "type": "boolean"
        },
        "Weightage": {
          "format": "double",
          "type": "number"
        },
        "Uuid": {
          "format": "uuid",
          "type": "string"
        },
        "AdditionalInfo": {
          "type": "string"
        },
        "tagList": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Authorization by Bearer Token.  <br><br>To generate Authorization token, please refer below link: <br><br>https://learn.microsoft.com/en-us/azure/industry/training-services/microsoft-community-training/rest-api-management/api-documentation#api-authentication <br   br>Value should have prefix Bearer space then access token <br>Eg: [Bearer \\<access token \\>] <br>"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
