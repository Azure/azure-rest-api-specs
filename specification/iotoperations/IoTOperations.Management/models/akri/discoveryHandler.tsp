import "@typespec/http";
import "@typespec/rest";
import "@azure-tools/typespec-azure-resource-manager";
import "@azure-tools/typespec-client-generator-core";
import "./common.tsp";

using TypeSpec.Http;
using TypeSpec.Rest;
using TypeSpec.Versioning;
using Azure.ClientGenerator.Core;

using Azure.ResourceManager;

namespace Microsoft.IoTOperations;

/** AkriDiscoveryHandler resource. */
@added(Versions.`2025-07-01-preview`)
@parentResource(InstanceResource)
model AkriDiscoveryHandlerResource
  is ProxyResource<AkriDiscoveryHandlerProperties> {
  /** Name of AkriDiscoveryHandler resource. */
  @pattern("^[a-z0-9][a-z0-9-]*[a-z0-9]$")
  @key("akriDiscoveryHandlerName")
  @path
  @minLength(3)
  @maxLength(63)
  @segment("akriDiscoveryHandlers")
  name: string;

  /** Edge location of the resource. */
  #suppress "@azure-tools/typespec-azure-resource-manager/arm-resource-invalid-envelope-property"
  @visibility(Lifecycle.Read, Lifecycle.Create)
  extendedLocation?: ExtendedLocation;
}

/** AkriDiscoveryHandler properties. */
@added(Versions.`2025-07-01-preview`)
model AkriDiscoveryHandlerProperties {
  /** The status of the last operation. */
  @visibility(Lifecycle.Read)
  provisioningState?: ProvisioningState;

  /** Metadata about AIO. */
  aioMetadata?: AkriDiscoveryHandlerAioMetadata;

  /** Additional configuration for the AkriDiscoveryHandler. */
  #suppress "@azure-tools/typespec-azure-resource-manager/arm-no-record" "The values are not known ahead of time."
  additionalConfiguration?: Record<string>;

  /** Diagnostics settings for the AkriDiscoveryHandler. */
  diagnostics?: AkriDiscoveryHandlerDiagnostics;

  /** Mode of the AkriDiscoveryHandler. */
  mode?: OperationalMode = Enabled;

  /** Device inbound endpoint types. */
  @OpenAPI.extension("x-ms-identifiers", #["endpointType", "version"])
  @minItems(1)
  discoverableDeviceEndpointTypes: AkriDiscoveryHandlerDiscoverableDeviceEndpointType[];

  /** Mqtt connection configuration settings. */
  mqttConnectionConfiguration?: AkriConnectorsMqttConnectionConfiguration;

  /** The image configuration for the AkriDiscoveryHandler. */
  imageConfiguration: AkriDiscoveryHandlerImageConfiguration;

  /** Schedule for the AkriDiscoveryHandler. */
  schedule: AkriDiscoveryHandlerSchedule;

  /** Secrets that will be mounted onto discovery handler. */
  @OpenAPI.extension("x-ms-identifiers", #["secretAlias"])
  secrets?: AkriConnectorsSecret[];
}

/** Metadata about AIO. */
@added(Versions.`2025-07-01-preview`)
model AkriDiscoveryHandlerAioMetadata {
  ...AkriAioMetadata;
}

/** AkriDiscoveryHandlerDiagnostics properties. */
@added(Versions.`2025-07-01-preview`)
model AkriDiscoveryHandlerDiagnostics {
  /** The log settings for the Connector template. */
  #suppress "deprecated" "Csharp emitter has a bug with multiple levels of nested objects containing only 1 property"
  @flattenProperty("csharp")
  logs: AkriConnectorsDiagnosticsLogs;
}

/** AkriDiscoveryHandlerDiscoverableDeviceEndpointType properties. */
@added(Versions.`2025-07-01-preview`)
model AkriDiscoveryHandlerDiscoverableDeviceEndpointType {
  /** The type of the endpoint. */
  endpointType: NonEmptyString;

  /** The version of the endpoint. */
  version: NonEmptyString;
}

/** AkriDiscoveryHandler Image configuration properties. */
@added(Versions.`2025-07-01-preview`)
model AkriDiscoveryHandlerImageConfiguration {
  /** The image name without any registry reference, tag or digest. */
  imageName: string;

  /** The pull policy of the image. */
  imagePullPolicy?: AkriConnectorsImagePullPolicy;

  /** The number of replicas to be set up. */
  replicas?: int32;

  /** The registry settings for the image. You can omit this field if using the default docker hub repository or using a local image. */
  registrySettings?: AkriConnectorsRegistrySettings;

  /** Optional image tag or digest. If not specified, the default tag is `latest`. */
  tagDigestSettings?: AkriConnectorsTagDigestSettings;
}

/** AkriDiscoveryHandlerSchedule properties. */
@added(Versions.`2025-07-01-preview`)
@discriminator("scheduleType")
model AkriDiscoveryHandlerSchedule {
  /** Schedule type. */
  scheduleType: AkriDiscoveryHandlerScheduleType;
}

/** AkriDiscoveryHandlerScheduleType properties. */
@added(Versions.`2025-07-01-preview`)
union AkriDiscoveryHandlerScheduleType {
  string,

  /** The schedule is a cron expression. */
  Cron,

  /** The discovery handler should run once. */
  RunOnce,

  /** The discovery handler should run continuously. */
  Continuous,
}

/** AkriDiscoveryHandlerScheduleCron properties. */
@added(Versions.`2025-07-01-preview`)
model AkriDiscoveryHandlerScheduleCron extends AkriDiscoveryHandlerSchedule {
  /** Schedule type. */
  scheduleType: Cron;

  /** The cron expression for the schedule. */
  cron: string;
}

/** AkriDiscoveryHandlerScheduleRunOnce properties. */
@added(Versions.`2025-07-01-preview`)
model AkriDiscoveryHandlerScheduleRunOnce extends AkriDiscoveryHandlerSchedule {
  /** Schedule type. */
  scheduleType: RunOnce;

  /** The time to run the discovery handler. */
  runOnce: string;
}

/** AkriDiscoveryHandlerScheduleContinuous properties. */
@added(Versions.`2025-07-01-preview`)
model AkriDiscoveryHandlerScheduleContinuous
  extends AkriDiscoveryHandlerSchedule {
  /** Schedule type. */
  scheduleType: Continuous;

  /** The time to run the discovery handler. */
  continuous: string;
}
