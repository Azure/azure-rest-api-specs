// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sphere/armsphere"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// AzureSphereCertificatesServer is a fake server for instances of the armsphere.AzureSphereCertificatesClient type.
type AzureSphereCertificatesServer struct {
	// Get is the fake for method AzureSphereCertificatesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, serialNumber string, options *armsphere.AzureSphereCertificatesClientGetOptions) (resp azfake.Responder[armsphere.AzureSphereCertificatesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByCatalogPager is the fake for method AzureSphereCertificatesClient.NewListByCatalogPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByCatalogPager func(subscriptionID string, resourceGroupName string, catalogName string, options *armsphere.AzureSphereCertificatesClientListByCatalogOptions) (resp azfake.PagerResponder[armsphere.AzureSphereCertificatesClientListByCatalogResponse])

	// RetrieveCertChain is the fake for method AzureSphereCertificatesClient.RetrieveCertChain
	// HTTP status codes to indicate success: http.StatusOK
	RetrieveCertChain func(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, serialNumber string, body any, options *armsphere.AzureSphereCertificatesClientRetrieveCertChainOptions) (resp azfake.Responder[armsphere.AzureSphereCertificatesClientRetrieveCertChainResponse], errResp azfake.ErrorResponder)

	// RetrieveProofOfPossessionNonce is the fake for method AzureSphereCertificatesClient.RetrieveProofOfPossessionNonce
	// HTTP status codes to indicate success: http.StatusOK
	RetrieveProofOfPossessionNonce func(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, serialNumber string, body armsphere.ProofOfPossessionNonceRequest, options *armsphere.AzureSphereCertificatesClientRetrieveProofOfPossessionNonceOptions) (resp azfake.Responder[armsphere.AzureSphereCertificatesClientRetrieveProofOfPossessionNonceResponse], errResp azfake.ErrorResponder)
}

// NewAzureSphereCertificatesServerTransport creates a new instance of AzureSphereCertificatesServerTransport with the provided implementation.
// The returned AzureSphereCertificatesServerTransport instance is connected to an instance of armsphere.AzureSphereCertificatesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAzureSphereCertificatesServerTransport(srv *AzureSphereCertificatesServer) *AzureSphereCertificatesServerTransport {
	return &AzureSphereCertificatesServerTransport{
		srv:                   srv,
		newListByCatalogPager: newTracker[azfake.PagerResponder[armsphere.AzureSphereCertificatesClientListByCatalogResponse]](),
	}
}

// AzureSphereCertificatesServerTransport connects instances of armsphere.AzureSphereCertificatesClient to instances of AzureSphereCertificatesServer.
// Don't use this type directly, use NewAzureSphereCertificatesServerTransport instead.
type AzureSphereCertificatesServerTransport struct {
	srv                   *AzureSphereCertificatesServer
	newListByCatalogPager *tracker[azfake.PagerResponder[armsphere.AzureSphereCertificatesClientListByCatalogResponse]]
}

// Do implements the policy.Transporter interface for AzureSphereCertificatesServerTransport.
func (a *AzureSphereCertificatesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *AzureSphereCertificatesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "AzureSphereCertificatesClient.Get":
		resp, err = a.dispatchGet(req)
	case "AzureSphereCertificatesClient.NewListByCatalogPager":
		resp, err = a.dispatchNewListByCatalogPager(req)
	case "AzureSphereCertificatesClient.RetrieveCertChain":
		resp, err = a.dispatchRetrieveCertChain(req)
	case "AzureSphereCertificatesClient.RetrieveProofOfPossessionNonce":
		resp, err = a.dispatchRetrieveProofOfPossessionNonce(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (a *AzureSphereCertificatesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureSphere/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/certificates/(?P<serialNumber>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
	if err != nil {
		return nil, err
	}
	serialNumberParam, err := url.PathUnescape(matches[regex.SubexpIndex("serialNumber")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), subscriptionIDParam, resourceGroupNameParam, catalogNameParam, serialNumberParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Certificate, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AzureSphereCertificatesServerTransport) dispatchNewListByCatalogPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByCatalogPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByCatalogPager not implemented")}
	}
	newListByCatalogPager := a.newListByCatalogPager.get(req)
	if newListByCatalogPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureSphere/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/certificates`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		filterUnescaped, err := url.QueryUnescape(qp.Get("$filter"))
		if err != nil {
			return nil, err
		}
		filterParam := getOptional(filterUnescaped)
		topUnescaped, err := url.QueryUnescape(qp.Get("$top"))
		if err != nil {
			return nil, err
		}
		topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		skipUnescaped, err := url.QueryUnescape(qp.Get("$skip"))
		if err != nil {
			return nil, err
		}
		skipParam, err := parseOptional(skipUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		maxpagesizeUnescaped, err := url.QueryUnescape(qp.Get("$maxpagesize"))
		if err != nil {
			return nil, err
		}
		maxpagesizeParam, err := parseOptional(maxpagesizeUnescaped, func(v string) (int32, error) {
			p, parseErr := strconv.ParseInt(v, 10, 32)
			if parseErr != nil {
				return 0, parseErr
			}
			return int32(p), nil
		})
		if err != nil {
			return nil, err
		}
		catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
		if err != nil {
			return nil, err
		}
		var options *armsphere.AzureSphereCertificatesClientListByCatalogOptions
		if filterParam != nil || topParam != nil || skipParam != nil || maxpagesizeParam != nil {
			options = &armsphere.AzureSphereCertificatesClientListByCatalogOptions{
				Filter:      filterParam,
				Top:         topParam,
				Skip:        skipParam,
				Maxpagesize: maxpagesizeParam,
			}
		}
		resp := a.srv.NewListByCatalogPager(subscriptionIDParam, resourceGroupNameParam, catalogNameParam, options)
		newListByCatalogPager = &resp
		a.newListByCatalogPager.add(req, newListByCatalogPager)
		server.PagerResponderInjectNextLinks(newListByCatalogPager, req, func(page *armsphere.AzureSphereCertificatesClientListByCatalogResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByCatalogPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByCatalogPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByCatalogPager) {
		a.newListByCatalogPager.remove(req)
	}
	return resp, nil
}

func (a *AzureSphereCertificatesServerTransport) dispatchRetrieveCertChain(req *http.Request) (*http.Response, error) {
	if a.srv.RetrieveCertChain == nil {
		return nil, &nonRetriableError{errors.New("fake for method RetrieveCertChain not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureSphere/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/certificates/(?P<serialNumber>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/retrieveCertChain`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[any](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
	if err != nil {
		return nil, err
	}
	serialNumberParam, err := url.PathUnescape(matches[regex.SubexpIndex("serialNumber")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.RetrieveCertChain(req.Context(), subscriptionIDParam, resourceGroupNameParam, catalogNameParam, serialNumberParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CertificateChainResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AzureSphereCertificatesServerTransport) dispatchRetrieveProofOfPossessionNonce(req *http.Request) (*http.Response, error) {
	if a.srv.RetrieveProofOfPossessionNonce == nil {
		return nil, &nonRetriableError{errors.New("fake for method RetrieveProofOfPossessionNonce not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureSphere/catalogs/(?P<catalogName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/certificates/(?P<serialNumber>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/retrieveProofOfPossessionNonce`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armsphere.ProofOfPossessionNonceRequest](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	catalogNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("catalogName")])
	if err != nil {
		return nil, err
	}
	serialNumberParam, err := url.PathUnescape(matches[regex.SubexpIndex("serialNumber")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.RetrieveProofOfPossessionNonce(req.Context(), subscriptionIDParam, resourceGroupNameParam, catalogNameParam, serialNumberParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ProofOfPossessionNonceResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
