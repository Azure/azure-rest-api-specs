// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armsphere

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// AzureSphereCatalogsClient contains the methods for the Microsoft.AzureSphere namespace.
// Don't use this type directly, use NewAzureSphereCatalogsClient() instead.
type AzureSphereCatalogsClient struct {
	internal *arm.Client
}

// NewAzureSphereCatalogsClient creates a new instance of AzureSphereCatalogsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzureSphereCatalogsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureSphereCatalogsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzureSphereCatalogsClient{
		internal: cl,
	}
	return client, nil
}

// CountDevices - Counts devices in catalog.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - body - The content of the action request
//   - options - AzureSphereCatalogsClientCountDevicesOptions contains the optional parameters for the AzureSphereCatalogsClient.CountDevices
//     method.
func (client *AzureSphereCatalogsClient) CountDevices(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, body any, options *AzureSphereCatalogsClientCountDevicesOptions) (AzureSphereCatalogsClientCountDevicesResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.CountDevices")
	req, err := client.countDevicesCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, body, options)
	if err != nil {
		return AzureSphereCatalogsClientCountDevicesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureSphereCatalogsClientCountDevicesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureSphereCatalogsClientCountDevicesResponse{}, err
	}
	resp, err := client.countDevicesHandleResponse(httpResp)
	return resp, err
}

// countDevicesCreateRequest creates the CountDevices request.
func (client *AzureSphereCatalogsClient) countDevicesCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, body any, options *AzureSphereCatalogsClientCountDevicesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/countDevices"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// countDevicesHandleResponse handles the CountDevices response.
func (client *AzureSphereCatalogsClient) countDevicesHandleResponse(resp *http.Response) (AzureSphereCatalogsClientCountDevicesResponse, error) {
	result := AzureSphereCatalogsClientCountDevicesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CountDevicesResponse); err != nil {
		return AzureSphereCatalogsClientCountDevicesResponse{}, err
	}
	return result, nil
}

// BeginCreateOrUpdate - Create a Catalog
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - resource - Resource create parameters.
//   - options - AzureSphereCatalogsClientCreateOrUpdateOptions contains the optional parameters for the AzureSphereCatalogsClient.CreateOrUpdate
//     method.
func (client *AzureSphereCatalogsClient) BeginCreateOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, resource Catalog, options *AzureSphereCatalogsClientCreateOrUpdateOptions) (*runtime.Poller[AzureSphereCatalogsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, subscriptionID, resourceGroupName, catalogName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzureSphereCatalogsClientCreateOrUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzureSphereCatalogsClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Create a Catalog
func (client *AzureSphereCatalogsClient) createOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, resource Catalog, options *AzureSphereCatalogsClientCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.BeginCreateOrUpdate")
	req, err := client.createOrUpdateCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AzureSphereCatalogsClient) createOrUpdateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, resource Catalog, options *AzureSphereCatalogsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a Catalog
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - options - AzureSphereCatalogsClientDeleteOptions contains the optional parameters for the AzureSphereCatalogsClient.Delete
//     method.
func (client *AzureSphereCatalogsClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, options *AzureSphereCatalogsClientDeleteOptions) (*runtime.Poller[AzureSphereCatalogsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, catalogName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzureSphereCatalogsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzureSphereCatalogsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a Catalog
func (client *AzureSphereCatalogsClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, options *AzureSphereCatalogsClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AzureSphereCatalogsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, options *AzureSphereCatalogsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a Catalog
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - options - AzureSphereCatalogsClientGetOptions contains the optional parameters for the AzureSphereCatalogsClient.Get method.
func (client *AzureSphereCatalogsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, options *AzureSphereCatalogsClientGetOptions) (AzureSphereCatalogsClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, options)
	if err != nil {
		return AzureSphereCatalogsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureSphereCatalogsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureSphereCatalogsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AzureSphereCatalogsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, options *AzureSphereCatalogsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzureSphereCatalogsClient) getHandleResponse(resp *http.Response) (AzureSphereCatalogsClientGetResponse, error) {
	result := AzureSphereCatalogsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Catalog); err != nil {
		return AzureSphereCatalogsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List Catalog resources by resource group
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - AzureSphereCatalogsClientListByResourceGroupOptions contains the optional parameters for the AzureSphereCatalogsClient.NewListByResourceGroupPager
//     method.
func (client *AzureSphereCatalogsClient) NewListByResourceGroupPager(subscriptionID string, resourceGroupName string, options *AzureSphereCatalogsClientListByResourceGroupOptions) *runtime.Pager[AzureSphereCatalogsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureSphereCatalogsClientListByResourceGroupResponse]{
		More: func(page AzureSphereCatalogsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureSphereCatalogsClientListByResourceGroupResponse) (AzureSphereCatalogsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, subscriptionID, resourceGroupName, options)
			}, nil)
			if err != nil {
				return AzureSphereCatalogsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AzureSphereCatalogsClient) listByResourceGroupCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, options *AzureSphereCatalogsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AzureSphereCatalogsClient) listByResourceGroupHandleResponse(resp *http.Response) (AzureSphereCatalogsClientListByResourceGroupResponse, error) {
	result := AzureSphereCatalogsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CatalogListResult); err != nil {
		return AzureSphereCatalogsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List Catalog resources by subscription ID
//   - subscriptionID - The ID of the target subscription.
//   - options - AzureSphereCatalogsClientListBySubscriptionOptions contains the optional parameters for the AzureSphereCatalogsClient.NewListBySubscriptionPager
//     method.
func (client *AzureSphereCatalogsClient) NewListBySubscriptionPager(subscriptionID string, options *AzureSphereCatalogsClientListBySubscriptionOptions) *runtime.Pager[AzureSphereCatalogsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureSphereCatalogsClientListBySubscriptionResponse]{
		More: func(page AzureSphereCatalogsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureSphereCatalogsClientListBySubscriptionResponse) (AzureSphereCatalogsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, subscriptionID, options)
			}, nil)
			if err != nil {
				return AzureSphereCatalogsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AzureSphereCatalogsClient) listBySubscriptionCreateRequest(ctx context.Context, subscriptionID string, options *AzureSphereCatalogsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureSphere/catalogs"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AzureSphereCatalogsClient) listBySubscriptionHandleResponse(resp *http.Response) (AzureSphereCatalogsClientListBySubscriptionResponse, error) {
	result := AzureSphereCatalogsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CatalogListResult); err != nil {
		return AzureSphereCatalogsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// NewListDeploymentsPager - Lists deployments for catalog.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - body - The content of the action request
//   - options - AzureSphereCatalogsClientListDeploymentsOptions contains the optional parameters for the AzureSphereCatalogsClient.NewListDeploymentsPager
//     method.
func (client *AzureSphereCatalogsClient) NewListDeploymentsPager(subscriptionID string, resourceGroupName string, catalogName string, body any, options *AzureSphereCatalogsClientListDeploymentsOptions) *runtime.Pager[AzureSphereCatalogsClientListDeploymentsResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureSphereCatalogsClientListDeploymentsResponse]{
		More: func(page AzureSphereCatalogsClientListDeploymentsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureSphereCatalogsClientListDeploymentsResponse) (AzureSphereCatalogsClientListDeploymentsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.NewListDeploymentsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDeploymentsCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, body, options)
			}, nil)
			if err != nil {
				return AzureSphereCatalogsClientListDeploymentsResponse{}, err
			}
			return client.listDeploymentsHandleResponse(resp)
		},
	})
}

// listDeploymentsCreateRequest creates the ListDeployments request.
func (client *AzureSphereCatalogsClient) listDeploymentsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, body any, options *AzureSphereCatalogsClientListDeploymentsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/listDeployments"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Maxpagesize != nil {
		reqQP.Set("$maxpagesize", strconv.FormatInt(int64(*options.Maxpagesize), 10))
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("$skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// listDeploymentsHandleResponse handles the ListDeployments response.
func (client *AzureSphereCatalogsClient) listDeploymentsHandleResponse(resp *http.Response) (AzureSphereCatalogsClientListDeploymentsResponse, error) {
	result := AzureSphereCatalogsClientListDeploymentsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeploymentListResult); err != nil {
		return AzureSphereCatalogsClientListDeploymentsResponse{}, err
	}
	return result, nil
}

// NewListDeviceGroupsPager - List the device groups for the catalog.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - body - List device groups for catalog.
//   - options - AzureSphereCatalogsClientListDeviceGroupsOptions contains the optional parameters for the AzureSphereCatalogsClient.NewListDeviceGroupsPager
//     method.
func (client *AzureSphereCatalogsClient) NewListDeviceGroupsPager(subscriptionID string, resourceGroupName string, catalogName string, body ListDeviceGroupsRequest, options *AzureSphereCatalogsClientListDeviceGroupsOptions) *runtime.Pager[AzureSphereCatalogsClientListDeviceGroupsResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureSphereCatalogsClientListDeviceGroupsResponse]{
		More: func(page AzureSphereCatalogsClientListDeviceGroupsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureSphereCatalogsClientListDeviceGroupsResponse) (AzureSphereCatalogsClientListDeviceGroupsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.NewListDeviceGroupsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDeviceGroupsCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, body, options)
			}, nil)
			if err != nil {
				return AzureSphereCatalogsClientListDeviceGroupsResponse{}, err
			}
			return client.listDeviceGroupsHandleResponse(resp)
		},
	})
}

// listDeviceGroupsCreateRequest creates the ListDeviceGroups request.
func (client *AzureSphereCatalogsClient) listDeviceGroupsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, body ListDeviceGroupsRequest, options *AzureSphereCatalogsClientListDeviceGroupsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/listDeviceGroups"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Maxpagesize != nil {
		reqQP.Set("$maxpagesize", strconv.FormatInt(int64(*options.Maxpagesize), 10))
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("$skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// listDeviceGroupsHandleResponse handles the ListDeviceGroups response.
func (client *AzureSphereCatalogsClient) listDeviceGroupsHandleResponse(resp *http.Response) (AzureSphereCatalogsClientListDeviceGroupsResponse, error) {
	result := AzureSphereCatalogsClientListDeviceGroupsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeviceGroupListResult); err != nil {
		return AzureSphereCatalogsClientListDeviceGroupsResponse{}, err
	}
	return result, nil
}

// NewListDeviceInsightsPager - Lists device insights for catalog.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - body - The content of the action request
//   - options - AzureSphereCatalogsClientListDeviceInsightsOptions contains the optional parameters for the AzureSphereCatalogsClient.NewListDeviceInsightsPager
//     method.
func (client *AzureSphereCatalogsClient) NewListDeviceInsightsPager(subscriptionID string, resourceGroupName string, catalogName string, body any, options *AzureSphereCatalogsClientListDeviceInsightsOptions) *runtime.Pager[AzureSphereCatalogsClientListDeviceInsightsResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureSphereCatalogsClientListDeviceInsightsResponse]{
		More: func(page AzureSphereCatalogsClientListDeviceInsightsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureSphereCatalogsClientListDeviceInsightsResponse) (AzureSphereCatalogsClientListDeviceInsightsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.NewListDeviceInsightsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDeviceInsightsCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, body, options)
			}, nil)
			if err != nil {
				return AzureSphereCatalogsClientListDeviceInsightsResponse{}, err
			}
			return client.listDeviceInsightsHandleResponse(resp)
		},
	})
}

// listDeviceInsightsCreateRequest creates the ListDeviceInsights request.
func (client *AzureSphereCatalogsClient) listDeviceInsightsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, body any, options *AzureSphereCatalogsClientListDeviceInsightsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/listDeviceInsights"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Maxpagesize != nil {
		reqQP.Set("$maxpagesize", strconv.FormatInt(int64(*options.Maxpagesize), 10))
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("$skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// listDeviceInsightsHandleResponse handles the ListDeviceInsights response.
func (client *AzureSphereCatalogsClient) listDeviceInsightsHandleResponse(resp *http.Response) (AzureSphereCatalogsClientListDeviceInsightsResponse, error) {
	result := AzureSphereCatalogsClientListDeviceInsightsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedDeviceInsight); err != nil {
		return AzureSphereCatalogsClientListDeviceInsightsResponse{}, err
	}
	return result, nil
}

// NewListDevicesPager - Lists devices for catalog.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - body - The content of the action request
//   - options - AzureSphereCatalogsClientListDevicesOptions contains the optional parameters for the AzureSphereCatalogsClient.NewListDevicesPager
//     method.
func (client *AzureSphereCatalogsClient) NewListDevicesPager(subscriptionID string, resourceGroupName string, catalogName string, body any, options *AzureSphereCatalogsClientListDevicesOptions) *runtime.Pager[AzureSphereCatalogsClientListDevicesResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureSphereCatalogsClientListDevicesResponse]{
		More: func(page AzureSphereCatalogsClientListDevicesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureSphereCatalogsClientListDevicesResponse) (AzureSphereCatalogsClientListDevicesResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.NewListDevicesPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listDevicesCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, body, options)
			}, nil)
			if err != nil {
				return AzureSphereCatalogsClientListDevicesResponse{}, err
			}
			return client.listDevicesHandleResponse(resp)
		},
	})
}

// listDevicesCreateRequest creates the ListDevices request.
func (client *AzureSphereCatalogsClient) listDevicesCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, body any, options *AzureSphereCatalogsClientListDevicesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/listDevices"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Maxpagesize != nil {
		reqQP.Set("$maxpagesize", strconv.FormatInt(int64(*options.Maxpagesize), 10))
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("$skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// listDevicesHandleResponse handles the ListDevices response.
func (client *AzureSphereCatalogsClient) listDevicesHandleResponse(resp *http.Response) (AzureSphereCatalogsClientListDevicesResponse, error) {
	result := AzureSphereCatalogsClientListDevicesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeviceListResult); err != nil {
		return AzureSphereCatalogsClientListDevicesResponse{}, err
	}
	return result, nil
}

// Update - Update a Catalog
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - properties - The resource properties to be updated.
//   - options - AzureSphereCatalogsClientUpdateOptions contains the optional parameters for the AzureSphereCatalogsClient.Update
//     method.
func (client *AzureSphereCatalogsClient) Update(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, properties CatalogUpdate, options *AzureSphereCatalogsClientUpdateOptions) (AzureSphereCatalogsClientUpdateResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.Update")
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, properties, options)
	if err != nil {
		return AzureSphereCatalogsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureSphereCatalogsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureSphereCatalogsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *AzureSphereCatalogsClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, properties CatalogUpdate, options *AzureSphereCatalogsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *AzureSphereCatalogsClient) updateHandleResponse(resp *http.Response) (AzureSphereCatalogsClientUpdateResponse, error) {
	result := AzureSphereCatalogsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Catalog); err != nil {
		return AzureSphereCatalogsClientUpdateResponse{}, err
	}
	return result, nil
}

// BeginUploadImage - Creates an image. Use this action when the image ID is unknown.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - body - Image upload request body.
//   - options - AzureSphereCatalogsClientUploadImageOptions contains the optional parameters for the AzureSphereCatalogsClient.UploadImage
//     method.
func (client *AzureSphereCatalogsClient) BeginUploadImage(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, body Image, options *AzureSphereCatalogsClientUploadImageOptions) (*runtime.Poller[AzureSphereCatalogsClientUploadImageResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.uploadImage(ctx, subscriptionID, resourceGroupName, catalogName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzureSphereCatalogsClientUploadImageResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzureSphereCatalogsClientUploadImageResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// UploadImage - Creates an image. Use this action when the image ID is unknown.
func (client *AzureSphereCatalogsClient) uploadImage(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, body Image, options *AzureSphereCatalogsClientUploadImageOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCatalogsClient.BeginUploadImage")
	req, err := client.uploadImageCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// uploadImageCreateRequest creates the UploadImage request.
func (client *AzureSphereCatalogsClient) uploadImageCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, body Image, options *AzureSphereCatalogsClientUploadImageOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/uploadImage"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
