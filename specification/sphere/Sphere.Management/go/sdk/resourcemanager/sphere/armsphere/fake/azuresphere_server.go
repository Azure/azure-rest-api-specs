// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// AzureSphereServer is a fake server for instances of the armsphere.AzureSphereClient type.
type AzureSphereServer struct {
	// AzureSphereCatalogsServer contains the fakes for client AzureSphereCatalogsClient
	AzureSphereCatalogsServer AzureSphereCatalogsServer

	// AzureSphereCertificatesServer contains the fakes for client AzureSphereCertificatesClient
	AzureSphereCertificatesServer AzureSphereCertificatesServer

	// AzureSphereDeploymentsServer contains the fakes for client AzureSphereDeploymentsClient
	AzureSphereDeploymentsServer AzureSphereDeploymentsServer

	// AzureSphereDeviceGroupsServer contains the fakes for client AzureSphereDeviceGroupsClient
	AzureSphereDeviceGroupsServer AzureSphereDeviceGroupsServer

	// AzureSphereDevicesServer contains the fakes for client AzureSphereDevicesClient
	AzureSphereDevicesServer AzureSphereDevicesServer

	// AzureSphereImagesServer contains the fakes for client AzureSphereImagesClient
	AzureSphereImagesServer AzureSphereImagesServer

	// AzureSphereOperationsServer contains the fakes for client AzureSphereOperationsClient
	AzureSphereOperationsServer AzureSphereOperationsServer

	// AzureSphereProductsServer contains the fakes for client AzureSphereProductsClient
	AzureSphereProductsServer AzureSphereProductsServer
}

// NewAzureSphereServerTransport creates a new instance of AzureSphereServerTransport with the provided implementation.
// The returned AzureSphereServerTransport instance is connected to an instance of armsphere.AzureSphereClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAzureSphereServerTransport(srv *AzureSphereServer) *AzureSphereServerTransport {
	return &AzureSphereServerTransport{srv: srv}
}

// AzureSphereServerTransport connects instances of armsphere.AzureSphereClient to instances of AzureSphereServer.
// Don't use this type directly, use NewAzureSphereServerTransport instead.
type AzureSphereServerTransport struct {
	srv                             *AzureSphereServer
	trMu                            sync.Mutex
	trAzureSphereCatalogsServer     *AzureSphereCatalogsServerTransport
	trAzureSphereCertificatesServer *AzureSphereCertificatesServerTransport
	trAzureSphereDeploymentsServer  *AzureSphereDeploymentsServerTransport
	trAzureSphereDeviceGroupsServer *AzureSphereDeviceGroupsServerTransport
	trAzureSphereDevicesServer      *AzureSphereDevicesServerTransport
	trAzureSphereImagesServer       *AzureSphereImagesServerTransport
	trAzureSphereOperationsServer   *AzureSphereOperationsServerTransport
	trAzureSphereProductsServer     *AzureSphereProductsServerTransport
}

// Do implements the policy.Transporter interface for AzureSphereServerTransport.
func (a *AzureSphereServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (a *AzureSphereServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "AzureSphereCatalogsClient":
		initServer(&a.trMu, &a.trAzureSphereCatalogsServer, func() *AzureSphereCatalogsServerTransport {
			return NewAzureSphereCatalogsServerTransport(&a.srv.AzureSphereCatalogsServer)
		})
		resp, err = a.trAzureSphereCatalogsServer.Do(req)
	case "AzureSphereCertificatesClient":
		initServer(&a.trMu, &a.trAzureSphereCertificatesServer, func() *AzureSphereCertificatesServerTransport {
			return NewAzureSphereCertificatesServerTransport(&a.srv.AzureSphereCertificatesServer)
		})
		resp, err = a.trAzureSphereCertificatesServer.Do(req)
	case "AzureSphereDeploymentsClient":
		initServer(&a.trMu, &a.trAzureSphereDeploymentsServer, func() *AzureSphereDeploymentsServerTransport {
			return NewAzureSphereDeploymentsServerTransport(&a.srv.AzureSphereDeploymentsServer)
		})
		resp, err = a.trAzureSphereDeploymentsServer.Do(req)
	case "AzureSphereDeviceGroupsClient":
		initServer(&a.trMu, &a.trAzureSphereDeviceGroupsServer, func() *AzureSphereDeviceGroupsServerTransport {
			return NewAzureSphereDeviceGroupsServerTransport(&a.srv.AzureSphereDeviceGroupsServer)
		})
		resp, err = a.trAzureSphereDeviceGroupsServer.Do(req)
	case "AzureSphereDevicesClient":
		initServer(&a.trMu, &a.trAzureSphereDevicesServer, func() *AzureSphereDevicesServerTransport {
			return NewAzureSphereDevicesServerTransport(&a.srv.AzureSphereDevicesServer)
		})
		resp, err = a.trAzureSphereDevicesServer.Do(req)
	case "AzureSphereImagesClient":
		initServer(&a.trMu, &a.trAzureSphereImagesServer, func() *AzureSphereImagesServerTransport {
			return NewAzureSphereImagesServerTransport(&a.srv.AzureSphereImagesServer)
		})
		resp, err = a.trAzureSphereImagesServer.Do(req)
	case "AzureSphereOperationsClient":
		initServer(&a.trMu, &a.trAzureSphereOperationsServer, func() *AzureSphereOperationsServerTransport {
			return NewAzureSphereOperationsServerTransport(&a.srv.AzureSphereOperationsServer)
		})
		resp, err = a.trAzureSphereOperationsServer.Do(req)
	case "AzureSphereProductsClient":
		initServer(&a.trMu, &a.trAzureSphereProductsServer, func() *AzureSphereProductsServerTransport {
			return NewAzureSphereProductsServerTransport(&a.srv.AzureSphereProductsServer)
		})
		resp, err = a.trAzureSphereProductsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}
