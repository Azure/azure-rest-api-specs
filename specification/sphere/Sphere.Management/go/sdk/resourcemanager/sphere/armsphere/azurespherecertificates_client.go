// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armsphere

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// AzureSphereCertificatesClient contains the methods for the Microsoft.AzureSphere namespace.
// Don't use this type directly, use NewAzureSphereCertificatesClient() instead.
type AzureSphereCertificatesClient struct {
	internal *arm.Client
}

// NewAzureSphereCertificatesClient creates a new instance of AzureSphereCertificatesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzureSphereCertificatesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureSphereCertificatesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzureSphereCertificatesClient{
		internal: cl,
	}
	return client, nil
}

// Get - Get a Certificate
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - serialNumber - Serial number of the certificate. Use '.default' to get current active certificate.
//   - options - AzureSphereCertificatesClientGetOptions contains the optional parameters for the AzureSphereCertificatesClient.Get
//     method.
func (client *AzureSphereCertificatesClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, serialNumber string, options *AzureSphereCertificatesClientGetOptions) (AzureSphereCertificatesClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCertificatesClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, serialNumber, options)
	if err != nil {
		return AzureSphereCertificatesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureSphereCertificatesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureSphereCertificatesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AzureSphereCertificatesClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, serialNumber string, options *AzureSphereCertificatesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/certificates/{serialNumber}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzureSphereCertificatesClient) getHandleResponse(resp *http.Response) (AzureSphereCertificatesClientGetResponse, error) {
	result := AzureSphereCertificatesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Certificate); err != nil {
		return AzureSphereCertificatesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByCatalogPager - List Certificate resources by Catalog
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - options - AzureSphereCertificatesClientListByCatalogOptions contains the optional parameters for the AzureSphereCertificatesClient.NewListByCatalogPager
//     method.
func (client *AzureSphereCertificatesClient) NewListByCatalogPager(subscriptionID string, resourceGroupName string, catalogName string, options *AzureSphereCertificatesClientListByCatalogOptions) *runtime.Pager[AzureSphereCertificatesClientListByCatalogResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureSphereCertificatesClientListByCatalogResponse]{
		More: func(page AzureSphereCertificatesClientListByCatalogResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureSphereCertificatesClientListByCatalogResponse) (AzureSphereCertificatesClientListByCatalogResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCertificatesClient.NewListByCatalogPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByCatalogCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, options)
			}, nil)
			if err != nil {
				return AzureSphereCertificatesClientListByCatalogResponse{}, err
			}
			return client.listByCatalogHandleResponse(resp)
		},
	})
}

// listByCatalogCreateRequest creates the ListByCatalog request.
func (client *AzureSphereCertificatesClient) listByCatalogCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, options *AzureSphereCertificatesClientListByCatalogOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/certificates"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Maxpagesize != nil {
		reqQP.Set("$maxpagesize", strconv.FormatInt(int64(*options.Maxpagesize), 10))
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("$skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByCatalogHandleResponse handles the ListByCatalog response.
func (client *AzureSphereCertificatesClient) listByCatalogHandleResponse(resp *http.Response) (AzureSphereCertificatesClientListByCatalogResponse, error) {
	result := AzureSphereCertificatesClientListByCatalogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CertificateListResult); err != nil {
		return AzureSphereCertificatesClientListByCatalogResponse{}, err
	}
	return result, nil
}

// RetrieveCertChain - Retrieves cert chain.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - serialNumber - Serial number of the certificate. Use '.default' to get current active certificate.
//   - body - The content of the action request
//   - options - AzureSphereCertificatesClientRetrieveCertChainOptions contains the optional parameters for the AzureSphereCertificatesClient.RetrieveCertChain
//     method.
func (client *AzureSphereCertificatesClient) RetrieveCertChain(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, serialNumber string, body any, options *AzureSphereCertificatesClientRetrieveCertChainOptions) (AzureSphereCertificatesClientRetrieveCertChainResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCertificatesClient.RetrieveCertChain")
	req, err := client.retrieveCertChainCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, serialNumber, body, options)
	if err != nil {
		return AzureSphereCertificatesClientRetrieveCertChainResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureSphereCertificatesClientRetrieveCertChainResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureSphereCertificatesClientRetrieveCertChainResponse{}, err
	}
	resp, err := client.retrieveCertChainHandleResponse(httpResp)
	return resp, err
}

// retrieveCertChainCreateRequest creates the RetrieveCertChain request.
func (client *AzureSphereCertificatesClient) retrieveCertChainCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, serialNumber string, body any, options *AzureSphereCertificatesClientRetrieveCertChainOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/certificates/{serialNumber}/retrieveCertChain"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// retrieveCertChainHandleResponse handles the RetrieveCertChain response.
func (client *AzureSphereCertificatesClient) retrieveCertChainHandleResponse(resp *http.Response) (AzureSphereCertificatesClientRetrieveCertChainResponse, error) {
	result := AzureSphereCertificatesClientRetrieveCertChainResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CertificateChainResponse); err != nil {
		return AzureSphereCertificatesClientRetrieveCertChainResponse{}, err
	}
	return result, nil
}

// RetrieveProofOfPossessionNonce - Gets the proof of possession nonce.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - serialNumber - Serial number of the certificate. Use '.default' to get current active certificate.
//   - body - Proof of possession nonce request body
//   - options - AzureSphereCertificatesClientRetrieveProofOfPossessionNonceOptions contains the optional parameters for the AzureSphereCertificatesClient.RetrieveProofOfPossessionNonce
//     method.
func (client *AzureSphereCertificatesClient) RetrieveProofOfPossessionNonce(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, serialNumber string, body ProofOfPossessionNonceRequest, options *AzureSphereCertificatesClientRetrieveProofOfPossessionNonceOptions) (AzureSphereCertificatesClientRetrieveProofOfPossessionNonceResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereCertificatesClient.RetrieveProofOfPossessionNonce")
	req, err := client.retrieveProofOfPossessionNonceCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, serialNumber, body, options)
	if err != nil {
		return AzureSphereCertificatesClientRetrieveProofOfPossessionNonceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureSphereCertificatesClientRetrieveProofOfPossessionNonceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureSphereCertificatesClientRetrieveProofOfPossessionNonceResponse{}, err
	}
	resp, err := client.retrieveProofOfPossessionNonceHandleResponse(httpResp)
	return resp, err
}

// retrieveProofOfPossessionNonceCreateRequest creates the RetrieveProofOfPossessionNonce request.
func (client *AzureSphereCertificatesClient) retrieveProofOfPossessionNonceCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, serialNumber string, body ProofOfPossessionNonceRequest, options *AzureSphereCertificatesClientRetrieveProofOfPossessionNonceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/certificates/{serialNumber}/retrieveProofOfPossessionNonce"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// retrieveProofOfPossessionNonceHandleResponse handles the RetrieveProofOfPossessionNonce response.
func (client *AzureSphereCertificatesClient) retrieveProofOfPossessionNonceHandleResponse(resp *http.Response) (AzureSphereCertificatesClientRetrieveProofOfPossessionNonceResponse, error) {
	result := AzureSphereCertificatesClientRetrieveProofOfPossessionNonceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProofOfPossessionNonceResponse); err != nil {
		return AzureSphereCertificatesClientRetrieveProofOfPossessionNonceResponse{}, err
	}
	return result, nil
}
