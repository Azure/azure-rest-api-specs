// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armsphere

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzureSphereProductsClient contains the methods for the Microsoft.AzureSphere namespace.
// Don't use this type directly, use NewAzureSphereProductsClient() instead.
type AzureSphereProductsClient struct {
	internal *arm.Client
}

// NewAzureSphereProductsClient creates a new instance of AzureSphereProductsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAzureSphereProductsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureSphereProductsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AzureSphereProductsClient{
		internal: cl,
	}
	return client, nil
}

// CountDevices - Counts devices in product. '.default' and '.unassigned' are system defined values and cannot be used for
// product name.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - productName - Name of product.
//   - body - The content of the action request
//   - options - AzureSphereProductsClientCountDevicesOptions contains the optional parameters for the AzureSphereProductsClient.CountDevices
//     method.
func (client *AzureSphereProductsClient) CountDevices(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, body any, options *AzureSphereProductsClientCountDevicesOptions) (AzureSphereProductsClientCountDevicesResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereProductsClient.CountDevices")
	req, err := client.countDevicesCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, productName, body, options)
	if err != nil {
		return AzureSphereProductsClientCountDevicesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureSphereProductsClientCountDevicesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureSphereProductsClientCountDevicesResponse{}, err
	}
	resp, err := client.countDevicesHandleResponse(httpResp)
	return resp, err
}

// countDevicesCreateRequest creates the CountDevices request.
func (client *AzureSphereProductsClient) countDevicesCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, body any, options *AzureSphereProductsClientCountDevicesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products/{productName}/countDevices"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// countDevicesHandleResponse handles the CountDevices response.
func (client *AzureSphereProductsClient) countDevicesHandleResponse(resp *http.Response) (AzureSphereProductsClientCountDevicesResponse, error) {
	result := AzureSphereProductsClientCountDevicesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CountDevicesResponse); err != nil {
		return AzureSphereProductsClientCountDevicesResponse{}, err
	}
	return result, nil
}

// BeginCreateOrUpdate - Create a Product. '.default' and '.unassigned' are system defined values and cannot be used for product
// name.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - productName - Name of product.
//   - resource - Resource create parameters.
//   - options - AzureSphereProductsClientCreateOrUpdateOptions contains the optional parameters for the AzureSphereProductsClient.CreateOrUpdate
//     method.
func (client *AzureSphereProductsClient) BeginCreateOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, resource Product, options *AzureSphereProductsClientCreateOrUpdateOptions) (*runtime.Poller[AzureSphereProductsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, subscriptionID, resourceGroupName, catalogName, productName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzureSphereProductsClientCreateOrUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzureSphereProductsClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Create a Product. '.default' and '.unassigned' are system defined values and cannot be used for product
// name.
func (client *AzureSphereProductsClient) createOrUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, resource Product, options *AzureSphereProductsClientCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereProductsClient.BeginCreateOrUpdate")
	req, err := client.createOrUpdateCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, productName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AzureSphereProductsClient) createOrUpdateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, resource Product, options *AzureSphereProductsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products/{productName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a Product. '.default' and '.unassigned' are system defined values and cannot be used for product name'
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - productName - Name of product.
//   - options - AzureSphereProductsClientDeleteOptions contains the optional parameters for the AzureSphereProductsClient.Delete
//     method.
func (client *AzureSphereProductsClient) BeginDelete(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, options *AzureSphereProductsClientDeleteOptions) (*runtime.Poller[AzureSphereProductsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, subscriptionID, resourceGroupName, catalogName, productName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzureSphereProductsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzureSphereProductsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete a Product. '.default' and '.unassigned' are system defined values and cannot be used for product name'
func (client *AzureSphereProductsClient) deleteOperation(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, options *AzureSphereProductsClientDeleteOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereProductsClient.BeginDelete")
	req, err := client.deleteCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, productName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AzureSphereProductsClient) deleteCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, options *AzureSphereProductsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products/{productName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// NewGenerateDefaultDeviceGroupsPager - Generates default device groups for the product. '.default' and '.unassigned' are
// system defined values and cannot be used for product name.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - productName - Name of product.
//   - body - The content of the action request
//   - options - AzureSphereProductsClientGenerateDefaultDeviceGroupsOptions contains the optional parameters for the AzureSphereProductsClient.NewGenerateDefaultDeviceGroupsPager
//     method.
func (client *AzureSphereProductsClient) NewGenerateDefaultDeviceGroupsPager(subscriptionID string, resourceGroupName string, catalogName string, productName string, body any, options *AzureSphereProductsClientGenerateDefaultDeviceGroupsOptions) *runtime.Pager[AzureSphereProductsClientGenerateDefaultDeviceGroupsResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureSphereProductsClientGenerateDefaultDeviceGroupsResponse]{
		More: func(page AzureSphereProductsClientGenerateDefaultDeviceGroupsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureSphereProductsClientGenerateDefaultDeviceGroupsResponse) (AzureSphereProductsClientGenerateDefaultDeviceGroupsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereProductsClient.NewGenerateDefaultDeviceGroupsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.generateDefaultDeviceGroupsCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, productName, body, options)
			}, nil)
			if err != nil {
				return AzureSphereProductsClientGenerateDefaultDeviceGroupsResponse{}, err
			}
			return client.generateDefaultDeviceGroupsHandleResponse(resp)
		},
	})
}

// generateDefaultDeviceGroupsCreateRequest creates the GenerateDefaultDeviceGroups request.
func (client *AzureSphereProductsClient) generateDefaultDeviceGroupsCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, body any, options *AzureSphereProductsClientGenerateDefaultDeviceGroupsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products/{productName}/generateDefaultDeviceGroups"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// generateDefaultDeviceGroupsHandleResponse handles the GenerateDefaultDeviceGroups response.
func (client *AzureSphereProductsClient) generateDefaultDeviceGroupsHandleResponse(resp *http.Response) (AzureSphereProductsClientGenerateDefaultDeviceGroupsResponse, error) {
	result := AzureSphereProductsClientGenerateDefaultDeviceGroupsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeviceGroupListResult); err != nil {
		return AzureSphereProductsClientGenerateDefaultDeviceGroupsResponse{}, err
	}
	return result, nil
}

// Get - Get a Product. '.default' and '.unassigned' are system defined values and cannot be used for product name.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - productName - Name of product.
//   - options - AzureSphereProductsClientGetOptions contains the optional parameters for the AzureSphereProductsClient.Get method.
func (client *AzureSphereProductsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, options *AzureSphereProductsClientGetOptions) (AzureSphereProductsClientGetResponse, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereProductsClient.Get")
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, productName, options)
	if err != nil {
		return AzureSphereProductsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AzureSphereProductsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AzureSphereProductsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AzureSphereProductsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, options *AzureSphereProductsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products/{productName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzureSphereProductsClient) getHandleResponse(resp *http.Response) (AzureSphereProductsClientGetResponse, error) {
	result := AzureSphereProductsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Product); err != nil {
		return AzureSphereProductsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByCatalogPager - List Product resources by Catalog
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - options - AzureSphereProductsClientListByCatalogOptions contains the optional parameters for the AzureSphereProductsClient.NewListByCatalogPager
//     method.
func (client *AzureSphereProductsClient) NewListByCatalogPager(subscriptionID string, resourceGroupName string, catalogName string, options *AzureSphereProductsClientListByCatalogOptions) *runtime.Pager[AzureSphereProductsClientListByCatalogResponse] {
	return runtime.NewPager(runtime.PagingHandler[AzureSphereProductsClientListByCatalogResponse]{
		More: func(page AzureSphereProductsClientListByCatalogResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AzureSphereProductsClientListByCatalogResponse) (AzureSphereProductsClientListByCatalogResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereProductsClient.NewListByCatalogPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByCatalogCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, options)
			}, nil)
			if err != nil {
				return AzureSphereProductsClientListByCatalogResponse{}, err
			}
			return client.listByCatalogHandleResponse(resp)
		},
	})
}

// listByCatalogCreateRequest creates the ListByCatalog request.
func (client *AzureSphereProductsClient) listByCatalogCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, options *AzureSphereProductsClientListByCatalogOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByCatalogHandleResponse handles the ListByCatalog response.
func (client *AzureSphereProductsClient) listByCatalogHandleResponse(resp *http.Response) (AzureSphereProductsClientListByCatalogResponse, error) {
	result := AzureSphereProductsClientListByCatalogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductListResult); err != nil {
		return AzureSphereProductsClientListByCatalogResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a Product. '.default' and '.unassigned' are system defined values and cannot be used for product name.
//   - subscriptionID - The ID of the target subscription.
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - Name of catalog
//   - productName - Name of product.
//   - properties - The resource properties to be updated.
//   - options - AzureSphereProductsClientUpdateOptions contains the optional parameters for the AzureSphereProductsClient.Update
//     method.
func (client *AzureSphereProductsClient) BeginUpdate(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, properties ProductUpdate, options *AzureSphereProductsClientUpdateOptions) (*runtime.Poller[AzureSphereProductsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, subscriptionID, resourceGroupName, catalogName, productName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[AzureSphereProductsClientUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[AzureSphereProductsClientUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Update - Update a Product. '.default' and '.unassigned' are system defined values and cannot be used for product name.
func (client *AzureSphereProductsClient) update(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, properties ProductUpdate, options *AzureSphereProductsClientUpdateOptions) (*http.Response, error) {
	var err error
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AzureSphereProductsClient.BeginUpdate")
	req, err := client.updateCreateRequest(ctx, subscriptionID, resourceGroupName, catalogName, productName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *AzureSphereProductsClient) updateCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, catalogName string, productName string, properties ProductUpdate, options *AzureSphereProductsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products/{productName}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
