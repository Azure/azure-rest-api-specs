import "@typespec/http";
import "@typespec/rest";
import "@azure-tools/typespec-azure-core";

namespace Azure.AI.Projects;

alias CoreOps = Azure.Core.StandardResourceOperations;

/*
alias RepeatableCoreOps = Azure.Core.ResourceOperations<Azure.Core.Traits.SupportsRepeatableRequests &
  Azure.Core.Traits.SupportsClientRequestId &
  Azure.Core.Traits.NoConditionalRequests>;
*/

@Rest.autoRoute
interface VersionedOperations<
  TEntityType extends Reflection.Model,
  TListLatestParameters extends Reflection.Model = {},
  TListVersionsParameters extends Reflection.Model = {}
> {
  #suppress "@azure-tools/typespec-azure-core/verb-conflict" "We are using the resource action as a building block."
  @doc("List all versions of the given {name}", TEntityType)
  @Rest.action("versions")
  @Rest.actionSeparator("/")
  @Http.get
  listVersions is CoreOps.ResourceAction<
    TEntityType,
    TListVersionsParameters,
    Azure.Core.Page<TEntityType>
  >;

  #suppress "@azure-tools/typespec-azure-core/use-standard-operations" "Suppress `Operation should be defined using a signature from the Azure.Core namespace.`"
  @doc("List the latest version of each {name}", TEntityType)
  @Rest.listsResource(TEntityType)
  listLatest is Azure.Core.Foundations.ResourceList<
    TEntityType,
    TListLatestParameters,
    Azure.Core.Page<TEntityType>
  >;

  #suppress "@azure-tools/typespec-azure-core/use-standard-operations" "Suppress `Operation should be defined using a signature from the Azure.Core namespace.`"
  @doc("Get the specific version of the {name}", TEntityType)
  getVersion is Azure.Core.Foundations.ResourceOperation<
    TEntityType,
    {
      @doc("The specific version id of the {name} to retrieve.", TEntityType)
      @Rest.segment("versions")
      @Http.path
      version: string;
    },
    Azure.Core.Foundations.ResourceOkResponse<TEntityType>
  >;

  #suppress "@azure-tools/typespec-azure-core/use-standard-operations" "Suppress `Operation should be defined using a signature from the Azure.Core namespace.`"
  @doc("Delete the specific version of the {name}", TEntityType)
  @Http.delete
  deleteVersion is Azure.Core.Foundations.ResourceOperation<
    TEntityType,
    {
      @doc("The version of the {name} to delete.", TEntityType)
      @Rest.segment("versions")
      @Http.path
      version: string;
    },
    Http.NoContentResponse
  >;

  /* Reenable this once the service supports "unversioned" operations
  @doc(
    "Create a new {name}. The version id will be generated by the service.",
    TEntityType
  )
  @Rest.actionSeparator("/")
  @Rest.action("versions")
  @Http.post
  create is RepeatableCoreOps.ResourceAction<
    TEntityType,
    {
      @doc("The definition of the {name} to create", TEntityType)
      @Http.bodyRoot
      body: TEntityType;
    },
    TEntityType
  >;
  */

  #suppress "@azure-tools/typespec-azure-core/use-standard-operations" "Suppress `Operation should be defined using a signature from the Azure.Core namespace.`"
  @doc(
    "Create a new or update an existing {name} with the given version id",
    TEntityType
  )
  @Http.patch
  createOrUpdateVersion is Azure.Core.Foundations.ResourceOperation<
    TEntityType,
    {
      @doc("The definition of the {name} to create or update", TEntityType)
      @Http.bodyRoot
      body: TEntityType;

      @doc("Content type for patch")
      @Http.header("Content-Type")
      contentType: "application/merge-patch+json";

      @doc(
        "The specific version id of the {name} to create or replace.",
        TEntityType
      )
      @Rest.segment("versions")
      @Http.path
      version: string;
    },
    Azure.Core.Foundations.ResourceCreatedOrOkResponse<TEntityType>
  >;
}

@Rest.action
op VersionedResourceActionWithBody<
  TEntityType extends Reflection.Model,
  TParams,
  TResponse
> is Azure.Core.Foundations.ResourceOperation<
  TEntityType,
  {
    @doc("Parameters for the action")
    @Http.bodyRoot
    body: TParams;

    @doc("The specific version id of the {name} to operate on.", TEntityType)
    @Rest.segment("versions")
    @Http.path
    version: string;
  },
  TResponse
>;

@Rest.action
op VersionedResourceActionNoBody<
  TEntityType extends Reflection.Model,
  TResponse
> is Azure.Core.Foundations.ResourceOperation<
  TEntityType,
  {
    @doc("The specific version id of the {name} to operate on.", TEntityType)
    @Rest.segment("versions")
    @Http.path
    version: string;
  },
  TResponse
>;

/* Reenable this once the service supports "unversioned" operations
@Rest.action
op UnversionedResourceAction<
  TEntityType extends Reflection.Model,
  TParams,
  TResponse
> is Azure.Core.Foundations.ResourceOperation<
  TEntityType,
  {
    @doc("Parameters for the action")
    @Http.bodyRoot
    body: TParams;
  },
  TResponse
>;
*/
