{
  "swagger": "2.0",
  "info": {
    "title": "Azure AI",
    "version": "2025-05-01-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "Project endpoint in the form of: https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://cognitiveservices.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://cognitiveservices.azure.com/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/agents": {
      "get": {
        "operationId": "Agents_ListAgents",
        "description": "Lists all Agents, returning an array of Agent objects.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "post": {
        "operationId": "Agents_CreateAgent",
        "description": "Creates a new Agent resource and returns it.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/agents/{agentId}": {
      "get": {
        "operationId": "Agents_GetAgent",
        "description": "Retrieves an existing Agent by its ID.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "agentId",
            "in": "path",
            "description": "The ID of the Agent to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Agents_UpdateAgent",
        "description": "Updates or replaces an agent and returns the updated resource.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "agentId",
            "in": "path",
            "description": "The ID of the Agent to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The updated Agent data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Agents_DeleteAgent",
        "description": "Deletes an Agent by its ID, returning 204 on success.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "agentId",
            "in": "path",
            "description": "The ID of the Agent to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/agents/{agentId}:stream": {
      "post": {
        "operationId": "Agents_StreamByAgent",
        "description": "Resource action operation template.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "agentId",
            "in": "path",
            "description": "A unique identifier for the agent.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunInputs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/connections": {
      "get": {
        "operationId": "Connections_List",
        "description": "List all connections in the project",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "connectionType",
            "in": "query",
            "description": "Specific type of connection to return in list",
            "required": false,
            "type": "string",
            "enum": [
              "AzureOpenAI",
              "AzureBlob",
              "CognitiveSearch",
              "CosmosDB",
              "ApiKey",
              "AppInsights",
              "CustomKeys"
            ],
            "x-ms-enum": {
              "name": "ConnectionType",
              "modelAsString": true,
              "values": [
                {
                  "name": "AzureOpenAI",
                  "value": "AzureOpenAI",
                  "description": "Azure OpenAI Service"
                },
                {
                  "name": "AzureBlobStorage",
                  "value": "AzureBlob",
                  "description": "Azure Blob Storage"
                },
                {
                  "name": "AzureAISearch",
                  "value": "CognitiveSearch",
                  "description": "Azure AI Search"
                },
                {
                  "name": "CosmosDB",
                  "value": "CosmosDB",
                  "description": "CosmosDB"
                },
                {
                  "name": "APIKey",
                  "value": "ApiKey",
                  "description": "Generic connection that uses API Key authentication"
                },
                {
                  "name": "ApplicationInsights",
                  "value": "AppInsights",
                  "description": "Application Insights"
                },
                {
                  "name": "Custom",
                  "value": "CustomKeys",
                  "description": "Custom Keys"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedConnection"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/connections/{connectionName}": {
      "get": {
        "operationId": "Connections_Get",
        "description": "Get a connection by name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "connectionName",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Connection"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/datasets": {
      "get": {
        "operationId": "Datasets_ListLatest",
        "description": "List the latest version of each DatasetVersion",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount is larger than page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/datasets/{name}/startPendingUpload": {
      "post": {
        "operationId": "Datasets_StartPendingUploadAutoIncrement",
        "description": "Create or start a pending upload of a dataset. The dataset version will be generated by service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PendingUploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PendingUploadResponse"
            },
            "headers": {
              "Repeatability-Result": {
                "type": "string",
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": false,
                  "values": [
                    {
                      "name": "accepted",
                      "value": "accepted",
                      "description": "If the request was accepted and the server guarantees that the server state reflects a single execution of the operation."
                    },
                    {
                      "name": "rejected",
                      "value": "rejected",
                      "description": "If the request was rejected because the combination of Repeatability-First-Sent and Repeatability-Request-ID were invalid\nor because the Repeatability-First-Sent value was outside the range of values held by the server."
                    }
                  ]
                }
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions": {
      "get": {
        "operationId": "Datasets_ListVersions",
        "description": "List all versions of the given DatasetVersion",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount is larger than page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "operationId": "Datasets_Create",
        "description": "Create a new DatasetVersion. The version id will be generated by the service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The definition of the DatasetVersion to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            },
            "headers": {
              "Repeatability-Result": {
                "type": "string",
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": false,
                  "values": [
                    {
                      "name": "accepted",
                      "value": "accepted",
                      "description": "If the request was accepted and the server guarantees that the server state reflects a single execution of the operation."
                    },
                    {
                      "name": "rejected",
                      "value": "rejected",
                      "description": "If the request was rejected because the combination of Repeatability-First-Sent and Repeatability-Request-ID were invalid\nor because the Repeatability-First-Sent value was outside the range of values held by the server."
                    }
                  ]
                }
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions/{version}": {
      "get": {
        "operationId": "Datasets_GetVersion",
        "description": "Get the specific version of the DatasetVersion",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Datasets_CreateVersion",
        "description": "Create a new or replace an existing DatasetVersion with the given version id",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to create or replace.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The definition of the DatasetVersion to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Datasets_DeleteVersion",
        "description": "Delete the specific version of the DatasetVersion",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the DatasetVersion to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions/{version}/startPendingUpload": {
      "post": {
        "operationId": "Datasets_StartPendingUpload",
        "description": "Create or start a pending upload of a dataset for a specific version.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to operate on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Parameters for the action",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PendingUploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PendingUploadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "operationId": "Deployments_List",
        "description": "List all deployed models in the project",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "modelPublisher",
            "in": "query",
            "description": "Model publisher to filter models by",
            "required": false,
            "type": "string"
          },
          {
            "name": "modelName",
            "in": "query",
            "description": "Model name (the publisher specific name) to filter models by",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeConnectedModels",
            "in": "query",
            "description": "Flag to include models from connections in response.",
            "required": false,
            "type": "boolean",
            "x-ms-client-name": "includeConnectionModels"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDeployment"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/deployments/{name}": {
      "get": {
        "operationId": "Deployments_Get",
        "description": "Get a deployed model.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the deployment",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Deployment"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluations/runs": {
      "get": {
        "operationId": "Evaluations_List",
        "description": "List evaluation runs",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedEvaluation"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/evaluations/runs/{name}": {
      "get": {
        "operationId": "Evaluations_Get",
        "description": "Get an evaluation run by name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluations/runs:run": {
      "post": {
        "operationId": "Evaluations_CreateRun",
        "description": "Creates an evaluation run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "evaluation",
            "in": "body",
            "description": "Evaluation to be run",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/indexes": {
      "get": {
        "operationId": "Indexes_ListLatest",
        "description": "List the latest version of each Index",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount is larger than page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/indexes/{name}/versions": {
      "get": {
        "operationId": "Indexes_ListVersions",
        "description": "List all versions of the given Index",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount is larger than page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "operationId": "Indexes_Create",
        "description": "Create a new Index. The version id will be generated by the service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The definition of the Index to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Index"
            },
            "headers": {
              "Repeatability-Result": {
                "type": "string",
                "description": "Indicates whether the repeatable request was accepted or rejected.",
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "x-ms-enum": {
                  "name": "RepeatabilityResult",
                  "modelAsString": false,
                  "values": [
                    {
                      "name": "accepted",
                      "value": "accepted",
                      "description": "If the request was accepted and the server guarantees that the server state reflects a single execution of the operation."
                    },
                    {
                      "name": "rejected",
                      "value": "rejected",
                      "description": "If the request was rejected because the combination of Repeatability-First-Sent and Repeatability-Request-ID were invalid\nor because the Repeatability-First-Sent value was outside the range of values held by the server."
                    }
                  ]
                }
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/indexes/{name}/versions/{version}": {
      "get": {
        "operationId": "Indexes_GetVersion",
        "description": "Get the specific version of the Index",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the Index to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Indexes_CreateVersion",
        "description": "Create a new or replace an existing Index with the given version id",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the Index to create or replace.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The definition of the Index to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Indexes_DeleteVersion",
        "description": "Delete the specific version of the Index",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the Index to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/runs": {
      "get": {
        "operationId": "Runs_ListRuns",
        "description": "Lists all run records, each containing runInputs and runOutputs.\n@route(\"/runs\")",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedRun"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "operationId": "Runs_CreateRun",
        "description": "Creates a new run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunInputs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Run"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/runs/{runId}": {
      "get": {
        "operationId": "Runs_GetRun",
        "description": "Retrieves an existing run by its ID.\n@route(\"/run/{run_id}\")",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "Unique identifier for this run.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Run"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/runs/execute": {
      "post": {
        "operationId": "Runs_CreateAndExecuteRun",
        "description": "Creates and waits for a run to finish, returning the completed Run (including its outputs).",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunInputs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Run"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/runs:createAndStreamRun": {
      "post": {
        "operationId": "Runs_CreateAndStreamRun",
        "description": "Create and stream run.\n@route(\"/run/stream\")",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Run"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/threads": {
      "get": {
        "operationId": "Threads_ListThreads",
        "description": "Lists all threads, returning an array of Thread items.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Thread"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "post": {
        "operationId": "Threads_CreateThread",
        "description": "Creates a new Thread and returns it.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Thread"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Thread"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}": {
      "get": {
        "operationId": "Threads_GetThread",
        "description": "Retrieves an existing thread by its ID.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "threadId",
            "in": "path",
            "description": "The identifier of the Thread.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Thread"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Threads_UpdateThread",
        "description": "Updates or replaces a thread by its ID, returning the updated Thread.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "threadId",
            "in": "path",
            "description": "The identifier of the Thread to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The updated Thread resource data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Thread"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Thread"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Threads_DeleteThread",
        "description": "Deletes a thread, returning 204 on success.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}/message": {
      "get": {
        "operationId": "Messages_ListMessages",
        "description": "Lists chat messages, returning a collection of ChatMessage objects.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "threadId",
            "in": "path",
            "description": "A unique identifier for this thread.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedChatMessage"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "operationId": "Messages_SendMessage",
        "description": "Creates (sends) a new chat message, returning the created ChatMessage.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "threadId",
            "in": "path",
            "description": "A unique identifier for this thread.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChatMessage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of ChatMessage"
              },
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}/message/{messageId}": {
      "get": {
        "operationId": "Messages_GetMessage",
        "description": "Retrieves (reads) an existing chat message.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "threadId",
            "in": "path",
            "description": "A unique identifier for this thread.",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "A unique identifier for this message.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ChatMessage"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Messages_UpdateMessage",
        "description": "Updates an existing chat message (or creates if not found) and returns the updated message.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "threadId",
            "in": "path",
            "description": "A unique identifier for this thread.",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "A unique identifier for this message.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChatMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ChatMessage"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/ChatMessage"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Messages_DeleteMessage",
        "description": "Deletes a chat message. Returns 204 on success.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "threadId",
            "in": "path",
            "description": "A unique identifier for this thread.",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "A unique identifier for this message.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AIContent": {
      "type": "object",
      "description": "An abstract representation of a structured content item within a chat message.",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "AIContentUpdate": {
      "type": "object",
      "description": "Streaming update for AI content in a message.",
      "properties": {
        "mId": {
          "type": "string",
          "description": "The message ID."
        },
        "i": {
          "type": "integer",
          "format": "int32",
          "description": "The index in the content list."
        },
        "d": {
          "$ref": "#/definitions/StreamingOperation",
          "description": "The delta operation applied to the AI content."
        }
      },
      "required": [
        "mId",
        "i"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/StreamingUpdate"
        }
      ],
      "x-ms-discriminator-value": "ai_content"
    },
    "AadCredential": {
      "type": "object",
      "description": "AAD Credential definition",
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredential"
        }
      ],
      "x-ms-discriminator-value": "AAD"
    },
    "Agent": {
      "type": "object",
      "description": "Represents an AI agent with configuration, instructions, and tool access.",
      "properties": {
        "agentId": {
          "type": "string",
          "description": "A unique identifier for the agent.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "A description of the agent; used for display purposes and to describe the agent."
        },
        "metadata": {
          "type": "object",
          "description": "Arbitrary metadata associated with this agent.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "The name of the agent; used for display purposes and sent to the LLM to identify the agent."
        },
        "agentModel": {
          "$ref": "#/definitions/AgentModel",
          "description": "The model definition for this agent."
        },
        "instructions": {
          "type": "array",
          "description": "Instructions provided to guide how this agent operates.",
          "items": {
            "$ref": "#/definitions/DeveloperMessage"
          },
          "x-ms-identifiers": []
        },
        "tools": {
          "type": "array",
          "description": "A list of tool definitions available to the agent.",
          "items": {
            "$ref": "#/definitions/AgentToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "toolChoice": {
          "$ref": "#/definitions/ToolChoiceBehavior",
          "description": "How the agent should choose among provided tools."
        }
      },
      "required": [
        "agentId",
        "agentModel"
      ]
    },
    "AgentMessage": {
      "type": "object",
      "description": "An agent message within a chat, always with the 'agent' role.",
      "properties": {
        "content": {
          "type": "array",
          "description": "The contents of the agent message.",
          "items": {}
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatMessage"
        }
      ],
      "x-ms-discriminator-value": "agent"
    },
    "AgentModel": {
      "type": "object",
      "description": "Represents the model or provider-specific data used by the agent.",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique model or deployment ID for this agent model."
        },
        "provider": {
          "type": "string",
          "description": "The name of the provider for this model (e.g., 'openai')."
        },
        "endpoint": {
          "type": "string",
          "description": "An endpoint where the provider can be reached, if applicable."
        },
        "options": {
          "$ref": "#/definitions/JSONAny",
          "description": "Provider-specific configuration and options (JSON-like structure)."
        }
      },
      "discriminator": "provider",
      "required": [
        "id",
        "provider"
      ]
    },
    "AgentOptions": {
      "type": "object",
      "description": "Options used when creating or updating an Agent.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the agent; used for display purposes and sent to the LLM to identify the agent."
        },
        "agentModel": {
          "$ref": "#/definitions/AgentModel",
          "description": "The model definition for this agent."
        },
        "instructions": {
          "type": "array",
          "description": "Instructions provided to guide how this agent operates.",
          "items": {
            "$ref": "#/definitions/DeveloperMessage"
          },
          "x-ms-identifiers": []
        },
        "tools": {
          "type": "array",
          "description": "A list of tool definitions available to the agent.",
          "items": {
            "$ref": "#/definitions/AgentToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "toolChoice": {
          "$ref": "#/definitions/ToolChoiceBehavior",
          "description": "How the agent should choose among provided tools."
        }
      },
      "required": [
        "agentModel"
      ]
    },
    "AgentToolDefinition": {
      "type": "object",
      "description": "Represents a definition of a tool that an agent may use, used in a polymorphic manner.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminates the various child 'tool definition' types."
        },
        "options": {
          "$ref": "#/definitions/AgentToolOptions",
          "description": "Additional options that specify the behavior of this tool (also polymorphic)."
        },
        "override": {
          "type": "object",
          "description": "A set of overrides for the tool's name, description, or parameters.",
          "properties": {
            "name": {
              "type": "string",
              "description": "An alternate name for the tool."
            },
            "description": {
              "type": "string",
              "description": "An alternate description for the tool."
            },
            "parameters": {
              "$ref": "#/definitions/JSONSchema",
              "description": "An alternate JSON schema for the tool's parameters."
            }
          }
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "AgentToolOptions": {
      "type": "object",
      "description": "Base type for any agent tool-specific options, used in a polymorphic manner.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminates the various child 'tool options' types."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "Annotations": {
      "type": "object",
      "description": "Annotations applied to parts of the message or content.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of annotation."
        },
        "ToolCallId": {
          "type": "string",
          "description": "The tool call ID associated with the annotation."
        },
        "jsonPath": {
          "type": "string",
          "description": "The JSON path associated with the annotation."
        },
        "url": {
          "type": "string",
          "description": "The URL associated with the annotation."
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "The start position of the annotation."
        },
        "end": {
          "type": "integer",
          "format": "int32",
          "description": "The end position of the annotation."
        }
      },
      "required": [
        "type"
      ]
    },
    "ApiKeyCredential": {
      "type": "object",
      "description": "ApiKey Credential definition",
      "properties": {
        "apiKey": {
          "type": "string",
          "description": "API Key",
          "readOnly": true
        }
      },
      "required": [
        "apiKey"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredential"
        }
      ],
      "x-ms-discriminator-value": "ApiKey"
    },
    "ApiResponseFormat": {
      "type": "string",
      "description": "Possible API response formats.",
      "enum": [
        "text",
        "json_object"
      ],
      "x-ms-enum": {
        "name": "ApiResponseFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "text",
            "value": "text",
            "description": "`text` format should be used for requests involving any sort of ToolCall."
          },
          {
            "name": "jsonObject",
            "value": "json_object",
            "description": "Using `json_object` format will limit the usage of ToolCall to only functions."
          }
        ]
      }
    },
    "AppendStreamingOperation": {
      "type": "object",
      "description": "Appends a value to a list at a JSON path.",
      "properties": {
        "value": {
          "$ref": "#/definitions/JSONAny",
          "description": "The value to apply to the operation, expressed as a JSON-compatible type."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/StreamingOperation"
        }
      ],
      "x-ms-discriminator-value": "append"
    },
    "AssetReferenceBase": {
      "type": "object",
      "description": "Base definition for asset references.",
      "properties": {
        "referenceType": {
          "$ref": "#/definitions/ReferenceType",
          "description": "Asset reference type."
        }
      },
      "discriminator": "referenceType",
      "required": [
        "referenceType"
      ]
    },
    "AssistantsApiResponseFormat": {
      "type": "object",
      "description": "An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run. If `text` the model can return text or any value needed.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Must be one of `text` or `json_object`.",
          "default": "text",
          "enum": [
            "text",
            "json_object"
          ],
          "x-ms-enum": {
            "name": "ApiResponseFormat",
            "modelAsString": true,
            "values": [
              {
                "name": "text",
                "value": "text",
                "description": "`text` format should be used for requests involving any sort of ToolCall."
              },
              {
                "name": "jsonObject",
                "value": "json_object",
                "description": "Using `json_object` format will limit the usage of ToolCall to only functions."
              }
            ]
          }
        }
      }
    },
    "AssistantsApiResponseFormatMode": {
      "type": "string",
      "description": "Represents the mode in which the model will handle the return format of a tool call.",
      "enum": [
        "auto",
        "none"
      ],
      "x-ms-enum": {
        "name": "AssistantsApiResponseFormatMode",
        "modelAsString": true,
        "values": [
          {
            "name": "auto",
            "value": "auto",
            "description": "Default value. Let the model handle the return format."
          },
          {
            "name": "none",
            "value": "none",
            "description": "Setting the value to `none`, will result in a 400 Bad request."
          }
        ]
      }
    },
    "AssistantsApiResponseFormatOption": {},
    "AudioContent": {
      "type": "object",
      "description": "A structured chat content item containing an audio reference.",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int16",
          "description": "Duration of audio in seconds (optional)."
        },
        "fileName": {
          "type": "string",
          "description": "The file name for this binary content."
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type for this binary content."
        },
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "URI where the binary content can be retrieved."
        },
        "dataUri": {
          "type": "string",
          "format": "uri",
          "description": "Data URI containing the binary content inlined."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Raw bytes for the binary content."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AIContent"
        }
      ],
      "x-ms-discriminator-value": "audio"
    },
    "AuthorRole": {
      "type": "string",
      "description": "Possible roles of the message author.",
      "enum": [
        "user",
        "agent",
        "system",
        "tool",
        "developer"
      ],
      "x-ms-enum": {
        "name": "AuthorRole",
        "modelAsString": true,
        "values": [
          {
            "name": "user",
            "value": "user"
          },
          {
            "name": "agent",
            "value": "agent"
          },
          {
            "name": "system",
            "value": "system"
          },
          {
            "name": "tool",
            "value": "tool"
          },
          {
            "name": "developer",
            "value": "developer"
          }
        ]
      }
    },
    "AutoToolChoiceBehavior": {
      "type": "object",
      "description": "Behavior specifying an automatic choice among the given tools.",
      "properties": {
        "toolNames": {
          "type": "array",
          "description": "The tool names from which the agent can automatically choose.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "toolNames"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ToolChoiceBehavior"
        }
      ],
      "x-ms-discriminator-value": "auto"
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "AzureAISearchIndex": {
      "type": "object",
      "description": "Azure AI Search Index Definition",
      "properties": {
        "connectionName": {
          "type": "string",
          "description": "Name of connection to Azure AI Search"
        },
        "indexName": {
          "type": "string",
          "description": "Name of index in Azure AI Search resource to attach"
        }
      },
      "required": [
        "connectionName",
        "indexName"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Index"
        }
      ],
      "x-ms-discriminator-value": "AzureSearch"
    },
    "AzureAgentModel": {
      "type": "object",
      "description": "A specialized AgentModel for Azure-based providers.",
      "properties": {
        "options": {
          "$ref": "#/definitions/AzureModelOptions",
          "description": "The provider-specific options for this Azure-based model."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AgentModel"
        }
      ],
      "x-ms-discriminator-value": "azure"
    },
    "AzureModelOptions": {
      "type": "object",
      "description": "A set of provider-specific configuration and behavior options for Azure-based models.",
      "properties": {
        "provider": {
          "type": "string",
          "description": "Identifies this model options object as an Azure-based provider.",
          "enum": [
            "azure"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "The sampling temperature to use that controls the apparent creativity of generated completions.\nHigher values will make output more random while lower values will make results more focused\nand deterministic.\nIt is not recommended to modify temperature and topP for the same completions request as the\ninteraction of these two settings is difficult to predict."
        },
        "topP": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature called nucleus sampling. This value causes the\nmodel to consider the results of tokens with the provided probability mass. As an example, a\nvalue of 0.15 will cause only the tokens comprising the top 15% of probability mass to be\nconsidered.\nIt is not recommended to modify temperature and topP for the same completions request as the\ninteraction of these two settings is difficult to predict."
        }
      },
      "required": [
        "provider"
      ]
    },
    "BaseCredential": {
      "type": "object",
      "description": "Base Credential definition",
      "properties": {
        "type": {
          "$ref": "#/definitions/CredentialType",
          "description": "Type of credential. Possible values are: AAD, SAS, ApiKey",
          "readOnly": true
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "BingGroundingToolDefinition": {
      "type": "object",
      "description": "A tool definition for Microsoft Bing grounding.",
      "properties": {
        "connectionName": {
          "type": "string",
          "description": "The name of the Bing grounding connection."
        }
      },
      "required": [
        "connectionName"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AgentToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "Microsoft.BingGrounding"
    },
    "BlobReferenceForConsumption": {
      "type": "object",
      "description": "Represents a reference to a blob for consumption",
      "properties": {
        "blobUri": {
          "type": "string",
          "description": "Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path"
        },
        "storageAccountArmId": {
          "type": "string",
          "description": "ARM ID of the storage account to use."
        },
        "credential": {
          "$ref": "#/definitions/SasCredential",
          "description": "Credential info to access the storage account."
        }
      },
      "required": [
        "blobUri",
        "storageAccountArmId",
        "credential"
      ]
    },
    "ChatMessage": {
      "type": "object",
      "description": "A base model for representing a chat message.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The ID of the user who created the message (if applicable)."
        },
        "agentId": {
          "type": "string",
          "description": "The ID of the agent who created the message (if applicable)."
        },
        "messageId": {
          "type": "string",
          "description": "A unique identifier for this message.",
          "readOnly": true
        },
        "agentRunId": {
          "type": "string",
          "description": "A unique run ID, if this message was generated by a run process."
        },
        "threadId": {
          "type": "string",
          "description": "The thread to which this message belongs.",
          "readOnly": true
        },
        "role": {
          "type": "string",
          "description": "The role of this message's author.",
          "default": "user",
          "enum": [
            "user",
            "agent",
            "system",
            "tool",
            "developer"
          ],
          "x-ms-enum": {
            "name": "AuthorRole",
            "modelAsString": true,
            "values": [
              {
                "name": "user",
                "value": "user"
              },
              {
                "name": "agent",
                "value": "agent"
              },
              {
                "name": "system",
                "value": "system"
              },
              {
                "name": "tool",
                "value": "tool"
              },
              {
                "name": "developer",
                "value": "developer"
              }
            ]
          }
        },
        "content": {
          "type": "array",
          "description": "The contents of the message.",
          "items": {
            "$ref": "#/definitions/AIContent"
          },
          "x-ms-identifiers": []
        },
        "authorName": {
          "type": "string",
          "description": "An optional display name for the author."
        },
        "createdAt": {
          "type": "integer",
          "format": "int64",
          "description": "The timestamp (in Unix time) when this message was created."
        },
        "completedAt": {
          "type": "integer",
          "format": "int64",
          "description": "The timestamp (in Unix time) when this message was completed, if applicable."
        }
      },
      "discriminator": "role",
      "required": [
        "messageId",
        "threadId",
        "role",
        "content"
      ]
    },
    "ChatMessageUpdate": {
      "type": "object",
      "description": "Streaming update for a chat message.",
      "properties": {
        "mId": {
          "type": "string",
          "description": "The message ID."
        },
        "tId": {
          "type": "string",
          "description": "The thread ID."
        },
        "d": {
          "$ref": "#/definitions/StreamingOperation",
          "description": "The delta operation applied to the message."
        },
        "u": {
          "$ref": "#/definitions/CompletionUsage",
          "description": "Usage metrics update."
        }
      },
      "required": [
        "mId",
        "tId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/StreamingUpdate"
        }
      ],
      "x-ms-discriminator-value": "chat_message"
    },
    "CodeInterpreterToolDefinition": {
      "type": "object",
      "description": "A tool definition for the OpenAI Code Interpreter.",
      "properties": {
        "fileIds": {
          "type": "array",
          "description": "A list of file IDs this code interpreter requires.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "fileIds"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AgentToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "OpenAI.CodeInterpreter"
    },
    "CompletionUsage": {
      "type": "object",
      "description": "Detailed token usage data for a run request.",
      "properties": {
        "outputTokens": {
          "type": "integer",
          "format": "int64",
          "description": "Number of run (completion) tokens used over the course of the run."
        },
        "inputTokens": {
          "type": "integer",
          "format": "int64",
          "description": "Number of prompt tokens used over the course of the run step."
        },
        "totalTokens": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of tokens used (prompt + run)."
        },
        "inputTokenDetails": {
          "type": "object",
          "description": "Details of the prompt tokens.",
          "properties": {
            "cachedTokens": {
              "type": "integer",
              "format": "int32",
              "description": "The number of cached prompt tokens."
            }
          }
        },
        "outputTokenDetails": {
          "type": "object",
          "description": "Breakdown of tokens used in a run.",
          "properties": {
            "reasoningTokens": {
              "type": "integer",
              "format": "int32",
              "description": "Tokens generated by the model for reasoning."
            }
          }
        }
      },
      "required": [
        "outputTokens",
        "inputTokens",
        "totalTokens"
      ]
    },
    "Connection": {
      "type": "object",
      "description": "Response from the listSecrets operation",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "$ref": "#/definitions/ConnectionType",
          "description": "Category of the connection",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "The connection URL to be used for this service",
          "readOnly": true
        },
        "metadata": {
          "type": "object",
          "description": "Metadata of the connection",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "name",
        "type",
        "target",
        "metadata"
      ]
    },
    "ConnectionType": {
      "type": "string",
      "description": "The Type (or category) of the connection",
      "enum": [
        "AzureOpenAI",
        "AzureBlob",
        "CognitiveSearch",
        "CosmosDB",
        "ApiKey",
        "AppInsights",
        "CustomKeys"
      ],
      "x-ms-enum": {
        "name": "ConnectionType",
        "modelAsString": true,
        "values": [
          {
            "name": "AzureOpenAI",
            "value": "AzureOpenAI",
            "description": "Azure OpenAI Service"
          },
          {
            "name": "AzureBlobStorage",
            "value": "AzureBlob",
            "description": "Azure Blob Storage"
          },
          {
            "name": "AzureAISearch",
            "value": "CognitiveSearch",
            "description": "Azure AI Search"
          },
          {
            "name": "CosmosDB",
            "value": "CosmosDB",
            "description": "CosmosDB"
          },
          {
            "name": "APIKey",
            "value": "ApiKey",
            "description": "Generic connection that uses API Key authentication"
          },
          {
            "name": "ApplicationInsights",
            "value": "AppInsights",
            "description": "Application Insights"
          },
          {
            "name": "Custom",
            "value": "CustomKeys",
            "description": "Custom Keys"
          }
        ]
      }
    },
    "ContentFilterContent": {
      "type": "object",
      "description": "A structured chat content item containing a content filter.",
      "properties": {
        "contentFilter": {
          "type": "string",
          "description": "Content filter data."
        },
        "detected": {
          "type": "boolean",
          "description": "Whether content was flagged/detected."
        }
      },
      "required": [
        "contentFilter",
        "detected"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AIContent"
        }
      ],
      "x-ms-discriminator-value": "contentFilter"
    },
    "CosmosDBIndex": {
      "type": "object",
      "description": "CosmosDB Vector Store Index Definition",
      "properties": {
        "connectionName": {
          "type": "string",
          "description": "Name of connection to CosmosDB"
        },
        "databaseName": {
          "type": "string",
          "description": "Name of the CosmosDB Database"
        },
        "containerName": {
          "type": "string",
          "description": "Name of CosmosDB Container"
        },
        "embeddingConfiguration": {
          "$ref": "#/definitions/EmbeddingConfiguration",
          "description": "Embedding model configuration"
        }
      },
      "required": [
        "connectionName",
        "databaseName",
        "containerName",
        "embeddingConfiguration"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Index"
        }
      ],
      "x-ms-discriminator-value": "CosmosDBNoSqlVectorStore"
    },
    "CredentialType": {
      "type": "string",
      "description": "The different Credential types",
      "enum": [
        "ApiKey",
        "AAD",
        "SAS"
      ],
      "x-ms-enum": {
        "name": "CredentialType",
        "modelAsString": true,
        "values": [
          {
            "name": "ApiKey",
            "value": "ApiKey"
          },
          {
            "name": "AAD",
            "value": "AAD"
          },
          {
            "name": "SAS",
            "value": "SAS"
          }
        ]
      }
    },
    "DataPathAssetReference": {
      "type": "object",
      "description": "Reference to an asset via its path in a datastore.",
      "properties": {
        "datastoreId": {
          "type": "string",
          "description": "ARM resource ID of the datastore where the asset is located."
        },
        "path": {
          "type": "string",
          "description": "The path of the file/directory in the datastore."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AssetReferenceBase"
        }
      ],
      "x-ms-discriminator-value": "DataPath"
    },
    "DatasetType": {
      "type": "string",
      "description": "Enum to determine the type of data.",
      "enum": [
        "uri_file",
        "uri_folder"
      ],
      "x-ms-enum": {
        "name": "DatasetType",
        "modelAsString": true,
        "values": [
          {
            "name": "uri_file",
            "value": "uri_file",
            "description": "URI file."
          },
          {
            "name": "uri_folder",
            "value": "uri_folder",
            "description": "URI folder."
          }
        ]
      }
    },
    "DatasetVersion": {
      "type": "object",
      "description": "DatasetVersion Definition",
      "properties": {
        "datasetUri": {
          "type": "string",
          "description": "[Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "type": {
          "$ref": "#/definitions/DatasetType",
          "description": "Dataset type"
        },
        "isReference": {
          "type": "boolean",
          "description": "Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted",
          "readOnly": true
        },
        "stage": {
          "type": "string",
          "description": "Asset stage",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "id": {
          "type": "string",
          "description": "A unique identifier for the asset, assetId probably?",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "The version of the resource",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The asset description text."
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "discriminator": "type",
      "required": [
        "datasetUri",
        "type",
        "name",
        "version"
      ]
    },
    "Deployment": {
      "type": "object",
      "description": "Model Deployment Definition",
      "properties": {
        "type": {
          "$ref": "#/definitions/DeploymentType",
          "description": "The type of the deployment"
        },
        "name": {
          "type": "string",
          "description": "Name of the deployment",
          "readOnly": true
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "name"
      ]
    },
    "DeploymentType": {
      "type": "string",
      "description": "Represents the type of the deployment. Known literal is 'ModelDeployment'",
      "enum": [
        "ModelDeployment"
      ],
      "x-ms-enum": {
        "name": "DeploymentType",
        "modelAsString": true,
        "values": [
          {
            "name": "ModelDeployment",
            "value": "ModelDeployment",
            "description": "Model deployment"
          }
        ]
      }
    },
    "DeveloperMessage": {
      "type": "object",
      "description": "A developer message within a chat, always with the 'developer' role.",
      "properties": {
        "content": {
          "type": "array",
          "description": "The contents of the developer message.",
          "items": {
            "$ref": "#/definitions/TextContent"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatMessage"
        }
      ],
      "x-ms-discriminator-value": "developer"
    },
    "EmbeddingConfiguration": {
      "type": "object",
      "description": "Embedding configuration class",
      "properties": {
        "modelDeploymentName": {
          "type": "string",
          "description": "Deployment name of embedding model. It can point to a model deployment either in the parent AIServices or a connection."
        },
        "embeddingField": {
          "type": "string",
          "description": "Embedding field"
        }
      },
      "required": [
        "modelDeploymentName",
        "embeddingField"
      ]
    },
    "Evaluation": {
      "type": "object",
      "description": "Evaluation Definition",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the evaluation.",
          "readOnly": true
        },
        "data": {
          "$ref": "#/definitions/InputData",
          "description": "Data for evaluation."
        },
        "displayName": {
          "type": "string",
          "description": "Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique."
        },
        "description": {
          "type": "string",
          "description": "Description of the evaluation. It can be used to store additional information about the evaluation and is mutable."
        },
        "status": {
          "type": "string",
          "description": "Status of the evaluation. It is set by service and is read-only.",
          "readOnly": true
        },
        "tags": {
          "type": "object",
          "description": "Evaluation's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "evaluators": {
          "type": "object",
          "description": "Evaluators to be used for the evaluation.",
          "additionalProperties": {
            "$ref": "#/definitions/EvaluatorConfiguration"
          }
        }
      },
      "required": [
        "id",
        "data",
        "evaluators"
      ]
    },
    "EvaluatorConfiguration": {
      "type": "object",
      "description": "Evaluator Configuration",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the evaluator."
        },
        "initParams": {
          "type": "object",
          "description": "Initialization parameters of the evaluator.",
          "additionalProperties": {}
        },
        "dataMapping": {
          "type": "object",
          "description": "Data parameters of the evaluator.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "ExtraParameters": {
      "type": "string",
      "description": "Controls what happens if extra parameters, undefined by the REST API, are passed in the JSON request payload.",
      "enum": [
        "error",
        "drop",
        "pass-through"
      ],
      "x-ms-enum": {
        "name": "ExtraParameters",
        "modelAsString": true,
        "values": [
          {
            "name": "error",
            "value": "error",
            "description": "The service will error if it detected extra parameters in the request payload. This is the service default."
          },
          {
            "name": "drop",
            "value": "drop",
            "description": "The service will ignore (drop) extra parameters in the request payload. It will only pass the known parameters to the back-end AI model."
          },
          {
            "name": "pass_through",
            "value": "pass-through",
            "description": "The service will pass extra parameters to the back-end AI model."
          }
        ]
      }
    },
    "FileContent": {
      "type": "object",
      "description": "A structured chat content item containing a file data item.",
      "properties": {
        "fileName": {
          "type": "string",
          "description": "The file name for this binary content."
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type for this binary content."
        },
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "URI where the binary content can be retrieved."
        },
        "dataUri": {
          "type": "string",
          "format": "uri",
          "description": "Data URI containing the binary content inlined."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Raw bytes for the binary content."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AIContent"
        }
      ],
      "x-ms-discriminator-value": "file"
    },
    "FileDatasetVersion": {
      "type": "object",
      "description": "FileDatasetVersion Definition",
      "properties": {
        "openAIPurpose": {
          "type": "string",
          "description": "Indicates OpenAI Purpose. FileDatasets created with this field will be compatible with OpenAI-specific features"
        }
      },
      "required": [
        "openAIPurpose"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DatasetVersion"
        }
      ],
      "x-ms-discriminator-value": "uri_file"
    },
    "FileSearchToolDefinition": {
      "type": "object",
      "description": "A tool definition for the OpenAI File Search feature.",
      "properties": {
        "maxNumResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of search results to return (optional)."
        },
        "rankingOptions": {
          "type": "object",
          "description": "Extra ranking options, including a threshold and a ranker.",
          "properties": {
            "scoreThreshold": {
              "type": "number",
              "format": "float",
              "description": "The minimum score to include (optional)."
            },
            "ranker": {
              "type": "string",
              "description": "The name of the ranker algorithm."
            }
          },
          "required": [
            "ranker"
          ]
        },
        "fileIds": {
          "type": "array",
          "description": "A list of file IDs to be searched.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "fileIds"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AgentToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "OpenAI.FileSearch"
    },
    "FolderDatasetVersion": {
      "type": "object",
      "description": "FileDatasetVersion Definition",
      "allOf": [
        {
          "$ref": "#/definitions/DatasetVersion"
        }
      ],
      "x-ms-discriminator-value": "uri_folder"
    },
    "FunctionToolOptions": {
      "type": "object",
      "description": "Options for a function-based tool behavior.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The function/tool name."
        },
        "description": {
          "type": "string",
          "description": "An optional description for the function-based tool."
        },
        "parameters": {
          "$ref": "#/definitions/JSONSchema",
          "description": "A JSON schema describing the function's parameters."
        },
        "strict": {
          "type": "boolean",
          "description": "Indicates whether strict validation is required."
        }
      },
      "required": [
        "name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AgentToolOptions"
        }
      ],
      "x-ms-discriminator-value": "Function"
    },
    "IdAssetReference": {
      "type": "object",
      "description": "Reference to an asset via its ARM resource ID.",
      "properties": {
        "assetId": {
          "type": "string",
          "description": "[Required] ARM resource ID of the asset.",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]"
        }
      },
      "required": [
        "assetId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetReferenceBase"
        }
      ],
      "x-ms-discriminator-value": "Id"
    },
    "ImageContent": {
      "type": "object",
      "description": "A structured chat content item containing an image reference.",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int16",
          "description": "Width of the image in pixels (optional)."
        },
        "height": {
          "type": "integer",
          "format": "int16",
          "description": "Height of the image in pixels (optional)."
        },
        "fileName": {
          "type": "string",
          "description": "The file name for this binary content."
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type for this binary content."
        },
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "URI where the binary content can be retrieved."
        },
        "dataUri": {
          "type": "string",
          "format": "uri",
          "description": "Data URI containing the binary content inlined."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Raw bytes for the binary content."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AIContent"
        }
      ],
      "x-ms-discriminator-value": "image"
    },
    "Index": {
      "type": "object",
      "description": "Index resource Definition",
      "properties": {
        "type": {
          "$ref": "#/definitions/IndexType",
          "description": "Type of index"
        },
        "stage": {
          "type": "string",
          "description": "Asset stage",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "id": {
          "type": "string",
          "description": "A unique identifier for the asset, assetId probably?",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "The version of the resource",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The asset description text."
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "name",
        "version"
      ]
    },
    "IndexType": {
      "type": "string",
      "description": "Enumerates known index types, but also allows any custom string fallback.",
      "enum": [
        "AzureSearch",
        "CosmosDBNoSqlVectorStore",
        "ManagedAzureSearch"
      ],
      "x-ms-enum": {
        "name": "IndexType",
        "modelAsString": true,
        "values": [
          {
            "name": "azureSearch",
            "value": "AzureSearch",
            "description": "Azure search"
          },
          {
            "name": "cosmosDB",
            "value": "CosmosDBNoSqlVectorStore",
            "description": "CosmosDB"
          },
          {
            "name": "managedAzureSearch",
            "value": "ManagedAzureSearch",
            "description": "Managed Azure Search"
          }
        ]
      }
    },
    "InputData": {
      "type": "object",
      "description": "Abstract data class.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the data"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "InputDataset": {
      "type": "object",
      "description": "Dataset as source for evaluation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Evaluation input data"
        }
      },
      "required": [
        "id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InputData"
        }
      ],
      "x-ms-discriminator-value": "dataset"
    },
    "JSONAny": {
      "type": "object",
      "description": "A JSON-compatible type that can be a primitive, object, or array.",
      "properties": {
        "stringValue": {
          "type": "string",
          "description": "A string value, if present."
        },
        "intValue": {
          "type": "integer",
          "format": "int64",
          "description": "A 64-bit integer value, if present."
        },
        "floatValue": {
          "type": "number",
          "format": "double",
          "description": "A floating-point (double precision) value, if present."
        },
        "boolValue": {
          "type": "boolean",
          "description": "A boolean value, if present."
        },
        "nullValue": {
          "type": "boolean",
          "description": "Indicates this represents a JSON null if set to true."
        },
        "arrayValue": {
          "type": "array",
          "description": "A JSON array, if present, expressed as an array of JSONAny elements.",
          "items": {
            "$ref": "#/definitions/JSONAny"
          },
          "x-ms-identifiers": []
        },
        "objectValue": {
          "type": "object",
          "description": "A JSON object, if present, expressed as a dictionary from string to JSONAny.",
          "additionalProperties": {
            "$ref": "#/definitions/JSONAny"
          }
        }
      }
    },
    "JSONSchema": {
      "type": "object",
      "description": "Represents a JSON schema describing object properties and required fields.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The JSON schema type (e.g., 'object', 'string', 'number')."
        },
        "properties": {
          "type": "object",
          "description": "The properties defined in this JSON schema.",
          "additionalProperties": {
            "$ref": "#/definitions/JSONSchema"
          }
        },
        "required": {
          "type": "array",
          "description": "A list of required property names in this schema.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "type",
        "properties"
      ]
    },
    "ListSortOrder": {
      "type": "string",
      "description": "The available sorting options when requesting a list of response objects.",
      "enum": [
        "asc",
        "desc"
      ],
      "x-ms-enum": {
        "name": "ListSortOrder",
        "modelAsString": true,
        "values": [
          {
            "name": "ascending",
            "value": "asc",
            "description": "Specifies an ascending sort order."
          },
          {
            "name": "descending",
            "value": "desc",
            "description": "Specifies a descending sort order."
          }
        ]
      }
    },
    "ListViewType": {
      "type": "string",
      "description": "List View Type Definition",
      "enum": [
        "ActiveOnly",
        "ArchivedOnly",
        "All"
      ],
      "x-ms-enum": {
        "name": "ListViewType",
        "modelAsString": true,
        "values": [
          {
            "name": "ActiveOnly",
            "value": "ActiveOnly",
            "description": "List only active items."
          },
          {
            "name": "ArchivedOnly",
            "value": "ArchivedOnly",
            "description": "List only archived items."
          },
          {
            "name": "All",
            "value": "All",
            "description": "List all items."
          }
        ]
      }
    },
    "ManagedAzureAISearchIndex": {
      "type": "object",
      "description": "Managed Azure AI Search Index Definition",
      "properties": {
        "vectorStoreId": {
          "type": "string",
          "description": "Vector store id of managed index"
        }
      },
      "required": [
        "vectorStoreId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Index"
        }
      ],
      "x-ms-discriminator-value": "ManagedAzureSearch"
    },
    "MessageRole": {
      "type": "string",
      "description": "The possible values for roles attributed to messages in a thread.",
      "enum": [
        "user",
        "assistant"
      ],
      "x-ms-enum": {
        "name": "MessageRole",
        "modelAsString": true,
        "values": [
          {
            "name": "user",
            "value": "user",
            "description": "The role representing the end-user."
          },
          {
            "name": "assistant",
            "value": "assistant",
            "description": "The role representing the assistant."
          }
        ]
      }
    },
    "ModelDeployment": {
      "type": "object",
      "description": "Model Deployment Definition",
      "properties": {
        "modelName": {
          "type": "string",
          "description": "Publisher-specific name of the deployed model",
          "readOnly": true
        },
        "modelVersion": {
          "type": "string",
          "description": "Publisher-specific version of the deployed model",
          "readOnly": true
        },
        "modelPublisher": {
          "type": "string",
          "description": "Name of the deployed model's publisher",
          "readOnly": true
        },
        "capabilities": {
          "type": "object",
          "description": "Capabilities of deployed model",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "Sku of the model deployment",
          "readOnly": true
        },
        "connectionName": {
          "type": "string",
          "description": "Name of the connection the deployment comes from",
          "readOnly": true
        }
      },
      "required": [
        "modelName",
        "modelVersion",
        "modelPublisher",
        "capabilities",
        "sku"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Deployment"
        }
      ],
      "x-ms-discriminator-value": "ModelDeployment"
    },
    "NoRequest": {
      "type": "object",
      "description": "A no-op model to represent an empty request."
    },
    "NoneToolChoiceBehavior": {
      "type": "object",
      "description": "Behavior specifying that no tools may be chosen.",
      "allOf": [
        {
          "$ref": "#/definitions/ToolChoiceBehavior"
        }
      ],
      "x-ms-discriminator-value": "none"
    },
    "OpenAIAgentModel": {
      "type": "object",
      "description": "A specialized AgentModel for OpenAI-based providers.",
      "properties": {
        "options": {
          "$ref": "#/definitions/OpenAIModelOptions",
          "description": "The provider-specific options for this OpenAI-based model."
        }
      },
      "required": [
        "options"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AgentModel"
        }
      ],
      "x-ms-discriminator-value": "openai"
    },
    "OpenAIModelOptions": {
      "type": "object",
      "description": "A set of provider-specific configuration and behavior options for OpenAI.",
      "properties": {
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "The sampling temperature to use that controls the apparent creativity of generated completions.\nHigher values will make output more random while lower values will make results more focused\nand deterministic.\nIt is not recommended to modify temperature and topP for the same completions request as the\ninteraction of these two settings is difficult to predict."
        },
        "topP": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature called nucleus sampling. This value causes the\nmodel to consider the results of tokens with the provided probability mass. As an example, a\nvalue of 0.15 will cause only the tokens comprising the top 15% of probability mass to be\nconsidered.\nIt is not recommended to modify temperature and topP for the same completions request as the\ninteraction of these two settings is difficult to predict."
        }
      }
    },
    "OpenApiToolDefinition": {
      "type": "object",
      "description": "A tool definition for an OpenAI-based API described by an OpenAPI specification.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the OpenAPI-based tool."
        },
        "description": {
          "type": "string",
          "description": "A description for the tool."
        },
        "openApiSpec": {
          "type": "string",
          "description": "A string containing the raw OpenAPI specification data."
        }
      },
      "required": [
        "name",
        "openApiSpec"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AgentToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "OpenAI.OpenApi"
    },
    "OutputPathAssetReference": {
      "type": "object",
      "description": "Reference to an asset via its path in a job output.",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "ARM resource ID of the job."
        },
        "path": {
          "type": "string",
          "description": "The path of the file/directory in the job output."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AssetReferenceBase"
        }
      ],
      "x-ms-discriminator-value": "OutputPath"
    },
    "PagedChatMessage": {
      "type": "object",
      "description": "Paged collection of ChatMessage items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ChatMessage items on this page",
          "items": {
            "$ref": "#/definitions/ChatMessage"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedConnection": {
      "type": "object",
      "description": "Paged collection of Connection items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Connection items on this page",
          "items": {
            "$ref": "#/definitions/Connection"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDatasetVersion": {
      "type": "object",
      "description": "Paged collection of DatasetVersion items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DatasetVersion items on this page",
          "items": {
            "$ref": "#/definitions/DatasetVersion"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDeployment": {
      "type": "object",
      "description": "Paged collection of Deployment items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Deployment items on this page",
          "items": {
            "$ref": "#/definitions/Deployment"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedEvaluation": {
      "type": "object",
      "description": "Paged collection of Evaluation items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Evaluation items on this page",
          "items": {
            "$ref": "#/definitions/Evaluation"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedIndex": {
      "type": "object",
      "description": "Paged collection of Index items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Index items on this page",
          "items": {
            "$ref": "#/definitions/Index"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedRun": {
      "type": "object",
      "description": "Paged collection of Run items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Run items on this page",
          "items": {
            "$ref": "#/definitions/Run"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PendingUploadCredentialType": {
      "type": "string",
      "description": "The type of credential used to access the storage account.",
      "enum": [
        "SAS"
      ],
      "x-ms-enum": {
        "name": "PendingUploadCredentialType",
        "modelAsString": true,
        "values": [
          {
            "name": "sas",
            "value": "SAS",
            "description": "SAS credential type."
          }
        ]
      }
    },
    "PendingUploadRequest": {
      "type": "object",
      "description": "Represents a request for a pending upload.",
      "properties": {
        "pendingUploadId": {
          "type": "string",
          "description": "If PendingUploadId is not provided, a random GUID will be used."
        },
        "connectionName": {
          "type": "string",
          "description": "Name of Azure blob storage connection to use for generating temporary SAS token"
        },
        "pendingUploadType": {
          "type": "string",
          "description": "TemporaryBlobReference is the only supported type.",
          "enum": [
            "TemporaryBlobReference"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "pendingUploadType"
      ]
    },
    "PendingUploadResponse": {
      "type": "object",
      "description": "Represents the response for a pending upload request",
      "properties": {
        "blobReferenceForConsumption": {
          "$ref": "#/definitions/BlobReferenceForConsumption",
          "description": "Container-level read, write, list SAS."
        },
        "pendingUploadId": {
          "type": "string",
          "description": "ID for this upload request."
        },
        "datasetVersion": {
          "type": "string",
          "description": "Version of dataset to be created if user did not specify version when initially creating upload"
        },
        "pendingUploadType": {
          "type": "string",
          "description": "TemporaryBlobReference is the only supported type",
          "enum": [
            "TemporaryBlobReference"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "blobReferenceForConsumption",
        "pendingUploadId",
        "pendingUploadType"
      ]
    },
    "PendingUploadType": {
      "type": "string",
      "description": "The type of pending upload.",
      "enum": [
        "None",
        "TemporaryBlobReference"
      ],
      "x-ms-enum": {
        "name": "PendingUploadType",
        "modelAsString": true,
        "values": [
          {
            "name": "none",
            "value": "None",
            "description": "No pending upload."
          },
          {
            "name": "temporaryBlobReference",
            "value": "TemporaryBlobReference",
            "description": "Temporary Blob Reference is the only supported type."
          }
        ]
      }
    },
    "ReferenceType": {
      "type": "string",
      "description": "Enum to determine which reference method to use for an asset.",
      "enum": [
        "Id",
        "DataPath",
        "OutputPath"
      ],
      "x-ms-enum": {
        "name": "ReferenceType",
        "modelAsString": true,
        "values": [
          {
            "name": "Id",
            "value": "Id",
            "description": "Id"
          },
          {
            "name": "DataPath",
            "value": "DataPath",
            "description": "DataPath"
          },
          {
            "name": "OutputPath",
            "value": "OutputPath",
            "description": "OutputPath"
          }
        ]
      }
    },
    "RefusalContent": {
      "type": "object",
      "description": "A structured chat content item containing model refusal information for a structured outputs request.",
      "properties": {
        "refusal": {
          "type": "string",
          "description": "Reason for refusal."
        }
      },
      "required": [
        "refusal"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AIContent"
        }
      ],
      "x-ms-discriminator-value": "refusal"
    },
    "RemoveStreamingOperation": {
      "type": "object",
      "description": "Removes part of a value at a JSON path.",
      "properties": {
        "s": {
          "type": "integer",
          "format": "int32",
          "description": "Start index of the removal."
        },
        "e": {
          "type": "integer",
          "format": "int32",
          "description": "End index of the removal."
        }
      },
      "required": [
        "s",
        "e"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/StreamingOperation"
        }
      ],
      "x-ms-discriminator-value": "remove"
    },
    "ReplaceStreamingOperation": {
      "type": "object",
      "description": "Replaces part of a string value at a JSON path.",
      "properties": {
        "v": {
          "type": "string",
          "description": "The new string value."
        },
        "s": {
          "type": "integer",
          "format": "int32",
          "description": "Start index of the replacement."
        },
        "e": {
          "type": "integer",
          "format": "int32",
          "description": "End index of the replacement."
        }
      },
      "required": [
        "v",
        "s",
        "e"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/StreamingOperation"
        }
      ],
      "x-ms-discriminator-value": "replace"
    },
    "RequiredToolChoiceBehavior": {
      "type": "object",
      "description": "Behavior specifying that the agent must always use the listed tools.",
      "properties": {
        "toolNames": {
          "type": "array",
          "description": "The tool names that the agent must use.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "toolNames"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ToolChoiceBehavior"
        }
      ],
      "x-ms-discriminator-value": "required"
    },
    "Run": {
      "type": "object",
      "description": "An agent-generated run record, including both the requested inputs and the final outputs.",
      "properties": {
        "agentId": {
          "type": "string",
          "description": "Unique identifier for the agent responsible for the run."
        },
        "runId": {
          "type": "string",
          "description": "Unique identifier for this run.",
          "readOnly": true
        },
        "createdAt": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp when the run was initiated (Unix time)."
        },
        "completedAt": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp when the run finished processing (Unix time)."
        },
        "runInputs": {
          "$ref": "#/definitions/RunInputs",
          "description": "The inputs that were used to start this run."
        },
        "runOutputs": {
          "$ref": "#/definitions/RunOutputs",
          "description": "The final outcome of this run, including status, output messages, token usage."
        },
        "options": {
          "$ref": "#/definitions/RunOptions",
          "description": "Optional configuration for run generation."
        },
        "userId": {
          "type": "string",
          "description": "Identifier for the user making the request."
        },
        "store": {
          "type": "boolean",
          "description": "Flag indicating whether to store the run and associated messages."
        }
      },
      "required": [
        "agentId",
        "runId",
        "createdAt",
        "completedAt",
        "runInputs",
        "runOutputs"
      ]
    },
    "RunInputs": {
      "type": "object",
      "description": "Parameters for creating a new run request.",
      "properties": {
        "agent": {
          "$ref": "#/definitions/Agent",
          "description": "The agent responsible for generating the run."
        },
        "input": {
          "type": "array",
          "description": "The list of input messages for the run.",
          "items": {
            "$ref": "#/definitions/ChatMessage"
          },
          "x-ms-identifiers": []
        },
        "threadId": {
          "type": "string",
          "description": "Optional identifier for an existing conversation thread."
        },
        "metadata": {
          "type": "object",
          "description": "Optional metadata associated with the run request.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "options": {
          "$ref": "#/definitions/RunOptions",
          "description": "Optional configuration for run generation."
        },
        "userId": {
          "type": "string",
          "description": "Identifier for the user making the request."
        }
      },
      "required": [
        "agent",
        "input"
      ]
    },
    "RunOptions": {
      "type": "object",
      "description": "Represents advanced options for controlling agent runs.",
      "properties": {
        "truncationStrategy": {
          "$ref": "#/definitions/TruncationStrategy",
          "description": "Strategy for truncating messages when input exceeds model limits."
        }
      }
    },
    "RunOutputs": {
      "type": "object",
      "description": "Fields describing the final run outcome, including status, output messages, and usage.",
      "properties": {
        "status": {
          "$ref": "#/definitions/RunOutputsStatus",
          "description": "Final status of the run request. Known values: 'inProgress', 'incomplete', 'cancelled', 'failed', 'completed' - or custom string."
        },
        "messages": {
          "type": "array",
          "description": "List of output messages generated by the agent.",
          "items": {
            "$ref": "#/definitions/ChatMessage"
          },
          "x-ms-identifiers": []
        },
        "usage": {
          "$ref": "#/definitions/CompletionUsage",
          "description": "Token usage details for this run."
        },
        "incompleteDetails": {
          "type": "object",
          "description": "Details about why the response is incomplete, if applicable.",
          "properties": {
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "reason"
          ]
        }
      },
      "required": [
        "status",
        "messages",
        "usage"
      ]
    },
    "RunOutputsStatus": {
      "type": "string",
      "description": "Known status values for a run, plus a fallback string for unrecognized statuses.",
      "enum": [
        "inProgress",
        "incomplete",
        "cancelled",
        "failed",
        "completed"
      ],
      "x-ms-enum": {
        "name": "RunOutputsStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "inProgress",
            "value": "inProgress",
            "description": "The run is ongoing."
          },
          {
            "name": "incomplete",
            "value": "incomplete",
            "description": "The run did not produce a complete output."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "The run was canceled."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "The run failed."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "The run completed successfully."
          }
        ]
      }
    },
    "RunUpdate": {
      "type": "object",
      "description": "Streaming update for a run.",
      "properties": {
        "rId": {
          "type": "string",
          "description": "The run ID."
        },
        "tId": {
          "type": "string",
          "description": "The thread ID."
        },
        "d": {
          "$ref": "#/definitions/StreamingOperation",
          "description": "The delta operation applied to the run."
        },
        "u": {
          "$ref": "#/definitions/CompletionUsage",
          "description": "Usage metrics update."
        }
      },
      "required": [
        "rId",
        "tId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/StreamingUpdate"
        }
      ],
      "x-ms-discriminator-value": "run"
    },
    "SasCredential": {
      "type": "object",
      "description": "SAS Credential definition",
      "properties": {
        "sasToken": {
          "type": "string",
          "description": "SAS Token",
          "readOnly": true
        }
      },
      "required": [
        "sasToken"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredential"
        }
      ],
      "x-ms-discriminator-value": "SAS"
    },
    "SetStreamingOperation": {
      "type": "object",
      "description": "Sets (overwrites) the value at a JSON path.",
      "properties": {
        "value": {
          "$ref": "#/definitions/JSONAny",
          "description": "The value to apply to the operation, expressed as a JSON-compatible type."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/StreamingOperation"
        }
      ],
      "x-ms-discriminator-value": "set"
    },
    "Sku": {
      "type": "object",
      "description": "Sku information",
      "properties": {
        "capacity": {
          "type": "integer",
          "format": "int64",
          "description": "Sku capacity"
        },
        "family": {
          "type": "string",
          "description": "Sku family"
        },
        "name": {
          "type": "string",
          "description": "Sku name"
        },
        "size": {
          "type": "string",
          "description": "Sku size"
        },
        "tier": {
          "type": "string",
          "description": "Sku tier"
        }
      },
      "required": [
        "capacity",
        "family",
        "name",
        "size",
        "tier"
      ]
    },
    "StreamingAgentCompletionUpdate": {
      "type": "object",
      "description": "A streaming update indicating incremental changes to an agent-generated completion.",
      "properties": {
        "messageId": {
          "type": "string",
          "description": "Identifier of the message being updated."
        },
        "authorName": {
          "type": "string",
          "description": "Optional name of the message author."
        },
        "authorRole": {
          "$ref": "#/definitions/AuthorRole",
          "description": "Role of the author for the updated message."
        },
        "update": {
          "$ref": "#/definitions/StreamingOperation",
          "description": "Optional content updates from the AI."
        },
        "usage": {
          "$ref": "#/definitions/CompletionUsage",
          "description": "Token usage information associated with this streaming update."
        }
      },
      "required": [
        "messageId",
        "usage"
      ]
    },
    "StreamingOperation": {
      "type": "object",
      "description": "Represents an operation to update a specific JSON path with streamed data.",
      "properties": {
        "op": {
          "type": "string",
          "description": "Discriminator property for StreamingOperation."
        },
        "jsonPath": {
          "type": "string",
          "description": "The JSON path to the operation."
        },
        "type": {
          "type": "string",
          "description": "The type of operation being performed.",
          "enum": [
            "append",
            "remove",
            "replace",
            "set"
          ],
          "x-ms-enum": {
            "modelAsString": true
          }
        }
      },
      "discriminator": "op",
      "required": [
        "op",
        "jsonPath",
        "type"
      ]
    },
    "StreamingUpdate": {
      "type": "object",
      "description": "The delta operation applied to the resource.",
      "properties": {
        "d": {
          "$ref": "#/definitions/StreamingOperation",
          "description": "The delta operation applied to the resource."
        },
        "type": {
          "type": "string",
          "description": "The type of the streaming update.",
          "enum": [
            "run",
            "thread",
            "chat_message",
            "ai_content"
          ],
          "x-ms-enum": {
            "modelAsString": true
          }
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "SystemMessage": {
      "type": "object",
      "description": "A system message within a chat, always with the 'system' role.",
      "properties": {
        "content": {
          "type": "array",
          "description": "The contents of the system message.",
          "items": {
            "$ref": "#/definitions/TextContent"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatMessage"
        }
      ],
      "x-ms-discriminator-value": "system"
    },
    "TextContent": {
      "type": "object",
      "description": "A structured chat content item containing plain text.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text content."
        },
        "annotations": {
          "type": "array",
          "description": "A list of annotations in the text content.",
          "items": {
            "$ref": "#/definitions/Annotations"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "text"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AIContent"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "Thread": {
      "type": "object",
      "description": "Represents a chat thread, which can contain multiple messages.",
      "properties": {
        "threadId": {
          "type": "string",
          "description": "A unique identifier for this thread.",
          "readOnly": true
        },
        "messages": {
          "type": "array",
          "description": "A list of messages in this thread.",
          "items": {
            "$ref": "#/definitions/ChatMessage"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "threadId",
        "messages"
      ]
    },
    "ThreadUpdate": {
      "type": "object",
      "description": "Streaming update for a thread.",
      "properties": {
        "tId": {
          "type": "string",
          "description": "The thread ID."
        },
        "d": {
          "$ref": "#/definitions/StreamingOperation",
          "description": "The delta operation applied to the thread."
        },
        "u": {
          "$ref": "#/definitions/CompletionUsage",
          "description": "Usage metrics update."
        }
      },
      "required": [
        "tId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/StreamingUpdate"
        }
      ],
      "x-ms-discriminator-value": "thread"
    },
    "ToolCallContent": {
      "type": "object",
      "description": "A structured chat content item describing a tool call request.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the tool to call."
        },
        "toolCallId": {
          "type": "string",
          "description": "The unique ID of the tool call."
        },
        "arguments": {
          "$ref": "#/definitions/JSONAny",
          "description": "Arguments passed to this tool call, expressed as JSON-like data rather than `unknown`."
        }
      },
      "required": [
        "name",
        "toolCallId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AIContent"
        }
      ],
      "x-ms-discriminator-value": "toolCall"
    },
    "ToolChoiceBehavior": {
      "type": "object",
      "description": "The base behavior for how an agent chooses among available tools.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The kind of tool-choice strategy."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "ToolMessage": {
      "type": "object",
      "description": "A tool message within a chat, always with the 'tool' role.",
      "properties": {
        "content": {
          "type": "array",
          "description": "The contents of the tool message.",
          "items": {
            "$ref": "#/definitions/ToolResultContent"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatMessage"
        }
      ],
      "x-ms-discriminator-value": "tool"
    },
    "ToolResultContent": {
      "type": "object",
      "description": "A structured chat content item describing a tool result.",
      "properties": {
        "toolCallId": {
          "type": "string",
          "description": "The ID of the tool call to which this result pertains."
        },
        "results": {
          "$ref": "#/definitions/JSONAny",
          "description": "The results returned from the tool, using JSONAny instead of `unknown`."
        }
      },
      "required": [
        "toolCallId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AIContent"
        }
      ],
      "x-ms-discriminator-value": "toolResult"
    },
    "TruncationStrategy": {
      "type": "object",
      "description": "Describes how to truncate messages if they exceed model or provider limits.",
      "properties": {
        "type": {
          "$ref": "#/definitions/TruncationStrategyType",
          "description": "The type of truncation strategy to apply. Known values: 'auto', 'lastMessages', or a custom string."
        },
        "lastMessages": {
          "type": "integer",
          "format": "int32",
          "description": "The number of most recent messages to retain when using 'lastMessages' strategy."
        }
      },
      "required": [
        "type"
      ]
    },
    "TruncationStrategyType": {
      "type": "string",
      "description": "Enumerates known truncation strategy types, but also allows any custom fallback string.",
      "enum": [
        "auto",
        "lastMessages"
      ],
      "x-ms-enum": {
        "name": "TruncationStrategyType",
        "modelAsString": true,
        "values": [
          {
            "name": "auto",
            "value": "auto",
            "description": "Automatically truncate messages to fit limits."
          },
          {
            "name": "lastMessages",
            "value": "lastMessages",
            "description": "Truncate older messages, keeping only the last few."
          }
        ]
      }
    },
    "UserMessage": {
      "type": "object",
      "description": "A user message within a chat, always with the 'user' role.",
      "properties": {
        "content": {
          "type": "array",
          "description": "The contents of the user message.",
          "items": {}
        }
      },
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ChatMessage"
        }
      ],
      "x-ms-discriminator-value": "user"
    },
    "VideoContent": {
      "type": "object",
      "description": "A structured chat content item containing a video reference.",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int16",
          "description": "Duration of video in seconds (optional)."
        },
        "width": {
          "type": "integer",
          "format": "int16",
          "description": "Width of video in pixels (optional)."
        },
        "height": {
          "type": "integer",
          "format": "int16",
          "description": "Height of video in pixels (optional)."
        },
        "fileName": {
          "type": "string",
          "description": "The file name for this binary content."
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type for this binary content."
        },
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "URI where the binary content can be retrieved."
        },
        "dataUri": {
          "type": "string",
          "format": "uri",
          "description": "Data URI containing the binary content inlined."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Raw bytes for the binary content."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AIContent"
        }
      ],
      "x-ms-discriminator-value": "video"
    }
  },
  "parameters": {
    "Azure.Core.ClientRequestIdHeader": {
      "name": "x-ms-client-request-id",
      "in": "header",
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "required": false,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "clientRequestId"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "Azure.Core.MaxPageSizeQueryParameter": {
      "name": "maxpagesize",
      "in": "query",
      "description": "The maximum number of result items per page.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.RepeatabilityRequestHeaders.repeatabilityFirstSent": {
      "name": "Repeatability-First-Sent",
      "in": "header",
      "description": "Specifies the date and time at which the request was first created.",
      "required": false,
      "type": "string",
      "format": "date-time",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "repeatabilityFirstSent"
    },
    "Azure.Core.RepeatabilityRequestHeaders.repeatabilityRequestId": {
      "name": "Repeatability-Request-ID",
      "in": "header",
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "repeatabilityRequestId"
    },
    "Azure.Core.SkipQueryParameter": {
      "name": "skip",
      "in": "query",
      "description": "The number of result items to skip.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.TopQueryParameter": {
      "name": "top",
      "in": "query",
      "description": "The number of result items to return.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    }
  }
}
