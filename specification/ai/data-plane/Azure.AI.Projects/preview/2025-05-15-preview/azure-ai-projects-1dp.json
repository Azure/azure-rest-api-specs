{
  "swagger": "2.0",
  "info": {
    "title": "Azure AI",
    "version": "2025-05-15-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "Project endpoint. In the form \"https://<your-ai-services-account-name>.services.ai.azure.com/api/projects/_project\"\nif your Foundry Hub has only one Project, or to use the default Project in your Hub. Or in the form \n\"https://<your-ai-services-account-name>.services.ai.azure.com/api/projects/<your-project-name>\" if you want to explicitly\nspecify the Foundry Project name.",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://cognitiveservices.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://cognitiveservices.azure.com/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/connections": {
      "get": {
        "operationId": "Connections_List",
        "description": "List all connections in the project, without populating connection credentials",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "connectionType",
            "in": "query",
            "description": "List connections of this specific type",
            "required": false,
            "type": "string",
            "enum": [
              "AzureOpenAI",
              "AzureBlob",
              "AzureStorageAccount",
              "CognitiveSearch",
              "CosmosDB",
              "ApiKey",
              "AppConfig",
              "AppInsights",
              "CustomKeys"
            ],
            "x-ms-enum": {
              "name": "ConnectionType",
              "modelAsString": true,
              "values": [
                {
                  "name": "AzureOpenAI",
                  "value": "AzureOpenAI",
                  "description": "Azure OpenAI Service"
                },
                {
                  "name": "AzureBlobStorage",
                  "value": "AzureBlob",
                  "description": "Azure Blob Storage, with specified container"
                },
                {
                  "name": "AzureStorageAccount",
                  "value": "AzureStorageAccount",
                  "description": "Azure Blob Storage, with container not specified (used by Agents)"
                },
                {
                  "name": "AzureAISearch",
                  "value": "CognitiveSearch",
                  "description": "Azure AI Search"
                },
                {
                  "name": "CosmosDB",
                  "value": "CosmosDB",
                  "description": "CosmosDB"
                },
                {
                  "name": "APIKey",
                  "value": "ApiKey",
                  "description": "Generic connection that uses API Key authentication"
                },
                {
                  "name": "ApplicationConfiguration",
                  "value": "AppConfig",
                  "description": "Application Configuration"
                },
                {
                  "name": "ApplicationInsights",
                  "value": "AppInsights",
                  "description": "Application Insights"
                },
                {
                  "name": "Custom",
                  "value": "CustomKeys",
                  "description": "Custom Keys"
                }
              ]
            }
          },
          {
            "name": "defaultConnection",
            "in": "query",
            "description": "List connections that are default connections",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedConnection"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/connections/{name}": {
      "get": {
        "operationId": "Connections_Get",
        "description": "Get a connection by name, without populating connection credentials",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Connection"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/connections/{name}/withCredentials": {
      "post": {
        "operationId": "Connections_GetWithCredentials",
        "description": "Get a connection by name, with its connection credentials",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Connection"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/connections/withCredentials": {
      "post": {
        "operationId": "Connections_ListWithCredentials",
        "description": "List all connections in the project, with their connection credentials",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "connectionType",
            "in": "query",
            "description": "List connections of this specific type",
            "required": false,
            "type": "string",
            "enum": [
              "AzureOpenAI",
              "AzureBlob",
              "AzureStorageAccount",
              "CognitiveSearch",
              "CosmosDB",
              "ApiKey",
              "AppConfig",
              "AppInsights",
              "CustomKeys"
            ],
            "x-ms-enum": {
              "name": "ConnectionType",
              "modelAsString": true,
              "values": [
                {
                  "name": "AzureOpenAI",
                  "value": "AzureOpenAI",
                  "description": "Azure OpenAI Service"
                },
                {
                  "name": "AzureBlobStorage",
                  "value": "AzureBlob",
                  "description": "Azure Blob Storage, with specified container"
                },
                {
                  "name": "AzureStorageAccount",
                  "value": "AzureStorageAccount",
                  "description": "Azure Blob Storage, with container not specified (used by Agents)"
                },
                {
                  "name": "AzureAISearch",
                  "value": "CognitiveSearch",
                  "description": "Azure AI Search"
                },
                {
                  "name": "CosmosDB",
                  "value": "CosmosDB",
                  "description": "CosmosDB"
                },
                {
                  "name": "APIKey",
                  "value": "ApiKey",
                  "description": "Generic connection that uses API Key authentication"
                },
                {
                  "name": "ApplicationConfiguration",
                  "value": "AppConfig",
                  "description": "Application Configuration"
                },
                {
                  "name": "ApplicationInsights",
                  "value": "AppInsights",
                  "description": "Application Insights"
                },
                {
                  "name": "Custom",
                  "value": "CustomKeys",
                  "description": "Custom Keys"
                }
              ]
            }
          },
          {
            "name": "defaultConnection",
            "in": "query",
            "description": "List connections that are default connections",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Internal.ConnectionPaged"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/datasets": {
      "get": {
        "operationId": "Datasets_ListLatest",
        "description": "List the latest version of each DatasetVersion",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount > page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/datasets/{name}/versions": {
      "get": {
        "operationId": "Datasets_ListVersions",
        "description": "List all versions of the given DatasetVersion",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount > page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/datasets/{name}/versions/{version}": {
      "get": {
        "operationId": "Datasets_GetVersion",
        "description": "Get the specific version of the DatasetVersion",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Datasets_CreateOrUpdateVersion",
        "description": "Create a new or update an existing DatasetVersion with the given version id",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to create or replace.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The definition of the DatasetVersion to create or update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetVersionUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/DatasetVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Datasets_DeleteVersion",
        "description": "Delete the specific version of the DatasetVersion",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the DatasetVersion to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions/{version}/credentials": {
      "post": {
        "operationId": "Datasets_GetCredentials",
        "description": "Get download sas for dataset version.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to operate on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Parameters for the action",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AssetCredentialResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/datasets/{name}/versions/{version}/startPendingUpload": {
      "post": {
        "operationId": "Datasets_StartPendingUploadVersion",
        "description": "Start a new or get an existing pending upload of a dataset for a specific version.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the DatasetVersion to operate on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Parameters for the action",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PendingUploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PendingUploadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "operationId": "Deployments_List",
        "description": "List all deployed models in the project",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "modelPublisher",
            "in": "query",
            "description": "Model publisher to filter models by",
            "required": false,
            "type": "string"
          },
          {
            "name": "modelName",
            "in": "query",
            "description": "Model name (the publisher specific name) to filter models by",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDeployment"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/deployments/{name}": {
      "get": {
        "operationId": "Deployments_Get",
        "description": "Get a deployed model.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the deployment",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Deployment"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluationResults": {
      "get": {
        "operationId": "EvaluationResults_ListLatest",
        "description": "List the latest version of each EvaluationResult",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount > page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedEvaluationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/evaluationResults/{name}/versions": {
      "get": {
        "operationId": "EvaluationResults_ListVersions",
        "description": "List all versions of the given EvaluationResult",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount > page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedEvaluationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/evaluationResults/{name}/versions/{version}": {
      "get": {
        "operationId": "EvaluationResults_GetVersion",
        "description": "Get the specific version of the EvaluationResult",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the EvaluationResult to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EvaluationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "EvaluationResults_CreateOrUpdateVersion",
        "description": "Create a new or update an existing EvaluationResult with the given version id",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the EvaluationResult to create or replace.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The definition of the EvaluationResult to create or update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EvaluationResultUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EvaluationResult"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/EvaluationResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "EvaluationResults_DeleteVersion",
        "description": "Delete the specific version of the EvaluationResult",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the EvaluationResult to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluationResults/{name}/versions/{version}/credentials": {
      "post": {
        "operationId": "EvaluationResults_GetCredentials",
        "description": "Enable downloading json.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the EvaluationResult to operate on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Parameters for the action",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetCredentialRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AssetCredentialResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluationResults/{name}/versions/{version}/startPendingUpload": {
      "post": {
        "operationId": "EvaluationResults_StartPendingUpload",
        "description": "Create or start a pending upload of a evaluation results for a specific version.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the EvaluationResult to operate on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Parameters for the action",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PendingUploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PendingUploadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluations/checkannotation": {
      "get": {
        "operationId": "Evaluations_CheckAnnotation",
        "description": "Check annotation supported by the service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/evaluations/operations/{operationId}": {
      "get": {
        "operationId": "Evaluations_OperationResults",
        "description": "Poll for the operation results.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation ID for the polling operation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {}
              },
              "x-ms-identifiers": []
            }
          }
        }
      }
    },
    "/evaluations/runs": {
      "get": {
        "operationId": "Evaluations_List",
        "description": "List evaluation runs",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "query",
            "description": "Comma-separated list of property names (and optionally values). Example: prop1,prop2=value2",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedEvaluation"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/evaluations/runs/{name}": {
      "get": {
        "operationId": "Evaluations_Get",
        "description": "Get an evaluation run by name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluations/runs:run": {
      "post": {
        "operationId": "Evaluations_CreateRun",
        "description": "Creates an evaluation run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "evaluation",
            "in": "body",
            "description": "Evaluation to be run",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluations/runs:runAgent": {
      "post": {
        "operationId": "Evaluations_CreateAgentEvaluation",
        "description": "Creates an agent evaluation run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "evaluation",
            "in": "body",
            "description": "Agent evaluation to be run",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentEvaluationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/AgentEvaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluations/runs:updateUpload/{name}": {
      "patch": {
        "operationId": "Evaluations_UploadUpdateRun",
        "description": "Update the uploaded the result to an evaluation run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the evaluation run to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "evaluation",
            "in": "body",
            "description": "Evaluation upload to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EvaluationUploadUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluations/runs:upload": {
      "post": {
        "operationId": "Evaluations_UploadRun",
        "description": "Upload the result to an evaluation run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "evaluation",
            "in": "body",
            "description": "Evaluation to upload.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EvaluationUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluations/submitannotation": {
      "post": {
        "operationId": "Evaluations_SubmitAnnotation",
        "description": "Submit the annotation.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "annotationDTO",
            "in": "body",
            "description": "Annotation data inputList of supported annotation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnnotationDTO"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/indexes": {
      "get": {
        "operationId": "Indexes_ListLatest",
        "description": "List the latest version of each Index",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount > page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/indexes/{name}/versions": {
      "get": {
        "operationId": "Indexes_ListVersions",
        "description": "List all versions of the given Index",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount > page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/indexes/{name}/versions/{version}": {
      "get": {
        "operationId": "Indexes_GetVersion",
        "description": "Get the specific version of the Index",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the Index to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Indexes_CreateOrUpdateVersion",
        "description": "Create a new or update an existing Index with the given version id",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The specific version id of the Index to create or replace.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The definition of the Index to create or update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndexUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Indexes_DeleteVersion",
        "description": "Delete the specific version of the Index",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the Index to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/runs": {
      "get": {
        "operationId": "RedTeams_List",
        "description": "List a redteam by name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedRedTeam"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/redTeams/runs/{name}": {
      "get": {
        "operationId": "RedTeams_Get",
        "description": "Get a redteam by name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Identifier of the red team.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.ClientRequestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedTeam"
            },
            "headers": {
              "x-ms-client-request-id": {
                "type": "string",
                "format": "uuid",
                "description": "An opaque, globally-unique, client-generated string identifier for the request."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/runs:run": {
      "post": {
        "operationId": "RedTeams_CreateRun",
        "description": "Creates a redteam run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "RedTeam",
            "in": "body",
            "description": "Redteam to be run",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedTeam"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/RedTeam"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/runs:updateUpload/{name}": {
      "patch": {
        "operationId": "RedTeams_UploadUpdateRun",
        "description": "Update the uploaded the result to an redteam run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the redteam run to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "redteam",
            "in": "body",
            "description": "Redteam upload to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedTeamUploadUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedTeam"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/runs:upload": {
      "post": {
        "operationId": "RedTeams_UploadRun",
        "description": "Upload the result to a redteam run.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "redteam",
            "in": "body",
            "description": "Redteam to upload.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedTeamUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RedTeam"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/simulation/attackobjectives": {
      "get": {
        "operationId": "RedTeams_GetAttackObjectives",
        "description": "Get the attack objectives.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "riskTypes",
            "in": "query",
            "description": "Risk types for the attack objectives dataset",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "The language for the attack objectives dataset, defaults to 'en'",
            "required": false,
            "type": "string"
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "The strategy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttackObjective"
              },
              "x-ms-identifiers": []
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/simulation/chat/completions/submit": {
      "post": {
        "operationId": "RedTeams_SubmitSimulation",
        "description": "Submit a request for simulation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Properties of a Prompt Version.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SimulationDTO"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "$ref": "#/definitions/LongRunningResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/simulation/jailbreak/{type}": {
      "get": {
        "operationId": "RedTeams_GetJailBreakDatasetWithType",
        "description": "Get the jailbreak dataset with type.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type of jailbreak dataset",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/simulation/jailbreak/": {
      "get": {
        "operationId": "RedTeams_GetJailBreakDataset",
        "description": "Get the jailbreak dataset.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/simulation/template/parameters/{type}": {
      "get": {
        "operationId": "RedTeams_GetTemplateParametersWithType",
        "description": "Get template parameters with type.",
        "produces": [
          "text/plain",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type for the template parameters",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/simulation/template/parameters/": {
      "get": {
        "operationId": "RedTeams_GetTemplateParameters",
        "description": "Get template parameters.",
        "produces": [
          "text/plain",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/redTeams/simulation/template/parameters/image": {
      "get": {
        "operationId": "RedTeams_GetTemplateParametersImage",
        "description": "Get the template parameters image.",
        "produces": [
          "text/plain",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "path",
            "in": "query",
            "description": "Image path.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AOAIModelConfig": {
      "type": "object",
      "description": "Azure OpenAI model configuration. The API version would be selected by the service for querying the model.",
      "properties": {
        "azureEndpoint": {
          "type": "string",
          "description": "Endpoint targetURI for AOAI model."
        },
        "apiKey": {
          "type": "string",
          "description": "API Key for AOAI model."
        },
        "azureDeployment": {
          "type": "string",
          "description": "Deployment name for AOAI model."
        }
      },
      "required": [
        "azureEndpoint",
        "apiKey",
        "azureDeployment"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TargetModelConfig"
        }
      ],
      "x-ms-discriminator-value": "AOAI"
    },
    "AgentEvaluation": {
      "type": "object",
      "description": "Evaluation response for agent evaluation run.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the agent evaluation run."
        },
        "status": {
          "type": "string",
          "description": "Status of the agent evaluation. Options: Running, Completed, Failed."
        },
        "result": {
          "type": "array",
          "description": "The agent evaluation result.",
          "items": {
            "$ref": "#/definitions/AgentEvaluationResult"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "AgentEvaluationRedactionConfiguration": {
      "type": "object",
      "description": "The redaction configuration will allow the user to control what is redacted.",
      "properties": {
        "redactScoreProperties": {
          "type": "boolean",
          "description": "Redact score properties. If not specified, the default is to redact in production."
        }
      }
    },
    "AgentEvaluationRequest": {
      "type": "object",
      "description": "Evaluation request for agent run.",
      "properties": {
        "runId": {
          "type": "string",
          "description": "Identifier of the agent run."
        },
        "threadId": {
          "type": "string",
          "description": "Identifier of the agent thread. This field is mandatory currently, but it will be optional in the future."
        },
        "evaluators": {
          "type": "object",
          "description": "Evaluators to be used for the evaluation.",
          "additionalProperties": {
            "$ref": "#/definitions/EvaluatorConfiguration"
          }
        },
        "samplingConfiguration": {
          "$ref": "#/definitions/AgentEvaluationSamplingConfiguration",
          "description": "Sampling configuration for the evaluation."
        },
        "redactionConfiguration": {
          "$ref": "#/definitions/AgentEvaluationRedactionConfiguration",
          "description": "Redaction configuration for the evaluation."
        },
        "appInsightsConnectionString": {
          "type": "string",
          "description": "Optional and temporary way to pass the AppInsights connection string to the evaluator. When this string is not null, the evaluation results will be logged to Azure AppInsights."
        }
      },
      "required": [
        "runId",
        "evaluators"
      ]
    },
    "AgentEvaluationResult": {
      "type": "object",
      "description": "Result for the agent evaluation evaluator run.",
      "properties": {
        "evaluator": {
          "type": "string",
          "description": "Evaluator's name. This is the name of the evaluator that was used to evaluate the agent's completion."
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "Score of the given evaluator. No restriction on range."
        },
        "status": {
          "type": "string",
          "description": "Status of the evaluator result. Options: Running, Completed, Failed, NotApplicable."
        },
        "reason": {
          "type": "string",
          "description": "Reasoning for the evaluation result."
        },
        "version": {
          "type": "string",
          "description": "Version of the evaluator that was used to evaluate the agent's completion."
        },
        "threadId": {
          "type": "string",
          "description": "The unique identifier of the thread."
        },
        "runId": {
          "type": "string",
          "description": "The unique identifier of the run."
        },
        "error": {
          "type": "string",
          "description": "A string explaining why there was an error, if applicable."
        },
        "additionalDetails": {
          "type": "object",
          "description": "Additional properties relevant to the evaluator. These will differ between evaluators.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "evaluator",
        "score",
        "status",
        "runId"
      ]
    },
    "AgentEvaluationSamplingConfiguration": {
      "type": "object",
      "description": "Definition for sampling strategy.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the sampling strategy."
        },
        "samplingPercent": {
          "type": "number",
          "format": "float",
          "description": "Percentage of sampling per hour (0-100)."
        },
        "maxRequestRate": {
          "type": "number",
          "format": "float",
          "description": "Maximum request rate per hour (0 to 1000)."
        }
      },
      "required": [
        "name",
        "samplingPercent",
        "maxRequestRate"
      ]
    },
    "AnnotationDTO": {
      "type": "object",
      "description": "Represents the data transfer object for an annotation.",
      "properties": {
        "AnnotationTask": {
          "type": "string",
          "description": "The task associated with the annotation."
        },
        "ContentType": {
          "type": "string",
          "description": "The type of content being annotated."
        },
        "UserTextList": {
          "type": "array",
          "description": "A list of user-provided text inputs.",
          "items": {
            "type": "string"
          }
        },
        "Contents": {
          "type": "array",
          "description": "A collection of content objects related to the annotation.",
          "items": {
            "$ref": "#/definitions/Content"
          },
          "x-ms-identifiers": []
        },
        "MetricList": {
          "type": "array",
          "description": "A list of metrics associated with the annotation.",
          "items": {
            "type": "string"
          }
        },
        "PromptVersion": {
          "type": "string",
          "description": "The version of the prompt used for the annotation."
        },
        "UserAgent": {
          "type": "string",
          "description": "The user agent information."
        },
        "PartnerId": {
          "type": "string",
          "description": "The partner identifier."
        },
        "ModelId": {
          "type": "string",
          "description": "The model identifier."
        },
        "InferenceType": {
          "type": "string",
          "description": "The type of inference performed."
        },
        "ClientRequestId": {
          "type": "string",
          "description": "The client request identifier."
        }
      },
      "required": [
        "AnnotationTask",
        "ContentType",
        "UserTextList",
        "Contents",
        "MetricList",
        "PromptVersion",
        "UserAgent",
        "PartnerId",
        "ModelId",
        "InferenceType",
        "ClientRequestId"
      ]
    },
    "ApiKeyCredentials": {
      "type": "object",
      "description": "API Key Credential definition",
      "properties": {
        "apiKey": {
          "type": "string",
          "description": "API Key",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredentials"
        }
      ],
      "x-ms-discriminator-value": "ApiKey"
    },
    "AssetCredentialRequest": {
      "type": "object",
      "description": "Asset Credential Request",
      "properties": {
        "BlobUri": {
          "type": "string",
          "description": "Blob URI"
        }
      },
      "required": [
        "BlobUri"
      ]
    },
    "AssetCredentialResponse": {
      "type": "object",
      "description": "Represents a reference to a blob for consumption",
      "properties": {
        "blobReferenceForConsumption": {
          "$ref": "#/definitions/BlobReferenceForConsumption",
          "description": "Credential info to access the storage account."
        }
      },
      "required": [
        "blobReferenceForConsumption"
      ]
    },
    "AttackObjective": {
      "type": "object",
      "description": "Attack Objective",
      "properties": {
        "Id": {
          "type": "string",
          "description": "The unique identifier."
        },
        "Metadata": {
          "$ref": "#/definitions/Metadata",
          "description": "The metadata."
        },
        "Source": {
          "type": "array",
          "description": "List of sources.",
          "items": {
            "type": "string"
          }
        },
        "Modality": {
          "type": "string",
          "description": "The modality."
        },
        "Messages": {
          "type": "array",
          "description": "The messages.",
          "items": {
            "$ref": "#/definitions/Message"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "Id",
        "Source",
        "Modality",
        "Messages"
      ]
    },
    "AttackStrategy": {
      "type": "string",
      "description": "Strategies for attacks.",
      "enum": [
        "easy",
        "moderate",
        "difficult",
        "ascii_art",
        "ascii_smuggler",
        "atbash",
        "base64",
        "binary",
        "caesar",
        "character_space",
        "jailbreak",
        "ansii_attack",
        "character_swap",
        "suffix_append",
        "string_join",
        "unicode_confusable",
        "unicode_substitution",
        "diacritic",
        "flip",
        "leetspeak",
        "rot13",
        "morse",
        "url",
        "baseline"
      ],
      "x-ms-enum": {
        "name": "AttackStrategy",
        "modelAsString": true,
        "values": [
          {
            "name": "Easy",
            "value": "easy",
            "description": "Represents a default set of easy complexity attacks. Easy complexity attacks require less effort, such as translation of a prompt into some encoding, and does not require any Large Language Model to convert or orchestrate."
          },
          {
            "name": "Moderate",
            "value": "moderate",
            "description": "Represents a default set of moderate complexity attacks. Moderate complexity attacks require having access to resources such as another generative AI model."
          },
          {
            "name": "Difficult",
            "value": "difficult",
            "description": "Represents a default set of difficult complexity attacks. Difficult complexity attacks include attacks that require access to significant resources and effort to execute an attack such as knowledge of search-based algorithms in addition to a generative AI model."
          },
          {
            "name": "AsciiArt",
            "value": "ascii_art",
            "description": "Generates visual art using ASCII characters, often used for creative or obfuscation purposes."
          },
          {
            "name": "AsciiSmuggler",
            "value": "ascii_smuggler",
            "description": "Conceals data within ASCII characters, making it harder to detect."
          },
          {
            "name": "Atbash",
            "value": "atbash",
            "description": "Implements the Atbash cipher, a simple substitution cipher where each letter is mapped to its reverse."
          },
          {
            "name": "Base64",
            "value": "base64",
            "description": "Encodes binary data into a text format using Base64, commonly used for data transmission."
          },
          {
            "name": "Binary",
            "value": "binary",
            "description": "Converts text into binary code, representing data in a series of 0s and 1s."
          },
          {
            "name": "Caesar",
            "value": "caesar",
            "description": "Applies the Caesar cipher, a substitution cipher that shifts characters by a fixed number of positions."
          },
          {
            "name": "CharacterSpace",
            "value": "character_space",
            "description": "Alters text by adding spaces between characters, often used for obfuscation."
          },
          {
            "name": "Jailbreak",
            "value": "jailbreak",
            "description": "Injects specially crafted prompts to bypass AI safeguards, known as User Injected Prompt Attacks (UPIA)."
          },
          {
            "name": "AnsiiAttack",
            "value": "ansii_attack",
            "description": "Utilizes ANSI escape sequences to manipulate text appearance and behavior."
          },
          {
            "name": "CharacterSwap",
            "value": "character_swap",
            "description": "Swaps characters within text to create variations or obfuscate the original content."
          },
          {
            "name": "SuffixAppend",
            "value": "suffix_append",
            "description": "Appends an adversarial suffix to the prompt."
          },
          {
            "name": "StringJoin",
            "value": "string_join",
            "description": "Joins multiple strings together, often used for concatenation or obfuscation."
          },
          {
            "name": "UnicodeConfusable",
            "value": "unicode_confusable",
            "description": "Uses Unicode characters that look similar to standard characters, creating visual confusion."
          },
          {
            "name": "UnicodeSubstitution",
            "value": "unicode_substitution",
            "description": "Substitutes standard characters with Unicode equivalents, often for obfuscation."
          },
          {
            "name": "Diacritic",
            "value": "diacritic",
            "description": "Adds diacritical marks to characters, changing their appearance and sometimes their meaning."
          },
          {
            "name": "Flip",
            "value": "flip",
            "description": "Flips characters from front to back, creating a mirrored effect."
          },
          {
            "name": "Leetspeak",
            "value": "leetspeak",
            "description": "Transforms text into Leetspeak, a form of encoding that replaces letters with similar-looking numbers or symbols."
          },
          {
            "name": "ROT13",
            "value": "rot13",
            "description": "Applies the ROT13 cipher, a simple substitution cipher that shifts characters by 13 positions."
          },
          {
            "name": "Morse",
            "value": "morse",
            "description": "Encodes text into Morse code, using dots and dashes to represent characters."
          },
          {
            "name": "Url",
            "value": "url",
            "description": "Encodes text into URL format."
          },
          {
            "name": "Baseline",
            "value": "baseline",
            "description": "Represents the baseline direct adversarial probing, which is used by attack strategies as the attack objective."
          }
        ]
      }
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "AzureAISearchIndex": {
      "type": "object",
      "description": "Azure AI Search Index Definition",
      "properties": {
        "connectionName": {
          "type": "string",
          "description": "Name of connection to Azure AI Search",
          "x-ms-mutability": [
            "create"
          ]
        },
        "indexName": {
          "type": "string",
          "description": "Name of index in Azure AI Search resource to attach",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "required": [
        "connectionName",
        "indexName"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Index"
        }
      ],
      "x-ms-discriminator-value": "AzureSearch"
    },
    "AzureAISearchIndexUpdate": {
      "type": "object",
      "description": "Azure AI Search Index Definition",
      "allOf": [
        {
          "$ref": "#/definitions/IndexUpdate"
        }
      ],
      "x-ms-discriminator-value": "AzureSearch"
    },
    "BaseCredentials": {
      "type": "object",
      "description": "A base class for connection credentials",
      "properties": {
        "authType": {
          "$ref": "#/definitions/CredentialType",
          "description": "The type of credential used by the connection",
          "readOnly": true
        }
      },
      "discriminator": "authType",
      "required": [
        "authType"
      ]
    },
    "BlobReferenceCredentialType": {
      "type": "string",
      "description": "Blob Reference Credential Type",
      "enum": [
        "SAS"
      ],
      "x-ms-enum": {
        "name": "BlobReferenceCredentialType",
        "modelAsString": true,
        "values": [
          {
            "name": "SAS",
            "value": "SAS",
            "description": "Shared Access Signature"
          }
        ]
      }
    },
    "BlobReferenceForConsumption": {
      "type": "object",
      "description": "Represents a reference to a blob for consumption",
      "properties": {
        "blobUri": {
          "type": "string",
          "description": "Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path"
        },
        "storageAccountArmId": {
          "type": "string",
          "description": "ARM ID of the storage account to use."
        },
        "credential": {
          "$ref": "#/definitions/SasCredential",
          "description": "Credential info to access the storage account."
        }
      },
      "required": [
        "blobUri",
        "storageAccountArmId",
        "credential"
      ]
    },
    "Connection": {
      "type": "object",
      "description": "Response from the list and get connections operations",
      "properties": {
        "authType": {
          "type": "string",
          "description": "Discriminator property for Connection."
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "$ref": "#/definitions/ConnectionType",
          "description": "Category of the connection",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "The connection URL to be used for this service",
          "readOnly": true
        },
        "isDefault": {
          "type": "boolean",
          "description": "Whether the connection is tagged as the default connection of its type",
          "readOnly": true
        },
        "credentials": {
          "$ref": "#/definitions/BaseCredentials",
          "description": "The credentials used by the connection",
          "readOnly": true
        },
        "metadata": {
          "type": "object",
          "description": "Metadata of the connection",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "discriminator": "authType",
      "required": [
        "authType",
        "name",
        "type",
        "target",
        "isDefault",
        "credentials",
        "metadata"
      ]
    },
    "ConnectionType": {
      "type": "string",
      "description": "The Type (or category) of the connection",
      "enum": [
        "AzureOpenAI",
        "AzureBlob",
        "AzureStorageAccount",
        "CognitiveSearch",
        "CosmosDB",
        "ApiKey",
        "AppConfig",
        "AppInsights",
        "CustomKeys"
      ],
      "x-ms-enum": {
        "name": "ConnectionType",
        "modelAsString": true,
        "values": [
          {
            "name": "AzureOpenAI",
            "value": "AzureOpenAI",
            "description": "Azure OpenAI Service"
          },
          {
            "name": "AzureBlobStorage",
            "value": "AzureBlob",
            "description": "Azure Blob Storage, with specified container"
          },
          {
            "name": "AzureStorageAccount",
            "value": "AzureStorageAccount",
            "description": "Azure Blob Storage, with container not specified (used by Agents)"
          },
          {
            "name": "AzureAISearch",
            "value": "CognitiveSearch",
            "description": "Azure AI Search"
          },
          {
            "name": "CosmosDB",
            "value": "CosmosDB",
            "description": "CosmosDB"
          },
          {
            "name": "APIKey",
            "value": "ApiKey",
            "description": "Generic connection that uses API Key authentication"
          },
          {
            "name": "ApplicationConfiguration",
            "value": "AppConfig",
            "description": "Application Configuration"
          },
          {
            "name": "ApplicationInsights",
            "value": "AppInsights",
            "description": "Application Insights"
          },
          {
            "name": "Custom",
            "value": "CustomKeys",
            "description": "Custom Keys"
          }
        ]
      }
    },
    "Content": {
      "type": "object",
      "description": "Message content.",
      "properties": {
        "Messages": {
          "type": "array",
          "description": "The type of content.",
          "items": {}
        }
      },
      "required": [
        "Messages"
      ]
    },
    "CosmosDBIndex": {
      "type": "object",
      "description": "CosmosDB Vector Store Index Definition",
      "properties": {
        "connectionName": {
          "type": "string",
          "description": "Name of connection to CosmosDB",
          "x-ms-mutability": [
            "create"
          ]
        },
        "databaseName": {
          "type": "string",
          "description": "Name of the CosmosDB Database",
          "x-ms-mutability": [
            "create"
          ]
        },
        "containerName": {
          "type": "string",
          "description": "Name of CosmosDB Container",
          "x-ms-mutability": [
            "create"
          ]
        },
        "embeddingConfiguration": {
          "$ref": "#/definitions/EmbeddingConfiguration",
          "description": "Embedding model configuration",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "required": [
        "connectionName",
        "databaseName",
        "containerName",
        "embeddingConfiguration"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Index"
        }
      ],
      "x-ms-discriminator-value": "CosmosDBNoSqlVectorStore"
    },
    "CosmosDBIndexUpdate": {
      "type": "object",
      "description": "CosmosDB Vector Store Index Definition",
      "allOf": [
        {
          "$ref": "#/definitions/IndexUpdate"
        }
      ],
      "x-ms-discriminator-value": "CosmosDBNoSqlVectorStore"
    },
    "CredentialType": {
      "type": "string",
      "description": "The credential type used by the connection",
      "enum": [
        "ApiKey",
        "AAD",
        "SAS",
        "CustomKeys",
        "None"
      ],
      "x-ms-enum": {
        "name": "CredentialType",
        "modelAsString": true,
        "values": [
          {
            "name": "apiKey",
            "value": "ApiKey",
            "description": "API Key credential"
          },
          {
            "name": "entraId",
            "value": "AAD",
            "description": "Entra ID credential (formerly known as AAD)"
          },
          {
            "name": "SAS",
            "value": "SAS",
            "description": "Shared Access Signature (SAS) credential"
          },
          {
            "name": "custom",
            "value": "CustomKeys",
            "description": "Custom credential"
          },
          {
            "name": "None",
            "value": "None",
            "description": "No credential"
          }
        ]
      }
    },
    "CustomCredential": {
      "type": "object",
      "description": "Custom credential defintion",
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredentials"
        }
      ],
      "x-ms-discriminator-value": "CustomKeys"
    },
    "CustomizationParameters": {
      "type": "object",
      "description": "Customization Parameters",
      "properties": {
        "ApplicationScenario": {
          "type": "string",
          "description": "Application scenario."
        },
        "HarmCategories": {
          "type": "array",
          "description": "List of harm categories.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "HarmCategories"
      ]
    },
    "DatasetType": {
      "type": "string",
      "description": "Enum to determine the type of data.",
      "enum": [
        "uri_file",
        "uri_folder"
      ],
      "x-ms-enum": {
        "name": "DatasetType",
        "modelAsString": true,
        "values": [
          {
            "name": "uri_file",
            "value": "uri_file",
            "description": "URI file."
          },
          {
            "name": "uri_folder",
            "value": "uri_folder",
            "description": "URI folder."
          }
        ]
      }
    },
    "DatasetVersion": {
      "type": "object",
      "description": "DatasetVersion Definition",
      "properties": {
        "datasetUri": {
          "type": "string",
          "description": "[Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "type": {
          "$ref": "#/definitions/DatasetType",
          "description": "Dataset type"
        },
        "isReference": {
          "type": "boolean",
          "description": "Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted",
          "readOnly": true
        },
        "stage": {
          "type": "string",
          "description": "Asset stage",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "id": {
          "type": "string",
          "description": "A unique identifier for the asset, assetId probably?",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "The version of the resource",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The asset description text.",
          "x-ms-mutability": [
            "update",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "update",
            "create"
          ]
        }
      },
      "discriminator": "type",
      "required": [
        "datasetUri",
        "type",
        "name",
        "version"
      ]
    },
    "DatasetVersionUpdate": {
      "type": "object",
      "description": "DatasetVersion Definition",
      "properties": {
        "type": {
          "$ref": "#/definitions/DatasetType",
          "description": "Dataset type"
        },
        "stage": {
          "type": "string",
          "description": "Asset stage",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "description": {
          "type": "string",
          "description": "The asset description text.",
          "x-ms-mutability": [
            "update",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "update",
            "create"
          ]
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "Deployment": {
      "type": "object",
      "description": "Model Deployment Definition",
      "properties": {
        "type": {
          "$ref": "#/definitions/DeploymentType",
          "description": "The type of the deployment"
        },
        "name": {
          "type": "string",
          "description": "Name of the deployment",
          "readOnly": true
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "name"
      ]
    },
    "DeploymentType": {
      "type": "string",
      "enum": [
        "ModelDeployment"
      ],
      "x-ms-enum": {
        "name": "DeploymentType",
        "modelAsString": true,
        "values": [
          {
            "name": "ModelDeployment",
            "value": "ModelDeployment",
            "description": "Model deployment"
          }
        ]
      }
    },
    "EmbeddingConfiguration": {
      "type": "object",
      "description": "Embedding configuration class",
      "properties": {
        "modelDeploymentName": {
          "type": "string",
          "description": "Deployment name of embedding model. It can point to a model deployment either in the parent AIServices or a connection.",
          "x-ms-mutability": [
            "create"
          ]
        },
        "embeddingField": {
          "type": "string",
          "description": "Embedding field",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "required": [
        "modelDeploymentName",
        "embeddingField"
      ]
    },
    "EntraIDCredentials": {
      "type": "object",
      "description": "Entra ID credential definition",
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredentials"
        }
      ],
      "x-ms-discriminator-value": "AAD"
    },
    "Evaluation": {
      "type": "object",
      "description": "Evaluation Definition",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the evaluation.",
          "readOnly": true
        },
        "data": {
          "$ref": "#/definitions/InputData",
          "description": "Data for evaluation."
        },
        "target": {
          "$ref": "#/definitions/EvaluationTarget",
          "description": "Evaluation target specifying the model config and parameters",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique."
        },
        "description": {
          "type": "string",
          "description": "Description of the evaluation. It can be used to store additional information about the evaluation and is mutable."
        },
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "Metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the evaluation. It is set by service and is read-only.",
          "readOnly": true
        },
        "tags": {
          "type": "object",
          "description": "Evaluation's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "evaluators": {
          "type": "object",
          "description": "Evaluators to be used for the evaluation.",
          "additionalProperties": {
            "$ref": "#/definitions/EvaluatorConfiguration"
          }
        },
        "outputs": {
          "type": "object",
          "description": "Read-only result outputs. Evaluation Results will have logs and results under the eval_results folder. Example: { 'evaluationResultId': 'azureai://accounts/{AccountName}/projects/{myproject}/evaluationresults/{name}/versions/{version}', 'evaluationMetrics': '{serialized-json-metrics}' }",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "required": [
        "id",
        "data",
        "evaluators",
        "outputs"
      ]
    },
    "EvaluationResult": {
      "type": "object",
      "description": "Evaluation Result resource Definition",
      "properties": {
        "ResultType": {
          "$ref": "#/definitions/ResultType",
          "description": "Type of Evaluation result"
        },
        "Metrics": {
          "type": "object",
          "description": "Aggregated metrics",
          "additionalProperties": {
            "format": "double",
            "type": "number"
          }
        },
        "BlobUri": {
          "type": "string",
          "description": "Blob URI"
        },
        "stage": {
          "type": "string",
          "description": "Asset stage",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "id": {
          "type": "string",
          "description": "A unique identifier for the asset, assetId probably?",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "The version of the resource",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The asset description text.",
          "x-ms-mutability": [
            "update",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "update",
            "create"
          ]
        }
      },
      "required": [
        "name",
        "version"
      ]
    },
    "EvaluationResultUpdate": {
      "type": "object",
      "description": "Evaluation Result resource Definition",
      "properties": {
        "ResultType": {
          "$ref": "#/definitions/ResultType",
          "description": "Type of Evaluation result"
        },
        "Metrics": {
          "type": "object",
          "description": "Aggregated metrics",
          "additionalProperties": {
            "format": "double",
            "type": "number"
          }
        },
        "BlobUri": {
          "type": "string",
          "description": "Blob URI"
        },
        "stage": {
          "type": "string",
          "description": "Asset stage",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "description": {
          "type": "string",
          "description": "The asset description text.",
          "x-ms-mutability": [
            "update",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "update",
            "create"
          ]
        }
      }
    },
    "EvaluationTarget": {
      "type": "object",
      "description": "Target for the evaluation process.",
      "properties": {
        "systemMessage": {
          "type": "string",
          "description": "System message related to the evaluation target."
        },
        "modelConfig": {
          "$ref": "#/definitions/TargetModelConfig",
          "description": "Model configuration for the evaluation."
        },
        "modelParams": {
          "type": "object",
          "description": "A dictionary of parameters for the model.",
          "additionalProperties": {}
        }
      },
      "required": [
        "systemMessage",
        "modelConfig"
      ]
    },
    "EvaluationUpload": {
      "type": "object",
      "description": "Upload a local SDK evaluation run. Currently update supports status, outputs, properties, and tags updates.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the evaluation.",
          "readOnly": true
        },
        "data": {
          "$ref": "#/definitions/InputData",
          "description": "Data for evaluation."
        },
        "target": {
          "$ref": "#/definitions/EvaluationTarget",
          "description": "Evaluation target specifying the model config and parameters",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique."
        },
        "description": {
          "type": "string",
          "description": "Description of the evaluation. It can be used to store additional information about the evaluation and is mutable."
        },
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "Metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the evaluation. For upload: Failed or Completed."
        },
        "tags": {
          "type": "object",
          "description": "Evaluation's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "evaluators": {
          "type": "object",
          "description": "Evaluators to be used for the evaluation.",
          "additionalProperties": {
            "$ref": "#/definitions/EvaluatorConfiguration"
          }
        },
        "outputs": {
          "type": "object",
          "description": "Outputs of the evaluation as a dictionary of IDs. Example: { 'evaluationResultId': 'azureai://accounts/{AccountName}/projects/{myproject}/evaluationresults/{name}/versions/{version}'}",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "EvaluationUploadUpdate": {
      "type": "object",
      "description": "Upload a local SDK evaluation run. Currently update supports status, outputs, properties, and tags updates.",
      "properties": {
        "data": {
          "$ref": "#/definitions/InputDataUpdate",
          "description": "Data for evaluation."
        },
        "displayName": {
          "type": "string",
          "description": "Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique."
        },
        "description": {
          "type": "string",
          "description": "Description of the evaluation. It can be used to store additional information about the evaluation and is mutable."
        },
        "status": {
          "type": "string",
          "description": "Status of the evaluation. For upload: Failed or Completed."
        },
        "tags": {
          "type": "object",
          "description": "Evaluation's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "evaluators": {
          "type": "object",
          "description": "Evaluators to be used for the evaluation.",
          "additionalProperties": {
            "$ref": "#/definitions/EvaluatorConfigurationUpdate"
          }
        },
        "outputs": {
          "type": "object",
          "description": "Outputs of the evaluation as a dictionary of IDs. Example: { 'evaluationResultId': 'azureai://accounts/{AccountName}/projects/{myproject}/evaluationresults/{name}/versions/{version}'}",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EvaluatorConfiguration": {
      "type": "object",
      "description": "Evaluator Configuration",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the evaluator."
        },
        "initParams": {
          "type": "object",
          "description": "Initialization parameters of the evaluator.",
          "additionalProperties": {}
        },
        "dataMapping": {
          "type": "object",
          "description": "Data parameters of the evaluator.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "EvaluatorConfigurationUpdate": {
      "type": "object",
      "description": "Evaluator Configuration",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the evaluator."
        },
        "initParams": {
          "type": "object",
          "description": "Initialization parameters of the evaluator.",
          "additionalProperties": {}
        },
        "dataMapping": {
          "type": "object",
          "description": "Data parameters of the evaluator.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FileDatasetVersion": {
      "type": "object",
      "description": "FileDatasetVersion Definition",
      "properties": {
        "openAIPurpose": {
          "type": "string",
          "description": "Indicates OpenAI Purpose. FileDatasets created with this field will be compatible with OpenAI-specific features"
        }
      },
      "required": [
        "openAIPurpose"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DatasetVersion"
        }
      ],
      "x-ms-discriminator-value": "uri_file"
    },
    "FileDatasetVersionUpdate": {
      "type": "object",
      "description": "FileDatasetVersion Definition",
      "properties": {
        "openAIPurpose": {
          "type": "string",
          "description": "Indicates OpenAI Purpose. FileDatasets created with this field will be compatible with OpenAI-specific features"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DatasetVersionUpdate"
        }
      ],
      "x-ms-discriminator-value": "uri_file"
    },
    "FolderDatasetVersion": {
      "type": "object",
      "description": "FileDatasetVersion Definition",
      "allOf": [
        {
          "$ref": "#/definitions/DatasetVersion"
        }
      ],
      "x-ms-discriminator-value": "uri_folder"
    },
    "FolderDatasetVersionUpdate": {
      "type": "object",
      "description": "FileDatasetVersion Definition",
      "allOf": [
        {
          "$ref": "#/definitions/DatasetVersionUpdate"
        }
      ],
      "x-ms-discriminator-value": "uri_folder"
    },
    "Index": {
      "type": "object",
      "description": "Index resource Definition",
      "properties": {
        "type": {
          "$ref": "#/definitions/IndexType",
          "description": "Type of index"
        },
        "stage": {
          "type": "string",
          "description": "Asset stage",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "id": {
          "type": "string",
          "description": "A unique identifier for the asset, assetId probably?",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "The version of the resource",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The asset description text.",
          "x-ms-mutability": [
            "update",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "update",
            "create"
          ]
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "name",
        "version"
      ]
    },
    "IndexType": {
      "type": "string",
      "enum": [
        "AzureSearch",
        "CosmosDBNoSqlVectorStore",
        "ManagedAzureSearch"
      ],
      "x-ms-enum": {
        "name": "IndexType",
        "modelAsString": true,
        "values": [
          {
            "name": "azureSearch",
            "value": "AzureSearch",
            "description": "Azure search"
          },
          {
            "name": "cosmosDB",
            "value": "CosmosDBNoSqlVectorStore",
            "description": "CosmosDB"
          },
          {
            "name": "managedAzureSearch",
            "value": "ManagedAzureSearch",
            "description": "Managed Azure Search"
          }
        ]
      }
    },
    "IndexUpdate": {
      "type": "object",
      "description": "Index resource Definition",
      "properties": {
        "type": {
          "$ref": "#/definitions/IndexType",
          "description": "Type of index"
        },
        "stage": {
          "type": "string",
          "description": "Asset stage",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "description": {
          "type": "string",
          "description": "The asset description text.",
          "x-ms-mutability": [
            "update",
            "create"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "update",
            "create"
          ]
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "InputData": {
      "type": "object",
      "description": "Abstract data class.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the data"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "InputDataUpdate": {
      "type": "object",
      "description": "Abstract data class.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the data"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "InputDataset": {
      "type": "object",
      "description": "Dataset as source for evaluation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Evaluation input data"
        }
      },
      "required": [
        "id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InputData"
        }
      ],
      "x-ms-discriminator-value": "dataset"
    },
    "InputDatasetUpdate": {
      "type": "object",
      "description": "Dataset as source for evaluation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Evaluation input data"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InputDataUpdate"
        }
      ],
      "x-ms-discriminator-value": "dataset"
    },
    "Internal.ConnectionPaged": {
      "type": "object",
      "description": "Paged collection of Connection items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Connection items on this page",
          "items": {
            "$ref": "#/definitions/Connection"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ListSortOrder": {
      "type": "string",
      "description": "The available sorting options when requesting a list of response objects.",
      "enum": [
        "asc",
        "desc"
      ],
      "x-ms-enum": {
        "name": "ListSortOrder",
        "modelAsString": true,
        "values": [
          {
            "name": "ascending",
            "value": "asc",
            "description": "Specifies an ascending sort order."
          },
          {
            "name": "descending",
            "value": "desc",
            "description": "Specifies a descending sort order."
          }
        ]
      }
    },
    "ListViewType": {
      "type": "string",
      "description": "List View Type Definition",
      "enum": [
        "ActiveOnly",
        "ArchivedOnly",
        "All"
      ],
      "x-ms-enum": {
        "name": "ListViewType",
        "modelAsString": true,
        "values": [
          {
            "name": "ActiveOnly",
            "value": "ActiveOnly",
            "description": "List only active items."
          },
          {
            "name": "ArchivedOnly",
            "value": "ArchivedOnly",
            "description": "List only archived items."
          },
          {
            "name": "All",
            "value": "All",
            "description": "List all items."
          }
        ]
      }
    },
    "LongRunningResponse": {
      "type": "object",
      "description": "Long Running Response",
      "properties": {
        "Location": {
          "type": "string",
          "description": "The location."
        },
        "OperationResult": {
          "description": "The OperationResult."
        }
      },
      "required": [
        "Location",
        "OperationResult"
      ]
    },
    "MAASModelConfig": {
      "type": "object",
      "description": "MaaS model configuration. The API version would be selected by the service for querying the model.",
      "properties": {
        "azureEndpoint": {
          "type": "string",
          "description": "Endpoint targetURI for MAAS model."
        },
        "apiKey": {
          "type": "string",
          "description": "API Key for MAAS model."
        }
      },
      "required": [
        "azureEndpoint",
        "apiKey"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TargetModelConfig"
        }
      ],
      "x-ms-discriminator-value": "MAAS"
    },
    "ManagedAzureAISearchIndex": {
      "type": "object",
      "description": "Managed Azure AI Search Index Definition",
      "properties": {
        "vectorStoreId": {
          "type": "string",
          "description": "Vector store id of managed index",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "required": [
        "vectorStoreId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Index"
        }
      ],
      "x-ms-discriminator-value": "ManagedAzureSearch"
    },
    "ManagedAzureAISearchIndexUpdate": {
      "type": "object",
      "description": "Managed Azure AI Search Index Definition",
      "allOf": [
        {
          "$ref": "#/definitions/IndexUpdate"
        }
      ],
      "x-ms-discriminator-value": "ManagedAzureSearch"
    },
    "Message": {
      "type": "object",
      "description": "Message",
      "properties": {
        "Role": {
          "type": "string",
          "description": "The role."
        },
        "Content": {
          "type": "string",
          "description": "The content."
        }
      }
    },
    "Metadata": {
      "type": "object",
      "description": "Metadata",
      "properties": {
        "TargetHarms": {
          "type": "array",
          "description": "List of target harms.",
          "items": {
            "$ref": "#/definitions/TargetHarm"
          },
          "x-ms-identifiers": []
        },
        "Language": {
          "type": "string",
          "description": "The language"
        }
      },
      "required": [
        "TargetHarms",
        "Language"
      ]
    },
    "ModelDeployment": {
      "type": "object",
      "description": "Model Deployment Definition",
      "properties": {
        "modelName": {
          "type": "string",
          "description": "Publisher-specific name of the deployed model",
          "readOnly": true
        },
        "modelVersion": {
          "type": "string",
          "description": "Publisher-specific version of the deployed model",
          "readOnly": true
        },
        "modelPublisher": {
          "type": "string",
          "description": "Name of the deployed model's publisher",
          "readOnly": true
        },
        "capabilities": {
          "type": "object",
          "description": "Capabilities of deployed model",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "Sku of the model deployment",
          "readOnly": true
        },
        "connectionName": {
          "type": "string",
          "description": "Name of the connection the deployment comes from",
          "readOnly": true
        }
      },
      "required": [
        "modelName",
        "modelVersion",
        "modelPublisher",
        "capabilities",
        "sku"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Deployment"
        }
      ],
      "x-ms-discriminator-value": "ModelDeployment"
    },
    "NoAuthenticationCredentials": {
      "type": "object",
      "description": "Credentials that do not require authentication",
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredentials"
        }
      ],
      "x-ms-discriminator-value": "None"
    },
    "PagedConnection": {
      "type": "object",
      "description": "Paged collection of Connection items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Connection items on this page",
          "items": {
            "$ref": "#/definitions/Connection"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDatasetVersion": {
      "type": "object",
      "description": "Paged collection of DatasetVersion items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DatasetVersion items on this page",
          "items": {
            "$ref": "#/definitions/DatasetVersion"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDeployment": {
      "type": "object",
      "description": "Paged collection of Deployment items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Deployment items on this page",
          "items": {
            "$ref": "#/definitions/Deployment"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedEvaluation": {
      "type": "object",
      "description": "Paged collection of Evaluation items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Evaluation items on this page",
          "items": {
            "$ref": "#/definitions/Evaluation"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedEvaluationResult": {
      "type": "object",
      "description": "Paged collection of EvaluationResult items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The EvaluationResult items on this page",
          "items": {
            "$ref": "#/definitions/EvaluationResult"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedIndex": {
      "type": "object",
      "description": "Paged collection of Index items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Index items on this page",
          "items": {
            "$ref": "#/definitions/Index"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedRedTeam": {
      "type": "object",
      "description": "Paged collection of RedTeam items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RedTeam items on this page",
          "items": {
            "$ref": "#/definitions/RedTeam"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PendingUploadCredentialType": {
      "type": "string",
      "description": "The type of credential used to access the storage account.",
      "enum": [
        "SAS"
      ],
      "x-ms-enum": {
        "name": "PendingUploadCredentialType",
        "modelAsString": true,
        "values": [
          {
            "name": "sas",
            "value": "SAS",
            "description": "SAS credential type."
          }
        ]
      }
    },
    "PendingUploadRequest": {
      "type": "object",
      "description": "Represents a request for a pending upload.",
      "properties": {
        "pendingUploadId": {
          "type": "string",
          "description": "If PendingUploadId is not provided, a random GUID will be used."
        },
        "connectionName": {
          "type": "string",
          "description": "Name of Azure blob storage connection to use for generating temporary SAS token"
        },
        "pendingUploadType": {
          "type": "string",
          "description": "TemporaryBlobReference is the only supported type.",
          "enum": [
            "TemporaryBlobReference"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "pendingUploadType"
      ]
    },
    "PendingUploadResponse": {
      "type": "object",
      "description": "Represents the response for a pending upload request",
      "properties": {
        "blobReferenceForConsumption": {
          "$ref": "#/definitions/BlobReferenceForConsumption",
          "description": "Container-level read, write, list SAS."
        },
        "pendingUploadId": {
          "type": "string",
          "description": "ID for this upload request."
        },
        "datasetVersion": {
          "type": "string",
          "description": "Version of dataset to be created if user did not specify version when initially creating upload"
        },
        "pendingUploadType": {
          "type": "string",
          "description": "TemporaryBlobReference is the only supported type",
          "enum": [
            "TemporaryBlobReference"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "blobReferenceForConsumption",
        "pendingUploadId",
        "pendingUploadType"
      ]
    },
    "PendingUploadType": {
      "type": "string",
      "description": "The type of pending upload.",
      "enum": [
        "None",
        "TemporaryBlobReference"
      ],
      "x-ms-enum": {
        "name": "PendingUploadType",
        "modelAsString": true,
        "values": [
          {
            "name": "none",
            "value": "None",
            "description": "No pending upload."
          },
          {
            "name": "temporaryBlobReference",
            "value": "TemporaryBlobReference",
            "description": "Temporary Blob Reference is the only supported type."
          }
        ]
      }
    },
    "RedTeam": {
      "type": "object",
      "description": "Red team details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the red team.",
          "readOnly": true
        },
        "scanName": {
          "type": "string",
          "description": "Name of the red-team scan."
        },
        "numTurns": {
          "type": "integer",
          "format": "int32",
          "description": "Number of simulation rounds."
        },
        "attackStrategies": {
          "type": "array",
          "description": "List of attack strategies or nested lists of attack strategies.",
          "items": {
            "$ref": "#/definitions/AttackStrategy"
          }
        },
        "simulationOnly": {
          "type": "boolean",
          "description": "Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result."
        },
        "riskCategories": {
          "type": "array",
          "description": "List of risk categories to generate attack objectives for.",
          "items": {
            "$ref": "#/definitions/RiskCategory"
          }
        },
        "applicationScenario": {
          "type": "string",
          "description": "Application scenario for the red team operation, to generate scenario specific attacks."
        },
        "tags": {
          "type": "object",
          "description": "Red team's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "description": "Status of the red-team. It is set by service and is read-only.",
          "readOnly": true
        },
        "outputs": {
          "type": "object",
          "description": "Read-only result outputs. Example: { 'evaluationResultId': 'azureai://accounts/{AccountName}/projects/{myproject}/evaluationresults/{name}/versions/{version}', 'logId': 'azureai://accounts/{AccountName}/projects/{myproject}/datasets/{dataset-name}/versions/{dataset-version}' }",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "Metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "numTurns",
        "attackStrategies",
        "simulationOnly",
        "riskCategories",
        "outputs"
      ]
    },
    "RedTeamUpload": {
      "type": "object",
      "description": "Red team details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the red team.",
          "readOnly": true
        },
        "scanName": {
          "type": "string",
          "description": "Name of the red-team scan."
        },
        "numTurns": {
          "type": "integer",
          "format": "int32",
          "description": "Number of simulation rounds."
        },
        "attackStrategy": {
          "type": "array",
          "description": "List of attack strategies or nested lists of attack strategies.",
          "items": {
            "$ref": "#/definitions/AttackStrategy"
          }
        },
        "simulationOnly": {
          "type": "boolean",
          "description": "Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result."
        },
        "riskCategories": {
          "type": "array",
          "description": "List of risk categories to generate attack objectives for.",
          "items": {
            "$ref": "#/definitions/RiskCategory"
          }
        },
        "applicationScenario": {
          "type": "string",
          "description": "Application scenario for the red team operation, to generate scenario specific attacks."
        },
        "tags": {
          "type": "object",
          "description": "Red team's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "description": "Status of the red-team. It is set by service and is read-only.",
          "readOnly": true
        },
        "outputs": {
          "type": "object",
          "description": "Read-only result outputs. Example: { 'evaluationResultId': 'azureai://accounts/{AccountName}/projects/{myproject}/evaluationresults/{name}/versions/{version}' }",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "Metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        }
      },
      "required": [
        "id"
      ]
    },
    "RedTeamUploadUpdate": {
      "type": "object",
      "description": "Red team details.",
      "properties": {
        "scanName": {
          "type": "string",
          "description": "Name of the red-team scan."
        },
        "numTurns": {
          "type": "integer",
          "format": "int32",
          "description": "Number of simulation rounds."
        },
        "attackStrategy": {
          "type": "array",
          "description": "List of attack strategies or nested lists of attack strategies.",
          "items": {
            "$ref": "#/definitions/AttackStrategy"
          }
        },
        "simulationOnly": {
          "type": "boolean",
          "description": "Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result."
        },
        "riskCategories": {
          "type": "array",
          "description": "List of risk categories to generate attack objectives for.",
          "items": {
            "$ref": "#/definitions/RiskCategory"
          }
        },
        "applicationScenario": {
          "type": "string",
          "description": "Application scenario for the red team operation, to generate scenario specific attacks."
        },
        "tags": {
          "type": "object",
          "description": "Red team's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResultType": {
      "type": "string",
      "description": "Type of Evaluation result",
      "enum": [
        "Benchmark",
        "Evaluation",
        "Redteam",
        "Simulation"
      ],
      "x-ms-enum": {
        "name": "ResultType",
        "modelAsString": true,
        "values": [
          {
            "name": "Benchmark",
            "value": "Benchmark",
            "description": "Benchmark result"
          },
          {
            "name": "Evaluation",
            "value": "Evaluation",
            "description": "Evaluations Result"
          },
          {
            "name": "Redteam",
            "value": "Redteam",
            "description": "Red Team Result"
          },
          {
            "name": "Simulation",
            "value": "Simulation",
            "description": "Simulation Result"
          }
        ]
      }
    },
    "RiskCategory": {
      "type": "string",
      "description": "Risk category for the attack objective.",
      "enum": [
        "HateUnfairness",
        "Violence",
        "Sexual",
        "SelfHarm",
        "ProtectedMaterial",
        "CodeVulnerability",
        "UngroundedAttributes"
      ],
      "x-ms-enum": {
        "name": "RiskCategory",
        "modelAsString": true,
        "values": [
          {
            "name": "HateUnfairness",
            "value": "HateUnfairness",
            "description": "Represents content related to hate or unfairness."
          },
          {
            "name": "Violence",
            "value": "Violence",
            "description": "Represents content related to violence."
          },
          {
            "name": "Sexual",
            "value": "Sexual",
            "description": "Represents content of a sexual nature."
          },
          {
            "name": "SelfHarm",
            "value": "SelfHarm",
            "description": "Represents content related to self-harm."
          },
          {
            "name": "ProtectedMaterial",
            "value": "ProtectedMaterial",
            "description": "Represents content involving protected material."
          },
          {
            "name": "CodeVulnerability",
            "value": "CodeVulnerability",
            "description": "Represents content related to code vulnerabilities."
          },
          {
            "name": "UngroundedAttributes",
            "value": "UngroundedAttributes",
            "description": "Represents content with ungrounded attributes."
          }
        ]
      }
    },
    "SASCredentials": {
      "type": "object",
      "description": "Shared Access Signature (SAS) credential definition",
      "properties": {
        "sasToken": {
          "type": "string",
          "description": "SAS token",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredentials"
        }
      ],
      "x-ms-discriminator-value": "SAS"
    },
    "SasCredential": {
      "type": "object",
      "description": "SAS Credential definition",
      "properties": {
        "sasUri": {
          "type": "string",
          "description": "SAS uri",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Type of credential",
          "enum": [
            "SAS"
          ],
          "x-ms-enum": {
            "modelAsString": false
          },
          "readOnly": true
        }
      },
      "required": [
        "sasUri",
        "type"
      ]
    },
    "SimulationDTO": {
      "type": "object",
      "description": "Customization Parameters",
      "properties": {
        "Headers": {
          "type": "object",
          "description": "Additional headers.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Params": {
          "type": "object",
          "description": "Parameters.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TemplateParameters": {
          "type": "object",
          "description": "Template parameters.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "CustomizationParameters": {
          "$ref": "#/definitions/CustomizationParameters",
          "description": "Customization parameters."
        },
        "Json": {
          "type": "string",
          "description": "Json."
        },
        "Url": {
          "type": "string",
          "description": "Url."
        },
        "TemplateKey": {
          "type": "string",
          "description": "Template key."
        },
        "SimulationType": {
          "$ref": "#/definitions/SimulationType",
          "description": "Type of Simulation."
        },
        "IsMicrosoftTenant": {
          "type": "boolean",
          "description": "'True' if Microsoft internal tenant and 'False' otherwise."
        },
        "SubscriptionId": {
          "type": "string",
          "description": "Azure subscription id."
        },
        "ResourceGroupName": {
          "type": "string",
          "description": "Resource group name."
        },
        "WorkspaceName": {
          "type": "string",
          "description": "Workspace name."
        }
      }
    },
    "SimulationResultDTO": {
      "type": "object",
      "description": "Simulation Result",
      "properties": {
        "StatusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status Code."
        },
        "Content": {
          "type": "string",
          "description": "Content."
        }
      },
      "required": [
        "StatusCode",
        "Content"
      ]
    },
    "SimulationType": {
      "type": "string",
      "description": "Simulation type.",
      "enum": [
        "Default",
        "CustomPersona",
        "HarmTurnGenerator"
      ],
      "x-ms-enum": {
        "name": "SimulationType",
        "modelAsString": true,
        "values": [
          {
            "name": "Default",
            "value": "Default",
            "description": "Default simulation type."
          },
          {
            "name": "CustomPersona",
            "value": "CustomPersona",
            "description": "Custom persona simulation type."
          },
          {
            "name": "HarmTurnGenerator",
            "value": "HarmTurnGenerator",
            "description": "Harm turn generator simulation type."
          }
        ]
      }
    },
    "Sku": {
      "type": "object",
      "description": "Sku information",
      "properties": {
        "capacity": {
          "type": "integer",
          "format": "int64",
          "description": "Sku capacity"
        },
        "family": {
          "type": "string",
          "description": "Sku family"
        },
        "name": {
          "type": "string",
          "description": "Sku name"
        },
        "size": {
          "type": "string",
          "description": "Sku size"
        },
        "tier": {
          "type": "string",
          "description": "Sku tier"
        }
      },
      "required": [
        "capacity",
        "family",
        "name",
        "size",
        "tier"
      ]
    },
    "SystemData": {
      "type": "object",
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the resource was created at.",
          "readOnly": true
        },
        "createdBy": {
          "type": "string",
          "description": "The identity that created the resource.",
          "readOnly": true
        },
        "createdByType": {
          "type": "string",
          "description": "The identity type that created the resource.",
          "readOnly": true
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource last modification (UTC)",
          "readOnly": true
        }
      }
    },
    "TargetHarm": {
      "type": "object",
      "description": "Target Harm",
      "properties": {
        "RiskType": {
          "type": "string",
          "description": "The risk type."
        },
        "RiskSubType": {
          "type": "string",
          "description": "The risk sub type."
        }
      }
    },
    "TargetModelConfig": {
      "type": "object",
      "description": "Abstract class for model configuration.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the model configuration."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    }
  },
  "parameters": {
    "Azure.Core.ClientRequestIdHeader": {
      "name": "x-ms-client-request-id",
      "in": "header",
      "description": "An opaque, globally-unique, client-generated string identifier for the request.",
      "required": false,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "clientRequestId"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "Azure.Core.MaxPageSizeQueryParameter": {
      "name": "maxpagesize",
      "in": "query",
      "description": "The maximum number of result items per page.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.SkipQueryParameter": {
      "name": "skip",
      "in": "query",
      "description": "The number of result items to skip.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.TopQueryParameter": {
      "name": "top",
      "in": "query",
      "description": "The number of result items to return.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    }
  }
}
